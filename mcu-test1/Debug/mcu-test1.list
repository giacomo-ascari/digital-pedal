
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  0800cca8  0800cca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d850  0800d850  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d850  0800d850  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d858  0800d858  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d858  0800d858  0001d858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d85c  0800d85c  0001d85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00003ee0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003f74  20003f74  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a03  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000475f  00000000  00000000  00041ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00046228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  000470b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258ba  00000000  00000000  00047d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001692e  00000000  00000000  0006d63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c76d1  00000000  00000000  00083f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b639  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004390  00000000  00000000  0014b68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc90 	.word	0x0800cc90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800cc90 	.word	0x0800cc90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <readSampleFile>:
static void MX_GPIO_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

int32_t readSampleFile(FIL *file, int32_t *pBytesRead) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	; 0x38
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	int32_t sample, tmp;
	int32_t count = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
	FRESULT resRead;
	char readBuffer[16], sampleBuffer[16];
	do {
		resRead = f_read(file, &readBuffer, 1, pBytesRead);
 8000bf2:	f107 0118 	add.w	r1, r7, #24
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f009 feae 	bl	800a95c <f_read>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		sampleBuffer[count] = readBuffer[0];
 8000c06:	7e39      	ldrb	r1, [r7, #24]
 8000c08:	f107 0208 	add.w	r2, r7, #8
 8000c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0e:	4413      	add	r3, r2
 8000c10:	460a      	mov	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
		if (sampleBuffer[count] == '\n') {
 8000c14:	f107 0208 	add.w	r2, r7, #8
 8000c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c1a:	4413      	add	r3, r2
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b0a      	cmp	r3, #10
 8000c20:	d10a      	bne.n	8000c38 <readSampleFile+0x54>
			sampleBuffer[count] == '\0';
			tmp = sscanf(sampleBuffer, "%ld", &sample);
 8000c22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	4909      	ldr	r1, [pc, #36]	; (8000c50 <readSampleFile+0x6c>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f00a feef 	bl	800ba10 <siscanf>
 8000c32:	62f8      	str	r0, [r7, #44]	; 0x2c
			return sample;
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	e007      	b.n	8000c48 <readSampleFile+0x64>
		} else {
			count++;
 8000c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
		}
	} while(*pBytesRead > 0);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dcd5      	bgt.n	8000bf2 <readSampleFile+0xe>
	return 0;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3738      	adds	r7, #56	; 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	0800cca8 	.word	0x0800cca8

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	f5ad 5d28 	sub.w	sp, sp, #10752	; 0x2a00
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f001 f985 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 f9b5 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 fa1d 	bl	80010a4 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000c6a:	f004 fe5d 	bl	8005928 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000c6e:	f00a fa6d 	bl	800b14c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	pedalboard_t pedalboard;
	pedalboard.active_pedals = 0;
 8000c72:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c76:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
	pedalboard_append(&pedalboard, FUZZ);
 8000c7e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c82:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000c86:	2104      	movs	r1, #4
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fe05 	bl	8001898 <pedalboard_append>
	pedalboard_append(&pedalboard, BITCRUSHER_RS);
 8000c8e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c92:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fdfd 	bl	8001898 <pedalboard_append>
	pedalboard_append(&pedalboard, LPF);
 8000c9e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000ca2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fdf5 	bl	8001898 <pedalboard_append>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000cae:	f00a fa73 	bl	800b198 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	48bb      	ldr	r0, [pc, #748]	; (8000fa4 <main+0x350>)
 8000cb8:	f001 fcb4 	bl	8002624 <HAL_GPIO_WritePin>

		if (Appli_state == APPLICATION_READY)
 8000cbc:	4bba      	ldr	r3, [pc, #744]	; (8000fa8 <main+0x354>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	f040 80d5 	bne.w	8000e70 <main+0x21c>
		{
			//HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin) == GPIO_PIN_SET) {
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	48b8      	ldr	r0, [pc, #736]	; (8000fac <main+0x358>)
 8000cca:	f001 fc93 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d1ec      	bne.n	8000cae <main+0x5a>
				FRESULT resRead, resWrite;
				int32_t bytesRead, bytesWritten;
				int32_t inSample, outSample;
				char writeBuffer[16];

				resRead = f_open(&inFile, "in1.txt", FA_READ);
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	3b18      	subs	r3, #24
 8000cda:	2201      	movs	r2, #1
 8000cdc:	49b4      	ldr	r1, [pc, #720]	; (8000fb0 <main+0x35c>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f009 fc70 	bl	800a5c4 <f_open>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000cea:	f102 0207 	add.w	r2, r2, #7
 8000cee:	7013      	strb	r3, [r2, #0]
				resWrite = f_open(&outFile, "out1.txt", FA_CREATE_ALWAYS);
 8000cf0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000cf4:	f103 0318 	add.w	r3, r3, #24
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	49ad      	ldr	r1, [pc, #692]	; (8000fb4 <main+0x360>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f009 fc60 	bl	800a5c4 <f_open>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000d0a:	f102 0206 	add.w	r2, r2, #6
 8000d0e:	7013      	strb	r3, [r2, #0]
				f_close(&outFile);
 8000d10:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000d14:	f103 0318 	add.w	r3, r3, #24
 8000d18:	3b08      	subs	r3, #8
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00a f98f 	bl	800b03e <f_close>
				resWrite = f_open(&outFile, "out1.txt", FA_WRITE);
 8000d20:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000d24:	f103 0318 	add.w	r3, r3, #24
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	49a1      	ldr	r1, [pc, #644]	; (8000fb4 <main+0x360>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f009 fc48 	bl	800a5c4 <f_open>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000d3a:	f102 0206 	add.w	r2, r2, #6
 8000d3e:	7013      	strb	r3, [r2, #0]
				if(resRead == FR_OK && resWrite == FR_OK)
 8000d40:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000d44:	f103 0307 	add.w	r3, r3, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d171      	bne.n	8000e32 <main+0x1de>
 8000d4e:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000d52:	f103 0306 	add.w	r3, r3, #6
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d16a      	bne.n	8000e32 <main+0x1de>
				{
					// succ
					HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d62:	4895      	ldr	r0, [pc, #596]	; (8000fb8 <main+0x364>)
 8000d64:	f001 fc5e 	bl	8002624 <HAL_GPIO_WritePin>
					do {
						inSample = readSampleFile(&inFile, &bytesRead);
 8000d68:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000d6c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	3b18      	subs	r3, #24
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff33 	bl	8000be4 <readSampleFile>
 8000d7e:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000d82:	6018      	str	r0, [r3, #0]
						outSample = (int32_t)pedalboard_process(&pedalboard, (float)inSample);
 8000d84:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d92:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d96:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fe78 	bl	8001a94 <pedalboard_process>
 8000da4:	eef0 7a40 	vmov.f32	s15, s0
 8000da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dac:	ee17 3a90 	vmov	r3, s15
 8000db0:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8000db4:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000db8:	6013      	str	r3, [r2, #0]
						sprintf(writeBuffer, "%ld\n", outSample);
 8000dba:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000dbe:	f103 0320 	add.w	r3, r3, #32
 8000dc2:	f507 5227 	add.w	r2, r7, #10688	; 0x29c0
 8000dc6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000dca:	6812      	ldr	r2, [r2, #0]
 8000dcc:	497b      	ldr	r1, [pc, #492]	; (8000fbc <main+0x368>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00a fdfe 	bl	800b9d0 <siprintf>
						resWrite = f_write(&outFile, (uint8_t *)writeBuffer, strlen(writeBuffer), &bytesWritten);
 8000dd4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000dd8:	f103 0320 	add.w	r3, r3, #32
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff f9f7 	bl	80001d0 <strlen>
 8000de2:	4602      	mov	r2, r0
 8000de4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000de8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000dec:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 8000df0:	f101 0120 	add.w	r1, r1, #32
 8000df4:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8000df8:	f100 0018 	add.w	r0, r0, #24
 8000dfc:	3808      	subs	r0, #8
 8000dfe:	f009 ff0c 	bl	800ac1a <f_write>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000e08:	f102 0206 	add.w	r2, r2, #6
 8000e0c:	7013      	strb	r3, [r2, #0]
					} while(bytesRead > 0);
 8000e0e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000e12:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dca5      	bgt.n	8000d68 <main+0x114>

					HAL_Delay(1000);
 8000e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e20:	f001 f916 	bl	8002050 <HAL_Delay>
					HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e2a:	4863      	ldr	r0, [pc, #396]	; (8000fb8 <main+0x364>)
 8000e2c:	f001 fbfa 	bl	8002624 <HAL_GPIO_WritePin>
 8000e30:	e00f      	b.n	8000e52 <main+0x1fe>
				} else {
					// wtf
					HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e38:	485f      	ldr	r0, [pc, #380]	; (8000fb8 <main+0x364>)
 8000e3a:	f001 fbf3 	bl	8002624 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8000e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e42:	f001 f905 	bl	8002050 <HAL_Delay>
					HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4c:	485a      	ldr	r0, [pc, #360]	; (8000fb8 <main+0x364>)
 8000e4e:	f001 fbe9 	bl	8002624 <HAL_GPIO_WritePin>
				}
				f_close(&inFile);
 8000e52:	f107 0318 	add.w	r3, r7, #24
 8000e56:	3b18      	subs	r3, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f00a f8f0 	bl	800b03e <f_close>
				f_close(&outFile);
 8000e5e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e62:	f103 0318 	add.w	r3, r3, #24
 8000e66:	3b08      	subs	r3, #8
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f00a f8e8 	bl	800b03e <f_close>
 8000e6e:	e71e      	b.n	8000cae <main+0x5a>
			}
		}
		else if (Appli_state == APPLICATION_DISCONNECT || Appli_state == APPLICATION_IDLE)
 8000e70:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <main+0x354>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d003      	beq.n	8000e80 <main+0x22c>
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <main+0x354>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d175      	bne.n	8000f6c <main+0x318>
		{
			HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e86:	484c      	ldr	r0, [pc, #304]	; (8000fb8 <main+0x364>)
 8000e88:	f001 fbcc 	bl	8002624 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e92:	4849      	ldr	r0, [pc, #292]	; (8000fb8 <main+0x364>)
 8000e94:	f001 fbc6 	bl	8002624 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9e:	4846      	ldr	r0, [pc, #280]	; (8000fb8 <main+0x364>)
 8000ea0:	f001 fbc0 	bl	8002624 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eaa:	4843      	ldr	r0, [pc, #268]	; (8000fb8 <main+0x364>)
 8000eac:	f001 fbba 	bl	8002624 <HAL_GPIO_WritePin>

			if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin) == GPIO_PIN_SET) {
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	483e      	ldr	r0, [pc, #248]	; (8000fac <main+0x358>)
 8000eb4:	f001 fb9e 	bl	80025f4 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d170      	bne.n	8000fa0 <main+0x34c>
				// USE SINEWAVE as TEST
				int32_t count = 44100 * 30;
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <main+0x36c>)
 8000ec0:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000ec4:	f102 0210 	add.w	r2, r2, #16
 8000ec8:	6013      	str	r3, [r2, #0]
				float inSample, outSample;
				HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed0:	4839      	ldr	r0, [pc, #228]	; (8000fb8 <main+0x364>)
 8000ed2:	f001 fba7 	bl	8002624 <HAL_GPIO_WritePin>
				for (int32_t i = 0; i < count; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000edc:	f102 0214 	add.w	r2, r2, #20
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e030      	b.n	8000f46 <main+0x2f2>
					inSample = wave_gen('s', i, 16000.0, 2.0);
 8000ee4:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000ee8:	f103 0314 	add.w	r3, r3, #20
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ef2:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8000fc4 <main+0x370>
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2073      	movs	r0, #115	; 0x73
 8000efa:	f000 fecd 	bl	8001c98 <wave_gen>
 8000efe:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000f02:	f103 030c 	add.w	r3, r3, #12
 8000f06:	ed83 0a00 	vstr	s0, [r3]
					outSample = pedalboard_process(&pedalboard, inSample);
 8000f0a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000f0e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000f12:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000f16:	f102 020c 	add.w	r2, r2, #12
 8000f1a:	ed92 0a00 	vldr	s0, [r2]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fdb8 	bl	8001a94 <pedalboard_process>
 8000f24:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000f28:	f103 0308 	add.w	r3, r3, #8
 8000f2c:	ed83 0a00 	vstr	s0, [r3]
				for (int32_t i = 0; i < count; i++) {
 8000f30:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000f34:	f103 0314 	add.w	r3, r3, #20
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000f40:	f102 0214 	add.w	r2, r2, #20
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000f4a:	f103 0314 	add.w	r3, r3, #20
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000f54:	f103 0310 	add.w	r3, r3, #16
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbc2      	blt.n	8000ee4 <main+0x290>
				}
				HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <main+0x364>)
 8000f66:	f001 fb5d 	bl	8002624 <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin) == GPIO_PIN_SET) {
 8000f6a:	e019      	b.n	8000fa0 <main+0x34c>
			}
		}
		else if (Appli_state == APPLICATION_START)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <main+0x354>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	f47f ae9c 	bne.w	8000cae <main+0x5a>
		{
			if (f_mount(&myUsbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 8000f76:	2200      	movs	r2, #0
 8000f78:	4913      	ldr	r1, [pc, #76]	; (8000fc8 <main+0x374>)
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <main+0x378>)
 8000f7c:	f009 fadc 	bl	800a538 <f_mount>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d106      	bne.n	8000f94 <main+0x340>
			{
				HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <main+0x364>)
 8000f8e:	f001 fb49 	bl	8002624 <HAL_GPIO_WritePin>
 8000f92:	e68c      	b.n	8000cae <main+0x5a>
			}
			else
			{
				HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <main+0x364>)
 8000f9c:	f001 fb42 	bl	8002624 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000fa0:	e685      	b.n	8000cae <main+0x5a>
 8000fa2:	bf00      	nop
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	200007d8 	.word	0x200007d8
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	0800ccac 	.word	0x0800ccac
 8000fb4:	0800ccb4 	.word	0x0800ccb4
 8000fb8:	40020c00 	.word	0x40020c00
 8000fbc:	0800ccc0 	.word	0x0800ccc0
 8000fc0:	00142ff8 	.word	0x00142ff8
 8000fc4:	467a0000 	.word	0x467a0000
 8000fc8:	2000181c 	.word	0x2000181c
 8000fcc:	200007e4 	.word	0x200007e4

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a fc34 	bl	800b84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <SystemClock_Config+0xcc>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <SystemClock_Config+0xd0>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001044:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001048:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104a:	2302      	movs	r3, #2
 800104c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800104e:	2307      	movs	r3, #7
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	4618      	mov	r0, r3
 8001058:	f003 f86e 	bl	8004138 <HAL_RCC_OscConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001062:	f000 f8a3 	bl	80011ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	230f      	movs	r3, #15
 8001068:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106a:	2302      	movs	r3, #2
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001072:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001076:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2105      	movs	r1, #5
 8001084:	4618      	mov	r0, r3
 8001086:	f003 facf 	bl	8004628 <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001090:	f000 f88c 	bl	80011ac <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	; 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <MX_GPIO_Init+0xf8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a36      	ldr	r2, [pc, #216]	; (800119c <MX_GPIO_Init+0xf8>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <MX_GPIO_Init+0xf8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b30      	ldr	r3, [pc, #192]	; (800119c <MX_GPIO_Init+0xf8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a2f      	ldr	r2, [pc, #188]	; (800119c <MX_GPIO_Init+0xf8>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MX_GPIO_Init+0xf8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <MX_GPIO_Init+0xf8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a28      	ldr	r2, [pc, #160]	; (800119c <MX_GPIO_Init+0xf8>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <MX_GPIO_Init+0xf8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_GPIO_Init+0xf8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a21      	ldr	r2, [pc, #132]	; (800119c <MX_GPIO_Init+0xf8>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_GPIO_Init+0xf8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2101      	movs	r1, #1
 800112e:	481c      	ldr	r0, [pc, #112]	; (80011a0 <MX_GPIO_Init+0xfc>)
 8001130:	f001 fa78 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800113a:	481a      	ldr	r0, [pc, #104]	; (80011a4 <MX_GPIO_Init+0x100>)
 800113c:	f001 fa72 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4812      	ldr	r0, [pc, #72]	; (80011a0 <MX_GPIO_Init+0xfc>)
 8001158:	f001 f8b0 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn1_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <MX_GPIO_Init+0x104>)
 8001170:	f001 f8a4 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin;
 8001174:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_GPIO_Init+0x100>)
 800118e:	f001 f895 	bl	80022bc <HAL_GPIO_Init>

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40020000 	.word	0x40020000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <overdrive_log_pedal_init>:
#include "pedalboard_min.h"


// OVERDRIVE_LOG

void overdrive_log_pedal_init(pedal_config_t *conf) {
 80011b8:	b490      	push	{r4, r7}
 80011ba:	b08e      	sub	sp, #56	; 0x38
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
    conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 500, 2000, 100};
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <overdrive_log_pedal_init+0x44>)
 80011c4:	f103 0410 	add.w	r4, r3, #16
 80011c8:	4613      	mov	r3, r2
 80011ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <overdrive_log_pedal_init+0x48>)
 80011d4:	f103 0420 	add.w	r4, r3, #32
 80011d8:	4613      	mov	r3, r2
 80011da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){0.2, 0, 1, 0.1};
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <overdrive_log_pedal_init+0x4c>)
 80011e4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80011e8:	4613      	mov	r3, r2
 80011ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	; 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc90      	pop	{r4, r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	0800ccc8 	.word	0x0800ccc8
 8001200:	0800ccd8 	.word	0x0800ccd8
 8001204:	0800cce8 	.word	0x0800cce8

08001208 <overdrive_log_process>:

float overdrive_log_process(float in, pedal_config_t *conf) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001212:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 1) out = log2f(in);
 8001214:	edd7 7a01 	vldr	s15, [r7, #4]
 8001218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800121c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dd06      	ble.n	8001234 <overdrive_log_process+0x2c>
 8001226:	ed97 0a01 	vldr	s0, [r7, #4]
 800122a:	f00b fbfb 	bl	800ca24 <log2f>
 800122e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001232:	e01a      	b.n	800126a <overdrive_log_process+0x62>
    else if (in < -1) out = -log2f(-in);
 8001234:	edd7 7a01 	vldr	s15, [r7, #4]
 8001238:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800123c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	d50e      	bpl.n	8001264 <overdrive_log_process+0x5c>
 8001246:	edd7 7a01 	vldr	s15, [r7, #4]
 800124a:	eef1 7a67 	vneg.f32	s15, s15
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	f00b fbe7 	bl	800ca24 <log2f>
 8001256:	eef0 7a40 	vmov.f32	s15, s0
 800125a:	eef1 7a67 	vneg.f32	s15, s15
 800125e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001262:	e002      	b.n	800126a <overdrive_log_process+0x62>
    else out = 0;
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
    out = gain(out, conf->float_params[GAIN_INTENSITY].value);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001270:	eef0 0a67 	vmov.f32	s1, s15
 8001274:	ed97 0a03 	vldr	s0, [r7, #12]
 8001278:	f000 fc3c 	bl	8001af4 <gain>
 800127c:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	edd3 7a08 	vldr	s15, [r3, #32]
 8001286:	eef0 0a67 	vmov.f32	s1, s15
 800128a:	ed97 0a03 	vldr	s0, [r7, #12]
 800128e:	f000 fc87 	bl	8001ba0 <hard_clip>
 8001292:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE].value);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800129c:	eeb0 1a67 	vmov.f32	s2, s15
 80012a0:	edd7 0a01 	vldr	s1, [r7, #4]
 80012a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80012a8:	f000 fc38 	bl	8001b1c <mix>
 80012ac:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	ee07 3a90 	vmov	s15, r3
}
 80012b6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 80012c0:	b490      	push	{r4, r7}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    conf->float_params[GAIN_INTENSITY] = (float_parameter_t){0.5, 0.1, 10, 0.1};
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <amplifier_pedal_init+0x34>)
 80012cc:	f103 0410 	add.w	r4, r3, #16
 80012d0:	4613      	mov	r3, r2
 80012d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <amplifier_pedal_init+0x38>)
 80012dc:	f103 0420 	add.w	r4, r3, #32
 80012e0:	4613      	mov	r3, r2
 80012e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc90      	pop	{r4, r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	0800ccf8 	.word	0x0800ccf8
 80012f8:	0800ccd8 	.word	0x0800ccd8

080012fc <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	ed87 0a01 	vstr	s0, [r7, #4]
 8001306:	6038      	str	r0, [r7, #0]
    float out = gain(in, conf->float_params[GAIN_INTENSITY].value);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	edd3 7a04 	vldr	s15, [r3, #16]
 800130e:	eef0 0a67 	vmov.f32	s1, s15
 8001312:	ed97 0a01 	vldr	s0, [r7, #4]
 8001316:	f000 fbed 	bl	8001af4 <gain>
 800131a:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	edd3 7a08 	vldr	s15, [r3, #32]
 8001324:	eef0 0a67 	vmov.f32	s1, s15
 8001328:	ed97 0a03 	vldr	s0, [r7, #12]
 800132c:	f000 fc38 	bl	8001ba0 <hard_clip>
 8001330:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	ee07 3a90 	vmov	s15, r3
}
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    return;
 800134c:	bf00      	nop
}
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001362:	6038      	str	r0, [r7, #0]
    return in;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	ee07 3a90 	vmov	s15, r3
}
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 8001378:	b490      	push	{r4, r7}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    conf->float_params[SPEED] = (float_parameter_t){32, 2, 64, 2};
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <tremolo_pedal_init+0x34>)
 8001384:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001388:	4613      	mov	r3, r2
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){0.1, 0, 1, 0.1};
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <tremolo_pedal_init+0x38>)
 8001394:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001398:	4613      	mov	r3, r2
 800139a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc90      	pop	{r4, r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	0800cd08 	.word	0x0800cd08
 80013b0:	0800cd18 	.word	0x0800cd18

080013b4 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80013be:	6038      	str	r0, [r7, #0]
    static uint32_t i = 0;
    float out = in * wave_gen('s', i++, 1, conf->float_params[SPEED].value);
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <tremolo_process+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	4915      	ldr	r1, [pc, #84]	; (800141c <tremolo_process+0x68>)
 80013c8:	600a      	str	r2, [r1, #0]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	edd2 7a20 	vldr	s15, [r2, #128]	; 0x80
 80013d0:	eef0 0a67 	vmov.f32	s1, s15
 80013d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80013d8:	4619      	mov	r1, r3
 80013da:	2073      	movs	r0, #115	; 0x73
 80013dc:	f000 fc5c 	bl	8001c98 <wave_gen>
 80013e0:	eeb0 7a40 	vmov.f32	s14, s0
 80013e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ec:	edc7 7a03 	vstr	s15, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE].value);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80013f6:	eeb0 1a67 	vmov.f32	s2, s15
 80013fa:	edd7 0a01 	vldr	s1, [r7, #4]
 80013fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8001402:	f000 fb8b 	bl	8001b1c <mix>
 8001406:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	ee07 3a90 	vmov	s15, r3
}
 8001410:	eeb0 0a67 	vmov.f32	s0, s15
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000b0 	.word	0x200000b0

08001420 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 8001420:	b490      	push	{r4, r7}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    conf->float_params[REDUCT_INTENSITY] = (float_parameter_t){2000, 10, 2000, 10};
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <bitcrusher_rs_pedal_init+0x34>)
 800142c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001430:	4613      	mov	r3, r2
 8001432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <bitcrusher_rs_pedal_init+0x38>)
 800143c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001440:	4613      	mov	r3, r2
 8001442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bc90      	pop	{r4, r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	0800cd28 	.word	0x0800cd28
 8001458:	0800cd38 	.word	0x0800cd38

0800145c <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	ed87 0a01 	vstr	s0, [r7, #4]
 8001466:	6038      	str	r0, [r7, #0]
    int16_t _out = (float)in / conf->float_params[REDUCT_INTENSITY].value;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800146e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147a:	ee17 3a90 	vmov	r3, s15
 800147e:	81fb      	strh	r3, [r7, #14]
    float out = (float)_out * conf->float_params[REDUCT_INTENSITY].value;
 8001480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001496:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE].value);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80014a0:	eeb0 1a67 	vmov.f32	s2, s15
 80014a4:	edd7 0a01 	vldr	s1, [r7, #4]
 80014a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ac:	f000 fb36 	bl	8001b1c <mix>
 80014b0:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	ee07 3a90 	vmov	s15, r3
}
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <low_pass_filter_pedal_init>:

// LOW PASS FILTER

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 80014c4:	b490      	push	{r4, r7}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    conf->u_int_params[WIDTH] = (u_int_parameter_t){4, 2, 32, 2};
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <low_pass_filter_pedal_init+0x30>)
 80014d0:	461c      	mov	r4, r3
 80014d2:	4613      	mov	r3, r2
 80014d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){1, 0, 1, 0.1};
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <low_pass_filter_pedal_init+0x34>)
 80014de:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80014e2:	4613      	mov	r3, r2
 80014e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc90      	pop	{r4, r7}
 80014f2:	4770      	bx	lr
 80014f4:	0800cd48 	.word	0x0800cd48
 80014f8:	0800cd58 	.word	0x0800cd58

080014fc <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	ed87 0a01 	vstr	s0, [r7, #4]
 8001506:	6038      	str	r0, [r7, #0]
    static float history[441];
    static uint16_t i = 0;
    uint32_t width = conf->u_int_params[WIDTH].value;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	617b      	str	r3, [r7, #20]
    float out = 0;
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
    if (width > 441) width = 441;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f5b3 7fdd 	cmp.w	r3, #442	; 0x1ba
 800151a:	d302      	bcc.n	8001522 <low_pass_filter_process+0x26>
 800151c:	f240 13b9 	movw	r3, #441	; 0x1b9
 8001520:	617b      	str	r3, [r7, #20]
    history[i % width] = in;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <low_pass_filter_process+0xd4>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	fbb3 f2f2 	udiv	r2, r3, r2
 800152c:	6979      	ldr	r1, [r7, #20]
 800152e:	fb01 f202 	mul.w	r2, r1, r2
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <low_pass_filter_process+0xd8>)
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	601a      	str	r2, [r3, #0]
    for (uint16_t j = i-width; j < i; j++) {
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <low_pass_filter_process+0xd4>)
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	b29b      	uxth	r3, r3
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	81fb      	strh	r3, [r7, #14]
 800154a:	e015      	b.n	8001578 <low_pass_filter_process+0x7c>
        out += history[j % width];
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	fbb3 f2f2 	udiv	r2, r3, r2
 8001554:	6979      	ldr	r1, [r7, #20]
 8001556:	fb01 f202 	mul.w	r2, r1, r2
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <low_pass_filter_process+0xd8>)
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ed97 7a04 	vldr	s14, [r7, #16]
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	edc7 7a04 	vstr	s15, [r7, #16]
    for (uint16_t j = i-width; j < i; j++) {
 8001572:	89fb      	ldrh	r3, [r7, #14]
 8001574:	3301      	adds	r3, #1
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <low_pass_filter_process+0xd4>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	89fa      	ldrh	r2, [r7, #14]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3e4      	bcc.n	800154c <low_pass_filter_process+0x50>
    }
    i++;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <low_pass_filter_process+0xd4>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <low_pass_filter_process+0xd4>)
 800158c:	801a      	strh	r2, [r3, #0]
    out /= width;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001598:	edd7 6a04 	vldr	s13, [r7, #16]
 800159c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a0:	edc7 7a04 	vstr	s15, [r7, #16]
    out = mix(out, in, conf->float_params[BALANCE].value);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80015aa:	eeb0 1a67 	vmov.f32	s2, s15
 80015ae:	edd7 0a01 	vldr	s1, [r7, #4]
 80015b2:	ed97 0a04 	vldr	s0, [r7, #16]
 80015b6:	f000 fab1 	bl	8001b1c <mix>
 80015ba:	ed87 0a04 	vstr	s0, [r7, #16]
    return out;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	ee07 3a90 	vmov	s15, r3
}
 80015c4:	eeb0 0a67 	vmov.f32	s0, s15
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000b4 	.word	0x200000b4
 80015d4:	200000b8 	.word	0x200000b8

080015d8 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80015f6:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	ee07 3a90 	vmov	s15, r3
}
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <overdrive_pedal_init>:

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 800160c:	b490      	push	{r4, r7}
 800160e:	b096      	sub	sp, #88	; 0x58
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    conf->float_params[GAIN_INTENSITY] = (float_parameter_t){4, 1, 10, 0.5};
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a16      	ldr	r2, [pc, #88]	; (8001670 <overdrive_pedal_init+0x64>)
 8001618:	f103 0410 	add.w	r4, r3, #16
 800161c:	4613      	mov	r3, r2
 800161e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <overdrive_pedal_init+0x68>)
 8001628:	f103 0420 	add.w	r4, r3, #32
 800162c:	4613      	mov	r3, r2
 800162e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a10      	ldr	r2, [pc, #64]	; (8001678 <overdrive_pedal_init+0x6c>)
 8001638:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800163c:	4613      	mov	r3, r2
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4, 1, 10, 0.5};
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <overdrive_pedal_init+0x64>)
 8001648:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800164c:	4613      	mov	r3, r2
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){1, 0, 1, 0.1};
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <overdrive_pedal_init+0x70>)
 8001658:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800165c:	4613      	mov	r3, r2
 800165e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001664:	bf00      	nop
 8001666:	3758      	adds	r7, #88	; 0x58
 8001668:	46bd      	mov	sp, r7
 800166a:	bc90      	pop	{r4, r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	0800cd68 	.word	0x0800cd68
 8001674:	0800ccd8 	.word	0x0800ccd8
 8001678:	0800cd78 	.word	0x0800cd78
 800167c:	0800cd58 	.word	0x0800cd58

08001680 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	ed87 0a01 	vstr	s0, [r7, #4]
 800168a:	6038      	str	r0, [r7, #0]
    float out = gain(in, conf->float_params[GAIN_INTENSITY].value);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001692:	eef0 0a67 	vmov.f32	s1, s15
 8001696:	ed97 0a01 	vldr	s0, [r7, #4]
 800169a:	f000 fa2b 	bl	8001af4 <gain>
 800169e:	ed87 0a03 	vstr	s0, [r7, #12]
    out = soft_clip(out, conf->float_params[SOFT_THRESHOLD].value, conf->float_params[SOFTENER].value);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80016ae:	eeb0 1a47 	vmov.f32	s2, s14
 80016b2:	eef0 0a67 	vmov.f32	s1, s15
 80016b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80016ba:	f000 faa1 	bl	8001c00 <soft_clip>
 80016be:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80016c8:	eef0 0a67 	vmov.f32	s1, s15
 80016cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80016d0:	f000 fa66 	bl	8001ba0 <hard_clip>
 80016d4:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE].value);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80016de:	eeb0 1a67 	vmov.f32	s2, s15
 80016e2:	edd7 0a01 	vldr	s1, [r7, #4]
 80016e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80016ea:	f000 fa17 	bl	8001b1c <mix>
 80016ee:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	ee07 3a90 	vmov	s15, r3
}
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 8001704:	b490      	push	{r4, r7}
 8001706:	b096      	sub	sp, #88	; 0x58
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    conf->float_params[GAIN_INTENSITY] = (float_parameter_t){4, 1, 10, 0.5};
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a16      	ldr	r2, [pc, #88]	; (8001768 <fuzz_pedal_init+0x64>)
 8001710:	f103 0410 	add.w	r4, r3, #16
 8001714:	4613      	mov	r3, r2
 8001716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <fuzz_pedal_init+0x68>)
 8001720:	f103 0420 	add.w	r4, r3, #32
 8001724:	4613      	mov	r3, r2
 8001726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048, 0, 8192, 32};
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <fuzz_pedal_init+0x6c>)
 8001730:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001734:	4613      	mov	r3, r2
 8001736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){20, 2, 64, 2};
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <fuzz_pedal_init+0x70>)
 8001740:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001744:	4613      	mov	r3, r2
 8001746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){1, 0, 1, 0.1};
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <fuzz_pedal_init+0x74>)
 8001750:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001754:	4613      	mov	r3, r2
 8001756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800175c:	bf00      	nop
 800175e:	3758      	adds	r7, #88	; 0x58
 8001760:	46bd      	mov	sp, r7
 8001762:	bc90      	pop	{r4, r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	0800cd68 	.word	0x0800cd68
 800176c:	0800ccd8 	.word	0x0800ccd8
 8001770:	0800cd88 	.word	0x0800cd88
 8001774:	0800cd98 	.word	0x0800cd98
 8001778:	0800cd58 	.word	0x0800cd58

0800177c <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	ed87 0a01 	vstr	s0, [r7, #4]
 8001786:	6038      	str	r0, [r7, #0]
    static uint32_t i = 0;
    float out = gain(in, conf->float_params[GAIN_INTENSITY].value);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	edd3 7a04 	vldr	s15, [r3, #16]
 800178e:	eef0 0a67 	vmov.f32	s1, s15
 8001792:	ed97 0a01 	vldr	s0, [r7, #4]
 8001796:	f000 f9ad 	bl	8001af4 <gain>
 800179a:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80017a4:	eef0 0a67 	vmov.f32	s1, s15
 80017a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80017ac:	f000 f9f8 	bl	8001ba0 <hard_clip>
 80017b0:	ed87 0a03 	vstr	s0, [r7, #12]
    if (out == conf->float_params[CLIP_THRESHOLD].value) {
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80017ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80017be:	eeb4 7a67 	vcmp.f32	s14, s15
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	d120      	bne.n	800180a <fuzz_process+0x8e>
        out = out + wave_gen('s', i++, conf->float_params[HEIGHT].value, conf->float_params[SPEED].value) - conf->float_params[HEIGHT].value;
 80017c8:	4b32      	ldr	r3, [pc, #200]	; (8001894 <fuzz_process+0x118>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	4931      	ldr	r1, [pc, #196]	; (8001894 <fuzz_process+0x118>)
 80017d0:	600a      	str	r2, [r1, #0]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	edd2 7a1c 	vldr	s15, [r2, #112]	; 0x70
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	ed92 7a20 	vldr	s14, [r2, #128]	; 0x80
 80017de:	eef0 0a47 	vmov.f32	s1, s14
 80017e2:	eeb0 0a67 	vmov.f32	s0, s15
 80017e6:	4619      	mov	r1, r3
 80017e8:	2073      	movs	r0, #115	; 0x73
 80017ea:	f000 fa55 	bl	8001c98 <wave_gen>
 80017ee:	eeb0 7a40 	vmov.f32	s14, s0
 80017f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001804:	edc7 7a03 	vstr	s15, [r7, #12]
 8001808:	e02f      	b.n	800186a <fuzz_process+0xee>
    } else if (out == -(conf->float_params[CLIP_THRESHOLD].value)-1) {
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001810:	eef1 7a67 	vneg.f32	s15, s15
 8001814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800181c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001820:	eeb4 7a67 	vcmp.f32	s14, s15
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	d11f      	bne.n	800186a <fuzz_process+0xee>
        out = out - wave_gen('s', i++, conf->float_params[HEIGHT].value, conf->float_params[SPEED].value) + conf->float_params[HEIGHT].value;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <fuzz_process+0x118>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	4918      	ldr	r1, [pc, #96]	; (8001894 <fuzz_process+0x118>)
 8001832:	600a      	str	r2, [r1, #0]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	edd2 7a1c 	vldr	s15, [r2, #112]	; 0x70
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	ed92 7a20 	vldr	s14, [r2, #128]	; 0x80
 8001840:	eef0 0a47 	vmov.f32	s1, s14
 8001844:	eeb0 0a67 	vmov.f32	s0, s15
 8001848:	4619      	mov	r1, r3
 800184a:	2073      	movs	r0, #115	; 0x73
 800184c:	f000 fa24 	bl	8001c98 <wave_gen>
 8001850:	eeb0 7a40 	vmov.f32	s14, s0
 8001854:	edd7 7a03 	vldr	s15, [r7, #12]
 8001858:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001866:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = mix(out, in, conf->float_params[BALANCE].value);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001870:	eeb0 1a67 	vmov.f32	s2, s15
 8001874:	edd7 0a01 	vldr	s1, [r7, #4]
 8001878:	ed97 0a03 	vldr	s0, [r7, #12]
 800187c:	f000 f94e 	bl	8001b1c <mix>
 8001880:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	ee07 3a90 	vmov	s15, r3
}
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000079c 	.word	0x2000079c

08001898 <pedalboard_append>:
    return type;
}*/

// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	f200 80dd 	bhi.w	8001a68 <pedalboard_append+0x1d0>
        uint8_t i = p_pb->active_pedals;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	73fb      	strb	r3, [r7, #15]
        p_pb->pedals[i].type = type;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	2198      	movs	r1, #152	; 0x98
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3394      	adds	r3, #148	; 0x94
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	701a      	strb	r2, [r3, #0]

       if (type == AMPLIFIER) {
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d113      	bne.n	80018f4 <pedalboard_append+0x5c>
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2298      	movs	r2, #152	; 0x98
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	3304      	adds	r3, #4
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fcf0 	bl	80012c0 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	2198      	movs	r1, #152	; 0x98
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3398      	adds	r3, #152	; 0x98
 80018ee:	4a60      	ldr	r2, [pc, #384]	; (8001a70 <pedalboard_append+0x1d8>)
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e0b3      	b.n	8001a5c <pedalboard_append+0x1c4>
        } else if (type == BITCRUSHER_RS) {
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d113      	bne.n	8001922 <pedalboard_append+0x8a>
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2298      	movs	r2, #152	; 0x98
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	3304      	adds	r3, #4
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd89 	bl	8001420 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	2198      	movs	r1, #152	; 0x98
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3398      	adds	r3, #152	; 0x98
 800191c:	4a55      	ldr	r2, [pc, #340]	; (8001a74 <pedalboard_append+0x1dc>)
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e09c      	b.n	8001a5c <pedalboard_append+0x1c4>
        } else if (type == DYN_AMPLIFIER) {
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d113      	bne.n	8001950 <pedalboard_append+0xb8>
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2298      	movs	r2, #152	; 0x98
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fe4e 	bl	80015d8 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	2198      	movs	r1, #152	; 0x98
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3398      	adds	r3, #152	; 0x98
 800194a:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <pedalboard_append+0x1e0>)
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e085      	b.n	8001a5c <pedalboard_append+0x1c4>
        } else if (type == FUZZ) {
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d113      	bne.n	800197e <pedalboard_append+0xe6>
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2298      	movs	r2, #152	; 0x98
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	3304      	adds	r3, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fecd 	bl	8001704 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	2198      	movs	r1, #152	; 0x98
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3398      	adds	r3, #152	; 0x98
 8001978:	4a40      	ldr	r2, [pc, #256]	; (8001a7c <pedalboard_append+0x1e4>)
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	e06e      	b.n	8001a5c <pedalboard_append+0x1c4>
        } else if (type == LPF) {
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d113      	bne.n	80019ac <pedalboard_append+0x114>
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2298      	movs	r2, #152	; 0x98
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	3304      	adds	r3, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fd96 	bl	80014c4 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	2198      	movs	r1, #152	; 0x98
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3398      	adds	r3, #152	; 0x98
 80019a6:	4a36      	ldr	r2, [pc, #216]	; (8001a80 <pedalboard_append+0x1e8>)
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e057      	b.n	8001a5c <pedalboard_append+0x1c4>
        } else if (type == OVERDRIVE) {
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d113      	bne.n	80019da <pedalboard_append+0x142>
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	2298      	movs	r2, #152	; 0x98
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	3304      	adds	r3, #4
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe23 	bl	800160c <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	2198      	movs	r1, #152	; 0x98
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3398      	adds	r3, #152	; 0x98
 80019d4:	4a2b      	ldr	r2, [pc, #172]	; (8001a84 <pedalboard_append+0x1ec>)
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e040      	b.n	8001a5c <pedalboard_append+0x1c4>
        } else if (type == OVERDRIVE_LOG) {
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	2b07      	cmp	r3, #7
 80019de:	d113      	bne.n	8001a08 <pedalboard_append+0x170>
            overdrive_log_pedal_init(&(p_pb->pedals[i].config));
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2298      	movs	r2, #152	; 0x98
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fbe2 	bl	80011b8 <overdrive_log_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_log_process;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	2198      	movs	r1, #152	; 0x98
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3398      	adds	r3, #152	; 0x98
 8001a02:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <pedalboard_append+0x1f0>)
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e029      	b.n	8001a5c <pedalboard_append+0x1c4>
        }  else if (type == TREMOLO) {
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d113      	bne.n	8001a36 <pedalboard_append+0x19e>
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2298      	movs	r2, #152	; 0x98
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fcab 	bl	8001378 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	2198      	movs	r1, #152	; 0x98
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3398      	adds	r3, #152	; 0x98
 8001a30:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <pedalboard_append+0x1f4>)
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e012      	b.n	8001a5c <pedalboard_append+0x1c4>
        } else {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	2298      	movs	r2, #152	; 0x98
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	3304      	adds	r3, #4
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fc7d 	bl	8001344 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	2198      	movs	r1, #152	; 0x98
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3398      	adds	r3, #152	; 0x98
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <pedalboard_append+0x1f8>)
 8001a5a:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	701a      	strb	r2, [r3, #0]
    }
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	080012fd 	.word	0x080012fd
 8001a74:	0800145d 	.word	0x0800145d
 8001a78:	080015ed 	.word	0x080015ed
 8001a7c:	0800177d 	.word	0x0800177d
 8001a80:	080014fd 	.word	0x080014fd
 8001a84:	08001681 	.word	0x08001681
 8001a88:	08001209 	.word	0x08001209
 8001a8c:	080013b5 	.word	0x080013b5
 8001a90:	08001359 	.word	0x08001359

08001a94 <pedalboard_process>:

float pedalboard_process(pedalboard_t *p_pb, float in) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	ed87 0a00 	vstr	s0, [r7]
    float out = in;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < p_pb->active_pedals; i++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	72fb      	strb	r3, [r7, #11]
 8001aa8:	e017      	b.n	8001ada <pedalboard_process+0x46>
        out = p_pb->pedals[i].pedal_process(out, &(p_pb->pedals[i].config));
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	2198      	movs	r1, #152	; 0x98
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3398      	adds	r3, #152	; 0x98
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	7afa      	ldrb	r2, [r7, #11]
 8001abc:	2198      	movs	r1, #152	; 0x98
 8001abe:	fb01 f202 	mul.w	r2, r1, r2
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	440a      	add	r2, r1
 8001ac6:	3204      	adds	r2, #4
 8001ac8:	4610      	mov	r0, r2
 8001aca:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ace:	4798      	blx	r3
 8001ad0:	ed87 0a03 	vstr	s0, [r7, #12]
    for (uint8_t i = 0; i < p_pb->active_pedals; i++) {
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	72fb      	strb	r3, [r7, #11]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	7afa      	ldrb	r2, [r7, #11]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3e2      	bcc.n	8001aaa <pedalboard_process+0x16>
    }
    return out;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	ee07 3a90 	vmov	s15, r3
}
 8001aea:	eeb0 0a67 	vmov.f32	s0, s15
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <gain>:

// PROCESSING

float gain(float in, float gain_intensity) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001afe:	edc7 0a00 	vstr	s1, [r7]
    return in * gain_intensity;
 8001b02:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b06:	edd7 7a00 	vldr	s15, [r7]
 8001b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <mix>:

float mix(float in_1, float in_2, float balance) {
 8001b1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b28:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b2c:	ed87 1a01 	vstr	s2, [r7, #4]
    return in_1 * balance + in_2 * (1. - balance);
 8001b30:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	ee17 0a90 	vmov	r0, s15
 8001b40:	f7fe fe2c 	bl	800079c <__aeabi_f2d>
 8001b44:	4604      	mov	r4, r0
 8001b46:	460d      	mov	r5, r1
 8001b48:	68b8      	ldr	r0, [r7, #8]
 8001b4a:	f7fe fe27 	bl	800079c <__aeabi_f2d>
 8001b4e:	4680      	mov	r8, r0
 8001b50:	4689      	mov	r9, r1
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7fe fe22 	bl	800079c <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	f04f 0000 	mov.w	r0, #0
 8001b60:	490e      	ldr	r1, [pc, #56]	; (8001b9c <mix+0x80>)
 8001b62:	f7fe fcbb 	bl	80004dc <__aeabi_dsub>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	f7fe fb87 	bl	8000280 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe fcb1 	bl	80004e0 <__adddf3>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7fe fe61 	bl	800084c <__aeabi_d2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	ee07 3a90 	vmov	s15, r3
}
 8001b90:	eeb0 0a67 	vmov.f32	s0, s15
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b9c:	3ff00000 	.word	0x3ff00000

08001ba0 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001baa:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 8001bae:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bb2:	edd7 7a00 	vldr	s15, [r7]
 8001bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	dd02      	ble.n	8001bc6 <hard_clip+0x26>
        return clip_threshold;
 8001bc0:	edd7 7a00 	vldr	s15, [r7]
 8001bc4:	e015      	b.n	8001bf2 <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8001bc6:	edd7 7a00 	vldr	s15, [r7]
 8001bca:	eef1 7a67 	vneg.f32	s15, s15
 8001bce:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	d508      	bpl.n	8001bee <hard_clip+0x4e>
        return -clip_threshold - 1;
 8001bdc:	edd7 7a00 	vldr	s15, [r7]
 8001be0:	eef1 7a67 	vneg.f32	s15, s15
 8001be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001be8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bec:	e001      	b.n	8001bf2 <hard_clip+0x52>
    }
    return in;
 8001bee:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c0e:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 8001c12:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	dd10      	ble.n	8001c46 <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 8001c24:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c28:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c2c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c30:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c38:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c40:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c44:	e01d      	b.n	8001c82 <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 8001c46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c4a:	eef1 7a67 	vneg.f32	s15, s15
 8001c4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d510      	bpl.n	8001c7e <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 8001c5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c64:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c70:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c78:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c7c:	e001      	b.n	8001c82 <soft_clip+0x82>
    } else {
        out = in;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	617b      	str	r3, [r7, #20]
    }
    return out;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	ee07 3a90 	vmov	s15, r3
}
 8001c88:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <wave_gen>:
    int16_t out = (float)(in / reduction_intensity);
    out *= reduction_intensity;
    return (float)out;
}

float wave_gen(char t, uint32_t i, float height, float speed) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	6019      	str	r1, [r3, #0]
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	ed83 0a00 	vstr	s0, [r3]
 8001cae:	463b      	mov	r3, r7
 8001cb0:	edc3 0a00 	vstr	s1, [r3]
 8001cb4:	f107 030f 	add.w	r3, r7, #15
 8001cb8:	701a      	strb	r2, [r3, #0]
    float sin_table[512] = { 0, 0.00307396, 0.00614789, 0.00922176, 0.0122955, 0.0153692, 0.0184427, 0.0215161, 0.0245892, 0.0276621, 0.0307348, 0.0338071, 0.0368792, 0.0399509, 0.0430222, 0.0460931, 0.0491636, 0.0522336, 0.0553031, 0.0583721, 0.0614405, 0.0645084, 0.0675756, 0.0706423, 0.0737082, 0.0767734, 0.079838, 0.0829017, 0.0859647, 0.0890269, 0.0920882, 0.0951487, 0.0982083, 0.101267, 0.104325, 0.107381, 0.110437, 0.113492, 0.116545, 0.119598, 0.122649, 0.125699, 0.128748, 0.131796, 0.134842, 0.137888, 0.140932, 0.143974, 0.147015, 0.150055, 0.153094, 0.156131, 0.159166, 0.1622, 0.165233, 0.168264, 0.171293, 0.174321, 0.177347, 0.180371, 0.183394, 0.186415, 0.189434, 0.192451, 0.195467, 0.198481, 0.201493, 0.204503, 0.207511, 0.210517, 0.213521, 0.216523, 0.219523, 0.222521, 0.225517, 0.22851, 0.231502, 0.234491, 0.237478, 0.240463, 0.243446, 0.246426, 0.249404, 0.25238, 0.255353, 0.258324, 0.261292, 0.264258, 0.267222, 0.270183, 0.273141, 0.276097, 0.27905, 0.282, 0.284948, 0.287893, 0.290836, 0.293776, 0.296713, 0.299647, 0.302578, 0.305506, 0.308432, 0.311355, 0.314274, 0.317191, 0.320105, 0.323015, 0.325923, 0.328828, 0.331729, 0.334627, 0.337523, 0.340415, 0.343303, 0.346189, 0.349071, 0.35195, 0.354826, 0.357698, 0.360567, 0.363432, 0.366294, 0.369153, 0.372008, 0.37486, 0.377708, 0.380552, 0.383393, 0.38623, 0.389064, 0.391894, 0.39472, 0.397542, 0.400361, 0.403176, 0.405987, 0.408795, 0.411598, 0.414398, 0.417193, 0.419985, 0.422773, 0.425556, 0.428336, 0.431112, 0.433883, 0.436651, 0.439414, 0.442173, 0.444929, 0.447679, 0.450426, 0.453168, 0.455906, 0.45864, 0.46137, 0.464095, 0.466815, 0.469532, 0.472243, 0.474951, 0.477654, 0.480352, 0.483046, 0.485735, 0.48842, 0.4911, 0.493775, 0.496446, 0.499112, 0.501773, 0.50443, 0.507082, 0.509729, 0.512371, 0.515008, 0.517641, 0.520269, 0.522891, 0.525509, 0.528122, 0.53073, 0.533332, 0.53593, 0.538523, 0.541111, 0.543693, 0.54627, 0.548843, 0.55141, 0.553971, 0.556528, 0.559079, 0.561625, 0.564166, 0.566701, 0.569231, 0.571756, 0.574275, 0.576789, 0.579297, 0.5818, 0.584298, 0.58679, 0.589276, 0.591757, 0.594232, 0.596701, 0.599165, 0.601624, 0.604076, 0.606523, 0.608964, 0.6114, 0.613829, 0.616253, 0.618671, 0.621083, 0.623489, 0.62589, 0.628284, 0.630673, 0.633055, 0.635432, 0.637802, 0.640167, 0.642525, 0.644878, 0.647224, 0.649564, 0.651899, 0.654226, 0.656548, 0.658864, 0.661173, 0.663476, 0.665773, 0.668063, 0.670348, 0.672625, 0.674897, 0.677162, 0.679421, 0.681673, 0.683919, 0.686158, 0.688391, 0.690618, 0.692838, 0.695051, 0.697258, 0.699458, 0.701651, 0.703838, 0.706019, 0.708192, 0.710359, 0.712519, 0.714673, 0.71682, 0.71896, 0.721093, 0.723219, 0.725339, 0.727451, 0.729557, 0.731656, 0.733748, 0.735833, 0.737911, 0.739982, 0.742046, 0.744103, 0.746154, 0.748197, 0.750233, 0.752261, 0.754283, 0.756298, 0.758305, 0.760306, 0.762299, 0.764285, 0.766263, 0.768235, 0.770199, 0.772156, 0.774106, 0.776048, 0.777983, 0.779911, 0.781831, 0.783744, 0.785649, 0.787547, 0.789438, 0.791321, 0.793197, 0.795065, 0.796926, 0.798779, 0.800625, 0.802463, 0.804293, 0.806116, 0.807931, 0.809739, 0.811539, 0.813331, 0.815115, 0.816892, 0.818662, 0.820423, 0.822177, 0.823923, 0.825661, 0.827391, 0.829114, 0.830828, 0.832535, 0.834234, 0.835925, 0.837608, 0.839283, 0.840951, 0.84261, 0.844262, 0.845905, 0.84754, 0.849168, 0.850787, 0.852399, 0.854002, 0.855597, 0.857184, 0.858764, 0.860334, 0.861897, 0.863452, 0.864999, 0.866537, 0.868067, 0.869589, 0.871103, 0.872608, 0.874105, 0.875594, 0.877075, 0.878548, 0.880012, 0.881468, 0.882915, 0.884354, 0.885785, 0.887207, 0.888622, 0.890027, 0.891424, 0.892813, 0.894194, 0.895565, 0.896929, 0.898284, 0.89963, 0.900968, 0.902298, 0.903619, 0.904931, 0.906235, 0.90753, 0.908817, 0.910095, 0.911365, 0.912626, 0.913878, 0.915122, 0.916357, 0.917583, 0.918801, 0.92001, 0.92121, 0.922402, 0.923585, 0.924759, 0.925924, 0.927081, 0.928229, 0.929368, 0.930499, 0.93162, 0.932733, 0.933837, 0.934932, 0.936018, 0.937096, 0.938164, 0.939224, 0.940275, 0.941317, 0.94235, 0.943374, 0.944389, 0.945396, 0.946393, 0.947382, 0.948361, 0.949332, 0.950293, 0.951246, 0.95219, 0.953124, 0.95405, 0.954966, 0.955874, 0.956773, 0.957662, 0.958542, 0.959414, 0.960276, 0.961129, 0.961974, 0.962809, 0.963635, 0.964452, 0.965259, 0.966058, 0.966848, 0.967628, 0.968399, 0.969161, 0.969914, 0.970658, 0.971393, 0.972118, 0.972834, 0.973541, 0.974239, 0.974928, 0.975607, 0.976277, 0.976938, 0.97759, 0.978232, 0.978866, 0.97949, 0.980105, 0.98071, 0.981306, 0.981893, 0.982471, 0.983039, 0.983598, 0.984148, 0.984689, 0.98522, 0.985742, 0.986254, 0.986758, 0.987252, 0.987736, 0.988211, 0.988677, 0.989134, 0.989581, 0.990019, 0.990448, 0.990867, 0.991277, 0.991677, 0.992068, 0.99245, 0.992822, 0.993185, 0.993539, 0.993883, 0.994218, 0.994543, 0.994859, 0.995166, 0.995463, 0.995751, 0.996029, 0.996298, 0.996558, 0.996808, 0.997048, 0.99728, 0.997502, 0.997714, 0.997917, 0.998111, 0.998295, 0.99847, 0.998635, 0.998791, 0.998937, 0.999074, 0.999202, 0.99932, 0.999428, 0.999528, 0.999617, 0.999698, 0.999768, 0.99983, 0.999882, 0.999924, 0.999957, 0.999981, 0.999995, 1 };
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4a42      	ldr	r2, [pc, #264]	; (8001dc8 <wave_gen+0x130>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f009 fdb1 	bl	800b830 <memcpy>
    if (t == 's') {
 8001cce:	f107 030f 	add.w	r3, r7, #15
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b73      	cmp	r3, #115	; 0x73
 8001cd6:	d16f      	bne.n	8001db8 <wave_gen+0x120>
        i = (float)i * speed;
 8001cd8:	f107 0308 	add.w	r3, r7, #8
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf0:	f107 0308 	add.w	r3, r7, #8
 8001cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf8:	ee17 2a90 	vmov	r2, s15
 8001cfc:	601a      	str	r2, [r3, #0]
        uint32_t x = i % 512;
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d08:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
        uint32_t quadrant = (i % 2048) / 512;
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d16:	0a5b      	lsrs	r3, r3, #9
 8001d18:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
        if (quadrant == 0) return sin_table[x] * height;
 8001d1c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10d      	bne.n	8001d40 <wave_gen+0xa8>
 8001d24:	f107 0210 	add.w	r2, r7, #16
 8001d28:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	ed93 7a00 	vldr	s14, [r3]
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	edd3 7a00 	vldr	s15, [r3]
 8001d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3e:	e03d      	b.n	8001dbc <wave_gen+0x124>
        else if (quadrant == 1) return sin_table[511 - x] * height;
 8001d40:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d110      	bne.n	8001d6a <wave_gen+0xd2>
 8001d48:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001d4c:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8001d50:	3301      	adds	r3, #1
 8001d52:	f107 0210 	add.w	r2, r7, #16
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	ed93 7a00 	vldr	s14, [r3]
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d68:	e028      	b.n	8001dbc <wave_gen+0x124>
        else if (quadrant == 2) return -sin_table[x] * height;
 8001d6a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d10f      	bne.n	8001d92 <wave_gen+0xfa>
 8001d72:	f107 0210 	add.w	r2, r7, #16
 8001d76:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	eeb1 7a67 	vneg.f32	s14, s15
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	e014      	b.n	8001dbc <wave_gen+0x124>
        else /*if (quadrant == 3)*/ return -sin_table[511 - x] * height;
 8001d92:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001d96:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f107 0210 	add.w	r2, r7, #16
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	eeb1 7a67 	vneg.f32	s14, s15
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	e001      	b.n	8001dbc <wave_gen+0x124>
    } else {
        return 0;
 8001db8:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001dcc <wave_gen+0x134>
    }
}
 8001dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc0:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	0800cda8 	.word	0x0800cda8
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <NMI_Handler+0x4>

08001e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <MemManage_Handler+0x4>

08001e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6c:	f000 f8d0 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <OTG_FS_IRQHandler+0x10>)
 8001e7a:	f000 fe57 	bl	8002b2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20003c60 	.word	0x20003c60

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f009 fc80 	bl	800b7bc <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20020000 	.word	0x20020000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	200007a0 	.word	0x200007a0
 8001ef0:	20003f78 	.word	0x20003f78

08001ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <SystemInit+0x20>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <SystemInit+0x20>)
 8001f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f1e:	490e      	ldr	r1, [pc, #56]	; (8001f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f20:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f34:	4c0b      	ldr	r4, [pc, #44]	; (8001f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f42:	f7ff ffd7 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f46:	f009 fc3f 	bl	800b7c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4a:	f7fe fe83 	bl	8000c54 <main>
  bx  lr    
 8001f4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f58:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001f5c:	0800d860 	.word	0x0800d860
  ldr r2, =_sbss
 8001f60:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001f64:	20003f74 	.word	0x20003f74

08001f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_Init+0x40>)
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_Init+0x40>)
 8001f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_Init+0x40>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 f94f 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff ff16 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f967 	bl	80022a2 <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f000 f92f 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000000 	.word	0x20000000
 8002008:	20000008 	.word	0x20000008
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	20001818 	.word	0x20001818

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20001818 	.word	0x20001818

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_Delay+0x44>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ca:	4a04      	ldr	r2, [pc, #16]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	60d3      	str	r3, [r2, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	; (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	; (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	; (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002260:	f7ff ff3e 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f7ff ff8e 	bl	800218c <NVIC_EncodePriority>
 8002270:	4602      	mov	r2, r0
 8002272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff5d 	bl	8002138 <__NVIC_SetPriority>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff31 	bl	80020fc <__NVIC_EnableIRQ>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffa2 	bl	80021f4 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e16b      	b.n	80025b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 815a 	bne.w	80025aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d005      	beq.n	800230e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	2b02      	cmp	r3, #2
 800230c:	d130      	bne.n	8002370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002344:	2201      	movs	r2, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b03      	cmp	r3, #3
 800237a:	d017      	beq.n	80023ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d123      	bne.n	8002400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0203 	and.w	r2, r3, #3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80b4 	beq.w	80025aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <HAL_GPIO_Init+0x30c>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	4a5f      	ldr	r2, [pc, #380]	; (80025c8 <HAL_GPIO_Init+0x30c>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002450:	6453      	str	r3, [r2, #68]	; 0x44
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_GPIO_Init+0x30c>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245e:	4a5b      	ldr	r2, [pc, #364]	; (80025cc <HAL_GPIO_Init+0x310>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <HAL_GPIO_Init+0x314>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02b      	beq.n	80024e2 <HAL_GPIO_Init+0x226>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a51      	ldr	r2, [pc, #324]	; (80025d4 <HAL_GPIO_Init+0x318>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d025      	beq.n	80024de <HAL_GPIO_Init+0x222>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a50      	ldr	r2, [pc, #320]	; (80025d8 <HAL_GPIO_Init+0x31c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01f      	beq.n	80024da <HAL_GPIO_Init+0x21e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4f      	ldr	r2, [pc, #316]	; (80025dc <HAL_GPIO_Init+0x320>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d019      	beq.n	80024d6 <HAL_GPIO_Init+0x21a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4e      	ldr	r2, [pc, #312]	; (80025e0 <HAL_GPIO_Init+0x324>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_Init+0x216>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <HAL_GPIO_Init+0x328>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00d      	beq.n	80024ce <HAL_GPIO_Init+0x212>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_GPIO_Init+0x32c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <HAL_GPIO_Init+0x20e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_GPIO_Init+0x330>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_Init+0x20a>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e00e      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024c6:	2308      	movs	r3, #8
 80024c8:	e00c      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024ca:	2306      	movs	r3, #6
 80024cc:	e00a      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f4:	4935      	ldr	r1, [pc, #212]	; (80025cc <HAL_GPIO_Init+0x310>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002526:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_GPIO_Init+0x334>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002550:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_GPIO_Init+0x334>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a4:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <HAL_GPIO_Init+0x334>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f ae90 	bls.w	80022d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40021400 	.word	0x40021400
 80025e8:	40021800 	.word	0x40021800
 80025ec:	40021c00 	.word	0x40021c00
 80025f0:	40013c00 	.word	0x40013c00

080025f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e001      	b.n	8002616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
 8002630:	4613      	mov	r3, r2
 8002632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002634:	787b      	ldrb	r3, [r7, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002640:	e003      	b.n	800264a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002658:	b08f      	sub	sp, #60	; 0x3c
 800265a:	af0a      	add	r7, sp, #40	; 0x28
 800265c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e054      	b.n	8002712 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f008 fdc0 	bl	800b208 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2203      	movs	r2, #3
 800268c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 f9f8 	bl	8004a9c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	687e      	ldr	r6, [r7, #4]
 80026b4:	466d      	mov	r5, sp
 80026b6:	f106 0410 	add.w	r4, r6, #16
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ca:	1d33      	adds	r3, r6, #4
 80026cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f002 f972 	bl	80049b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2101      	movs	r1, #1
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 f9ef 	bl	8004abe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	687e      	ldr	r6, [r7, #4]
 80026e8:	466d      	mov	r5, sp
 80026ea:	f106 0410 	add.w	r4, r6, #16
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80026fe:	1d33      	adds	r3, r6, #4
 8002700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f002 fb56 	bl	8004db4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800271a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b089      	sub	sp, #36	; 0x24
 800271e:	af04      	add	r7, sp, #16
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	4608      	mov	r0, r1
 8002724:	4611      	mov	r1, r2
 8002726:	461a      	mov	r2, r3
 8002728:	4603      	mov	r3, r0
 800272a:	70fb      	strb	r3, [r7, #3]
 800272c:	460b      	mov	r3, r1
 800272e:	70bb      	strb	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_HCD_HC_Init+0x28>
 800273e:	2302      	movs	r3, #2
 8002740:	e076      	b.n	8002830 <HAL_HCD_HC_Init+0x116>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	333d      	adds	r3, #61	; 0x3d
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	212c      	movs	r1, #44	; 0x2c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	3338      	adds	r3, #56	; 0x38
 800276a:	787a      	ldrb	r2, [r7, #1]
 800276c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3340      	adds	r3, #64	; 0x40
 800277c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800277e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	3339      	adds	r3, #57	; 0x39
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333f      	adds	r3, #63	; 0x3f
 80027a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80027a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	78ba      	ldrb	r2, [r7, #2]
 80027aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027ae:	b2d0      	uxtb	r0, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	333a      	adds	r3, #58	; 0x3a
 80027bc:	4602      	mov	r2, r0
 80027be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80027c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da09      	bge.n	80027dc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	333b      	adds	r3, #59	; 0x3b
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e008      	b.n	80027ee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	333b      	adds	r3, #59	; 0x3b
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	333c      	adds	r3, #60	; 0x3c
 80027fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002800:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	787c      	ldrb	r4, [r7, #1]
 8002808:	78ba      	ldrb	r2, [r7, #2]
 800280a:	78f9      	ldrb	r1, [r7, #3]
 800280c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	f897 3020 	ldrb.w	r3, [r7, #32]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4623      	mov	r3, r4
 800281e:	f002 fc43 	bl	80050a8 <USB_HC_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bd90      	pop	{r4, r7, pc}

08002838 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_HCD_HC_Halt+0x1e>
 8002852:	2302      	movs	r3, #2
 8002854:	e00f      	b.n	8002876 <HAL_HCD_HC_Halt+0x3e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fe7f 	bl	800556a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	70fb      	strb	r3, [r7, #3]
 8002892:	460b      	mov	r3, r1
 8002894:	70bb      	strb	r3, [r7, #2]
 8002896:	4613      	mov	r3, r2
 8002898:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	333b      	adds	r3, #59	; 0x3b
 80028a8:	78ba      	ldrb	r2, [r7, #2]
 80028aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	333f      	adds	r3, #63	; 0x3f
 80028ba:	787a      	ldrb	r2, [r7, #1]
 80028bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80028be:	7c3b      	ldrb	r3, [r7, #16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d112      	bne.n	80028ea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3342      	adds	r3, #66	; 0x42
 80028d2:	2203      	movs	r2, #3
 80028d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	333d      	adds	r3, #61	; 0x3d
 80028e4:	7f3a      	ldrb	r2, [r7, #28]
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e008      	b.n	80028fc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3342      	adds	r3, #66	; 0x42
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	f200 80c6 	bhi.w	8002a90 <HAL_HCD_HC_SubmitRequest+0x210>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002a7d 	.word	0x08002a7d
 8002914:	08002981 	.word	0x08002981
 8002918:	080029ff 	.word	0x080029ff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800291c:	7c3b      	ldrb	r3, [r7, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	f040 80b8 	bne.w	8002a94 <HAL_HCD_HC_SubmitRequest+0x214>
 8002924:	78bb      	ldrb	r3, [r7, #2]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 80b4 	bne.w	8002a94 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800292c:	8b3b      	ldrh	r3, [r7, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3355      	adds	r3, #85	; 0x55
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3355      	adds	r3, #85	; 0x55
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3342      	adds	r3, #66	; 0x42
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800296a:	e093      	b.n	8002a94 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3342      	adds	r3, #66	; 0x42
 800297a:	2202      	movs	r2, #2
 800297c:	701a      	strb	r2, [r3, #0]
      break;
 800297e:	e089      	b.n	8002a94 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002980:	78bb      	ldrb	r3, [r7, #2]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11d      	bne.n	80029c2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3355      	adds	r3, #85	; 0x55
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3342      	adds	r3, #66	; 0x42
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80029ac:	e073      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3342      	adds	r3, #66	; 0x42
 80029bc:	2202      	movs	r2, #2
 80029be:	701a      	strb	r2, [r3, #0]
      break;
 80029c0:	e069      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3354      	adds	r3, #84	; 0x54
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3342      	adds	r3, #66	; 0x42
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
      break;
 80029e8:	e055      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3342      	adds	r3, #66	; 0x42
 80029f8:	2202      	movs	r2, #2
 80029fa:	701a      	strb	r2, [r3, #0]
      break;
 80029fc:	e04b      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029fe:	78bb      	ldrb	r3, [r7, #2]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11d      	bne.n	8002a40 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3355      	adds	r3, #85	; 0x55
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3342      	adds	r3, #66	; 0x42
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a2a:	e034      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3342      	adds	r3, #66	; 0x42
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
      break;
 8002a3e:	e02a      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3354      	adds	r3, #84	; 0x54
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3342      	adds	r3, #66	; 0x42
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
      break;
 8002a66:	e016      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3342      	adds	r3, #66	; 0x42
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
      break;
 8002a7a:	e00c      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3342      	adds	r3, #66	; 0x42
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002a90:	bf00      	nop
 8002a92:	e000      	b.n	8002a96 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002a94:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3344      	adds	r3, #68	; 0x44
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	8b3a      	ldrh	r2, [r7, #24]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	202c      	movs	r0, #44	; 0x2c
 8002ab0:	fb00 f303 	mul.w	r3, r0, r3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	334c      	adds	r3, #76	; 0x4c
 8002ab8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3360      	adds	r3, #96	; 0x60
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3350      	adds	r3, #80	; 0x50
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3339      	adds	r3, #57	; 0x39
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3361      	adds	r3, #97	; 0x61
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	222c      	movs	r2, #44	; 0x2c
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	3338      	adds	r3, #56	; 0x38
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	18d1      	adds	r1, r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f002 fbd2 	bl	80052c4 <USB_HC_StartXfer>
 8002b20:	4603      	mov	r3, r0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop

08002b2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 f8f5 	bl	8004d32 <USB_GetMode>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	f040 80f6 	bne.w	8002d3c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f002 f8d9 	bl	8004d0c <USB_ReadInterrupts>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80ec 	beq.w	8002d3a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 f8d0 	bl	8004d0c <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b76:	d104      	bne.n	8002b82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 f8c0 	bl	8004d0c <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b96:	d104      	bne.n	8002ba2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 f8b0 	bl	8004d0c <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb6:	d104      	bne.n	8002bc2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 f8a0 	bl	8004d0c <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d103      	bne.n	8002bde <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 f892 	bl	8004d0c <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf2:	d11c      	bne.n	8002c2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bfc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c0e:	2110      	movs	r1, #16
 8002c10:	6938      	ldr	r0, [r7, #16]
 8002c12:	f001 ffa1 	bl	8004b58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c16:	6938      	ldr	r0, [r7, #16]
 8002c18:	f001 ffc2 	bl	8004ba0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 f97a 	bl	8004f1c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f008 fb6b 	bl	800b304 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 f86a 	bl	8004d0c <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c42:	d102      	bne.n	8002c4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 fa03 	bl	8004050 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 f85c 	bl	8004d0c <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d106      	bne.n	8002c6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f008 fb34 	bl	800b2cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 f84b 	bl	8004d0c <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d101      	bne.n	8002c84 <HAL_HCD_IRQHandler+0x158>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_HCD_IRQHandler+0x15a>
 8002c84:	2300      	movs	r3, #0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d012      	beq.n	8002cb0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0210 	bic.w	r2, r2, #16
 8002c98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f001 f906 	bl	8003eac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0210 	orr.w	r2, r2, #16
 8002cae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 f829 	bl	8004d0c <USB_ReadInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cc4:	d13a      	bne.n	8002d3c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fc3c 	bl	8005548 <USB_HC_ReadInterrupt>
 8002cd0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e025      	b.n	8002d24 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d018      	beq.n	8002d1e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d02:	d106      	bne.n	8002d12 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8ab 	bl	8002e66 <HCD_HC_IN_IRQHandler>
 8002d10:	e005      	b.n	8002d1e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fcc6 	bl	80036aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d3d4      	bcc.n	8002cd8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	e000      	b.n	8002d3c <HAL_HCD_IRQHandler+0x210>
      return;
 8002d3a:	bf00      	nop
    }
  }
}
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_HCD_Start+0x16>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e013      	b.n	8002d80 <HAL_HCD_Start+0x3e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 f93c 	bl	8004fe4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fe82 	bl	8004a7a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_HCD_Stop+0x16>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e00d      	b.n	8002dba <HAL_HCD_Stop+0x32>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f002 fd36 	bl	800581c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f002 f8de 	bl	8004f90 <USB_ResetPort>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3360      	adds	r3, #96	; 0x60
 8002df8:	781b      	ldrb	r3, [r3, #0]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3350      	adds	r3, #80	; 0x50
 8002e20:	681b      	ldr	r3, [r3, #0]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 f922 	bl	8005084 <USB_GetCurrentFrame>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 f8fd 	bl	8005056 <USB_GetHostSpeed>
 8002e5c:	4603      	mov	r3, r0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d119      	bne.n	8002eca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	0151      	lsls	r1, r2, #5
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	440a      	add	r2, r1
 8002ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec2:	f043 0302 	orr.w	r3, r3, #2
 8002ec6:	60d3      	str	r3, [r2, #12]
 8002ec8:	e101      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee0:	d12b      	bne.n	8002f3a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3361      	adds	r3, #97	; 0x61
 8002f04:	2207      	movs	r2, #7
 8002f06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	0151      	lsls	r1, r2, #5
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	440a      	add	r2, r1
 8002f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 fb19 	bl	800556a <USB_HC_Halt>
 8002f38:	e0c9      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d109      	bne.n	8002f64 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2320      	movs	r3, #32
 8002f60:	6093      	str	r3, [r2, #8]
 8002f62:	e0b4      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d133      	bne.n	8002fe2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	0151      	lsls	r1, r2, #5
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	440a      	add	r2, r1
 8002f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3361      	adds	r3, #97	; 0x61
 8002fa8:	2205      	movs	r2, #5
 8002faa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2310      	movs	r3, #16
 8002fbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2308      	movs	r3, #8
 8002fce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fac5 	bl	800556a <USB_HC_Halt>
 8002fe0:	e075      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff8:	d134      	bne.n	8003064 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	0151      	lsls	r1, r2, #5
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	440a      	add	r2, r1
 8003010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3361      	adds	r3, #97	; 0x61
 8003028:	2208      	movs	r2, #8
 800302a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2310      	movs	r3, #16
 800303c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003050:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f002 fa84 	bl	800556a <USB_HC_Halt>
 8003062:	e034      	b.n	80030ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b80      	cmp	r3, #128	; 0x80
 8003078:	d129      	bne.n	80030ce <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	0151      	lsls	r1, r2, #5
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	440a      	add	r2, r1
 8003090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3361      	adds	r3, #97	; 0x61
 80030a8:	2206      	movs	r2, #6
 80030aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f002 fa57 	bl	800556a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	461a      	mov	r2, r3
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e4:	d122      	bne.n	800312c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	0151      	lsls	r1, r2, #5
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	440a      	add	r2, r1
 80030fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f002 fa2a 	bl	800556a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	461a      	mov	r2, r3
 8003124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003128:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800312a:	e2ba      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 811b 	bne.w	800337a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d019      	beq.n	8003180 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3348      	adds	r3, #72	; 0x48
 800315a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	0159      	lsls	r1, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	440b      	add	r3, r1
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	202c      	movs	r0, #44	; 0x2c
 8003176:	fb00 f303 	mul.w	r3, r0, r3
 800317a:	440b      	add	r3, r1
 800317c:	3350      	adds	r3, #80	; 0x50
 800317e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3361      	adds	r3, #97	; 0x61
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	335c      	adds	r3, #92	; 0x5c
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	2301      	movs	r3, #1
 80031b4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	333f      	adds	r3, #63	; 0x3f
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	333f      	adds	r3, #63	; 0x3f
 80031d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d121      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	0151      	lsls	r1, r2, #5
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	440a      	add	r2, r1
 80031f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f002 f9ae 	bl	800556a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	461a      	mov	r2, r3
 800321c:	2310      	movs	r3, #16
 800321e:	6093      	str	r3, [r2, #8]
 8003220:	e066      	b.n	80032f0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	333f      	adds	r3, #63	; 0x3f
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d127      	bne.n	8003286 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	0151      	lsls	r1, r2, #5
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	440a      	add	r2, r1
 800324c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003254:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3360      	adds	r3, #96	; 0x60
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	b2d9      	uxtb	r1, r3
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	202c      	movs	r0, #44	; 0x2c
 8003272:	fb00 f303 	mul.w	r3, r0, r3
 8003276:	4413      	add	r3, r2
 8003278:	3360      	adds	r3, #96	; 0x60
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f008 f84e 	bl	800b320 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003284:	e034      	b.n	80032f0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	333f      	adds	r3, #63	; 0x3f
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d12a      	bne.n	80032f0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3360      	adds	r3, #96	; 0x60
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3354      	adds	r3, #84	; 0x54
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	f083 0301 	eor.w	r3, r3, #1
 80032c0:	b2d8      	uxtb	r0, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3354      	adds	r3, #84	; 0x54
 80032d0:	4602      	mov	r2, r0
 80032d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	b2d9      	uxtb	r1, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	202c      	movs	r0, #44	; 0x2c
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3360      	adds	r3, #96	; 0x60
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f008 f818 	bl	800b320 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d12b      	bne.n	8003350 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3348      	adds	r3, #72	; 0x48
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	202c      	movs	r0, #44	; 0x2c
 800330e:	fb00 f202 	mul.w	r2, r0, r2
 8003312:	440a      	add	r2, r1
 8003314:	3240      	adds	r2, #64	; 0x40
 8003316:	8812      	ldrh	r2, [r2, #0]
 8003318:	fbb3 f3f2 	udiv	r3, r3, r2
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 81be 	beq.w	80036a2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3354      	adds	r3, #84	; 0x54
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	f083 0301 	eor.w	r3, r3, #1
 800333a:	b2d8      	uxtb	r0, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3354      	adds	r3, #84	; 0x54
 800334a:	4602      	mov	r2, r0
 800334c:	701a      	strb	r2, [r3, #0]
}
 800334e:	e1a8      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3354      	adds	r3, #84	; 0x54
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	f083 0301 	eor.w	r3, r3, #1
 8003364:	b2d8      	uxtb	r0, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3354      	adds	r3, #84	; 0x54
 8003374:	4602      	mov	r2, r0
 8003376:	701a      	strb	r2, [r3, #0]
}
 8003378:	e193      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	f040 8106 	bne.w	800359e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	0151      	lsls	r1, r2, #5
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	440a      	add	r2, r1
 80033a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ac:	f023 0302 	bic.w	r3, r3, #2
 80033b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	3361      	adds	r3, #97	; 0x61
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d109      	bne.n	80033da <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3360      	adds	r3, #96	; 0x60
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
 80033d8:	e0c9      	b.n	800356e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	3361      	adds	r3, #97	; 0x61
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d109      	bne.n	8003402 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3360      	adds	r3, #96	; 0x60
 80033fc:	2205      	movs	r2, #5
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e0b5      	b.n	800356e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	3361      	adds	r3, #97	; 0x61
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b06      	cmp	r3, #6
 8003414:	d009      	beq.n	800342a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	3361      	adds	r3, #97	; 0x61
 8003424:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003426:	2b08      	cmp	r3, #8
 8003428:	d150      	bne.n	80034cc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	335c      	adds	r3, #92	; 0x5c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	202c      	movs	r0, #44	; 0x2c
 8003442:	fb00 f303 	mul.w	r3, r0, r3
 8003446:	440b      	add	r3, r1
 8003448:	335c      	adds	r3, #92	; 0x5c
 800344a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	335c      	adds	r3, #92	; 0x5c
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d912      	bls.n	8003486 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	335c      	adds	r3, #92	; 0x5c
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	3360      	adds	r3, #96	; 0x60
 8003480:	2204      	movs	r2, #4
 8003482:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003484:	e073      	b.n	800356e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	3360      	adds	r3, #96	; 0x60
 8003494:	2202      	movs	r2, #2
 8003496:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034ae:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034b6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034ca:	e050      	b.n	800356e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3361      	adds	r3, #97	; 0x61
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d122      	bne.n	8003526 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3360      	adds	r3, #96	; 0x60
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003508:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003510:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e023      	b.n	800356e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3361      	adds	r3, #97	; 0x61
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b07      	cmp	r3, #7
 8003538:	d119      	bne.n	800356e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	212c      	movs	r1, #44	; 0x2c
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	4413      	add	r3, r2
 8003546:	335c      	adds	r3, #92	; 0x5c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	202c      	movs	r0, #44	; 0x2c
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	440b      	add	r3, r1
 8003558:	335c      	adds	r3, #92	; 0x5c
 800355a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3360      	adds	r3, #96	; 0x60
 800356a:	2204      	movs	r2, #4
 800356c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357a:	461a      	mov	r2, r3
 800357c:	2302      	movs	r3, #2
 800357e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	b2d9      	uxtb	r1, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	202c      	movs	r0, #44	; 0x2c
 800358a:	fb00 f303 	mul.w	r3, r0, r3
 800358e:	4413      	add	r3, r2
 8003590:	3360      	adds	r3, #96	; 0x60
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f007 fec2 	bl	800b320 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800359c:	e081      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d176      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	333f      	adds	r3, #63	; 0x3f
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d121      	bne.n	800360c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	335c      	adds	r3, #92	; 0x5c
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	0151      	lsls	r1, r2, #5
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	440a      	add	r2, r1
 80035f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f001 ffb0 	bl	800556a <USB_HC_Halt>
 800360a:	e041      	b.n	8003690 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	333f      	adds	r3, #63	; 0x3f
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	333f      	adds	r3, #63	; 0x3f
 800362e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003630:	2b02      	cmp	r3, #2
 8003632:	d12d      	bne.n	8003690 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	335c      	adds	r3, #92	; 0x5c
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d120      	bne.n	8003690 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3361      	adds	r3, #97	; 0x61
 800365c:	2203      	movs	r2, #3
 800365e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	0151      	lsls	r1, r2, #5
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	440a      	add	r2, r1
 8003676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800367a:	f043 0302 	orr.w	r3, r3, #2
 800367e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f001 ff6d 	bl	800556a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369c:	461a      	mov	r2, r3
 800369e:	2310      	movs	r3, #16
 80036a0:	6093      	str	r3, [r2, #8]
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b088      	sub	sp, #32
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d119      	bne.n	800370e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e6:	461a      	mov	r2, r3
 80036e8:	2304      	movs	r3, #4
 80036ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	440a      	add	r2, r1
 8003702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800370c:	e3ca      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b20      	cmp	r3, #32
 8003722:	d13e      	bne.n	80037a2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	461a      	mov	r2, r3
 8003732:	2320      	movs	r3, #32
 8003734:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	333d      	adds	r3, #61	; 0x3d
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	f040 83ac 	bne.w	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	333d      	adds	r3, #61	; 0x3d
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	3360      	adds	r3, #96	; 0x60
 800376c:	2202      	movs	r2, #2
 800376e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	0151      	lsls	r1, r2, #5
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	440a      	add	r2, r1
 8003786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f001 fee5 	bl	800556a <USB_HC_Halt>
}
 80037a0:	e380      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d122      	bne.n	8003800 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	0151      	lsls	r1, r2, #5
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	440a      	add	r2, r1
 80037d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fec0 	bl	800556a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fc:	6093      	str	r3, [r2, #8]
}
 80037fe:	e351      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d150      	bne.n	80038b8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	335c      	adds	r3, #92	; 0x5c
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d111      	bne.n	8003862 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	212c      	movs	r1, #44	; 0x2c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	333d      	adds	r3, #61	; 0x3d
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385c:	461a      	mov	r2, r3
 800385e:	2340      	movs	r3, #64	; 0x40
 8003860:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	440a      	add	r2, r1
 8003878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f001 fe6c 	bl	800556a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	4413      	add	r3, r2
 800389a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389e:	461a      	mov	r2, r3
 80038a0:	2301      	movs	r3, #1
 80038a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	212c      	movs	r1, #44	; 0x2c
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	3361      	adds	r3, #97	; 0x61
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
}
 80038b6:	e2f5      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d13c      	bne.n	8003948 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	212c      	movs	r1, #44	; 0x2c
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	3361      	adds	r3, #97	; 0x61
 80038dc:	2204      	movs	r2, #4
 80038de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	333d      	adds	r3, #61	; 0x3d
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	335c      	adds	r3, #92	; 0x5c
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	440a      	add	r2, r1
 800391a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391e:	f043 0302 	orr.w	r3, r3, #2
 8003922:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fe1b 	bl	800556a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	461a      	mov	r2, r3
 8003942:	2340      	movs	r3, #64	; 0x40
 8003944:	6093      	str	r3, [r2, #8]
}
 8003946:	e2ad      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b08      	cmp	r3, #8
 800395c:	d12a      	bne.n	80039b4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4413      	add	r3, r2
 8003966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396a:	461a      	mov	r2, r3
 800396c:	2308      	movs	r3, #8
 800396e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	440a      	add	r2, r1
 8003986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f001 fde5 	bl	800556a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3361      	adds	r3, #97	; 0x61
 80039ae:	2205      	movs	r2, #5
 80039b0:	701a      	strb	r2, [r3, #0]
}
 80039b2:	e277      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d150      	bne.n	8003a6c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	335c      	adds	r3, #92	; 0x5c
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3361      	adds	r3, #97	; 0x61
 80039ea:	2203      	movs	r2, #3
 80039ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	333d      	adds	r3, #61	; 0x3d
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d112      	bne.n	8003a28 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	333c      	adds	r3, #60	; 0x3c
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d108      	bne.n	8003a28 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	333d      	adds	r3, #61	; 0x3d
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a42:	f043 0302 	orr.w	r3, r3, #2
 8003a46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fd89 	bl	800556a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2310      	movs	r3, #16
 8003a68:	6093      	str	r3, [r2, #8]
}
 8003a6a:	e21b      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7e:	2b80      	cmp	r3, #128	; 0x80
 8003a80:	d174      	bne.n	8003b6c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d121      	bne.n	8003ace <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	212c      	movs	r1, #44	; 0x2c
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	4413      	add	r3, r2
 8003a96:	3361      	adds	r3, #97	; 0x61
 8003a98:	2206      	movs	r2, #6
 8003a9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 fd4f 	bl	800556a <USB_HC_Halt>
 8003acc:	e044      	b.n	8003b58 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	335c      	adds	r3, #92	; 0x5c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	202c      	movs	r0, #44	; 0x2c
 8003ae6:	fb00 f303 	mul.w	r3, r0, r3
 8003aea:	440b      	add	r3, r1
 8003aec:	335c      	adds	r3, #92	; 0x5c
 8003aee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	335c      	adds	r3, #92	; 0x5c
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d920      	bls.n	8003b46 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	335c      	adds	r3, #92	; 0x5c
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	212c      	movs	r1, #44	; 0x2c
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	3360      	adds	r3, #96	; 0x60
 8003b24:	2204      	movs	r2, #4
 8003b26:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	b2d9      	uxtb	r1, r3
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	202c      	movs	r0, #44	; 0x2c
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3360      	adds	r3, #96	; 0x60
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f007 fbee 	bl	800b320 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b44:	e008      	b.n	8003b58 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3360      	adds	r3, #96	; 0x60
 8003b54:	2202      	movs	r2, #2
 8003b56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b64:	461a      	mov	r2, r3
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	6093      	str	r3, [r2, #8]
}
 8003b6a:	e19b      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d134      	bne.n	8003bee <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b9e:	f043 0302 	orr.w	r3, r3, #2
 8003ba2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fcdb 	bl	800556a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3361      	adds	r3, #97	; 0x61
 8003be8:	2208      	movs	r2, #8
 8003bea:	701a      	strb	r2, [r3, #0]
}
 8003bec:	e15a      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	f040 814f 	bne.w	8003ea4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c20:	f023 0302 	bic.w	r3, r3, #2
 8003c24:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	3361      	adds	r3, #97	; 0x61
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d17d      	bne.n	8003d36 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	212c      	movs	r1, #44	; 0x2c
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	3360      	adds	r3, #96	; 0x60
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	333f      	adds	r3, #63	; 0x3f
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d00a      	beq.n	8003c76 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	333f      	adds	r3, #63	; 0x3f
 8003c6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	f040 8100 	bne.w	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3355      	adds	r3, #85	; 0x55
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2d8      	uxtb	r0, r3
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3355      	adds	r3, #85	; 0x55
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	f040 80e3 	bne.w	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	334c      	adds	r3, #76	; 0x4c
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80d8 	beq.w	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	334c      	adds	r3, #76	; 0x4c
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	202c      	movs	r0, #44	; 0x2c
 8003cdc:	fb00 f202 	mul.w	r2, r0, r2
 8003ce0:	440a      	add	r2, r1
 8003ce2:	3240      	adds	r2, #64	; 0x40
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	202c      	movs	r0, #44	; 0x2c
 8003cf0:	fb00 f202 	mul.w	r2, r0, r2
 8003cf4:	440a      	add	r2, r1
 8003cf6:	3240      	adds	r2, #64	; 0x40
 8003cf8:	8812      	ldrh	r2, [r2, #0]
 8003cfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80b5 	beq.w	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	3355      	adds	r3, #85	; 0x55
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f083 0301 	eor.w	r3, r3, #1
 8003d20:	b2d8      	uxtb	r0, r3
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	212c      	movs	r1, #44	; 0x2c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3355      	adds	r3, #85	; 0x55
 8003d30:	4602      	mov	r2, r0
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e09f      	b.n	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	3361      	adds	r3, #97	; 0x61
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d109      	bne.n	8003d5e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	212c      	movs	r1, #44	; 0x2c
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	3360      	adds	r3, #96	; 0x60
 8003d58:	2202      	movs	r2, #2
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e08b      	b.n	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	212c      	movs	r1, #44	; 0x2c
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	3361      	adds	r3, #97	; 0x61
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d109      	bne.n	8003d86 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3360      	adds	r3, #96	; 0x60
 8003d80:	2202      	movs	r2, #2
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e077      	b.n	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	3361      	adds	r3, #97	; 0x61
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b05      	cmp	r3, #5
 8003d98:	d109      	bne.n	8003dae <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	3360      	adds	r3, #96	; 0x60
 8003da8:	2205      	movs	r2, #5
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	e063      	b.n	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	3361      	adds	r3, #97	; 0x61
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d009      	beq.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3361      	adds	r3, #97	; 0x61
 8003dd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d14f      	bne.n	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	212c      	movs	r1, #44	; 0x2c
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	335c      	adds	r3, #92	; 0x5c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	202c      	movs	r0, #44	; 0x2c
 8003dee:	fb00 f303 	mul.w	r3, r0, r3
 8003df2:	440b      	add	r3, r1
 8003df4:	335c      	adds	r3, #92	; 0x5c
 8003df6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	212c      	movs	r1, #44	; 0x2c
 8003dfe:	fb01 f303 	mul.w	r3, r1, r3
 8003e02:	4413      	add	r3, r2
 8003e04:	335c      	adds	r3, #92	; 0x5c
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d912      	bls.n	8003e32 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	335c      	adds	r3, #92	; 0x5c
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3360      	adds	r3, #96	; 0x60
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e021      	b.n	8003e76 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3360      	adds	r3, #96	; 0x60
 8003e40:	2202      	movs	r2, #2
 8003e42:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e5a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e62:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	461a      	mov	r2, r3
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	461a      	mov	r2, r3
 8003e84:	2302      	movs	r3, #2
 8003e86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	b2d9      	uxtb	r1, r3
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	202c      	movs	r0, #44	; 0x2c
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	3360      	adds	r3, #96	; 0x60
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f007 fa3e 	bl	800b320 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ea4:	bf00      	nop
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	0c5b      	lsrs	r3, r3, #17
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d004      	beq.n	8003ef2 <HCD_RXQLVL_IRQHandler+0x46>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b05      	cmp	r3, #5
 8003eec:	f000 80a9 	beq.w	8004042 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ef0:	e0aa      	b.n	8004048 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a6 	beq.w	8004046 <HCD_RXQLVL_IRQHandler+0x19a>
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	3344      	adds	r3, #68	; 0x44
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 809b 	beq.w	8004046 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3350      	adds	r3, #80	; 0x50
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	441a      	add	r2, r3
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	202c      	movs	r0, #44	; 0x2c
 8003f2a:	fb00 f303 	mul.w	r3, r0, r3
 8003f2e:	440b      	add	r3, r1
 8003f30:	334c      	adds	r3, #76	; 0x4c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d87a      	bhi.n	800402e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3344      	adds	r3, #68	; 0x44
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	f000 fe83 	bl	8004c5c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	212c      	movs	r1, #44	; 0x2c
 8003f5c:	fb01 f303 	mul.w	r3, r1, r3
 8003f60:	4413      	add	r3, r2
 8003f62:	3344      	adds	r3, #68	; 0x44
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	441a      	add	r2, r3
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	202c      	movs	r0, #44	; 0x2c
 8003f70:	fb00 f303 	mul.w	r3, r0, r3
 8003f74:	440b      	add	r3, r1
 8003f76:	3344      	adds	r3, #68	; 0x44
 8003f78:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	212c      	movs	r1, #44	; 0x2c
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	3350      	adds	r3, #80	; 0x50
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	202c      	movs	r0, #44	; 0x2c
 8003f94:	fb00 f303 	mul.w	r3, r0, r3
 8003f98:	440b      	add	r3, r1
 8003f9a:	3350      	adds	r3, #80	; 0x50
 8003f9c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	0cdb      	lsrs	r3, r3, #19
 8003fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3340      	adds	r3, #64	; 0x40
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d13c      	bne.n	8004046 <HCD_RXQLVL_IRQHandler+0x19a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d039      	beq.n	8004046 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fe8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ff0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	461a      	mov	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3354      	adds	r3, #84	; 0x54
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	f083 0301 	eor.w	r3, r3, #1
 8004018:	b2d8      	uxtb	r0, r3
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	3354      	adds	r3, #84	; 0x54
 8004028:	4602      	mov	r2, r0
 800402a:	701a      	strb	r2, [r3, #0]
      break;
 800402c:	e00b      	b.n	8004046 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	3360      	adds	r3, #96	; 0x60
 800403c:	2204      	movs	r2, #4
 800403e:	701a      	strb	r2, [r3, #0]
      break;
 8004040:	e001      	b.n	8004046 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004046:	bf00      	nop
  }
}
 8004048:	bf00      	nop
 800404a:	3728      	adds	r7, #40	; 0x28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800407c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d10b      	bne.n	80040a0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d102      	bne.n	8004098 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f007 f928 	bl	800b2e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d132      	bne.n	8004110 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f043 0308 	orr.w	r3, r3, #8
 80040b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d126      	bne.n	800410a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d113      	bne.n	80040ec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ce:	d106      	bne.n	80040de <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2102      	movs	r1, #2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 ff20 	bl	8004f1c <USB_InitFSLSPClkSel>
 80040dc:	e011      	b.n	8004102 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 ff19 	bl	8004f1c <USB_InitFSLSPClkSel>
 80040ea:	e00a      	b.n	8004102 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d106      	bne.n	8004102 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040fa:	461a      	mov	r2, r3
 80040fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004100:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f007 f91a 	bl	800b33c <HAL_HCD_PortEnabled_Callback>
 8004108:	e002      	b.n	8004110 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f007 f924 	bl	800b358 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b20      	cmp	r3, #32
 8004118:	d103      	bne.n	8004122 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f043 0320 	orr.w	r3, r3, #32
 8004120:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004128:	461a      	mov	r2, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6013      	str	r3, [r2, #0]
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e264      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d075      	beq.n	8004242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004156:	4ba3      	ldr	r3, [pc, #652]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b04      	cmp	r3, #4
 8004160:	d00c      	beq.n	800417c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004162:	4ba0      	ldr	r3, [pc, #640]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800416a:	2b08      	cmp	r3, #8
 800416c:	d112      	bne.n	8004194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416e:	4b9d      	ldr	r3, [pc, #628]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417a:	d10b      	bne.n	8004194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417c:	4b99      	ldr	r3, [pc, #612]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d05b      	beq.n	8004240 <HAL_RCC_OscConfig+0x108>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d157      	bne.n	8004240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e23f      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d106      	bne.n	80041ac <HAL_RCC_OscConfig+0x74>
 800419e:	4b91      	ldr	r3, [pc, #580]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a90      	ldr	r2, [pc, #576]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e01d      	b.n	80041e8 <HAL_RCC_OscConfig+0xb0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b4:	d10c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x98>
 80041b6:	4b8b      	ldr	r3, [pc, #556]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a8a      	ldr	r2, [pc, #552]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	4b88      	ldr	r3, [pc, #544]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a87      	ldr	r2, [pc, #540]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e00b      	b.n	80041e8 <HAL_RCC_OscConfig+0xb0>
 80041d0:	4b84      	ldr	r3, [pc, #528]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a83      	ldr	r2, [pc, #524]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b81      	ldr	r3, [pc, #516]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a80      	ldr	r2, [pc, #512]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d013      	beq.n	8004218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fd ff22 	bl	8002038 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f8:	f7fd ff1e 	bl	8002038 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	; 0x64
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e204      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b76      	ldr	r3, [pc, #472]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0xc0>
 8004216:	e014      	b.n	8004242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fd ff0e 	bl	8002038 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004220:	f7fd ff0a 	bl	8002038 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e1f0      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004232:	4b6c      	ldr	r3, [pc, #432]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0xe8>
 800423e:	e000      	b.n	8004242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d063      	beq.n	8004316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800424e:	4b65      	ldr	r3, [pc, #404]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00b      	beq.n	8004272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425a:	4b62      	ldr	r3, [pc, #392]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004262:	2b08      	cmp	r3, #8
 8004264:	d11c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004266:	4b5f      	ldr	r3, [pc, #380]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d116      	bne.n	80042a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004272:	4b5c      	ldr	r3, [pc, #368]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d005      	beq.n	800428a <HAL_RCC_OscConfig+0x152>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d001      	beq.n	800428a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e1c4      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428a:	4b56      	ldr	r3, [pc, #344]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4952      	ldr	r1, [pc, #328]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	e03a      	b.n	8004316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d020      	beq.n	80042ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a8:	4b4f      	ldr	r3, [pc, #316]	; (80043e8 <HAL_RCC_OscConfig+0x2b0>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fd fec3 	bl	8002038 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b6:	f7fd febf 	bl	8002038 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e1a5      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c8:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d4:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4940      	ldr	r1, [pc, #256]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]
 80042e8:	e015      	b.n	8004316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ea:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <HAL_RCC_OscConfig+0x2b0>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fd fea2 	bl	8002038 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042f8:	f7fd fe9e 	bl	8002038 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e184      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d030      	beq.n	8004384 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432a:	4b30      	ldr	r3, [pc, #192]	; (80043ec <HAL_RCC_OscConfig+0x2b4>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fd fe82 	bl	8002038 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004338:	f7fd fe7e 	bl	8002038 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e164      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434a:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x200>
 8004356:	e015      	b.n	8004384 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004358:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x2b4>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435e:	f7fd fe6b 	bl	8002038 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004366:	f7fd fe67 	bl	8002038 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e14d      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 800437a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f0      	bne.n	8004366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80a0 	beq.w	80044d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004396:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10f      	bne.n	80043c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6413      	str	r3, [r2, #64]	; 0x40
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043be:	2301      	movs	r3, #1
 80043c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_RCC_OscConfig+0x2b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d121      	bne.n	8004412 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <HAL_RCC_OscConfig+0x2b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <HAL_RCC_OscConfig+0x2b8>)
 80043d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043da:	f7fd fe2d 	bl	8002038 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	e011      	b.n	8004406 <HAL_RCC_OscConfig+0x2ce>
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
 80043e8:	42470000 	.word	0x42470000
 80043ec:	42470e80 	.word	0x42470e80
 80043f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7fd fe20 	bl	8002038 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e106      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004406:	4b85      	ldr	r3, [pc, #532]	; (800461c <HAL_RCC_OscConfig+0x4e4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d106      	bne.n	8004428 <HAL_RCC_OscConfig+0x2f0>
 800441a:	4b81      	ldr	r3, [pc, #516]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	4a80      	ldr	r2, [pc, #512]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	; 0x70
 8004426:	e01c      	b.n	8004462 <HAL_RCC_OscConfig+0x32a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b05      	cmp	r3, #5
 800442e:	d10c      	bne.n	800444a <HAL_RCC_OscConfig+0x312>
 8004430:	4b7b      	ldr	r3, [pc, #492]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a7a      	ldr	r2, [pc, #488]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
 800443c:	4b78      	ldr	r3, [pc, #480]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	4a77      	ldr	r2, [pc, #476]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6713      	str	r3, [r2, #112]	; 0x70
 8004448:	e00b      	b.n	8004462 <HAL_RCC_OscConfig+0x32a>
 800444a:	4b75      	ldr	r3, [pc, #468]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a74      	ldr	r2, [pc, #464]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6713      	str	r3, [r2, #112]	; 0x70
 8004456:	4b72      	ldr	r3, [pc, #456]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	4a71      	ldr	r2, [pc, #452]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 800445c:	f023 0304 	bic.w	r3, r3, #4
 8004460:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d015      	beq.n	8004496 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fd fde5 	bl	8002038 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd fde1 	bl	8002038 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0c5      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004488:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ee      	beq.n	8004472 <HAL_RCC_OscConfig+0x33a>
 8004494:	e014      	b.n	80044c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004496:	f7fd fdcf 	bl	8002038 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449c:	e00a      	b.n	80044b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449e:	f7fd fdcb 	bl	8002038 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0af      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b4:	4b5a      	ldr	r3, [pc, #360]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ee      	bne.n	800449e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d105      	bne.n	80044d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c6:	4b56      	ldr	r3, [pc, #344]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a55      	ldr	r2, [pc, #340]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 80044cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 809b 	beq.w	8004612 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044dc:	4b50      	ldr	r3, [pc, #320]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d05c      	beq.n	80045a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d141      	bne.n	8004574 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f0:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <HAL_RCC_OscConfig+0x4ec>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f6:	f7fd fd9f 	bl	8002038 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fe:	f7fd fd9b 	bl	8002038 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e081      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004510:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	019b      	lsls	r3, r3, #6
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	3b01      	subs	r3, #1
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	061b      	lsls	r3, r3, #24
 8004540:	4937      	ldr	r1, [pc, #220]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004546:	4b37      	ldr	r3, [pc, #220]	; (8004624 <HAL_RCC_OscConfig+0x4ec>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fd fd74 	bl	8002038 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004554:	f7fd fd70 	bl	8002038 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e056      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x41c>
 8004572:	e04e      	b.n	8004612 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_OscConfig+0x4ec>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd fd5d 	bl	8002038 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004582:	f7fd fd59 	bl	8002038 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e03f      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004594:	4b22      	ldr	r3, [pc, #136]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <HAL_RCC_OscConfig+0x44a>
 80045a0:	e037      	b.n	8004612 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e032      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_RCC_OscConfig+0x4e8>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d028      	beq.n	800460e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d121      	bne.n	800460e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d11a      	bne.n	800460e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045de:	4013      	ands	r3, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d111      	bne.n	800460e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	3b01      	subs	r3, #1
 80045f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d107      	bne.n	800460e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40007000 	.word	0x40007000
 8004620:	40023800 	.word	0x40023800
 8004624:	42470060 	.word	0x42470060

08004628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0cc      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800463c:	4b68      	ldr	r3, [pc, #416]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d90c      	bls.n	8004664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b65      	ldr	r3, [pc, #404]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0b8      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	4a58      	ldr	r2, [pc, #352]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004694:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800469e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a0:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	494d      	ldr	r1, [pc, #308]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d044      	beq.n	8004748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d119      	bne.n	8004706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d003      	beq.n	80046e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e6:	4b3f      	ldr	r3, [pc, #252]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e06f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f6:	4b3b      	ldr	r3, [pc, #236]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e067      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004706:	4b37      	ldr	r3, [pc, #220]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4934      	ldr	r1, [pc, #208]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004718:	f7fd fc8e 	bl	8002038 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	e00a      	b.n	8004736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fd fc8a 	bl	8002038 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e04f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 020c 	and.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	429a      	cmp	r2, r3
 8004746:	d1eb      	bne.n	8004720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004748:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d20c      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e032      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4916      	ldr	r1, [pc, #88]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	490e      	ldr	r1, [pc, #56]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ae:	f000 f821 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80047b2:	4602      	mov	r2, r0
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	490a      	ldr	r1, [pc, #40]	; (80047e8 <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	5ccb      	ldrb	r3, [r1, r3]
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCC_ClockConfig+0x1c8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fd fbee 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40023c00 	.word	0x40023c00
 80047e4:	40023800 	.word	0x40023800
 80047e8:	0800d5fc 	.word	0x0800d5fc
 80047ec:	20000000 	.word	0x20000000
 80047f0:	20000004 	.word	0x20000004

080047f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	2300      	movs	r3, #0
 8004806:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480c:	4b67      	ldr	r3, [pc, #412]	; (80049ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b08      	cmp	r3, #8
 8004816:	d00d      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x40>
 8004818:	2b08      	cmp	r3, #8
 800481a:	f200 80bd 	bhi.w	8004998 <HAL_RCC_GetSysClockFreq+0x1a4>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0x34>
 8004822:	2b04      	cmp	r3, #4
 8004824:	d003      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0x3a>
 8004826:	e0b7      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004828:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800482a:	60bb      	str	r3, [r7, #8]
       break;
 800482c:	e0b7      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800482e:	4b61      	ldr	r3, [pc, #388]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004830:	60bb      	str	r3, [r7, #8]
      break;
 8004832:	e0b4      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004834:	4b5d      	ldr	r3, [pc, #372]	; (80049ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800483e:	4b5b      	ldr	r3, [pc, #364]	; (80049ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04d      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484a:	4b58      	ldr	r3, [pc, #352]	; (80049ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	099b      	lsrs	r3, r3, #6
 8004850:	461a      	mov	r2, r3
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	ea02 0800 	and.w	r8, r2, r0
 8004862:	ea03 0901 	and.w	r9, r3, r1
 8004866:	4640      	mov	r0, r8
 8004868:	4649      	mov	r1, r9
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	014b      	lsls	r3, r1, #5
 8004874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004878:	0142      	lsls	r2, r0, #5
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	ebb0 0008 	subs.w	r0, r0, r8
 8004882:	eb61 0109 	sbc.w	r1, r1, r9
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	018b      	lsls	r3, r1, #6
 8004890:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004894:	0182      	lsls	r2, r0, #6
 8004896:	1a12      	subs	r2, r2, r0
 8004898:	eb63 0301 	sbc.w	r3, r3, r1
 800489c:	f04f 0000 	mov.w	r0, #0
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	00d9      	lsls	r1, r3, #3
 80048a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048aa:	00d0      	lsls	r0, r2, #3
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	eb12 0208 	adds.w	r2, r2, r8
 80048b4:	eb43 0309 	adc.w	r3, r3, r9
 80048b8:	f04f 0000 	mov.w	r0, #0
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	0259      	lsls	r1, r3, #9
 80048c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048c6:	0250      	lsls	r0, r2, #9
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	f7fc f808 	bl	80008ec <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e04a      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e6:	4b31      	ldr	r3, [pc, #196]	; (80049ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	099b      	lsrs	r3, r3, #6
 80048ec:	461a      	mov	r2, r3
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	ea02 0400 	and.w	r4, r2, r0
 80048fe:	ea03 0501 	and.w	r5, r3, r1
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	014b      	lsls	r3, r1, #5
 8004910:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004914:	0142      	lsls	r2, r0, #5
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	1b00      	subs	r0, r0, r4
 800491c:	eb61 0105 	sbc.w	r1, r1, r5
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	018b      	lsls	r3, r1, #6
 800492a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800492e:	0182      	lsls	r2, r0, #6
 8004930:	1a12      	subs	r2, r2, r0
 8004932:	eb63 0301 	sbc.w	r3, r3, r1
 8004936:	f04f 0000 	mov.w	r0, #0
 800493a:	f04f 0100 	mov.w	r1, #0
 800493e:	00d9      	lsls	r1, r3, #3
 8004940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004944:	00d0      	lsls	r0, r2, #3
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	1912      	adds	r2, r2, r4
 800494c:	eb45 0303 	adc.w	r3, r5, r3
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	0299      	lsls	r1, r3, #10
 800495a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800495e:	0290      	lsls	r0, r2, #10
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	461a      	mov	r2, r3
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	f7fb ffbc 	bl	80008ec <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4613      	mov	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	3301      	adds	r3, #1
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	60bb      	str	r3, [r7, #8]
      break;
 8004996:	e002      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800499a:	60bb      	str	r3, [r7, #8]
      break;
 800499c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499e:	68bb      	ldr	r3, [r7, #8]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	00f42400 	.word	0x00f42400
 80049b4:	007a1200 	.word	0x007a1200

080049b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049b8:	b084      	sub	sp, #16
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	f107 001c 	add.w	r0, r7, #28
 80049c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d122      	bne.n	8004a16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f9a0 	bl	8004d50 <USB_CoreReset>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e01a      	b.n	8004a4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f994 	bl	8004d50 <USB_CoreReset>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a3e:	e005      	b.n	8004a4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10b      	bne.n	8004a6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f043 0206 	orr.w	r2, r3, #6
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f043 0220 	orr.w	r2, r3, #32
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a76:	b004      	add	sp, #16
 8004a78:	4770      	bx	lr

08004a7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f043 0201 	orr.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f023 0201 	bic.w	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d115      	bne.n	8004b0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004aec:	2001      	movs	r0, #1
 8004aee:	f7fd faaf 	bl	8002050 <HAL_Delay>
      ms++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3301      	adds	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f91a 	bl	8004d32 <USB_GetMode>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d01e      	beq.n	8004b42 <USB_SetCurrentMode+0x84>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b31      	cmp	r3, #49	; 0x31
 8004b08:	d9f0      	bls.n	8004aec <USB_SetCurrentMode+0x2e>
 8004b0a:	e01a      	b.n	8004b42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d115      	bne.n	8004b3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f7fd fa96 	bl	8002050 <HAL_Delay>
      ms++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f901 	bl	8004d32 <USB_GetMode>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <USB_SetCurrentMode+0x84>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b31      	cmp	r3, #49	; 0x31
 8004b3a:	d9f0      	bls.n	8004b1e <USB_SetCurrentMode+0x60>
 8004b3c:	e001      	b.n	8004b42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e005      	b.n	8004b4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b32      	cmp	r3, #50	; 0x32
 8004b46:	d101      	bne.n	8004b4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <USB_FlushTxFifo+0x44>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e006      	b.n	8004b90 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d0f1      	beq.n	8004b72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	00030d40 	.word	0x00030d40

08004ba0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2210      	movs	r2, #16
 8004bb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <USB_FlushRxFifo+0x3c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e006      	b.n	8004bd0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d0f1      	beq.n	8004bb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	00030d40 	.word	0x00030d40

08004be0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	; 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	4611      	mov	r1, r2
 8004bec:	461a      	mov	r2, r3
 8004bee:	460b      	mov	r3, r1
 8004bf0:	71fb      	strb	r3, [r7, #7]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d123      	bne.n	8004c4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c06:	88bb      	ldrh	r3, [r7, #4]
 8004c08:	3303      	adds	r3, #3
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	e018      	b.n	8004c46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	031a      	lsls	r2, r3, #12
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c20:	461a      	mov	r2, r3
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	3301      	adds	r3, #1
 8004c38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3e2      	bcc.n	8004c14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3724      	adds	r7, #36	; 0x24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b08b      	sub	sp, #44	; 0x2c
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	e014      	b.n	8004cb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	3301      	adds	r3, #1
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	3301      	adds	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	623b      	str	r3, [r7, #32]
 8004cb2:	6a3a      	ldr	r2, [r7, #32]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d3e6      	bcc.n	8004c88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cba:	8bfb      	ldrh	r3, [r7, #30]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01e      	beq.n	8004cfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f107 0310 	add.w	r3, r7, #16
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	701a      	strb	r2, [r3, #0]
      i++;
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	3301      	adds	r3, #1
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cf2:	8bfb      	ldrh	r3, [r7, #30]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cf8:	8bfb      	ldrh	r3, [r7, #30]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1ea      	bne.n	8004cd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	372c      	adds	r7, #44	; 0x2c
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4013      	ands	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d24:	68fb      	ldr	r3, [r7, #12]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <USB_CoreReset+0x60>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e01a      	b.n	8004da2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	daf3      	bge.n	8004d5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f043 0201 	orr.w	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <USB_CoreReset+0x60>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e006      	b.n	8004da2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d0f1      	beq.n	8004d84 <USB_CoreReset+0x34>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	00030d40 	.word	0x00030d40

08004db4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db4:	b084      	sub	sp, #16
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	f107 001c 	add.w	r0, r7, #28
 8004dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d10a      	bne.n	8004e22 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e1a:	f043 0304 	orr.w	r3, r3, #4
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e014      	b.n	8004e4c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e009      	b.n	8004e4c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e46:	f023 0304 	bic.w	r3, r3, #4
 8004e4a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fe82 	bl	8004b58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff fea3 	bl	8004ba0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e015      	b.n	8004e8c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e72:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	461a      	mov	r2, r3
 8004e82:	2300      	movs	r3, #0
 8004e84:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d3e5      	bcc.n	8004e60 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00b      	beq.n	8004ec6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <USB_HostInit+0x154>)
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <USB_HostInit+0x158>)
 8004ec0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ec4:	e009      	b.n	8004eda <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2280      	movs	r2, #128	; 0x80
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <USB_HostInit+0x15c>)
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a0f      	ldr	r2, [pc, #60]	; (8004f14 <USB_HostInit+0x160>)
 8004ed6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f043 0210 	orr.w	r2, r3, #16
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <USB_HostInit+0x164>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f04:	b004      	add	sp, #16
 8004f06:	4770      	bx	lr
 8004f08:	01000200 	.word	0x01000200
 8004f0c:	00e00300 	.word	0x00e00300
 8004f10:	00600080 	.word	0x00600080
 8004f14:	004000e0 	.word	0x004000e0
 8004f18:	a3200008 	.word	0xa3200008

08004f1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d107      	bne.n	8004f6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f64:	461a      	mov	r2, r3
 8004f66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004f6a:	6053      	str	r3, [r2, #4]
 8004f6c:	e009      	b.n	8004f82 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d106      	bne.n	8004f82 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004f80:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fb0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004fc0:	2064      	movs	r0, #100	; 0x64
 8004fc2:	f7fd f845 	bl	8002050 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004fd4:	200a      	movs	r0, #10
 8004fd6:	f7fd f83b 	bl	8002050 <HAL_Delay>

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005008:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <USB_DriveVbus+0x44>
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d106      	bne.n	8005028 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005026:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005032:	d109      	bne.n	8005048 <USB_DriveVbus+0x64>
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005046:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	0c5b      	lsrs	r3, r3, #17
 8005074:	f003 0303 	and.w	r3, r3, #3
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	b29b      	uxth	r3, r3
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	70fb      	strb	r3, [r7, #3]
 80050ba:	460b      	mov	r3, r1
 80050bc:	70bb      	strb	r3, [r7, #2]
 80050be:	4613      	mov	r3, r2
 80050c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 33ff 	mov.w	r3, #4294967295
 80050dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80050de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d87e      	bhi.n	80051e4 <USB_HC_Init+0x13c>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <USB_HC_Init+0x44>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	080050fd 	.word	0x080050fd
 80050f0:	080051a7 	.word	0x080051a7
 80050f4:	080050fd 	.word	0x080050fd
 80050f8:	08005169 	.word	0x08005169
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	461a      	mov	r2, r3
 800510a:	f240 439d 	movw	r3, #1181	; 0x49d
 800510e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005110:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005114:	2b00      	cmp	r3, #0
 8005116:	da10      	bge.n	800513a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	440a      	add	r2, r1
 800512e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005136:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005138:	e057      	b.n	80051ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d051      	beq.n	80051ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	440a      	add	r2, r1
 800515c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005160:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005164:	60d3      	str	r3, [r2, #12]
      break;
 8005166:	e040      	b.n	80051ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005174:	461a      	mov	r2, r3
 8005176:	f240 639d 	movw	r3, #1693	; 0x69d
 800517a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800517c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005180:	2b00      	cmp	r3, #0
 8005182:	da34      	bge.n	80051ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	440a      	add	r2, r1
 800519a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800519e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80051a4:	e023      	b.n	80051ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	461a      	mov	r2, r3
 80051b4:	f240 2325 	movw	r3, #549	; 0x225
 80051b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da17      	bge.n	80051f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	78fa      	ldrb	r2, [r7, #3]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80051e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80051e2:	e006      	b.n	80051f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	77fb      	strb	r3, [r7, #31]
      break;
 80051e8:	e004      	b.n	80051f4 <USB_HC_Init+0x14c>
      break;
 80051ea:	bf00      	nop
 80051ec:	e002      	b.n	80051f4 <USB_HC_Init+0x14c>
      break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <USB_HC_Init+0x14c>
      break;
 80051f2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fa:	699a      	ldr	r2, [r3, #24]
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	2101      	movs	r1, #1
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	6939      	ldr	r1, [r7, #16]
 800520a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800520e:	4313      	orrs	r3, r2
 8005210:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800521e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005222:	2b00      	cmp	r3, #0
 8005224:	da03      	bge.n	800522e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	e001      	b.n	8005232 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff ff0f 	bl	8005056 <USB_GetHostSpeed>
 8005238:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800523a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800523e:	2b02      	cmp	r3, #2
 8005240:	d106      	bne.n	8005250 <USB_HC_Init+0x1a8>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d003      	beq.n	8005250 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e001      	b.n	8005254 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005254:	787b      	ldrb	r3, [r7, #1]
 8005256:	059b      	lsls	r3, r3, #22
 8005258:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800525c:	78bb      	ldrb	r3, [r7, #2]
 800525e:	02db      	lsls	r3, r3, #11
 8005260:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005264:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005266:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800526a:	049b      	lsls	r3, r3, #18
 800526c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005270:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005272:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005274:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005278:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	0159      	lsls	r1, r3, #5
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	440b      	add	r3, r1
 8005286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005290:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005292:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005296:	2b03      	cmp	r3, #3
 8005298:	d10f      	bne.n	80052ba <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	78fa      	ldrb	r2, [r7, #3]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80052ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	; 0x30
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80052dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d02d      	beq.n	800534a <USB_HC_StartXfer+0x86>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	791b      	ldrb	r3, [r3, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d129      	bne.n	800534a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d117      	bne.n	800532c <USB_HC_StartXfer+0x68>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	79db      	ldrb	r3, [r3, #7]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <USB_HC_StartXfer+0x48>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	79db      	ldrb	r3, [r3, #7]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d10f      	bne.n	800532c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	6a3a      	ldr	r2, [r7, #32]
 8005320:	440a      	add	r2, r1
 8005322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10b      	bne.n	800534a <USB_HC_StartXfer+0x86>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	795b      	ldrb	r3, [r3, #5]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	785b      	ldrb	r3, [r3, #1]
 800533e:	4619      	mov	r1, r3
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fa2f 	bl	80057a4 <USB_DoPing>
      return HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	e0f8      	b.n	800553c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	8912      	ldrh	r2, [r2, #8]
 800535a:	4413      	add	r3, r2
 800535c:	3b01      	subs	r3, #1
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	8912      	ldrh	r2, [r2, #8]
 8005362:	fbb3 f3f2 	udiv	r3, r3, r2
 8005366:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005368:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800536a:	8b7b      	ldrh	r3, [r7, #26]
 800536c:	429a      	cmp	r2, r3
 800536e:	d90b      	bls.n	8005388 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005370:	8b7b      	ldrh	r3, [r7, #26]
 8005372:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	8912      	ldrh	r2, [r2, #8]
 800537a:	fb02 f203 	mul.w	r2, r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	611a      	str	r2, [r3, #16]
 8005382:	e001      	b.n	8005388 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005384:	2301      	movs	r3, #1
 8005386:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	78db      	ldrb	r3, [r3, #3]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005390:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	8912      	ldrh	r2, [r2, #8]
 8005396:	fb02 f203 	mul.w	r2, r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	e003      	b.n	80053a8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053b2:	04d9      	lsls	r1, r3, #19
 80053b4:	4b63      	ldr	r3, [pc, #396]	; (8005544 <USB_HC_StartXfer+0x280>)
 80053b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	7a9b      	ldrb	r3, [r3, #10]
 80053be:	075b      	lsls	r3, r3, #29
 80053c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053c4:	69f9      	ldr	r1, [r7, #28]
 80053c6:	0148      	lsls	r0, r1, #5
 80053c8:	6a39      	ldr	r1, [r7, #32]
 80053ca:	4401      	add	r1, r0
 80053cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80053d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	68d9      	ldr	r1, [r3, #12]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ea:	460a      	mov	r2, r1
 80053ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	4413      	add	r3, r2
 800540e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	6a3a      	ldr	r2, [r7, #32]
 800541a:	440a      	add	r2, r1
 800541c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005420:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005424:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	4413      	add	r3, r2
 800542e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	7e7b      	ldrb	r3, [r7, #25]
 8005436:	075b      	lsls	r3, r3, #29
 8005438:	69f9      	ldr	r1, [r7, #28]
 800543a:	0148      	lsls	r0, r1, #5
 800543c:	6a39      	ldr	r1, [r7, #32]
 800543e:	4401      	add	r1, r0
 8005440:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800545e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	78db      	ldrb	r3, [r3, #3]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	e003      	b.n	800547a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005478:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005480:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548e:	461a      	mov	r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	e04e      	b.n	800553c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	78db      	ldrb	r3, [r3, #3]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d149      	bne.n	800553a <USB_HC_StartXfer+0x276>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d045      	beq.n	800553a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	79db      	ldrb	r3, [r3, #7]
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d830      	bhi.n	8005518 <USB_HC_StartXfer+0x254>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <USB_HC_StartXfer+0x1f8>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	080054cd 	.word	0x080054cd
 80054c8:	080054f1 	.word	0x080054f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	3303      	adds	r3, #3
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80054d6:	8afa      	ldrh	r2, [r7, #22]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	b29b      	uxth	r3, r3
 80054de:	429a      	cmp	r2, r3
 80054e0:	d91c      	bls.n	800551c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80054ee:	e015      	b.n	800551c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	3303      	adds	r3, #3
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80054fa:	8afa      	ldrh	r2, [r7, #22]
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	b29b      	uxth	r3, r3
 8005506:	429a      	cmp	r2, r3
 8005508:	d90a      	bls.n	8005520 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	619a      	str	r2, [r3, #24]
        }
        break;
 8005516:	e003      	b.n	8005520 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005518:	bf00      	nop
 800551a:	e002      	b.n	8005522 <USB_HC_StartXfer+0x25e>
        break;
 800551c:	bf00      	nop
 800551e:	e000      	b.n	8005522 <USB_HC_StartXfer+0x25e>
        break;
 8005520:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	68d9      	ldr	r1, [r3, #12]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	785a      	ldrb	r2, [r3, #1]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	b29b      	uxth	r3, r3
 8005530:	2000      	movs	r0, #0
 8005532:	9000      	str	r0, [sp, #0]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff fb53 	bl	8004be0 <USB_WritePacket>
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	; 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	1ff80000 	.word	0x1ff80000

08005548 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	b29b      	uxth	r3, r3
}
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800556a:	b480      	push	{r7}
 800556c:	b089      	sub	sp, #36	; 0x24
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	460b      	mov	r3, r1
 8005574:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	0c9b      	lsrs	r3, r3, #18
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	0fdb      	lsrs	r3, r3, #31
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d104      	bne.n	80055c4 <USB_HC_Halt+0x5a>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e0e8      	b.n	8005796 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <USB_HC_Halt+0x66>
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d173      	bne.n	80056b8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f040 80cb 	bne.w	8005794 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d143      	bne.n	8005692 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	440a      	add	r2, r1
 8005620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005628:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	440a      	add	r2, r1
 8005640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005648:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	440a      	add	r2, r1
 8005660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005664:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005668:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3301      	adds	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005676:	d81d      	bhi.n	80056b4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	4413      	add	r3, r2
 8005680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800568a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800568e:	d0ec      	beq.n	800566a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005690:	e080      	b.n	8005794 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056b2:	e06f      	b.n	8005794 <USB_HC_Halt+0x22a>
            break;
 80056b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056b6:	e06d      	b.n	8005794 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d143      	bne.n	8005770 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005706:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	4413      	add	r3, r2
 8005710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	440a      	add	r2, r1
 800571e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005726:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	440a      	add	r2, r1
 800573e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005742:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005746:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	3301      	adds	r3, #1
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005754:	d81d      	bhi.n	8005792 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800576c:	d0ec      	beq.n	8005748 <USB_HC_Halt+0x1de>
 800576e:	e011      	b.n	8005794 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	440a      	add	r2, r1
 8005786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800578a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e000      	b.n	8005794 <USB_HC_Halt+0x22a>
          break;
 8005792:	bf00      	nop
    }
  }

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3724      	adds	r7, #36	; 0x24
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80057b8:	2301      	movs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	04da      	lsls	r2, r3, #19
 80057c0:	4b15      	ldr	r3, [pc, #84]	; (8005818 <USB_DoPing+0x74>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	461a      	mov	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	1ff80000 	.word	0x1ff80000

0800581c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff f935 	bl	8004a9c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005832:	2110      	movs	r1, #16
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff f98f 	bl	8004b58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff f9b0 	bl	8004ba0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	e01f      	b.n	8005886 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005864:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800586c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587a:	461a      	mov	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	3301      	adds	r3, #1
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b0f      	cmp	r3, #15
 800588a:	d9dc      	bls.n	8005846 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	e034      	b.n	80058fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c6:	461a      	mov	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	3301      	adds	r3, #1
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058d8:	d80c      	bhi.n	80058f4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f0:	d0ec      	beq.n	80058cc <USB_StopHost+0xb0>
 80058f2:	e000      	b.n	80058f6 <USB_StopHost+0xda>
        break;
 80058f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3301      	adds	r3, #1
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	d9c7      	bls.n	8005892 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005908:	461a      	mov	r2, r3
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff f8ae 	bl	8004a7a <USB_EnableGlobalInt>

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800592c:	4904      	ldr	r1, [pc, #16]	; (8005940 <MX_FATFS_Init+0x18>)
 800592e:	4805      	ldr	r0, [pc, #20]	; (8005944 <MX_FATFS_Init+0x1c>)
 8005930:	f005 fbfc 	bl	800b12c <FATFS_LinkDriver>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	4b03      	ldr	r3, [pc, #12]	; (8005948 <MX_FATFS_Init+0x20>)
 800593a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800593c:	bf00      	nop
 800593e:	bd80      	pop	{r7, pc}
 8005940:	2000181c 	.word	0x2000181c
 8005944:	0800d60c 	.word	0x0800d60c
 8005948:	20003884 	.word	0x20003884

0800594c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005950:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005952:	4618      	mov	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	4603      	mov	r3, r0
 8005964:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	4619      	mov	r1, r3
 8005986:	4808      	ldr	r0, [pc, #32]	; (80059a8 <USBH_status+0x34>)
 8005988:	f000 fe1a 	bl	80065c0 <USBH_MSC_UnitIsReady>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <USBH_status+0x24>
  {
    res = RES_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
 8005996:	e001      	b.n	800599c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20003888 	.word	0x20003888

080059ac <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b094      	sub	sp, #80	; 0x50
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80059c2:	7bf9      	ldrb	r1, [r7, #15]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4813      	ldr	r0, [pc, #76]	; (8005a1c <USBH_read+0x70>)
 80059ce:	f000 fe41 	bl	8006654 <USBH_MSC_Read>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <USBH_read+0x34>
  {
    res = RES_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80059de:	e017      	b.n	8005a10 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80059e0:	f107 0210 	add.w	r2, r7, #16
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	4619      	mov	r1, r3
 80059e8:	480c      	ldr	r0, [pc, #48]	; (8005a1c <USBH_read+0x70>)
 80059ea:	f000 fe0f 	bl	800660c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80059ee:	7f7b      	ldrb	r3, [r7, #29]
 80059f0:	2b3a      	cmp	r3, #58	; 0x3a
 80059f2:	d005      	beq.n	8005a00 <USBH_read+0x54>
 80059f4:	2b3a      	cmp	r3, #58	; 0x3a
 80059f6:	dc07      	bgt.n	8005a08 <USBH_read+0x5c>
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d001      	beq.n	8005a00 <USBH_read+0x54>
 80059fc:	2b28      	cmp	r3, #40	; 0x28
 80059fe:	d103      	bne.n	8005a08 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005a00:	2303      	movs	r3, #3
 8005a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005a06:	e003      	b.n	8005a10 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005a0e:	bf00      	nop
    }
  }

  return res;
 8005a10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3748      	adds	r7, #72	; 0x48
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20003888 	.word	0x20003888

08005a20 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b094      	sub	sp, #80	; 0x50
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005a36:	7bf9      	ldrb	r1, [r7, #15]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4817      	ldr	r0, [pc, #92]	; (8005aa0 <USBH_write+0x80>)
 8005a42:	f000 fe70 	bl	8006726 <USBH_MSC_Write>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <USBH_write+0x34>
  {
    res = RES_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005a52:	e01f      	b.n	8005a94 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005a54:	f107 0210 	add.w	r2, r7, #16
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4810      	ldr	r0, [pc, #64]	; (8005aa0 <USBH_write+0x80>)
 8005a5e:	f000 fdd5 	bl	800660c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005a62:	7f7b      	ldrb	r3, [r7, #29]
 8005a64:	2b3a      	cmp	r3, #58	; 0x3a
 8005a66:	d00d      	beq.n	8005a84 <USBH_write+0x64>
 8005a68:	2b3a      	cmp	r3, #58	; 0x3a
 8005a6a:	dc0f      	bgt.n	8005a8c <USBH_write+0x6c>
 8005a6c:	2b28      	cmp	r3, #40	; 0x28
 8005a6e:	d009      	beq.n	8005a84 <USBH_write+0x64>
 8005a70:	2b28      	cmp	r3, #40	; 0x28
 8005a72:	dc0b      	bgt.n	8005a8c <USBH_write+0x6c>
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d005      	beq.n	8005a84 <USBH_write+0x64>
 8005a78:	2b27      	cmp	r3, #39	; 0x27
 8005a7a:	d107      	bne.n	8005a8c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005a82:	e007      	b.n	8005a94 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005a84:	2303      	movs	r3, #3
 8005a86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005a8a:	e003      	b.n	8005a94 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005a92:	bf00      	nop
    }
  }

  return res;
 8005a94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3748      	adds	r7, #72	; 0x48
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20003888 	.word	0x20003888

08005aa4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b090      	sub	sp, #64	; 0x40
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	603a      	str	r2, [r7, #0]
 8005aae:	71fb      	strb	r3, [r7, #7]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005aba:	79bb      	ldrb	r3, [r7, #6]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d852      	bhi.n	8005b66 <USBH_ioctl+0xc2>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <USBH_ioctl+0x24>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005ad9 	.word	0x08005ad9
 8005acc:	08005ae1 	.word	0x08005ae1
 8005ad0:	08005b0b 	.word	0x08005b0b
 8005ad4:	08005b37 	.word	0x08005b37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005ade:	e045      	b.n	8005b6c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005ae0:	f107 0208 	add.w	r2, r7, #8
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4823      	ldr	r0, [pc, #140]	; (8005b78 <USBH_ioctl+0xd4>)
 8005aea:	f000 fd8f 	bl	800660c <USBH_MSC_GetLUNInfo>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005b00:	e034      	b.n	8005b6c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005b08:	e030      	b.n	8005b6c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005b0a:	f107 0208 	add.w	r2, r7, #8
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	4619      	mov	r1, r3
 8005b12:	4819      	ldr	r0, [pc, #100]	; (8005b78 <USBH_ioctl+0xd4>)
 8005b14:	f000 fd7a 	bl	800660c <USBH_MSC_GetLUNInfo>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d107      	bne.n	8005b2e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005b1e:	8a3b      	ldrh	r3, [r7, #16]
 8005b20:	461a      	mov	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005b2c:	e01e      	b.n	8005b6c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005b34:	e01a      	b.n	8005b6c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005b36:	f107 0208 	add.w	r2, r7, #8
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	480e      	ldr	r0, [pc, #56]	; (8005b78 <USBH_ioctl+0xd4>)
 8005b40:	f000 fd64 	bl	800660c <USBH_MSC_GetLUNInfo>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005b4a:	8a3b      	ldrh	r3, [r7, #16]
 8005b4c:	0a5b      	lsrs	r3, r3, #9
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005b5c:	e006      	b.n	8005b6c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005b64:	e002      	b.n	8005b6c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005b66:	2304      	movs	r3, #4
 8005b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005b6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3740      	adds	r7, #64	; 0x40
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20003888 	.word	0x20003888

08005b7c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005b7c:	b590      	push	{r4, r7, lr}
 8005b7e:	b089      	sub	sp, #36	; 0x24
 8005b80:	af04      	add	r7, sp, #16
 8005b82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b8a:	7919      	ldrb	r1, [r3, #4]
 8005b8c:	2350      	movs	r3, #80	; 0x50
 8005b8e:	2206      	movs	r2, #6
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fc53 	bl	800743c <USBH_FindInterface>
 8005b96:	4603      	mov	r3, r0
 8005b98:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2bff      	cmp	r3, #255	; 0xff
 8005b9e:	d002      	beq.n	8005ba6 <USBH_MSC_InterfaceInit+0x2a>
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d901      	bls.n	8005baa <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e0ef      	b.n	8005d8a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 fc28 	bl	8007404 <USBH_SelectInterface>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e0e3      	b.n	8005d8a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005bc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005bcc:	f005 fe20 	bl	800b810 <malloc>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0d0      	b.n	8005d8a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bec:	2100      	movs	r1, #0
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f005 fe2c 	bl	800b84c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	211a      	movs	r1, #26
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	b25b      	sxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	da16      	bge.n	8005c3a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	211a      	movs	r1, #26
 8005c12:	fb01 f303 	mul.w	r3, r1, r3
 8005c16:	4413      	add	r3, r2
 8005c18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	211a      	movs	r1, #26
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c32:	881a      	ldrh	r2, [r3, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	815a      	strh	r2, [r3, #10]
 8005c38:	e015      	b.n	8005c66 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	211a      	movs	r1, #26
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	4413      	add	r3, r2
 8005c46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c4a:	781a      	ldrb	r2, [r3, #0]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	211a      	movs	r1, #26
 8005c56:	fb01 f303 	mul.w	r3, r1, r3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c60:	881a      	ldrh	r2, [r3, #0]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	211a      	movs	r1, #26
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b25b      	sxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da16      	bge.n	8005cac <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	211a      	movs	r1, #26
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	4413      	add	r3, r2
 8005c8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	211a      	movs	r1, #26
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ca4:	881a      	ldrh	r2, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	815a      	strh	r2, [r3, #10]
 8005caa:	e015      	b.n	8005cd8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	211a      	movs	r1, #26
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005cbc:	781a      	ldrb	r2, [r3, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	211a      	movs	r1, #26
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005cd2:	881a      	ldrh	r2, [r3, #0]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	799b      	ldrb	r3, [r3, #6]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f002 fdc4 	bl	800887e <USBH_AllocPipe>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	79db      	ldrb	r3, [r3, #7]
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f002 fdba 	bl	800887e <USBH_AllocPipe>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fdac 	bl	8006870 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	7959      	ldrb	r1, [r3, #5]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	7998      	ldrb	r0, [r3, #6]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	8912      	ldrh	r2, [r2, #8]
 8005d30:	9202      	str	r2, [sp, #8]
 8005d32:	2202      	movs	r2, #2
 8005d34:	9201      	str	r2, [sp, #4]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4623      	mov	r3, r4
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f002 fd6f 	bl	8008820 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	7919      	ldrb	r1, [r3, #4]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	79d8      	ldrb	r0, [r3, #7]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	8952      	ldrh	r2, [r2, #10]
 8005d5a:	9202      	str	r2, [sp, #8]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	9201      	str	r2, [sp, #4]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4623      	mov	r3, r4
 8005d64:	4602      	mov	r2, r0
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f002 fd5a 	bl	8008820 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	791b      	ldrb	r3, [r3, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f005 fc6d 	bl	800b654 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	795b      	ldrb	r3, [r3, #5]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f005 fc66 	bl	800b654 <USBH_LL_SetToggle>

  return USBH_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd90      	pop	{r4, r7, pc}

08005d92 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	795b      	ldrb	r3, [r3, #5]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00e      	beq.n	8005dca <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	795b      	ldrb	r3, [r3, #5]
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f002 fd53 	bl	800885e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	795b      	ldrb	r3, [r3, #5]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f002 fd7e 	bl	80088c0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	791b      	ldrb	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00e      	beq.n	8005df0 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	791b      	ldrb	r3, [r3, #4]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f002 fd40 	bl	800885e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	791b      	ldrb	r3, [r3, #4]
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f002 fd6b 	bl	80088c0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f005 fd0b 	bl	800b820 <free>
    phost->pActiveClass->pData = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e10:	2200      	movs	r2, #0
 8005e12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	7b9b      	ldrb	r3, [r3, #14]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d041      	beq.n	8005ec0 <USBH_MSC_ClassRequest+0xa2>
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	dc4b      	bgt.n	8005ed8 <USBH_MSC_ClassRequest+0xba>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <USBH_MSC_ClassRequest+0x2a>
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d147      	bne.n	8005ed8 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fcf0 	bl	8006832 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005e52:	4603      	mov	r3, r0
 8005e54:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d104      	bne.n	8005e66 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d137      	bne.n	8005edc <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d804      	bhi.n	8005e7e <USBH_MSC_ClassRequest+0x60>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	e000      	b.n	8005e80 <USBH_MSC_ClassRequest+0x62>
 8005e7e:	2202      	movs	r2, #2
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	73bb      	strb	r3, [r7, #14]
 8005e88:	e014      	b.n	8005eb4 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	2134      	movs	r1, #52	; 0x34
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	4413      	add	r3, r2
 8005e96:	3392      	adds	r3, #146	; 0x92
 8005e98:	2202      	movs	r2, #2
 8005e9a:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	2134      	movs	r1, #52	; 0x34
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	33c1      	adds	r3, #193	; 0xc1
 8005eaa:	2200      	movs	r2, #0
 8005eac:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	73bb      	strb	r3, [r7, #14]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	7bba      	ldrb	r2, [r7, #14]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d3e5      	bcc.n	8005e8a <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8005ebe:	e00d      	b.n	8005edc <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f002 f87b 	bl	8007fbe <USBH_ClrFeature>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d108      	bne.n	8005ee0 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	7bda      	ldrb	r2, [r3, #15]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005ed6:	e003      	b.n	8005ee0 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005ed8:	bf00      	nop
 8005eda:	e002      	b.n	8005ee2 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005edc:	bf00      	nop
 8005ede:	e000      	b.n	8005ee2 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005ee0:	bf00      	nop
  }

  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005efe:	2301      	movs	r3, #1
 8005f00:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005f02:	2301      	movs	r3, #1
 8005f04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005f06:	2301      	movs	r3, #1
 8005f08:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	7b1b      	ldrb	r3, [r3, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <USBH_MSC_Process+0x2e>
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	f000 8271 	beq.w	80063fa <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005f18:	e272      	b.n	8006400 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	429a      	cmp	r2, r3
 8005f28:	f080 824f 	bcs.w	80063ca <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f32:	4619      	mov	r1, r3
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	2334      	movs	r3, #52	; 0x34
 8005f38:	fb03 f301 	mul.w	r3, r3, r1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3391      	adds	r3, #145	; 0x91
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	2334      	movs	r3, #52	; 0x34
 8005f50:	fb03 f301 	mul.w	r3, r3, r1
 8005f54:	4413      	add	r3, r2
 8005f56:	3390      	adds	r3, #144	; 0x90
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	f200 8243 	bhi.w	80063e6 <USBH_MSC_Process+0x4fa>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <USBH_MSC_Process+0x7c>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	080063e7 	.word	0x080063e7
 8005f70:	08006055 	.word	0x08006055
 8005f74:	080061d9 	.word	0x080061d9
 8005f78:	08005fb3 	.word	0x08005fb3
 8005f7c:	080062a5 	.word	0x080062a5
 8005f80:	080063e7 	.word	0x080063e7
 8005f84:	080063e7 	.word	0x080063e7
 8005f88:	080063b9 	.word	0x080063b9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f92:	4619      	mov	r1, r3
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	2334      	movs	r3, #52	; 0x34
 8005f98:	fb03 f301 	mul.w	r3, r3, r1
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3390      	adds	r3, #144	; 0x90
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005fb0:	e222      	b.n	80063f8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fb8:	b2d9      	uxtb	r1, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2334      	movs	r3, #52	; 0x34
 8005fc4:	fb03 f302 	mul.w	r3, r3, r2
 8005fc8:	3398      	adds	r3, #152	; 0x98
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	3307      	adds	r3, #7
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 ff6a 	bl	8006eac <USBH_MSC_SCSI_Inquiry>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10b      	bne.n	8005ffa <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fe8:	4619      	mov	r1, r3
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	2334      	movs	r3, #52	; 0x34
 8005fee:	fb03 f301 	mul.w	r3, r3, r1
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3390      	adds	r3, #144	; 0x90
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d10c      	bne.n	800601a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006006:	4619      	mov	r1, r3
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	2334      	movs	r3, #52	; 0x34
 800600c:	fb03 f301 	mul.w	r3, r3, r1
 8006010:	4413      	add	r3, r2
 8006012:	3390      	adds	r3, #144	; 0x90
 8006014:	2205      	movs	r2, #5
 8006016:	701a      	strb	r2, [r3, #0]
            break;
 8006018:	e1e7      	b.n	80063ea <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b04      	cmp	r3, #4
 800601e:	f040 81e4 	bne.w	80063ea <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006028:	4619      	mov	r1, r3
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	2334      	movs	r3, #52	; 0x34
 800602e:	fb03 f301 	mul.w	r3, r3, r1
 8006032:	4413      	add	r3, r2
 8006034:	3390      	adds	r3, #144	; 0x90
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006040:	4619      	mov	r1, r3
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	2334      	movs	r3, #52	; 0x34
 8006046:	fb03 f301 	mul.w	r3, r3, r1
 800604a:	4413      	add	r3, r2
 800604c:	3391      	adds	r3, #145	; 0x91
 800604e:	2202      	movs	r2, #2
 8006050:	701a      	strb	r2, [r3, #0]
            break;
 8006052:	e1ca      	b.n	80063ea <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800605a:	b2db      	uxtb	r3, r3
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fe66 	bl	8006d30 <USBH_MSC_SCSI_TestUnitReady>
 8006064:	4603      	mov	r3, r0
 8006066:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d149      	bne.n	8006102 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006074:	4619      	mov	r1, r3
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	2334      	movs	r3, #52	; 0x34
 800607a:	fb03 f301 	mul.w	r3, r3, r1
 800607e:	4413      	add	r3, r2
 8006080:	3392      	adds	r3, #146	; 0x92
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00c      	beq.n	80060a2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800608e:	4619      	mov	r1, r3
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	2334      	movs	r3, #52	; 0x34
 8006094:	fb03 f301 	mul.w	r3, r3, r1
 8006098:	4413      	add	r3, r2
 800609a:	33c1      	adds	r3, #193	; 0xc1
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	e00b      	b.n	80060ba <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060a8:	4619      	mov	r1, r3
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	2334      	movs	r3, #52	; 0x34
 80060ae:	fb03 f301 	mul.w	r3, r3, r1
 80060b2:	4413      	add	r3, r2
 80060b4:	33c1      	adds	r3, #193	; 0xc1
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060c0:	4619      	mov	r1, r3
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	2334      	movs	r3, #52	; 0x34
 80060c6:	fb03 f301 	mul.w	r3, r3, r1
 80060ca:	4413      	add	r3, r2
 80060cc:	3390      	adds	r3, #144	; 0x90
 80060ce:	2203      	movs	r2, #3
 80060d0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060d8:	4619      	mov	r1, r3
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	2334      	movs	r3, #52	; 0x34
 80060de:	fb03 f301 	mul.w	r3, r3, r1
 80060e2:	4413      	add	r3, r2
 80060e4:	3391      	adds	r3, #145	; 0x91
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060f0:	4619      	mov	r1, r3
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	2334      	movs	r3, #52	; 0x34
 80060f6:	fb03 f301 	mul.w	r3, r3, r1
 80060fa:	4413      	add	r3, r2
 80060fc:	3392      	adds	r3, #146	; 0x92
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d14a      	bne.n	800619e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800610e:	4619      	mov	r1, r3
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	2334      	movs	r3, #52	; 0x34
 8006114:	fb03 f301 	mul.w	r3, r3, r1
 8006118:	4413      	add	r3, r2
 800611a:	3392      	adds	r3, #146	; 0x92
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d00c      	beq.n	800613c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006128:	4619      	mov	r1, r3
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	2334      	movs	r3, #52	; 0x34
 800612e:	fb03 f301 	mul.w	r3, r3, r1
 8006132:	4413      	add	r3, r2
 8006134:	33c1      	adds	r3, #193	; 0xc1
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	e00b      	b.n	8006154 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006142:	4619      	mov	r1, r3
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	2334      	movs	r3, #52	; 0x34
 8006148:	fb03 f301 	mul.w	r3, r3, r1
 800614c:	4413      	add	r3, r2
 800614e:	33c1      	adds	r3, #193	; 0xc1
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800615a:	4619      	mov	r1, r3
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	2334      	movs	r3, #52	; 0x34
 8006160:	fb03 f301 	mul.w	r3, r3, r1
 8006164:	4413      	add	r3, r2
 8006166:	3390      	adds	r3, #144	; 0x90
 8006168:	2205      	movs	r2, #5
 800616a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006172:	4619      	mov	r1, r3
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	2334      	movs	r3, #52	; 0x34
 8006178:	fb03 f301 	mul.w	r3, r3, r1
 800617c:	4413      	add	r3, r2
 800617e:	3391      	adds	r3, #145	; 0x91
 8006180:	2201      	movs	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800618a:	4619      	mov	r1, r3
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	2334      	movs	r3, #52	; 0x34
 8006190:	fb03 f301 	mul.w	r3, r3, r1
 8006194:	4413      	add	r3, r2
 8006196:	3392      	adds	r3, #146	; 0x92
 8006198:	2202      	movs	r2, #2
 800619a:	701a      	strb	r2, [r3, #0]
            break;
 800619c:	e127      	b.n	80063ee <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	f040 8124 	bne.w	80063ee <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061ac:	4619      	mov	r1, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	2334      	movs	r3, #52	; 0x34
 80061b2:	fb03 f301 	mul.w	r3, r3, r1
 80061b6:	4413      	add	r3, r2
 80061b8:	3390      	adds	r3, #144	; 0x90
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061c4:	4619      	mov	r1, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	2334      	movs	r3, #52	; 0x34
 80061ca:	fb03 f301 	mul.w	r3, r3, r1
 80061ce:	4413      	add	r3, r2
 80061d0:	3391      	adds	r3, #145	; 0x91
 80061d2:	2202      	movs	r2, #2
 80061d4:	701a      	strb	r2, [r3, #0]
            break;
 80061d6:	e10a      	b.n	80063ee <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061de:	b2d9      	uxtb	r1, r3
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061e6:	461a      	mov	r2, r3
 80061e8:	2334      	movs	r3, #52	; 0x34
 80061ea:	fb03 f302 	mul.w	r3, r3, r2
 80061ee:	3390      	adds	r3, #144	; 0x90
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	3304      	adds	r3, #4
 80061f6:	461a      	mov	r2, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fddc 	bl	8006db6 <USBH_MSC_SCSI_ReadCapacity>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d120      	bne.n	800624a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800620e:	4619      	mov	r1, r3
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	2334      	movs	r3, #52	; 0x34
 8006214:	fb03 f301 	mul.w	r3, r3, r1
 8006218:	4413      	add	r3, r2
 800621a:	3390      	adds	r3, #144	; 0x90
 800621c:	2201      	movs	r2, #1
 800621e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006226:	4619      	mov	r1, r3
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	2334      	movs	r3, #52	; 0x34
 800622c:	fb03 f301 	mul.w	r3, r3, r1
 8006230:	4413      	add	r3, r2
 8006232:	3391      	adds	r3, #145	; 0x91
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800623e:	3301      	adds	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006248:	e0d3      	b.n	80063f2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d10c      	bne.n	800626a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006256:	4619      	mov	r1, r3
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	2334      	movs	r3, #52	; 0x34
 800625c:	fb03 f301 	mul.w	r3, r3, r1
 8006260:	4413      	add	r3, r2
 8006262:	3390      	adds	r3, #144	; 0x90
 8006264:	2205      	movs	r2, #5
 8006266:	701a      	strb	r2, [r3, #0]
            break;
 8006268:	e0c3      	b.n	80063f2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	2b04      	cmp	r3, #4
 800626e:	f040 80c0 	bne.w	80063f2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006278:	4619      	mov	r1, r3
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	2334      	movs	r3, #52	; 0x34
 800627e:	fb03 f301 	mul.w	r3, r3, r1
 8006282:	4413      	add	r3, r2
 8006284:	3390      	adds	r3, #144	; 0x90
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006290:	4619      	mov	r1, r3
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	2334      	movs	r3, #52	; 0x34
 8006296:	fb03 f301 	mul.w	r3, r3, r1
 800629a:	4413      	add	r3, r2
 800629c:	3391      	adds	r3, #145	; 0x91
 800629e:	2202      	movs	r2, #2
 80062a0:	701a      	strb	r2, [r3, #0]
            break;
 80062a2:	e0a6      	b.n	80063f2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062aa:	b2d9      	uxtb	r1, r3
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062b2:	461a      	mov	r2, r3
 80062b4:	2334      	movs	r3, #52	; 0x34
 80062b6:	fb03 f302 	mul.w	r3, r3, r2
 80062ba:	3398      	adds	r3, #152	; 0x98
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	3304      	adds	r3, #4
 80062c2:	461a      	mov	r2, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fe96 	bl	8006ff6 <USBH_MSC_SCSI_RequestSense>
 80062ca:	4603      	mov	r3, r0
 80062cc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d145      	bne.n	8006360 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062da:	4619      	mov	r1, r3
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	2334      	movs	r3, #52	; 0x34
 80062e0:	fb03 f301 	mul.w	r3, r3, r1
 80062e4:	4413      	add	r3, r2
 80062e6:	339c      	adds	r3, #156	; 0x9c
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d00c      	beq.n	8006308 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062f4:	4619      	mov	r1, r3
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	2334      	movs	r3, #52	; 0x34
 80062fa:	fb03 f301 	mul.w	r3, r3, r1
 80062fe:	4413      	add	r3, r2
 8006300:	339c      	adds	r3, #156	; 0x9c
 8006302:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006304:	2b02      	cmp	r3, #2
 8006306:	d117      	bne.n	8006338 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	f242 720f 	movw	r2, #9999	; 0x270f
 800631a:	4293      	cmp	r3, r2
 800631c:	d80c      	bhi.n	8006338 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006324:	4619      	mov	r1, r3
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	2334      	movs	r3, #52	; 0x34
 800632a:	fb03 f301 	mul.w	r3, r3, r1
 800632e:	4413      	add	r3, r2
 8006330:	3390      	adds	r3, #144	; 0x90
 8006332:	2202      	movs	r2, #2
 8006334:	701a      	strb	r2, [r3, #0]
                  break;
 8006336:	e05f      	b.n	80063f8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800633e:	4619      	mov	r1, r3
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	2334      	movs	r3, #52	; 0x34
 8006344:	fb03 f301 	mul.w	r3, r3, r1
 8006348:	4413      	add	r3, r2
 800634a:	3390      	adds	r3, #144	; 0x90
 800634c:	2201      	movs	r2, #1
 800634e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006356:	3301      	adds	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d10c      	bne.n	8006380 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800636c:	4619      	mov	r1, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	2334      	movs	r3, #52	; 0x34
 8006372:	fb03 f301 	mul.w	r3, r3, r1
 8006376:	4413      	add	r3, r2
 8006378:	3390      	adds	r3, #144	; 0x90
 800637a:	2208      	movs	r2, #8
 800637c:	701a      	strb	r2, [r3, #0]
            break;
 800637e:	e03a      	b.n	80063f6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	2b04      	cmp	r3, #4
 8006384:	d137      	bne.n	80063f6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800638c:	4619      	mov	r1, r3
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	2334      	movs	r3, #52	; 0x34
 8006392:	fb03 f301 	mul.w	r3, r3, r1
 8006396:	4413      	add	r3, r2
 8006398:	3390      	adds	r3, #144	; 0x90
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063a4:	4619      	mov	r1, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	2334      	movs	r3, #52	; 0x34
 80063aa:	fb03 f301 	mul.w	r3, r3, r1
 80063ae:	4413      	add	r3, r2
 80063b0:	3391      	adds	r3, #145	; 0x91
 80063b2:	2202      	movs	r2, #2
 80063b4:	701a      	strb	r2, [r3, #0]
            break;
 80063b6:	e01e      	b.n	80063f6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063be:	3301      	adds	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80063c8:	e016      	b.n	80063f8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2201      	movs	r2, #1
 80063d6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063de:	2102      	movs	r1, #2
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	4798      	blx	r3
      break;
 80063e4:	e00c      	b.n	8006400 <USBH_MSC_Process+0x514>
            break;
 80063e6:	bf00      	nop
 80063e8:	e00a      	b.n	8006400 <USBH_MSC_Process+0x514>
            break;
 80063ea:	bf00      	nop
 80063ec:	e008      	b.n	8006400 <USBH_MSC_Process+0x514>
            break;
 80063ee:	bf00      	nop
 80063f0:	e006      	b.n	8006400 <USBH_MSC_Process+0x514>
            break;
 80063f2:	bf00      	nop
 80063f4:	e004      	b.n	8006400 <USBH_MSC_Process+0x514>
            break;
 80063f6:	bf00      	nop
      break;
 80063f8:	e002      	b.n	8006400 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]
      break;
 80063fe:	bf00      	nop
  }
  return error;
 8006400:	7dfb      	ldrb	r3, [r7, #23]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop

0800640c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b088      	sub	sp, #32
 8006426:	af02      	add	r7, sp, #8
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	460b      	mov	r3, r1
 800642c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006438:	2301      	movs	r3, #1
 800643a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	2134      	movs	r1, #52	; 0x34
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	3390      	adds	r3, #144	; 0x90
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b07      	cmp	r3, #7
 8006452:	d03c      	beq.n	80064ce <USBH_MSC_RdWrProcess+0xac>
 8006454:	2b07      	cmp	r3, #7
 8006456:	f300 80a7 	bgt.w	80065a8 <USBH_MSC_RdWrProcess+0x186>
 800645a:	2b05      	cmp	r3, #5
 800645c:	d06c      	beq.n	8006538 <USBH_MSC_RdWrProcess+0x116>
 800645e:	2b06      	cmp	r3, #6
 8006460:	f040 80a2 	bne.w	80065a8 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006464:	78f9      	ldrb	r1, [r7, #3]
 8006466:	2300      	movs	r3, #0
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	2300      	movs	r3, #0
 800646c:	2200      	movs	r2, #0
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fea5 	bl	80071be <USBH_MSC_SCSI_Read>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	2134      	movs	r1, #52	; 0x34
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	4413      	add	r3, r2
 800648a:	3390      	adds	r3, #144	; 0x90
 800648c:	2201      	movs	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006494:	e08a      	b.n	80065ac <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	2b02      	cmp	r3, #2
 800649a:	d109      	bne.n	80064b0 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	2134      	movs	r1, #52	; 0x34
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	3390      	adds	r3, #144	; 0x90
 80064aa:	2205      	movs	r2, #5
 80064ac:	701a      	strb	r2, [r3, #0]
      break;
 80064ae:	e07d      	b.n	80065ac <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d17a      	bne.n	80065ac <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	2134      	movs	r1, #52	; 0x34
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	3390      	adds	r3, #144	; 0x90
 80064c4:	2208      	movs	r2, #8
 80064c6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	75fb      	strb	r3, [r7, #23]
      break;
 80064cc:	e06e      	b.n	80065ac <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80064ce:	78f9      	ldrb	r1, [r7, #3]
 80064d0:	2300      	movs	r3, #0
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	2200      	movs	r2, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fe05 	bl	80070e8 <USBH_MSC_SCSI_Write>
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	2134      	movs	r1, #52	; 0x34
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	3390      	adds	r3, #144	; 0x90
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064fe:	e057      	b.n	80065b0 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d109      	bne.n	800651a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	2134      	movs	r1, #52	; 0x34
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	3390      	adds	r3, #144	; 0x90
 8006514:	2205      	movs	r2, #5
 8006516:	701a      	strb	r2, [r3, #0]
      break;
 8006518:	e04a      	b.n	80065b0 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b04      	cmp	r3, #4
 800651e:	d147      	bne.n	80065b0 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	2134      	movs	r1, #52	; 0x34
 8006526:	fb01 f303 	mul.w	r3, r1, r3
 800652a:	4413      	add	r3, r2
 800652c:	3390      	adds	r3, #144	; 0x90
 800652e:	2208      	movs	r2, #8
 8006530:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006532:	2302      	movs	r3, #2
 8006534:	75fb      	strb	r3, [r7, #23]
      break;
 8006536:	e03b      	b.n	80065b0 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	2234      	movs	r2, #52	; 0x34
 800653c:	fb02 f303 	mul.w	r3, r2, r3
 8006540:	3398      	adds	r3, #152	; 0x98
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4413      	add	r3, r2
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fd52 	bl	8006ff6 <USBH_MSC_SCSI_RequestSense>
 8006552:	4603      	mov	r3, r0
 8006554:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d113      	bne.n	8006584 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	2134      	movs	r1, #52	; 0x34
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	3390      	adds	r3, #144	; 0x90
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	2134      	movs	r1, #52	; 0x34
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	4413      	add	r3, r2
 800657a:	3391      	adds	r3, #145	; 0x91
 800657c:	2202      	movs	r2, #2
 800657e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8006580:	2302      	movs	r3, #2
 8006582:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b02      	cmp	r3, #2
 8006588:	d014      	beq.n	80065b4 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b04      	cmp	r3, #4
 800658e:	d111      	bne.n	80065b4 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	2134      	movs	r1, #52	; 0x34
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	4413      	add	r3, r2
 800659c:	3390      	adds	r3, #144	; 0x90
 800659e:	2208      	movs	r2, #8
 80065a0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80065a2:	2302      	movs	r3, #2
 80065a4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80065a6:	e005      	b.n	80065b4 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80065a8:	bf00      	nop
 80065aa:	e004      	b.n	80065b6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80065ac:	bf00      	nop
 80065ae:	e002      	b.n	80065b6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80065b0:	bf00      	nop
 80065b2:	e000      	b.n	80065b6 <USBH_MSC_RdWrProcess+0x194>
      break;
 80065b4:	bf00      	nop

  }
  return error;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b0b      	cmp	r3, #11
 80065de:	d10c      	bne.n	80065fa <USBH_MSC_UnitIsReady+0x3a>
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	2134      	movs	r1, #52	; 0x34
 80065e6:	fb01 f303 	mul.w	r3, r1, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	3391      	adds	r3, #145	; 0x91
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	e001      	b.n	80065fe <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	460b      	mov	r3, r1
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b0b      	cmp	r3, #11
 800662c:	d10d      	bne.n	800664a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	2234      	movs	r2, #52	; 0x34
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	3390      	adds	r3, #144	; 0x90
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4413      	add	r3, r2
 800663c:	2234      	movs	r2, #52	; 0x34
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f005 f8f5 	bl	800b830 <memcpy>
    return USBH_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e000      	b.n	800664c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800664a:	2302      	movs	r3, #2
  }
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af02      	add	r7, sp, #8
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	607a      	str	r2, [r7, #4]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	460b      	mov	r3, r1
 8006662:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006680:	2b0b      	cmp	r3, #11
 8006682:	d109      	bne.n	8006698 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	2134      	movs	r1, #52	; 0x34
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	4413      	add	r3, r2
 8006690:	3390      	adds	r3, #144	; 0x90
 8006692:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006694:	2b01      	cmp	r3, #1
 8006696:	d001      	beq.n	800669c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006698:	2302      	movs	r3, #2
 800669a:	e040      	b.n	800671e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2206      	movs	r2, #6
 80066a0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	2134      	movs	r1, #52	; 0x34
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	4413      	add	r3, r2
 80066ae:	3390      	adds	r3, #144	; 0x90
 80066b0:	2206      	movs	r2, #6
 80066b2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80066be:	7af9      	ldrb	r1, [r7, #11]
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fd78 	bl	80071be <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066d4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80066d6:	e016      	b.n	8006706 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad2      	subs	r2, r2, r3
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f242 7110 	movw	r1, #10000	; 0x2710
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d805      	bhi.n	80066fc <USBH_MSC_Read+0xa8>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2201      	movs	r2, #1
 8006700:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006702:	2302      	movs	r3, #2
 8006704:	e00b      	b.n	800671e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006706:	7afb      	ldrb	r3, [r7, #11]
 8006708:	4619      	mov	r1, r3
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff fe89 	bl	8006422 <USBH_MSC_RdWrProcess>
 8006710:	4603      	mov	r3, r0
 8006712:	2b01      	cmp	r3, #1
 8006714:	d0e0      	beq.n	80066d8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2201      	movs	r2, #1
 800671a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b088      	sub	sp, #32
 800672a:	af02      	add	r7, sp, #8
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	460b      	mov	r3, r1
 8006734:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00e      	beq.n	800676a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006752:	2b0b      	cmp	r3, #11
 8006754:	d109      	bne.n	800676a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006756:	7afb      	ldrb	r3, [r7, #11]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	2134      	movs	r1, #52	; 0x34
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	4413      	add	r3, r2
 8006762:	3390      	adds	r3, #144	; 0x90
 8006764:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006766:	2b01      	cmp	r3, #1
 8006768:	d001      	beq.n	800676e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800676a:	2302      	movs	r3, #2
 800676c:	e040      	b.n	80067f0 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2207      	movs	r2, #7
 8006772:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	2134      	movs	r1, #52	; 0x34
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	3390      	adds	r3, #144	; 0x90
 8006782:	2207      	movs	r2, #7
 8006784:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006786:	7afb      	ldrb	r3, [r7, #11]
 8006788:	b29a      	uxth	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006790:	7af9      	ldrb	r1, [r7, #11]
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fca4 	bl	80070e8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067a6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80067a8:	e016      	b.n	80067d8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	f242 7110 	movw	r1, #10000	; 0x2710
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	429a      	cmp	r2, r3
 80067c0:	d805      	bhi.n	80067ce <USBH_MSC_Write+0xa8>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2201      	movs	r2, #1
 80067d2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80067d4:	2302      	movs	r3, #2
 80067d6:	e00b      	b.n	80067f0 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff fe20 	bl	8006422 <USBH_MSC_RdWrProcess>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d0e0      	beq.n	80067aa <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2201      	movs	r2, #1
 80067ec:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2221      	movs	r2, #33	; 0x21
 8006804:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	22ff      	movs	r2, #255	; 0xff
 800680a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800681e:	2200      	movs	r2, #0
 8006820:	2100      	movs	r1, #0
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fdab 	bl	800837e <USBH_CtlReq>
 8006828:	4603      	mov	r3, r0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	22a1      	movs	r2, #161	; 0xa1
 8006840:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	22fe      	movs	r2, #254	; 0xfe
 8006846:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800685a:	2201      	movs	r2, #1
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fd8d 	bl	800837e <USBH_CtlReq>
 8006864:	4603      	mov	r3, r0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a09      	ldr	r2, [pc, #36]	; (80068ac <USBH_MSC_BOT_Init+0x3c>)
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <USBH_MSC_BOT_Init+0x40>)
 800688c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	43425355 	.word	0x43425355
 80068b0:	20304050 	.word	0x20304050

080068b4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80068c0:	2301      	movs	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80068c8:	2301      	movs	r3, #1
 80068ca:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068e4:	3b01      	subs	r3, #1
 80068e6:	2b0a      	cmp	r3, #10
 80068e8:	f200 819e 	bhi.w	8006c28 <USBH_MSC_BOT_Process+0x374>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <USBH_MSC_BOT_Process+0x40>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006921 	.word	0x08006921
 80068f8:	08006949 	.word	0x08006949
 80068fc:	080069b3 	.word	0x080069b3
 8006900:	080069d1 	.word	0x080069d1
 8006904:	08006a55 	.word	0x08006a55
 8006908:	08006a77 	.word	0x08006a77
 800690c:	08006b0f 	.word	0x08006b0f
 8006910:	08006b2b 	.word	0x08006b2b
 8006914:	08006b7d 	.word	0x08006b7d
 8006918:	08006bad 	.word	0x08006bad
 800691c:	08006c0f 	.word	0x08006c0f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	795b      	ldrb	r3, [r3, #5]
 800693a:	2201      	movs	r2, #1
 800693c:	9200      	str	r2, [sp, #0]
 800693e:	221f      	movs	r2, #31
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 ff2a 	bl	800879a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006946:	e17e      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	795b      	ldrb	r3, [r3, #5]
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f004 fe56 	bl	800b600 <USBH_LL_GetURBState>
 8006954:	4603      	mov	r3, r0
 8006956:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006958:	7d3b      	ldrb	r3, [r7, #20]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d118      	bne.n	8006990 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00f      	beq.n	8006986 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800696c:	b25b      	sxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	da04      	bge.n	800697c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2203      	movs	r2, #3
 8006976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800697a:	e157      	b.n	8006c2c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2205      	movs	r2, #5
 8006980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006984:	e152      	b.n	8006c2c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2207      	movs	r2, #7
 800698a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800698e:	e14d      	b.n	8006c2c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006990:	7d3b      	ldrb	r3, [r7, #20]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d104      	bne.n	80069a0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800699e:	e145      	b.n	8006c2c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80069a0:	7d3b      	ldrb	r3, [r7, #20]
 80069a2:	2b05      	cmp	r3, #5
 80069a4:	f040 8142 	bne.w	8006c2c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	220a      	movs	r2, #10
 80069ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069b0:	e13c      	b.n	8006c2c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	895a      	ldrh	r2, [r3, #10]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	791b      	ldrb	r3, [r3, #4]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 ff0f 	bl	80087e4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2204      	movs	r2, #4
 80069ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80069ce:	e13a      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	791b      	ldrb	r3, [r3, #4]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f004 fe12 	bl	800b600 <USBH_LL_GetURBState>
 80069dc:	4603      	mov	r3, r0
 80069de:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80069e0:	7d3b      	ldrb	r3, [r7, #20]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d12d      	bne.n	8006a42 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	8952      	ldrh	r2, [r2, #10]
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d910      	bls.n	8006a14 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	8952      	ldrh	r2, [r2, #10]
 80069fc:	441a      	add	r2, r3
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	8952      	ldrh	r2, [r2, #10]
 8006a0c:	1a9a      	subs	r2, r3, r2
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a12:	e002      	b.n	8006a1a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2200      	movs	r2, #0
 8006a18:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	895a      	ldrh	r2, [r3, #10]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	791b      	ldrb	r3, [r3, #4]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f001 fed7 	bl	80087e4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006a36:	e0fb      	b.n	8006c30 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	2207      	movs	r2, #7
 8006a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a40:	e0f6      	b.n	8006c30 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8006a42:	7d3b      	ldrb	r3, [r7, #20]
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	f040 80f3 	bne.w	8006c30 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2209      	movs	r2, #9
 8006a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a52:	e0ed      	b.n	8006c30 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	891a      	ldrh	r2, [r3, #8]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	795b      	ldrb	r3, [r3, #5]
 8006a62:	2001      	movs	r0, #1
 8006a64:	9000      	str	r0, [sp, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fe97 	bl	800879a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2206      	movs	r2, #6
 8006a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a74:	e0e7      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	795b      	ldrb	r3, [r3, #5]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f004 fdbf 	bl	800b600 <USBH_LL_GetURBState>
 8006a82:	4603      	mov	r3, r0
 8006a84:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006a86:	7d3b      	ldrb	r3, [r7, #20]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d12f      	bne.n	8006aec <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	8912      	ldrh	r2, [r2, #8]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d910      	bls.n	8006aba <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	8912      	ldrh	r2, [r2, #8]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	8912      	ldrh	r2, [r2, #8]
 8006ab2:	1a9a      	subs	r2, r3, r2
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ab8:	e002      	b.n	8006ac0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2200      	movs	r2, #0
 8006abe:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00c      	beq.n	8006ae2 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	891a      	ldrh	r2, [r3, #8]
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	795b      	ldrb	r3, [r3, #5]
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	9000      	str	r0, [sp, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fe5d 	bl	800879a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006ae0:	e0a8      	b.n	8006c34 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2207      	movs	r2, #7
 8006ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006aea:	e0a3      	b.n	8006c34 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006aec:	7d3b      	ldrb	r3, [r7, #20]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d104      	bne.n	8006afc <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2205      	movs	r2, #5
 8006af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006afa:	e09b      	b.n	8006c34 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006afc:	7d3b      	ldrb	r3, [r7, #20]
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	f040 8098 	bne.w	8006c34 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	220a      	movs	r2, #10
 8006b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b0c:	e092      	b.n	8006c34 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	791b      	ldrb	r3, [r3, #4]
 8006b18:	220d      	movs	r2, #13
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fe62 	bl	80087e4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2208      	movs	r2, #8
 8006b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b28:	e08d      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	791b      	ldrb	r3, [r3, #4]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f004 fd65 	bl	800b600 <USBH_LL_GetURBState>
 8006b36:	4603      	mov	r3, r0
 8006b38:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006b3a:	7d3b      	ldrb	r3, [r7, #20]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d115      	bne.n	8006b6c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f8a9 	bl	8006ca8 <USBH_MSC_DecodeCSW>
 8006b56:	4603      	mov	r3, r0
 8006b58:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006b5a:	7d7b      	ldrb	r3, [r7, #21]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d102      	bne.n	8006b66 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006b64:	e068      	b.n	8006c38 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006b66:	2302      	movs	r3, #2
 8006b68:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6a:	e065      	b.n	8006c38 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006b6c:	7d3b      	ldrb	r3, [r7, #20]
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d162      	bne.n	8006c38 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2209      	movs	r2, #9
 8006b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b7a:	e05d      	b.n	8006c38 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f864 	bl	8006c50 <USBH_MSC_BOT_Abort>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006b8c:	7dbb      	ldrb	r3, [r7, #22]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2207      	movs	r2, #7
 8006b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006b9a:	e04f      	b.n	8006c3c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006b9c:	7dbb      	ldrb	r3, [r7, #22]
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d14c      	bne.n	8006c3c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	220b      	movs	r2, #11
 8006ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006baa:	e047      	b.n	8006c3c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f84c 	bl	8006c50 <USBH_MSC_BOT_Abort>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006bbc:	7dbb      	ldrb	r3, [r7, #22]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d11d      	bne.n	8006bfe <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	795b      	ldrb	r3, [r3, #5]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f004 fd73 	bl	800b6b4 <USBH_LL_GetToggle>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	7959      	ldrb	r1, [r3, #5]
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	f1c3 0301 	rsb	r3, r3, #1
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f004 fd37 	bl	800b654 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	791b      	ldrb	r3, [r3, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f004 fd30 	bl	800b654 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2209      	movs	r2, #9
 8006bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006bfc:	e020      	b.n	8006c40 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006bfe:	7dbb      	ldrb	r3, [r7, #22]
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d11d      	bne.n	8006c40 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	220b      	movs	r2, #11
 8006c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c0c:	e018      	b.n	8006c40 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fdf2 	bl	80067f8 <USBH_MSC_BOT_REQ_Reset>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d112      	bne.n	8006c44 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006c26:	e00d      	b.n	8006c44 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006c28:	bf00      	nop
 8006c2a:	e00c      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>
      break;
 8006c2c:	bf00      	nop
 8006c2e:	e00a      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>
      break;
 8006c30:	bf00      	nop
 8006c32:	e008      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>
      break;
 8006c34:	bf00      	nop
 8006c36:	e006      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>
      break;
 8006c38:	bf00      	nop
 8006c3a:	e004      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>
      break;
 8006c3c:	bf00      	nop
 8006c3e:	e002      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>
      break;
 8006c40:	bf00      	nop
 8006c42:	e000      	b.n	8006c46 <USBH_MSC_BOT_Process+0x392>
      break;
 8006c44:	bf00      	nop
  }
  return status;
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006c60:	2302      	movs	r3, #2
 8006c62:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006c6e:	78bb      	ldrb	r3, [r7, #2]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <USBH_MSC_BOT_Abort+0x2a>
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d009      	beq.n	8006c8c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006c78:	e011      	b.n	8006c9e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	79db      	ldrb	r3, [r3, #7]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f99c 	bl	8007fbe <USBH_ClrFeature>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73fb      	strb	r3, [r7, #15]
      break;
 8006c8a:	e008      	b.n	8006c9e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	799b      	ldrb	r3, [r3, #6]
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 f993 	bl	8007fbe <USBH_ClrFeature>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c9c:	bf00      	nop
  }
  return status;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	791b      	ldrb	r3, [r3, #4]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f004 fc09 	bl	800b4dc <USBH_LL_GetLastXferSize>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b0d      	cmp	r3, #13
 8006cce:	d002      	beq.n	8006cd6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	73fb      	strb	r3, [r7, #15]
 8006cd4:	e024      	b.n	8006d20 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cda:	4a14      	ldr	r2, [pc, #80]	; (8006d2c <USBH_MSC_DecodeCSW+0x84>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d11d      	bne.n	8006d1c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d119      	bne.n	8006d20 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	73fb      	strb	r3, [r7, #15]
 8006cfa:	e011      	b.n	8006d20 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d102      	bne.n	8006d0c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006d06:	2301      	movs	r3, #1
 8006d08:	73fb      	strb	r3, [r7, #15]
 8006d0a:	e009      	b.n	8006d20 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d104      	bne.n	8006d20 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006d16:	2302      	movs	r3, #2
 8006d18:	73fb      	strb	r3, [r7, #15]
 8006d1a:	e001      	b.n	8006d20 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	53425355 	.word	0x53425355

08006d30 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d002      	beq.n	8006d5a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d021      	beq.n	8006d9c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006d58:	e028      	b.n	8006dac <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	3363      	adds	r3, #99	; 0x63
 8006d74:	2210      	movs	r2, #16
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f004 fd67 	bl	800b84c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006d96:	2301      	movs	r3, #1
 8006d98:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9a:	e007      	b.n	8006dac <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff fd87 	bl	80068b4 <USBH_MSC_BOT_Process>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]
      break;
 8006daa:	bf00      	nop
  }

  return error;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	607a      	str	r2, [r7, #4]
 8006dc2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d002      	beq.n	8006de2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d027      	beq.n	8006e30 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006de0:	e05f      	b.n	8006ea2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2208      	movs	r2, #8
 8006de6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2280      	movs	r2, #128	; 0x80
 8006dec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	220a      	movs	r2, #10
 8006df4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	3363      	adds	r3, #99	; 0x63
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f004 fd23 	bl	800b84c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2225      	movs	r2, #37	; 0x25
 8006e0a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f103 0210 	add.w	r2, r3, #16
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2e:	e038      	b.n	8006ea2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	4619      	mov	r1, r3
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f7ff fd3d 	bl	80068b4 <USBH_MSC_BOT_Process>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d12d      	bne.n	8006ea0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e4a:	3303      	adds	r3, #3
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e56:	3302      	adds	r3, #2
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e64:	3301      	adds	r3, #1
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006e6a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	061b      	lsls	r3, r3, #24
 8006e76:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e82:	3307      	adds	r3, #7
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e8e:	3306      	adds	r3, #6
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	809a      	strh	r2, [r3, #4]
      break;
 8006ea0:	bf00      	nop
  }

  return error;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d002      	beq.n	8006ed8 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d03d      	beq.n	8006f52 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006ed6:	e089      	b.n	8006fec <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2224      	movs	r2, #36	; 0x24
 8006edc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2280      	movs	r2, #128	; 0x80
 8006ee2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	220a      	movs	r2, #10
 8006eea:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3363      	adds	r3, #99	; 0x63
 8006ef2:	220a      	movs	r2, #10
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f004 fca8 	bl	800b84c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2212      	movs	r2, #18
 8006f00:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	015b      	lsls	r3, r3, #5
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2224      	movs	r2, #36	; 0x24
 8006f24:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f103 0210 	add.w	r2, r3, #16
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f50:	e04c      	b.n	8006fec <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006f52:	7afb      	ldrb	r3, [r7, #11]
 8006f54:	4619      	mov	r1, r3
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f7ff fcac 	bl	80068b4 <USBH_MSC_BOT_Process>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d141      	bne.n	8006fea <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006f66:	2222      	movs	r2, #34	; 0x22
 8006f68:	2100      	movs	r1, #0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f004 fc6e 	bl	800b84c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f98:	3301      	adds	r3, #1
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da03      	bge.n	8006faa <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	709a      	strb	r2, [r3, #2]
 8006fa8:	e002      	b.n	8006fb0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	1cd8      	adds	r0, r3, #3
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fba:	3308      	adds	r3, #8
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f004 fc36 	bl	800b830 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f103 000c 	add.w	r0, r3, #12
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd0:	3310      	adds	r3, #16
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f004 fc2b 	bl	800b830 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	331d      	adds	r3, #29
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006fe4:	3220      	adds	r2, #32
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	601a      	str	r2, [r3, #0]
      break;
 8006fea:	bf00      	nop
  }

  return error;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b086      	sub	sp, #24
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	460b      	mov	r3, r1
 8007000:	607a      	str	r2, [r7, #4]
 8007002:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007004:	2302      	movs	r3, #2
 8007006:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007018:	2b01      	cmp	r3, #1
 800701a:	d002      	beq.n	8007022 <USBH_MSC_SCSI_RequestSense+0x2c>
 800701c:	2b02      	cmp	r3, #2
 800701e:	d03d      	beq.n	800709c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007020:	e05d      	b.n	80070de <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	220e      	movs	r2, #14
 8007026:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	220a      	movs	r2, #10
 8007034:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3363      	adds	r3, #99	; 0x63
 800703c:	2210      	movs	r2, #16
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f004 fc03 	bl	800b84c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2203      	movs	r2, #3
 800704a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	015b      	lsls	r3, r3, #5
 8007052:	b2da      	uxtb	r2, r3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	220e      	movs	r2, #14
 800706e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2202      	movs	r2, #2
 8007086:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f103 0210 	add.w	r2, r3, #16
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007096:	2301      	movs	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]
      break;
 800709a:	e020      	b.n	80070de <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	4619      	mov	r1, r3
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7ff fc07 	bl	80068b4 <USBH_MSC_BOT_Process>
 80070a6:	4603      	mov	r3, r0
 80070a8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d115      	bne.n	80070dc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b6:	3302      	adds	r3, #2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ca:	7b1a      	ldrb	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d6:	7b5a      	ldrb	r2, [r3, #13]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	709a      	strb	r2, [r3, #2]
      break;
 80070dc:	bf00      	nop
  }

  return error;
 80070de:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	607a      	str	r2, [r7, #4]
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	460b      	mov	r3, r1
 80070f6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80070f8:	2302      	movs	r3, #2
 80070fa:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800710c:	2b01      	cmp	r3, #1
 800710e:	d002      	beq.n	8007116 <USBH_MSC_SCSI_Write+0x2e>
 8007110:	2b02      	cmp	r3, #2
 8007112:	d047      	beq.n	80071a4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007114:	e04e      	b.n	80071b4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800711c:	461a      	mov	r2, r3
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	fb03 f202 	mul.w	r2, r3, r2
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	220a      	movs	r2, #10
 8007134:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3363      	adds	r3, #99	; 0x63
 800713c:	2210      	movs	r2, #16
 800713e:	2100      	movs	r1, #0
 8007140:	4618      	mov	r0, r3
 8007142:	f004 fb83 	bl	800b84c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	222a      	movs	r2, #42	; 0x2a
 800714a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800714e:	79fa      	ldrb	r2, [r7, #7]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007156:	79ba      	ldrb	r2, [r7, #6]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800715e:	797a      	ldrb	r2, [r7, #5]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007170:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800717a:	f107 0320 	add.w	r3, r7, #32
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2202      	movs	r2, #2
 8007192:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
      break;
 80071a2:	e007      	b.n	80071b4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	4619      	mov	r1, r3
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff fb83 	bl	80068b4 <USBH_MSC_BOT_Process>
 80071ae:	4603      	mov	r3, r0
 80071b0:	75fb      	strb	r3, [r7, #23]
      break;
 80071b2:	bf00      	nop
  }

  return error;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
 80071ca:	460b      	mov	r3, r1
 80071cc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80071ce:	2302      	movs	r3, #2
 80071d0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d002      	beq.n	80071ec <USBH_MSC_SCSI_Read+0x2e>
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d047      	beq.n	800727a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80071ea:	e04e      	b.n	800728a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80071f2:	461a      	mov	r2, r3
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	fb03 f202 	mul.w	r2, r3, r2
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2280      	movs	r2, #128	; 0x80
 8007202:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	220a      	movs	r2, #10
 800720a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3363      	adds	r3, #99	; 0x63
 8007212:	2210      	movs	r2, #16
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f004 fb18 	bl	800b84c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	2228      	movs	r2, #40	; 0x28
 8007220:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007224:	79fa      	ldrb	r2, [r7, #7]
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800722c:	79ba      	ldrb	r2, [r7, #6]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007234:	797a      	ldrb	r2, [r7, #5]
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800723c:	1d3b      	adds	r3, r7, #4
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007246:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007250:	f107 0320 	add.w	r3, r7, #32
 8007254:	781a      	ldrb	r2, [r3, #0]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007274:	2301      	movs	r3, #1
 8007276:	75fb      	strb	r3, [r7, #23]
      break;
 8007278:	e007      	b.n	800728a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800727a:	7afb      	ldrb	r3, [r7, #11]
 800727c:	4619      	mov	r1, r3
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff fb18 	bl	80068b4 <USBH_MSC_BOT_Process>
 8007284:	4603      	mov	r3, r0
 8007286:	75fb      	strb	r3, [r7, #23]
      break;
 8007288:	bf00      	nop
  }

  return error;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80072a8:	2302      	movs	r3, #2
 80072aa:	e029      	b.n	8007300 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	79fa      	ldrb	r2, [r7, #7]
 80072b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f81f 	bl	8007308 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f004 f83b 	bl	800b374 <USBH_LL_Init>

  return USBH_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e009      	b.n	800732e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	33e0      	adds	r3, #224	; 0xe0
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	2200      	movs	r2, #0
 8007326:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3301      	adds	r3, #1
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b0e      	cmp	r3, #14
 8007332:	d9f2      	bls.n	800731a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	e009      	b.n	800734e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007344:	2200      	movs	r2, #0
 8007346:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007354:	d3f1      	bcc.n	800733a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2240      	movs	r2, #64	; 0x40
 800737a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d016      	beq.n	80073f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10e      	bne.n	80073ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073d4:	1c59      	adds	r1, r3, #1
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	33de      	adds	r3, #222	; 0xde
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]
 80073ea:	e004      	b.n	80073f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073ec:	2302      	movs	r3, #2
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	e001      	b.n	80073f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073f2:	2302      	movs	r3, #2
 80073f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	429a      	cmp	r2, r3
 800741e:	d204      	bcs.n	800742a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	78fa      	ldrb	r2, [r7, #3]
 8007424:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007428:	e001      	b.n	800742e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	4608      	mov	r0, r1
 8007446:	4611      	mov	r1, r2
 8007448:	461a      	mov	r2, r3
 800744a:	4603      	mov	r3, r0
 800744c:	70fb      	strb	r3, [r7, #3]
 800744e:	460b      	mov	r3, r1
 8007450:	70bb      	strb	r3, [r7, #2]
 8007452:	4613      	mov	r3, r2
 8007454:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800745a:	2300      	movs	r3, #0
 800745c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007464:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007466:	e025      	b.n	80074b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	221a      	movs	r2, #26
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	3308      	adds	r3, #8
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	3302      	adds	r3, #2
 8007478:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	795b      	ldrb	r3, [r3, #5]
 800747e:	78fa      	ldrb	r2, [r7, #3]
 8007480:	429a      	cmp	r2, r3
 8007482:	d002      	beq.n	800748a <USBH_FindInterface+0x4e>
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	2bff      	cmp	r3, #255	; 0xff
 8007488:	d111      	bne.n	80074ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800748e:	78ba      	ldrb	r2, [r7, #2]
 8007490:	429a      	cmp	r2, r3
 8007492:	d002      	beq.n	800749a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007494:	78bb      	ldrb	r3, [r7, #2]
 8007496:	2bff      	cmp	r3, #255	; 0xff
 8007498:	d109      	bne.n	80074ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800749e:	787a      	ldrb	r2, [r7, #1]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d002      	beq.n	80074aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80074a4:	787b      	ldrb	r3, [r7, #1]
 80074a6:	2bff      	cmp	r3, #255	; 0xff
 80074a8:	d101      	bne.n	80074ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	e006      	b.n	80074bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	3301      	adds	r3, #1
 80074b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d9d6      	bls.n	8007468 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80074ba:	23ff      	movs	r3, #255	; 0xff
}
 80074bc:	4618      	mov	r0, r3
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f003 ff8b 	bl	800b3ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80074d6:	2101      	movs	r1, #1
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f004 f8a4 	bl	800b626 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af04      	add	r7, sp, #16
 80074ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074f0:	2302      	movs	r3, #2
 80074f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b01      	cmp	r3, #1
 8007502:	d102      	bne.n	800750a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2203      	movs	r2, #3
 8007508:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b0b      	cmp	r3, #11
 8007512:	f200 81b3 	bhi.w	800787c <USBH_Process+0x394>
 8007516:	a201      	add	r2, pc, #4	; (adr r2, 800751c <USBH_Process+0x34>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	0800754d 	.word	0x0800754d
 8007520:	0800757f 	.word	0x0800757f
 8007524:	080075e7 	.word	0x080075e7
 8007528:	08007817 	.word	0x08007817
 800752c:	0800787d 	.word	0x0800787d
 8007530:	0800768b 	.word	0x0800768b
 8007534:	080077bd 	.word	0x080077bd
 8007538:	080076c1 	.word	0x080076c1
 800753c:	080076e1 	.word	0x080076e1
 8007540:	08007701 	.word	0x08007701
 8007544:	0800772f 	.word	0x0800772f
 8007548:	080077ff 	.word	0x080077ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8193 	beq.w	8007880 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007560:	20c8      	movs	r0, #200	; 0xc8
 8007562:	f004 f8d7 	bl	800b714 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f003 ff9d 	bl	800b4a6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800757c:	e180      	b.n	8007880 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007584:	2b01      	cmp	r3, #1
 8007586:	d107      	bne.n	8007598 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007596:	e182      	b.n	800789e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800759e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a2:	d914      	bls.n	80075ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075aa:	3301      	adds	r3, #1
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d903      	bls.n	80075c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	220d      	movs	r2, #13
 80075c2:	701a      	strb	r2, [r3, #0]
      break;
 80075c4:	e16b      	b.n	800789e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]
      break;
 80075cc:	e167      	b.n	800789e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075d4:	f103 020a 	add.w	r2, r3, #10
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80075de:	200a      	movs	r0, #10
 80075e0:	f004 f898 	bl	800b714 <USBH_Delay>
      break;
 80075e4:	e15b      	b.n	800789e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075f6:	2104      	movs	r1, #4
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80075fc:	2064      	movs	r0, #100	; 0x64
 80075fe:	f004 f889 	bl	800b714 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f003 ff28 	bl	800b458 <USBH_LL_GetSpeed>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2205      	movs	r2, #5
 8007616:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007618:	2100      	movs	r1, #0
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f92f 	bl	800887e <USBH_AllocPipe>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007628:	2180      	movs	r1, #128	; 0x80
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 f927 	bl	800887e <USBH_AllocPipe>
 8007630:	4603      	mov	r3, r0
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7919      	ldrb	r1, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800764c:	b292      	uxth	r2, r2
 800764e:	9202      	str	r2, [sp, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	9201      	str	r2, [sp, #4]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	4603      	mov	r3, r0
 8007658:	2280      	movs	r2, #128	; 0x80
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 f8e0 	bl	8008820 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	7959      	ldrb	r1, [r3, #5]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007674:	b292      	uxth	r2, r2
 8007676:	9202      	str	r2, [sp, #8]
 8007678:	2200      	movs	r2, #0
 800767a:	9201      	str	r2, [sp, #4]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	4603      	mov	r3, r0
 8007680:	2200      	movs	r2, #0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 f8cc 	bl	8008820 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007688:	e109      	b.n	800789e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f90c 	bl	80078a8 <USBH_HandleEnum>
 8007690:	4603      	mov	r3, r0
 8007692:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	f040 80f3 	bne.w	8007884 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d103      	bne.n	80076b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2208      	movs	r2, #8
 80076b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80076b6:	e0e5      	b.n	8007884 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2207      	movs	r2, #7
 80076bc:	701a      	strb	r2, [r3, #0]
      break;
 80076be:	e0e1      	b.n	8007884 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 80de 	beq.w	8007888 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076d2:	2101      	movs	r1, #1
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2208      	movs	r2, #8
 80076dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80076de:	e0d3      	b.n	8007888 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fc20 	bl	8007f30 <USBH_SetCfg>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f040 80ca 	bne.w	800788c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2209      	movs	r2, #9
 80076fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076fe:	e0c5      	b.n	800788c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00b      	beq.n	8007726 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800770e:	2101      	movs	r1, #1
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fc30 	bl	8007f76 <USBH_SetFeature>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	f040 80b9 	bne.w	8007890 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	220a      	movs	r2, #10
 8007722:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007724:	e0b4      	b.n	8007890 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	220a      	movs	r2, #10
 800772a:	701a      	strb	r2, [r3, #0]
      break;
 800772c:	e0b0      	b.n	8007890 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80ad 	beq.w	8007894 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
 8007746:	e016      	b.n	8007776 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007748:	7bfa      	ldrb	r2, [r7, #15]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	32de      	adds	r2, #222	; 0xde
 800774e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007752:	791a      	ldrb	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800775a:	429a      	cmp	r2, r3
 800775c:	d108      	bne.n	8007770 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800775e:	7bfa      	ldrb	r2, [r7, #15]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	32de      	adds	r2, #222	; 0xde
 8007764:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800776e:	e005      	b.n	800777c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	3301      	adds	r3, #1
 8007774:	73fb      	strb	r3, [r7, #15]
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0e5      	beq.n	8007748 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d016      	beq.n	80077b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2206      	movs	r2, #6
 800779c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077a4:	2103      	movs	r1, #3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077aa:	e073      	b.n	8007894 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	220d      	movs	r2, #13
 80077b0:	701a      	strb	r2, [r3, #0]
      break;
 80077b2:	e06f      	b.n	8007894 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	220d      	movs	r2, #13
 80077b8:	701a      	strb	r2, [r3, #0]
      break;
 80077ba:	e06b      	b.n	8007894 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d017      	beq.n	80077f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
 80077d2:	4603      	mov	r3, r0
 80077d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d103      	bne.n	80077e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	220b      	movs	r2, #11
 80077e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077e4:	e058      	b.n	8007898 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d154      	bne.n	8007898 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220d      	movs	r2, #13
 80077f2:	701a      	strb	r2, [r3, #0]
      break;
 80077f4:	e050      	b.n	8007898 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	220d      	movs	r2, #13
 80077fa:	701a      	strb	r2, [r3, #0]
      break;
 80077fc:	e04c      	b.n	8007898 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d049      	beq.n	800789c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
      }
      break;
 8007814:	e042      	b.n	800789c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fd72 	bl	8007308 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007852:	2105      	movs	r1, #5
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b01      	cmp	r3, #1
 8007862:	d107      	bne.n	8007874 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff fe2b 	bl	80074c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007872:	e014      	b.n	800789e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f003 fdb9 	bl	800b3ec <USBH_LL_Start>
      break;
 800787a:	e010      	b.n	800789e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800787c:	bf00      	nop
 800787e:	e00e      	b.n	800789e <USBH_Process+0x3b6>
      break;
 8007880:	bf00      	nop
 8007882:	e00c      	b.n	800789e <USBH_Process+0x3b6>
      break;
 8007884:	bf00      	nop
 8007886:	e00a      	b.n	800789e <USBH_Process+0x3b6>
    break;
 8007888:	bf00      	nop
 800788a:	e008      	b.n	800789e <USBH_Process+0x3b6>
      break;
 800788c:	bf00      	nop
 800788e:	e006      	b.n	800789e <USBH_Process+0x3b6>
      break;
 8007890:	bf00      	nop
 8007892:	e004      	b.n	800789e <USBH_Process+0x3b6>
      break;
 8007894:	bf00      	nop
 8007896:	e002      	b.n	800789e <USBH_Process+0x3b6>
      break;
 8007898:	bf00      	nop
 800789a:	e000      	b.n	800789e <USBH_Process+0x3b6>
      break;
 800789c:	bf00      	nop
  }
  return USBH_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af04      	add	r7, sp, #16
 80078ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078b0:	2301      	movs	r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078b4:	2301      	movs	r3, #1
 80078b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b07      	cmp	r3, #7
 80078be:	f200 81c1 	bhi.w	8007c44 <USBH_HandleEnum+0x39c>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <USBH_HandleEnum+0x20>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	080078e9 	.word	0x080078e9
 80078cc:	080079a7 	.word	0x080079a7
 80078d0:	08007a11 	.word	0x08007a11
 80078d4:	08007a9f 	.word	0x08007a9f
 80078d8:	08007b09 	.word	0x08007b09
 80078dc:	08007b79 	.word	0x08007b79
 80078e0:	08007bbf 	.word	0x08007bbf
 80078e4:	08007c05 	.word	0x08007c05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078e8:	2108      	movs	r1, #8
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa50 	bl	8007d90 <USBH_Get_DevDesc>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d130      	bne.n	800795c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7919      	ldrb	r1, [r3, #4]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800791e:	b292      	uxth	r2, r2
 8007920:	9202      	str	r2, [sp, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	9201      	str	r2, [sp, #4]
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	4603      	mov	r3, r0
 800792a:	2280      	movs	r2, #128	; 0x80
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 ff77 	bl	8008820 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	7959      	ldrb	r1, [r3, #5]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007946:	b292      	uxth	r2, r2
 8007948:	9202      	str	r2, [sp, #8]
 800794a:	2200      	movs	r2, #0
 800794c:	9201      	str	r2, [sp, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4603      	mov	r3, r0
 8007952:	2200      	movs	r2, #0
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 ff63 	bl	8008820 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800795a:	e175      	b.n	8007c48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b03      	cmp	r3, #3
 8007960:	f040 8172 	bne.w	8007c48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800796a:	3301      	adds	r3, #1
 800796c:	b2da      	uxtb	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800797a:	2b03      	cmp	r3, #3
 800797c:	d903      	bls.n	8007986 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	220d      	movs	r2, #13
 8007982:	701a      	strb	r2, [r3, #0]
      break;
 8007984:	e160      	b.n	8007c48 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	795b      	ldrb	r3, [r3, #5]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 ff97 	bl	80088c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	791b      	ldrb	r3, [r3, #4]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 ff91 	bl	80088c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	701a      	strb	r2, [r3, #0]
      break;
 80079a4:	e150      	b.n	8007c48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079a6:	2112      	movs	r1, #18
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9f1 	bl	8007d90 <USBH_Get_DevDesc>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079be:	e145      	b.n	8007c4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	f040 8142 	bne.w	8007c4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079ce:	3301      	adds	r3, #1
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d903      	bls.n	80079ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	220d      	movs	r2, #13
 80079e6:	701a      	strb	r2, [r3, #0]
      break;
 80079e8:	e130      	b.n	8007c4c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	795b      	ldrb	r3, [r3, #5]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 ff65 	bl	80088c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 ff5f 	bl	80088c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	701a      	strb	r2, [r3, #0]
      break;
 8007a0e:	e11d      	b.n	8007c4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a10:	2101      	movs	r1, #1
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa68 	bl	8007ee8 <USBH_SetAddress>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d132      	bne.n	8007a88 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007a22:	2002      	movs	r0, #2
 8007a24:	f003 fe76 	bl	800b714 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2203      	movs	r2, #3
 8007a34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7919      	ldrb	r1, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	9202      	str	r2, [sp, #8]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	9201      	str	r2, [sp, #4]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	4603      	mov	r3, r0
 8007a56:	2280      	movs	r2, #128	; 0x80
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fee1 	bl	8008820 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	7959      	ldrb	r1, [r3, #5]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a72:	b292      	uxth	r2, r2
 8007a74:	9202      	str	r2, [sp, #8]
 8007a76:	2200      	movs	r2, #0
 8007a78:	9201      	str	r2, [sp, #4]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fecd 	bl	8008820 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a86:	e0e3      	b.n	8007c50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	f040 80e0 	bne.w	8007c50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	220d      	movs	r2, #13
 8007a94:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	705a      	strb	r2, [r3, #1]
      break;
 8007a9c:	e0d8      	b.n	8007c50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a9e:	2109      	movs	r1, #9
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f99d 	bl	8007de0 <USBH_Get_CfgDesc>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d103      	bne.n	8007ab8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ab6:	e0cd      	b.n	8007c54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	f040 80ca 	bne.w	8007c54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d903      	bls.n	8007ae2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	220d      	movs	r2, #13
 8007ade:	701a      	strb	r2, [r3, #0]
      break;
 8007ae0:	e0b8      	b.n	8007c54 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	795b      	ldrb	r3, [r3, #5]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fee9 	bl	80088c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	791b      	ldrb	r3, [r3, #4]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fee3 	bl	80088c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e0a5      	b.n	8007c54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f965 	bl	8007de0 <USBH_Get_CfgDesc>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2205      	movs	r2, #5
 8007b24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b26:	e097      	b.n	8007c58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	f040 8094 	bne.w	8007c58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b36:	3301      	adds	r3, #1
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d903      	bls.n	8007b52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	220d      	movs	r2, #13
 8007b4e:	701a      	strb	r2, [r3, #0]
      break;
 8007b50:	e082      	b.n	8007c58 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	795b      	ldrb	r3, [r3, #5]
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 feb1 	bl	80088c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	791b      	ldrb	r3, [r3, #4]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 feab 	bl	80088c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	701a      	strb	r2, [r3, #0]
      break;
 8007b76:	e06f      	b.n	8007c58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d019      	beq.n	8007bb6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b8e:	23ff      	movs	r3, #255	; 0xff
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f949 	bl	8007e28 <USBH_Get_StringDesc>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2206      	movs	r2, #6
 8007ba4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ba6:	e059      	b.n	8007c5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d156      	bne.n	8007c5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2206      	movs	r2, #6
 8007bb2:	705a      	strb	r2, [r3, #1]
      break;
 8007bb4:	e052      	b.n	8007c5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2206      	movs	r2, #6
 8007bba:	705a      	strb	r2, [r3, #1]
      break;
 8007bbc:	e04e      	b.n	8007c5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d019      	beq.n	8007bfc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bd4:	23ff      	movs	r3, #255	; 0xff
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f926 	bl	8007e28 <USBH_Get_StringDesc>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2207      	movs	r2, #7
 8007bea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007bec:	e038      	b.n	8007c60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d135      	bne.n	8007c60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2207      	movs	r2, #7
 8007bf8:	705a      	strb	r2, [r3, #1]
      break;
 8007bfa:	e031      	b.n	8007c60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2207      	movs	r2, #7
 8007c00:	705a      	strb	r2, [r3, #1]
      break;
 8007c02:	e02d      	b.n	8007c60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d017      	beq.n	8007c3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c1a:	23ff      	movs	r3, #255	; 0xff
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f903 	bl	8007e28 <USBH_Get_StringDesc>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c30:	e018      	b.n	8007c64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d115      	bne.n	8007c64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3c:	e012      	b.n	8007c64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73fb      	strb	r3, [r7, #15]
      break;
 8007c42:	e00f      	b.n	8007c64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007c44:	bf00      	nop
 8007c46:	e00e      	b.n	8007c66 <USBH_HandleEnum+0x3be>
      break;
 8007c48:	bf00      	nop
 8007c4a:	e00c      	b.n	8007c66 <USBH_HandleEnum+0x3be>
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e00a      	b.n	8007c66 <USBH_HandleEnum+0x3be>
      break;
 8007c50:	bf00      	nop
 8007c52:	e008      	b.n	8007c66 <USBH_HandleEnum+0x3be>
      break;
 8007c54:	bf00      	nop
 8007c56:	e006      	b.n	8007c66 <USBH_HandleEnum+0x3be>
      break;
 8007c58:	bf00      	nop
 8007c5a:	e004      	b.n	8007c66 <USBH_HandleEnum+0x3be>
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e002      	b.n	8007c66 <USBH_HandleEnum+0x3be>
      break;
 8007c60:	bf00      	nop
 8007c62:	e000      	b.n	8007c66 <USBH_HandleEnum+0x3be>
      break;
 8007c64:	bf00      	nop
  }
  return Status;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f804 	bl	8007cb2 <USBH_HandleSof>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b0b      	cmp	r3, #11
 8007cc2:	d10a      	bne.n	8007cda <USBH_HandleSof+0x28>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b083      	sub	sp, #12
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007cf2:	bf00      	nop
}
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007d0e:	bf00      	nop
}
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f003 fb5a 	bl	800b422 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	791b      	ldrb	r3, [r3, #4]
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fda3 	bl	80088c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	795b      	ldrb	r3, [r3, #5]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fd9d 	bl	80088c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dae:	2100      	movs	r1, #0
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f864 	bl	8007e7e <USBH_GetDescriptor>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	b292      	uxth	r2, r2
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f000 f918 	bl	8008006 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	331c      	adds	r3, #28
 8007df0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007df2:	887b      	ldrh	r3, [r7, #2]
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f83d 	bl	8007e7e <USBH_GetDescriptor>
 8007e04:	4603      	mov	r3, r0
 8007e06:	72fb      	strb	r3, [r7, #11]
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d107      	bne.n	8007e1e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e14:	887a      	ldrh	r2, [r7, #2]
 8007e16:	68f9      	ldr	r1, [r7, #12]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f964 	bl	80080e6 <USBH_ParseCfgDesc>
  }

  return status;
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af02      	add	r7, sp, #8
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	461a      	mov	r2, r3
 8007e34:	460b      	mov	r3, r1
 8007e36:	72fb      	strb	r3, [r7, #11]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e44:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e4c:	893b      	ldrh	r3, [r7, #8]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	460b      	mov	r3, r1
 8007e52:	2100      	movs	r1, #0
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f812 	bl	8007e7e <USBH_GetDescriptor>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	75fb      	strb	r3, [r7, #23]
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d107      	bne.n	8007e74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e6a:	893a      	ldrh	r2, [r7, #8]
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fa37 	bl	80082e2 <USBH_ParseStringDesc>
  }

  return status;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	72fb      	strb	r3, [r7, #11]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	789b      	ldrb	r3, [r3, #2]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d11c      	bne.n	8007ed2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	893a      	ldrh	r2, [r7, #8]
 8007eae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007eb0:	893b      	ldrh	r3, [r7, #8]
 8007eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eba:	d104      	bne.n	8007ec6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f240 4209 	movw	r2, #1033	; 0x409
 8007ec2:	829a      	strh	r2, [r3, #20]
 8007ec4:	e002      	b.n	8007ecc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8b3a      	ldrh	r2, [r7, #24]
 8007ed0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ed2:	8b3b      	ldrh	r3, [r7, #24]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fa50 	bl	800837e <USBH_CtlReq>
 8007ede:	4603      	mov	r3, r0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	789b      	ldrb	r3, [r3, #2]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10f      	bne.n	8007f1c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2205      	movs	r2, #5
 8007f06:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2100      	movs	r1, #0
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa2c 	bl	800837e <USBH_CtlReq>
 8007f26:	4603      	mov	r3, r0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	789b      	ldrb	r3, [r3, #2]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d10e      	bne.n	8007f62 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2209      	movs	r2, #9
 8007f4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	887a      	ldrh	r2, [r7, #2]
 8007f54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f62:	2200      	movs	r2, #0
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa09 	bl	800837e <USBH_CtlReq>
 8007f6c:	4603      	mov	r3, r0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	789b      	ldrb	r3, [r3, #2]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d10f      	bne.n	8007faa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2203      	movs	r2, #3
 8007f94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007faa:	2200      	movs	r2, #0
 8007fac:	2100      	movs	r1, #0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f9e5 	bl	800837e <USBH_CtlReq>
 8007fb4:	4603      	mov	r3, r0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	789b      	ldrb	r3, [r3, #2]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d10f      	bne.n	8007ff2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9c1 	bl	800837e <USBH_CtlReq>
 8007ffc:	4603      	mov	r3, r0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008006:	b480      	push	{r7}
 8008008:	b085      	sub	sp, #20
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	4613      	mov	r3, r2
 8008012:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	785a      	ldrb	r2, [r3, #1]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3302      	adds	r3, #2
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b29a      	uxth	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	3303      	adds	r3, #3
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	791a      	ldrb	r2, [r3, #4]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	795a      	ldrb	r2, [r3, #5]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	799a      	ldrb	r2, [r3, #6]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	79da      	ldrb	r2, [r3, #7]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008060:	88fb      	ldrh	r3, [r7, #6]
 8008062:	2b08      	cmp	r3, #8
 8008064:	d939      	bls.n	80080da <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	3308      	adds	r3, #8
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	b29a      	uxth	r2, r3
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	3309      	adds	r3, #9
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	021b      	lsls	r3, r3, #8
 8008078:	b29b      	uxth	r3, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	b29a      	uxth	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	330a      	adds	r3, #10
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	b29a      	uxth	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	330b      	adds	r3, #11
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	b29b      	uxth	r3, r3
 8008096:	4313      	orrs	r3, r2
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	330c      	adds	r3, #12
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	330d      	adds	r3, #13
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	4313      	orrs	r3, r2
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	7b9a      	ldrb	r2, [r3, #14]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	7bda      	ldrb	r2, [r3, #15]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	7c1a      	ldrb	r2, [r3, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	7c5a      	ldrb	r2, [r3, #17]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	745a      	strb	r2, [r3, #17]
  }
}
 80080da:	bf00      	nop
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b08a      	sub	sp, #40	; 0x28
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	4613      	mov	r3, r2
 80080f2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	785a      	ldrb	r2, [r3, #1]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	3302      	adds	r3, #2
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b29a      	uxth	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	3303      	adds	r3, #3
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	b29b      	uxth	r3, r3
 800812c:	4313      	orrs	r3, r2
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	791a      	ldrb	r2, [r3, #4]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	795a      	ldrb	r2, [r3, #5]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	799a      	ldrb	r2, [r3, #6]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	79da      	ldrb	r2, [r3, #7]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	7a1a      	ldrb	r2, [r3, #8]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800815c:	88fb      	ldrh	r3, [r7, #6]
 800815e:	2b09      	cmp	r3, #9
 8008160:	d95f      	bls.n	8008222 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008162:	2309      	movs	r3, #9
 8008164:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800816a:	e051      	b.n	8008210 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800816c:	f107 0316 	add.w	r3, r7, #22
 8008170:	4619      	mov	r1, r3
 8008172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008174:	f000 f8e8 	bl	8008348 <USBH_GetNextDesc>
 8008178:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	2b04      	cmp	r3, #4
 8008180:	d146      	bne.n	8008210 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008186:	221a      	movs	r2, #26
 8008188:	fb02 f303 	mul.w	r3, r2, r3
 800818c:	3308      	adds	r3, #8
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4413      	add	r3, r2
 8008192:	3302      	adds	r3, #2
 8008194:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008198:	69f8      	ldr	r0, [r7, #28]
 800819a:	f000 f846 	bl	800822a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081a8:	e022      	b.n	80081f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081aa:	f107 0316 	add.w	r3, r7, #22
 80081ae:	4619      	mov	r1, r3
 80081b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081b2:	f000 f8c9 	bl	8008348 <USBH_GetNextDesc>
 80081b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	2b05      	cmp	r3, #5
 80081be:	d117      	bne.n	80081f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80081c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80081c8:	3201      	adds	r2, #1
 80081ca:	00d2      	lsls	r2, r2, #3
 80081cc:	211a      	movs	r1, #26
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	4413      	add	r3, r2
 80081d4:	3308      	adds	r3, #8
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	3304      	adds	r3, #4
 80081dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80081de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081e0:	69b8      	ldr	r0, [r7, #24]
 80081e2:	f000 f851 	bl	8008288 <USBH_ParseEPDesc>
            ep_ix++;
 80081e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80081ea:	3301      	adds	r3, #1
 80081ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	791b      	ldrb	r3, [r3, #4]
 80081f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d204      	bcs.n	8008206 <USBH_ParseCfgDesc+0x120>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	885a      	ldrh	r2, [r3, #2]
 8008200:	8afb      	ldrh	r3, [r7, #22]
 8008202:	429a      	cmp	r2, r3
 8008204:	d8d1      	bhi.n	80081aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800820a:	3301      	adds	r3, #1
 800820c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008214:	2b01      	cmp	r3, #1
 8008216:	d804      	bhi.n	8008222 <USBH_ParseCfgDesc+0x13c>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	885a      	ldrh	r2, [r3, #2]
 800821c:	8afb      	ldrh	r3, [r7, #22]
 800821e:	429a      	cmp	r2, r3
 8008220:	d8a4      	bhi.n	800816c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008222:	bf00      	nop
 8008224:	3728      	adds	r7, #40	; 0x28
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781a      	ldrb	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	785a      	ldrb	r2, [r3, #1]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	789a      	ldrb	r2, [r3, #2]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	78da      	ldrb	r2, [r3, #3]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	791a      	ldrb	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	795a      	ldrb	r2, [r3, #5]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	799a      	ldrb	r2, [r3, #6]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	79da      	ldrb	r2, [r3, #7]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	7a1a      	ldrb	r2, [r3, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	721a      	strb	r2, [r3, #8]
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781a      	ldrb	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	785a      	ldrb	r2, [r3, #1]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	789a      	ldrb	r2, [r3, #2]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	78da      	ldrb	r2, [r3, #3]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	3304      	adds	r3, #4
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	3305      	adds	r3, #5
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	799a      	ldrb	r2, [r3, #6]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	719a      	strb	r2, [r3, #6]
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b087      	sub	sp, #28
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	4613      	mov	r3, r2
 80082ee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3301      	adds	r3, #1
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b03      	cmp	r3, #3
 80082f8:	d120      	bne.n	800833c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	1e9a      	subs	r2, r3, #2
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	4293      	cmp	r3, r2
 8008304:	bf28      	it	cs
 8008306:	4613      	movcs	r3, r2
 8008308:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3302      	adds	r3, #2
 800830e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008310:	2300      	movs	r3, #0
 8008312:	82fb      	strh	r3, [r7, #22]
 8008314:	e00b      	b.n	800832e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008316:	8afb      	ldrh	r3, [r7, #22]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3301      	adds	r3, #1
 8008326:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008328:	8afb      	ldrh	r3, [r7, #22]
 800832a:	3302      	adds	r3, #2
 800832c:	82fb      	strh	r3, [r7, #22]
 800832e:	8afa      	ldrh	r2, [r7, #22]
 8008330:	8abb      	ldrh	r3, [r7, #20]
 8008332:	429a      	cmp	r2, r3
 8008334:	d3ef      	bcc.n	8008316 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
  }
}
 800833c:	bf00      	nop
 800833e:	371c      	adds	r7, #28
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	881a      	ldrh	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	4413      	add	r3, r2
 800835e:	b29a      	uxth	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4413      	add	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008370:	68fb      	ldr	r3, [r7, #12]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b086      	sub	sp, #24
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	4613      	mov	r3, r2
 800838a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800838c:	2301      	movs	r3, #1
 800838e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	789b      	ldrb	r3, [r3, #2]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d002      	beq.n	800839e <USBH_CtlReq+0x20>
 8008398:	2b02      	cmp	r3, #2
 800839a:	d00f      	beq.n	80083bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800839c:	e027      	b.n	80083ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	88fa      	ldrh	r2, [r7, #6]
 80083a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2202      	movs	r2, #2
 80083b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80083b6:	2301      	movs	r3, #1
 80083b8:	75fb      	strb	r3, [r7, #23]
      break;
 80083ba:	e018      	b.n	80083ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f81b 	bl	80083f8 <USBH_HandleControl>
 80083c2:	4603      	mov	r3, r0
 80083c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <USBH_CtlReq+0x54>
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d106      	bne.n	80083e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	761a      	strb	r2, [r3, #24]
      break;
 80083de:	e005      	b.n	80083ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d102      	bne.n	80083ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	709a      	strb	r2, [r3, #2]
      break;
 80083ec:	bf00      	nop
  }
  return status;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008400:	2301      	movs	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008404:	2300      	movs	r3, #0
 8008406:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	7e1b      	ldrb	r3, [r3, #24]
 800840c:	3b01      	subs	r3, #1
 800840e:	2b0a      	cmp	r3, #10
 8008410:	f200 8156 	bhi.w	80086c0 <USBH_HandleControl+0x2c8>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <USBH_HandleControl+0x24>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008449 	.word	0x08008449
 8008420:	08008463 	.word	0x08008463
 8008424:	080084cd 	.word	0x080084cd
 8008428:	080084f3 	.word	0x080084f3
 800842c:	0800852b 	.word	0x0800852b
 8008430:	08008555 	.word	0x08008555
 8008434:	080085a7 	.word	0x080085a7
 8008438:	080085c9 	.word	0x080085c9
 800843c:	08008605 	.word	0x08008605
 8008440:	0800862b 	.word	0x0800862b
 8008444:	08008669 	.word	0x08008669
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f103 0110 	add.w	r1, r3, #16
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	461a      	mov	r2, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f943 	bl	80086e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	761a      	strb	r2, [r3, #24]
      break;
 8008460:	e139      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	795b      	ldrb	r3, [r3, #5]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f003 f8c9 	bl	800b600 <USBH_LL_GetURBState>
 800846e:	4603      	mov	r3, r0
 8008470:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d11e      	bne.n	80084b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7c1b      	ldrb	r3, [r3, #16]
 800847c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008480:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8adb      	ldrh	r3, [r3, #22]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800848a:	7b7b      	ldrb	r3, [r7, #13]
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	d103      	bne.n	8008498 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2203      	movs	r2, #3
 8008494:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008496:	e115      	b.n	80086c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2205      	movs	r2, #5
 800849c:	761a      	strb	r2, [r3, #24]
      break;
 800849e:	e111      	b.n	80086c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80084a0:	7b7b      	ldrb	r3, [r7, #13]
 80084a2:	2b80      	cmp	r3, #128	; 0x80
 80084a4:	d103      	bne.n	80084ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2209      	movs	r2, #9
 80084aa:	761a      	strb	r2, [r3, #24]
      break;
 80084ac:	e10a      	b.n	80086c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2207      	movs	r2, #7
 80084b2:	761a      	strb	r2, [r3, #24]
      break;
 80084b4:	e106      	b.n	80086c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d003      	beq.n	80084c4 <USBH_HandleControl+0xcc>
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	f040 8100 	bne.w	80086c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	220b      	movs	r2, #11
 80084c8:	761a      	strb	r2, [r3, #24]
      break;
 80084ca:	e0fb      	b.n	80086c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6899      	ldr	r1, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	899a      	ldrh	r2, [r3, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	791b      	ldrb	r3, [r3, #4]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f93a 	bl	800875e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2204      	movs	r2, #4
 80084ee:	761a      	strb	r2, [r3, #24]
      break;
 80084f0:	e0f1      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	791b      	ldrb	r3, [r3, #4]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f003 f881 	bl	800b600 <USBH_LL_GetURBState>
 80084fe:	4603      	mov	r3, r0
 8008500:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d102      	bne.n	800850e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2209      	movs	r2, #9
 800850c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b05      	cmp	r3, #5
 8008512:	d102      	bne.n	800851a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008514:	2303      	movs	r3, #3
 8008516:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008518:	e0d6      	b.n	80086c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b04      	cmp	r3, #4
 800851e:	f040 80d3 	bne.w	80086c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	220b      	movs	r2, #11
 8008526:	761a      	strb	r2, [r3, #24]
      break;
 8008528:	e0ce      	b.n	80086c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6899      	ldr	r1, [r3, #8]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	899a      	ldrh	r2, [r3, #12]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	795b      	ldrb	r3, [r3, #5]
 8008536:	2001      	movs	r0, #1
 8008538:	9000      	str	r0, [sp, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f8ea 	bl	8008714 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2206      	movs	r2, #6
 8008550:	761a      	strb	r2, [r3, #24]
      break;
 8008552:	e0c0      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	795b      	ldrb	r3, [r3, #5]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f003 f850 	bl	800b600 <USBH_LL_GetURBState>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d103      	bne.n	8008572 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2207      	movs	r2, #7
 800856e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008570:	e0ac      	b.n	80086cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b05      	cmp	r3, #5
 8008576:	d105      	bne.n	8008584 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	220c      	movs	r2, #12
 800857c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800857e:	2303      	movs	r3, #3
 8008580:	73fb      	strb	r3, [r7, #15]
      break;
 8008582:	e0a3      	b.n	80086cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d103      	bne.n	8008592 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2205      	movs	r2, #5
 800858e:	761a      	strb	r2, [r3, #24]
      break;
 8008590:	e09c      	b.n	80086cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b04      	cmp	r3, #4
 8008596:	f040 8099 	bne.w	80086cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	220b      	movs	r2, #11
 800859e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80085a0:	2302      	movs	r3, #2
 80085a2:	73fb      	strb	r3, [r7, #15]
      break;
 80085a4:	e092      	b.n	80086cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	791b      	ldrb	r3, [r3, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8d5 	bl	800875e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2208      	movs	r2, #8
 80085c4:	761a      	strb	r2, [r3, #24]

      break;
 80085c6:	e086      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	791b      	ldrb	r3, [r3, #4]
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f003 f816 	bl	800b600 <USBH_LL_GetURBState>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d105      	bne.n	80085ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	220d      	movs	r2, #13
 80085e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085e8:	e072      	b.n	80086d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d103      	bne.n	80085f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	220b      	movs	r2, #11
 80085f4:	761a      	strb	r2, [r3, #24]
      break;
 80085f6:	e06b      	b.n	80086d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d168      	bne.n	80086d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80085fe:	2303      	movs	r3, #3
 8008600:	73fb      	strb	r3, [r7, #15]
      break;
 8008602:	e065      	b.n	80086d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	795b      	ldrb	r3, [r3, #5]
 8008608:	2201      	movs	r2, #1
 800860a:	9200      	str	r2, [sp, #0]
 800860c:	2200      	movs	r2, #0
 800860e:	2100      	movs	r1, #0
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f87f 	bl	8008714 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800861c:	b29a      	uxth	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	220a      	movs	r2, #10
 8008626:	761a      	strb	r2, [r3, #24]
      break;
 8008628:	e055      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	795b      	ldrb	r3, [r3, #5]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f002 ffe5 	bl	800b600 <USBH_LL_GetURBState>
 8008636:	4603      	mov	r3, r0
 8008638:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d105      	bne.n	800864c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	220d      	movs	r2, #13
 8008648:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800864a:	e043      	b.n	80086d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d103      	bne.n	800865a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2209      	movs	r2, #9
 8008656:	761a      	strb	r2, [r3, #24]
      break;
 8008658:	e03c      	b.n	80086d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b04      	cmp	r3, #4
 800865e:	d139      	bne.n	80086d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	220b      	movs	r2, #11
 8008664:	761a      	strb	r2, [r3, #24]
      break;
 8008666:	e035      	b.n	80086d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	7e5b      	ldrb	r3, [r3, #25]
 800866c:	3301      	adds	r3, #1
 800866e:	b2da      	uxtb	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	765a      	strb	r2, [r3, #25]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7e5b      	ldrb	r3, [r3, #25]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d806      	bhi.n	800868a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008688:	e025      	b.n	80086d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008690:	2106      	movs	r1, #6
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	795b      	ldrb	r3, [r3, #5]
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f90c 	bl	80088c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	791b      	ldrb	r3, [r3, #4]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f906 	bl	80088c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80086ba:	2302      	movs	r3, #2
 80086bc:	73fb      	strb	r3, [r7, #15]
      break;
 80086be:	e00a      	b.n	80086d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80086c0:	bf00      	nop
 80086c2:	e008      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086c4:	bf00      	nop
 80086c6:	e006      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086c8:	bf00      	nop
 80086ca:	e004      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086cc:	bf00      	nop
 80086ce:	e002      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086d0:	bf00      	nop
 80086d2:	e000      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086d4:	bf00      	nop
  }

  return status;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086ee:	79f9      	ldrb	r1, [r7, #7]
 80086f0:	2300      	movs	r3, #0
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	2308      	movs	r3, #8
 80086f6:	9302      	str	r3, [sp, #8]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	2300      	movs	r3, #0
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2300      	movs	r3, #0
 8008702:	2200      	movs	r2, #0
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f002 ff4a 	bl	800b59e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af04      	add	r7, sp, #16
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4611      	mov	r1, r2
 8008720:	461a      	mov	r2, r3
 8008722:	460b      	mov	r3, r1
 8008724:	80fb      	strh	r3, [r7, #6]
 8008726:	4613      	mov	r3, r2
 8008728:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008738:	7979      	ldrb	r1, [r7, #5]
 800873a:	7e3b      	ldrb	r3, [r7, #24]
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	9302      	str	r3, [sp, #8]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	2301      	movs	r3, #1
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	2300      	movs	r3, #0
 800874c:	2200      	movs	r2, #0
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f002 ff25 	bl	800b59e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b088      	sub	sp, #32
 8008762:	af04      	add	r7, sp, #16
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	4611      	mov	r1, r2
 800876a:	461a      	mov	r2, r3
 800876c:	460b      	mov	r3, r1
 800876e:	80fb      	strh	r3, [r7, #6]
 8008770:	4613      	mov	r3, r2
 8008772:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008774:	7979      	ldrb	r1, [r7, #5]
 8008776:	2300      	movs	r3, #0
 8008778:	9303      	str	r3, [sp, #12]
 800877a:	88fb      	ldrh	r3, [r7, #6]
 800877c:	9302      	str	r3, [sp, #8]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	2301      	movs	r3, #1
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	2300      	movs	r3, #0
 8008788:	2201      	movs	r2, #1
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f002 ff07 	bl	800b59e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008790:	2300      	movs	r3, #0

}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b088      	sub	sp, #32
 800879e:	af04      	add	r7, sp, #16
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	4611      	mov	r1, r2
 80087a6:	461a      	mov	r2, r3
 80087a8:	460b      	mov	r3, r1
 80087aa:	80fb      	strh	r3, [r7, #6]
 80087ac:	4613      	mov	r3, r2
 80087ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087be:	7979      	ldrb	r1, [r7, #5]
 80087c0:	7e3b      	ldrb	r3, [r7, #24]
 80087c2:	9303      	str	r3, [sp, #12]
 80087c4:	88fb      	ldrh	r3, [r7, #6]
 80087c6:	9302      	str	r3, [sp, #8]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	2301      	movs	r3, #1
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	2302      	movs	r3, #2
 80087d2:	2200      	movs	r2, #0
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f002 fee2 	bl	800b59e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4611      	mov	r1, r2
 80087f0:	461a      	mov	r2, r3
 80087f2:	460b      	mov	r3, r1
 80087f4:	80fb      	strh	r3, [r7, #6]
 80087f6:	4613      	mov	r3, r2
 80087f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087fa:	7979      	ldrb	r1, [r7, #5]
 80087fc:	2300      	movs	r3, #0
 80087fe:	9303      	str	r3, [sp, #12]
 8008800:	88fb      	ldrh	r3, [r7, #6]
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	2301      	movs	r3, #1
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2302      	movs	r3, #2
 800880e:	2201      	movs	r2, #1
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f002 fec4 	bl	800b59e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af04      	add	r7, sp, #16
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	4608      	mov	r0, r1
 800882a:	4611      	mov	r1, r2
 800882c:	461a      	mov	r2, r3
 800882e:	4603      	mov	r3, r0
 8008830:	70fb      	strb	r3, [r7, #3]
 8008832:	460b      	mov	r3, r1
 8008834:	70bb      	strb	r3, [r7, #2]
 8008836:	4613      	mov	r3, r2
 8008838:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800883a:	7878      	ldrb	r0, [r7, #1]
 800883c:	78ba      	ldrb	r2, [r7, #2]
 800883e:	78f9      	ldrb	r1, [r7, #3]
 8008840:	8b3b      	ldrh	r3, [r7, #24]
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	7d3b      	ldrb	r3, [r7, #20]
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	7c3b      	ldrb	r3, [r7, #16]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4603      	mov	r3, r0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f002 fe57 	bl	800b502 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f002 fe76 	bl	800b560 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f836 	bl	80088fc <USBH_GetFreePipe>
 8008890:	4603      	mov	r3, r0
 8008892:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008894:	89fb      	ldrh	r3, [r7, #14]
 8008896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800889a:	4293      	cmp	r3, r2
 800889c:	d00a      	beq.n	80088b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	89fb      	ldrh	r3, [r7, #14]
 80088a2:	f003 030f 	and.w	r3, r3, #15
 80088a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	33e0      	adds	r3, #224	; 0xe0
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80088b4:	89fb      	ldrh	r3, [r7, #14]
 80088b6:	b2db      	uxtb	r3, r3
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	2b0a      	cmp	r3, #10
 80088d0:	d80d      	bhi.n	80088ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088d2:	78fb      	ldrb	r3, [r7, #3]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	33e0      	adds	r3, #224	; 0xe0
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	33e0      	adds	r3, #224	; 0xe0
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	440b      	add	r3, r1
 80088ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
 800890c:	e00f      	b.n	800892e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	33e0      	adds	r3, #224	; 0xe0
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	b29b      	uxth	r3, r3
 8008926:	e007      	b.n	8008938 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	3301      	adds	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	2b0a      	cmp	r3, #10
 8008932:	d9ec      	bls.n	800890e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008934:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	4a08      	ldr	r2, [pc, #32]	; (8008974 <disk_status+0x30>)
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	79fa      	ldrb	r2, [r7, #7]
 800895c:	4905      	ldr	r1, [pc, #20]	; (8008974 <disk_status+0x30>)
 800895e:	440a      	add	r2, r1
 8008960:	7a12      	ldrb	r2, [r2, #8]
 8008962:	4610      	mov	r0, r2
 8008964:	4798      	blx	r3
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]
  return stat;
 800896a:	7bfb      	ldrb	r3, [r7, #15]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	200007cc 	.word	0x200007cc

08008978 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	4a0d      	ldr	r2, [pc, #52]	; (80089c0 <disk_initialize+0x48>)
 800898a:	5cd3      	ldrb	r3, [r2, r3]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d111      	bne.n	80089b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	4a0b      	ldr	r2, [pc, #44]	; (80089c0 <disk_initialize+0x48>)
 8008994:	2101      	movs	r1, #1
 8008996:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	4a09      	ldr	r2, [pc, #36]	; (80089c0 <disk_initialize+0x48>)
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	79fa      	ldrb	r2, [r7, #7]
 80089a6:	4906      	ldr	r1, [pc, #24]	; (80089c0 <disk_initialize+0x48>)
 80089a8:	440a      	add	r2, r1
 80089aa:	7a12      	ldrb	r2, [r2, #8]
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	200007cc 	.word	0x200007cc

080089c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	4a0a      	ldr	r2, [pc, #40]	; (8008a00 <disk_read+0x3c>)
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	689c      	ldr	r4, [r3, #8]
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	4a07      	ldr	r2, [pc, #28]	; (8008a00 <disk_read+0x3c>)
 80089e4:	4413      	add	r3, r2
 80089e6:	7a18      	ldrb	r0, [r3, #8]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	47a0      	blx	r4
 80089f0:	4603      	mov	r3, r0
 80089f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	371c      	adds	r7, #28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd90      	pop	{r4, r7, pc}
 80089fe:	bf00      	nop
 8008a00:	200007cc 	.word	0x200007cc

08008a04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	607a      	str	r2, [r7, #4]
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	4603      	mov	r3, r0
 8008a12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <disk_write+0x3c>)
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	68dc      	ldr	r4, [r3, #12]
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	4a07      	ldr	r2, [pc, #28]	; (8008a40 <disk_write+0x3c>)
 8008a24:	4413      	add	r3, r2
 8008a26:	7a18      	ldrb	r0, [r3, #8]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	47a0      	blx	r4
 8008a30:	4603      	mov	r3, r0
 8008a32:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd90      	pop	{r4, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	200007cc 	.word	0x200007cc

08008a44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	603a      	str	r2, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
 8008a50:	460b      	mov	r3, r1
 8008a52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	4a09      	ldr	r2, [pc, #36]	; (8008a7c <disk_ioctl+0x38>)
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	79fa      	ldrb	r2, [r7, #7]
 8008a62:	4906      	ldr	r1, [pc, #24]	; (8008a7c <disk_ioctl+0x38>)
 8008a64:	440a      	add	r2, r1
 8008a66:	7a10      	ldrb	r0, [r2, #8]
 8008a68:	79b9      	ldrb	r1, [r7, #6]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4798      	blx	r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]
  return res;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	200007cc 	.word	0x200007cc

08008a80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008a90:	89fb      	ldrh	r3, [r7, #14]
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	b21a      	sxth	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	b21b      	sxth	r3, r3
 8008aa0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008aa2:	89fb      	ldrh	r3, [r7, #14]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3303      	adds	r3, #3
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	021b      	lsls	r3, r3, #8
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	3202      	adds	r2, #2
 8008ac8:	7812      	ldrb	r2, [r2, #0]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	3201      	adds	r2, #1
 8008ad6:	7812      	ldrb	r2, [r2, #0]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	7812      	ldrb	r2, [r2, #0]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
	return rv;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	887a      	ldrh	r2, [r7, #2]
 8008b0a:	b2d2      	uxtb	r2, r2
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	887b      	ldrh	r3, [r7, #2]
 8008b10:	0a1b      	lsrs	r3, r3, #8
 8008b12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	607a      	str	r2, [r7, #4]
 8008b1a:	887a      	ldrh	r2, [r7, #2]
 8008b1c:	b2d2      	uxtb	r2, r2
 8008b1e:	701a      	strb	r2, [r3, #0]
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	0a1b      	lsrs	r3, r3, #8
 8008b46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	b2d2      	uxtb	r2, r2
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	b2d2      	uxtb	r2, r2
 8008b76:	701a      	strb	r2, [r3, #0]
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00d      	beq.n	8008bba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	1c53      	adds	r3, r2, #1
 8008ba2:	613b      	str	r3, [r7, #16]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	1c59      	adds	r1, r3, #1
 8008ba8:	6179      	str	r1, [r7, #20]
 8008baa:	7812      	ldrb	r2, [r2, #0]
 8008bac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	607b      	str	r3, [r7, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1f1      	bne.n	8008b9e <mem_cpy+0x1a>
	}
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008bc6:	b480      	push	{r7}
 8008bc8:	b087      	sub	sp, #28
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	617a      	str	r2, [r7, #20]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	607b      	str	r3, [r7, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1f3      	bne.n	8008bd6 <mem_set+0x10>
}
 8008bee:	bf00      	nop
 8008bf0:	bf00      	nop
 8008bf2:	371c      	adds	r7, #28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008bfc:	b480      	push	{r7}
 8008bfe:	b089      	sub	sp, #36	; 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	61fa      	str	r2, [r7, #28]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	61ba      	str	r2, [r7, #24]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	1acb      	subs	r3, r1, r3
 8008c28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	607b      	str	r3, [r7, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <mem_cmp+0x40>
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0eb      	beq.n	8008c14 <mem_cmp+0x18>

	return r;
 8008c3c:	697b      	ldr	r3, [r7, #20]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3724      	adds	r7, #36	; 0x24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008c54:	e002      	b.n	8008c5c <chk_chr+0x12>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	607b      	str	r3, [r7, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d005      	beq.n	8008c70 <chk_chr+0x26>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d1f2      	bne.n	8008c56 <chk_chr+0xc>
	return *str;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	781b      	ldrb	r3, [r3, #0]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e029      	b.n	8008ce8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008c94:	4a27      	ldr	r2, [pc, #156]	; (8008d34 <chk_lock+0xb4>)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	4413      	add	r3, r2
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01d      	beq.n	8008cde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ca2:	4a24      	ldr	r2, [pc, #144]	; (8008d34 <chk_lock+0xb4>)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	4413      	add	r3, r2
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d116      	bne.n	8008ce2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008cb4:	4a1f      	ldr	r2, [pc, #124]	; (8008d34 <chk_lock+0xb4>)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	4413      	add	r3, r2
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d10c      	bne.n	8008ce2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008cc8:	4a1a      	ldr	r2, [pc, #104]	; (8008d34 <chk_lock+0xb4>)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	4413      	add	r3, r2
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d102      	bne.n	8008ce2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008cdc:	e007      	b.n	8008cee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d9d2      	bls.n	8008c94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d109      	bne.n	8008d08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d102      	bne.n	8008d00 <chk_lock+0x80>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d101      	bne.n	8008d04 <chk_lock+0x84>
 8008d00:	2300      	movs	r3, #0
 8008d02:	e010      	b.n	8008d26 <chk_lock+0xa6>
 8008d04:	2312      	movs	r3, #18
 8008d06:	e00e      	b.n	8008d26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d108      	bne.n	8008d20 <chk_lock+0xa0>
 8008d0e:	4a09      	ldr	r2, [pc, #36]	; (8008d34 <chk_lock+0xb4>)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	4413      	add	r3, r2
 8008d16:	330c      	adds	r3, #12
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d1e:	d101      	bne.n	8008d24 <chk_lock+0xa4>
 8008d20:	2310      	movs	r3, #16
 8008d22:	e000      	b.n	8008d26 <chk_lock+0xa6>
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	200007ac 	.word	0x200007ac

08008d38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	607b      	str	r3, [r7, #4]
 8008d42:	e002      	b.n	8008d4a <enq_lock+0x12>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3301      	adds	r3, #1
 8008d48:	607b      	str	r3, [r7, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d806      	bhi.n	8008d5e <enq_lock+0x26>
 8008d50:	4a09      	ldr	r2, [pc, #36]	; (8008d78 <enq_lock+0x40>)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	011b      	lsls	r3, r3, #4
 8008d56:	4413      	add	r3, r2
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1f2      	bne.n	8008d44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	bf14      	ite	ne
 8008d64:	2301      	movne	r3, #1
 8008d66:	2300      	moveq	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	200007ac 	.word	0x200007ac

08008d7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	e01f      	b.n	8008dcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008d8c:	4a41      	ldr	r2, [pc, #260]	; (8008e94 <inc_lock+0x118>)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	4413      	add	r3, r2
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d113      	bne.n	8008dc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008d9e:	4a3d      	ldr	r2, [pc, #244]	; (8008e94 <inc_lock+0x118>)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	4413      	add	r3, r2
 8008da6:	3304      	adds	r3, #4
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d109      	bne.n	8008dc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008db2:	4a38      	ldr	r2, [pc, #224]	; (8008e94 <inc_lock+0x118>)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	4413      	add	r3, r2
 8008dba:	3308      	adds	r3, #8
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d006      	beq.n	8008dd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d9dc      	bls.n	8008d8c <inc_lock+0x10>
 8008dd2:	e000      	b.n	8008dd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008dd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d132      	bne.n	8008e42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	e002      	b.n	8008de8 <inc_lock+0x6c>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d806      	bhi.n	8008dfc <inc_lock+0x80>
 8008dee:	4a29      	ldr	r2, [pc, #164]	; (8008e94 <inc_lock+0x118>)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	011b      	lsls	r3, r3, #4
 8008df4:	4413      	add	r3, r2
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1f2      	bne.n	8008de2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d101      	bne.n	8008e06 <inc_lock+0x8a>
 8008e02:	2300      	movs	r3, #0
 8008e04:	e040      	b.n	8008e88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4922      	ldr	r1, [pc, #136]	; (8008e94 <inc_lock+0x118>)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	011b      	lsls	r3, r3, #4
 8008e10:	440b      	add	r3, r1
 8008e12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	491e      	ldr	r1, [pc, #120]	; (8008e94 <inc_lock+0x118>)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	440b      	add	r3, r1
 8008e20:	3304      	adds	r3, #4
 8008e22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	695a      	ldr	r2, [r3, #20]
 8008e28:	491a      	ldr	r1, [pc, #104]	; (8008e94 <inc_lock+0x118>)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	440b      	add	r3, r1
 8008e30:	3308      	adds	r3, #8
 8008e32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008e34:	4a17      	ldr	r2, [pc, #92]	; (8008e94 <inc_lock+0x118>)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	4413      	add	r3, r2
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	2200      	movs	r2, #0
 8008e40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d009      	beq.n	8008e5c <inc_lock+0xe0>
 8008e48:	4a12      	ldr	r2, [pc, #72]	; (8008e94 <inc_lock+0x118>)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	4413      	add	r3, r2
 8008e50:	330c      	adds	r3, #12
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <inc_lock+0xe0>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	e015      	b.n	8008e88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d108      	bne.n	8008e74 <inc_lock+0xf8>
 8008e62:	4a0c      	ldr	r2, [pc, #48]	; (8008e94 <inc_lock+0x118>)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	4413      	add	r3, r2
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	e001      	b.n	8008e78 <inc_lock+0xfc>
 8008e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e78:	4906      	ldr	r1, [pc, #24]	; (8008e94 <inc_lock+0x118>)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	440b      	add	r3, r1
 8008e80:	330c      	adds	r3, #12
 8008e82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	200007ac 	.word	0x200007ac

08008e98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	607b      	str	r3, [r7, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d825      	bhi.n	8008ef8 <dec_lock+0x60>
		n = Files[i].ctr;
 8008eac:	4a17      	ldr	r2, [pc, #92]	; (8008f0c <dec_lock+0x74>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	4413      	add	r3, r2
 8008eb4:	330c      	adds	r3, #12
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008eba:	89fb      	ldrh	r3, [r7, #14]
 8008ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec0:	d101      	bne.n	8008ec6 <dec_lock+0x2e>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008ec6:	89fb      	ldrh	r3, [r7, #14]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <dec_lock+0x3a>
 8008ecc:	89fb      	ldrh	r3, [r7, #14]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008ed2:	4a0e      	ldr	r2, [pc, #56]	; (8008f0c <dec_lock+0x74>)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	4413      	add	r3, r2
 8008eda:	330c      	adds	r3, #12
 8008edc:	89fa      	ldrh	r2, [r7, #14]
 8008ede:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008ee0:	89fb      	ldrh	r3, [r7, #14]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d105      	bne.n	8008ef2 <dec_lock+0x5a>
 8008ee6:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <dec_lock+0x74>)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	011b      	lsls	r3, r3, #4
 8008eec:	4413      	add	r3, r2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	737b      	strb	r3, [r7, #13]
 8008ef6:	e001      	b.n	8008efc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008ef8:	2302      	movs	r3, #2
 8008efa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008efc:	7b7b      	ldrb	r3, [r7, #13]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	200007ac 	.word	0x200007ac

08008f10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	e010      	b.n	8008f40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008f1e:	4a0d      	ldr	r2, [pc, #52]	; (8008f54 <clear_lock+0x44>)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	4413      	add	r3, r2
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d105      	bne.n	8008f3a <clear_lock+0x2a>
 8008f2e:	4a09      	ldr	r2, [pc, #36]	; (8008f54 <clear_lock+0x44>)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	4413      	add	r3, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d9eb      	bls.n	8008f1e <clear_lock+0xe>
	}
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	200007ac 	.word	0x200007ac

08008f58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	78db      	ldrb	r3, [r3, #3]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d034      	beq.n	8008fd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	7858      	ldrb	r0, [r3, #1]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	f7ff fd40 	bl	8008a04 <disk_write>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	73fb      	strb	r3, [r7, #15]
 8008f8e:	e022      	b.n	8008fd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	1ad2      	subs	r2, r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d217      	bcs.n	8008fd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	789b      	ldrb	r3, [r3, #2]
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	e010      	b.n	8008fd0 <sync_window+0x78>
					wsect += fs->fsize;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7858      	ldrb	r0, [r3, #1]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	f7ff fd1d 	bl	8008a04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d8eb      	bhi.n	8008fae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d01b      	beq.n	8009030 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff ffad 	bl	8008f58 <sync_window>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d113      	bne.n	8009030 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	7858      	ldrb	r0, [r3, #1]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009012:	2301      	movs	r3, #1
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	f7ff fcd5 	bl	80089c4 <disk_read>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009020:	f04f 33ff 	mov.w	r3, #4294967295
 8009024:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009026:	2301      	movs	r3, #1
 8009028:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ff87 	bl	8008f58 <sync_window>
 800904a:	4603      	mov	r3, r0
 800904c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d159      	bne.n	8009108 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b03      	cmp	r3, #3
 800905a:	d149      	bne.n	80090f0 <sync_fs+0xb4>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	791b      	ldrb	r3, [r3, #4]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d145      	bne.n	80090f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	899b      	ldrh	r3, [r3, #12]
 800906e:	461a      	mov	r2, r3
 8009070:	2100      	movs	r1, #0
 8009072:	f7ff fda8 	bl	8008bc6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3334      	adds	r3, #52	; 0x34
 800907a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800907e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff fd37 	bl	8008af6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	3334      	adds	r3, #52	; 0x34
 800908c:	4921      	ldr	r1, [pc, #132]	; (8009114 <sync_fs+0xd8>)
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff fd4c 	bl	8008b2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3334      	adds	r3, #52	; 0x34
 8009098:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800909c:	491e      	ldr	r1, [pc, #120]	; (8009118 <sync_fs+0xdc>)
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fd44 	bl	8008b2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3334      	adds	r3, #52	; 0x34
 80090a8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	4619      	mov	r1, r3
 80090b2:	4610      	mov	r0, r2
 80090b4:	f7ff fd3a 	bl	8008b2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3334      	adds	r3, #52	; 0x34
 80090bc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f7ff fd30 	bl	8008b2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7858      	ldrb	r0, [r3, #1]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090e4:	2301      	movs	r3, #1
 80090e6:	f7ff fc8d 	bl	8008a04 <disk_write>
			fs->fsi_flag = 0;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	2200      	movs	r2, #0
 80090f6:	2100      	movs	r1, #0
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff fca3 	bl	8008a44 <disk_ioctl>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <sync_fs+0xcc>
 8009104:	2301      	movs	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009108:	7bfb      	ldrb	r3, [r7, #15]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	41615252 	.word	0x41615252
 8009118:	61417272 	.word	0x61417272

0800911c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	3b02      	subs	r3, #2
 800912a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	3b02      	subs	r3, #2
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d301      	bcc.n	800913c <clust2sect+0x20>
 8009138:	2300      	movs	r3, #0
 800913a:	e008      	b.n	800914e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	895b      	ldrh	r3, [r3, #10]
 8009140:	461a      	mov	r2, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	fb03 f202 	mul.w	r2, r3, r2
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	4413      	add	r3, r2
}
 800914e:	4618      	mov	r0, r3
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d904      	bls.n	800917a <get_fat+0x20>
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d302      	bcc.n	8009180 <get_fat+0x26>
		val = 1;	/* Internal error */
 800917a:	2301      	movs	r3, #1
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e0bb      	b.n	80092f8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009180:	f04f 33ff 	mov.w	r3, #4294967295
 8009184:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b03      	cmp	r3, #3
 800918c:	f000 8083 	beq.w	8009296 <get_fat+0x13c>
 8009190:	2b03      	cmp	r3, #3
 8009192:	f300 80a7 	bgt.w	80092e4 <get_fat+0x18a>
 8009196:	2b01      	cmp	r3, #1
 8009198:	d002      	beq.n	80091a0 <get_fat+0x46>
 800919a:	2b02      	cmp	r3, #2
 800919c:	d056      	beq.n	800924c <get_fat+0xf2>
 800919e:	e0a1      	b.n	80092e4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	085b      	lsrs	r3, r3, #1
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	899b      	ldrh	r3, [r3, #12]
 80091b6:	4619      	mov	r1, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80091be:	4413      	add	r3, r2
 80091c0:	4619      	mov	r1, r3
 80091c2:	6938      	ldr	r0, [r7, #16]
 80091c4:	f7ff ff0c 	bl	8008fe0 <move_window>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f040 808d 	bne.w	80092ea <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	60fa      	str	r2, [r7, #12]
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	8992      	ldrh	r2, [r2, #12]
 80091da:	fbb3 f1f2 	udiv	r1, r3, r2
 80091de:	fb02 f201 	mul.w	r2, r2, r1
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4413      	add	r3, r2
 80091e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	899b      	ldrh	r3, [r3, #12]
 80091f6:	4619      	mov	r1, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80091fe:	4413      	add	r3, r2
 8009200:	4619      	mov	r1, r3
 8009202:	6938      	ldr	r0, [r7, #16]
 8009204:	f7ff feec 	bl	8008fe0 <move_window>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d16f      	bne.n	80092ee <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	899b      	ldrh	r3, [r3, #12]
 8009212:	461a      	mov	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	fbb3 f1f2 	udiv	r1, r3, r2
 800921a:	fb02 f201 	mul.w	r2, r2, r1
 800921e:	1a9b      	subs	r3, r3, r2
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4413      	add	r3, r2
 8009224:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	461a      	mov	r2, r3
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4313      	orrs	r3, r2
 8009230:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <get_fat+0xe8>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	091b      	lsrs	r3, r3, #4
 8009240:	e002      	b.n	8009248 <get_fat+0xee>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009248:	617b      	str	r3, [r7, #20]
			break;
 800924a:	e055      	b.n	80092f8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	899b      	ldrh	r3, [r3, #12]
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	b29b      	uxth	r3, r3
 8009258:	4619      	mov	r1, r3
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009260:	4413      	add	r3, r2
 8009262:	4619      	mov	r1, r3
 8009264:	6938      	ldr	r0, [r7, #16]
 8009266:	f7ff febb 	bl	8008fe0 <move_window>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d140      	bne.n	80092f2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	8992      	ldrh	r2, [r2, #12]
 800927e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009282:	fb02 f200 	mul.w	r2, r2, r0
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	440b      	add	r3, r1
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff fbf8 	bl	8008a80 <ld_word>
 8009290:	4603      	mov	r3, r0
 8009292:	617b      	str	r3, [r7, #20]
			break;
 8009294:	e030      	b.n	80092f8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	899b      	ldrh	r3, [r3, #12]
 800929e:	089b      	lsrs	r3, r3, #2
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80092aa:	4413      	add	r3, r2
 80092ac:	4619      	mov	r1, r3
 80092ae:	6938      	ldr	r0, [r7, #16]
 80092b0:	f7ff fe96 	bl	8008fe0 <move_window>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d11d      	bne.n	80092f6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	8992      	ldrh	r2, [r2, #12]
 80092c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80092cc:	fb02 f200 	mul.w	r2, r2, r0
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	440b      	add	r3, r1
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff fbeb 	bl	8008ab0 <ld_dword>
 80092da:	4603      	mov	r3, r0
 80092dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092e0:	617b      	str	r3, [r7, #20]
			break;
 80092e2:	e009      	b.n	80092f8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80092e4:	2301      	movs	r3, #1
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	e006      	b.n	80092f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092ea:	bf00      	nop
 80092ec:	e004      	b.n	80092f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092ee:	bf00      	nop
 80092f0:	e002      	b.n	80092f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092f2:	bf00      	nop
 80092f4:	e000      	b.n	80092f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80092f6:	bf00      	nop
		}
	}

	return val;
 80092f8:	697b      	ldr	r3, [r7, #20]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009302:	b590      	push	{r4, r7, lr}
 8009304:	b089      	sub	sp, #36	; 0x24
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800930e:	2302      	movs	r3, #2
 8009310:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b01      	cmp	r3, #1
 8009316:	f240 8102 	bls.w	800951e <put_fat+0x21c>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	429a      	cmp	r2, r3
 8009322:	f080 80fc 	bcs.w	800951e <put_fat+0x21c>
		switch (fs->fs_type) {
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b03      	cmp	r3, #3
 800932c:	f000 80b6 	beq.w	800949c <put_fat+0x19a>
 8009330:	2b03      	cmp	r3, #3
 8009332:	f300 80fd 	bgt.w	8009530 <put_fat+0x22e>
 8009336:	2b01      	cmp	r3, #1
 8009338:	d003      	beq.n	8009342 <put_fat+0x40>
 800933a:	2b02      	cmp	r3, #2
 800933c:	f000 8083 	beq.w	8009446 <put_fat+0x144>
 8009340:	e0f6      	b.n	8009530 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	61bb      	str	r3, [r7, #24]
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	085b      	lsrs	r3, r3, #1
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	4413      	add	r3, r2
 800934e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	899b      	ldrh	r3, [r3, #12]
 8009358:	4619      	mov	r1, r3
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009360:	4413      	add	r3, r2
 8009362:	4619      	mov	r1, r3
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff fe3b 	bl	8008fe0 <move_window>
 800936a:	4603      	mov	r3, r0
 800936c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800936e:	7ffb      	ldrb	r3, [r7, #31]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f040 80d6 	bne.w	8009522 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	61ba      	str	r2, [r7, #24]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	8992      	ldrh	r2, [r2, #12]
 8009386:	fbb3 f0f2 	udiv	r0, r3, r2
 800938a:	fb02 f200 	mul.w	r2, r2, r0
 800938e:	1a9b      	subs	r3, r3, r2
 8009390:	440b      	add	r3, r1
 8009392:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00d      	beq.n	80093ba <put_fat+0xb8>
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	b25b      	sxtb	r3, r3
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	b25a      	sxtb	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	b25b      	sxtb	r3, r3
 80093b2:	4313      	orrs	r3, r2
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	e001      	b.n	80093be <put_fat+0xbc>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	899b      	ldrh	r3, [r3, #12]
 80093d0:	4619      	mov	r1, r3
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80093d8:	4413      	add	r3, r2
 80093da:	4619      	mov	r1, r3
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff fdff 	bl	8008fe0 <move_window>
 80093e2:	4603      	mov	r3, r0
 80093e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093e6:	7ffb      	ldrb	r3, [r7, #31]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f040 809c 	bne.w	8009526 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	899b      	ldrh	r3, [r3, #12]
 80093f8:	461a      	mov	r2, r3
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8009400:	fb02 f200 	mul.w	r2, r2, r0
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	440b      	add	r3, r1
 8009408:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <put_fat+0x11a>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	091b      	lsrs	r3, r3, #4
 8009418:	b2db      	uxtb	r3, r3
 800941a:	e00e      	b.n	800943a <put_fat+0x138>
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	b25b      	sxtb	r3, r3
 8009422:	f023 030f 	bic.w	r3, r3, #15
 8009426:	b25a      	sxtb	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	0a1b      	lsrs	r3, r3, #8
 800942c:	b25b      	sxtb	r3, r3
 800942e:	f003 030f 	and.w	r3, r3, #15
 8009432:	b25b      	sxtb	r3, r3
 8009434:	4313      	orrs	r3, r2
 8009436:	b25b      	sxtb	r3, r3
 8009438:	b2db      	uxtb	r3, r3
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	70da      	strb	r2, [r3, #3]
			break;
 8009444:	e074      	b.n	8009530 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	899b      	ldrh	r3, [r3, #12]
 800944e:	085b      	lsrs	r3, r3, #1
 8009450:	b29b      	uxth	r3, r3
 8009452:	4619      	mov	r1, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	fbb3 f3f1 	udiv	r3, r3, r1
 800945a:	4413      	add	r3, r2
 800945c:	4619      	mov	r1, r3
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f7ff fdbe 	bl	8008fe0 <move_window>
 8009464:	4603      	mov	r3, r0
 8009466:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009468:	7ffb      	ldrb	r3, [r7, #31]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d15d      	bne.n	800952a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	8992      	ldrh	r2, [r2, #12]
 800947c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009480:	fb02 f200 	mul.w	r2, r2, r0
 8009484:	1a9b      	subs	r3, r3, r2
 8009486:	440b      	add	r3, r1
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	b292      	uxth	r2, r2
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fb31 	bl	8008af6 <st_word>
			fs->wflag = 1;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2201      	movs	r2, #1
 8009498:	70da      	strb	r2, [r3, #3]
			break;
 800949a:	e049      	b.n	8009530 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	899b      	ldrh	r3, [r3, #12]
 80094a4:	089b      	lsrs	r3, r3, #2
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	4619      	mov	r1, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80094b0:	4413      	add	r3, r2
 80094b2:	4619      	mov	r1, r3
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7ff fd93 	bl	8008fe0 <move_window>
 80094ba:	4603      	mov	r3, r0
 80094bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094be:	7ffb      	ldrb	r3, [r7, #31]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d134      	bne.n	800952e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	8992      	ldrh	r2, [r2, #12]
 80094d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80094dc:	fb02 f200 	mul.w	r2, r2, r0
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	440b      	add	r3, r1
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fae3 	bl	8008ab0 <ld_dword>
 80094ea:	4603      	mov	r3, r0
 80094ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80094f0:	4323      	orrs	r3, r4
 80094f2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	8992      	ldrh	r2, [r2, #12]
 8009502:	fbb3 f0f2 	udiv	r0, r3, r2
 8009506:	fb02 f200 	mul.w	r2, r2, r0
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	440b      	add	r3, r1
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff fb0b 	bl	8008b2c <st_dword>
			fs->wflag = 1;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2201      	movs	r2, #1
 800951a:	70da      	strb	r2, [r3, #3]
			break;
 800951c:	e008      	b.n	8009530 <put_fat+0x22e>
		}
	}
 800951e:	bf00      	nop
 8009520:	e006      	b.n	8009530 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009522:	bf00      	nop
 8009524:	e004      	b.n	8009530 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009526:	bf00      	nop
 8009528:	e002      	b.n	8009530 <put_fat+0x22e>
			if (res != FR_OK) break;
 800952a:	bf00      	nop
 800952c:	e000      	b.n	8009530 <put_fat+0x22e>
			if (res != FR_OK) break;
 800952e:	bf00      	nop
	return res;
 8009530:	7ffb      	ldrb	r3, [r7, #31]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3724      	adds	r7, #36	; 0x24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd90      	pop	{r4, r7, pc}

0800953a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b088      	sub	sp, #32
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d904      	bls.n	8009560 <remove_chain+0x26>
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	429a      	cmp	r2, r3
 800955e:	d301      	bcc.n	8009564 <remove_chain+0x2a>
 8009560:	2302      	movs	r3, #2
 8009562:	e04b      	b.n	80095fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00c      	beq.n	8009584 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800956a:	f04f 32ff 	mov.w	r2, #4294967295
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	69b8      	ldr	r0, [r7, #24]
 8009572:	f7ff fec6 	bl	8009302 <put_fat>
 8009576:	4603      	mov	r3, r0
 8009578:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800957a:	7ffb      	ldrb	r3, [r7, #31]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <remove_chain+0x4a>
 8009580:	7ffb      	ldrb	r3, [r7, #31]
 8009582:	e03b      	b.n	80095fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fde7 	bl	800915a <get_fat>
 800958c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d031      	beq.n	80095f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d101      	bne.n	800959e <remove_chain+0x64>
 800959a:	2302      	movs	r3, #2
 800959c:	e02e      	b.n	80095fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a4:	d101      	bne.n	80095aa <remove_chain+0x70>
 80095a6:	2301      	movs	r3, #1
 80095a8:	e028      	b.n	80095fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80095aa:	2200      	movs	r2, #0
 80095ac:	68b9      	ldr	r1, [r7, #8]
 80095ae:	69b8      	ldr	r0, [r7, #24]
 80095b0:	f7ff fea7 	bl	8009302 <put_fat>
 80095b4:	4603      	mov	r3, r0
 80095b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80095b8:	7ffb      	ldrb	r3, [r7, #31]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <remove_chain+0x88>
 80095be:	7ffb      	ldrb	r3, [r7, #31]
 80095c0:	e01c      	b.n	80095fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	695a      	ldr	r2, [r3, #20]
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	3b02      	subs	r3, #2
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d20b      	bcs.n	80095e8 <remove_chain+0xae>
			fs->free_clst++;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	791b      	ldrb	r3, [r3, #4]
 80095de:	f043 0301 	orr.w	r3, r3, #1
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d3c6      	bcc.n	8009584 <remove_chain+0x4a>
 80095f6:	e000      	b.n	80095fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80095f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3720      	adds	r7, #32
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10d      	bne.n	8009636 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <create_chain+0x2c>
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	429a      	cmp	r2, r3
 800962e:	d31b      	bcc.n	8009668 <create_chain+0x64>
 8009630:	2301      	movs	r3, #1
 8009632:	61bb      	str	r3, [r7, #24]
 8009634:	e018      	b.n	8009668 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff fd8e 	bl	800915a <get_fat>
 800963e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d801      	bhi.n	800964a <create_chain+0x46>
 8009646:	2301      	movs	r3, #1
 8009648:	e070      	b.n	800972c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d101      	bne.n	8009656 <create_chain+0x52>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	e06a      	b.n	800972c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	429a      	cmp	r2, r3
 800965e:	d201      	bcs.n	8009664 <create_chain+0x60>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	e063      	b.n	800972c <create_chain+0x128>
		scl = clst;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	3301      	adds	r3, #1
 8009670:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	69fa      	ldr	r2, [r7, #28]
 8009678:	429a      	cmp	r2, r3
 800967a:	d307      	bcc.n	800968c <create_chain+0x88>
				ncl = 2;
 800967c:	2302      	movs	r3, #2
 800967e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009680:	69fa      	ldr	r2, [r7, #28]
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	429a      	cmp	r2, r3
 8009686:	d901      	bls.n	800968c <create_chain+0x88>
 8009688:	2300      	movs	r3, #0
 800968a:	e04f      	b.n	800972c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800968c:	69f9      	ldr	r1, [r7, #28]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff fd63 	bl	800915a <get_fat>
 8009694:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00e      	beq.n	80096ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d003      	beq.n	80096aa <create_chain+0xa6>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a8:	d101      	bne.n	80096ae <create_chain+0xaa>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	e03e      	b.n	800972c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80096ae:	69fa      	ldr	r2, [r7, #28]
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d1da      	bne.n	800966c <create_chain+0x68>
 80096b6:	2300      	movs	r3, #0
 80096b8:	e038      	b.n	800972c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80096ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80096bc:	f04f 32ff 	mov.w	r2, #4294967295
 80096c0:	69f9      	ldr	r1, [r7, #28]
 80096c2:	6938      	ldr	r0, [r7, #16]
 80096c4:	f7ff fe1d 	bl	8009302 <put_fat>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d109      	bne.n	80096e6 <create_chain+0xe2>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d006      	beq.n	80096e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80096d8:	69fa      	ldr	r2, [r7, #28]
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6938      	ldr	r0, [r7, #16]
 80096de:	f7ff fe10 	bl	8009302 <put_fat>
 80096e2:	4603      	mov	r3, r0
 80096e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d116      	bne.n	800971a <create_chain+0x116>
		fs->last_clst = ncl;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	695a      	ldr	r2, [r3, #20]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	3b02      	subs	r3, #2
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d804      	bhi.n	800970a <create_chain+0x106>
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	1e5a      	subs	r2, r3, #1
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	791b      	ldrb	r3, [r3, #4]
 800970e:	f043 0301 	orr.w	r3, r3, #1
 8009712:	b2da      	uxtb	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	711a      	strb	r2, [r3, #4]
 8009718:	e007      	b.n	800972a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d102      	bne.n	8009726 <create_chain+0x122>
 8009720:	f04f 33ff 	mov.w	r3, #4294967295
 8009724:	e000      	b.n	8009728 <create_chain+0x124>
 8009726:	2301      	movs	r3, #1
 8009728:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800972a:	69fb      	ldr	r3, [r7, #28]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3720      	adds	r7, #32
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	3304      	adds	r3, #4
 800974a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	899b      	ldrh	r3, [r3, #12]
 8009750:	461a      	mov	r2, r3
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	fbb3 f3f2 	udiv	r3, r3, r2
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	8952      	ldrh	r2, [r2, #10]
 800975c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009760:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	613a      	str	r2, [r7, #16]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <clmt_clust+0x42>
 8009772:	2300      	movs	r3, #0
 8009774:	e010      	b.n	8009798 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	429a      	cmp	r2, r3
 800977c:	d307      	bcc.n	800978e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	3304      	adds	r3, #4
 800978a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800978c:	e7e9      	b.n	8009762 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800978e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	4413      	add	r3, r2
}
 8009798:	4618      	mov	r0, r3
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ba:	d204      	bcs.n	80097c6 <dir_sdi+0x22>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	f003 031f 	and.w	r3, r3, #31
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <dir_sdi+0x26>
		return FR_INT_ERR;
 80097c6:	2302      	movs	r3, #2
 80097c8:	e071      	b.n	80098ae <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d106      	bne.n	80097ea <dir_sdi+0x46>
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d902      	bls.n	80097ea <dir_sdi+0x46>
		clst = fs->dirbase;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10c      	bne.n	800980a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	095b      	lsrs	r3, r3, #5
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	8912      	ldrh	r2, [r2, #8]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d301      	bcc.n	8009800 <dir_sdi+0x5c>
 80097fc:	2302      	movs	r3, #2
 80097fe:	e056      	b.n	80098ae <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	61da      	str	r2, [r3, #28]
 8009808:	e02d      	b.n	8009866 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	895b      	ldrh	r3, [r3, #10]
 800980e:	461a      	mov	r2, r3
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	899b      	ldrh	r3, [r3, #12]
 8009814:	fb03 f302 	mul.w	r3, r3, r2
 8009818:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800981a:	e019      	b.n	8009850 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6979      	ldr	r1, [r7, #20]
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff fc9a 	bl	800915a <get_fat>
 8009826:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982e:	d101      	bne.n	8009834 <dir_sdi+0x90>
 8009830:	2301      	movs	r3, #1
 8009832:	e03c      	b.n	80098ae <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d904      	bls.n	8009844 <dir_sdi+0xa0>
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	429a      	cmp	r2, r3
 8009842:	d301      	bcc.n	8009848 <dir_sdi+0xa4>
 8009844:	2302      	movs	r3, #2
 8009846:	e032      	b.n	80098ae <dir_sdi+0x10a>
			ofs -= csz;
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	429a      	cmp	r2, r3
 8009856:	d2e1      	bcs.n	800981c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009858:	6979      	ldr	r1, [r7, #20]
 800985a:	6938      	ldr	r0, [r7, #16]
 800985c:	f7ff fc5e 	bl	800911c <clust2sect>
 8009860:	4602      	mov	r2, r0
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <dir_sdi+0xd4>
 8009874:	2302      	movs	r3, #2
 8009876:	e01a      	b.n	80098ae <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	69da      	ldr	r2, [r3, #28]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	899b      	ldrh	r3, [r3, #12]
 8009880:	4619      	mov	r1, r3
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	fbb3 f3f1 	udiv	r3, r3, r1
 8009888:	441a      	add	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	899b      	ldrh	r3, [r3, #12]
 8009898:	461a      	mov	r2, r3
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	fbb3 f0f2 	udiv	r0, r3, r2
 80098a0:	fb02 f200 	mul.w	r2, r2, r0
 80098a4:	1a9b      	subs	r3, r3, r2
 80098a6:	18ca      	adds	r2, r1, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b086      	sub	sp, #24
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	3320      	adds	r3, #32
 80098cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <dir_next+0x28>
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098dc:	d301      	bcc.n	80098e2 <dir_next+0x2c>
 80098de:	2304      	movs	r3, #4
 80098e0:	e0bb      	b.n	8009a5a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	899b      	ldrh	r3, [r3, #12]
 80098e6:	461a      	mov	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80098ee:	fb02 f201 	mul.w	r2, r2, r1
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f040 809d 	bne.w	8009a34 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10b      	bne.n	8009924 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	095b      	lsrs	r3, r3, #5
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	8912      	ldrh	r2, [r2, #8]
 8009914:	4293      	cmp	r3, r2
 8009916:	f0c0 808d 	bcc.w	8009a34 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	61da      	str	r2, [r3, #28]
 8009920:	2304      	movs	r3, #4
 8009922:	e09a      	b.n	8009a5a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	899b      	ldrh	r3, [r3, #12]
 8009928:	461a      	mov	r2, r3
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	8952      	ldrh	r2, [r2, #10]
 8009934:	3a01      	subs	r2, #1
 8009936:	4013      	ands	r3, r2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d17b      	bne.n	8009a34 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	4619      	mov	r1, r3
 8009944:	4610      	mov	r0, r2
 8009946:	f7ff fc08 	bl	800915a <get_fat>
 800994a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d801      	bhi.n	8009956 <dir_next+0xa0>
 8009952:	2302      	movs	r3, #2
 8009954:	e081      	b.n	8009a5a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995c:	d101      	bne.n	8009962 <dir_next+0xac>
 800995e:	2301      	movs	r3, #1
 8009960:	e07b      	b.n	8009a5a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	429a      	cmp	r2, r3
 800996a:	d359      	bcc.n	8009a20 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d104      	bne.n	800997c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	61da      	str	r2, [r3, #28]
 8009978:	2304      	movs	r3, #4
 800997a:	e06e      	b.n	8009a5a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f7ff fe3d 	bl	8009604 <create_chain>
 800998a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <dir_next+0xe0>
 8009992:	2307      	movs	r3, #7
 8009994:	e061      	b.n	8009a5a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d101      	bne.n	80099a0 <dir_next+0xea>
 800999c:	2302      	movs	r3, #2
 800999e:	e05c      	b.n	8009a5a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a6:	d101      	bne.n	80099ac <dir_next+0xf6>
 80099a8:	2301      	movs	r3, #1
 80099aa:	e056      	b.n	8009a5a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7ff fad3 	bl	8008f58 <sync_window>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <dir_next+0x106>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e04e      	b.n	8009a5a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	899b      	ldrh	r3, [r3, #12]
 80099c6:	461a      	mov	r2, r3
 80099c8:	2100      	movs	r1, #0
 80099ca:	f7ff f8fc 	bl	8008bc6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099ce:	2300      	movs	r3, #0
 80099d0:	613b      	str	r3, [r7, #16]
 80099d2:	6979      	ldr	r1, [r7, #20]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff fba1 	bl	800911c <clust2sect>
 80099da:	4602      	mov	r2, r0
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	631a      	str	r2, [r3, #48]	; 0x30
 80099e0:	e012      	b.n	8009a08 <dir_next+0x152>
						fs->wflag = 1;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f7ff fab5 	bl	8008f58 <sync_window>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <dir_next+0x142>
 80099f4:	2301      	movs	r3, #1
 80099f6:	e030      	b.n	8009a5a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	3301      	adds	r3, #1
 80099fc:	613b      	str	r3, [r7, #16]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a02:	1c5a      	adds	r2, r3, #1
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	631a      	str	r2, [r3, #48]	; 0x30
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	895b      	ldrh	r3, [r3, #10]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d3e6      	bcc.n	80099e2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	1ad2      	subs	r2, r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009a26:	6979      	ldr	r1, [r7, #20]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff fb77 	bl	800911c <clust2sect>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	899b      	ldrh	r3, [r3, #12]
 8009a44:	461a      	mov	r2, r3
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a4c:	fb02 f200 	mul.w	r2, r2, r0
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	18ca      	adds	r2, r1, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b086      	sub	sp, #24
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009a72:	2100      	movs	r1, #0
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff fe95 	bl	80097a4 <dir_sdi>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d12b      	bne.n	8009adc <dir_alloc+0x7a>
		n = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	69db      	ldr	r3, [r3, #28]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7ff faa6 	bl	8008fe0 <move_window>
 8009a94:	4603      	mov	r3, r0
 8009a96:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d11d      	bne.n	8009ada <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2be5      	cmp	r3, #229	; 0xe5
 8009aa6:	d004      	beq.n	8009ab2 <dir_alloc+0x50>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d107      	bne.n	8009ac2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	613b      	str	r3, [r7, #16]
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d102      	bne.n	8009ac6 <dir_alloc+0x64>
 8009ac0:	e00c      	b.n	8009adc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff fef4 	bl	80098b6 <dir_next>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0d7      	beq.n	8009a88 <dir_alloc+0x26>
 8009ad8:	e000      	b.n	8009adc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009ada:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d101      	bne.n	8009ae6 <dir_alloc+0x84>
 8009ae2:	2307      	movs	r3, #7
 8009ae4:	75fb      	strb	r3, [r7, #23]
	return res;
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	331a      	adds	r3, #26
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe ffbe 	bl	8008a80 <ld_word>
 8009b04:	4603      	mov	r3, r0
 8009b06:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d109      	bne.n	8009b24 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	3314      	adds	r3, #20
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe ffb3 	bl	8008a80 <ld_word>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	041b      	lsls	r3, r3, #16
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009b24:	68fb      	ldr	r3, [r7, #12]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	331a      	adds	r3, #26
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	b292      	uxth	r2, r2
 8009b42:	4611      	mov	r1, r2
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe ffd6 	bl	8008af6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d109      	bne.n	8009b66 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f103 0214 	add.w	r2, r3, #20
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	0c1b      	lsrs	r3, r3, #16
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4610      	mov	r0, r2
 8009b62:	f7fe ffc8 	bl	8008af6 <st_word>
	}
}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff fe10 	bl	80097a4 <dir_sdi>
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <dir_find+0x24>
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	e03e      	b.n	8009c10 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6938      	ldr	r0, [r7, #16]
 8009b9a:	f7ff fa21 	bl	8008fe0 <move_window>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d12f      	bne.n	8009c08 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <dir_find+0x4e>
 8009bb6:	2304      	movs	r3, #4
 8009bb8:	75fb      	strb	r3, [r7, #23]
 8009bba:	e028      	b.n	8009c0e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	330b      	adds	r3, #11
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	330b      	adds	r3, #11
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	f003 0308 	and.w	r3, r3, #8
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10a      	bne.n	8009bf4 <dir_find+0x86>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a18      	ldr	r0, [r3, #32]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3324      	adds	r3, #36	; 0x24
 8009be6:	220b      	movs	r2, #11
 8009be8:	4619      	mov	r1, r3
 8009bea:	f7ff f807 	bl	8008bfc <mem_cmp>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00b      	beq.n	8009c0c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff fe5d 	bl	80098b6 <dir_next>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0c5      	beq.n	8009b92 <dir_find+0x24>
 8009c06:	e002      	b.n	8009c0e <dir_find+0xa0>
		if (res != FR_OK) break;
 8009c08:	bf00      	nop
 8009c0a:	e000      	b.n	8009c0e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c0c:	bf00      	nop

	return res;
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009c26:	2101      	movs	r1, #1
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff ff1a 	bl	8009a62 <dir_alloc>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d11c      	bne.n	8009c72 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	68b8      	ldr	r0, [r7, #8]
 8009c40:	f7ff f9ce 	bl	8008fe0 <move_window>
 8009c44:	4603      	mov	r3, r0
 8009c46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d111      	bne.n	8009c72 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	2220      	movs	r2, #32
 8009c54:	2100      	movs	r1, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe ffb5 	bl	8008bc6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a18      	ldr	r0, [r3, #32]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3324      	adds	r3, #36	; 0x24
 8009c64:	220b      	movs	r2, #11
 8009c66:	4619      	mov	r1, r3
 8009c68:	f7fe ff8c 	bl	8008b84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3324      	adds	r3, #36	; 0x24
 8009c90:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009c92:	220b      	movs	r2, #11
 8009c94:	2120      	movs	r1, #32
 8009c96:	68b8      	ldr	r0, [r7, #8]
 8009c98:	f7fe ff95 	bl	8008bc6 <mem_set>
	si = i = 0; ni = 8;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	613b      	str	r3, [r7, #16]
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	61fa      	str	r2, [r7, #28]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009cb6:	7efb      	ldrb	r3, [r7, #27]
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d94e      	bls.n	8009d5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009cbc:	7efb      	ldrb	r3, [r7, #27]
 8009cbe:	2b2f      	cmp	r3, #47	; 0x2f
 8009cc0:	d006      	beq.n	8009cd0 <create_name+0x54>
 8009cc2:	7efb      	ldrb	r3, [r7, #27]
 8009cc4:	2b5c      	cmp	r3, #92	; 0x5c
 8009cc6:	d110      	bne.n	8009cea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009cc8:	e002      	b.n	8009cd0 <create_name+0x54>
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	61fb      	str	r3, [r7, #28]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b2f      	cmp	r3, #47	; 0x2f
 8009cda:	d0f6      	beq.n	8009cca <create_name+0x4e>
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ce6:	d0f0      	beq.n	8009cca <create_name+0x4e>
			break;
 8009ce8:	e038      	b.n	8009d5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009cea:	7efb      	ldrb	r3, [r7, #27]
 8009cec:	2b2e      	cmp	r3, #46	; 0x2e
 8009cee:	d003      	beq.n	8009cf8 <create_name+0x7c>
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d30c      	bcc.n	8009d12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2b0b      	cmp	r3, #11
 8009cfc:	d002      	beq.n	8009d04 <create_name+0x88>
 8009cfe:	7efb      	ldrb	r3, [r7, #27]
 8009d00:	2b2e      	cmp	r3, #46	; 0x2e
 8009d02:	d001      	beq.n	8009d08 <create_name+0x8c>
 8009d04:	2306      	movs	r3, #6
 8009d06:	e044      	b.n	8009d92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009d08:	2308      	movs	r3, #8
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	230b      	movs	r3, #11
 8009d0e:	617b      	str	r3, [r7, #20]
			continue;
 8009d10:	e022      	b.n	8009d58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009d12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da04      	bge.n	8009d24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009d1a:	7efb      	ldrb	r3, [r7, #27]
 8009d1c:	3b80      	subs	r3, #128	; 0x80
 8009d1e:	4a1f      	ldr	r2, [pc, #124]	; (8009d9c <create_name+0x120>)
 8009d20:	5cd3      	ldrb	r3, [r2, r3]
 8009d22:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009d24:	7efb      	ldrb	r3, [r7, #27]
 8009d26:	4619      	mov	r1, r3
 8009d28:	481d      	ldr	r0, [pc, #116]	; (8009da0 <create_name+0x124>)
 8009d2a:	f7fe ff8e 	bl	8008c4a <chk_chr>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <create_name+0xbc>
 8009d34:	2306      	movs	r3, #6
 8009d36:	e02c      	b.n	8009d92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009d38:	7efb      	ldrb	r3, [r7, #27]
 8009d3a:	2b60      	cmp	r3, #96	; 0x60
 8009d3c:	d905      	bls.n	8009d4a <create_name+0xce>
 8009d3e:	7efb      	ldrb	r3, [r7, #27]
 8009d40:	2b7a      	cmp	r3, #122	; 0x7a
 8009d42:	d802      	bhi.n	8009d4a <create_name+0xce>
 8009d44:	7efb      	ldrb	r3, [r7, #27]
 8009d46:	3b20      	subs	r3, #32
 8009d48:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	613a      	str	r2, [r7, #16]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	4413      	add	r3, r2
 8009d54:	7efa      	ldrb	r2, [r7, #27]
 8009d56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009d58:	e7a6      	b.n	8009ca8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	441a      	add	r2, r3
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <create_name+0xf4>
 8009d6c:	2306      	movs	r3, #6
 8009d6e:	e010      	b.n	8009d92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2be5      	cmp	r3, #229	; 0xe5
 8009d76:	d102      	bne.n	8009d7e <create_name+0x102>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2205      	movs	r2, #5
 8009d7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d7e:	7efb      	ldrb	r3, [r7, #27]
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d801      	bhi.n	8009d88 <create_name+0x10c>
 8009d84:	2204      	movs	r2, #4
 8009d86:	e000      	b.n	8009d8a <create_name+0x10e>
 8009d88:	2200      	movs	r2, #0
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	330b      	adds	r3, #11
 8009d8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009d90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3720      	adds	r7, #32
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	0800d620 	.word	0x0800d620
 8009da0:	0800d5ac 	.word	0x0800d5ac

08009da4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009db8:	e002      	b.n	8009dc0 <follow_path+0x1c>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b2f      	cmp	r3, #47	; 0x2f
 8009dc6:	d0f8      	beq.n	8009dba <follow_path+0x16>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	2b5c      	cmp	r3, #92	; 0x5c
 8009dce:	d0f4      	beq.n	8009dba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b1f      	cmp	r3, #31
 8009ddc:	d80a      	bhi.n	8009df4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2280      	movs	r2, #128	; 0x80
 8009de2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009de6:	2100      	movs	r1, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fcdb 	bl	80097a4 <dir_sdi>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
 8009df2:	e048      	b.n	8009e86 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009df4:	463b      	mov	r3, r7
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff ff3f 	bl	8009c7c <create_name>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d139      	bne.n	8009e7c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff feb0 	bl	8009b6e <dir_find>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00a      	beq.n	8009e36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	2b04      	cmp	r3, #4
 8009e24:	d12c      	bne.n	8009e80 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d127      	bne.n	8009e80 <follow_path+0xdc>
 8009e30:	2305      	movs	r3, #5
 8009e32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009e34:	e024      	b.n	8009e80 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e36:	7afb      	ldrb	r3, [r7, #11]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d121      	bne.n	8009e84 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	799b      	ldrb	r3, [r3, #6]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009e4c:	2305      	movs	r3, #5
 8009e4e:	75fb      	strb	r3, [r7, #23]
 8009e50:	e019      	b.n	8009e86 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	8992      	ldrh	r2, [r2, #12]
 8009e60:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e64:	fb02 f200 	mul.w	r2, r2, r0
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	440b      	add	r3, r1
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fe3e 	bl	8009af0 <ld_clust>
 8009e74:	4602      	mov	r2, r0
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e7a:	e7bb      	b.n	8009df4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009e7c:	bf00      	nop
 8009e7e:	e002      	b.n	8009e86 <follow_path+0xe2>
				break;
 8009e80:	bf00      	nop
 8009e82:	e000      	b.n	8009e86 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e84:	bf00      	nop
			}
		}
	}

	return res;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009e98:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d031      	beq.n	8009f0a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	e002      	b.n	8009eb4 <get_ldnumber+0x24>
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b20      	cmp	r3, #32
 8009eba:	d903      	bls.n	8009ec4 <get_ldnumber+0x34>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b3a      	cmp	r3, #58	; 0x3a
 8009ec2:	d1f4      	bne.n	8009eae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b3a      	cmp	r3, #58	; 0x3a
 8009eca:	d11c      	bne.n	8009f06 <get_ldnumber+0x76>
			tp = *path;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	60fa      	str	r2, [r7, #12]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	3b30      	subs	r3, #48	; 0x30
 8009edc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2b09      	cmp	r3, #9
 8009ee2:	d80e      	bhi.n	8009f02 <get_ldnumber+0x72>
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d10a      	bne.n	8009f02 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d107      	bne.n	8009f02 <get_ldnumber+0x72>
					vol = (int)i;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	e002      	b.n	8009f0c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f06:	2300      	movs	r3, #0
 8009f08:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f0a:	693b      	ldr	r3, [r7, #16]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	70da      	strb	r2, [r3, #3]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff f854 	bl	8008fe0 <move_window>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <check_fs+0x2a>
 8009f3e:	2304      	movs	r3, #4
 8009f40:	e038      	b.n	8009fb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3334      	adds	r3, #52	; 0x34
 8009f46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fd98 	bl	8008a80 <ld_word>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d001      	beq.n	8009f60 <check_fs+0x48>
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e029      	b.n	8009fb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f66:	2be9      	cmp	r3, #233	; 0xe9
 8009f68:	d009      	beq.n	8009f7e <check_fs+0x66>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f70:	2beb      	cmp	r3, #235	; 0xeb
 8009f72:	d11e      	bne.n	8009fb2 <check_fs+0x9a>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009f7a:	2b90      	cmp	r3, #144	; 0x90
 8009f7c:	d119      	bne.n	8009fb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3334      	adds	r3, #52	; 0x34
 8009f82:	3336      	adds	r3, #54	; 0x36
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fd93 	bl	8008ab0 <ld_dword>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009f90:	4a0a      	ldr	r2, [pc, #40]	; (8009fbc <check_fs+0xa4>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d101      	bne.n	8009f9a <check_fs+0x82>
 8009f96:	2300      	movs	r3, #0
 8009f98:	e00c      	b.n	8009fb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3334      	adds	r3, #52	; 0x34
 8009f9e:	3352      	adds	r3, #82	; 0x52
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fe fd85 	bl	8008ab0 <ld_dword>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	4a05      	ldr	r2, [pc, #20]	; (8009fc0 <check_fs+0xa8>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d101      	bne.n	8009fb2 <check_fs+0x9a>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e000      	b.n	8009fb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009fb2:	2302      	movs	r3, #2
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	00544146 	.word	0x00544146
 8009fc0:	33544146 	.word	0x33544146

08009fc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b096      	sub	sp, #88	; 0x58
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff ff59 	bl	8009e90 <get_ldnumber>
 8009fde:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	da01      	bge.n	8009fea <find_volume+0x26>
 8009fe6:	230b      	movs	r3, #11
 8009fe8:	e265      	b.n	800a4b6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009fea:	4ab0      	ldr	r2, [pc, #704]	; (800a2ac <find_volume+0x2e8>)
 8009fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ff2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <find_volume+0x3a>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	e25b      	b.n	800a4b6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a002:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	f023 0301 	bic.w	r3, r3, #1
 800a00a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01a      	beq.n	800a04a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	785b      	ldrb	r3, [r3, #1]
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe fc93 	bl	8008944 <disk_status>
 800a01e:	4603      	mov	r3, r0
 800a020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10c      	bne.n	800a04a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d007      	beq.n	800a046 <find_volume+0x82>
 800a036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a03a:	f003 0304 	and.w	r3, r3, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a042:	230a      	movs	r3, #10
 800a044:	e237      	b.n	800a4b6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a046:	2300      	movs	r3, #0
 800a048:	e235      	b.n	800a4b6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	2200      	movs	r2, #0
 800a04e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a052:	b2da      	uxtb	r2, r3
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	785b      	ldrb	r3, [r3, #1]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fc8b 	bl	8008978 <disk_initialize>
 800a062:	4603      	mov	r3, r0
 800a064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a074:	2303      	movs	r3, #3
 800a076:	e21e      	b.n	800a4b6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <find_volume+0xca>
 800a07e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a082:	f003 0304 	and.w	r3, r3, #4
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a08a:	230a      	movs	r3, #10
 800a08c:	e213      	b.n	800a4b6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	7858      	ldrb	r0, [r3, #1]
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	330c      	adds	r3, #12
 800a096:	461a      	mov	r2, r3
 800a098:	2102      	movs	r1, #2
 800a09a:	f7fe fcd3 	bl	8008a44 <disk_ioctl>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <find_volume+0xe4>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e206      	b.n	800a4b6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	899b      	ldrh	r3, [r3, #12]
 800a0ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b0:	d80d      	bhi.n	800a0ce <find_volume+0x10a>
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	899b      	ldrh	r3, [r3, #12]
 800a0b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ba:	d308      	bcc.n	800a0ce <find_volume+0x10a>
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0be:	899b      	ldrh	r3, [r3, #12]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c4:	899b      	ldrh	r3, [r3, #12]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <find_volume+0x10e>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e1f1      	b.n	800a4b6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a0d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0da:	f7ff ff1d 	bl	8009f18 <check_fs>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d14b      	bne.n	800a184 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	643b      	str	r3, [r7, #64]	; 0x40
 800a0f0:	e01f      	b.n	800a132 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a0f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a100:	4413      	add	r3, r2
 800a102:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a106:	3304      	adds	r3, #4
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d006      	beq.n	800a11c <find_volume+0x158>
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	3308      	adds	r3, #8
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fccc 	bl	8008ab0 <ld_dword>
 800a118:	4602      	mov	r2, r0
 800a11a:	e000      	b.n	800a11e <find_volume+0x15a>
 800a11c:	2200      	movs	r2, #0
 800a11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a126:	440b      	add	r3, r1
 800a128:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a12e:	3301      	adds	r3, #1
 800a130:	643b      	str	r3, [r7, #64]	; 0x40
 800a132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a134:	2b03      	cmp	r3, #3
 800a136:	d9dc      	bls.n	800a0f2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a138:	2300      	movs	r3, #0
 800a13a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <find_volume+0x184>
 800a142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a144:	3b01      	subs	r3, #1
 800a146:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a150:	4413      	add	r3, r2
 800a152:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a156:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <find_volume+0x1a6>
 800a15e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a160:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a162:	f7ff fed9 	bl	8009f18 <check_fs>
 800a166:	4603      	mov	r3, r0
 800a168:	e000      	b.n	800a16c <find_volume+0x1a8>
 800a16a:	2303      	movs	r3, #3
 800a16c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a174:	2b01      	cmp	r3, #1
 800a176:	d905      	bls.n	800a184 <find_volume+0x1c0>
 800a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17a:	3301      	adds	r3, #1
 800a17c:	643b      	str	r3, [r7, #64]	; 0x40
 800a17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a180:	2b03      	cmp	r3, #3
 800a182:	d9e1      	bls.n	800a148 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a188:	2b04      	cmp	r3, #4
 800a18a:	d101      	bne.n	800a190 <find_volume+0x1cc>
 800a18c:	2301      	movs	r3, #1
 800a18e:	e192      	b.n	800a4b6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a194:	2b01      	cmp	r3, #1
 800a196:	d901      	bls.n	800a19c <find_volume+0x1d8>
 800a198:	230d      	movs	r3, #13
 800a19a:	e18c      	b.n	800a4b6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	3334      	adds	r3, #52	; 0x34
 800a1a0:	330b      	adds	r3, #11
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fc6c 	bl	8008a80 <ld_word>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	899b      	ldrh	r3, [r3, #12]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d001      	beq.n	800a1b8 <find_volume+0x1f4>
 800a1b4:	230d      	movs	r3, #13
 800a1b6:	e17e      	b.n	800a4b6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	3334      	adds	r3, #52	; 0x34
 800a1bc:	3316      	adds	r3, #22
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe fc5e 	bl	8008a80 <ld_word>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d106      	bne.n	800a1dc <find_volume+0x218>
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	3334      	adds	r3, #52	; 0x34
 800a1d2:	3324      	adds	r3, #36	; 0x24
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fe fc6b 	bl	8008ab0 <ld_dword>
 800a1da:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1e0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	789b      	ldrb	r3, [r3, #2]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d005      	beq.n	800a200 <find_volume+0x23c>
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	789b      	ldrb	r3, [r3, #2]
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d001      	beq.n	800a200 <find_volume+0x23c>
 800a1fc:	230d      	movs	r3, #13
 800a1fe:	e15a      	b.n	800a4b6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	789b      	ldrb	r3, [r3, #2]
 800a204:	461a      	mov	r2, r3
 800a206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a208:	fb02 f303 	mul.w	r3, r2, r3
 800a20c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a214:	b29a      	uxth	r2, r3
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	895b      	ldrh	r3, [r3, #10]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d008      	beq.n	800a234 <find_volume+0x270>
 800a222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a224:	895b      	ldrh	r3, [r3, #10]
 800a226:	461a      	mov	r2, r3
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	895b      	ldrh	r3, [r3, #10]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	4013      	ands	r3, r2
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <find_volume+0x274>
 800a234:	230d      	movs	r3, #13
 800a236:	e13e      	b.n	800a4b6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	3334      	adds	r3, #52	; 0x34
 800a23c:	3311      	adds	r3, #17
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe fc1e 	bl	8008a80 <ld_word>
 800a244:	4603      	mov	r3, r0
 800a246:	461a      	mov	r2, r3
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	891b      	ldrh	r3, [r3, #8]
 800a250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a252:	8992      	ldrh	r2, [r2, #12]
 800a254:	0952      	lsrs	r2, r2, #5
 800a256:	b292      	uxth	r2, r2
 800a258:	fbb3 f1f2 	udiv	r1, r3, r2
 800a25c:	fb02 f201 	mul.w	r2, r2, r1
 800a260:	1a9b      	subs	r3, r3, r2
 800a262:	b29b      	uxth	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d001      	beq.n	800a26c <find_volume+0x2a8>
 800a268:	230d      	movs	r3, #13
 800a26a:	e124      	b.n	800a4b6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26e:	3334      	adds	r3, #52	; 0x34
 800a270:	3313      	adds	r3, #19
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe fc04 	bl	8008a80 <ld_word>
 800a278:	4603      	mov	r3, r0
 800a27a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a27c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d106      	bne.n	800a290 <find_volume+0x2cc>
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	3334      	adds	r3, #52	; 0x34
 800a286:	3320      	adds	r3, #32
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe fc11 	bl	8008ab0 <ld_dword>
 800a28e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	3334      	adds	r3, #52	; 0x34
 800a294:	330e      	adds	r3, #14
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fbf2 	bl	8008a80 <ld_word>
 800a29c:	4603      	mov	r3, r0
 800a29e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a2a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d104      	bne.n	800a2b0 <find_volume+0x2ec>
 800a2a6:	230d      	movs	r3, #13
 800a2a8:	e105      	b.n	800a4b6 <find_volume+0x4f2>
 800a2aa:	bf00      	nop
 800a2ac:	200007a4 	.word	0x200007a4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a2b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2b4:	4413      	add	r3, r2
 800a2b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2b8:	8911      	ldrh	r1, [r2, #8]
 800a2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2bc:	8992      	ldrh	r2, [r2, #12]
 800a2be:	0952      	lsrs	r2, r2, #5
 800a2c0:	b292      	uxth	r2, r2
 800a2c2:	fbb1 f2f2 	udiv	r2, r1, r2
 800a2c6:	b292      	uxth	r2, r2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a2cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d201      	bcs.n	800a2d8 <find_volume+0x314>
 800a2d4:	230d      	movs	r3, #13
 800a2d6:	e0ee      	b.n	800a4b6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a2d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2e0:	8952      	ldrh	r2, [r2, #10]
 800a2e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <find_volume+0x32e>
 800a2ee:	230d      	movs	r3, #13
 800a2f0:	e0e1      	b.n	800a4b6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d802      	bhi.n	800a308 <find_volume+0x344>
 800a302:	2302      	movs	r3, #2
 800a304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a30e:	4293      	cmp	r3, r2
 800a310:	d802      	bhi.n	800a318 <find_volume+0x354>
 800a312:	2301      	movs	r3, #1
 800a314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	1c9a      	adds	r2, r3, #2
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a324:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a326:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a32a:	441a      	add	r2, r3
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a330:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	441a      	add	r2, r3
 800a336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a338:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a33a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d11e      	bne.n	800a380 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	3334      	adds	r3, #52	; 0x34
 800a346:	332a      	adds	r3, #42	; 0x2a
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe fb99 	bl	8008a80 <ld_word>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <find_volume+0x394>
 800a354:	230d      	movs	r3, #13
 800a356:	e0ae      	b.n	800a4b6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	891b      	ldrh	r3, [r3, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <find_volume+0x3a0>
 800a360:	230d      	movs	r3, #13
 800a362:	e0a8      	b.n	800a4b6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	3334      	adds	r3, #52	; 0x34
 800a368:	332c      	adds	r3, #44	; 0x2c
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe fba0 	bl	8008ab0 <ld_dword>
 800a370:	4602      	mov	r2, r0
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	647b      	str	r3, [r7, #68]	; 0x44
 800a37e:	e01f      	b.n	800a3c0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	891b      	ldrh	r3, [r3, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <find_volume+0x3c8>
 800a388:	230d      	movs	r3, #13
 800a38a:	e094      	b.n	800a4b6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a392:	441a      	add	r2, r3
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d103      	bne.n	800a3a8 <find_volume+0x3e4>
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	e00a      	b.n	800a3be <find_volume+0x3fa>
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	699a      	ldr	r2, [r3, #24]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	005b      	lsls	r3, r3, #1
 800a3b0:	4413      	add	r3, r2
 800a3b2:	085a      	lsrs	r2, r3, #1
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a3be:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	899b      	ldrh	r3, [r3, #12]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3cc:	440b      	add	r3, r1
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3d2:	8989      	ldrh	r1, [r1, #12]
 800a3d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d201      	bcs.n	800a3e0 <find_volume+0x41c>
 800a3dc:	230d      	movs	r3, #13
 800a3de:	e06a      	b.n	800a4b6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	615a      	str	r2, [r3, #20]
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ea:	695a      	ldr	r2, [r3, #20]
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	2280      	movs	r2, #128	; 0x80
 800a3f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a3f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d149      	bne.n	800a492 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	3334      	adds	r3, #52	; 0x34
 800a402:	3330      	adds	r3, #48	; 0x30
 800a404:	4618      	mov	r0, r3
 800a406:	f7fe fb3b 	bl	8008a80 <ld_word>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d140      	bne.n	800a492 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a412:	3301      	adds	r3, #1
 800a414:	4619      	mov	r1, r3
 800a416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a418:	f7fe fde2 	bl	8008fe0 <move_window>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d137      	bne.n	800a492 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	2200      	movs	r2, #0
 800a426:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	3334      	adds	r3, #52	; 0x34
 800a42c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a430:	4618      	mov	r0, r3
 800a432:	f7fe fb25 	bl	8008a80 <ld_word>
 800a436:	4603      	mov	r3, r0
 800a438:	461a      	mov	r2, r3
 800a43a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a43e:	429a      	cmp	r2, r3
 800a440:	d127      	bne.n	800a492 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	3334      	adds	r3, #52	; 0x34
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fb32 	bl	8008ab0 <ld_dword>
 800a44c:	4603      	mov	r3, r0
 800a44e:	4a1c      	ldr	r2, [pc, #112]	; (800a4c0 <find_volume+0x4fc>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d11e      	bne.n	800a492 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	3334      	adds	r3, #52	; 0x34
 800a458:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fb27 	bl	8008ab0 <ld_dword>
 800a462:	4603      	mov	r3, r0
 800a464:	4a17      	ldr	r2, [pc, #92]	; (800a4c4 <find_volume+0x500>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d113      	bne.n	800a492 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	3334      	adds	r3, #52	; 0x34
 800a46e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fb1c 	bl	8008ab0 <ld_dword>
 800a478:	4602      	mov	r2, r0
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	3334      	adds	r3, #52	; 0x34
 800a482:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fb12 	bl	8008ab0 <ld_dword>
 800a48c:	4602      	mov	r2, r0
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a498:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a49a:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <find_volume+0x504>)
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <find_volume+0x504>)
 800a4a4:	801a      	strh	r2, [r3, #0]
 800a4a6:	4b08      	ldr	r3, [pc, #32]	; (800a4c8 <find_volume+0x504>)
 800a4a8:	881a      	ldrh	r2, [r3, #0]
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a4ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4b0:	f7fe fd2e 	bl	8008f10 <clear_lock>
#endif
	return FR_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3758      	adds	r7, #88	; 0x58
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	41615252 	.word	0x41615252
 800a4c4:	61417272 	.word	0x61417272
 800a4c8:	200007a8 	.word	0x200007a8

0800a4cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a4d6:	2309      	movs	r3, #9
 800a4d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01c      	beq.n	800a51a <validate+0x4e>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d018      	beq.n	800a51a <validate+0x4e>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d013      	beq.n	800a51a <validate+0x4e>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	889a      	ldrh	r2, [r3, #4]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	88db      	ldrh	r3, [r3, #6]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d10c      	bne.n	800a51a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	785b      	ldrb	r3, [r3, #1]
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe fa1c 	bl	8008944 <disk_status>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <validate+0x4e>
			res = FR_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d102      	bne.n	800a526 <validate+0x5a>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	e000      	b.n	800a528 <validate+0x5c>
 800a526:	2300      	movs	r3, #0
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	6013      	str	r3, [r2, #0]
	return res;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	4613      	mov	r3, r2
 800a544:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a54a:	f107 0310 	add.w	r3, r7, #16
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff fc9e 	bl	8009e90 <get_ldnumber>
 800a554:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	da01      	bge.n	800a560 <f_mount+0x28>
 800a55c:	230b      	movs	r3, #11
 800a55e:	e02b      	b.n	800a5b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a560:	4a17      	ldr	r2, [pc, #92]	; (800a5c0 <f_mount+0x88>)
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a568:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a570:	69b8      	ldr	r0, [r7, #24]
 800a572:	f7fe fccd 	bl	8008f10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	2200      	movs	r2, #0
 800a57a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	490d      	ldr	r1, [pc, #52]	; (800a5c0 <f_mount+0x88>)
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <f_mount+0x66>
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d001      	beq.n	800a5a2 <f_mount+0x6a>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e00a      	b.n	800a5b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a5a2:	f107 010c 	add.w	r1, r7, #12
 800a5a6:	f107 0308 	add.w	r3, r7, #8
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff fd09 	bl	8009fc4 <find_volume>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3720      	adds	r7, #32
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	200007a4 	.word	0x200007a4

0800a5c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b098      	sub	sp, #96	; 0x60
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <f_open+0x18>
 800a5d8:	2309      	movs	r3, #9
 800a5da:	e1bb      	b.n	800a954 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a5e4:	79fa      	ldrb	r2, [r7, #7]
 800a5e6:	f107 0110 	add.w	r1, r7, #16
 800a5ea:	f107 0308 	add.w	r3, r7, #8
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff fce8 	bl	8009fc4 <find_volume>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a5fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f040 819f 	bne.w	800a942 <f_open+0x37e>
		dj.obj.fs = fs;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	f107 0314 	add.w	r3, r7, #20
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff fbc7 	bl	8009da4 <follow_path>
 800a616:	4603      	mov	r3, r0
 800a618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a620:	2b00      	cmp	r3, #0
 800a622:	d11a      	bne.n	800a65a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a624:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a628:	b25b      	sxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	da03      	bge.n	800a636 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a62e:	2306      	movs	r3, #6
 800a630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a634:	e011      	b.n	800a65a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a636:	79fb      	ldrb	r3, [r7, #7]
 800a638:	f023 0301 	bic.w	r3, r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bf14      	ite	ne
 800a640:	2301      	movne	r3, #1
 800a642:	2300      	moveq	r3, #0
 800a644:	b2db      	uxtb	r3, r3
 800a646:	461a      	mov	r2, r3
 800a648:	f107 0314 	add.w	r3, r7, #20
 800a64c:	4611      	mov	r1, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe fb16 	bl	8008c80 <chk_lock>
 800a654:	4603      	mov	r3, r0
 800a656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	f003 031c 	and.w	r3, r3, #28
 800a660:	2b00      	cmp	r3, #0
 800a662:	d07f      	beq.n	800a764 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d017      	beq.n	800a69c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a66c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a670:	2b04      	cmp	r3, #4
 800a672:	d10e      	bne.n	800a692 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a674:	f7fe fb60 	bl	8008d38 <enq_lock>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d006      	beq.n	800a68c <f_open+0xc8>
 800a67e:	f107 0314 	add.w	r3, r7, #20
 800a682:	4618      	mov	r0, r3
 800a684:	f7ff fac8 	bl	8009c18 <dir_register>
 800a688:	4603      	mov	r3, r0
 800a68a:	e000      	b.n	800a68e <f_open+0xca>
 800a68c:	2312      	movs	r3, #18
 800a68e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a692:	79fb      	ldrb	r3, [r7, #7]
 800a694:	f043 0308 	orr.w	r3, r3, #8
 800a698:	71fb      	strb	r3, [r7, #7]
 800a69a:	e010      	b.n	800a6be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a69c:	7ebb      	ldrb	r3, [r7, #26]
 800a69e:	f003 0311 	and.w	r3, r3, #17
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <f_open+0xea>
					res = FR_DENIED;
 800a6a6:	2307      	movs	r3, #7
 800a6a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a6ac:	e007      	b.n	800a6be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a6ae:	79fb      	ldrb	r3, [r7, #7]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <f_open+0xfa>
 800a6b8:	2308      	movs	r3, #8
 800a6ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a6be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d168      	bne.n	800a798 <f_open+0x1d4>
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	f003 0308 	and.w	r3, r3, #8
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d063      	beq.n	800a798 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a6d0:	f7fb f93c 	bl	800594c <get_fattime>
 800a6d4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d8:	330e      	adds	r3, #14
 800a6da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe fa25 	bl	8008b2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	3316      	adds	r3, #22
 800a6e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe fa1f 	bl	8008b2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	330b      	adds	r3, #11
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff f9f7 	bl	8009af0 <ld_clust>
 800a702:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a708:	2200      	movs	r2, #0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7ff fa0f 	bl	8009b2e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a712:	331c      	adds	r3, #28
 800a714:	2100      	movs	r1, #0
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fa08 	bl	8008b2c <st_dword>
					fs->wflag = 1;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	2201      	movs	r2, #1
 800a720:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d037      	beq.n	800a798 <f_open+0x1d4>
						dw = fs->winsect;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a72e:	f107 0314 	add.w	r3, r7, #20
 800a732:	2200      	movs	r2, #0
 800a734:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe feff 	bl	800953a <remove_chain>
 800a73c:	4603      	mov	r3, r0
 800a73e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a746:	2b00      	cmp	r3, #0
 800a748:	d126      	bne.n	800a798 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe fc46 	bl	8008fe0 <move_window>
 800a754:	4603      	mov	r3, r0
 800a756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a75e:	3a01      	subs	r2, #1
 800a760:	611a      	str	r2, [r3, #16]
 800a762:	e019      	b.n	800a798 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a764:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d115      	bne.n	800a798 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a76c:	7ebb      	ldrb	r3, [r7, #26]
 800a76e:	f003 0310 	and.w	r3, r3, #16
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a776:	2304      	movs	r3, #4
 800a778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a77c:	e00c      	b.n	800a798 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	f003 0302 	and.w	r3, r3, #2
 800a784:	2b00      	cmp	r3, #0
 800a786:	d007      	beq.n	800a798 <f_open+0x1d4>
 800a788:	7ebb      	ldrb	r3, [r7, #26]
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <f_open+0x1d4>
						res = FR_DENIED;
 800a792:	2307      	movs	r3, #7
 800a794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d128      	bne.n	800a7f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a7a0:	79fb      	ldrb	r3, [r7, #7]
 800a7a2:	f003 0308 	and.w	r3, r3, #8
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	f023 0301 	bic.w	r3, r3, #1
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	bf14      	ite	ne
 800a7ca:	2301      	movne	r3, #1
 800a7cc:	2300      	moveq	r3, #0
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	f107 0314 	add.w	r3, r7, #20
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe facf 	bl	8008d7c <inc_lock>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <f_open+0x22e>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a7f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f040 80a3 	bne.w	800a942 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a800:	4611      	mov	r1, r2
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff f974 	bl	8009af0 <ld_clust>
 800a808:	4602      	mov	r2, r0
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a810:	331c      	adds	r3, #28
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe f94c 	bl	8008ab0 <ld_dword>
 800a818:	4602      	mov	r2, r0
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	88da      	ldrh	r2, [r3, #6]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	79fa      	ldrb	r2, [r7, #7]
 800a836:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3330      	adds	r3, #48	; 0x30
 800a84e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a852:	2100      	movs	r1, #0
 800a854:	4618      	mov	r0, r3
 800a856:	f7fe f9b6 	bl	8008bc6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	f003 0320 	and.w	r3, r3, #32
 800a860:	2b00      	cmp	r3, #0
 800a862:	d06e      	beq.n	800a942 <f_open+0x37e>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d06a      	beq.n	800a942 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68da      	ldr	r2, [r3, #12]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	895b      	ldrh	r3, [r3, #10]
 800a878:	461a      	mov	r2, r3
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	899b      	ldrh	r3, [r3, #12]
 800a87e:	fb03 f302 	mul.w	r3, r3, r2
 800a882:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	657b      	str	r3, [r7, #84]	; 0x54
 800a890:	e016      	b.n	800a8c0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe fc5f 	bl	800915a <get_fat>
 800a89c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a89e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d802      	bhi.n	800a8aa <f_open+0x2e6>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a8aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b0:	d102      	bne.n	800a8b8 <f_open+0x2f4>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	657b      	str	r3, [r7, #84]	; 0x54
 800a8c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d103      	bne.n	800a8d0 <f_open+0x30c>
 800a8c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d8e0      	bhi.n	800a892 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d131      	bne.n	800a942 <f_open+0x37e>
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	899b      	ldrh	r3, [r3, #12]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8ea:	fb02 f201 	mul.w	r2, r2, r1
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d026      	beq.n	800a942 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fe fc0f 	bl	800911c <clust2sect>
 800a8fe:	6478      	str	r0, [r7, #68]	; 0x44
 800a900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a902:	2b00      	cmp	r3, #0
 800a904:	d103      	bne.n	800a90e <f_open+0x34a>
						res = FR_INT_ERR;
 800a906:	2302      	movs	r3, #2
 800a908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a90c:	e019      	b.n	800a942 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	899b      	ldrh	r3, [r3, #12]
 800a912:	461a      	mov	r2, r3
 800a914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a916:	fbb3 f2f2 	udiv	r2, r3, r2
 800a91a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a91c:	441a      	add	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	7858      	ldrb	r0, [r3, #1]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6a1a      	ldr	r2, [r3, #32]
 800a930:	2301      	movs	r3, #1
 800a932:	f7fe f847 	bl	80089c4 <disk_read>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <f_open+0x37e>
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a942:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a946:	2b00      	cmp	r3, #0
 800a948:	d002      	beq.n	800a950 <f_open+0x38c>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a954:	4618      	mov	r0, r3
 800a956:	3760      	adds	r7, #96	; 0x60
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08e      	sub	sp, #56	; 0x38
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f107 0214 	add.w	r2, r7, #20
 800a97a:	4611      	mov	r1, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fda5 	bl	800a4cc <validate>
 800a982:	4603      	mov	r3, r0
 800a984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d107      	bne.n	800a9a0 <f_read+0x44>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	7d5b      	ldrb	r3, [r3, #21]
 800a994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <f_read+0x4a>
 800a9a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9a4:	e135      	b.n	800ac12 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	7d1b      	ldrb	r3, [r3, #20]
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <f_read+0x5a>
 800a9b2:	2307      	movs	r3, #7
 800a9b4:	e12d      	b.n	800ac12 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68da      	ldr	r2, [r3, #12]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	f240 811e 	bls.w	800ac08 <f_read+0x2ac>
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a9d0:	e11a      	b.n	800ac08 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	8992      	ldrh	r2, [r2, #12]
 800a9da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9de:	fb02 f201 	mul.w	r2, r2, r1
 800a9e2:	1a9b      	subs	r3, r3, r2
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f040 80d5 	bne.w	800ab94 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	8992      	ldrh	r2, [r2, #12]
 800a9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	8952      	ldrh	r2, [r2, #10]
 800a9fa:	3a01      	subs	r2, #1
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d12f      	bne.n	800aa66 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d103      	bne.n	800aa16 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	633b      	str	r3, [r7, #48]	; 0x30
 800aa14:	e013      	b.n	800aa3e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d007      	beq.n	800aa2e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	4619      	mov	r1, r3
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f7fe fe85 	bl	8009734 <clmt_clust>
 800aa2a:	6338      	str	r0, [r7, #48]	; 0x30
 800aa2c:	e007      	b.n	800aa3e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f7fe fb8f 	bl	800915a <get_fat>
 800aa3c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d804      	bhi.n	800aa4e <f_read+0xf2>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2202      	movs	r2, #2
 800aa48:	755a      	strb	r2, [r3, #21]
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	e0e1      	b.n	800ac12 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa54:	d104      	bne.n	800aa60 <f_read+0x104>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	755a      	strb	r2, [r3, #21]
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e0d8      	b.n	800ac12 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4610      	mov	r0, r2
 800aa70:	f7fe fb54 	bl	800911c <clust2sect>
 800aa74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d104      	bne.n	800aa86 <f_read+0x12a>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	755a      	strb	r2, [r3, #21]
 800aa82:	2302      	movs	r3, #2
 800aa84:	e0c5      	b.n	800ac12 <f_read+0x2b6>
			sect += csect;
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	899b      	ldrh	r3, [r3, #12]
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d041      	beq.n	800ab26 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	4413      	add	r3, r2
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	8952      	ldrh	r2, [r2, #10]
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d905      	bls.n	800aabc <f_read+0x160>
					cc = fs->csize - csect;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	895b      	ldrh	r3, [r3, #10]
 800aab4:	461a      	mov	r2, r3
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	7858      	ldrb	r0, [r3, #1]
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aac6:	f7fd ff7d 	bl	80089c4 <disk_read>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d004      	beq.n	800aada <f_read+0x17e>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2201      	movs	r2, #1
 800aad4:	755a      	strb	r2, [r3, #21]
 800aad6:	2301      	movs	r3, #1
 800aad8:	e09b      	b.n	800ac12 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	7d1b      	ldrb	r3, [r3, #20]
 800aade:	b25b      	sxtb	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da18      	bge.n	800ab16 <f_read+0x1ba>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6a1a      	ldr	r2, [r3, #32]
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d911      	bls.n	800ab16 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6a1a      	ldr	r2, [r3, #32]
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	8992      	ldrh	r2, [r2, #12]
 800aafe:	fb02 f303 	mul.w	r3, r2, r3
 800ab02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab04:	18d0      	adds	r0, r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	899b      	ldrh	r3, [r3, #12]
 800ab10:	461a      	mov	r2, r3
 800ab12:	f7fe f837 	bl	8008b84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	899b      	ldrh	r3, [r3, #12]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	fb02 f303 	mul.w	r3, r2, r3
 800ab22:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ab24:	e05c      	b.n	800abe0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	69ba      	ldr	r2, [r7, #24]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d02e      	beq.n	800ab8e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	7d1b      	ldrb	r3, [r3, #20]
 800ab34:	b25b      	sxtb	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	da18      	bge.n	800ab6c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	7858      	ldrb	r0, [r3, #1]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6a1a      	ldr	r2, [r3, #32]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f7fd ff5b 	bl	8008a04 <disk_write>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d004      	beq.n	800ab5e <f_read+0x202>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2201      	movs	r2, #1
 800ab58:	755a      	strb	r2, [r3, #21]
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e059      	b.n	800ac12 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	7d1b      	ldrb	r3, [r3, #20]
 800ab62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab66:	b2da      	uxtb	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	7858      	ldrb	r0, [r3, #1]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab76:	2301      	movs	r3, #1
 800ab78:	69ba      	ldr	r2, [r7, #24]
 800ab7a:	f7fd ff23 	bl	80089c4 <disk_read>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <f_read+0x232>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2201      	movs	r2, #1
 800ab88:	755a      	strb	r2, [r3, #21]
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e041      	b.n	800ac12 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	899b      	ldrh	r3, [r3, #12]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	8992      	ldrh	r2, [r2, #12]
 800aba2:	fbb3 f1f2 	udiv	r1, r3, r2
 800aba6:	fb02 f201 	mul.w	r2, r2, r1
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	1ac3      	subs	r3, r0, r3
 800abae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800abb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d901      	bls.n	800abbc <f_read+0x260>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	8992      	ldrh	r2, [r2, #12]
 800abca:	fbb3 f0f2 	udiv	r0, r3, r2
 800abce:	fb02 f200 	mul.w	r2, r2, r0
 800abd2:	1a9b      	subs	r3, r3, r2
 800abd4:	440b      	add	r3, r1
 800abd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abd8:	4619      	mov	r1, r3
 800abda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abdc:	f7fd ffd2 	bl	8008b84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800abe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	4413      	add	r3, r2
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	699a      	ldr	r2, [r3, #24]
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	441a      	add	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	619a      	str	r2, [r3, #24]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfa:	441a      	add	r2, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f47f aee1 	bne.w	800a9d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3738      	adds	r7, #56	; 0x38
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b08c      	sub	sp, #48	; 0x30
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	607a      	str	r2, [r7, #4]
 800ac26:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f107 0210 	add.w	r2, r7, #16
 800ac38:	4611      	mov	r1, r2
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff fc46 	bl	800a4cc <validate>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d107      	bne.n	800ac5e <f_write+0x44>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	7d5b      	ldrb	r3, [r3, #21]
 800ac52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <f_write+0x4a>
 800ac5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac62:	e16a      	b.n	800af3a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	7d1b      	ldrb	r3, [r3, #20]
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d101      	bne.n	800ac74 <f_write+0x5a>
 800ac70:	2307      	movs	r3, #7
 800ac72:	e162      	b.n	800af3a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	699a      	ldr	r2, [r3, #24]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	441a      	add	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	f080 814c 	bcs.w	800af1e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	43db      	mvns	r3, r3
 800ac8c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ac8e:	e146      	b.n	800af1e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	8992      	ldrh	r2, [r2, #12]
 800ac98:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac9c:	fb02 f201 	mul.w	r2, r2, r1
 800aca0:	1a9b      	subs	r3, r3, r2
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f040 80f1 	bne.w	800ae8a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	8992      	ldrh	r2, [r2, #12]
 800acb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	8952      	ldrh	r2, [r2, #10]
 800acb8:	3a01      	subs	r2, #1
 800acba:	4013      	ands	r3, r2
 800acbc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d143      	bne.n	800ad4c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10c      	bne.n	800ace6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d11a      	bne.n	800ad0e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2100      	movs	r1, #0
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fe fc91 	bl	8009604 <create_chain>
 800ace2:	62b8      	str	r0, [r7, #40]	; 0x28
 800ace4:	e013      	b.n	800ad0e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d007      	beq.n	800acfe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	4619      	mov	r1, r3
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7fe fd1d 	bl	8009734 <clmt_clust>
 800acfa:	62b8      	str	r0, [r7, #40]	; 0x28
 800acfc:	e007      	b.n	800ad0e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	69db      	ldr	r3, [r3, #28]
 800ad04:	4619      	mov	r1, r3
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7fe fc7c 	bl	8009604 <create_chain>
 800ad0c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 8109 	beq.w	800af28 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d104      	bne.n	800ad26 <f_write+0x10c>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	755a      	strb	r2, [r3, #21]
 800ad22:	2302      	movs	r3, #2
 800ad24:	e109      	b.n	800af3a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2c:	d104      	bne.n	800ad38 <f_write+0x11e>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2201      	movs	r2, #1
 800ad32:	755a      	strb	r2, [r3, #21]
 800ad34:	2301      	movs	r3, #1
 800ad36:	e100      	b.n	800af3a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad3c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <f_write+0x132>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad4a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	7d1b      	ldrb	r3, [r3, #20]
 800ad50:	b25b      	sxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	da18      	bge.n	800ad88 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	7858      	ldrb	r0, [r3, #1]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6a1a      	ldr	r2, [r3, #32]
 800ad64:	2301      	movs	r3, #1
 800ad66:	f7fd fe4d 	bl	8008a04 <disk_write>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <f_write+0x160>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2201      	movs	r2, #1
 800ad74:	755a      	strb	r2, [r3, #21]
 800ad76:	2301      	movs	r3, #1
 800ad78:	e0df      	b.n	800af3a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	7d1b      	ldrb	r3, [r3, #20]
 800ad7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	4610      	mov	r0, r2
 800ad92:	f7fe f9c3 	bl	800911c <clust2sect>
 800ad96:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d104      	bne.n	800ada8 <f_write+0x18e>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2202      	movs	r2, #2
 800ada2:	755a      	strb	r2, [r3, #21]
 800ada4:	2302      	movs	r3, #2
 800ada6:	e0c8      	b.n	800af3a <f_write+0x320>
			sect += csect;
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	4413      	add	r3, r2
 800adae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	899b      	ldrh	r3, [r3, #12]
 800adb4:	461a      	mov	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adbc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800adbe:	6a3b      	ldr	r3, [r7, #32]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d043      	beq.n	800ae4c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800adc4:	69ba      	ldr	r2, [r7, #24]
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	4413      	add	r3, r2
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	8952      	ldrh	r2, [r2, #10]
 800adce:	4293      	cmp	r3, r2
 800add0:	d905      	bls.n	800adde <f_write+0x1c4>
					cc = fs->csize - csect;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	895b      	ldrh	r3, [r3, #10]
 800add6:	461a      	mov	r2, r3
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	7858      	ldrb	r0, [r3, #1]
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	69f9      	ldr	r1, [r7, #28]
 800ade8:	f7fd fe0c 	bl	8008a04 <disk_write>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d004      	beq.n	800adfc <f_write+0x1e2>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	755a      	strb	r2, [r3, #21]
 800adf8:	2301      	movs	r3, #1
 800adfa:	e09e      	b.n	800af3a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a1a      	ldr	r2, [r3, #32]
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	6a3a      	ldr	r2, [r7, #32]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d918      	bls.n	800ae3c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6a1a      	ldr	r2, [r3, #32]
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	8992      	ldrh	r2, [r2, #12]
 800ae1c:	fb02 f303 	mul.w	r3, r2, r3
 800ae20:	69fa      	ldr	r2, [r7, #28]
 800ae22:	18d1      	adds	r1, r2, r3
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	899b      	ldrh	r3, [r3, #12]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	f7fd feab 	bl	8008b84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	7d1b      	ldrb	r3, [r3, #20]
 800ae32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	899b      	ldrh	r3, [r3, #12]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	fb02 f303 	mul.w	r3, r2, r3
 800ae48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae4a:	e04b      	b.n	800aee4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d016      	beq.n	800ae84 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	699a      	ldr	r2, [r3, #24]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d210      	bcs.n	800ae84 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	7858      	ldrb	r0, [r3, #1]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	f7fd fda8 	bl	80089c4 <disk_read>
 800ae74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	755a      	strb	r2, [r3, #21]
 800ae80:	2301      	movs	r3, #1
 800ae82:	e05a      	b.n	800af3a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	899b      	ldrh	r3, [r3, #12]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	8992      	ldrh	r2, [r2, #12]
 800ae98:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae9c:	fb02 f201 	mul.w	r2, r2, r1
 800aea0:	1a9b      	subs	r3, r3, r2
 800aea2:	1ac3      	subs	r3, r0, r3
 800aea4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d901      	bls.n	800aeb2 <f_write+0x298>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	8992      	ldrh	r2, [r2, #12]
 800aec0:	fbb3 f0f2 	udiv	r0, r3, r2
 800aec4:	fb02 f200 	mul.w	r2, r2, r0
 800aec8:	1a9b      	subs	r3, r3, r2
 800aeca:	440b      	add	r3, r1
 800aecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aece:	69f9      	ldr	r1, [r7, #28]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fd fe57 	bl	8008b84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	7d1b      	ldrb	r3, [r3, #20]
 800aeda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aee4:	69fa      	ldr	r2, [r7, #28]
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	4413      	add	r3, r2
 800aeea:	61fb      	str	r3, [r7, #28]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	699a      	ldr	r2, [r3, #24]
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	441a      	add	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	619a      	str	r2, [r3, #24]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	429a      	cmp	r2, r3
 800af02:	bf38      	it	cc
 800af04:	461a      	movcc	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	60da      	str	r2, [r3, #12]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	441a      	add	r2, r3
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f47f aeb5 	bne.w	800ac90 <f_write+0x76>
 800af26:	e000      	b.n	800af2a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	7d1b      	ldrb	r3, [r3, #20]
 800af2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af32:	b2da      	uxtb	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3730      	adds	r7, #48	; 0x30
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f107 0208 	add.w	r2, r7, #8
 800af50:	4611      	mov	r1, r2
 800af52:	4618      	mov	r0, r3
 800af54:	f7ff faba 	bl	800a4cc <validate>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d168      	bne.n	800b034 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	7d1b      	ldrb	r3, [r3, #20]
 800af66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d062      	beq.n	800b034 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7d1b      	ldrb	r3, [r3, #20]
 800af72:	b25b      	sxtb	r3, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	da15      	bge.n	800afa4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	7858      	ldrb	r0, [r3, #1]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a1a      	ldr	r2, [r3, #32]
 800af86:	2301      	movs	r3, #1
 800af88:	f7fd fd3c 	bl	8008a04 <disk_write>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <f_sync+0x54>
 800af92:	2301      	movs	r3, #1
 800af94:	e04f      	b.n	800b036 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	7d1b      	ldrb	r3, [r3, #20]
 800af9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800afa4:	f7fa fcd2 	bl	800594c <get_fattime>
 800afa8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	4619      	mov	r1, r3
 800afb2:	4610      	mov	r0, r2
 800afb4:	f7fe f814 	bl	8008fe0 <move_window>
 800afb8:	4603      	mov	r3, r0
 800afba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d138      	bne.n	800b034 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	330b      	adds	r3, #11
 800afcc:	781a      	ldrb	r2, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	330b      	adds	r3, #11
 800afd2:	f042 0220 	orr.w	r2, r2, #32
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	461a      	mov	r2, r3
 800afe4:	68f9      	ldr	r1, [r7, #12]
 800afe6:	f7fe fda2 	bl	8009b2e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f103 021c 	add.w	r2, r3, #28
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f7fd fd98 	bl	8008b2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3316      	adds	r3, #22
 800b000:	6939      	ldr	r1, [r7, #16]
 800b002:	4618      	mov	r0, r3
 800b004:	f7fd fd92 	bl	8008b2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3312      	adds	r3, #18
 800b00c:	2100      	movs	r1, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fd71 	bl	8008af6 <st_word>
					fs->wflag = 1;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2201      	movs	r2, #1
 800b018:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fe f80d 	bl	800903c <sync_fs>
 800b022:	4603      	mov	r3, r0
 800b024:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	7d1b      	ldrb	r3, [r3, #20]
 800b02a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b034:	7dfb      	ldrb	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff ff7b 	bl	800af42 <f_sync>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d118      	bne.n	800b088 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f107 0208 	add.w	r2, r7, #8
 800b05c:	4611      	mov	r1, r2
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff fa34 	bl	800a4cc <validate>
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10c      	bne.n	800b088 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	4618      	mov	r0, r3
 800b074:	f7fd ff10 	bl	8008e98 <dec_lock>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
	...

0800b094 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b094:	b480      	push	{r7}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b0aa:	4b1f      	ldr	r3, [pc, #124]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0ac:	7a5b      	ldrb	r3, [r3, #9]
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d131      	bne.n	800b118 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0b4:	4b1c      	ldr	r3, [pc, #112]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0b6:	7a5b      	ldrb	r3, [r3, #9]
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	4b1a      	ldr	r3, [pc, #104]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0be:	2100      	movs	r1, #0
 800b0c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b0c2:	4b19      	ldr	r3, [pc, #100]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0c4:	7a5b      	ldrb	r3, [r3, #9]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	4a17      	ldr	r2, [pc, #92]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b0d2:	4b15      	ldr	r3, [pc, #84]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0d4:	7a5b      	ldrb	r3, [r3, #9]
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4b13      	ldr	r3, [pc, #76]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0dc:	4413      	add	r3, r2
 800b0de:	79fa      	ldrb	r2, [r7, #7]
 800b0e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b0e2:	4b11      	ldr	r3, [pc, #68]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0e4:	7a5b      	ldrb	r3, [r3, #9]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	1c5a      	adds	r2, r3, #1
 800b0ea:	b2d1      	uxtb	r1, r2
 800b0ec:	4a0e      	ldr	r2, [pc, #56]	; (800b128 <FATFS_LinkDriverEx+0x94>)
 800b0ee:	7251      	strb	r1, [r2, #9]
 800b0f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b0f2:	7dbb      	ldrb	r3, [r7, #22]
 800b0f4:	3330      	adds	r3, #48	; 0x30
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	3301      	adds	r3, #1
 800b100:	223a      	movs	r2, #58	; 0x3a
 800b102:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	3302      	adds	r3, #2
 800b108:	222f      	movs	r2, #47	; 0x2f
 800b10a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	3303      	adds	r3, #3
 800b110:	2200      	movs	r2, #0
 800b112:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b114:	2300      	movs	r3, #0
 800b116:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b118:	7dfb      	ldrb	r3, [r7, #23]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	200007cc 	.word	0x200007cc

0800b12c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b136:	2200      	movs	r2, #0
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff ffaa 	bl	800b094 <FATFS_LinkDriverEx>
 800b140:	4603      	mov	r3, r0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b150:	2201      	movs	r2, #1
 800b152:	490e      	ldr	r1, [pc, #56]	; (800b18c <MX_USB_HOST_Init+0x40>)
 800b154:	480e      	ldr	r0, [pc, #56]	; (800b190 <MX_USB_HOST_Init+0x44>)
 800b156:	f7fc f89d 	bl	8007294 <USBH_Init>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b160:	f7f6 f824 	bl	80011ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b164:	490b      	ldr	r1, [pc, #44]	; (800b194 <MX_USB_HOST_Init+0x48>)
 800b166:	480a      	ldr	r0, [pc, #40]	; (800b190 <MX_USB_HOST_Init+0x44>)
 800b168:	f7fc f922 	bl	80073b0 <USBH_RegisterClass>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b172:	f7f6 f81b 	bl	80011ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b176:	4806      	ldr	r0, [pc, #24]	; (800b190 <MX_USB_HOST_Init+0x44>)
 800b178:	f7fc f9a6 	bl	80074c8 <USBH_Start>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b182:	f7f6 f813 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b186:	bf00      	nop
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	0800b1ad 	.word	0x0800b1ad
 800b190:	20003888 	.word	0x20003888
 800b194:	2000000c 	.word	0x2000000c

0800b198 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b19c:	4802      	ldr	r0, [pc, #8]	; (800b1a8 <MX_USB_HOST_Process+0x10>)
 800b19e:	f7fc f9a3 	bl	80074e8 <USBH_Process>
}
 800b1a2:	bf00      	nop
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20003888 	.word	0x20003888

0800b1ac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d819      	bhi.n	800b1f4 <USBH_UserProcess+0x48>
 800b1c0:	a201      	add	r2, pc, #4	; (adr r2, 800b1c8 <USBH_UserProcess+0x1c>)
 800b1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c6:	bf00      	nop
 800b1c8:	0800b1f5 	.word	0x0800b1f5
 800b1cc:	0800b1e5 	.word	0x0800b1e5
 800b1d0:	0800b1f5 	.word	0x0800b1f5
 800b1d4:	0800b1ed 	.word	0x0800b1ed
 800b1d8:	0800b1dd 	.word	0x0800b1dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b1dc:	4b09      	ldr	r3, [pc, #36]	; (800b204 <USBH_UserProcess+0x58>)
 800b1de:	2203      	movs	r2, #3
 800b1e0:	701a      	strb	r2, [r3, #0]
  break;
 800b1e2:	e008      	b.n	800b1f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b1e4:	4b07      	ldr	r3, [pc, #28]	; (800b204 <USBH_UserProcess+0x58>)
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	701a      	strb	r2, [r3, #0]
  break;
 800b1ea:	e004      	b.n	800b1f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b1ec:	4b05      	ldr	r3, [pc, #20]	; (800b204 <USBH_UserProcess+0x58>)
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	701a      	strb	r2, [r3, #0]
  break;
 800b1f2:	e000      	b.n	800b1f6 <USBH_UserProcess+0x4a>

  default:
  break;
 800b1f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b1f6:	bf00      	nop
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	200007d8 	.word	0x200007d8

0800b208 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08a      	sub	sp, #40	; 0x28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b210:	f107 0314 	add.w	r3, r7, #20
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	605a      	str	r2, [r3, #4]
 800b21a:	609a      	str	r2, [r3, #8]
 800b21c:	60da      	str	r2, [r3, #12]
 800b21e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b228:	d147      	bne.n	800b2ba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b22a:	2300      	movs	r3, #0
 800b22c:	613b      	str	r3, [r7, #16]
 800b22e:	4b25      	ldr	r3, [pc, #148]	; (800b2c4 <HAL_HCD_MspInit+0xbc>)
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	4a24      	ldr	r2, [pc, #144]	; (800b2c4 <HAL_HCD_MspInit+0xbc>)
 800b234:	f043 0301 	orr.w	r3, r3, #1
 800b238:	6313      	str	r3, [r2, #48]	; 0x30
 800b23a:	4b22      	ldr	r3, [pc, #136]	; (800b2c4 <HAL_HCD_MspInit+0xbc>)
 800b23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23e:	f003 0301 	and.w	r3, r3, #1
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b24a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b24c:	2300      	movs	r3, #0
 800b24e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b250:	2300      	movs	r3, #0
 800b252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b254:	f107 0314 	add.w	r3, r7, #20
 800b258:	4619      	mov	r1, r3
 800b25a:	481b      	ldr	r0, [pc, #108]	; (800b2c8 <HAL_HCD_MspInit+0xc0>)
 800b25c:	f7f7 f82e 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b260:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b266:	2302      	movs	r3, #2
 800b268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b26a:	2300      	movs	r3, #0
 800b26c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b26e:	2300      	movs	r3, #0
 800b270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b272:	230a      	movs	r3, #10
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b276:	f107 0314 	add.w	r3, r7, #20
 800b27a:	4619      	mov	r1, r3
 800b27c:	4812      	ldr	r0, [pc, #72]	; (800b2c8 <HAL_HCD_MspInit+0xc0>)
 800b27e:	f7f7 f81d 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b282:	4b10      	ldr	r3, [pc, #64]	; (800b2c4 <HAL_HCD_MspInit+0xbc>)
 800b284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b286:	4a0f      	ldr	r2, [pc, #60]	; (800b2c4 <HAL_HCD_MspInit+0xbc>)
 800b288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b28c:	6353      	str	r3, [r2, #52]	; 0x34
 800b28e:	2300      	movs	r3, #0
 800b290:	60fb      	str	r3, [r7, #12]
 800b292:	4b0c      	ldr	r3, [pc, #48]	; (800b2c4 <HAL_HCD_MspInit+0xbc>)
 800b294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b296:	4a0b      	ldr	r2, [pc, #44]	; (800b2c4 <HAL_HCD_MspInit+0xbc>)
 800b298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b29c:	6453      	str	r3, [r2, #68]	; 0x44
 800b29e:	4b09      	ldr	r3, [pc, #36]	; (800b2c4 <HAL_HCD_MspInit+0xbc>)
 800b2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	2043      	movs	r0, #67	; 0x43
 800b2b0:	f7f6 ffcd 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b2b4:	2043      	movs	r0, #67	; 0x43
 800b2b6:	f7f6 ffe6 	bl	8002286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b2ba:	bf00      	nop
 800b2bc:	3728      	adds	r7, #40	; 0x28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	40023800 	.word	0x40023800
 800b2c8:	40020000 	.word	0x40020000

0800b2cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fc fcd7 	bl	8007c8e <USBH_LL_IncTimer>
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fc fd0f 	bl	8007d1a <USBH_LL_Connect>
}
 800b2fc:	bf00      	nop
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b312:	4618      	mov	r0, r3
 800b314:	f7fc fd18 	bl	8007d48 <USBH_LL_Disconnect>
}
 800b318:	bf00      	nop
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	460b      	mov	r3, r1
 800b32a:	70fb      	strb	r3, [r7, #3]
 800b32c:	4613      	mov	r3, r2
 800b32e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fc fcc9 	bl	8007ce2 <USBH_LL_PortEnabled>
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b366:	4618      	mov	r0, r3
 800b368:	f7fc fcc9 	bl	8007cfe <USBH_LL_PortDisabled>
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b382:	2b01      	cmp	r3, #1
 800b384:	d12a      	bne.n	800b3dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b386:	4a18      	ldr	r2, [pc, #96]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a15      	ldr	r2, [pc, #84]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b392:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b396:	4b14      	ldr	r3, [pc, #80]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b398:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b39c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b39e:	4b12      	ldr	r3, [pc, #72]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b3a0:	2208      	movs	r2, #8
 800b3a2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b3a4:	4b10      	ldr	r3, [pc, #64]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3aa:	4b0f      	ldr	r3, [pc, #60]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b3b0:	4b0d      	ldr	r3, [pc, #52]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b3b6:	4b0c      	ldr	r3, [pc, #48]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b3bc:	480a      	ldr	r0, [pc, #40]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b3be:	f7f7 f94a 	bl	8002656 <HAL_HCD_Init>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b3c8:	f7f5 fef0 	bl	80011ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b3cc:	4806      	ldr	r0, [pc, #24]	; (800b3e8 <USBH_LL_Init+0x74>)
 800b3ce:	f7f7 fd2e 	bl	8002e2e <HAL_HCD_GetCurrentFrame>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7fc fc4a 	bl	8007c70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20003c60 	.word	0x20003c60

0800b3ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b402:	4618      	mov	r0, r3
 800b404:	f7f7 fc9d 	bl	8002d42 <HAL_HCD_Start>
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 f98c 	bl	800b72c <USBH_Get_USB_Status>
 800b414:	4603      	mov	r3, r0
 800b416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b418:	7bbb      	ldrb	r3, [r7, #14]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b084      	sub	sp, #16
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b438:	4618      	mov	r0, r3
 800b43a:	f7f7 fca5 	bl	8002d88 <HAL_HCD_Stop>
 800b43e:	4603      	mov	r3, r0
 800b440:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b442:	7bfb      	ldrb	r3, [r7, #15]
 800b444:	4618      	mov	r0, r3
 800b446:	f000 f971 	bl	800b72c <USBH_Get_USB_Status>
 800b44a:	4603      	mov	r3, r0
 800b44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b460:	2301      	movs	r3, #1
 800b462:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7f7 fced 	bl	8002e4a <HAL_HCD_GetCurrentSpeed>
 800b470:	4603      	mov	r3, r0
 800b472:	2b02      	cmp	r3, #2
 800b474:	d00c      	beq.n	800b490 <USBH_LL_GetSpeed+0x38>
 800b476:	2b02      	cmp	r3, #2
 800b478:	d80d      	bhi.n	800b496 <USBH_LL_GetSpeed+0x3e>
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <USBH_LL_GetSpeed+0x2c>
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d003      	beq.n	800b48a <USBH_LL_GetSpeed+0x32>
 800b482:	e008      	b.n	800b496 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b484:	2300      	movs	r3, #0
 800b486:	73fb      	strb	r3, [r7, #15]
    break;
 800b488:	e008      	b.n	800b49c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b48a:	2301      	movs	r3, #1
 800b48c:	73fb      	strb	r3, [r7, #15]
    break;
 800b48e:	e005      	b.n	800b49c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b490:	2302      	movs	r3, #2
 800b492:	73fb      	strb	r3, [r7, #15]
    break;
 800b494:	e002      	b.n	800b49c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b496:	2301      	movs	r3, #1
 800b498:	73fb      	strb	r3, [r7, #15]
    break;
 800b49a:	bf00      	nop
  }
  return  speed;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7f7 fc80 	bl	8002dc2 <HAL_HCD_ResetPort>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 f92f 	bl	800b72c <USBH_Get_USB_Status>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4ee:	78fa      	ldrb	r2, [r7, #3]
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7f7 fc87 	bl	8002e06 <HAL_HCD_HC_GetXferCount>
 800b4f8:	4603      	mov	r3, r0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b502:	b590      	push	{r4, r7, lr}
 800b504:	b089      	sub	sp, #36	; 0x24
 800b506:	af04      	add	r7, sp, #16
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	4608      	mov	r0, r1
 800b50c:	4611      	mov	r1, r2
 800b50e:	461a      	mov	r2, r3
 800b510:	4603      	mov	r3, r0
 800b512:	70fb      	strb	r3, [r7, #3]
 800b514:	460b      	mov	r3, r1
 800b516:	70bb      	strb	r3, [r7, #2]
 800b518:	4613      	mov	r3, r2
 800b51a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b520:	2300      	movs	r3, #0
 800b522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b52a:	787c      	ldrb	r4, [r7, #1]
 800b52c:	78ba      	ldrb	r2, [r7, #2]
 800b52e:	78f9      	ldrb	r1, [r7, #3]
 800b530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b532:	9302      	str	r3, [sp, #8]
 800b534:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	4623      	mov	r3, r4
 800b542:	f7f7 f8ea 	bl	800271a <HAL_HCD_HC_Init>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 f8ed 	bl	800b72c <USBH_Get_USB_Status>
 800b552:	4603      	mov	r3, r0
 800b554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b556:	7bbb      	ldrb	r3, [r7, #14]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd90      	pop	{r4, r7, pc}

0800b560 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b57a:	78fa      	ldrb	r2, [r7, #3]
 800b57c:	4611      	mov	r1, r2
 800b57e:	4618      	mov	r0, r3
 800b580:	f7f7 f95a 	bl	8002838 <HAL_HCD_HC_Halt>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 f8ce 	bl	800b72c <USBH_Get_USB_Status>
 800b590:	4603      	mov	r3, r0
 800b592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b594:	7bbb      	ldrb	r3, [r7, #14]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b59e:	b590      	push	{r4, r7, lr}
 800b5a0:	b089      	sub	sp, #36	; 0x24
 800b5a2:	af04      	add	r7, sp, #16
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	4608      	mov	r0, r1
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	70fb      	strb	r3, [r7, #3]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70bb      	strb	r3, [r7, #2]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b5c6:	787c      	ldrb	r4, [r7, #1]
 800b5c8:	78ba      	ldrb	r2, [r7, #2]
 800b5ca:	78f9      	ldrb	r1, [r7, #3]
 800b5cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b5d0:	9303      	str	r3, [sp, #12]
 800b5d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5d4:	9302      	str	r3, [sp, #8]
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	f7f7 f94d 	bl	8002880 <HAL_HCD_HC_SubmitRequest>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 f89d 	bl	800b72c <USBH_Get_USB_Status>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd90      	pop	{r4, r7, pc}

0800b600 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	460b      	mov	r3, r1
 800b60a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b612:	78fa      	ldrb	r2, [r7, #3]
 800b614:	4611      	mov	r1, r2
 800b616:	4618      	mov	r0, r3
 800b618:	f7f7 fbe1 	bl	8002dde <HAL_HCD_HC_GetURBState>
 800b61c:	4603      	mov	r3, r0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b082      	sub	sp, #8
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	460b      	mov	r3, r1
 800b630:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d103      	bne.n	800b644 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b63c:	78fb      	ldrb	r3, [r7, #3]
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 f8a0 	bl	800b784 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b644:	20c8      	movs	r0, #200	; 0xc8
 800b646:	f7f6 fd03 	bl	8002050 <HAL_Delay>
  return USBH_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	70fb      	strb	r3, [r7, #3]
 800b660:	4613      	mov	r3, r2
 800b662:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b66a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b66c:	78fb      	ldrb	r3, [r7, #3]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	212c      	movs	r1, #44	; 0x2c
 800b672:	fb01 f303 	mul.w	r3, r1, r3
 800b676:	4413      	add	r3, r2
 800b678:	333b      	adds	r3, #59	; 0x3b
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d009      	beq.n	800b694 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	212c      	movs	r1, #44	; 0x2c
 800b686:	fb01 f303 	mul.w	r3, r1, r3
 800b68a:	4413      	add	r3, r2
 800b68c:	3354      	adds	r3, #84	; 0x54
 800b68e:	78ba      	ldrb	r2, [r7, #2]
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	e008      	b.n	800b6a6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	212c      	movs	r1, #44	; 0x2c
 800b69a:	fb01 f303 	mul.w	r3, r1, r3
 800b69e:	4413      	add	r3, r2
 800b6a0:	3355      	adds	r3, #85	; 0x55
 800b6a2:	78ba      	ldrb	r2, [r7, #2]
 800b6a4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6ca:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b6cc:	78fb      	ldrb	r3, [r7, #3]
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	212c      	movs	r1, #44	; 0x2c
 800b6d2:	fb01 f303 	mul.w	r3, r1, r3
 800b6d6:	4413      	add	r3, r2
 800b6d8:	333b      	adds	r3, #59	; 0x3b
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d009      	beq.n	800b6f4 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	212c      	movs	r1, #44	; 0x2c
 800b6e6:	fb01 f303 	mul.w	r3, r1, r3
 800b6ea:	4413      	add	r3, r2
 800b6ec:	3354      	adds	r3, #84	; 0x54
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	73fb      	strb	r3, [r7, #15]
 800b6f2:	e008      	b.n	800b706 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b6f4:	78fb      	ldrb	r3, [r7, #3]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	212c      	movs	r1, #44	; 0x2c
 800b6fa:	fb01 f303 	mul.w	r3, r1, r3
 800b6fe:	4413      	add	r3, r2
 800b700:	3355      	adds	r3, #85	; 0x55
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b706:	7bfb      	ldrb	r3, [r7, #15]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7f6 fc97 	bl	8002050 <HAL_Delay>
}
 800b722:	bf00      	nop
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b73a:	79fb      	ldrb	r3, [r7, #7]
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d817      	bhi.n	800b770 <USBH_Get_USB_Status+0x44>
 800b740:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <USBH_Get_USB_Status+0x1c>)
 800b742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b746:	bf00      	nop
 800b748:	0800b759 	.word	0x0800b759
 800b74c:	0800b75f 	.word	0x0800b75f
 800b750:	0800b765 	.word	0x0800b765
 800b754:	0800b76b 	.word	0x0800b76b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]
    break;
 800b75c:	e00b      	b.n	800b776 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b75e:	2302      	movs	r3, #2
 800b760:	73fb      	strb	r3, [r7, #15]
    break;
 800b762:	e008      	b.n	800b776 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b764:	2301      	movs	r3, #1
 800b766:	73fb      	strb	r3, [r7, #15]
    break;
 800b768:	e005      	b.n	800b776 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b76a:	2302      	movs	r3, #2
 800b76c:	73fb      	strb	r3, [r7, #15]
    break;
 800b76e:	e002      	b.n	800b776 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b770:	2302      	movs	r3, #2
 800b772:	73fb      	strb	r3, [r7, #15]
    break;
 800b774:	bf00      	nop
  }
  return usb_status;
 800b776:	7bfb      	ldrb	r3, [r7, #15]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b792:	79fb      	ldrb	r3, [r7, #7]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b798:	2300      	movs	r3, #0
 800b79a:	73fb      	strb	r3, [r7, #15]
 800b79c:	e001      	b.n	800b7a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	4803      	ldr	r0, [pc, #12]	; (800b7b8 <MX_DriverVbusFS+0x34>)
 800b7aa:	f7f6 ff3b 	bl	8002624 <HAL_GPIO_WritePin>
}
 800b7ae:	bf00      	nop
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	40020800 	.word	0x40020800

0800b7bc <__errno>:
 800b7bc:	4b01      	ldr	r3, [pc, #4]	; (800b7c4 <__errno+0x8>)
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	2000002c 	.word	0x2000002c

0800b7c8 <__libc_init_array>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	4d0d      	ldr	r5, [pc, #52]	; (800b800 <__libc_init_array+0x38>)
 800b7cc:	4c0d      	ldr	r4, [pc, #52]	; (800b804 <__libc_init_array+0x3c>)
 800b7ce:	1b64      	subs	r4, r4, r5
 800b7d0:	10a4      	asrs	r4, r4, #2
 800b7d2:	2600      	movs	r6, #0
 800b7d4:	42a6      	cmp	r6, r4
 800b7d6:	d109      	bne.n	800b7ec <__libc_init_array+0x24>
 800b7d8:	4d0b      	ldr	r5, [pc, #44]	; (800b808 <__libc_init_array+0x40>)
 800b7da:	4c0c      	ldr	r4, [pc, #48]	; (800b80c <__libc_init_array+0x44>)
 800b7dc:	f001 fa58 	bl	800cc90 <_init>
 800b7e0:	1b64      	subs	r4, r4, r5
 800b7e2:	10a4      	asrs	r4, r4, #2
 800b7e4:	2600      	movs	r6, #0
 800b7e6:	42a6      	cmp	r6, r4
 800b7e8:	d105      	bne.n	800b7f6 <__libc_init_array+0x2e>
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f0:	4798      	blx	r3
 800b7f2:	3601      	adds	r6, #1
 800b7f4:	e7ee      	b.n	800b7d4 <__libc_init_array+0xc>
 800b7f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7fa:	4798      	blx	r3
 800b7fc:	3601      	adds	r6, #1
 800b7fe:	e7f2      	b.n	800b7e6 <__libc_init_array+0x1e>
 800b800:	0800d858 	.word	0x0800d858
 800b804:	0800d858 	.word	0x0800d858
 800b808:	0800d858 	.word	0x0800d858
 800b80c:	0800d85c 	.word	0x0800d85c

0800b810 <malloc>:
 800b810:	4b02      	ldr	r3, [pc, #8]	; (800b81c <malloc+0xc>)
 800b812:	4601      	mov	r1, r0
 800b814:	6818      	ldr	r0, [r3, #0]
 800b816:	f000 b871 	b.w	800b8fc <_malloc_r>
 800b81a:	bf00      	nop
 800b81c:	2000002c 	.word	0x2000002c

0800b820 <free>:
 800b820:	4b02      	ldr	r3, [pc, #8]	; (800b82c <free+0xc>)
 800b822:	4601      	mov	r1, r0
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	f000 b819 	b.w	800b85c <_free_r>
 800b82a:	bf00      	nop
 800b82c:	2000002c 	.word	0x2000002c

0800b830 <memcpy>:
 800b830:	440a      	add	r2, r1
 800b832:	4291      	cmp	r1, r2
 800b834:	f100 33ff 	add.w	r3, r0, #4294967295
 800b838:	d100      	bne.n	800b83c <memcpy+0xc>
 800b83a:	4770      	bx	lr
 800b83c:	b510      	push	{r4, lr}
 800b83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b846:	4291      	cmp	r1, r2
 800b848:	d1f9      	bne.n	800b83e <memcpy+0xe>
 800b84a:	bd10      	pop	{r4, pc}

0800b84c <memset>:
 800b84c:	4402      	add	r2, r0
 800b84e:	4603      	mov	r3, r0
 800b850:	4293      	cmp	r3, r2
 800b852:	d100      	bne.n	800b856 <memset+0xa>
 800b854:	4770      	bx	lr
 800b856:	f803 1b01 	strb.w	r1, [r3], #1
 800b85a:	e7f9      	b.n	800b850 <memset+0x4>

0800b85c <_free_r>:
 800b85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b85e:	2900      	cmp	r1, #0
 800b860:	d048      	beq.n	800b8f4 <_free_r+0x98>
 800b862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b866:	9001      	str	r0, [sp, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f1a1 0404 	sub.w	r4, r1, #4
 800b86e:	bfb8      	it	lt
 800b870:	18e4      	addlt	r4, r4, r3
 800b872:	f000 f8fb 	bl	800ba6c <__malloc_lock>
 800b876:	4a20      	ldr	r2, [pc, #128]	; (800b8f8 <_free_r+0x9c>)
 800b878:	9801      	ldr	r0, [sp, #4]
 800b87a:	6813      	ldr	r3, [r2, #0]
 800b87c:	4615      	mov	r5, r2
 800b87e:	b933      	cbnz	r3, 800b88e <_free_r+0x32>
 800b880:	6063      	str	r3, [r4, #4]
 800b882:	6014      	str	r4, [r2, #0]
 800b884:	b003      	add	sp, #12
 800b886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b88a:	f000 b8f5 	b.w	800ba78 <__malloc_unlock>
 800b88e:	42a3      	cmp	r3, r4
 800b890:	d90b      	bls.n	800b8aa <_free_r+0x4e>
 800b892:	6821      	ldr	r1, [r4, #0]
 800b894:	1862      	adds	r2, r4, r1
 800b896:	4293      	cmp	r3, r2
 800b898:	bf04      	itt	eq
 800b89a:	681a      	ldreq	r2, [r3, #0]
 800b89c:	685b      	ldreq	r3, [r3, #4]
 800b89e:	6063      	str	r3, [r4, #4]
 800b8a0:	bf04      	itt	eq
 800b8a2:	1852      	addeq	r2, r2, r1
 800b8a4:	6022      	streq	r2, [r4, #0]
 800b8a6:	602c      	str	r4, [r5, #0]
 800b8a8:	e7ec      	b.n	800b884 <_free_r+0x28>
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	b10b      	cbz	r3, 800b8b4 <_free_r+0x58>
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d9fa      	bls.n	800b8aa <_free_r+0x4e>
 800b8b4:	6811      	ldr	r1, [r2, #0]
 800b8b6:	1855      	adds	r5, r2, r1
 800b8b8:	42a5      	cmp	r5, r4
 800b8ba:	d10b      	bne.n	800b8d4 <_free_r+0x78>
 800b8bc:	6824      	ldr	r4, [r4, #0]
 800b8be:	4421      	add	r1, r4
 800b8c0:	1854      	adds	r4, r2, r1
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	6011      	str	r1, [r2, #0]
 800b8c6:	d1dd      	bne.n	800b884 <_free_r+0x28>
 800b8c8:	681c      	ldr	r4, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	6053      	str	r3, [r2, #4]
 800b8ce:	4421      	add	r1, r4
 800b8d0:	6011      	str	r1, [r2, #0]
 800b8d2:	e7d7      	b.n	800b884 <_free_r+0x28>
 800b8d4:	d902      	bls.n	800b8dc <_free_r+0x80>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	6003      	str	r3, [r0, #0]
 800b8da:	e7d3      	b.n	800b884 <_free_r+0x28>
 800b8dc:	6825      	ldr	r5, [r4, #0]
 800b8de:	1961      	adds	r1, r4, r5
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf04      	itt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	6063      	str	r3, [r4, #4]
 800b8ea:	bf04      	itt	eq
 800b8ec:	1949      	addeq	r1, r1, r5
 800b8ee:	6021      	streq	r1, [r4, #0]
 800b8f0:	6054      	str	r4, [r2, #4]
 800b8f2:	e7c7      	b.n	800b884 <_free_r+0x28>
 800b8f4:	b003      	add	sp, #12
 800b8f6:	bd30      	pop	{r4, r5, pc}
 800b8f8:	200007dc 	.word	0x200007dc

0800b8fc <_malloc_r>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	1ccd      	adds	r5, r1, #3
 800b900:	f025 0503 	bic.w	r5, r5, #3
 800b904:	3508      	adds	r5, #8
 800b906:	2d0c      	cmp	r5, #12
 800b908:	bf38      	it	cc
 800b90a:	250c      	movcc	r5, #12
 800b90c:	2d00      	cmp	r5, #0
 800b90e:	4606      	mov	r6, r0
 800b910:	db01      	blt.n	800b916 <_malloc_r+0x1a>
 800b912:	42a9      	cmp	r1, r5
 800b914:	d903      	bls.n	800b91e <_malloc_r+0x22>
 800b916:	230c      	movs	r3, #12
 800b918:	6033      	str	r3, [r6, #0]
 800b91a:	2000      	movs	r0, #0
 800b91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b91e:	f000 f8a5 	bl	800ba6c <__malloc_lock>
 800b922:	4921      	ldr	r1, [pc, #132]	; (800b9a8 <_malloc_r+0xac>)
 800b924:	680a      	ldr	r2, [r1, #0]
 800b926:	4614      	mov	r4, r2
 800b928:	b99c      	cbnz	r4, 800b952 <_malloc_r+0x56>
 800b92a:	4f20      	ldr	r7, [pc, #128]	; (800b9ac <_malloc_r+0xb0>)
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	b923      	cbnz	r3, 800b93a <_malloc_r+0x3e>
 800b930:	4621      	mov	r1, r4
 800b932:	4630      	mov	r0, r6
 800b934:	f000 f83c 	bl	800b9b0 <_sbrk_r>
 800b938:	6038      	str	r0, [r7, #0]
 800b93a:	4629      	mov	r1, r5
 800b93c:	4630      	mov	r0, r6
 800b93e:	f000 f837 	bl	800b9b0 <_sbrk_r>
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	d123      	bne.n	800b98e <_malloc_r+0x92>
 800b946:	230c      	movs	r3, #12
 800b948:	6033      	str	r3, [r6, #0]
 800b94a:	4630      	mov	r0, r6
 800b94c:	f000 f894 	bl	800ba78 <__malloc_unlock>
 800b950:	e7e3      	b.n	800b91a <_malloc_r+0x1e>
 800b952:	6823      	ldr	r3, [r4, #0]
 800b954:	1b5b      	subs	r3, r3, r5
 800b956:	d417      	bmi.n	800b988 <_malloc_r+0x8c>
 800b958:	2b0b      	cmp	r3, #11
 800b95a:	d903      	bls.n	800b964 <_malloc_r+0x68>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	441c      	add	r4, r3
 800b960:	6025      	str	r5, [r4, #0]
 800b962:	e004      	b.n	800b96e <_malloc_r+0x72>
 800b964:	6863      	ldr	r3, [r4, #4]
 800b966:	42a2      	cmp	r2, r4
 800b968:	bf0c      	ite	eq
 800b96a:	600b      	streq	r3, [r1, #0]
 800b96c:	6053      	strne	r3, [r2, #4]
 800b96e:	4630      	mov	r0, r6
 800b970:	f000 f882 	bl	800ba78 <__malloc_unlock>
 800b974:	f104 000b 	add.w	r0, r4, #11
 800b978:	1d23      	adds	r3, r4, #4
 800b97a:	f020 0007 	bic.w	r0, r0, #7
 800b97e:	1ac2      	subs	r2, r0, r3
 800b980:	d0cc      	beq.n	800b91c <_malloc_r+0x20>
 800b982:	1a1b      	subs	r3, r3, r0
 800b984:	50a3      	str	r3, [r4, r2]
 800b986:	e7c9      	b.n	800b91c <_malloc_r+0x20>
 800b988:	4622      	mov	r2, r4
 800b98a:	6864      	ldr	r4, [r4, #4]
 800b98c:	e7cc      	b.n	800b928 <_malloc_r+0x2c>
 800b98e:	1cc4      	adds	r4, r0, #3
 800b990:	f024 0403 	bic.w	r4, r4, #3
 800b994:	42a0      	cmp	r0, r4
 800b996:	d0e3      	beq.n	800b960 <_malloc_r+0x64>
 800b998:	1a21      	subs	r1, r4, r0
 800b99a:	4630      	mov	r0, r6
 800b99c:	f000 f808 	bl	800b9b0 <_sbrk_r>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d1dd      	bne.n	800b960 <_malloc_r+0x64>
 800b9a4:	e7cf      	b.n	800b946 <_malloc_r+0x4a>
 800b9a6:	bf00      	nop
 800b9a8:	200007dc 	.word	0x200007dc
 800b9ac:	200007e0 	.word	0x200007e0

0800b9b0 <_sbrk_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d06      	ldr	r5, [pc, #24]	; (800b9cc <_sbrk_r+0x1c>)
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	602b      	str	r3, [r5, #0]
 800b9bc:	f7f6 fa64 	bl	8001e88 <_sbrk>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d102      	bne.n	800b9ca <_sbrk_r+0x1a>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	b103      	cbz	r3, 800b9ca <_sbrk_r+0x1a>
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	20003f64 	.word	0x20003f64

0800b9d0 <siprintf>:
 800b9d0:	b40e      	push	{r1, r2, r3}
 800b9d2:	b500      	push	{lr}
 800b9d4:	b09c      	sub	sp, #112	; 0x70
 800b9d6:	ab1d      	add	r3, sp, #116	; 0x74
 800b9d8:	9002      	str	r0, [sp, #8]
 800b9da:	9006      	str	r0, [sp, #24]
 800b9dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9e0:	4809      	ldr	r0, [pc, #36]	; (800ba08 <siprintf+0x38>)
 800b9e2:	9107      	str	r1, [sp, #28]
 800b9e4:	9104      	str	r1, [sp, #16]
 800b9e6:	4909      	ldr	r1, [pc, #36]	; (800ba0c <siprintf+0x3c>)
 800b9e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ec:	9105      	str	r1, [sp, #20]
 800b9ee:	6800      	ldr	r0, [r0, #0]
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	a902      	add	r1, sp, #8
 800b9f4:	f000 f8a2 	bl	800bb3c <_svfiprintf_r>
 800b9f8:	9b02      	ldr	r3, [sp, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	701a      	strb	r2, [r3, #0]
 800b9fe:	b01c      	add	sp, #112	; 0x70
 800ba00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba04:	b003      	add	sp, #12
 800ba06:	4770      	bx	lr
 800ba08:	2000002c 	.word	0x2000002c
 800ba0c:	ffff0208 	.word	0xffff0208

0800ba10 <siscanf>:
 800ba10:	b40e      	push	{r1, r2, r3}
 800ba12:	b510      	push	{r4, lr}
 800ba14:	b09f      	sub	sp, #124	; 0x7c
 800ba16:	ac21      	add	r4, sp, #132	; 0x84
 800ba18:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ba1c:	f854 2b04 	ldr.w	r2, [r4], #4
 800ba20:	9201      	str	r2, [sp, #4]
 800ba22:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ba26:	9004      	str	r0, [sp, #16]
 800ba28:	9008      	str	r0, [sp, #32]
 800ba2a:	f7f4 fbd1 	bl	80001d0 <strlen>
 800ba2e:	4b0c      	ldr	r3, [pc, #48]	; (800ba60 <siscanf+0x50>)
 800ba30:	9005      	str	r0, [sp, #20]
 800ba32:	9009      	str	r0, [sp, #36]	; 0x24
 800ba34:	930d      	str	r3, [sp, #52]	; 0x34
 800ba36:	480b      	ldr	r0, [pc, #44]	; (800ba64 <siscanf+0x54>)
 800ba38:	9a01      	ldr	r2, [sp, #4]
 800ba3a:	6800      	ldr	r0, [r0, #0]
 800ba3c:	9403      	str	r4, [sp, #12]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	9311      	str	r3, [sp, #68]	; 0x44
 800ba42:	9316      	str	r3, [sp, #88]	; 0x58
 800ba44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba48:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ba4c:	a904      	add	r1, sp, #16
 800ba4e:	4623      	mov	r3, r4
 800ba50:	f000 f9ce 	bl	800bdf0 <__ssvfiscanf_r>
 800ba54:	b01f      	add	sp, #124	; 0x7c
 800ba56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba5a:	b003      	add	sp, #12
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	0800ba69 	.word	0x0800ba69
 800ba64:	2000002c 	.word	0x2000002c

0800ba68 <__seofread>:
 800ba68:	2000      	movs	r0, #0
 800ba6a:	4770      	bx	lr

0800ba6c <__malloc_lock>:
 800ba6c:	4801      	ldr	r0, [pc, #4]	; (800ba74 <__malloc_lock+0x8>)
 800ba6e:	f000 bf8f 	b.w	800c990 <__retarget_lock_acquire_recursive>
 800ba72:	bf00      	nop
 800ba74:	20003f6c 	.word	0x20003f6c

0800ba78 <__malloc_unlock>:
 800ba78:	4801      	ldr	r0, [pc, #4]	; (800ba80 <__malloc_unlock+0x8>)
 800ba7a:	f000 bf8a 	b.w	800c992 <__retarget_lock_release_recursive>
 800ba7e:	bf00      	nop
 800ba80:	20003f6c 	.word	0x20003f6c

0800ba84 <__ssputs_r>:
 800ba84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba88:	688e      	ldr	r6, [r1, #8]
 800ba8a:	429e      	cmp	r6, r3
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	4690      	mov	r8, r2
 800ba92:	461f      	mov	r7, r3
 800ba94:	d838      	bhi.n	800bb08 <__ssputs_r+0x84>
 800ba96:	898a      	ldrh	r2, [r1, #12]
 800ba98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba9c:	d032      	beq.n	800bb04 <__ssputs_r+0x80>
 800ba9e:	6825      	ldr	r5, [r4, #0]
 800baa0:	6909      	ldr	r1, [r1, #16]
 800baa2:	eba5 0901 	sub.w	r9, r5, r1
 800baa6:	6965      	ldr	r5, [r4, #20]
 800baa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bab0:	3301      	adds	r3, #1
 800bab2:	444b      	add	r3, r9
 800bab4:	106d      	asrs	r5, r5, #1
 800bab6:	429d      	cmp	r5, r3
 800bab8:	bf38      	it	cc
 800baba:	461d      	movcc	r5, r3
 800babc:	0553      	lsls	r3, r2, #21
 800babe:	d531      	bpl.n	800bb24 <__ssputs_r+0xa0>
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7ff ff1b 	bl	800b8fc <_malloc_r>
 800bac6:	4606      	mov	r6, r0
 800bac8:	b950      	cbnz	r0, 800bae0 <__ssputs_r+0x5c>
 800baca:	230c      	movs	r3, #12
 800bacc:	f8ca 3000 	str.w	r3, [sl]
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bad6:	81a3      	strh	r3, [r4, #12]
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae0:	6921      	ldr	r1, [r4, #16]
 800bae2:	464a      	mov	r2, r9
 800bae4:	f7ff fea4 	bl	800b830 <memcpy>
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800baee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf2:	81a3      	strh	r3, [r4, #12]
 800baf4:	6126      	str	r6, [r4, #16]
 800baf6:	6165      	str	r5, [r4, #20]
 800baf8:	444e      	add	r6, r9
 800bafa:	eba5 0509 	sub.w	r5, r5, r9
 800bafe:	6026      	str	r6, [r4, #0]
 800bb00:	60a5      	str	r5, [r4, #8]
 800bb02:	463e      	mov	r6, r7
 800bb04:	42be      	cmp	r6, r7
 800bb06:	d900      	bls.n	800bb0a <__ssputs_r+0x86>
 800bb08:	463e      	mov	r6, r7
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	6820      	ldr	r0, [r4, #0]
 800bb0e:	4641      	mov	r1, r8
 800bb10:	f000 ff40 	bl	800c994 <memmove>
 800bb14:	68a3      	ldr	r3, [r4, #8]
 800bb16:	6822      	ldr	r2, [r4, #0]
 800bb18:	1b9b      	subs	r3, r3, r6
 800bb1a:	4432      	add	r2, r6
 800bb1c:	60a3      	str	r3, [r4, #8]
 800bb1e:	6022      	str	r2, [r4, #0]
 800bb20:	2000      	movs	r0, #0
 800bb22:	e7db      	b.n	800badc <__ssputs_r+0x58>
 800bb24:	462a      	mov	r2, r5
 800bb26:	f000 ff4f 	bl	800c9c8 <_realloc_r>
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d1e1      	bne.n	800baf4 <__ssputs_r+0x70>
 800bb30:	6921      	ldr	r1, [r4, #16]
 800bb32:	4650      	mov	r0, sl
 800bb34:	f7ff fe92 	bl	800b85c <_free_r>
 800bb38:	e7c7      	b.n	800baca <__ssputs_r+0x46>
	...

0800bb3c <_svfiprintf_r>:
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	4698      	mov	r8, r3
 800bb42:	898b      	ldrh	r3, [r1, #12]
 800bb44:	061b      	lsls	r3, r3, #24
 800bb46:	b09d      	sub	sp, #116	; 0x74
 800bb48:	4607      	mov	r7, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	d50e      	bpl.n	800bb6e <_svfiprintf_r+0x32>
 800bb50:	690b      	ldr	r3, [r1, #16]
 800bb52:	b963      	cbnz	r3, 800bb6e <_svfiprintf_r+0x32>
 800bb54:	2140      	movs	r1, #64	; 0x40
 800bb56:	f7ff fed1 	bl	800b8fc <_malloc_r>
 800bb5a:	6028      	str	r0, [r5, #0]
 800bb5c:	6128      	str	r0, [r5, #16]
 800bb5e:	b920      	cbnz	r0, 800bb6a <_svfiprintf_r+0x2e>
 800bb60:	230c      	movs	r3, #12
 800bb62:	603b      	str	r3, [r7, #0]
 800bb64:	f04f 30ff 	mov.w	r0, #4294967295
 800bb68:	e0d1      	b.n	800bd0e <_svfiprintf_r+0x1d2>
 800bb6a:	2340      	movs	r3, #64	; 0x40
 800bb6c:	616b      	str	r3, [r5, #20]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9309      	str	r3, [sp, #36]	; 0x24
 800bb72:	2320      	movs	r3, #32
 800bb74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb78:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb7c:	2330      	movs	r3, #48	; 0x30
 800bb7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd28 <_svfiprintf_r+0x1ec>
 800bb82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb86:	f04f 0901 	mov.w	r9, #1
 800bb8a:	4623      	mov	r3, r4
 800bb8c:	469a      	mov	sl, r3
 800bb8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb92:	b10a      	cbz	r2, 800bb98 <_svfiprintf_r+0x5c>
 800bb94:	2a25      	cmp	r2, #37	; 0x25
 800bb96:	d1f9      	bne.n	800bb8c <_svfiprintf_r+0x50>
 800bb98:	ebba 0b04 	subs.w	fp, sl, r4
 800bb9c:	d00b      	beq.n	800bbb6 <_svfiprintf_r+0x7a>
 800bb9e:	465b      	mov	r3, fp
 800bba0:	4622      	mov	r2, r4
 800bba2:	4629      	mov	r1, r5
 800bba4:	4638      	mov	r0, r7
 800bba6:	f7ff ff6d 	bl	800ba84 <__ssputs_r>
 800bbaa:	3001      	adds	r0, #1
 800bbac:	f000 80aa 	beq.w	800bd04 <_svfiprintf_r+0x1c8>
 800bbb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbb2:	445a      	add	r2, fp
 800bbb4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbb6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 80a2 	beq.w	800bd04 <_svfiprintf_r+0x1c8>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbca:	f10a 0a01 	add.w	sl, sl, #1
 800bbce:	9304      	str	r3, [sp, #16]
 800bbd0:	9307      	str	r3, [sp, #28]
 800bbd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbd6:	931a      	str	r3, [sp, #104]	; 0x68
 800bbd8:	4654      	mov	r4, sl
 800bbda:	2205      	movs	r2, #5
 800bbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe0:	4851      	ldr	r0, [pc, #324]	; (800bd28 <_svfiprintf_r+0x1ec>)
 800bbe2:	f7f4 fafd 	bl	80001e0 <memchr>
 800bbe6:	9a04      	ldr	r2, [sp, #16]
 800bbe8:	b9d8      	cbnz	r0, 800bc22 <_svfiprintf_r+0xe6>
 800bbea:	06d0      	lsls	r0, r2, #27
 800bbec:	bf44      	itt	mi
 800bbee:	2320      	movmi	r3, #32
 800bbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbf4:	0711      	lsls	r1, r2, #28
 800bbf6:	bf44      	itt	mi
 800bbf8:	232b      	movmi	r3, #43	; 0x2b
 800bbfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbfe:	f89a 3000 	ldrb.w	r3, [sl]
 800bc02:	2b2a      	cmp	r3, #42	; 0x2a
 800bc04:	d015      	beq.n	800bc32 <_svfiprintf_r+0xf6>
 800bc06:	9a07      	ldr	r2, [sp, #28]
 800bc08:	4654      	mov	r4, sl
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f04f 0c0a 	mov.w	ip, #10
 800bc10:	4621      	mov	r1, r4
 800bc12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc16:	3b30      	subs	r3, #48	; 0x30
 800bc18:	2b09      	cmp	r3, #9
 800bc1a:	d94e      	bls.n	800bcba <_svfiprintf_r+0x17e>
 800bc1c:	b1b0      	cbz	r0, 800bc4c <_svfiprintf_r+0x110>
 800bc1e:	9207      	str	r2, [sp, #28]
 800bc20:	e014      	b.n	800bc4c <_svfiprintf_r+0x110>
 800bc22:	eba0 0308 	sub.w	r3, r0, r8
 800bc26:	fa09 f303 	lsl.w	r3, r9, r3
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	46a2      	mov	sl, r4
 800bc30:	e7d2      	b.n	800bbd8 <_svfiprintf_r+0x9c>
 800bc32:	9b03      	ldr	r3, [sp, #12]
 800bc34:	1d19      	adds	r1, r3, #4
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	9103      	str	r1, [sp, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bfbb      	ittet	lt
 800bc3e:	425b      	neglt	r3, r3
 800bc40:	f042 0202 	orrlt.w	r2, r2, #2
 800bc44:	9307      	strge	r3, [sp, #28]
 800bc46:	9307      	strlt	r3, [sp, #28]
 800bc48:	bfb8      	it	lt
 800bc4a:	9204      	strlt	r2, [sp, #16]
 800bc4c:	7823      	ldrb	r3, [r4, #0]
 800bc4e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc50:	d10c      	bne.n	800bc6c <_svfiprintf_r+0x130>
 800bc52:	7863      	ldrb	r3, [r4, #1]
 800bc54:	2b2a      	cmp	r3, #42	; 0x2a
 800bc56:	d135      	bne.n	800bcc4 <_svfiprintf_r+0x188>
 800bc58:	9b03      	ldr	r3, [sp, #12]
 800bc5a:	1d1a      	adds	r2, r3, #4
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	9203      	str	r2, [sp, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	bfb8      	it	lt
 800bc64:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc68:	3402      	adds	r4, #2
 800bc6a:	9305      	str	r3, [sp, #20]
 800bc6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd38 <_svfiprintf_r+0x1fc>
 800bc70:	7821      	ldrb	r1, [r4, #0]
 800bc72:	2203      	movs	r2, #3
 800bc74:	4650      	mov	r0, sl
 800bc76:	f7f4 fab3 	bl	80001e0 <memchr>
 800bc7a:	b140      	cbz	r0, 800bc8e <_svfiprintf_r+0x152>
 800bc7c:	2340      	movs	r3, #64	; 0x40
 800bc7e:	eba0 000a 	sub.w	r0, r0, sl
 800bc82:	fa03 f000 	lsl.w	r0, r3, r0
 800bc86:	9b04      	ldr	r3, [sp, #16]
 800bc88:	4303      	orrs	r3, r0
 800bc8a:	3401      	adds	r4, #1
 800bc8c:	9304      	str	r3, [sp, #16]
 800bc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc92:	4826      	ldr	r0, [pc, #152]	; (800bd2c <_svfiprintf_r+0x1f0>)
 800bc94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc98:	2206      	movs	r2, #6
 800bc9a:	f7f4 faa1 	bl	80001e0 <memchr>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d038      	beq.n	800bd14 <_svfiprintf_r+0x1d8>
 800bca2:	4b23      	ldr	r3, [pc, #140]	; (800bd30 <_svfiprintf_r+0x1f4>)
 800bca4:	bb1b      	cbnz	r3, 800bcee <_svfiprintf_r+0x1b2>
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	3307      	adds	r3, #7
 800bcaa:	f023 0307 	bic.w	r3, r3, #7
 800bcae:	3308      	adds	r3, #8
 800bcb0:	9303      	str	r3, [sp, #12]
 800bcb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb4:	4433      	add	r3, r6
 800bcb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb8:	e767      	b.n	800bb8a <_svfiprintf_r+0x4e>
 800bcba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	e7a5      	b.n	800bc10 <_svfiprintf_r+0xd4>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	3401      	adds	r4, #1
 800bcc8:	9305      	str	r3, [sp, #20]
 800bcca:	4619      	mov	r1, r3
 800bccc:	f04f 0c0a 	mov.w	ip, #10
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd6:	3a30      	subs	r2, #48	; 0x30
 800bcd8:	2a09      	cmp	r2, #9
 800bcda:	d903      	bls.n	800bce4 <_svfiprintf_r+0x1a8>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0c5      	beq.n	800bc6c <_svfiprintf_r+0x130>
 800bce0:	9105      	str	r1, [sp, #20]
 800bce2:	e7c3      	b.n	800bc6c <_svfiprintf_r+0x130>
 800bce4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce8:	4604      	mov	r4, r0
 800bcea:	2301      	movs	r3, #1
 800bcec:	e7f0      	b.n	800bcd0 <_svfiprintf_r+0x194>
 800bcee:	ab03      	add	r3, sp, #12
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <_svfiprintf_r+0x1f8>)
 800bcf6:	a904      	add	r1, sp, #16
 800bcf8:	4638      	mov	r0, r7
 800bcfa:	f3af 8000 	nop.w
 800bcfe:	1c42      	adds	r2, r0, #1
 800bd00:	4606      	mov	r6, r0
 800bd02:	d1d6      	bne.n	800bcb2 <_svfiprintf_r+0x176>
 800bd04:	89ab      	ldrh	r3, [r5, #12]
 800bd06:	065b      	lsls	r3, r3, #25
 800bd08:	f53f af2c 	bmi.w	800bb64 <_svfiprintf_r+0x28>
 800bd0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd0e:	b01d      	add	sp, #116	; 0x74
 800bd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd14:	ab03      	add	r3, sp, #12
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	462a      	mov	r2, r5
 800bd1a:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <_svfiprintf_r+0x1f8>)
 800bd1c:	a904      	add	r1, sp, #16
 800bd1e:	4638      	mov	r0, r7
 800bd20:	f000 fa4c 	bl	800c1bc <_printf_i>
 800bd24:	e7eb      	b.n	800bcfe <_svfiprintf_r+0x1c2>
 800bd26:	bf00      	nop
 800bd28:	0800d6a0 	.word	0x0800d6a0
 800bd2c:	0800d6aa 	.word	0x0800d6aa
 800bd30:	00000000 	.word	0x00000000
 800bd34:	0800ba85 	.word	0x0800ba85
 800bd38:	0800d6a6 	.word	0x0800d6a6

0800bd3c <_sungetc_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	1c4b      	adds	r3, r1, #1
 800bd40:	4614      	mov	r4, r2
 800bd42:	d103      	bne.n	800bd4c <_sungetc_r+0x10>
 800bd44:	f04f 35ff 	mov.w	r5, #4294967295
 800bd48:	4628      	mov	r0, r5
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	8993      	ldrh	r3, [r2, #12]
 800bd4e:	f023 0320 	bic.w	r3, r3, #32
 800bd52:	8193      	strh	r3, [r2, #12]
 800bd54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd56:	6852      	ldr	r2, [r2, #4]
 800bd58:	b2cd      	uxtb	r5, r1
 800bd5a:	b18b      	cbz	r3, 800bd80 <_sungetc_r+0x44>
 800bd5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	dd08      	ble.n	800bd74 <_sungetc_r+0x38>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	1e5a      	subs	r2, r3, #1
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd6c:	6863      	ldr	r3, [r4, #4]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	6063      	str	r3, [r4, #4]
 800bd72:	e7e9      	b.n	800bd48 <_sungetc_r+0xc>
 800bd74:	4621      	mov	r1, r4
 800bd76:	f000 fdd1 	bl	800c91c <__submore>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d0f1      	beq.n	800bd62 <_sungetc_r+0x26>
 800bd7e:	e7e1      	b.n	800bd44 <_sungetc_r+0x8>
 800bd80:	6921      	ldr	r1, [r4, #16]
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	b151      	cbz	r1, 800bd9c <_sungetc_r+0x60>
 800bd86:	4299      	cmp	r1, r3
 800bd88:	d208      	bcs.n	800bd9c <_sungetc_r+0x60>
 800bd8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bd8e:	42a9      	cmp	r1, r5
 800bd90:	d104      	bne.n	800bd9c <_sungetc_r+0x60>
 800bd92:	3b01      	subs	r3, #1
 800bd94:	3201      	adds	r2, #1
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	6062      	str	r2, [r4, #4]
 800bd9a:	e7d5      	b.n	800bd48 <_sungetc_r+0xc>
 800bd9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bda0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bda4:	6363      	str	r3, [r4, #52]	; 0x34
 800bda6:	2303      	movs	r3, #3
 800bda8:	63a3      	str	r3, [r4, #56]	; 0x38
 800bdaa:	4623      	mov	r3, r4
 800bdac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e7dc      	b.n	800bd70 <_sungetc_r+0x34>

0800bdb6 <__ssrefill_r>:
 800bdb6:	b510      	push	{r4, lr}
 800bdb8:	460c      	mov	r4, r1
 800bdba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bdbc:	b169      	cbz	r1, 800bdda <__ssrefill_r+0x24>
 800bdbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdc2:	4299      	cmp	r1, r3
 800bdc4:	d001      	beq.n	800bdca <__ssrefill_r+0x14>
 800bdc6:	f7ff fd49 	bl	800b85c <_free_r>
 800bdca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdcc:	6063      	str	r3, [r4, #4]
 800bdce:	2000      	movs	r0, #0
 800bdd0:	6360      	str	r0, [r4, #52]	; 0x34
 800bdd2:	b113      	cbz	r3, 800bdda <__ssrefill_r+0x24>
 800bdd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	bd10      	pop	{r4, pc}
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	2300      	movs	r3, #0
 800bde0:	6063      	str	r3, [r4, #4]
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f043 0320 	orr.w	r3, r3, #32
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	f04f 30ff 	mov.w	r0, #4294967295
 800bdee:	e7f3      	b.n	800bdd8 <__ssrefill_r+0x22>

0800bdf0 <__ssvfiscanf_r>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	460c      	mov	r4, r1
 800bdf6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800be00:	49b2      	ldr	r1, [pc, #712]	; (800c0cc <__ssvfiscanf_r+0x2dc>)
 800be02:	91a0      	str	r1, [sp, #640]	; 0x280
 800be04:	f10d 0804 	add.w	r8, sp, #4
 800be08:	49b1      	ldr	r1, [pc, #708]	; (800c0d0 <__ssvfiscanf_r+0x2e0>)
 800be0a:	4fb2      	ldr	r7, [pc, #712]	; (800c0d4 <__ssvfiscanf_r+0x2e4>)
 800be0c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c0d8 <__ssvfiscanf_r+0x2e8>
 800be10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800be14:	4606      	mov	r6, r0
 800be16:	91a1      	str	r1, [sp, #644]	; 0x284
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	f892 a000 	ldrb.w	sl, [r2]
 800be1e:	f1ba 0f00 	cmp.w	sl, #0
 800be22:	f000 8151 	beq.w	800c0c8 <__ssvfiscanf_r+0x2d8>
 800be26:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800be2a:	f013 0308 	ands.w	r3, r3, #8
 800be2e:	f102 0501 	add.w	r5, r2, #1
 800be32:	d019      	beq.n	800be68 <__ssvfiscanf_r+0x78>
 800be34:	6863      	ldr	r3, [r4, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	dd0f      	ble.n	800be5a <__ssvfiscanf_r+0x6a>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	5cba      	ldrb	r2, [r7, r2]
 800be40:	0712      	lsls	r2, r2, #28
 800be42:	d401      	bmi.n	800be48 <__ssvfiscanf_r+0x58>
 800be44:	462a      	mov	r2, r5
 800be46:	e7e8      	b.n	800be1a <__ssvfiscanf_r+0x2a>
 800be48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800be4a:	3201      	adds	r2, #1
 800be4c:	9245      	str	r2, [sp, #276]	; 0x114
 800be4e:	6862      	ldr	r2, [r4, #4]
 800be50:	3301      	adds	r3, #1
 800be52:	3a01      	subs	r2, #1
 800be54:	6062      	str	r2, [r4, #4]
 800be56:	6023      	str	r3, [r4, #0]
 800be58:	e7ec      	b.n	800be34 <__ssvfiscanf_r+0x44>
 800be5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be5c:	4621      	mov	r1, r4
 800be5e:	4630      	mov	r0, r6
 800be60:	4798      	blx	r3
 800be62:	2800      	cmp	r0, #0
 800be64:	d0e9      	beq.n	800be3a <__ssvfiscanf_r+0x4a>
 800be66:	e7ed      	b.n	800be44 <__ssvfiscanf_r+0x54>
 800be68:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800be6c:	f040 8083 	bne.w	800bf76 <__ssvfiscanf_r+0x186>
 800be70:	9341      	str	r3, [sp, #260]	; 0x104
 800be72:	9343      	str	r3, [sp, #268]	; 0x10c
 800be74:	7853      	ldrb	r3, [r2, #1]
 800be76:	2b2a      	cmp	r3, #42	; 0x2a
 800be78:	bf02      	ittt	eq
 800be7a:	2310      	moveq	r3, #16
 800be7c:	1c95      	addeq	r5, r2, #2
 800be7e:	9341      	streq	r3, [sp, #260]	; 0x104
 800be80:	220a      	movs	r2, #10
 800be82:	46ab      	mov	fp, r5
 800be84:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800be88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800be8c:	2b09      	cmp	r3, #9
 800be8e:	d91d      	bls.n	800becc <__ssvfiscanf_r+0xdc>
 800be90:	4891      	ldr	r0, [pc, #580]	; (800c0d8 <__ssvfiscanf_r+0x2e8>)
 800be92:	2203      	movs	r2, #3
 800be94:	f7f4 f9a4 	bl	80001e0 <memchr>
 800be98:	b140      	cbz	r0, 800beac <__ssvfiscanf_r+0xbc>
 800be9a:	2301      	movs	r3, #1
 800be9c:	eba0 0009 	sub.w	r0, r0, r9
 800bea0:	fa03 f000 	lsl.w	r0, r3, r0
 800bea4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bea6:	4318      	orrs	r0, r3
 800bea8:	9041      	str	r0, [sp, #260]	; 0x104
 800beaa:	465d      	mov	r5, fp
 800beac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800beb0:	2b78      	cmp	r3, #120	; 0x78
 800beb2:	d806      	bhi.n	800bec2 <__ssvfiscanf_r+0xd2>
 800beb4:	2b57      	cmp	r3, #87	; 0x57
 800beb6:	d810      	bhi.n	800beda <__ssvfiscanf_r+0xea>
 800beb8:	2b25      	cmp	r3, #37	; 0x25
 800beba:	d05c      	beq.n	800bf76 <__ssvfiscanf_r+0x186>
 800bebc:	d856      	bhi.n	800bf6c <__ssvfiscanf_r+0x17c>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d074      	beq.n	800bfac <__ssvfiscanf_r+0x1bc>
 800bec2:	2303      	movs	r3, #3
 800bec4:	9347      	str	r3, [sp, #284]	; 0x11c
 800bec6:	230a      	movs	r3, #10
 800bec8:	9342      	str	r3, [sp, #264]	; 0x108
 800beca:	e081      	b.n	800bfd0 <__ssvfiscanf_r+0x1e0>
 800becc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bece:	fb02 1303 	mla	r3, r2, r3, r1
 800bed2:	3b30      	subs	r3, #48	; 0x30
 800bed4:	9343      	str	r3, [sp, #268]	; 0x10c
 800bed6:	465d      	mov	r5, fp
 800bed8:	e7d3      	b.n	800be82 <__ssvfiscanf_r+0x92>
 800beda:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bede:	2a20      	cmp	r2, #32
 800bee0:	d8ef      	bhi.n	800bec2 <__ssvfiscanf_r+0xd2>
 800bee2:	a101      	add	r1, pc, #4	; (adr r1, 800bee8 <__ssvfiscanf_r+0xf8>)
 800bee4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bee8:	0800bfbb 	.word	0x0800bfbb
 800beec:	0800bec3 	.word	0x0800bec3
 800bef0:	0800bec3 	.word	0x0800bec3
 800bef4:	0800c019 	.word	0x0800c019
 800bef8:	0800bec3 	.word	0x0800bec3
 800befc:	0800bec3 	.word	0x0800bec3
 800bf00:	0800bec3 	.word	0x0800bec3
 800bf04:	0800bec3 	.word	0x0800bec3
 800bf08:	0800bec3 	.word	0x0800bec3
 800bf0c:	0800bec3 	.word	0x0800bec3
 800bf10:	0800bec3 	.word	0x0800bec3
 800bf14:	0800c02f 	.word	0x0800c02f
 800bf18:	0800c005 	.word	0x0800c005
 800bf1c:	0800bf73 	.word	0x0800bf73
 800bf20:	0800bf73 	.word	0x0800bf73
 800bf24:	0800bf73 	.word	0x0800bf73
 800bf28:	0800bec3 	.word	0x0800bec3
 800bf2c:	0800c009 	.word	0x0800c009
 800bf30:	0800bec3 	.word	0x0800bec3
 800bf34:	0800bec3 	.word	0x0800bec3
 800bf38:	0800bec3 	.word	0x0800bec3
 800bf3c:	0800bec3 	.word	0x0800bec3
 800bf40:	0800c03f 	.word	0x0800c03f
 800bf44:	0800c011 	.word	0x0800c011
 800bf48:	0800bfb3 	.word	0x0800bfb3
 800bf4c:	0800bec3 	.word	0x0800bec3
 800bf50:	0800bec3 	.word	0x0800bec3
 800bf54:	0800c03b 	.word	0x0800c03b
 800bf58:	0800bec3 	.word	0x0800bec3
 800bf5c:	0800c005 	.word	0x0800c005
 800bf60:	0800bec3 	.word	0x0800bec3
 800bf64:	0800bec3 	.word	0x0800bec3
 800bf68:	0800bfbb 	.word	0x0800bfbb
 800bf6c:	3b45      	subs	r3, #69	; 0x45
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d8a7      	bhi.n	800bec2 <__ssvfiscanf_r+0xd2>
 800bf72:	2305      	movs	r3, #5
 800bf74:	e02b      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800bf76:	6863      	ldr	r3, [r4, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dd0d      	ble.n	800bf98 <__ssvfiscanf_r+0x1a8>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	781a      	ldrb	r2, [r3, #0]
 800bf80:	4552      	cmp	r2, sl
 800bf82:	f040 80a1 	bne.w	800c0c8 <__ssvfiscanf_r+0x2d8>
 800bf86:	3301      	adds	r3, #1
 800bf88:	6862      	ldr	r2, [r4, #4]
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bf8e:	3a01      	subs	r2, #1
 800bf90:	3301      	adds	r3, #1
 800bf92:	6062      	str	r2, [r4, #4]
 800bf94:	9345      	str	r3, [sp, #276]	; 0x114
 800bf96:	e755      	b.n	800be44 <__ssvfiscanf_r+0x54>
 800bf98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	4798      	blx	r3
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d0eb      	beq.n	800bf7c <__ssvfiscanf_r+0x18c>
 800bfa4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f040 8084 	bne.w	800c0b4 <__ssvfiscanf_r+0x2c4>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e086      	b.n	800c0c0 <__ssvfiscanf_r+0x2d0>
 800bfb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bfb4:	f042 0220 	orr.w	r2, r2, #32
 800bfb8:	9241      	str	r2, [sp, #260]	; 0x104
 800bfba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bfbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfc0:	9241      	str	r2, [sp, #260]	; 0x104
 800bfc2:	2210      	movs	r2, #16
 800bfc4:	2b6f      	cmp	r3, #111	; 0x6f
 800bfc6:	9242      	str	r2, [sp, #264]	; 0x108
 800bfc8:	bf34      	ite	cc
 800bfca:	2303      	movcc	r3, #3
 800bfcc:	2304      	movcs	r3, #4
 800bfce:	9347      	str	r3, [sp, #284]	; 0x11c
 800bfd0:	6863      	ldr	r3, [r4, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	dd41      	ble.n	800c05a <__ssvfiscanf_r+0x26a>
 800bfd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bfd8:	0659      	lsls	r1, r3, #25
 800bfda:	d404      	bmi.n	800bfe6 <__ssvfiscanf_r+0x1f6>
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	5cba      	ldrb	r2, [r7, r2]
 800bfe2:	0712      	lsls	r2, r2, #28
 800bfe4:	d440      	bmi.n	800c068 <__ssvfiscanf_r+0x278>
 800bfe6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	dc4f      	bgt.n	800c08c <__ssvfiscanf_r+0x29c>
 800bfec:	466b      	mov	r3, sp
 800bfee:	4622      	mov	r2, r4
 800bff0:	a941      	add	r1, sp, #260	; 0x104
 800bff2:	4630      	mov	r0, r6
 800bff4:	f000 fa08 	bl	800c408 <_scanf_chars>
 800bff8:	2801      	cmp	r0, #1
 800bffa:	d065      	beq.n	800c0c8 <__ssvfiscanf_r+0x2d8>
 800bffc:	2802      	cmp	r0, #2
 800bffe:	f47f af21 	bne.w	800be44 <__ssvfiscanf_r+0x54>
 800c002:	e7cf      	b.n	800bfa4 <__ssvfiscanf_r+0x1b4>
 800c004:	220a      	movs	r2, #10
 800c006:	e7dd      	b.n	800bfc4 <__ssvfiscanf_r+0x1d4>
 800c008:	2300      	movs	r3, #0
 800c00a:	9342      	str	r3, [sp, #264]	; 0x108
 800c00c:	2303      	movs	r3, #3
 800c00e:	e7de      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c010:	2308      	movs	r3, #8
 800c012:	9342      	str	r3, [sp, #264]	; 0x108
 800c014:	2304      	movs	r3, #4
 800c016:	e7da      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c018:	4629      	mov	r1, r5
 800c01a:	4640      	mov	r0, r8
 800c01c:	f000 fb40 	bl	800c6a0 <__sccl>
 800c020:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c026:	9341      	str	r3, [sp, #260]	; 0x104
 800c028:	4605      	mov	r5, r0
 800c02a:	2301      	movs	r3, #1
 800c02c:	e7cf      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c02e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c034:	9341      	str	r3, [sp, #260]	; 0x104
 800c036:	2300      	movs	r3, #0
 800c038:	e7c9      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c03a:	2302      	movs	r3, #2
 800c03c:	e7c7      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c03e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c040:	06c3      	lsls	r3, r0, #27
 800c042:	f53f aeff 	bmi.w	800be44 <__ssvfiscanf_r+0x54>
 800c046:	9b00      	ldr	r3, [sp, #0]
 800c048:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c04a:	1d19      	adds	r1, r3, #4
 800c04c:	9100      	str	r1, [sp, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	07c0      	lsls	r0, r0, #31
 800c052:	bf4c      	ite	mi
 800c054:	801a      	strhmi	r2, [r3, #0]
 800c056:	601a      	strpl	r2, [r3, #0]
 800c058:	e6f4      	b.n	800be44 <__ssvfiscanf_r+0x54>
 800c05a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c05c:	4621      	mov	r1, r4
 800c05e:	4630      	mov	r0, r6
 800c060:	4798      	blx	r3
 800c062:	2800      	cmp	r0, #0
 800c064:	d0b7      	beq.n	800bfd6 <__ssvfiscanf_r+0x1e6>
 800c066:	e79d      	b.n	800bfa4 <__ssvfiscanf_r+0x1b4>
 800c068:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c06a:	3201      	adds	r2, #1
 800c06c:	9245      	str	r2, [sp, #276]	; 0x114
 800c06e:	6862      	ldr	r2, [r4, #4]
 800c070:	3a01      	subs	r2, #1
 800c072:	2a00      	cmp	r2, #0
 800c074:	6062      	str	r2, [r4, #4]
 800c076:	dd02      	ble.n	800c07e <__ssvfiscanf_r+0x28e>
 800c078:	3301      	adds	r3, #1
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	e7ae      	b.n	800bfdc <__ssvfiscanf_r+0x1ec>
 800c07e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c080:	4621      	mov	r1, r4
 800c082:	4630      	mov	r0, r6
 800c084:	4798      	blx	r3
 800c086:	2800      	cmp	r0, #0
 800c088:	d0a8      	beq.n	800bfdc <__ssvfiscanf_r+0x1ec>
 800c08a:	e78b      	b.n	800bfa4 <__ssvfiscanf_r+0x1b4>
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	dc06      	bgt.n	800c09e <__ssvfiscanf_r+0x2ae>
 800c090:	466b      	mov	r3, sp
 800c092:	4622      	mov	r2, r4
 800c094:	a941      	add	r1, sp, #260	; 0x104
 800c096:	4630      	mov	r0, r6
 800c098:	f000 fa0e 	bl	800c4b8 <_scanf_i>
 800c09c:	e7ac      	b.n	800bff8 <__ssvfiscanf_r+0x208>
 800c09e:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <__ssvfiscanf_r+0x2ec>)
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f43f aecf 	beq.w	800be44 <__ssvfiscanf_r+0x54>
 800c0a6:	466b      	mov	r3, sp
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	a941      	add	r1, sp, #260	; 0x104
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f3af 8000 	nop.w
 800c0b2:	e7a1      	b.n	800bff8 <__ssvfiscanf_r+0x208>
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c0ba:	bf18      	it	ne
 800c0bc:	f04f 30ff 	movne.w	r0, #4294967295
 800c0c0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c0ca:	e7f9      	b.n	800c0c0 <__ssvfiscanf_r+0x2d0>
 800c0cc:	0800bd3d 	.word	0x0800bd3d
 800c0d0:	0800bdb7 	.word	0x0800bdb7
 800c0d4:	0800d6ef 	.word	0x0800d6ef
 800c0d8:	0800d6a6 	.word	0x0800d6a6
 800c0dc:	00000000 	.word	0x00000000

0800c0e0 <_printf_common>:
 800c0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e4:	4616      	mov	r6, r2
 800c0e6:	4699      	mov	r9, r3
 800c0e8:	688a      	ldr	r2, [r1, #8]
 800c0ea:	690b      	ldr	r3, [r1, #16]
 800c0ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	bfb8      	it	lt
 800c0f4:	4613      	movlt	r3, r2
 800c0f6:	6033      	str	r3, [r6, #0]
 800c0f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0fc:	4607      	mov	r7, r0
 800c0fe:	460c      	mov	r4, r1
 800c100:	b10a      	cbz	r2, 800c106 <_printf_common+0x26>
 800c102:	3301      	adds	r3, #1
 800c104:	6033      	str	r3, [r6, #0]
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	0699      	lsls	r1, r3, #26
 800c10a:	bf42      	ittt	mi
 800c10c:	6833      	ldrmi	r3, [r6, #0]
 800c10e:	3302      	addmi	r3, #2
 800c110:	6033      	strmi	r3, [r6, #0]
 800c112:	6825      	ldr	r5, [r4, #0]
 800c114:	f015 0506 	ands.w	r5, r5, #6
 800c118:	d106      	bne.n	800c128 <_printf_common+0x48>
 800c11a:	f104 0a19 	add.w	sl, r4, #25
 800c11e:	68e3      	ldr	r3, [r4, #12]
 800c120:	6832      	ldr	r2, [r6, #0]
 800c122:	1a9b      	subs	r3, r3, r2
 800c124:	42ab      	cmp	r3, r5
 800c126:	dc26      	bgt.n	800c176 <_printf_common+0x96>
 800c128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c12c:	1e13      	subs	r3, r2, #0
 800c12e:	6822      	ldr	r2, [r4, #0]
 800c130:	bf18      	it	ne
 800c132:	2301      	movne	r3, #1
 800c134:	0692      	lsls	r2, r2, #26
 800c136:	d42b      	bmi.n	800c190 <_printf_common+0xb0>
 800c138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c13c:	4649      	mov	r1, r9
 800c13e:	4638      	mov	r0, r7
 800c140:	47c0      	blx	r8
 800c142:	3001      	adds	r0, #1
 800c144:	d01e      	beq.n	800c184 <_printf_common+0xa4>
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	68e5      	ldr	r5, [r4, #12]
 800c14a:	6832      	ldr	r2, [r6, #0]
 800c14c:	f003 0306 	and.w	r3, r3, #6
 800c150:	2b04      	cmp	r3, #4
 800c152:	bf08      	it	eq
 800c154:	1aad      	subeq	r5, r5, r2
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	6922      	ldr	r2, [r4, #16]
 800c15a:	bf0c      	ite	eq
 800c15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c160:	2500      	movne	r5, #0
 800c162:	4293      	cmp	r3, r2
 800c164:	bfc4      	itt	gt
 800c166:	1a9b      	subgt	r3, r3, r2
 800c168:	18ed      	addgt	r5, r5, r3
 800c16a:	2600      	movs	r6, #0
 800c16c:	341a      	adds	r4, #26
 800c16e:	42b5      	cmp	r5, r6
 800c170:	d11a      	bne.n	800c1a8 <_printf_common+0xc8>
 800c172:	2000      	movs	r0, #0
 800c174:	e008      	b.n	800c188 <_printf_common+0xa8>
 800c176:	2301      	movs	r3, #1
 800c178:	4652      	mov	r2, sl
 800c17a:	4649      	mov	r1, r9
 800c17c:	4638      	mov	r0, r7
 800c17e:	47c0      	blx	r8
 800c180:	3001      	adds	r0, #1
 800c182:	d103      	bne.n	800c18c <_printf_common+0xac>
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18c:	3501      	adds	r5, #1
 800c18e:	e7c6      	b.n	800c11e <_printf_common+0x3e>
 800c190:	18e1      	adds	r1, r4, r3
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	2030      	movs	r0, #48	; 0x30
 800c196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c19a:	4422      	add	r2, r4
 800c19c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1a4:	3302      	adds	r3, #2
 800c1a6:	e7c7      	b.n	800c138 <_printf_common+0x58>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	4622      	mov	r2, r4
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	47c0      	blx	r8
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	d0e6      	beq.n	800c184 <_printf_common+0xa4>
 800c1b6:	3601      	adds	r6, #1
 800c1b8:	e7d9      	b.n	800c16e <_printf_common+0x8e>
	...

0800c1bc <_printf_i>:
 800c1bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	4691      	mov	r9, r2
 800c1c4:	7e27      	ldrb	r7, [r4, #24]
 800c1c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1c8:	2f78      	cmp	r7, #120	; 0x78
 800c1ca:	4680      	mov	r8, r0
 800c1cc:	469a      	mov	sl, r3
 800c1ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1d2:	d807      	bhi.n	800c1e4 <_printf_i+0x28>
 800c1d4:	2f62      	cmp	r7, #98	; 0x62
 800c1d6:	d80a      	bhi.n	800c1ee <_printf_i+0x32>
 800c1d8:	2f00      	cmp	r7, #0
 800c1da:	f000 80d8 	beq.w	800c38e <_printf_i+0x1d2>
 800c1de:	2f58      	cmp	r7, #88	; 0x58
 800c1e0:	f000 80a3 	beq.w	800c32a <_printf_i+0x16e>
 800c1e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c1e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1ec:	e03a      	b.n	800c264 <_printf_i+0xa8>
 800c1ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1f2:	2b15      	cmp	r3, #21
 800c1f4:	d8f6      	bhi.n	800c1e4 <_printf_i+0x28>
 800c1f6:	a001      	add	r0, pc, #4	; (adr r0, 800c1fc <_printf_i+0x40>)
 800c1f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c1fc:	0800c255 	.word	0x0800c255
 800c200:	0800c269 	.word	0x0800c269
 800c204:	0800c1e5 	.word	0x0800c1e5
 800c208:	0800c1e5 	.word	0x0800c1e5
 800c20c:	0800c1e5 	.word	0x0800c1e5
 800c210:	0800c1e5 	.word	0x0800c1e5
 800c214:	0800c269 	.word	0x0800c269
 800c218:	0800c1e5 	.word	0x0800c1e5
 800c21c:	0800c1e5 	.word	0x0800c1e5
 800c220:	0800c1e5 	.word	0x0800c1e5
 800c224:	0800c1e5 	.word	0x0800c1e5
 800c228:	0800c375 	.word	0x0800c375
 800c22c:	0800c299 	.word	0x0800c299
 800c230:	0800c357 	.word	0x0800c357
 800c234:	0800c1e5 	.word	0x0800c1e5
 800c238:	0800c1e5 	.word	0x0800c1e5
 800c23c:	0800c397 	.word	0x0800c397
 800c240:	0800c1e5 	.word	0x0800c1e5
 800c244:	0800c299 	.word	0x0800c299
 800c248:	0800c1e5 	.word	0x0800c1e5
 800c24c:	0800c1e5 	.word	0x0800c1e5
 800c250:	0800c35f 	.word	0x0800c35f
 800c254:	680b      	ldr	r3, [r1, #0]
 800c256:	1d1a      	adds	r2, r3, #4
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	600a      	str	r2, [r1, #0]
 800c25c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c264:	2301      	movs	r3, #1
 800c266:	e0a3      	b.n	800c3b0 <_printf_i+0x1f4>
 800c268:	6825      	ldr	r5, [r4, #0]
 800c26a:	6808      	ldr	r0, [r1, #0]
 800c26c:	062e      	lsls	r6, r5, #24
 800c26e:	f100 0304 	add.w	r3, r0, #4
 800c272:	d50a      	bpl.n	800c28a <_printf_i+0xce>
 800c274:	6805      	ldr	r5, [r0, #0]
 800c276:	600b      	str	r3, [r1, #0]
 800c278:	2d00      	cmp	r5, #0
 800c27a:	da03      	bge.n	800c284 <_printf_i+0xc8>
 800c27c:	232d      	movs	r3, #45	; 0x2d
 800c27e:	426d      	negs	r5, r5
 800c280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c284:	485e      	ldr	r0, [pc, #376]	; (800c400 <_printf_i+0x244>)
 800c286:	230a      	movs	r3, #10
 800c288:	e019      	b.n	800c2be <_printf_i+0x102>
 800c28a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c28e:	6805      	ldr	r5, [r0, #0]
 800c290:	600b      	str	r3, [r1, #0]
 800c292:	bf18      	it	ne
 800c294:	b22d      	sxthne	r5, r5
 800c296:	e7ef      	b.n	800c278 <_printf_i+0xbc>
 800c298:	680b      	ldr	r3, [r1, #0]
 800c29a:	6825      	ldr	r5, [r4, #0]
 800c29c:	1d18      	adds	r0, r3, #4
 800c29e:	6008      	str	r0, [r1, #0]
 800c2a0:	0628      	lsls	r0, r5, #24
 800c2a2:	d501      	bpl.n	800c2a8 <_printf_i+0xec>
 800c2a4:	681d      	ldr	r5, [r3, #0]
 800c2a6:	e002      	b.n	800c2ae <_printf_i+0xf2>
 800c2a8:	0669      	lsls	r1, r5, #25
 800c2aa:	d5fb      	bpl.n	800c2a4 <_printf_i+0xe8>
 800c2ac:	881d      	ldrh	r5, [r3, #0]
 800c2ae:	4854      	ldr	r0, [pc, #336]	; (800c400 <_printf_i+0x244>)
 800c2b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c2b2:	bf0c      	ite	eq
 800c2b4:	2308      	moveq	r3, #8
 800c2b6:	230a      	movne	r3, #10
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2be:	6866      	ldr	r6, [r4, #4]
 800c2c0:	60a6      	str	r6, [r4, #8]
 800c2c2:	2e00      	cmp	r6, #0
 800c2c4:	bfa2      	ittt	ge
 800c2c6:	6821      	ldrge	r1, [r4, #0]
 800c2c8:	f021 0104 	bicge.w	r1, r1, #4
 800c2cc:	6021      	strge	r1, [r4, #0]
 800c2ce:	b90d      	cbnz	r5, 800c2d4 <_printf_i+0x118>
 800c2d0:	2e00      	cmp	r6, #0
 800c2d2:	d04d      	beq.n	800c370 <_printf_i+0x1b4>
 800c2d4:	4616      	mov	r6, r2
 800c2d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2da:	fb03 5711 	mls	r7, r3, r1, r5
 800c2de:	5dc7      	ldrb	r7, [r0, r7]
 800c2e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2e4:	462f      	mov	r7, r5
 800c2e6:	42bb      	cmp	r3, r7
 800c2e8:	460d      	mov	r5, r1
 800c2ea:	d9f4      	bls.n	800c2d6 <_printf_i+0x11a>
 800c2ec:	2b08      	cmp	r3, #8
 800c2ee:	d10b      	bne.n	800c308 <_printf_i+0x14c>
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	07df      	lsls	r7, r3, #31
 800c2f4:	d508      	bpl.n	800c308 <_printf_i+0x14c>
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	6861      	ldr	r1, [r4, #4]
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	bfde      	ittt	le
 800c2fe:	2330      	movle	r3, #48	; 0x30
 800c300:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c304:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c308:	1b92      	subs	r2, r2, r6
 800c30a:	6122      	str	r2, [r4, #16]
 800c30c:	f8cd a000 	str.w	sl, [sp]
 800c310:	464b      	mov	r3, r9
 800c312:	aa03      	add	r2, sp, #12
 800c314:	4621      	mov	r1, r4
 800c316:	4640      	mov	r0, r8
 800c318:	f7ff fee2 	bl	800c0e0 <_printf_common>
 800c31c:	3001      	adds	r0, #1
 800c31e:	d14c      	bne.n	800c3ba <_printf_i+0x1fe>
 800c320:	f04f 30ff 	mov.w	r0, #4294967295
 800c324:	b004      	add	sp, #16
 800c326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32a:	4835      	ldr	r0, [pc, #212]	; (800c400 <_printf_i+0x244>)
 800c32c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c330:	6823      	ldr	r3, [r4, #0]
 800c332:	680e      	ldr	r6, [r1, #0]
 800c334:	061f      	lsls	r7, r3, #24
 800c336:	f856 5b04 	ldr.w	r5, [r6], #4
 800c33a:	600e      	str	r6, [r1, #0]
 800c33c:	d514      	bpl.n	800c368 <_printf_i+0x1ac>
 800c33e:	07d9      	lsls	r1, r3, #31
 800c340:	bf44      	itt	mi
 800c342:	f043 0320 	orrmi.w	r3, r3, #32
 800c346:	6023      	strmi	r3, [r4, #0]
 800c348:	b91d      	cbnz	r5, 800c352 <_printf_i+0x196>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	f023 0320 	bic.w	r3, r3, #32
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	2310      	movs	r3, #16
 800c354:	e7b0      	b.n	800c2b8 <_printf_i+0xfc>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	f043 0320 	orr.w	r3, r3, #32
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	2378      	movs	r3, #120	; 0x78
 800c360:	4828      	ldr	r0, [pc, #160]	; (800c404 <_printf_i+0x248>)
 800c362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c366:	e7e3      	b.n	800c330 <_printf_i+0x174>
 800c368:	065e      	lsls	r6, r3, #25
 800c36a:	bf48      	it	mi
 800c36c:	b2ad      	uxthmi	r5, r5
 800c36e:	e7e6      	b.n	800c33e <_printf_i+0x182>
 800c370:	4616      	mov	r6, r2
 800c372:	e7bb      	b.n	800c2ec <_printf_i+0x130>
 800c374:	680b      	ldr	r3, [r1, #0]
 800c376:	6826      	ldr	r6, [r4, #0]
 800c378:	6960      	ldr	r0, [r4, #20]
 800c37a:	1d1d      	adds	r5, r3, #4
 800c37c:	600d      	str	r5, [r1, #0]
 800c37e:	0635      	lsls	r5, r6, #24
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	d501      	bpl.n	800c388 <_printf_i+0x1cc>
 800c384:	6018      	str	r0, [r3, #0]
 800c386:	e002      	b.n	800c38e <_printf_i+0x1d2>
 800c388:	0671      	lsls	r1, r6, #25
 800c38a:	d5fb      	bpl.n	800c384 <_printf_i+0x1c8>
 800c38c:	8018      	strh	r0, [r3, #0]
 800c38e:	2300      	movs	r3, #0
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	4616      	mov	r6, r2
 800c394:	e7ba      	b.n	800c30c <_printf_i+0x150>
 800c396:	680b      	ldr	r3, [r1, #0]
 800c398:	1d1a      	adds	r2, r3, #4
 800c39a:	600a      	str	r2, [r1, #0]
 800c39c:	681e      	ldr	r6, [r3, #0]
 800c39e:	6862      	ldr	r2, [r4, #4]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f7f3 ff1c 	bl	80001e0 <memchr>
 800c3a8:	b108      	cbz	r0, 800c3ae <_printf_i+0x1f2>
 800c3aa:	1b80      	subs	r0, r0, r6
 800c3ac:	6060      	str	r0, [r4, #4]
 800c3ae:	6863      	ldr	r3, [r4, #4]
 800c3b0:	6123      	str	r3, [r4, #16]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3b8:	e7a8      	b.n	800c30c <_printf_i+0x150>
 800c3ba:	6923      	ldr	r3, [r4, #16]
 800c3bc:	4632      	mov	r2, r6
 800c3be:	4649      	mov	r1, r9
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	47d0      	blx	sl
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d0ab      	beq.n	800c320 <_printf_i+0x164>
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	079b      	lsls	r3, r3, #30
 800c3cc:	d413      	bmi.n	800c3f6 <_printf_i+0x23a>
 800c3ce:	68e0      	ldr	r0, [r4, #12]
 800c3d0:	9b03      	ldr	r3, [sp, #12]
 800c3d2:	4298      	cmp	r0, r3
 800c3d4:	bfb8      	it	lt
 800c3d6:	4618      	movlt	r0, r3
 800c3d8:	e7a4      	b.n	800c324 <_printf_i+0x168>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	4632      	mov	r2, r6
 800c3de:	4649      	mov	r1, r9
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	47d0      	blx	sl
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	d09b      	beq.n	800c320 <_printf_i+0x164>
 800c3e8:	3501      	adds	r5, #1
 800c3ea:	68e3      	ldr	r3, [r4, #12]
 800c3ec:	9903      	ldr	r1, [sp, #12]
 800c3ee:	1a5b      	subs	r3, r3, r1
 800c3f0:	42ab      	cmp	r3, r5
 800c3f2:	dcf2      	bgt.n	800c3da <_printf_i+0x21e>
 800c3f4:	e7eb      	b.n	800c3ce <_printf_i+0x212>
 800c3f6:	2500      	movs	r5, #0
 800c3f8:	f104 0619 	add.w	r6, r4, #25
 800c3fc:	e7f5      	b.n	800c3ea <_printf_i+0x22e>
 800c3fe:	bf00      	nop
 800c400:	0800d6b1 	.word	0x0800d6b1
 800c404:	0800d6c2 	.word	0x0800d6c2

0800c408 <_scanf_chars>:
 800c408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c40c:	4615      	mov	r5, r2
 800c40e:	688a      	ldr	r2, [r1, #8]
 800c410:	4680      	mov	r8, r0
 800c412:	460c      	mov	r4, r1
 800c414:	b932      	cbnz	r2, 800c424 <_scanf_chars+0x1c>
 800c416:	698a      	ldr	r2, [r1, #24]
 800c418:	2a00      	cmp	r2, #0
 800c41a:	bf0c      	ite	eq
 800c41c:	2201      	moveq	r2, #1
 800c41e:	f04f 32ff 	movne.w	r2, #4294967295
 800c422:	608a      	str	r2, [r1, #8]
 800c424:	6822      	ldr	r2, [r4, #0]
 800c426:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c4b4 <_scanf_chars+0xac>
 800c42a:	06d1      	lsls	r1, r2, #27
 800c42c:	bf5f      	itttt	pl
 800c42e:	681a      	ldrpl	r2, [r3, #0]
 800c430:	1d11      	addpl	r1, r2, #4
 800c432:	6019      	strpl	r1, [r3, #0]
 800c434:	6816      	ldrpl	r6, [r2, #0]
 800c436:	2700      	movs	r7, #0
 800c438:	69a0      	ldr	r0, [r4, #24]
 800c43a:	b188      	cbz	r0, 800c460 <_scanf_chars+0x58>
 800c43c:	2801      	cmp	r0, #1
 800c43e:	d107      	bne.n	800c450 <_scanf_chars+0x48>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	781a      	ldrb	r2, [r3, #0]
 800c444:	6963      	ldr	r3, [r4, #20]
 800c446:	5c9b      	ldrb	r3, [r3, r2]
 800c448:	b953      	cbnz	r3, 800c460 <_scanf_chars+0x58>
 800c44a:	bb27      	cbnz	r7, 800c496 <_scanf_chars+0x8e>
 800c44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c450:	2802      	cmp	r0, #2
 800c452:	d120      	bne.n	800c496 <_scanf_chars+0x8e>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c45c:	071b      	lsls	r3, r3, #28
 800c45e:	d41a      	bmi.n	800c496 <_scanf_chars+0x8e>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	06da      	lsls	r2, r3, #27
 800c464:	bf5e      	ittt	pl
 800c466:	682b      	ldrpl	r3, [r5, #0]
 800c468:	781b      	ldrbpl	r3, [r3, #0]
 800c46a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c46e:	682a      	ldr	r2, [r5, #0]
 800c470:	686b      	ldr	r3, [r5, #4]
 800c472:	3201      	adds	r2, #1
 800c474:	602a      	str	r2, [r5, #0]
 800c476:	68a2      	ldr	r2, [r4, #8]
 800c478:	3b01      	subs	r3, #1
 800c47a:	3a01      	subs	r2, #1
 800c47c:	606b      	str	r3, [r5, #4]
 800c47e:	3701      	adds	r7, #1
 800c480:	60a2      	str	r2, [r4, #8]
 800c482:	b142      	cbz	r2, 800c496 <_scanf_chars+0x8e>
 800c484:	2b00      	cmp	r3, #0
 800c486:	dcd7      	bgt.n	800c438 <_scanf_chars+0x30>
 800c488:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c48c:	4629      	mov	r1, r5
 800c48e:	4640      	mov	r0, r8
 800c490:	4798      	blx	r3
 800c492:	2800      	cmp	r0, #0
 800c494:	d0d0      	beq.n	800c438 <_scanf_chars+0x30>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	f013 0310 	ands.w	r3, r3, #16
 800c49c:	d105      	bne.n	800c4aa <_scanf_chars+0xa2>
 800c49e:	68e2      	ldr	r2, [r4, #12]
 800c4a0:	3201      	adds	r2, #1
 800c4a2:	60e2      	str	r2, [r4, #12]
 800c4a4:	69a2      	ldr	r2, [r4, #24]
 800c4a6:	b102      	cbz	r2, 800c4aa <_scanf_chars+0xa2>
 800c4a8:	7033      	strb	r3, [r6, #0]
 800c4aa:	6923      	ldr	r3, [r4, #16]
 800c4ac:	441f      	add	r7, r3
 800c4ae:	6127      	str	r7, [r4, #16]
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	e7cb      	b.n	800c44c <_scanf_chars+0x44>
 800c4b4:	0800d6ef 	.word	0x0800d6ef

0800c4b8 <_scanf_i>:
 800c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	4698      	mov	r8, r3
 800c4be:	4b74      	ldr	r3, [pc, #464]	; (800c690 <_scanf_i+0x1d8>)
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	4682      	mov	sl, r0
 800c4c4:	4616      	mov	r6, r2
 800c4c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	ab03      	add	r3, sp, #12
 800c4ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c4d2:	4b70      	ldr	r3, [pc, #448]	; (800c694 <_scanf_i+0x1dc>)
 800c4d4:	69a1      	ldr	r1, [r4, #24]
 800c4d6:	4a70      	ldr	r2, [pc, #448]	; (800c698 <_scanf_i+0x1e0>)
 800c4d8:	2903      	cmp	r1, #3
 800c4da:	bf18      	it	ne
 800c4dc:	461a      	movne	r2, r3
 800c4de:	68a3      	ldr	r3, [r4, #8]
 800c4e0:	9201      	str	r2, [sp, #4]
 800c4e2:	1e5a      	subs	r2, r3, #1
 800c4e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c4e8:	bf88      	it	hi
 800c4ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c4ee:	4627      	mov	r7, r4
 800c4f0:	bf82      	ittt	hi
 800c4f2:	eb03 0905 	addhi.w	r9, r3, r5
 800c4f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c4fa:	60a3      	strhi	r3, [r4, #8]
 800c4fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c500:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c504:	bf98      	it	ls
 800c506:	f04f 0900 	movls.w	r9, #0
 800c50a:	6023      	str	r3, [r4, #0]
 800c50c:	463d      	mov	r5, r7
 800c50e:	f04f 0b00 	mov.w	fp, #0
 800c512:	6831      	ldr	r1, [r6, #0]
 800c514:	ab03      	add	r3, sp, #12
 800c516:	7809      	ldrb	r1, [r1, #0]
 800c518:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c51c:	2202      	movs	r2, #2
 800c51e:	f7f3 fe5f 	bl	80001e0 <memchr>
 800c522:	b328      	cbz	r0, 800c570 <_scanf_i+0xb8>
 800c524:	f1bb 0f01 	cmp.w	fp, #1
 800c528:	d159      	bne.n	800c5de <_scanf_i+0x126>
 800c52a:	6862      	ldr	r2, [r4, #4]
 800c52c:	b92a      	cbnz	r2, 800c53a <_scanf_i+0x82>
 800c52e:	6822      	ldr	r2, [r4, #0]
 800c530:	2308      	movs	r3, #8
 800c532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c536:	6063      	str	r3, [r4, #4]
 800c538:	6022      	str	r2, [r4, #0]
 800c53a:	6822      	ldr	r2, [r4, #0]
 800c53c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c540:	6022      	str	r2, [r4, #0]
 800c542:	68a2      	ldr	r2, [r4, #8]
 800c544:	1e51      	subs	r1, r2, #1
 800c546:	60a1      	str	r1, [r4, #8]
 800c548:	b192      	cbz	r2, 800c570 <_scanf_i+0xb8>
 800c54a:	6832      	ldr	r2, [r6, #0]
 800c54c:	1c51      	adds	r1, r2, #1
 800c54e:	6031      	str	r1, [r6, #0]
 800c550:	7812      	ldrb	r2, [r2, #0]
 800c552:	f805 2b01 	strb.w	r2, [r5], #1
 800c556:	6872      	ldr	r2, [r6, #4]
 800c558:	3a01      	subs	r2, #1
 800c55a:	2a00      	cmp	r2, #0
 800c55c:	6072      	str	r2, [r6, #4]
 800c55e:	dc07      	bgt.n	800c570 <_scanf_i+0xb8>
 800c560:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c564:	4631      	mov	r1, r6
 800c566:	4650      	mov	r0, sl
 800c568:	4790      	blx	r2
 800c56a:	2800      	cmp	r0, #0
 800c56c:	f040 8085 	bne.w	800c67a <_scanf_i+0x1c2>
 800c570:	f10b 0b01 	add.w	fp, fp, #1
 800c574:	f1bb 0f03 	cmp.w	fp, #3
 800c578:	d1cb      	bne.n	800c512 <_scanf_i+0x5a>
 800c57a:	6863      	ldr	r3, [r4, #4]
 800c57c:	b90b      	cbnz	r3, 800c582 <_scanf_i+0xca>
 800c57e:	230a      	movs	r3, #10
 800c580:	6063      	str	r3, [r4, #4]
 800c582:	6863      	ldr	r3, [r4, #4]
 800c584:	4945      	ldr	r1, [pc, #276]	; (800c69c <_scanf_i+0x1e4>)
 800c586:	6960      	ldr	r0, [r4, #20]
 800c588:	1ac9      	subs	r1, r1, r3
 800c58a:	f000 f889 	bl	800c6a0 <__sccl>
 800c58e:	f04f 0b00 	mov.w	fp, #0
 800c592:	68a3      	ldr	r3, [r4, #8]
 800c594:	6822      	ldr	r2, [r4, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d03d      	beq.n	800c616 <_scanf_i+0x15e>
 800c59a:	6831      	ldr	r1, [r6, #0]
 800c59c:	6960      	ldr	r0, [r4, #20]
 800c59e:	f891 c000 	ldrb.w	ip, [r1]
 800c5a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d035      	beq.n	800c616 <_scanf_i+0x15e>
 800c5aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c5ae:	d124      	bne.n	800c5fa <_scanf_i+0x142>
 800c5b0:	0510      	lsls	r0, r2, #20
 800c5b2:	d522      	bpl.n	800c5fa <_scanf_i+0x142>
 800c5b4:	f10b 0b01 	add.w	fp, fp, #1
 800c5b8:	f1b9 0f00 	cmp.w	r9, #0
 800c5bc:	d003      	beq.n	800c5c6 <_scanf_i+0x10e>
 800c5be:	3301      	adds	r3, #1
 800c5c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c5c4:	60a3      	str	r3, [r4, #8]
 800c5c6:	6873      	ldr	r3, [r6, #4]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	6073      	str	r3, [r6, #4]
 800c5ce:	dd1b      	ble.n	800c608 <_scanf_i+0x150>
 800c5d0:	6833      	ldr	r3, [r6, #0]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	6033      	str	r3, [r6, #0]
 800c5d6:	68a3      	ldr	r3, [r4, #8]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	60a3      	str	r3, [r4, #8]
 800c5dc:	e7d9      	b.n	800c592 <_scanf_i+0xda>
 800c5de:	f1bb 0f02 	cmp.w	fp, #2
 800c5e2:	d1ae      	bne.n	800c542 <_scanf_i+0x8a>
 800c5e4:	6822      	ldr	r2, [r4, #0]
 800c5e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c5ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c5ee:	d1bf      	bne.n	800c570 <_scanf_i+0xb8>
 800c5f0:	2310      	movs	r3, #16
 800c5f2:	6063      	str	r3, [r4, #4]
 800c5f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5f8:	e7a2      	b.n	800c540 <_scanf_i+0x88>
 800c5fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c5fe:	6022      	str	r2, [r4, #0]
 800c600:	780b      	ldrb	r3, [r1, #0]
 800c602:	f805 3b01 	strb.w	r3, [r5], #1
 800c606:	e7de      	b.n	800c5c6 <_scanf_i+0x10e>
 800c608:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c60c:	4631      	mov	r1, r6
 800c60e:	4650      	mov	r0, sl
 800c610:	4798      	blx	r3
 800c612:	2800      	cmp	r0, #0
 800c614:	d0df      	beq.n	800c5d6 <_scanf_i+0x11e>
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	05d9      	lsls	r1, r3, #23
 800c61a:	d50d      	bpl.n	800c638 <_scanf_i+0x180>
 800c61c:	42bd      	cmp	r5, r7
 800c61e:	d909      	bls.n	800c634 <_scanf_i+0x17c>
 800c620:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c624:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c628:	4632      	mov	r2, r6
 800c62a:	4650      	mov	r0, sl
 800c62c:	4798      	blx	r3
 800c62e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c632:	464d      	mov	r5, r9
 800c634:	42bd      	cmp	r5, r7
 800c636:	d028      	beq.n	800c68a <_scanf_i+0x1d2>
 800c638:	6822      	ldr	r2, [r4, #0]
 800c63a:	f012 0210 	ands.w	r2, r2, #16
 800c63e:	d113      	bne.n	800c668 <_scanf_i+0x1b0>
 800c640:	702a      	strb	r2, [r5, #0]
 800c642:	6863      	ldr	r3, [r4, #4]
 800c644:	9e01      	ldr	r6, [sp, #4]
 800c646:	4639      	mov	r1, r7
 800c648:	4650      	mov	r0, sl
 800c64a:	47b0      	blx	r6
 800c64c:	f8d8 3000 	ldr.w	r3, [r8]
 800c650:	6821      	ldr	r1, [r4, #0]
 800c652:	1d1a      	adds	r2, r3, #4
 800c654:	f8c8 2000 	str.w	r2, [r8]
 800c658:	f011 0f20 	tst.w	r1, #32
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	d00f      	beq.n	800c680 <_scanf_i+0x1c8>
 800c660:	6018      	str	r0, [r3, #0]
 800c662:	68e3      	ldr	r3, [r4, #12]
 800c664:	3301      	adds	r3, #1
 800c666:	60e3      	str	r3, [r4, #12]
 800c668:	1bed      	subs	r5, r5, r7
 800c66a:	44ab      	add	fp, r5
 800c66c:	6925      	ldr	r5, [r4, #16]
 800c66e:	445d      	add	r5, fp
 800c670:	6125      	str	r5, [r4, #16]
 800c672:	2000      	movs	r0, #0
 800c674:	b007      	add	sp, #28
 800c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67a:	f04f 0b00 	mov.w	fp, #0
 800c67e:	e7ca      	b.n	800c616 <_scanf_i+0x15e>
 800c680:	07ca      	lsls	r2, r1, #31
 800c682:	bf4c      	ite	mi
 800c684:	8018      	strhmi	r0, [r3, #0]
 800c686:	6018      	strpl	r0, [r3, #0]
 800c688:	e7eb      	b.n	800c662 <_scanf_i+0x1aa>
 800c68a:	2001      	movs	r0, #1
 800c68c:	e7f2      	b.n	800c674 <_scanf_i+0x1bc>
 800c68e:	bf00      	nop
 800c690:	0800d5f0 	.word	0x0800d5f0
 800c694:	0800c919 	.word	0x0800c919
 800c698:	0800c81d 	.word	0x0800c81d
 800c69c:	0800d6ec 	.word	0x0800d6ec

0800c6a0 <__sccl>:
 800c6a0:	b570      	push	{r4, r5, r6, lr}
 800c6a2:	780b      	ldrb	r3, [r1, #0]
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	2b5e      	cmp	r3, #94	; 0x5e
 800c6a8:	bf0b      	itete	eq
 800c6aa:	784b      	ldrbeq	r3, [r1, #1]
 800c6ac:	1c48      	addne	r0, r1, #1
 800c6ae:	1c88      	addeq	r0, r1, #2
 800c6b0:	2200      	movne	r2, #0
 800c6b2:	bf08      	it	eq
 800c6b4:	2201      	moveq	r2, #1
 800c6b6:	1e61      	subs	r1, r4, #1
 800c6b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c6bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c6c0:	42a9      	cmp	r1, r5
 800c6c2:	d1fb      	bne.n	800c6bc <__sccl+0x1c>
 800c6c4:	b90b      	cbnz	r3, 800c6ca <__sccl+0x2a>
 800c6c6:	3801      	subs	r0, #1
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ca:	f082 0101 	eor.w	r1, r2, #1
 800c6ce:	54e1      	strb	r1, [r4, r3]
 800c6d0:	1c42      	adds	r2, r0, #1
 800c6d2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c6d6:	2d2d      	cmp	r5, #45	; 0x2d
 800c6d8:	f102 36ff 	add.w	r6, r2, #4294967295
 800c6dc:	4610      	mov	r0, r2
 800c6de:	d006      	beq.n	800c6ee <__sccl+0x4e>
 800c6e0:	2d5d      	cmp	r5, #93	; 0x5d
 800c6e2:	d0f1      	beq.n	800c6c8 <__sccl+0x28>
 800c6e4:	b90d      	cbnz	r5, 800c6ea <__sccl+0x4a>
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	e7ee      	b.n	800c6c8 <__sccl+0x28>
 800c6ea:	462b      	mov	r3, r5
 800c6ec:	e7ef      	b.n	800c6ce <__sccl+0x2e>
 800c6ee:	7816      	ldrb	r6, [r2, #0]
 800c6f0:	2e5d      	cmp	r6, #93	; 0x5d
 800c6f2:	d0fa      	beq.n	800c6ea <__sccl+0x4a>
 800c6f4:	42b3      	cmp	r3, r6
 800c6f6:	dcf8      	bgt.n	800c6ea <__sccl+0x4a>
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	4286      	cmp	r6, r0
 800c6fe:	5421      	strb	r1, [r4, r0]
 800c700:	dcfb      	bgt.n	800c6fa <__sccl+0x5a>
 800c702:	43d8      	mvns	r0, r3
 800c704:	4430      	add	r0, r6
 800c706:	1c5d      	adds	r5, r3, #1
 800c708:	42b3      	cmp	r3, r6
 800c70a:	bfa8      	it	ge
 800c70c:	2000      	movge	r0, #0
 800c70e:	182b      	adds	r3, r5, r0
 800c710:	3202      	adds	r2, #2
 800c712:	e7de      	b.n	800c6d2 <__sccl+0x32>

0800c714 <_strtol_l.isra.0>:
 800c714:	2b01      	cmp	r3, #1
 800c716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c71a:	d001      	beq.n	800c720 <_strtol_l.isra.0+0xc>
 800c71c:	2b24      	cmp	r3, #36	; 0x24
 800c71e:	d906      	bls.n	800c72e <_strtol_l.isra.0+0x1a>
 800c720:	f7ff f84c 	bl	800b7bc <__errno>
 800c724:	2316      	movs	r3, #22
 800c726:	6003      	str	r3, [r0, #0]
 800c728:	2000      	movs	r0, #0
 800c72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c72e:	4f3a      	ldr	r7, [pc, #232]	; (800c818 <_strtol_l.isra.0+0x104>)
 800c730:	468e      	mov	lr, r1
 800c732:	4676      	mov	r6, lr
 800c734:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c738:	5de5      	ldrb	r5, [r4, r7]
 800c73a:	f015 0508 	ands.w	r5, r5, #8
 800c73e:	d1f8      	bne.n	800c732 <_strtol_l.isra.0+0x1e>
 800c740:	2c2d      	cmp	r4, #45	; 0x2d
 800c742:	d134      	bne.n	800c7ae <_strtol_l.isra.0+0x9a>
 800c744:	f89e 4000 	ldrb.w	r4, [lr]
 800c748:	f04f 0801 	mov.w	r8, #1
 800c74c:	f106 0e02 	add.w	lr, r6, #2
 800c750:	2b00      	cmp	r3, #0
 800c752:	d05c      	beq.n	800c80e <_strtol_l.isra.0+0xfa>
 800c754:	2b10      	cmp	r3, #16
 800c756:	d10c      	bne.n	800c772 <_strtol_l.isra.0+0x5e>
 800c758:	2c30      	cmp	r4, #48	; 0x30
 800c75a:	d10a      	bne.n	800c772 <_strtol_l.isra.0+0x5e>
 800c75c:	f89e 4000 	ldrb.w	r4, [lr]
 800c760:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c764:	2c58      	cmp	r4, #88	; 0x58
 800c766:	d14d      	bne.n	800c804 <_strtol_l.isra.0+0xf0>
 800c768:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c76c:	2310      	movs	r3, #16
 800c76e:	f10e 0e02 	add.w	lr, lr, #2
 800c772:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c776:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c77a:	2600      	movs	r6, #0
 800c77c:	fbbc f9f3 	udiv	r9, ip, r3
 800c780:	4635      	mov	r5, r6
 800c782:	fb03 ca19 	mls	sl, r3, r9, ip
 800c786:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c78a:	2f09      	cmp	r7, #9
 800c78c:	d818      	bhi.n	800c7c0 <_strtol_l.isra.0+0xac>
 800c78e:	463c      	mov	r4, r7
 800c790:	42a3      	cmp	r3, r4
 800c792:	dd24      	ble.n	800c7de <_strtol_l.isra.0+0xca>
 800c794:	2e00      	cmp	r6, #0
 800c796:	db1f      	blt.n	800c7d8 <_strtol_l.isra.0+0xc4>
 800c798:	45a9      	cmp	r9, r5
 800c79a:	d31d      	bcc.n	800c7d8 <_strtol_l.isra.0+0xc4>
 800c79c:	d101      	bne.n	800c7a2 <_strtol_l.isra.0+0x8e>
 800c79e:	45a2      	cmp	sl, r4
 800c7a0:	db1a      	blt.n	800c7d8 <_strtol_l.isra.0+0xc4>
 800c7a2:	fb05 4503 	mla	r5, r5, r3, r4
 800c7a6:	2601      	movs	r6, #1
 800c7a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c7ac:	e7eb      	b.n	800c786 <_strtol_l.isra.0+0x72>
 800c7ae:	2c2b      	cmp	r4, #43	; 0x2b
 800c7b0:	bf08      	it	eq
 800c7b2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c7b6:	46a8      	mov	r8, r5
 800c7b8:	bf08      	it	eq
 800c7ba:	f106 0e02 	addeq.w	lr, r6, #2
 800c7be:	e7c7      	b.n	800c750 <_strtol_l.isra.0+0x3c>
 800c7c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c7c4:	2f19      	cmp	r7, #25
 800c7c6:	d801      	bhi.n	800c7cc <_strtol_l.isra.0+0xb8>
 800c7c8:	3c37      	subs	r4, #55	; 0x37
 800c7ca:	e7e1      	b.n	800c790 <_strtol_l.isra.0+0x7c>
 800c7cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c7d0:	2f19      	cmp	r7, #25
 800c7d2:	d804      	bhi.n	800c7de <_strtol_l.isra.0+0xca>
 800c7d4:	3c57      	subs	r4, #87	; 0x57
 800c7d6:	e7db      	b.n	800c790 <_strtol_l.isra.0+0x7c>
 800c7d8:	f04f 36ff 	mov.w	r6, #4294967295
 800c7dc:	e7e4      	b.n	800c7a8 <_strtol_l.isra.0+0x94>
 800c7de:	2e00      	cmp	r6, #0
 800c7e0:	da05      	bge.n	800c7ee <_strtol_l.isra.0+0xda>
 800c7e2:	2322      	movs	r3, #34	; 0x22
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	4665      	mov	r5, ip
 800c7e8:	b942      	cbnz	r2, 800c7fc <_strtol_l.isra.0+0xe8>
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	e79d      	b.n	800c72a <_strtol_l.isra.0+0x16>
 800c7ee:	f1b8 0f00 	cmp.w	r8, #0
 800c7f2:	d000      	beq.n	800c7f6 <_strtol_l.isra.0+0xe2>
 800c7f4:	426d      	negs	r5, r5
 800c7f6:	2a00      	cmp	r2, #0
 800c7f8:	d0f7      	beq.n	800c7ea <_strtol_l.isra.0+0xd6>
 800c7fa:	b10e      	cbz	r6, 800c800 <_strtol_l.isra.0+0xec>
 800c7fc:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c800:	6011      	str	r1, [r2, #0]
 800c802:	e7f2      	b.n	800c7ea <_strtol_l.isra.0+0xd6>
 800c804:	2430      	movs	r4, #48	; 0x30
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1b3      	bne.n	800c772 <_strtol_l.isra.0+0x5e>
 800c80a:	2308      	movs	r3, #8
 800c80c:	e7b1      	b.n	800c772 <_strtol_l.isra.0+0x5e>
 800c80e:	2c30      	cmp	r4, #48	; 0x30
 800c810:	d0a4      	beq.n	800c75c <_strtol_l.isra.0+0x48>
 800c812:	230a      	movs	r3, #10
 800c814:	e7ad      	b.n	800c772 <_strtol_l.isra.0+0x5e>
 800c816:	bf00      	nop
 800c818:	0800d6ef 	.word	0x0800d6ef

0800c81c <_strtol_r>:
 800c81c:	f7ff bf7a 	b.w	800c714 <_strtol_l.isra.0>

0800c820 <_strtoul_l.isra.0>:
 800c820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c824:	4e3b      	ldr	r6, [pc, #236]	; (800c914 <_strtoul_l.isra.0+0xf4>)
 800c826:	4686      	mov	lr, r0
 800c828:	468c      	mov	ip, r1
 800c82a:	4660      	mov	r0, ip
 800c82c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c830:	5da5      	ldrb	r5, [r4, r6]
 800c832:	f015 0508 	ands.w	r5, r5, #8
 800c836:	d1f8      	bne.n	800c82a <_strtoul_l.isra.0+0xa>
 800c838:	2c2d      	cmp	r4, #45	; 0x2d
 800c83a:	d134      	bne.n	800c8a6 <_strtoul_l.isra.0+0x86>
 800c83c:	f89c 4000 	ldrb.w	r4, [ip]
 800c840:	f04f 0801 	mov.w	r8, #1
 800c844:	f100 0c02 	add.w	ip, r0, #2
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d05e      	beq.n	800c90a <_strtoul_l.isra.0+0xea>
 800c84c:	2b10      	cmp	r3, #16
 800c84e:	d10c      	bne.n	800c86a <_strtoul_l.isra.0+0x4a>
 800c850:	2c30      	cmp	r4, #48	; 0x30
 800c852:	d10a      	bne.n	800c86a <_strtoul_l.isra.0+0x4a>
 800c854:	f89c 0000 	ldrb.w	r0, [ip]
 800c858:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c85c:	2858      	cmp	r0, #88	; 0x58
 800c85e:	d14f      	bne.n	800c900 <_strtoul_l.isra.0+0xe0>
 800c860:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c864:	2310      	movs	r3, #16
 800c866:	f10c 0c02 	add.w	ip, ip, #2
 800c86a:	f04f 37ff 	mov.w	r7, #4294967295
 800c86e:	2500      	movs	r5, #0
 800c870:	fbb7 f7f3 	udiv	r7, r7, r3
 800c874:	fb03 f907 	mul.w	r9, r3, r7
 800c878:	ea6f 0909 	mvn.w	r9, r9
 800c87c:	4628      	mov	r0, r5
 800c87e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c882:	2e09      	cmp	r6, #9
 800c884:	d818      	bhi.n	800c8b8 <_strtoul_l.isra.0+0x98>
 800c886:	4634      	mov	r4, r6
 800c888:	42a3      	cmp	r3, r4
 800c88a:	dd24      	ble.n	800c8d6 <_strtoul_l.isra.0+0xb6>
 800c88c:	2d00      	cmp	r5, #0
 800c88e:	db1f      	blt.n	800c8d0 <_strtoul_l.isra.0+0xb0>
 800c890:	4287      	cmp	r7, r0
 800c892:	d31d      	bcc.n	800c8d0 <_strtoul_l.isra.0+0xb0>
 800c894:	d101      	bne.n	800c89a <_strtoul_l.isra.0+0x7a>
 800c896:	45a1      	cmp	r9, r4
 800c898:	db1a      	blt.n	800c8d0 <_strtoul_l.isra.0+0xb0>
 800c89a:	fb00 4003 	mla	r0, r0, r3, r4
 800c89e:	2501      	movs	r5, #1
 800c8a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c8a4:	e7eb      	b.n	800c87e <_strtoul_l.isra.0+0x5e>
 800c8a6:	2c2b      	cmp	r4, #43	; 0x2b
 800c8a8:	bf08      	it	eq
 800c8aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c8ae:	46a8      	mov	r8, r5
 800c8b0:	bf08      	it	eq
 800c8b2:	f100 0c02 	addeq.w	ip, r0, #2
 800c8b6:	e7c7      	b.n	800c848 <_strtoul_l.isra.0+0x28>
 800c8b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c8bc:	2e19      	cmp	r6, #25
 800c8be:	d801      	bhi.n	800c8c4 <_strtoul_l.isra.0+0xa4>
 800c8c0:	3c37      	subs	r4, #55	; 0x37
 800c8c2:	e7e1      	b.n	800c888 <_strtoul_l.isra.0+0x68>
 800c8c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c8c8:	2e19      	cmp	r6, #25
 800c8ca:	d804      	bhi.n	800c8d6 <_strtoul_l.isra.0+0xb6>
 800c8cc:	3c57      	subs	r4, #87	; 0x57
 800c8ce:	e7db      	b.n	800c888 <_strtoul_l.isra.0+0x68>
 800c8d0:	f04f 35ff 	mov.w	r5, #4294967295
 800c8d4:	e7e4      	b.n	800c8a0 <_strtoul_l.isra.0+0x80>
 800c8d6:	2d00      	cmp	r5, #0
 800c8d8:	da07      	bge.n	800c8ea <_strtoul_l.isra.0+0xca>
 800c8da:	2322      	movs	r3, #34	; 0x22
 800c8dc:	f8ce 3000 	str.w	r3, [lr]
 800c8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e4:	b942      	cbnz	r2, 800c8f8 <_strtoul_l.isra.0+0xd8>
 800c8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ea:	f1b8 0f00 	cmp.w	r8, #0
 800c8ee:	d000      	beq.n	800c8f2 <_strtoul_l.isra.0+0xd2>
 800c8f0:	4240      	negs	r0, r0
 800c8f2:	2a00      	cmp	r2, #0
 800c8f4:	d0f7      	beq.n	800c8e6 <_strtoul_l.isra.0+0xc6>
 800c8f6:	b10d      	cbz	r5, 800c8fc <_strtoul_l.isra.0+0xdc>
 800c8f8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c8fc:	6011      	str	r1, [r2, #0]
 800c8fe:	e7f2      	b.n	800c8e6 <_strtoul_l.isra.0+0xc6>
 800c900:	2430      	movs	r4, #48	; 0x30
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1b1      	bne.n	800c86a <_strtoul_l.isra.0+0x4a>
 800c906:	2308      	movs	r3, #8
 800c908:	e7af      	b.n	800c86a <_strtoul_l.isra.0+0x4a>
 800c90a:	2c30      	cmp	r4, #48	; 0x30
 800c90c:	d0a2      	beq.n	800c854 <_strtoul_l.isra.0+0x34>
 800c90e:	230a      	movs	r3, #10
 800c910:	e7ab      	b.n	800c86a <_strtoul_l.isra.0+0x4a>
 800c912:	bf00      	nop
 800c914:	0800d6ef 	.word	0x0800d6ef

0800c918 <_strtoul_r>:
 800c918:	f7ff bf82 	b.w	800c820 <_strtoul_l.isra.0>

0800c91c <__submore>:
 800c91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c920:	460c      	mov	r4, r1
 800c922:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c928:	4299      	cmp	r1, r3
 800c92a:	d11d      	bne.n	800c968 <__submore+0x4c>
 800c92c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c930:	f7fe ffe4 	bl	800b8fc <_malloc_r>
 800c934:	b918      	cbnz	r0, 800c93e <__submore+0x22>
 800c936:	f04f 30ff 	mov.w	r0, #4294967295
 800c93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c942:	63a3      	str	r3, [r4, #56]	; 0x38
 800c944:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c948:	6360      	str	r0, [r4, #52]	; 0x34
 800c94a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c94e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c952:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c956:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c95a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c95e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c962:	6020      	str	r0, [r4, #0]
 800c964:	2000      	movs	r0, #0
 800c966:	e7e8      	b.n	800c93a <__submore+0x1e>
 800c968:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c96a:	0077      	lsls	r7, r6, #1
 800c96c:	463a      	mov	r2, r7
 800c96e:	f000 f82b 	bl	800c9c8 <_realloc_r>
 800c972:	4605      	mov	r5, r0
 800c974:	2800      	cmp	r0, #0
 800c976:	d0de      	beq.n	800c936 <__submore+0x1a>
 800c978:	eb00 0806 	add.w	r8, r0, r6
 800c97c:	4601      	mov	r1, r0
 800c97e:	4632      	mov	r2, r6
 800c980:	4640      	mov	r0, r8
 800c982:	f7fe ff55 	bl	800b830 <memcpy>
 800c986:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c98a:	f8c4 8000 	str.w	r8, [r4]
 800c98e:	e7e9      	b.n	800c964 <__submore+0x48>

0800c990 <__retarget_lock_acquire_recursive>:
 800c990:	4770      	bx	lr

0800c992 <__retarget_lock_release_recursive>:
 800c992:	4770      	bx	lr

0800c994 <memmove>:
 800c994:	4288      	cmp	r0, r1
 800c996:	b510      	push	{r4, lr}
 800c998:	eb01 0402 	add.w	r4, r1, r2
 800c99c:	d902      	bls.n	800c9a4 <memmove+0x10>
 800c99e:	4284      	cmp	r4, r0
 800c9a0:	4623      	mov	r3, r4
 800c9a2:	d807      	bhi.n	800c9b4 <memmove+0x20>
 800c9a4:	1e43      	subs	r3, r0, #1
 800c9a6:	42a1      	cmp	r1, r4
 800c9a8:	d008      	beq.n	800c9bc <memmove+0x28>
 800c9aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9b2:	e7f8      	b.n	800c9a6 <memmove+0x12>
 800c9b4:	4402      	add	r2, r0
 800c9b6:	4601      	mov	r1, r0
 800c9b8:	428a      	cmp	r2, r1
 800c9ba:	d100      	bne.n	800c9be <memmove+0x2a>
 800c9bc:	bd10      	pop	{r4, pc}
 800c9be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9c6:	e7f7      	b.n	800c9b8 <memmove+0x24>

0800c9c8 <_realloc_r>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	4614      	mov	r4, r2
 800c9ce:	460e      	mov	r6, r1
 800c9d0:	b921      	cbnz	r1, 800c9dc <_realloc_r+0x14>
 800c9d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	f7fe bf90 	b.w	800b8fc <_malloc_r>
 800c9dc:	b922      	cbnz	r2, 800c9e8 <_realloc_r+0x20>
 800c9de:	f7fe ff3d 	bl	800b85c <_free_r>
 800c9e2:	4625      	mov	r5, r4
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e8:	f000 f814 	bl	800ca14 <_malloc_usable_size_r>
 800c9ec:	42a0      	cmp	r0, r4
 800c9ee:	d20f      	bcs.n	800ca10 <_realloc_r+0x48>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	f7fe ff82 	bl	800b8fc <_malloc_r>
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d0f2      	beq.n	800c9e4 <_realloc_r+0x1c>
 800c9fe:	4631      	mov	r1, r6
 800ca00:	4622      	mov	r2, r4
 800ca02:	f7fe ff15 	bl	800b830 <memcpy>
 800ca06:	4631      	mov	r1, r6
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f7fe ff27 	bl	800b85c <_free_r>
 800ca0e:	e7e9      	b.n	800c9e4 <_realloc_r+0x1c>
 800ca10:	4635      	mov	r5, r6
 800ca12:	e7e7      	b.n	800c9e4 <_realloc_r+0x1c>

0800ca14 <_malloc_usable_size_r>:
 800ca14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca18:	1f18      	subs	r0, r3, #4
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	bfbc      	itt	lt
 800ca1e:	580b      	ldrlt	r3, [r1, r0]
 800ca20:	18c0      	addlt	r0, r0, r3
 800ca22:	4770      	bx	lr

0800ca24 <log2f>:
 800ca24:	b508      	push	{r3, lr}
 800ca26:	f000 f807 	bl	800ca38 <logf>
 800ca2a:	eddf 7a02 	vldr	s15, [pc, #8]	; 800ca34 <log2f+0x10>
 800ca2e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800ca32:	bd08      	pop	{r3, pc}
 800ca34:	3f317218 	.word	0x3f317218

0800ca38 <logf>:
 800ca38:	b508      	push	{r3, lr}
 800ca3a:	ed2d 8b02 	vpush	{d8}
 800ca3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ca42:	f000 f82f 	bl	800caa4 <__ieee754_logf>
 800ca46:	4b14      	ldr	r3, [pc, #80]	; (800ca98 <logf+0x60>)
 800ca48:	f993 3000 	ldrsb.w	r3, [r3]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	d014      	beq.n	800ca7a <logf+0x42>
 800ca50:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca58:	d60f      	bvs.n	800ca7a <logf+0x42>
 800ca5a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ca5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca62:	dc0a      	bgt.n	800ca7a <logf+0x42>
 800ca64:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ca68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca6c:	d108      	bne.n	800ca80 <logf+0x48>
 800ca6e:	f7fe fea5 	bl	800b7bc <__errno>
 800ca72:	2322      	movs	r3, #34	; 0x22
 800ca74:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800ca9c <logf+0x64>
 800ca78:	6003      	str	r3, [r0, #0]
 800ca7a:	ecbd 8b02 	vpop	{d8}
 800ca7e:	bd08      	pop	{r3, pc}
 800ca80:	f7fe fe9c 	bl	800b7bc <__errno>
 800ca84:	ecbd 8b02 	vpop	{d8}
 800ca88:	2321      	movs	r3, #33	; 0x21
 800ca8a:	6003      	str	r3, [r0, #0]
 800ca8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca90:	4803      	ldr	r0, [pc, #12]	; (800caa0 <logf+0x68>)
 800ca92:	f000 b8f7 	b.w	800cc84 <nanf>
 800ca96:	bf00      	nop
 800ca98:	20000090 	.word	0x20000090
 800ca9c:	ff800000 	.word	0xff800000
 800caa0:	0800d6a5 	.word	0x0800d6a5

0800caa4 <__ieee754_logf>:
 800caa4:	ee10 3a10 	vmov	r3, s0
 800caa8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800caac:	d106      	bne.n	800cabc <__ieee754_logf+0x18>
 800caae:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800cc44 <__ieee754_logf+0x1a0>
 800cab2:	eddf 7a65 	vldr	s15, [pc, #404]	; 800cc48 <__ieee754_logf+0x1a4>
 800cab6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800caba:	4770      	bx	lr
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	da02      	bge.n	800cac6 <__ieee754_logf+0x22>
 800cac0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cac4:	e7f5      	b.n	800cab2 <__ieee754_logf+0xe>
 800cac6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800caca:	db02      	blt.n	800cad2 <__ieee754_logf+0x2e>
 800cacc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cad0:	4770      	bx	lr
 800cad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cad6:	bfb8      	it	lt
 800cad8:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800cc4c <__ieee754_logf+0x1a8>
 800cadc:	485c      	ldr	r0, [pc, #368]	; (800cc50 <__ieee754_logf+0x1ac>)
 800cade:	bfbe      	ittt	lt
 800cae0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800cae4:	f06f 0118 	mvnlt.w	r1, #24
 800cae8:	ee17 3a90 	vmovlt	r3, s15
 800caec:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800caf0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800caf4:	4418      	add	r0, r3
 800caf6:	bfa8      	it	ge
 800caf8:	2100      	movge	r1, #0
 800cafa:	3a7f      	subs	r2, #127	; 0x7f
 800cafc:	440a      	add	r2, r1
 800cafe:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800cb02:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800cb06:	4319      	orrs	r1, r3
 800cb08:	ee00 1a10 	vmov	s0, r1
 800cb0c:	4951      	ldr	r1, [pc, #324]	; (800cc54 <__ieee754_logf+0x1b0>)
 800cb0e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800cb12:	f103 000f 	add.w	r0, r3, #15
 800cb16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cb1a:	4001      	ands	r1, r0
 800cb1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb20:	bb89      	cbnz	r1, 800cb86 <__ieee754_logf+0xe2>
 800cb22:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb2a:	d10f      	bne.n	800cb4c <__ieee754_logf+0xa8>
 800cb2c:	2a00      	cmp	r2, #0
 800cb2e:	f000 8085 	beq.w	800cc3c <__ieee754_logf+0x198>
 800cb32:	ee07 2a90 	vmov	s15, r2
 800cb36:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800cc58 <__ieee754_logf+0x1b4>
 800cb3a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800cc5c <__ieee754_logf+0x1b8>
 800cb3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb42:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cb46:	eea7 0a87 	vfma.f32	s0, s15, s14
 800cb4a:	4770      	bx	lr
 800cb4c:	eddf 6a44 	vldr	s13, [pc, #272]	; 800cc60 <__ieee754_logf+0x1bc>
 800cb50:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cb54:	eee0 7a66 	vfms.f32	s15, s0, s13
 800cb58:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cb5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb60:	b912      	cbnz	r2, 800cb68 <__ieee754_logf+0xc4>
 800cb62:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cb66:	4770      	bx	lr
 800cb68:	ee07 2a90 	vmov	s15, r2
 800cb6c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800cc58 <__ieee754_logf+0x1b4>
 800cb70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb74:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cb78:	ee37 0a40 	vsub.f32	s0, s14, s0
 800cb7c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800cc5c <__ieee754_logf+0x1b8>
 800cb80:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800cb84:	4770      	bx	lr
 800cb86:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cb8a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cb8e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cc64 <__ieee754_logf+0x1c0>
 800cb92:	eddf 4a35 	vldr	s9, [pc, #212]	; 800cc68 <__ieee754_logf+0x1c4>
 800cb96:	4935      	ldr	r1, [pc, #212]	; (800cc6c <__ieee754_logf+0x1c8>)
 800cb98:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800cb9c:	4419      	add	r1, r3
 800cb9e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800cba2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cba6:	430b      	orrs	r3, r1
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	ee07 2a90 	vmov	s15, r2
 800cbae:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cbb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cbb6:	ee25 7a05 	vmul.f32	s14, s10, s10
 800cbba:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800cc70 <__ieee754_logf+0x1cc>
 800cbbe:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cbc2:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800cc74 <__ieee754_logf+0x1d0>
 800cbc6:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cbca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cc78 <__ieee754_logf+0x1d4>
 800cbce:	eee7 7a24 	vfma.f32	s15, s14, s9
 800cbd2:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800cc7c <__ieee754_logf+0x1d8>
 800cbd6:	eee7 4a87 	vfma.f32	s9, s15, s14
 800cbda:	eddf 7a29 	vldr	s15, [pc, #164]	; 800cc80 <__ieee754_logf+0x1dc>
 800cbde:	eee4 7a87 	vfma.f32	s15, s9, s14
 800cbe2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cbe6:	eee5 7a87 	vfma.f32	s15, s11, s14
 800cbea:	dd1c      	ble.n	800cc26 <__ieee754_logf+0x182>
 800cbec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cbf0:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cbf4:	ee27 7a00 	vmul.f32	s14, s14, s0
 800cbf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc00:	b922      	cbnz	r2, 800cc0c <__ieee754_logf+0x168>
 800cc02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc06:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cc0a:	4770      	bx	lr
 800cc0c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800cc58 <__ieee754_logf+0x1b4>
 800cc10:	eee6 7a86 	vfma.f32	s15, s13, s12
 800cc14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cc1c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cc5c <__ieee754_logf+0x1b8>
 800cc20:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800cc24:	4770      	bx	lr
 800cc26:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cc2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc2e:	2a00      	cmp	r2, #0
 800cc30:	d0e9      	beq.n	800cc06 <__ieee754_logf+0x162>
 800cc32:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800cc58 <__ieee754_logf+0x1b4>
 800cc36:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cc3a:	e7ed      	b.n	800cc18 <__ieee754_logf+0x174>
 800cc3c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800cc48 <__ieee754_logf+0x1a4>
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	cc000000 	.word	0xcc000000
 800cc48:	00000000 	.word	0x00000000
 800cc4c:	4c000000 	.word	0x4c000000
 800cc50:	004afb20 	.word	0x004afb20
 800cc54:	007ffff0 	.word	0x007ffff0
 800cc58:	3717f7d1 	.word	0x3717f7d1
 800cc5c:	3f317180 	.word	0x3f317180
 800cc60:	3eaaaaab 	.word	0x3eaaaaab
 800cc64:	3e1cd04f 	.word	0x3e1cd04f
 800cc68:	3e178897 	.word	0x3e178897
 800cc6c:	ffcf5c30 	.word	0xffcf5c30
 800cc70:	3e638e29 	.word	0x3e638e29
 800cc74:	3ecccccd 	.word	0x3ecccccd
 800cc78:	3e3a3325 	.word	0x3e3a3325
 800cc7c:	3e924925 	.word	0x3e924925
 800cc80:	3f2aaaab 	.word	0x3f2aaaab

0800cc84 <nanf>:
 800cc84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc8c <nanf+0x8>
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	7fc00000 	.word	0x7fc00000

0800cc90 <_init>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	bf00      	nop
 800cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc96:	bc08      	pop	{r3}
 800cc98:	469e      	mov	lr, r3
 800cc9a:	4770      	bx	lr

0800cc9c <_fini>:
 800cc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9e:	bf00      	nop
 800cca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca2:	bc08      	pop	{r3}
 800cca4:	469e      	mov	lr, r3
 800cca6:	4770      	bx	lr
