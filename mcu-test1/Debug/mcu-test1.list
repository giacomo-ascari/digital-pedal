
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d900  0800d900  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  0800d900  0800d900  0001d900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d908  0800d908  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d908  0800d908  0001d908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d90c  0800d90c  0001d90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800d910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020334  2**0
                  CONTENTS
 10 .bss          000057fc  20000334  20000334  00020334  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005b30  20005b30  00020334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028229  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000565e  00000000  00000000  0004858d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0004dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001440  00000000  00000000  0004f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277ac  00000000  00000000  00050510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e97f  00000000  00000000  00077cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd52e  00000000  00000000  0009663b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00163b69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005974  00000000  00000000  00163bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000022a  00000000  00000000  00169530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000334 	.word	0x20000334
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d518 	.word	0x0800d518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000338 	.word	0x20000338
 80001cc:	0800d518 	.word	0x0800d518

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <write_register+0x34>)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <write_register+0x34>)
 8000d6c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	2302      	movs	r3, #2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <write_register+0x34>)
 8000d76:	2194      	movs	r1, #148	; 0x94
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <write_register+0x38>)
 8000d7a:	f004 ffe1 	bl	8005d40 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000350 	.word	0x20000350
 8000d8c:	20000354 	.word	0x20000354

08000d90 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <read_register+0x3c>)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000da2:	2364      	movs	r3, #100	; 0x64
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <read_register+0x3c>)
 8000daa:	2194      	movs	r1, #148	; 0x94
 8000dac:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <read_register+0x40>)
 8000dae:	f004 ffc7 	bl	8005d40 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000db2:	2364      	movs	r3, #100	; 0x64
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	2194      	movs	r1, #148	; 0x94
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <read_register+0x40>)
 8000dbe:	f005 f8bd 	bl	8005f3c <HAL_I2C_Master_Receive>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000350 	.word	0x20000350
 8000dd0:	20000354 	.word	0x20000354

08000dd4 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	f107 0c08 	add.w	ip, r7, #8
 8000dde:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000de2:	4b81      	ldr	r3, [pc, #516]	; (8000fe8 <CS43_Init+0x214>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000dea:	4b7f      	ldr	r3, [pc, #508]	; (8000fe8 <CS43_Init+0x214>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	69da      	ldr	r2, [r3, #28]
 8000df0:	4b7d      	ldr	r3, [pc, #500]	; (8000fe8 <CS43_Init+0x214>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000df8:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	487b      	ldr	r0, [pc, #492]	; (8000fec <CS43_Init+0x218>)
 8000e00:	f003 f8d0 	bl	8003fa4 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000e04:	4b7a      	ldr	r3, [pc, #488]	; (8000ff0 <CS43_Init+0x21c>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	2254      	movs	r2, #84	; 0x54
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f00b ff4c 	bl	800ccac <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000e14:	4b77      	ldr	r3, [pc, #476]	; (8000ff4 <CS43_Init+0x220>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000e1a:	4976      	ldr	r1, [pc, #472]	; (8000ff4 <CS43_Init+0x220>)
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff ff99 	bl	8000d54 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000e22:	4b74      	ldr	r3, [pc, #464]	; (8000ff4 <CS43_Init+0x220>)
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000e28:	4b72      	ldr	r3, [pc, #456]	; (8000ff4 <CS43_Init+0x220>)
 8000e2a:	785b      	ldrb	r3, [r3, #1]
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b70      	ldr	r3, [pc, #448]	; (8000ff4 <CS43_Init+0x220>)
 8000e34:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000e36:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <CS43_Init+0x220>)
 8000e38:	785b      	ldrb	r3, [r3, #1]
 8000e3a:	f043 030c 	orr.w	r3, r3, #12
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <CS43_Init+0x220>)
 8000e42:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000e44:	4b6b      	ldr	r3, [pc, #428]	; (8000ff4 <CS43_Init+0x220>)
 8000e46:	785b      	ldrb	r3, [r3, #1]
 8000e48:	f043 0303 	orr.w	r3, r3, #3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b69      	ldr	r3, [pc, #420]	; (8000ff4 <CS43_Init+0x220>)
 8000e50:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000e52:	4969      	ldr	r1, [pc, #420]	; (8000ff8 <CS43_Init+0x224>)
 8000e54:	2004      	movs	r0, #4
 8000e56:	f7ff ff7d 	bl	8000d54 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000e5a:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <CS43_Init+0x220>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000e60:	4965      	ldr	r1, [pc, #404]	; (8000ff8 <CS43_Init+0x224>)
 8000e62:	2005      	movs	r0, #5
 8000e64:	f7ff ff76 	bl	8000d54 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000e68:	4962      	ldr	r1, [pc, #392]	; (8000ff4 <CS43_Init+0x220>)
 8000e6a:	2006      	movs	r0, #6
 8000e6c:	f7ff ff90 	bl	8000d90 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000e70:	4b60      	ldr	r3, [pc, #384]	; (8000ff4 <CS43_Init+0x220>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b5e      	ldr	r3, [pc, #376]	; (8000ff4 <CS43_Init+0x220>)
 8000e7c:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <CS43_Init+0x220>)
 8000e80:	785b      	ldrb	r3, [r3, #1]
 8000e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <CS43_Init+0x220>)
 8000e8a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000e8c:	4b59      	ldr	r3, [pc, #356]	; (8000ff4 <CS43_Init+0x220>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <CS43_Init+0x220>)
 8000e98:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <CS43_Init+0x220>)
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	f023 0310 	bic.w	r3, r3, #16
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <CS43_Init+0x220>)
 8000ea6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000ea8:	4b52      	ldr	r3, [pc, #328]	; (8000ff4 <CS43_Init+0x220>)
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b50      	ldr	r3, [pc, #320]	; (8000ff4 <CS43_Init+0x220>)
 8000eb4:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000eb6:	4b4f      	ldr	r3, [pc, #316]	; (8000ff4 <CS43_Init+0x220>)
 8000eb8:	785b      	ldrb	r3, [r3, #1]
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <CS43_Init+0x220>)
 8000ec2:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <CS43_Init+0x220>)
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	f043 0303 	orr.w	r3, r3, #3
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <CS43_Init+0x220>)
 8000ed0:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000ed2:	4949      	ldr	r1, [pc, #292]	; (8000ff8 <CS43_Init+0x224>)
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f7ff ff3d 	bl	8000d54 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000eda:	4947      	ldr	r1, [pc, #284]	; (8000ff8 <CS43_Init+0x224>)
 8000edc:	2008      	movs	r0, #8
 8000ede:	f7ff ff57 	bl	8000d90 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000ee2:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <CS43_Init+0x220>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	f023 030f 	bic.w	r3, r3, #15
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <CS43_Init+0x220>)
 8000eee:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000ef0:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <CS43_Init+0x220>)
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <CS43_Init+0x220>)
 8000efc:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000efe:	493e      	ldr	r1, [pc, #248]	; (8000ff8 <CS43_Init+0x224>)
 8000f00:	2008      	movs	r0, #8
 8000f02:	f7ff ff27 	bl	8000d54 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000f06:	493c      	ldr	r1, [pc, #240]	; (8000ff8 <CS43_Init+0x224>)
 8000f08:	2009      	movs	r0, #9
 8000f0a:	f7ff ff41 	bl	8000d90 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000f0e:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <CS43_Init+0x220>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	f023 030f 	bic.w	r3, r3, #15
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <CS43_Init+0x220>)
 8000f1a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000f1c:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <CS43_Init+0x220>)
 8000f1e:	785b      	ldrb	r3, [r3, #1]
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <CS43_Init+0x220>)
 8000f28:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000f2a:	4933      	ldr	r1, [pc, #204]	; (8000ff8 <CS43_Init+0x224>)
 8000f2c:	2009      	movs	r0, #9
 8000f2e:	f7ff ff11 	bl	8000d54 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000f32:	4931      	ldr	r1, [pc, #196]	; (8000ff8 <CS43_Init+0x224>)
 8000f34:	200e      	movs	r0, #14
 8000f36:	f7ff ff2b 	bl	8000d90 <read_register>
	if(outputMode == MODE_ANAL)
 8000f3a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d123      	bne.n	8000f8a <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <CS43_Init+0x220>)
 8000f44:	785b      	ldrb	r3, [r3, #1]
 8000f46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <CS43_Init+0x220>)
 8000f4e:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <CS43_Init+0x220>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <CS43_Init+0x220>)
 8000f5c:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <CS43_Init+0x220>)
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	f023 0320 	bic.w	r3, r3, #32
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <CS43_Init+0x220>)
 8000f6a:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <CS43_Init+0x220>)
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	f023 0310 	bic.w	r3, r3, #16
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <CS43_Init+0x220>)
 8000f78:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <CS43_Init+0x220>)
 8000f7c:	785b      	ldrb	r3, [r3, #1]
 8000f7e:	f023 0308 	bic.w	r3, r3, #8
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <CS43_Init+0x220>)
 8000f86:	705a      	strb	r2, [r3, #1]
 8000f88:	e006      	b.n	8000f98 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8000f8a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <CS43_Init+0x220>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000f98:	4917      	ldr	r1, [pc, #92]	; (8000ff8 <CS43_Init+0x224>)
 8000f9a:	200e      	movs	r0, #14
 8000f9c:	f7ff feda 	bl	8000d54 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000fa0:	4915      	ldr	r1, [pc, #84]	; (8000ff8 <CS43_Init+0x224>)
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fef4 	bl	8000d90 <read_register>
	iData[1] = 0x00;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <CS43_Init+0x220>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000fae:	4912      	ldr	r1, [pc, #72]	; (8000ff8 <CS43_Init+0x224>)
 8000fb0:	200f      	movs	r0, #15
 8000fb2:	f7ff fecf 	bl	8000d54 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <CS43_Init+0x220>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000fbc:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <CS43_Init+0x224>)
 8000fbe:	2014      	movs	r0, #20
 8000fc0:	f7ff fec8 	bl	8000d54 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <CS43_Init+0x224>)
 8000fc6:	2015      	movs	r0, #21
 8000fc8:	f7ff fec4 	bl	8000d54 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000fcc:	490a      	ldr	r1, [pc, #40]	; (8000ff8 <CS43_Init+0x224>)
 8000fce:	201a      	movs	r0, #26
 8000fd0:	f7ff fec0 	bl	8000d54 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000fd4:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <CS43_Init+0x224>)
 8000fd6:	201b      	movs	r0, #27
 8000fd8:	f7ff febc 	bl	8000d54 <write_register>
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fe4:	b004      	add	sp, #16
 8000fe6:	4770      	bx	lr
 8000fe8:	20002eec 	.word	0x20002eec
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	20000354 	.word	0x20000354
 8000ff4:	20000350 	.word	0x20000350
 8000ff8:	20000351 	.word	0x20000351

08000ffc <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d837      	bhi.n	800107c <CS43_Enable_RightLeft+0x80>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <CS43_Enable_RightLeft+0x18>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001025 	.word	0x08001025
 8001018:	0800103b 	.word	0x0800103b
 800101c:	08001051 	.word	0x08001051
 8001020:	08001067 	.word	0x08001067
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001026:	22c0      	movs	r2, #192	; 0xc0
 8001028:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001036:	705a      	strb	r2, [r3, #1]
			break;
 8001038:	e021      	b.n	800107e <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800104c:	705a      	strb	r2, [r3, #1]
			break;
 800104e:	e016      	b.n	800107e <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001052:	22c0      	movs	r2, #192	; 0xc0
 8001054:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001062:	705a      	strb	r2, [r3, #1]
			break;
 8001064:	e00b      	b.n	800107e <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	f043 0320 	orr.w	r3, r3, #32
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001078:	705a      	strb	r2, [r3, #1]
			break;
 800107a:	e000      	b.n	800107e <CS43_Enable_RightLeft+0x82>
		default:
			break;
 800107c:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	f043 030c 	orr.w	r3, r3, #12
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800108a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	f043 0303 	orr.w	r3, r3, #3
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <CS43_Enable_RightLeft+0xb0>)
 8001098:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800109a:	4905      	ldr	r1, [pc, #20]	; (80010b0 <CS43_Enable_RightLeft+0xb4>)
 800109c:	2004      	movs	r0, #4
 800109e:	f7ff fe59 	bl	8000d54 <write_register>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000350 	.word	0x20000350
 80010b0:	20000351 	.word	0x20000351

080010b4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3b32      	subs	r3, #50	; 0x32
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 80010d2:	4a16      	ldr	r2, [pc, #88]	; (800112c <CS43_SetVolume+0x78>)
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80010d8:	4915      	ldr	r1, [pc, #84]	; (8001130 <CS43_SetVolume+0x7c>)
 80010da:	2014      	movs	r0, #20
 80010dc:	f7ff fe3a 	bl	8000d54 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80010e0:	4913      	ldr	r1, [pc, #76]	; (8001130 <CS43_SetVolume+0x7c>)
 80010e2:	2015      	movs	r0, #21
 80010e4:	f7ff fe36 	bl	8000d54 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b64      	cmp	r3, #100	; 0x64
 80010ec:	d80e      	bhi.n	800110c <CS43_SetVolume+0x58>
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <CS43_SetVolume+0x80>)
 80010fa:	fb82 1203 	smull	r1, r2, r2, r3
 80010fe:	1152      	asrs	r2, r2, #5
 8001100:	17db      	asrs	r3, r3, #31
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	3b18      	subs	r3, #24
 8001108:	b2db      	uxtb	r3, r3
 800110a:	e000      	b.n	800110e <CS43_SetVolume+0x5a>
 800110c:	2318      	movs	r3, #24
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <CS43_SetVolume+0x78>)
 8001110:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8001112:	4907      	ldr	r1, [pc, #28]	; (8001130 <CS43_SetVolume+0x7c>)
 8001114:	2020      	movs	r0, #32
 8001116:	f7ff fe1d 	bl	8000d54 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800111a:	4905      	ldr	r1, [pc, #20]	; (8001130 <CS43_SetVolume+0x7c>)
 800111c:	2021      	movs	r0, #33	; 0x21
 800111e:	f7ff fe19 	bl	8000d54 <write_register>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000350 	.word	0x20000350
 8001130:	20000351 	.word	0x20000351
 8001134:	51eb851f 	.word	0x51eb851f

08001138 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <CS43_Start+0x7c>)
 800113e:	2299      	movs	r2, #153	; 0x99
 8001140:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8001142:	491d      	ldr	r1, [pc, #116]	; (80011b8 <CS43_Start+0x80>)
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fe05 	bl	8000d54 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <CS43_Start+0x7c>)
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8001150:	4919      	ldr	r1, [pc, #100]	; (80011b8 <CS43_Start+0x80>)
 8001152:	2047      	movs	r0, #71	; 0x47
 8001154:	f7ff fdfe 	bl	8000d54 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8001158:	4917      	ldr	r1, [pc, #92]	; (80011b8 <CS43_Start+0x80>)
 800115a:	2032      	movs	r0, #50	; 0x32
 800115c:	f7ff fe18 	bl	8000d90 <read_register>
	iData[1] |= 0x80;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <CS43_Start+0x7c>)
 8001162:	785b      	ldrb	r3, [r3, #1]
 8001164:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <CS43_Start+0x7c>)
 800116c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800116e:	4912      	ldr	r1, [pc, #72]	; (80011b8 <CS43_Start+0x80>)
 8001170:	2032      	movs	r0, #50	; 0x32
 8001172:	f7ff fdef 	bl	8000d54 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8001176:	4910      	ldr	r1, [pc, #64]	; (80011b8 <CS43_Start+0x80>)
 8001178:	2032      	movs	r0, #50	; 0x32
 800117a:	f7ff fe09 	bl	8000d90 <read_register>
	iData[1] &= ~(0x80);
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <CS43_Start+0x7c>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <CS43_Start+0x7c>)
 800118a:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 800118c:	490a      	ldr	r1, [pc, #40]	; (80011b8 <CS43_Start+0x80>)
 800118e:	2032      	movs	r0, #50	; 0x32
 8001190:	f7ff fde0 	bl	8000d54 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <CS43_Start+0x7c>)
 8001196:	2200      	movs	r2, #0
 8001198:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800119a:	4907      	ldr	r1, [pc, #28]	; (80011b8 <CS43_Start+0x80>)
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fdd9 	bl	8000d54 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <CS43_Start+0x7c>)
 80011a4:	229e      	movs	r2, #158	; 0x9e
 80011a6:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 80011a8:	4903      	ldr	r1, [pc, #12]	; (80011b8 <CS43_Start+0x80>)
 80011aa:	2002      	movs	r0, #2
 80011ac:	f7ff fdd2 	bl	8000d54 <write_register>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000350 	.word	0x20000350
 80011b8:	20000351 	.word	0x20000351

080011bc <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2102      	movs	r1, #2
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <_EPD_Reset+0x38>)
 80011c6:	f002 feed 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f002 f890 	bl	80032f0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <_EPD_Reset+0x38>)
 80011d6:	f002 fee5 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80011da:	2002      	movs	r0, #2
 80011dc:	f002 f888 	bl	80032f0 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2102      	movs	r1, #2
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <_EPD_Reset+0x38>)
 80011e6:	f002 fedd 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	f002 f880 	bl	80032f0 <HAL_Delay>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020000 	.word	0x40020000

080011f8 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2104      	movs	r1, #4
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <_EPD_SendCommand+0x40>)
 8001208:	f002 fecc 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2140      	movs	r1, #64	; 0x40
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <_EPD_SendCommand+0x40>)
 8001212:	f002 fec7 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8001216:	1df9      	adds	r1, r7, #7
 8001218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121c:	2201      	movs	r2, #1
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <_EPD_SendCommand+0x44>)
 8001220:	f006 ffb1 	bl	8008186 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <_EPD_SendCommand+0x40>)
 800122a:	f002 febb 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020000 	.word	0x40020000
 800123c:	20002e28 	.word	0x20002e28

08001240 <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2104      	movs	r1, #4
 800124e:	480c      	ldr	r0, [pc, #48]	; (8001280 <_EPD_SendData+0x40>)
 8001250:	f002 fea8 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <_EPD_SendData+0x40>)
 800125a:	f002 fea3 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800125e:	1df9      	adds	r1, r7, #7
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	2201      	movs	r2, #1
 8001266:	4807      	ldr	r0, [pc, #28]	; (8001284 <_EPD_SendData+0x44>)
 8001268:	f006 ff8d 	bl	8008186 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <_EPD_SendData+0x40>)
 8001272:	f002 fe97 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40020000 	.word	0x40020000
 8001284:	20002e28 	.word	0x20002e28

08001288 <_EPD_ReadBusy>:

void _EPD_ReadBusy(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 800128c:	2108      	movs	r1, #8
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <_EPD_ReadBusy+0x20>)
 8001290:	f002 fe70 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(5);
 800129a:	2005      	movs	r0, #5
 800129c:	f002 f828 	bl	80032f0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 80012a0:	e7f4      	b.n	800128c <_EPD_ReadBusy+0x4>
			break;
 80012a2:	bf00      	nop
	}
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40020000 	.word	0x40020000

080012ac <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 80012b4:	2032      	movs	r0, #50	; 0x32
 80012b6:	f7ff ff9f 	bl	80011f8 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e009      	b.n	80012d4 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffb9 	bl	8001240 <_EPD_SendData>
	for(count=0; count<153; count++)
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b98      	cmp	r3, #152	; 0x98
 80012d8:	d9f2      	bls.n	80012c0 <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 80012da:	f7ff ffd5 	bl	8001288 <_EPD_ReadBusy>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffdc 	bl	80012ac <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 80012f4:	203f      	movs	r0, #63	; 0x3f
 80012f6:	f7ff ff7f 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3399      	adds	r3, #153	; 0x99
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff9d 	bl	8001240 <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8001306:	2003      	movs	r0, #3
 8001308:	f7ff ff76 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	339a      	adds	r3, #154	; 0x9a
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff94 	bl	8001240 <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8001318:	2004      	movs	r0, #4
 800131a:	f7ff ff6d 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	339b      	adds	r3, #155	; 0x9b
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff8b 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	339c      	adds	r3, #156	; 0x9c
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff85 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	339d      	adds	r3, #157	; 0x9d
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff7f 	bl	8001240 <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8001342:	202c      	movs	r0, #44	; 0x2c
 8001344:	f7ff ff58 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	339e      	adds	r3, #158	; 0x9e
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff76 	bl	8001240 <_EPD_SendData>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8001360:	2022      	movs	r0, #34	; 0x22
 8001362:	f7ff ff49 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 8001366:	20c7      	movs	r0, #199	; 0xc7
 8001368:	f7ff ff6a 	bl	8001240 <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 800136c:	2020      	movs	r0, #32
 800136e:	f7ff ff43 	bl	80011f8 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8001372:	f7ff ff89 	bl	8001288 <_EPD_ReadBusy>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}

0800137a <_EPD_SetWindows>:
	_EPD_SendData(0x0F);
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
	_EPD_ReadBusy();
}

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 800137a:	b590      	push	{r4, r7, lr}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	4604      	mov	r4, r0
 8001382:	4608      	mov	r0, r1
 8001384:	4611      	mov	r1, r2
 8001386:	461a      	mov	r2, r3
 8001388:	4623      	mov	r3, r4
 800138a:	80fb      	strh	r3, [r7, #6]
 800138c:	4603      	mov	r3, r0
 800138e:	80bb      	strh	r3, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8001398:	2044      	movs	r0, #68	; 0x44
 800139a:	f7ff ff2d 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff4a 	bl	8001240 <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff43 	bl	8001240 <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 80013ba:	2045      	movs	r0, #69	; 0x45
 80013bc:	f7ff ff1c 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 80013c0:	88bb      	ldrh	r3, [r7, #4]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff3b 	bl	8001240 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff34 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 80013d8:	883b      	ldrh	r3, [r7, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff2f 	bl	8001240 <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 80013e2:	883b      	ldrh	r3, [r7, #0]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff28 	bl	8001240 <_EPD_SendData>
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}

080013f8 <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	460a      	mov	r2, r1
 8001402:	80fb      	strh	r3, [r7, #6]
 8001404:	4613      	mov	r3, r2
 8001406:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8001408:	204e      	movs	r0, #78	; 0x4e
 800140a:	f7ff fef5 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff14 	bl	8001240 <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8001418:	204f      	movs	r0, #79	; 0x4f
 800141a:	f7ff feed 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff0c 	bl	8001240 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	0a1b      	lsrs	r3, r3, #8
 800142c:	b29b      	uxth	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff05 	bl	8001240 <_EPD_SendData>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <EPD_Init>:



void EPD_Init(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2104      	movs	r1, #4
 8001448:	4822      	ldr	r0, [pc, #136]	; (80014d4 <EPD_Init+0x94>)
 800144a:	f002 fdab 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	4820      	ldr	r0, [pc, #128]	; (80014d4 <EPD_Init+0x94>)
 8001454:	f002 fda6 	bl	8003fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2102      	movs	r1, #2
 800145c:	481d      	ldr	r0, [pc, #116]	; (80014d4 <EPD_Init+0x94>)
 800145e:	f002 fda1 	bl	8003fa4 <HAL_GPIO_WritePin>

	_EPD_Reset();
 8001462:	f7ff feab 	bl	80011bc <_EPD_Reset>
	HAL_Delay(100);
 8001466:	2064      	movs	r0, #100	; 0x64
 8001468:	f001 ff42 	bl	80032f0 <HAL_Delay>

	_EPD_ReadBusy();
 800146c:	f7ff ff0c 	bl	8001288 <_EPD_ReadBusy>
	_EPD_SendCommand(0x12);  //SWRESET
 8001470:	2012      	movs	r0, #18
 8001472:	f7ff fec1 	bl	80011f8 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8001476:	f7ff ff07 	bl	8001288 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff febc 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 8001480:	2027      	movs	r0, #39	; 0x27
 8001482:	f7ff fedd 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(0x01);
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff feda 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fed7 	bl	8001240 <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8001492:	2011      	movs	r0, #17
 8001494:	f7ff feb0 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8001498:	2003      	movs	r0, #3
 800149a:	f7ff fed1 	bl	8001240 <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 800149e:	f240 1327 	movw	r3, #295	; 0x127
 80014a2:	227f      	movs	r2, #127	; 0x7f
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ff67 	bl	800137a <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 80014ac:	2021      	movs	r0, #33	; 0x21
 80014ae:	f7ff fea3 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff fec4 	bl	8001240 <_EPD_SendData>
	_EPD_SendData(0x80);
 80014b8:	2080      	movs	r0, #128	; 0x80
 80014ba:	f7ff fec1 	bl	8001240 <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 80014be:	2100      	movs	r1, #0
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff ff99 	bl	80013f8 <_EPD_SetCursor>
	_EPD_ReadBusy();
 80014c6:	f7ff fedf 	bl	8001288 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <EPD_Init+0x98>)
 80014cc:	f7ff ff0b 	bl	80012e6 <_EPD_LUT_by_host>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40020000 	.word	0x40020000
 80014d8:	20000000 	.word	0x20000000

080014dc <EPD_Clear>:

void EPD_Clear(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 80014e2:	2024      	movs	r0, #36	; 0x24
 80014e4:	f7ff fe88 	bl	80011f8 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	80fb      	strh	r3, [r7, #6]
 80014ec:	e005      	b.n	80014fa <EPD_Clear+0x1e>
		_EPD_SendData(0xff);
 80014ee:	20ff      	movs	r0, #255	; 0xff
 80014f0:	f7ff fea6 	bl	8001240 <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	3301      	adds	r3, #1
 80014f8:	80fb      	strh	r3, [r7, #6]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001500:	d3f5      	bcc.n	80014ee <EPD_Clear+0x12>
	}
	_EPD_TurnOnDisplay();
 8001502:	f7ff ff2b 	bl	800135c <_EPD_TurnOnDisplay>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <EPD_Display>:

void EPD_Display(uint8_t *image) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8001516:	2024      	movs	r0, #36	; 0x24
 8001518:	f7ff fe6e 	bl	80011f8 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 800151c:	2300      	movs	r3, #0
 800151e:	81fb      	strh	r3, [r7, #14]
 8001520:	e009      	b.n	8001536 <EPD_Display+0x28>
		_EPD_SendData(image[i]);
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fe88 	bl	8001240 <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	3301      	adds	r3, #1
 8001534:	81fb      	strh	r3, [r7, #14]
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800153c:	d3f1      	bcc.n	8001522 <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 800153e:	f7ff ff0d 	bl	800135c <_EPD_TurnOnDisplay>
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <EPD_Sleep>:
		_EPD_SendData(image[i]);
	}
	_EPD_TurnOnDisplay_Partial();
}

void EPD_Sleep(void) {
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x10); //enter deep sleep
 800154e:	2010      	movs	r0, #16
 8001550:	f7ff fe52 	bl	80011f8 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fe73 	bl	8001240 <_EPD_SendData>
	HAL_Delay(100);
 800155a:	2064      	movs	r0, #100	; 0x64
 800155c:	f001 fec8 	bl	80032f0 <HAL_Delay>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <Conv_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Conv_ADC(uint8_t *buf, int32_t *result) {
 8001564:	b410      	push	{r4}
	*result = 0xFF000000 * ((buf[1] >> 7) & 1) + (buf[1] << 16) + (buf[0] << 8) + buf[3];
 8001566:	7843      	ldrb	r3, [r0, #1]
 8001568:	09dc      	lsrs	r4, r3, #7
 800156a:	0222      	lsls	r2, r4, #8
 800156c:	1b12      	subs	r2, r2, r4
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8001574:	78c2      	ldrb	r2, [r0, #3]
 8001576:	4413      	add	r3, r2
 8001578:	7802      	ldrb	r2, [r0, #0]
 800157a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800157e:	600b      	str	r3, [r1, #0]
}
 8001580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_I2S_RxHalfCpltCallback>:

uint32_t rxHalfCpltCounter = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001588:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 800158a:	6802      	ldr	r2, [r0, #0]
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_I2S_RxHalfCpltCallback+0x60>)
 800158e:	429a      	cmp	r2, r3
 8001590:	d000      	beq.n	8001594 <HAL_I2S_RxHalfCpltCallback+0xc>
		if (display_counter < 296) {
			display_array[display_counter] = BUFF_CONV[0];
			display_counter++;
		}
	}
}
 8001592:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[0], &BUFF_CONV[0]); // LEFT
 8001594:	4c15      	ldr	r4, [pc, #84]	; (80015ec <HAL_I2S_RxHalfCpltCallback+0x64>)
 8001596:	4d16      	ldr	r5, [pc, #88]	; (80015f0 <HAL_I2S_RxHalfCpltCallback+0x68>)
 8001598:	4621      	mov	r1, r4
 800159a:	4628      	mov	r0, r5
 800159c:	f7ff ffe2 	bl	8001564 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]); // RIGHT
 80015a0:	1d21      	adds	r1, r4, #4
 80015a2:	1d28      	adds	r0, r5, #4
 80015a4:	f7ff ffde 	bl	8001564 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[0];
 80015a8:	edd4 7a00 	vldr	s15, [r4]
 80015ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 80015b2:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[1];
 80015b6:	ed94 7a01 	vldr	s14, [r4, #4]
 80015ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80015be:	ed83 7a01 	vstr	s14, [r3, #4]
		rxHalfCpltCounter++;
 80015c2:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_I2S_RxHalfCpltCallback+0x70>)
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	6013      	str	r3, [r2, #0]
		if (display_counter < 296) {
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_I2S_RxHalfCpltCallback+0x74>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 80015d2:	d2de      	bcs.n	8001592 <HAL_I2S_RxHalfCpltCallback+0xa>
			display_array[display_counter] = BUFF_CONV[0];
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_I2S_RxHalfCpltCallback+0x78>)
 80015d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80015da:	edc2 7a00 	vstr	s15, [r2]
			display_counter++;
 80015de:	3301      	adds	r3, #1
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_I2S_RxHalfCpltCallback+0x74>)
 80015e2:	8013      	strh	r3, [r2, #0]
}
 80015e4:	e7d5      	b.n	8001592 <HAL_I2S_RxHalfCpltCallback+0xa>
 80015e6:	bf00      	nop
 80015e8:	40003800 	.word	0x40003800
 80015ec:	200027b4 	.word	0x200027b4
 80015f0:	20002e84 	.word	0x20002e84
 80015f4:	20001710 	.word	0x20001710
 80015f8:	200003b0 	.word	0x200003b0
 80015fc:	200003a8 	.word	0x200003a8
 8001600:	20002f34 	.word	0x20002f34

08001604 <HAL_I2S_RxCpltCallback>:

uint32_t rxCpltCounter = 0;
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001604:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 8001606:	6802      	ldr	r2, [r0, #0]
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_I2S_RxCpltCallback+0x60>)
 800160a:	429a      	cmp	r2, r3
 800160c:	d000      	beq.n	8001610 <HAL_I2S_RxCpltCallback+0xc>
		if (display_counter < 296) {
			display_array[display_counter] = BUFF_CONV[2];
			display_counter++;
		}
	}
}
 800160e:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[8], &BUFF_CONV[2]); // LEFT
 8001610:	4c15      	ldr	r4, [pc, #84]	; (8001668 <HAL_I2S_RxCpltCallback+0x64>)
 8001612:	4d16      	ldr	r5, [pc, #88]	; (800166c <HAL_I2S_RxCpltCallback+0x68>)
 8001614:	4621      	mov	r1, r4
 8001616:	4628      	mov	r0, r5
 8001618:	f7ff ffa4 	bl	8001564 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]); // RIGHT
 800161c:	1d21      	adds	r1, r4, #4
 800161e:	1d28      	adds	r0, r5, #4
 8001620:	f7ff ffa0 	bl	8001564 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[2];
 8001624:	edd4 7a00 	vldr	s15, [r4]
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_I2S_RxCpltCallback+0x6c>)
 800162e:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[3];
 8001632:	ed94 7a01 	vldr	s14, [r4, #4]
 8001636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800163a:	ed83 7a01 	vstr	s14, [r3, #4]
		rxCpltCounter++;
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_I2S_RxCpltCallback+0x70>)
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	6013      	str	r3, [r2, #0]
		if (display_counter < 296) {
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_I2S_RxCpltCallback+0x74>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800164e:	d2de      	bcs.n	800160e <HAL_I2S_RxCpltCallback+0xa>
			display_array[display_counter] = BUFF_CONV[2];
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_I2S_RxCpltCallback+0x78>)
 8001652:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001656:	edc2 7a00 	vstr	s15, [r2]
			display_counter++;
 800165a:	3301      	adds	r3, #1
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_I2S_RxCpltCallback+0x74>)
 800165e:	8013      	strh	r3, [r2, #0]
}
 8001660:	e7d5      	b.n	800160e <HAL_I2S_RxCpltCallback+0xa>
 8001662:	bf00      	nop
 8001664:	40003800 	.word	0x40003800
 8001668:	200027bc 	.word	0x200027bc
 800166c:	20002e8c 	.word	0x20002e8c
 8001670:	20001710 	.word	0x20001710
 8001674:	200003ac 	.word	0x200003ac
 8001678:	200003a8 	.word	0x200003a8
 800167c:	20002f34 	.word	0x20002f34

08001680 <HAL_I2S_TxCpltCallback>:
	}
}

uint32_t txCpltCounter = 0;
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001680:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI3)
 8001682:	6802      	ldr	r2, [r0, #0]
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_I2S_TxCpltCallback+0x48>)
 8001686:	429a      	cmp	r2, r3
 8001688:	d000      	beq.n	800168c <HAL_I2S_TxCpltCallback+0xc>
	{
		PROC_SAMPLES[1] = wave_gen('s', txCpltCounter, 440.0F) * 10000;
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
		txCpltCounter++;
	}
}
 800168a:	bd38      	pop	{r3, r4, r5, pc}
 800168c:	4604      	mov	r4, r0
		PROC_SAMPLES[1] = wave_gen('s', txCpltCounter, 440.0F) * 10000;
 800168e:	4d0f      	ldr	r5, [pc, #60]	; (80016cc <HAL_I2S_TxCpltCallback+0x4c>)
 8001690:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80016d0 <HAL_I2S_TxCpltCallback+0x50>
 8001694:	6829      	ldr	r1, [r5, #0]
 8001696:	2073      	movs	r0, #115	; 0x73
 8001698:	f001 f976 	bl	8002988 <wave_gen>
 800169c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80016d4 <HAL_I2S_TxCpltCallback+0x54>
 80016a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_I2S_TxCpltCallback+0x58>)
 80016a6:	ed83 0a01 	vstr	s0, [r3, #4]
		DAC_BUFF.DAC16[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = (int16_t)PROC_SAMPLES[1];
 80016aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_I2S_TxCpltCallback+0x5c>)
 80016b6:	ee10 1a10 	vmov	r1, s0
 80016ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		txCpltCounter++;
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	602b      	str	r3, [r5, #0]
}
 80016c4:	e7e1      	b.n	800168a <HAL_I2S_TxCpltCallback+0xa>
 80016c6:	bf00      	nop
 80016c8:	40003c00 	.word	0x40003c00
 80016cc:	200003b4 	.word	0x200003b4
 80016d0:	43dc0000 	.word	0x43dc0000
 80016d4:	461c4000 	.word	0x461c4000
 80016d8:	20001718 	.word	0x20001718
 80016dc:	200027c4 	.word	0x200027c4

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b500      	push	{lr}
 80016e2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e4:	2230      	movs	r2, #48	; 0x30
 80016e6:	2100      	movs	r1, #0
 80016e8:	a808      	add	r0, sp, #32
 80016ea:	f00b faed 	bl	800ccc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ee:	2300      	movs	r3, #0
 80016f0:	9303      	str	r3, [sp, #12]
 80016f2:	9304      	str	r3, [sp, #16]
 80016f4:	9305      	str	r3, [sp, #20]
 80016f6:	9306      	str	r3, [sp, #24]
 80016f8:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	4a21      	ldr	r2, [pc, #132]	; (8001784 <SystemClock_Config+0xa4>)
 80016fe:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001700:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001704:	6411      	str	r1, [r2, #64]	; 0x40
 8001706:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001708:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800170c:	9201      	str	r2, [sp, #4]
 800170e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <SystemClock_Config+0xa8>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001726:	2301      	movs	r3, #1
 8001728:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001730:	2302      	movs	r3, #2
 8001732:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001734:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001738:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800173a:	2208      	movs	r2, #8
 800173c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800173e:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001742:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001744:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001746:	2307      	movs	r3, #7
 8001748:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174a:	a808      	add	r0, sp, #32
 800174c:	f005 fef2 	bl	8007534 <HAL_RCC_OscConfig>
 8001750:	b998      	cbnz	r0, 800177a <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800175e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001762:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001768:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800176a:	2105      	movs	r1, #5
 800176c:	a803      	add	r0, sp, #12
 800176e:	f006 f959 	bl	8007a24 <HAL_RCC_ClockConfig>
 8001772:	b920      	cbnz	r0, 800177e <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 8001774:	b015      	add	sp, #84	; 0x54
 8001776:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800177c:	e7fe      	b.n	800177c <SystemClock_Config+0x9c>
 800177e:	b672      	cpsid	i
 8001780:	e7fe      	b.n	8001780 <SystemClock_Config+0xa0>
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000

0800178c <PeriphCommonClock_Config>:
{
 800178c:	b500      	push	{lr}
 800178e:	b085      	sub	sp, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001790:	2300      	movs	r3, #0
 8001792:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001794:	2301      	movs	r3, #1
 8001796:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8001798:	23b5      	movs	r3, #181	; 0xb5
 800179a:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a0:	4668      	mov	r0, sp
 80017a2:	f006 fb27 	bl	8007df4 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	b910      	cbnz	r0, 80017ae <PeriphCommonClock_Config+0x22>
}
 80017a8:	b005      	add	sp, #20
 80017aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80017ae:	b672      	cpsid	i
	while (1)
 80017b0:	e7fe      	b.n	80017b0 <PeriphCommonClock_Config+0x24>
 80017b2:	0000      	movs	r0, r0
 80017b4:	0000      	movs	r0, r0
	...

080017b8 <main>:
{
 80017b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017bc:	b0a5      	sub	sp, #148	; 0x94
  HAL_Init();
 80017be:	f001 fd25 	bl	800320c <HAL_Init>
  SystemClock_Config();
 80017c2:	f7ff ff8d 	bl	80016e0 <SystemClock_Config>
  PeriphCommonClock_Config();
 80017c6:	f7ff ffe1 	bl	800178c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	2400      	movs	r4, #0
 80017cc:	941a      	str	r4, [sp, #104]	; 0x68
 80017ce:	941b      	str	r4, [sp, #108]	; 0x6c
 80017d0:	941c      	str	r4, [sp, #112]	; 0x70
 80017d2:	941d      	str	r4, [sp, #116]	; 0x74
 80017d4:	941e      	str	r4, [sp, #120]	; 0x78
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	9415      	str	r4, [sp, #84]	; 0x54
 80017d8:	4db2      	ldr	r5, [pc, #712]	; (8001aa4 <main+0x2ec>)
 80017da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e0:	632b      	str	r3, [r5, #48]	; 0x30
 80017e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e8:	9315      	str	r3, [sp, #84]	; 0x54
 80017ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ec:	9416      	str	r4, [sp, #88]	; 0x58
 80017ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	632b      	str	r3, [r5, #48]	; 0x30
 80017f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	9316      	str	r3, [sp, #88]	; 0x58
 80017fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	9417      	str	r4, [sp, #92]	; 0x5c
 8001802:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	632b      	str	r3, [r5, #48]	; 0x30
 800180a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	9317      	str	r3, [sp, #92]	; 0x5c
 8001812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	9418      	str	r4, [sp, #96]	; 0x60
 8001816:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	632b      	str	r3, [r5, #48]	; 0x30
 800181e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	9318      	str	r3, [sp, #96]	; 0x60
 8001826:	9b18      	ldr	r3, [sp, #96]	; 0x60
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001828:	9419      	str	r4, [sp, #100]	; 0x64
 800182a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	632b      	str	r3, [r5, #48]	; 0x30
 8001832:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	9319      	str	r3, [sp, #100]	; 0x64
 800183a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 800183c:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8001af0 <main+0x338>
 8001840:	4622      	mov	r2, r4
 8001842:	2101      	movs	r1, #1
 8001844:	4648      	mov	r0, r9
 8001846:	f002 fbad 	bl	8003fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 800184a:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8001af4 <main+0x33c>
 800184e:	4622      	mov	r2, r4
 8001850:	2146      	movs	r1, #70	; 0x46
 8001852:	4640      	mov	r0, r8
 8001854:	f002 fba6 	bl	8003fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8001858:	4f93      	ldr	r7, [pc, #588]	; (8001aa8 <main+0x2f0>)
 800185a:	4622      	mov	r2, r4
 800185c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001860:	4638      	mov	r0, r7
 8001862:	f002 fb9f 	bl	8003fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	2110      	movs	r1, #16
 800186a:	4638      	mov	r0, r7
 800186c:	f002 fb9a 	bl	8003fa4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8001870:	2601      	movs	r6, #1
 8001872:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 800187a:	a91a      	add	r1, sp, #104	; 0x68
 800187c:	4648      	mov	r0, r9
 800187e:	f002 f9dd 	bl	8003c3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EncB_Pin|EncA_Pin;
 8001882:	230c      	movs	r3, #12
 8001884:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001886:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	a91a      	add	r1, sp, #104	; 0x68
 800188c:	4648      	mov	r0, r9
 800188e:	f002 f9d5 	bl	8003c3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn0_Pin|EPD_BUSY_Pin;
 8001892:	2309      	movs	r3, #9
 8001894:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	a91a      	add	r1, sp, #104	; 0x68
 800189c:	4640      	mov	r0, r8
 800189e:	f002 f9cd 	bl	8003c3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin;
 80018a2:	2346      	movs	r3, #70	; 0x46
 80018a4:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	a91a      	add	r1, sp, #104	; 0x68
 80018ae:	4640      	mov	r0, r8
 80018b0:	f002 f9c4 	bl	8003c3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 80018b4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80018b8:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ba:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018bc:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	a91a      	add	r1, sp, #104	; 0x68
 80018c0:	487a      	ldr	r0, [pc, #488]	; (8001aac <main+0x2f4>)
 80018c2:	f002 f9bb 	bl	8003c3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Btn1_Pin;
 80018c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ca:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018cc:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ce:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 80018d0:	a91a      	add	r1, sp, #104	; 0x68
 80018d2:	4638      	mov	r0, r7
 80018d4:	f002 f9b2 	bl	8003c3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 80018d8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80018dc:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	961b      	str	r6, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e4:	a91a      	add	r1, sp, #104	; 0x68
 80018e6:	4638      	mov	r0, r7
 80018e8:	f002 f9a8 	bl	8003c3c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ec:	941a      	str	r4, [sp, #104]	; 0x68
 80018ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f4:	632b      	str	r3, [r5, #48]	; 0x30
 80018f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	931a      	str	r3, [sp, #104]	; 0x68
 80018fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001900:	4622      	mov	r2, r4
 8001902:	4621      	mov	r1, r4
 8001904:	200e      	movs	r0, #14
 8001906:	f001 fdf2 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800190a:	200e      	movs	r0, #14
 800190c:	f001 fe0b 	bl	8003526 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001910:	4622      	mov	r2, r4
 8001912:	4621      	mov	r1, r4
 8001914:	2010      	movs	r0, #16
 8001916:	f001 fdea 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800191a:	2010      	movs	r0, #16
 800191c:	f001 fe03 	bl	8003526 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8001920:	4863      	ldr	r0, [pc, #396]	; (8001ab0 <main+0x2f8>)
 8001922:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <main+0x2fc>)
 8001924:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001926:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <main+0x300>)
 8001928:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800192a:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800192c:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800192e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001932:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001934:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001936:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001938:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800193c:	f004 f8bc 	bl	8005ab8 <HAL_I2C_Init>
 8001940:	2800      	cmp	r0, #0
 8001942:	f040 80e1 	bne.w	8001b08 <main+0x350>
  hi2s2.Instance = SPI2;
 8001946:	485d      	ldr	r0, [pc, #372]	; (8001abc <main+0x304>)
 8001948:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <main+0x308>)
 800194a:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800194c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001950:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001952:	2300      	movs	r3, #0
 8001954:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001956:	2203      	movs	r2, #3
 8001958:	60c2      	str	r2, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800195a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195e:	6102      	str	r2, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001960:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001964:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001966:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001968:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800196a:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800196c:	f005 f83a 	bl	80069e4 <HAL_I2S_Init>
 8001970:	2800      	cmp	r0, #0
 8001972:	f040 80cb 	bne.w	8001b0c <main+0x354>
  hi2s3.Instance = SPI3;
 8001976:	4853      	ldr	r0, [pc, #332]	; (8001ac4 <main+0x30c>)
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <main+0x310>)
 800197a:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800197c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001980:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001982:	2300      	movs	r3, #0
 8001984:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001986:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001988:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800198a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800198e:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001990:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001992:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001994:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001996:	f005 f825 	bl	80069e4 <HAL_I2S_Init>
 800199a:	2800      	cmp	r0, #0
 800199c:	f040 80b8 	bne.w	8001b10 <main+0x358>
  MX_USB_HOST_Init();
 80019a0:	f00a fe12 	bl	800c5c8 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 80019a4:	f007 fdae 	bl	8009504 <MX_FATFS_Init>
  hspi1.Instance = SPI1;
 80019a8:	4848      	ldr	r0, [pc, #288]	; (8001acc <main+0x314>)
 80019aa:	4b49      	ldr	r3, [pc, #292]	; (8001ad0 <main+0x318>)
 80019ac:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019b2:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80019b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019be:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c0:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c6:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80019c8:	2228      	movs	r2, #40	; 0x28
 80019ca:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019cc:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ce:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019d2:	230a      	movs	r3, #10
 80019d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019d6:	f006 fb4d 	bl	8008074 <HAL_SPI_Init>
 80019da:	2800      	cmp	r0, #0
 80019dc:	f040 809a 	bne.w	8001b14 <main+0x35c>
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_SET);
 80019e0:	4f31      	ldr	r7, [pc, #196]	; (8001aa8 <main+0x2f0>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	4638      	mov	r0, r7
 80019ea:	f002 fadb 	bl	8003fa4 <HAL_GPIO_WritePin>
	pedalboard.active_pedals = 0;
 80019ee:	4839      	ldr	r0, [pc, #228]	; (8001ad4 <main+0x31c>)
 80019f0:	2400      	movs	r4, #0
 80019f2:	7004      	strb	r4, [r0, #0]
	pedalboard_append(&pedalboard, LPF);
 80019f4:	2105      	movs	r1, #5
 80019f6:	f001 f837 	bl	8002a68 <pedalboard_append>
	CS43_Init(hi2c1, MODE_I2S);
 80019fa:	4d2d      	ldr	r5, [pc, #180]	; (8001ab0 <main+0x2f8>)
 80019fc:	9411      	str	r4, [sp, #68]	; 0x44
 80019fe:	2244      	movs	r2, #68	; 0x44
 8001a00:	f105 0110 	add.w	r1, r5, #16
 8001a04:	4668      	mov	r0, sp
 8001a06:	f00b f951 	bl	800ccac <memcpy>
 8001a0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a0e:	f7ff f9e1 	bl	8000dd4 <CS43_Init>
	CS43_SetVolume(0);
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7ff fb4e 	bl	80010b4 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f7ff faef 	bl	8000ffc <CS43_Enable_RightLeft>
	CS43_Start();
 8001a1e:	f7ff fb8b 	bl	8001138 <CS43_Start>
	HAL_I2S_Receive_DMA(&hi2s2, &ADC_BUFF.ADC16[0], 4);
 8001a22:	2204      	movs	r2, #4
 8001a24:	492c      	ldr	r1, [pc, #176]	; (8001ad8 <main+0x320>)
 8001a26:	4825      	ldr	r0, [pc, #148]	; (8001abc <main+0x304>)
 8001a28:	f005 f91c 	bl	8006c64 <HAL_I2S_Receive_DMA>
	EPD_Init();
 8001a2c:	f7ff fd08 	bl	8001440 <EPD_Init>
	EPD_Clear();
 8001a30:	f7ff fd54 	bl	80014dc <EPD_Clear>
	draw_clean(image);
 8001a34:	4e29      	ldr	r6, [pc, #164]	; (8001adc <main+0x324>)
 8001a36:	4630      	mov	r0, r6
 8001a38:	f000 fb00 	bl	800203c <draw_clean>
	draw_rectangle(image, 36, 56, 88, 20);
 8001a3c:	f04f 0814 	mov.w	r8, #20
 8001a40:	f8cd 8000 	str.w	r8, [sp]
 8001a44:	2358      	movs	r3, #88	; 0x58
 8001a46:	2238      	movs	r2, #56	; 0x38
 8001a48:	2124      	movs	r1, #36	; 0x24
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	f000 fa05 	bl	8001e5a <draw_rectangle>
	sprintf(row, "g33ky toad");
 8001a50:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <main+0x328>)
 8001a52:	ab1f      	add	r3, sp, #124	; 0x7c
 8001a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a56:	c303      	stmia	r3!, {r0, r1}
 8001a58:	f823 2b02 	strh.w	r2, [r3], #2
 8001a5c:	0c12      	lsrs	r2, r2, #16
 8001a5e:	701a      	strb	r2, [r3, #0]
	draw_text(image, row, 40, 60);
 8001a60:	233c      	movs	r3, #60	; 0x3c
 8001a62:	2228      	movs	r2, #40	; 0x28
 8001a64:	a91f      	add	r1, sp, #124	; 0x7c
 8001a66:	4630      	mov	r0, r6
 8001a68:	f000 fab9 	bl	8001fde <draw_text>
	sprintf(row, "digital pedal");
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <main+0x32c>)
 8001a6e:	ad1f      	add	r5, sp, #124	; 0x7c
 8001a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a72:	c507      	stmia	r5!, {r0, r1, r2}
 8001a74:	802b      	strh	r3, [r5, #0]
	draw_text(image, row, 20, 90);
 8001a76:	235a      	movs	r3, #90	; 0x5a
 8001a78:	4642      	mov	r2, r8
 8001a7a:	a91f      	add	r1, sp, #124	; 0x7c
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	f000 faae 	bl	8001fde <draw_text>
	EPD_Display(image);
 8001a82:	4630      	mov	r0, r6
 8001a84:	f7ff fd43 	bl	800150e <EPD_Display>
	EPD_Sleep();
 8001a88:	f7ff fd5f 	bl	800154a <EPD_Sleep>
	encoderA.current = 0;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <main+0x330>)
 8001a8e:	805c      	strh	r4, [r3, #2]
	encoderB.current = 0;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <main+0x334>)
 8001a92:	805c      	strh	r4, [r3, #2]
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 8001a94:	4622      	mov	r2, r4
 8001a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	f002 fa82 	bl	8003fa4 <HAL_GPIO_WritePin>
	uint32_t lasttick = 0;
 8001aa0:	9413      	str	r4, [sp, #76]	; 0x4c
 8001aa2:	e029      	b.n	8001af8 <main+0x340>
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	200003d8 	.word	0x200003d8
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	000186a0 	.word	0x000186a0
 8001abc:	20002ea4 	.word	0x20002ea4
 8001ac0:	40003800 	.word	0x40003800
 8001ac4:	20002eec 	.word	0x20002eec
 8001ac8:	40003c00 	.word	0x40003c00
 8001acc:	20002e28 	.word	0x20002e28
 8001ad0:	40013000 	.word	0x40013000
 8001ad4:	200027e4 	.word	0x200027e4
 8001ad8:	20002e84 	.word	0x20002e84
 8001adc:	20000490 	.word	0x20000490
 8001ae0:	0800d844 	.word	0x0800d844
 8001ae4:	0800d850 	.word	0x0800d850
 8001ae8:	20002e80 	.word	0x20002e80
 8001aec:	2000048c 	.word	0x2000048c
 8001af0:	40020800 	.word	0x40020800
 8001af4:	40020000 	.word	0x40020000
				toggle_single_pixel(image, 64 + (int)((float)display_array[i] / 17000.0 * 64.0), i);
 8001af8:	a5a4      	add	r5, pc, #656	; (adr r5, 8001d8c <main+0x5d4>)
 8001afa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8001afe:	f04f 0a00 	mov.w	sl, #0
 8001b02:	f8df b290 	ldr.w	fp, [pc, #656]	; 8001d94 <main+0x5dc>
 8001b06:	e08a      	b.n	8001c1e <main+0x466>
 8001b08:	b672      	cpsid	i
	while (1)
 8001b0a:	e7fe      	b.n	8001b0a <main+0x352>
 8001b0c:	b672      	cpsid	i
 8001b0e:	e7fe      	b.n	8001b0e <main+0x356>
 8001b10:	b672      	cpsid	i
 8001b12:	e7fe      	b.n	8001b12 <main+0x35a>
 8001b14:	b672      	cpsid	i
 8001b16:	e7fe      	b.n	8001b16 <main+0x35e>
			lasttick = HAL_GetTick();
 8001b18:	f001 fbde 	bl	80032d8 <HAL_GetTick>
 8001b1c:	9013      	str	r0, [sp, #76]	; 0x4c
			encoderA.last = encoderA.current;
 8001b1e:	4a8a      	ldr	r2, [pc, #552]	; (8001d48 <main+0x590>)
 8001b20:	8853      	ldrh	r3, [r2, #2]
 8001b22:	8013      	strh	r3, [r2, #0]
			encoderB.last = encoderB.current;
 8001b24:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <main+0x594>)
 8001b26:	885a      	ldrh	r2, [r3, #2]
 8001b28:	801a      	strh	r2, [r3, #0]
			sA = HAL_GPIO_ReadPin(EncA_GPIO_Port, EncA_Pin);
 8001b2a:	2108      	movs	r1, #8
 8001b2c:	4888      	ldr	r0, [pc, #544]	; (8001d50 <main+0x598>)
 8001b2e:	f002 fa21 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001b32:	4606      	mov	r6, r0
			sB = HAL_GPIO_ReadPin(EncB_GPIO_Port, EncB_Pin);
 8001b34:	2104      	movs	r1, #4
 8001b36:	4886      	ldr	r0, [pc, #536]	; (8001d50 <main+0x598>)
 8001b38:	f002 fa1c 	bl	8003f74 <HAL_GPIO_ReadPin>
 8001b3c:	4607      	mov	r7, r0
			HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, sA);
 8001b3e:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8001d98 <main+0x5e0>
 8001b42:	4632      	mov	r2, r6
 8001b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b48:	4640      	mov	r0, r8
 8001b4a:	f002 fa2b 	bl	8003fa4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, sB);
 8001b4e:	463a      	mov	r2, r7
 8001b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b54:	4640      	mov	r0, r8
 8001b56:	f002 fa25 	bl	8003fa4 <HAL_GPIO_WritePin>
			temp = sA == GPIO_PIN_SET ? ceil : 0;
 8001b5a:	2e01      	cmp	r6, #1
 8001b5c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b60:	bf0c      	ite	eq
 8001b62:	4619      	moveq	r1, r3
 8001b64:	2100      	movne	r1, #0
			encoderA.current = (encoderA.last * alpha / 100) + (temp * (100 - alpha) / 100);
 8001b66:	4a78      	ldr	r2, [pc, #480]	; (8001d48 <main+0x590>)
 8001b68:	8816      	ldrh	r6, [r2, #0]
 8001b6a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8001b6e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001b72:	4878      	ldr	r0, [pc, #480]	; (8001d54 <main+0x59c>)
 8001b74:	fb80 c003 	smull	ip, r0, r0, r3
 8001b78:	17da      	asrs	r2, r3, #31
 8001b7a:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 8001b7e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8001b82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b86:	4873      	ldr	r0, [pc, #460]	; (8001d54 <main+0x59c>)
 8001b88:	fb80 1303 	smull	r1, r3, r0, r3
 8001b8c:	eb02 1263 	add.w	r2, r2, r3, asr #5
 8001b90:	b292      	uxth	r2, r2
 8001b92:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <main+0x590>)
 8001b94:	805a      	strh	r2, [r3, #2]
			temp = sB == GPIO_PIN_SET ? ceil : 0;
 8001b96:	2f01      	cmp	r7, #1
 8001b98:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b9c:	bf18      	it	ne
 8001b9e:	2100      	movne	r1, #0
			encoderB.current = (encoderB.last * alpha / 100) + (temp * (100 - alpha) / 100);
 8001ba0:	486a      	ldr	r0, [pc, #424]	; (8001d4c <main+0x594>)
 8001ba2:	8803      	ldrh	r3, [r0, #0]
 8001ba4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ba8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001bac:	4f69      	ldr	r7, [pc, #420]	; (8001d54 <main+0x59c>)
 8001bae:	fb87 c703 	smull	ip, r7, r7, r3
 8001bb2:	17db      	asrs	r3, r3, #31
 8001bb4:	ebc3 1367 	rsb	r3, r3, r7, asr #5
 8001bb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001bbc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001bc0:	4f64      	ldr	r7, [pc, #400]	; (8001d54 <main+0x59c>)
 8001bc2:	fb87 7101 	smull	r7, r1, r7, r1
 8001bc6:	eb03 1361 	add.w	r3, r3, r1, asr #5
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	8043      	strh	r3, [r0, #2]
			if (encoderA.last < thr && encoderA.current >= thr) {
 8001bce:	f241 3187 	movw	r1, #4999	; 0x1387
 8001bd2:	428e      	cmp	r6, r1
 8001bd4:	d80c      	bhi.n	8001bf0 <main+0x438>
 8001bd6:	428a      	cmp	r2, r1
 8001bd8:	d92e      	bls.n	8001c38 <main+0x480>
				if (encoderB.current > thr) {
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
					encoderCounter--;
 8001be0:	4a5d      	ldr	r2, [pc, #372]	; (8001d58 <main+0x5a0>)
 8001be2:	8813      	ldrh	r3, [r2, #0]
 8001be4:	bf8c      	ite	hi
 8001be6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
					encoderCounter++;
 8001bea:	3301      	addls	r3, #1
 8001bec:	8013      	strh	r3, [r2, #0]
 8001bee:	e023      	b.n	8001c38 <main+0x480>
			} else if (encoderA.last > thr && encoderA.current <= thr) {
 8001bf0:	f241 3188 	movw	r1, #5000	; 0x1388
 8001bf4:	428e      	cmp	r6, r1
 8001bf6:	d91f      	bls.n	8001c38 <main+0x480>
 8001bf8:	428a      	cmp	r2, r1
 8001bfa:	d81d      	bhi.n	8001c38 <main+0x480>
				if (encoderB.current > thr) {
 8001bfc:	428b      	cmp	r3, r1
					encoderCounter++;
 8001bfe:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <main+0x5a0>)
 8001c00:	8813      	ldrh	r3, [r2, #0]
 8001c02:	bf8c      	ite	hi
 8001c04:	3301      	addhi	r3, #1
					encoderCounter--;
 8001c06:	f103 33ff 	addls.w	r3, r3, #4294967295	; 0xffffffff
 8001c0a:	8013      	strh	r3, [r2, #0]
 8001c0c:	e014      	b.n	8001c38 <main+0x480>
			display_counter = 0;
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <main+0x5a4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	801a      	strh	r2, [r3, #0]
			EPD_Display(image);
 8001c14:	4852      	ldr	r0, [pc, #328]	; (8001d60 <main+0x5a8>)
 8001c16:	f7ff fc7a 	bl	800150e <EPD_Display>
			EPD_Sleep();
 8001c1a:	f7ff fc96 	bl	800154a <EPD_Sleep>
    MX_USB_HOST_Process();
 8001c1e:	f00a fcf9 	bl	800c614 <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2101      	movs	r1, #1
 8001c26:	484a      	ldr	r0, [pc, #296]	; (8001d50 <main+0x598>)
 8001c28:	f002 f9bc 	bl	8003fa4 <HAL_GPIO_WritePin>
		if (HAL_GetTick() != lasttick) {
 8001c2c:	f001 fb54 	bl	80032d8 <HAL_GetTick>
 8001c30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001c32:	4298      	cmp	r0, r3
 8001c34:	f47f af70 	bne.w	8001b18 <main+0x360>
		if (HAL_GetTick() % (interval * 1000) == 0) {
 8001c38:	f001 fb4e 	bl	80032d8 <HAL_GetTick>
 8001c3c:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <main+0x5ac>)
 8001c3e:	fba3 2300 	umull	r2, r3, r3, r0
 8001c42:	0b1b      	lsrs	r3, r3, #12
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	fb02 0313 	mls	r3, r2, r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e6      	bne.n	8001c1e <main+0x466>
			EPD_Init();
 8001c50:	f7ff fbf6 	bl	8001440 <EPD_Init>
			draw_clean(image);
 8001c54:	4e42      	ldr	r6, [pc, #264]	; (8001d60 <main+0x5a8>)
 8001c56:	4630      	mov	r0, r6
 8001c58:	f000 f9f0 	bl	800203c <draw_clean>
			sprintf(row, "RxH %d LR", rxHalfCpltCounter / interval);
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <main+0x5b0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4f42      	ldr	r7, [pc, #264]	; (8001d6c <main+0x5b4>)
 8001c62:	fba7 2303 	umull	r2, r3, r7, r3
 8001c66:	089a      	lsrs	r2, r3, #2
 8001c68:	4941      	ldr	r1, [pc, #260]	; (8001d70 <main+0x5b8>)
 8001c6a:	a81f      	add	r0, sp, #124	; 0x7c
 8001c6c:	f00b f8ee 	bl	800ce4c <siprintf>
			draw_text(image, row, 0, 0);
 8001c70:	2300      	movs	r3, #0
 8001c72:	461a      	mov	r2, r3
 8001c74:	a91f      	add	r1, sp, #124	; 0x7c
 8001c76:	4630      	mov	r0, r6
 8001c78:	f000 f9b1 	bl	8001fde <draw_text>
			sprintf(row, "RxC %d LR", rxCpltCounter / interval);
 8001c7c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001d9c <main+0x5e4>
 8001c80:	f8d9 3000 	ldr.w	r3, [r9]
 8001c84:	fba7 2303 	umull	r2, r3, r7, r3
 8001c88:	089a      	lsrs	r2, r3, #2
 8001c8a:	493a      	ldr	r1, [pc, #232]	; (8001d74 <main+0x5bc>)
 8001c8c:	a81f      	add	r0, sp, #124	; 0x7c
 8001c8e:	f00b f8dd 	bl	800ce4c <siprintf>
			draw_text(image, row, 0, 20);
 8001c92:	2314      	movs	r3, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	a91f      	add	r1, sp, #124	; 0x7c
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f000 f9a0 	bl	8001fde <draw_text>
			sprintf(row, "TxH %d L", txHalfCpltCounter / interval);
 8001c9e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8001da0 <main+0x5e8>
 8001ca2:	f8d8 3000 	ldr.w	r3, [r8]
 8001ca6:	fba7 2303 	umull	r2, r3, r7, r3
 8001caa:	089a      	lsrs	r2, r3, #2
 8001cac:	4932      	ldr	r1, [pc, #200]	; (8001d78 <main+0x5c0>)
 8001cae:	a81f      	add	r0, sp, #124	; 0x7c
 8001cb0:	f00b f8cc 	bl	800ce4c <siprintf>
			draw_text(image, row, 0, 40);
 8001cb4:	2328      	movs	r3, #40	; 0x28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	a91f      	add	r1, sp, #124	; 0x7c
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f000 f98f 	bl	8001fde <draw_text>
			sprintf(row, "TxC %d R", txCpltCounter / interval);
 8001cc0:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <main+0x5c4>)
 8001cc2:	6813      	ldr	r3, [r2, #0]
 8001cc4:	fba7 1303 	umull	r1, r3, r7, r3
 8001cc8:	089a      	lsrs	r2, r3, #2
 8001cca:	492d      	ldr	r1, [pc, #180]	; (8001d80 <main+0x5c8>)
 8001ccc:	a81f      	add	r0, sp, #124	; 0x7c
 8001cce:	f00b f8bd 	bl	800ce4c <siprintf>
			draw_text(image, row, 0, 60);
 8001cd2:	233c      	movs	r3, #60	; 0x3c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	a91f      	add	r1, sp, #124	; 0x7c
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f000 f980 	bl	8001fde <draw_text>
			sprintf(row, "Enc %d", encoderCounter);
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <main+0x5a0>)
 8001ce0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ce4:	4927      	ldr	r1, [pc, #156]	; (8001d84 <main+0x5cc>)
 8001ce6:	a81f      	add	r0, sp, #124	; 0x7c
 8001ce8:	f00b f8b0 	bl	800ce4c <siprintf>
			draw_text(image, row, 0, 80);
 8001cec:	2350      	movs	r3, #80	; 0x50
 8001cee:	2200      	movs	r2, #0
 8001cf0:	a91f      	add	r1, sp, #124	; 0x7c
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f000 f973 	bl	8001fde <draw_text>
			rxHalfCpltCounter = 0;
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <main+0x5b0>)
 8001cfc:	601e      	str	r6, [r3, #0]
			rxCpltCounter = 0;
 8001cfe:	f8c9 6000 	str.w	r6, [r9]
			txHalfCpltCounter = 0;
 8001d02:	f8c8 6000 	str.w	r6, [r8]
			txCpltCounter = 0;
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <main+0x5c4>)
 8001d08:	6016      	str	r6, [r2, #0]
			for (int i = 0; i < 296; i++) {
 8001d0a:	4f1f      	ldr	r7, [pc, #124]	; (8001d88 <main+0x5d0>)
				toggle_single_pixel(image, 64 + (int)((float)display_array[i] / 17000.0 * 64.0), i);
 8001d0c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001d60 <main+0x5a8>
 8001d10:	fa1f f886 	uxth.w	r8, r6
 8001d14:	f857 0b04 	ldr.w	r0, [r7], #4
 8001d18:	f7fe fc0e 	bl	8000538 <__aeabi_f2d>
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	462b      	mov	r3, r5
 8001d20:	f7fe fd8c 	bl	800083c <__aeabi_ddiv>
 8001d24:	4652      	mov	r2, sl
 8001d26:	465b      	mov	r3, fp
 8001d28:	f7fe fc5e 	bl	80005e8 <__aeabi_dmul>
 8001d2c:	f7fe fe6e 	bl	8000a0c <__aeabi_d2iz>
 8001d30:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8001d34:	4642      	mov	r2, r8
 8001d36:	b289      	uxth	r1, r1
 8001d38:	4648      	mov	r0, r9
 8001d3a:	f000 f85c 	bl	8001df6 <toggle_single_pixel>
			for (int i = 0; i < 296; i++) {
 8001d3e:	3601      	adds	r6, #1
 8001d40:	f5b6 7f94 	cmp.w	r6, #296	; 0x128
 8001d44:	d1e4      	bne.n	8001d10 <main+0x558>
 8001d46:	e762      	b.n	8001c0e <main+0x456>
 8001d48:	20002e80 	.word	0x20002e80
 8001d4c:	2000048c 	.word	0x2000048c
 8001d50:	40020800 	.word	0x40020800
 8001d54:	51eb851f 	.word	0x51eb851f
 8001d58:	200003aa 	.word	0x200003aa
 8001d5c:	200003a8 	.word	0x200003a8
 8001d60:	20000490 	.word	0x20000490
 8001d64:	d1b71759 	.word	0xd1b71759
 8001d68:	200003b0 	.word	0x200003b0
 8001d6c:	cccccccd 	.word	0xcccccccd
 8001d70:	0800d860 	.word	0x0800d860
 8001d74:	0800d86c 	.word	0x0800d86c
 8001d78:	0800d878 	.word	0x0800d878
 8001d7c:	200003b4 	.word	0x200003b4
 8001d80:	0800d884 	.word	0x0800d884
 8001d84:	0800d890 	.word	0x0800d890
 8001d88:	20002f34 	.word	0x20002f34
 8001d8c:	00000000 	.word	0x00000000
 8001d90:	40d09a00 	.word	0x40d09a00
 8001d94:	40500000 	.word	0x40500000
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	200003ac 	.word	0x200003ac
 8001da0:	200003b8 	.word	0x200003b8

08001da4 <Error_Handler>:
 8001da4:	b672      	cpsid	i
	while (1)
 8001da6:	e7fe      	b.n	8001da6 <Error_Handler+0x2>

08001da8 <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
 8001db4:	4613      	mov	r3, r2
 8001db6:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	883b      	ldrh	r3, [r7, #0]
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da00      	bge.n	8001dc6 <read_font_pixel+0x1e>
 8001dc4:	3307      	adds	r3, #7
 8001dc6:	10db      	asrs	r3, r3, #3
 8001dc8:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 8001dca:	89fb      	ldrh	r3, [r7, #14]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 8001dd4:	7b7a      	ldrb	r2, [r7, #13]
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	fa42 f303 	asr.w	r3, r2, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
 8001e02:	4613      	mov	r3, r2
 8001e04:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	883b      	ldrh	r3, [r7, #0]
 8001e0a:	01db      	lsls	r3, r3, #7
 8001e0c:	4413      	add	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da00      	bge.n	8001e14 <toggle_single_pixel+0x1e>
 8001e12:	3307      	adds	r3, #7
 8001e14:	10db      	asrs	r3, r3, #3
 8001e16:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e1c:	d817      	bhi.n	8001e4e <toggle_single_pixel+0x58>
 8001e1e:	883b      	ldrh	r3, [r7, #0]
 8001e20:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8001e24:	d213      	bcs.n	8001e4e <toggle_single_pixel+0x58>
 8001e26:	89fb      	ldrh	r3, [r7, #14]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b25a      	sxtb	r2, r3
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	2101      	movs	r1, #1
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	4053      	eors	r3, r2
 8001e42:	b259      	sxtb	r1, r3
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b2ca      	uxtb	r2, r1
 8001e4c:	701a      	strb	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <draw_rectangle>:

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	4608      	mov	r0, r1
 8001e64:	4611      	mov	r1, r2
 8001e66:	461a      	mov	r2, r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	817b      	strh	r3, [r7, #10]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	813b      	strh	r3, [r7, #8]
 8001e70:	4613      	mov	r3, r2
 8001e72:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 8001e74:	2300      	movs	r3, #0
 8001e76:	82fb      	strh	r3, [r7, #22]
 8001e78:	e018      	b.n	8001eac <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	82bb      	strh	r3, [r7, #20]
 8001e7e:	e00e      	b.n	8001e9e <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 8001e80:	897a      	ldrh	r2, [r7, #10]
 8001e82:	8abb      	ldrh	r3, [r7, #20]
 8001e84:	4413      	add	r3, r2
 8001e86:	b299      	uxth	r1, r3
 8001e88:	893a      	ldrh	r2, [r7, #8]
 8001e8a:	8afb      	ldrh	r3, [r7, #22]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff ffaf 	bl	8001df6 <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 8001e98:	8abb      	ldrh	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	82bb      	strh	r3, [r7, #20]
 8001e9e:	8aba      	ldrh	r2, [r7, #20]
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d3ec      	bcc.n	8001e80 <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 8001ea6:	8afb      	ldrh	r3, [r7, #22]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	82fb      	strh	r3, [r7, #22]
 8001eac:	8afa      	ldrh	r2, [r7, #22]
 8001eae:	8c3b      	ldrh	r3, [r7, #32]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d3e2      	bcc.n	8001e7a <draw_rectangle+0x20>
		}
	}
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	813b      	strh	r3, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	461a      	mov	r2, r3
 8001ede:	0052      	lsls	r2, r2, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	82fb      	strh	r3, [r7, #22]
 8001eea:	e023      	b.n	8001f34 <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001eec:	2300      	movs	r3, #0
 8001eee:	82bb      	strh	r3, [r7, #20]
 8001ef0:	e01a      	b.n	8001f28 <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 8001ef2:	8afa      	ldrh	r2, [r7, #22]
 8001ef4:	8a7b      	ldrh	r3, [r7, #18]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	8abb      	ldrh	r3, [r7, #20]
 8001efc:	4619      	mov	r1, r3
 8001efe:	4811      	ldr	r0, [pc, #68]	; (8001f44 <draw_char+0x84>)
 8001f00:	f7ff ff52 	bl	8001da8 <read_font_pixel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 8001f0a:	897a      	ldrh	r2, [r7, #10]
 8001f0c:	8abb      	ldrh	r3, [r7, #20]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b299      	uxth	r1, r3
 8001f12:	893a      	ldrh	r2, [r7, #8]
 8001f14:	8afb      	ldrh	r3, [r7, #22]
 8001f16:	4413      	add	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff ff6a 	bl	8001df6 <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001f22:	8abb      	ldrh	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	82bb      	strh	r3, [r7, #20]
 8001f28:	8abb      	ldrh	r3, [r7, #20]
 8001f2a:	2b07      	cmp	r3, #7
 8001f2c:	d9e1      	bls.n	8001ef2 <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001f2e:	8afb      	ldrh	r3, [r7, #22]
 8001f30:	3301      	adds	r3, #1
 8001f32:	82fb      	strh	r3, [r7, #22]
 8001f34:	8afb      	ldrh	r3, [r7, #22]
 8001f36:	2b0b      	cmp	r3, #11
 8001f38:	d9d8      	bls.n	8001eec <draw_char+0x2c>
			}
		}
	}
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200000a0 	.word	0x200000a0

08001f48 <translate>:

uint16_t translate(char c) {
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d907      	bls.n	8001f68 <translate+0x20>
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	2b5a      	cmp	r3, #90	; 0x5a
 8001f5c:	d804      	bhi.n	8001f68 <translate+0x20>
		return c - 'A';
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b41      	subs	r3, #65	; 0x41
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	e034      	b.n	8001fd2 <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	2b60      	cmp	r3, #96	; 0x60
 8001f6c:	d907      	bls.n	8001f7e <translate+0x36>
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b7a      	cmp	r3, #122	; 0x7a
 8001f72:	d804      	bhi.n	8001f7e <translate+0x36>
		return c - 'a';
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b61      	subs	r3, #97	; 0x61
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	e029      	b.n	8001fd2 <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b2f      	cmp	r3, #47	; 0x2f
 8001f82:	d907      	bls.n	8001f94 <translate+0x4c>
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	2b39      	cmp	r3, #57	; 0x39
 8001f88:	d804      	bhi.n	8001f94 <translate+0x4c>
		return c - '0' + 26;
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b16      	subs	r3, #22
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	e01e      	b.n	8001fd2 <translate+0x8a>
	} else if (c == '.') {
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	2b2e      	cmp	r3, #46	; 0x2e
 8001f98:	d101      	bne.n	8001f9e <translate+0x56>
		return 36;
 8001f9a:	2324      	movs	r3, #36	; 0x24
 8001f9c:	e019      	b.n	8001fd2 <translate+0x8a>
	} else if (c == ',') {
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b2c      	cmp	r3, #44	; 0x2c
 8001fa2:	d101      	bne.n	8001fa8 <translate+0x60>
		return 37;
 8001fa4:	2325      	movs	r3, #37	; 0x25
 8001fa6:	e014      	b.n	8001fd2 <translate+0x8a>
	} else if (c == '+') {
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	2b2b      	cmp	r3, #43	; 0x2b
 8001fac:	d101      	bne.n	8001fb2 <translate+0x6a>
		return 38;
 8001fae:	2326      	movs	r3, #38	; 0x26
 8001fb0:	e00f      	b.n	8001fd2 <translate+0x8a>
	} else if (c == '-') {
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b2d      	cmp	r3, #45	; 0x2d
 8001fb6:	d101      	bne.n	8001fbc <translate+0x74>
		return 39;
 8001fb8:	2327      	movs	r3, #39	; 0x27
 8001fba:	e00a      	b.n	8001fd2 <translate+0x8a>
	} else if (c == '<') {
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b3c      	cmp	r3, #60	; 0x3c
 8001fc0:	d101      	bne.n	8001fc6 <translate+0x7e>
		return 40;
 8001fc2:	2328      	movs	r3, #40	; 0x28
 8001fc4:	e005      	b.n	8001fd2 <translate+0x8a>
	} else if (c == '>') {
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b3e      	cmp	r3, #62	; 0x3e
 8001fca:	d101      	bne.n	8001fd0 <translate+0x88>
		return 41;
 8001fcc:	2329      	movs	r3, #41	; 0x29
 8001fce:	e000      	b.n	8001fd2 <translate+0x8a>
	} else {
		return 42; // ' '
 8001fd0:	232a      	movs	r3, #42	; 0x2a
	}
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 8001fde:	b590      	push	{r4, r7, lr}
 8001fe0:	b087      	sub	sp, #28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	461a      	mov	r2, r3
 8001fec:	460b      	mov	r3, r1
 8001fee:	80fb      	strh	r3, [r7, #6]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001ff8:	e015      	b.n	8002026 <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 8001ffa:	8afb      	ldrh	r3, [r7, #22]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	88fb      	ldrh	r3, [r7, #6]
 8002002:	4413      	add	r3, r2
 8002004:	b29c      	uxth	r4, r3
 8002006:	8afb      	ldrh	r3, [r7, #22]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff9a 	bl	8001f48 <translate>
 8002014:	4603      	mov	r3, r0
 8002016:	88ba      	ldrh	r2, [r7, #4]
 8002018:	4621      	mov	r1, r4
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7ff ff50 	bl	8001ec0 <draw_char>
		i++;
 8002020:	8afb      	ldrh	r3, [r7, #22]
 8002022:	3301      	adds	r3, #1
 8002024:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8002026:	8afb      	ldrh	r3, [r7, #22]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	4413      	add	r3, r2
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e3      	bne.n	8001ffa <draw_text+0x1c>
	}
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}

0800203c <draw_clean>:

void draw_clean(uint8_t *image) {
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 8002044:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 8002048:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 800204a:	2300      	movs	r3, #0
 800204c:	81fb      	strh	r3, [r7, #14]
 800204e:	e007      	b.n	8002060 <draw_clean+0x24>
 8002050:	89fb      	ldrh	r3, [r7, #14]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	89fb      	ldrh	r3, [r7, #14]
 800205c:	3301      	adds	r3, #1
 800205e:	81fb      	strh	r3, [r7, #14]
 8002060:	89fa      	ldrh	r2, [r7, #14]
 8002062:	89bb      	ldrh	r3, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d3f3      	bcc.n	8002050 <draw_clean+0x14>
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <overdrive_pedal_init>:
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 8002078:	b490      	push	{r4, r7}
 800207a:	b09a      	sub	sp, #104	; 0x68
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <overdrive_pedal_init+0x74>)
 8002084:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002088:	4613      	mov	r3, r2
 800208a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <overdrive_pedal_init+0x78>)
 8002094:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002098:	4613      	mov	r3, r2
 800209a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <overdrive_pedal_init+0x7c>)
 80020a4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80020a8:	4613      	mov	r3, r2
 80020aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <overdrive_pedal_init+0x74>)
 80020b4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80020b8:	4613      	mov	r3, r2
 80020ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <overdrive_pedal_init+0x80>)
 80020c4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80020c8:	4613      	mov	r3, r2
 80020ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <overdrive_pedal_init+0x84>)
 80020d4:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80020d8:	4613      	mov	r3, r2
 80020da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020e0:	bf00      	nop
 80020e2:	3768      	adds	r7, #104	; 0x68
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc90      	pop	{r4, r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	0800d530 	.word	0x0800d530
 80020f0:	0800d540 	.word	0x0800d540
 80020f4:	0800d550 	.word	0x0800d550
 80020f8:	0800d560 	.word	0x0800d560
 80020fc:	0800d570 	.word	0x0800d570

08002100 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	ed87 0a01 	vstr	s0, [r7, #4]
 800210a:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002112:	ed97 7a01 	vldr	s14, [r7, #4]
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800212a:	eeb0 1a47 	vmov.f32	s2, s14
 800212e:	eef0 0a67 	vmov.f32	s1, s15
 8002132:	ed97 0a03 	vldr	s0, [r7, #12]
 8002136:	f000 fbab 	bl	8002890 <soft_clip>
 800213a:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002144:	eef0 0a67 	vmov.f32	s1, s15
 8002148:	ed97 0a03 	vldr	s0, [r7, #12]
 800214c:	f000 fb70 	bl	8002830 <hard_clip>
 8002150:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002160:	eef0 1a47 	vmov.f32	s3, s14
 8002164:	eeb0 1a67 	vmov.f32	s2, s15
 8002168:	edd7 0a01 	vldr	s1, [r7, #4]
 800216c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002170:	f000 fb3e 	bl	80027f0 <mix>
 8002174:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	ee07 3a90 	vmov	s15, r3
}
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 8002188:	b490      	push	{r4, r7}
 800218a:	b08e      	sub	sp, #56	; 0x38
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <bitcrusher_rs_pedal_init+0x44>)
 8002194:	f103 0420 	add.w	r4, r3, #32
 8002198:	4613      	mov	r3, r2
 800219a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800219c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <bitcrusher_rs_pedal_init+0x48>)
 80021a4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80021a8:	4613      	mov	r3, r2
 80021aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <bitcrusher_rs_pedal_init+0x48>)
 80021b4:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80021b8:	4613      	mov	r3, r2
 80021ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021c0:	bf00      	nop
 80021c2:	3738      	adds	r7, #56	; 0x38
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc90      	pop	{r4, r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	0800d580 	.word	0x0800d580
 80021d0:	0800d590 	.word	0x0800d590

080021d4 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	ed87 0a01 	vstr	s0, [r7, #4]
 80021de:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 80021e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ee:	ee17 3a90 	vmov	r3, s15
 80021f2:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 80021f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80021f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021fc:	fa42 f303 	asr.w	r3, r2, r3
 8002200:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 8002202:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 8002210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002214:	3b02      	subs	r3, #2
 8002216:	2202      	movs	r2, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	b29a      	uxth	r2, r3
 800221e:	89bb      	ldrh	r3, [r7, #12]
 8002220:	4413      	add	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 8002226:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002232:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002242:	eef0 1a47 	vmov.f32	s3, s14
 8002246:	eeb0 1a67 	vmov.f32	s2, s15
 800224a:	edd7 0a01 	vldr	s1, [r7, #4]
 800224e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002252:	f000 facd 	bl	80027f0 <mix>
 8002256:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	ee07 3a90 	vmov	s15, r3
}
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 800226c:	b490      	push	{r4, r7}
 800226e:	b092      	sub	sp, #72	; 0x48
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	615a      	str	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <tremolo_pedal_init+0x5c>)
 8002290:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8002294:	4613      	mov	r3, r2
 8002296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <tremolo_pedal_init+0x60>)
 80022a0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80022a4:	4613      	mov	r3, r2
 80022a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <tremolo_pedal_init+0x64>)
 80022b0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80022b4:	4613      	mov	r3, r2
 80022b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80022bc:	bf00      	nop
 80022be:	3748      	adds	r7, #72	; 0x48
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc90      	pop	{r4, r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	0800d5a0 	.word	0x0800d5a0
 80022cc:	0800d5b0 	.word	0x0800d5b0
 80022d0:	0800d5c0 	.word	0x0800d5c0

080022d4 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	ed87 0a01 	vstr	s0, [r7, #4]
 80022de:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <tremolo_process+0x80>)
 80022e2:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	461a      	mov	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80022f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	4611      	mov	r1, r2
 80022fe:	2073      	movs	r0, #115	; 0x73
 8002300:	f000 fb42 	bl	8002988 <wave_gen>
 8002304:	eeb0 7a40 	vmov.f32	s14, s0
 8002308:	edd7 7a01 	vldr	s15, [r7, #4]
 800230c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002310:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800232a:	eef0 1a47 	vmov.f32	s3, s14
 800232e:	eeb0 1a67 	vmov.f32	s2, s15
 8002332:	edd7 0a01 	vldr	s1, [r7, #4]
 8002336:	ed97 0a02 	vldr	s0, [r7, #8]
 800233a:	f000 fa59 	bl	80027f0 <mix>
 800233e:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	ee07 3a90 	vmov	s15, r3
}
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	43dc0000 	.word	0x43dc0000

08002358 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8002358:	b490      	push	{r4, r7}
 800235a:	b092      	sub	sp, #72	; 0x48
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <overdrive_sqrt_pedal_init+0x54>)
 8002364:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002368:	4613      	mov	r3, r2
 800236a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800236c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a0f      	ldr	r2, [pc, #60]	; (80023b0 <overdrive_sqrt_pedal_init+0x58>)
 8002374:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002378:	4613      	mov	r3, r2
 800237a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800237c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <overdrive_sqrt_pedal_init+0x5c>)
 8002384:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002388:	4613      	mov	r3, r2
 800238a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800238c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <overdrive_sqrt_pedal_init+0x60>)
 8002394:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002398:	4613      	mov	r3, r2
 800239a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800239c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80023a0:	bf00      	nop
 80023a2:	3748      	adds	r7, #72	; 0x48
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc90      	pop	{r4, r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	0800d5d0 	.word	0x0800d5d0
 80023b0:	0800d540 	.word	0x0800d540
 80023b4:	0800d5e0 	.word	0x0800d5e0
 80023b8:	0800d5f0 	.word	0x0800d5f0

080023bc <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80023c6:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 80023c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80023cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	dd06      	ble.n	80023e4 <overdrive_sqrt_process+0x28>
        out = square_root(in);
 80023d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80023da:	f000 faa4 	bl	8002926 <square_root>
 80023de:	ed87 0a03 	vstr	s0, [r7, #12]
 80023e2:	e00d      	b.n	8002400 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 80023e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80023e8:	eef1 7a67 	vneg.f32	s15, s15
 80023ec:	eeb0 0a67 	vmov.f32	s0, s15
 80023f0:	f000 fa99 	bl	8002926 <square_root>
 80023f4:	eef0 7a40 	vmov.f32	s15, s0
 80023f8:	eef1 7a67 	vneg.f32	s15, s15
 80023fc:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002406:	ed97 7a03 	vldr	s14, [r7, #12]
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002418:	eef0 0a67 	vmov.f32	s1, s15
 800241c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002420:	f000 fa06 	bl	8002830 <hard_clip>
 8002424:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002434:	eef0 1a47 	vmov.f32	s3, s14
 8002438:	eeb0 1a67 	vmov.f32	s2, s15
 800243c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002440:	ed97 0a03 	vldr	s0, [r7, #12]
 8002444:	f000 f9d4 	bl	80027f0 <mix>
 8002448:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	ee07 3a90 	vmov	s15, r3
}
 8002452:	eeb0 0a67 	vmov.f32	s0, s15
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 800245c:	b490      	push	{r4, r7}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <amplifier_pedal_init+0x34>)
 8002468:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800246c:	4613      	mov	r3, r2
 800246e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <amplifier_pedal_init+0x38>)
 8002478:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800247c:	4613      	mov	r3, r2
 800247e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bc90      	pop	{r4, r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	0800d600 	.word	0x0800d600
 8002494:	0800d540 	.word	0x0800d540

08002498 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	ed87 0a01 	vstr	s0, [r7, #4]
 80024a2:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80024aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80024bc:	eef0 0a67 	vmov.f32	s1, s15
 80024c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80024c4:	f000 f9b4 	bl	8002830 <hard_clip>
 80024c8:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	ee07 3a90 	vmov	s15, r3
}
 80024d2:	eeb0 0a67 	vmov.f32	s0, s15
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80024fa:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	ee07 3a90 	vmov	s15, r3
}
 8002502:	eeb0 0a67 	vmov.f32	s0, s15
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8002510:	b490      	push	{r4, r7}
 8002512:	b092      	sub	sp, #72	; 0x48
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a11      	ldr	r2, [pc, #68]	; (8002560 <low_pass_filter_pedal_init+0x50>)
 800251c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002520:	4613      	mov	r3, r2
 8002522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002524:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <low_pass_filter_pedal_init+0x54>)
 800252c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002530:	4613      	mov	r3, r2
 8002532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <low_pass_filter_pedal_init+0x58>)
 800253c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002540:	4613      	mov	r3, r2
 8002542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	33b0      	adds	r3, #176	; 0xb0
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
}
 8002556:	bf00      	nop
 8002558:	3748      	adds	r7, #72	; 0x48
 800255a:	46bd      	mov	sp, r7
 800255c:	bc90      	pop	{r4, r7}
 800255e:	4770      	bx	lr
 8002560:	0800d610 	.word	0x0800d610
 8002564:	0800d560 	.word	0x0800d560
 8002568:	0800d570 	.word	0x0800d570

0800256c <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	ed87 0a01 	vstr	s0, [r7, #4]
 8002576:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8002584:	edd7 7a03 	vldr	s15, [r7, #12]
 8002588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800258c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002590:	edd7 7a03 	vldr	s15, [r7, #12]
 8002594:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002598:	edd7 7a01 	vldr	s15, [r7, #4]
 800259c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a4:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80025bc:	eef0 1a47 	vmov.f32	s3, s14
 80025c0:	eeb0 1a67 	vmov.f32	s2, s15
 80025c4:	edd7 0a01 	vldr	s1, [r7, #4]
 80025c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80025cc:	f000 f910 	bl	80027f0 <mix>
 80025d0:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	ee07 3a90 	vmov	s15, r3
}
 80025da:	eeb0 0a67 	vmov.f32	s0, s15
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 80025e4:	b490      	push	{r4, r7}
 80025e6:	b09e      	sub	sp, #120	; 0x78
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	615a      	str	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a1a      	ldr	r2, [pc, #104]	; (8002670 <fuzz_pedal_init+0x8c>)
 8002608:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800260c:	4613      	mov	r3, r2
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <fuzz_pedal_init+0x90>)
 8002618:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800261c:	4613      	mov	r3, r2
 800261e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <fuzz_pedal_init+0x94>)
 8002628:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800262c:	4613      	mov	r3, r2
 800262e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a11      	ldr	r2, [pc, #68]	; (800267c <fuzz_pedal_init+0x98>)
 8002638:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800263c:	4613      	mov	r3, r2
 800263e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <fuzz_pedal_init+0x9c>)
 8002648:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800264c:	4613      	mov	r3, r2
 800264e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <fuzz_pedal_init+0xa0>)
 8002658:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800265c:	4613      	mov	r3, r2
 800265e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002664:	bf00      	nop
 8002666:	3778      	adds	r7, #120	; 0x78
 8002668:	46bd      	mov	sp, r7
 800266a:	bc90      	pop	{r4, r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	0800d530 	.word	0x0800d530
 8002674:	0800d540 	.word	0x0800d540
 8002678:	0800d620 	.word	0x0800d620
 800267c:	0800d630 	.word	0x0800d630
 8002680:	0800d560 	.word	0x0800d560
 8002684:	0800d570 	.word	0x0800d570

08002688 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002692:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800269a:	ed97 7a01 	vldr	s14, [r7, #4]
 800269e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a2:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80026ba:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <fuzz_process+0x130>)
 80026be:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 80026c0:	edd7 0a06 	vldr	s1, [r7, #24]
 80026c4:	ed97 0a07 	vldr	s0, [r7, #28]
 80026c8:	f000 f8b2 	bl	8002830 <hard_clip>
 80026cc:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 80026d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80026d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026d8:	eeb4 7a67 	vcmp.f32	s14, s15
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	d11e      	bne.n	8002720 <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80026ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	eeb0 0a67 	vmov.f32	s0, s15
 80026f6:	4619      	mov	r1, r3
 80026f8:	2073      	movs	r0, #115	; 0x73
 80026fa:	f000 f945 	bl	8002988 <wave_gen>
 80026fe:	eef0 7a40 	vmov.f32	s15, s0
 8002702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002706:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800270a:	edd7 7a05 	vldr	s15, [r7, #20]
 800270e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002712:	ed97 7a07 	vldr	s14, [r7, #28]
 8002716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271a:	edc7 7a07 	vstr	s15, [r7, #28]
 800271e:	e02c      	b.n	800277a <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8002720:	edd7 7a06 	vldr	s15, [r7, #24]
 8002724:	eef1 7a67 	vneg.f32	s15, s15
 8002728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800272c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002730:	ed97 7a07 	vldr	s14, [r7, #28]
 8002734:	eeb4 7a67 	vcmp.f32	s14, s15
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d11d      	bne.n	800277a <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	ed97 7a03 	vldr	s14, [r7, #12]
 8002746:	edd7 7a04 	vldr	s15, [r7, #16]
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	eeb0 0a67 	vmov.f32	s0, s15
 8002752:	4619      	mov	r1, r3
 8002754:	2073      	movs	r0, #115	; 0x73
 8002756:	f000 f917 	bl	8002988 <wave_gen>
 800275a:	eef0 7a40 	vmov.f32	s15, s0
 800275e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002766:	edd7 7a05 	vldr	s15, [r7, #20]
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002790:	eef0 1a47 	vmov.f32	s3, s14
 8002794:	eeb0 1a67 	vmov.f32	s2, s15
 8002798:	edd7 0a01 	vldr	s1, [r7, #4]
 800279c:	ed97 0a07 	vldr	s0, [r7, #28]
 80027a0:	f000 f826 	bl	80027f0 <mix>
 80027a4:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	ee07 3a90 	vmov	s15, r3
}
 80027ae:	eeb0 0a67 	vmov.f32	s0, s15
 80027b2:	3720      	adds	r7, #32
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	43dc0000 	.word	0x43dc0000

080027bc <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    return;
 80027c4:	bf00      	nop
}
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80027da:	6038      	str	r0, [r7, #0]
    return in;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	ee07 3a90 	vmov	s15, r3
}
 80027e2:	eeb0 0a67 	vmov.f32	s0, s15
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80027fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80027fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8002802:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 8002806:	ed97 7a03 	vldr	s14, [r7, #12]
 800280a:	edd7 7a01 	vldr	s15, [r7, #4]
 800280e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002812:	edd7 6a02 	vldr	s13, [r7, #8]
 8002816:	edd7 7a00 	vldr	s15, [r7]
 800281a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002822:	eeb0 0a67 	vmov.f32	s0, s15
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	ed87 0a01 	vstr	s0, [r7, #4]
 800283a:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 800283e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002842:	edd7 7a00 	vldr	s15, [r7]
 8002846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	dd02      	ble.n	8002856 <hard_clip+0x26>
        return clip_threshold;
 8002850:	edd7 7a00 	vldr	s15, [r7]
 8002854:	e015      	b.n	8002882 <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8002856:	edd7 7a00 	vldr	s15, [r7]
 800285a:	eef1 7a67 	vneg.f32	s15, s15
 800285e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	d508      	bpl.n	800287e <hard_clip+0x4e>
        return -clip_threshold - 1;
 800286c:	edd7 7a00 	vldr	s15, [r7]
 8002870:	eef1 7a67 	vneg.f32	s15, s15
 8002874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800287c:	e001      	b.n	8002882 <hard_clip+0x52>
    }
    return in;
 800287e:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8002882:	eeb0 0a67 	vmov.f32	s0, s15
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	ed87 0a03 	vstr	s0, [r7, #12]
 800289a:	edc7 0a02 	vstr	s1, [r7, #8]
 800289e:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 80028a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80028a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	dd10      	ble.n	80028d6 <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 80028b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80028b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80028c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80028cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d0:	edc7 7a05 	vstr	s15, [r7, #20]
 80028d4:	e01d      	b.n	8002912 <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 80028d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028da:	eef1 7a67 	vneg.f32	s15, s15
 80028de:	ed97 7a03 	vldr	s14, [r7, #12]
 80028e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	d510      	bpl.n	800290e <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 80028ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80028f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80028f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002900:	edd7 7a02 	vldr	s15, [r7, #8]
 8002904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002908:	edc7 7a05 	vstr	s15, [r7, #20]
 800290c:	e001      	b.n	8002912 <soft_clip+0x82>
    } else {
        out = in;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	617b      	str	r3, [r7, #20]
    }
    return out;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	ee07 3a90 	vmov	s15, r3
}
 8002918:	eeb0 0a67 	vmov.f32	s0, s15
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <square_root>:

float square_root(float in) {
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 8002930:	edd7 7a01 	vldr	s15, [r7, #4]
 8002934:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800293c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8002940:	2300      	movs	r3, #0
 8002942:	72fb      	strb	r3, [r7, #11]
 8002944:	e012      	b.n	800296c <square_root+0x46>
        out = 0.5F * (out + (in / out));
 8002946:	edd7 6a01 	vldr	s13, [r7, #4]
 800294a:	edd7 7a03 	vldr	s15, [r7, #12]
 800294e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002952:	edd7 7a03 	vldr	s15, [r7, #12]
 8002956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800295e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002962:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	3301      	adds	r3, #1
 800296a:	72fb      	strb	r3, [r7, #11]
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	2b07      	cmp	r3, #7
 8002970:	d9e9      	bls.n	8002946 <square_root+0x20>
    }
    return out;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	ee07 3a90 	vmov	s15, r3
}
 8002978:	eeb0 0a67 	vmov.f32	s0, s15
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 8002988:	b580      	push	{r7, lr}
 800298a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800298e:	af00      	add	r7, sp, #0
 8002990:	4602      	mov	r2, r0
 8002992:	f107 0308 	add.w	r3, r7, #8
 8002996:	6019      	str	r1, [r3, #0]
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	ed83 0a00 	vstr	s0, [r3]
 800299e:	f107 030f 	add.w	r3, r7, #15
 80029a2:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4a2c      	ldr	r2, [pc, #176]	; (8002a5c <wave_gen+0xd4>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	4611      	mov	r1, r2
 80029ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029b2:	461a      	mov	r2, r3
 80029b4:	f00a f97a 	bl	800ccac <memcpy>
    float period_f = 44180.F / tone;
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	eddf 6a29 	vldr	s13, [pc, #164]	; 8002a60 <wave_gen+0xd8>
 80029be:	ed93 7a00 	vldr	s14, [r3]
 80029c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c6:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 80029ca:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 80029ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d2:	ee17 3a90 	vmov	r3, s15
 80029d6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	021a      	lsls	r2, r3, #8
 80029e2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 80029f0:	f107 030f 	add.w	r3, r7, #15
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b73      	cmp	r3, #115	; 0x73
 80029f8:	d118      	bne.n	8002a2c <wave_gen+0xa4>
        if (table_index <= 127) {
 80029fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80029fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002a00:	d808      	bhi.n	8002a14 <wave_gen+0x8c>
            return sin_table[table_index];
 8002a02:	f107 0214 	add.w	r2, r7, #20
 8002a06:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	e01c      	b.n	8002a4e <wave_gen+0xc6>
        } else {
            return -sin_table[table_index - 128];
 8002a14:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002a18:	3b80      	subs	r3, #128	; 0x80
 8002a1a:	f107 0214 	add.w	r2, r7, #20
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	eef1 7a67 	vneg.f32	s15, s15
 8002a2a:	e010      	b.n	8002a4e <wave_gen+0xc6>
        }
    } else if (t == 'q') {
 8002a2c:	f107 030f 	add.w	r3, r7, #15
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b71      	cmp	r3, #113	; 0x71
 8002a34:	d109      	bne.n	8002a4a <wave_gen+0xc2>
        if (table_index <= 127) {
 8002a36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a3c:	d802      	bhi.n	8002a44 <wave_gen+0xbc>
            return -1.F;
 8002a3e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002a42:	e004      	b.n	8002a4e <wave_gen+0xc6>
        } else {
            return 1.F;
 8002a44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002a48:	e001      	b.n	8002a4e <wave_gen+0xc6>
        }
    } else {
        return 0;
 8002a4a:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002a64 <wave_gen+0xdc>
    }
}
 8002a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a52:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	0800d640 	.word	0x0800d640
 8002a60:	472c9400 	.word	0x472c9400
 8002a64:	00000000 	.word	0x00000000

08002a68 <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b07      	cmp	r3, #7
 8002a80:	f200 80dd 	bhi.w	8002c3e <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 8002a8a:	7bbb      	ldrb	r3, [r7, #14]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	21c8      	movs	r1, #200	; 0xc8
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	33c4      	adds	r3, #196	; 0xc4
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d113      	bne.n	8002aca <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 8002aa2:	7bbb      	ldrb	r3, [r7, #14]
 8002aa4:	22c8      	movs	r2, #200	; 0xc8
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fcd3 	bl	800245c <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	21c8      	movs	r1, #200	; 0xc8
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	33c8      	adds	r3, #200	; 0xc8
 8002ac4:	4a60      	ldr	r2, [pc, #384]	; (8002c48 <pedalboard_append+0x1e0>)
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e0b3      	b.n	8002c32 <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d113      	bne.n	8002af8 <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8002ad0:	7bbb      	ldrb	r3, [r7, #14]
 8002ad2:	22c8      	movs	r2, #200	; 0xc8
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	3304      	adds	r3, #4
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fb52 	bl	8002188 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	21c8      	movs	r1, #200	; 0xc8
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	33c8      	adds	r3, #200	; 0xc8
 8002af2:	4a56      	ldr	r2, [pc, #344]	; (8002c4c <pedalboard_append+0x1e4>)
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e09c      	b.n	8002c32 <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d113      	bne.n	8002b26 <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8002afe:	7bbb      	ldrb	r3, [r7, #14]
 8002b00:	22c8      	movs	r2, #200	; 0xc8
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fce5 	bl	80024dc <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 8002b12:	7bbb      	ldrb	r3, [r7, #14]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	21c8      	movs	r1, #200	; 0xc8
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	33c8      	adds	r3, #200	; 0xc8
 8002b20:	4a4b      	ldr	r2, [pc, #300]	; (8002c50 <pedalboard_append+0x1e8>)
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e085      	b.n	8002c32 <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d113      	bne.n	8002b54 <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8002b2c:	7bbb      	ldrb	r3, [r7, #14]
 8002b2e:	22c8      	movs	r2, #200	; 0xc8
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fd52 	bl	80025e4 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 8002b40:	7bbb      	ldrb	r3, [r7, #14]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	21c8      	movs	r1, #200	; 0xc8
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	33c8      	adds	r3, #200	; 0xc8
 8002b4e:	4a41      	ldr	r2, [pc, #260]	; (8002c54 <pedalboard_append+0x1ec>)
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e06e      	b.n	8002c32 <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d113      	bne.n	8002b82 <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 8002b5a:	7bbb      	ldrb	r3, [r7, #14]
 8002b5c:	22c8      	movs	r2, #200	; 0xc8
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	3304      	adds	r3, #4
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fcd1 	bl	8002510 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8002b6e:	7bbb      	ldrb	r3, [r7, #14]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	21c8      	movs	r1, #200	; 0xc8
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	33c8      	adds	r3, #200	; 0xc8
 8002b7c:	4a36      	ldr	r2, [pc, #216]	; (8002c58 <pedalboard_append+0x1f0>)
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e057      	b.n	8002c32 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d113      	bne.n	8002bb0 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 8002b88:	7bbb      	ldrb	r3, [r7, #14]
 8002b8a:	22c8      	movs	r2, #200	; 0xc8
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fa6e 	bl	8002078 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8002b9c:	7bbb      	ldrb	r3, [r7, #14]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	21c8      	movs	r1, #200	; 0xc8
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	33c8      	adds	r3, #200	; 0xc8
 8002baa:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <pedalboard_append+0x1f4>)
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e040      	b.n	8002c32 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	2b07      	cmp	r3, #7
 8002bb4:	d113      	bne.n	8002bde <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 8002bb6:	7bbb      	ldrb	r3, [r7, #14]
 8002bb8:	22c8      	movs	r2, #200	; 0xc8
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fbc7 	bl	8002358 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	21c8      	movs	r1, #200	; 0xc8
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	33c8      	adds	r3, #200	; 0xc8
 8002bd8:	4a21      	ldr	r2, [pc, #132]	; (8002c60 <pedalboard_append+0x1f8>)
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e029      	b.n	8002c32 <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d113      	bne.n	8002c0c <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	22c8      	movs	r2, #200	; 0xc8
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fb3a 	bl	800226c <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8002bf8:	7bbb      	ldrb	r3, [r7, #14]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	21c8      	movs	r1, #200	; 0xc8
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	33c8      	adds	r3, #200	; 0xc8
 8002c06:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <pedalboard_append+0x1fc>)
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e012      	b.n	8002c32 <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	22c8      	movs	r2, #200	; 0xc8
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fdce 	bl	80027bc <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	21c8      	movs	r1, #200	; 0xc8
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	33c8      	adds	r3, #200	; 0xc8
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <pedalboard_append+0x200>)
 8002c30:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	701a      	strb	r2, [r3, #0]
    }
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	08002499 	.word	0x08002499
 8002c4c:	080021d5 	.word	0x080021d5
 8002c50:	080024f1 	.word	0x080024f1
 8002c54:	08002689 	.word	0x08002689
 8002c58:	0800256d 	.word	0x0800256d
 8002c5c:	08002101 	.word	0x08002101
 8002c60:	080023bd 	.word	0x080023bd
 8002c64:	080022d5 	.word	0x080022d5
 8002c68:	080027d1 	.word	0x080027d1

08002c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_MspInit+0x4c>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <HAL_MspInit+0x4c>)
 8002c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_MspInit+0x4c>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_MspInit+0x4c>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <HAL_MspInit+0x4c>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_MspInit+0x4c>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800

08002cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_I2C_MspInit+0x84>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d12c      	bne.n	8002d38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_I2C_MspInit+0x88>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_I2C_MspInit+0x88>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_I2C_MspInit+0x88>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002cfa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d00:	2312      	movs	r3, #18
 8002d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	480c      	ldr	r0, [pc, #48]	; (8002d48 <HAL_I2C_MspInit+0x8c>)
 8002d18:	f000 ff90 	bl	8003c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_I2C_MspInit+0x88>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <HAL_I2C_MspInit+0x88>)
 8002d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_I2C_MspInit+0x88>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40005400 	.word	0x40005400
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020400 	.word	0x40020400

08002d4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08e      	sub	sp, #56	; 0x38
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a93      	ldr	r2, [pc, #588]	; (8002fb8 <HAL_I2S_MspInit+0x26c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	f040 808d 	bne.w	8002e8a <HAL_I2S_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	4b91      	ldr	r3, [pc, #580]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	4a90      	ldr	r2, [pc, #576]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d80:	4b8e      	ldr	r3, [pc, #568]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d88:	623b      	str	r3, [r7, #32]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	4b8a      	ldr	r3, [pc, #552]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a89      	ldr	r2, [pc, #548]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b87      	ldr	r3, [pc, #540]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	4b83      	ldr	r3, [pc, #524]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	4a82      	ldr	r2, [pc, #520]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6313      	str	r3, [r2, #48]	; 0x30
 8002db8:	4b80      	ldr	r3, [pc, #512]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002dc4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dde:	4619      	mov	r1, r3
 8002de0:	4877      	ldr	r0, [pc, #476]	; (8002fc0 <HAL_I2S_MspInit+0x274>)
 8002de2:	f000 ff2b 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002df2:	2301      	movs	r3, #1
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002df6:	2305      	movs	r3, #5
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4870      	ldr	r0, [pc, #448]	; (8002fc4 <HAL_I2S_MspInit+0x278>)
 8002e02:	f000 ff1b 	bl	8003c3c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002e06:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e08:	4a70      	ldr	r2, [pc, #448]	; (8002fcc <HAL_I2S_MspInit+0x280>)
 8002e0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002e0c:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e12:	4b6d      	ldr	r3, [pc, #436]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e18:	4b6b      	ldr	r3, [pc, #428]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e26:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e2c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e2e:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e34:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002e36:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e3c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e3e:	4b62      	ldr	r3, [pc, #392]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e44:	4b60      	ldr	r3, [pc, #384]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e46:	2204      	movs	r2, #4
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002e4a:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e50:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002e56:	4b5c      	ldr	r3, [pc, #368]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002e5c:	485a      	ldr	r0, [pc, #360]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e5e:	f000 fb7d 	bl	800355c <HAL_DMA_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8002e68:	f7fe ff9c 	bl	8001da4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e70:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e72:	4a55      	ldr	r2, [pc, #340]	; (8002fc8 <HAL_I2S_MspInit+0x27c>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2024      	movs	r0, #36	; 0x24
 8002e7e:	f000 fb36 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002e82:	2024      	movs	r0, #36	; 0x24
 8002e84:	f000 fb4f 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e88:	e091      	b.n	8002fae <HAL_I2S_MspInit+0x262>
  else if(hi2s->Instance==SPI3)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a50      	ldr	r2, [pc, #320]	; (8002fd0 <HAL_I2S_MspInit+0x284>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	f040 808c 	bne.w	8002fae <HAL_I2S_MspInit+0x262>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	4b48      	ldr	r3, [pc, #288]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a47      	ldr	r2, [pc, #284]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a39      	ldr	r2, [pc, #228]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <HAL_I2S_MspInit+0x270>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002eea:	2310      	movs	r3, #16
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002efa:	2306      	movs	r3, #6
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	4833      	ldr	r0, [pc, #204]	; (8002fd4 <HAL_I2S_MspInit+0x288>)
 8002f06:	f000 fe99 	bl	8003c3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8002f0a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f1c:	2306      	movs	r3, #6
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f24:	4619      	mov	r1, r3
 8002f26:	4827      	ldr	r0, [pc, #156]	; (8002fc4 <HAL_I2S_MspInit+0x278>)
 8002f28:	f000 fe88 	bl	8003c3c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f2e:	4a2b      	ldr	r2, [pc, #172]	; (8002fdc <HAL_I2S_MspInit+0x290>)
 8002f30:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3e:	4b26      	ldr	r3, [pc, #152]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f44:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f52:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f54:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f62:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f7c:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002f82:	4815      	ldr	r0, [pc, #84]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f84:	f000 faea 	bl	800355c <HAL_DMA_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2S_MspInit+0x246>
      Error_Handler();
 8002f8e:	f7fe ff09 	bl	8001da4 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
 8002f98:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_I2S_MspInit+0x28c>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	2033      	movs	r0, #51	; 0x33
 8002fa4:	f000 faa3 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002fa8:	2033      	movs	r0, #51	; 0x33
 8002faa:	f000 fabc 	bl	8003526 <HAL_NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3738      	adds	r7, #56	; 0x38
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40003800 	.word	0x40003800
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40020400 	.word	0x40020400
 8002fc4:	40020800 	.word	0x40020800
 8002fc8:	2000042c 	.word	0x2000042c
 8002fcc:	40026058 	.word	0x40026058
 8002fd0:	40003c00 	.word	0x40003c00
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	20001720 	.word	0x20001720
 8002fdc:	40026088 	.word	0x40026088

08002fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_SPI_MspInit+0x84>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d12b      	bne.n	800305a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_SPI_MspInit+0x88>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_SPI_MspInit+0x88>)
 800300c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003010:	6453      	str	r3, [r2, #68]	; 0x44
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_SPI_MspInit+0x88>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_SPI_MspInit+0x88>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a10      	ldr	r2, [pc, #64]	; (8003068 <HAL_SPI_MspInit+0x88>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_SPI_MspInit+0x88>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800303a:	23a0      	movs	r3, #160	; 0xa0
 800303c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003046:	2303      	movs	r3, #3
 8003048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800304a:	2305      	movs	r3, #5
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	4805      	ldr	r0, [pc, #20]	; (800306c <HAL_SPI_MspInit+0x8c>)
 8003056:	f000 fdf1 	bl	8003c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800305a:	bf00      	nop
 800305c:	3728      	adds	r7, #40	; 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40013000 	.word	0x40013000
 8003068:	40023800 	.word	0x40023800
 800306c:	40020000 	.word	0x40020000

08003070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <NMI_Handler+0x4>

08003076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <HardFault_Handler+0x4>

0800307c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <MemManage_Handler+0x4>

08003082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003086:	e7fe      	b.n	8003086 <BusFault_Handler+0x4>

08003088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800308c:	e7fe      	b.n	800308c <UsageFault_Handler+0x4>

0800308e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030bc:	f000 f8f8 	bl	80032b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <DMA1_Stream3_IRQHandler+0x10>)
 80030ca:	f000 fb4d 	bl	8003768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	2000042c 	.word	0x2000042c

080030d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80030dc:	4802      	ldr	r0, [pc, #8]	; (80030e8 <DMA1_Stream5_IRQHandler+0x10>)
 80030de:	f000 fb43 	bl	8003768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20001720 	.word	0x20001720

080030ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <SPI2_IRQHandler+0x10>)
 80030f2:	f003 fe73 	bl	8006ddc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20002ea4 	.word	0x20002ea4

08003100 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <SPI3_IRQHandler+0x10>)
 8003106:	f003 fe69 	bl	8006ddc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20002eec 	.word	0x20002eec

08003114 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <OTG_FS_IRQHandler+0x10>)
 800311a:	f001 f9c7 	bl	80044ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	2000581c 	.word	0x2000581c

08003128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <_sbrk+0x5c>)
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <_sbrk+0x60>)
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <_sbrk+0x64>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <_sbrk+0x64>)
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <_sbrk+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	d207      	bcs.n	8003168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003158:	f009 fd6e 	bl	800cc38 <__errno>
 800315c:	4603      	mov	r3, r0
 800315e:	220c      	movs	r2, #12
 8003160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003166:	e009      	b.n	800317c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <_sbrk+0x64>)
 8003178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20020000 	.word	0x20020000
 8003188:	00000400 	.word	0x00000400
 800318c:	200003bc 	.word	0x200003bc
 8003190:	20005b30 	.word	0x20005b30

08003194 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <SystemInit+0x20>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	4a05      	ldr	r2, [pc, #20]	; (80031b4 <SystemInit+0x20>)
 80031a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031bc:	480d      	ldr	r0, [pc, #52]	; (80031f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031be:	490e      	ldr	r1, [pc, #56]	; (80031f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031c0:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c4:	e002      	b.n	80031cc <LoopCopyDataInit>

080031c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ca:	3304      	adds	r3, #4

080031cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d0:	d3f9      	bcc.n	80031c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031d4:	4c0b      	ldr	r4, [pc, #44]	; (8003204 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d8:	e001      	b.n	80031de <LoopFillZerobss>

080031da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031dc:	3204      	adds	r2, #4

080031de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e0:	d3fb      	bcc.n	80031da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031e2:	f7ff ffd7 	bl	8003194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031e6:	f009 fd2d 	bl	800cc44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ea:	f7fe fae5 	bl	80017b8 <main>
  bx  lr    
 80031ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f8:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 80031fc:	0800d910 	.word	0x0800d910
  ldr r2, =_sbss
 8003200:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8003204:	20005b30 	.word	0x20005b30

08003208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003208:	e7fe      	b.n	8003208 <ADC_IRQHandler>
	...

0800320c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_Init+0x40>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <HAL_Init+0x40>)
 8003216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_Init+0x40>)
 8003222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_Init+0x40>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a07      	ldr	r2, [pc, #28]	; (800324c <HAL_Init+0x40>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003234:	2003      	movs	r0, #3
 8003236:	f000 f94f 	bl	80034d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800323a:	200f      	movs	r0, #15
 800323c:	f000 f808 	bl	8003250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003240:	f7ff fd14 	bl	8002c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023c00 	.word	0x40023c00

08003250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_InitTick+0x54>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_InitTick+0x58>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003266:	fbb3 f3f1 	udiv	r3, r3, r1
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f967 	bl	8003542 <HAL_SYSTICK_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e00e      	b.n	800329c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d80a      	bhi.n	800329a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003284:	2200      	movs	r2, #0
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800328c:	f000 f92f 	bl	80034ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003290:	4a06      	ldr	r2, [pc, #24]	; (80032ac <HAL_InitTick+0x5c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200002a4 	.word	0x200002a4
 80032a8:	200002ac 	.word	0x200002ac
 80032ac:	200002a8 	.word	0x200002a8

080032b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_IncTick+0x20>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x24>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_IncTick+0x24>)
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	200002ac 	.word	0x200002ac
 80032d4:	200033d4 	.word	0x200033d4

080032d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return uwTick;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_GetTick+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	200033d4 	.word	0x200033d4

080032f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff ffee 	bl	80032d8 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003308:	d005      	beq.n	8003316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_Delay+0x44>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003316:	bf00      	nop
 8003318:	f7ff ffde 	bl	80032d8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d8f7      	bhi.n	8003318 <HAL_Delay+0x28>
  {
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200002ac 	.word	0x200002ac

08003338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336a:	4a04      	ldr	r2, [pc, #16]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60d3      	str	r3, [r2, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db0b      	blt.n	80033c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4907      	ldr	r1, [pc, #28]	; (80033d4 <__NVIC_EnableIRQ+0x38>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2001      	movs	r0, #1
 80033be:	fa00 f202 	lsl.w	r2, r0, r2
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db0a      	blt.n	8003402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	490c      	ldr	r1, [pc, #48]	; (8003424 <__NVIC_SetPriority+0x4c>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	440b      	add	r3, r1
 80033fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003400:	e00a      	b.n	8003418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4908      	ldr	r1, [pc, #32]	; (8003428 <__NVIC_SetPriority+0x50>)
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3b04      	subs	r3, #4
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	440b      	add	r3, r1
 8003416:	761a      	strb	r2, [r3, #24]
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f1c3 0307 	rsb	r3, r3, #7
 8003446:	2b04      	cmp	r3, #4
 8003448:	bf28      	it	cs
 800344a:	2304      	movcs	r3, #4
 800344c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3304      	adds	r3, #4
 8003452:	2b06      	cmp	r3, #6
 8003454:	d902      	bls.n	800345c <NVIC_EncodePriority+0x30>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3b03      	subs	r3, #3
 800345a:	e000      	b.n	800345e <NVIC_EncodePriority+0x32>
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	43d9      	mvns	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	4313      	orrs	r3, r2
         );
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a4:	d301      	bcc.n	80034aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00f      	b.n	80034ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <SysTick_Config+0x40>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b2:	210f      	movs	r1, #15
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034b8:	f7ff ff8e 	bl	80033d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <SysTick_Config+0x40>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <SysTick_Config+0x40>)
 80034c4:	2207      	movs	r2, #7
 80034c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000e010 	.word	0xe000e010

080034d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff29 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff ff3e 	bl	8003380 <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff8e 	bl	800342c <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff5d 	bl	80033d8 <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff31 	bl	800339c <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffa2 	bl	8003494 <SysTick_Config>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff feb6 	bl	80032d8 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e099      	b.n	80036ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	e00f      	b.n	80035ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800359a:	f7ff fe9d 	bl	80032d8 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d908      	bls.n	80035ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2203      	movs	r2, #3
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e078      	b.n	80036ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e8      	bne.n	800359a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <HAL_DMA_Init+0x158>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b04      	cmp	r3, #4
 8003612:	d107      	bne.n	8003624 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4313      	orrs	r3, r2
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0307 	bic.w	r3, r3, #7
 800363a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b04      	cmp	r3, #4
 800364c:	d117      	bne.n	800367e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fa6f 	bl	8003b44 <DMA_CheckFifoParam>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800367a:	2301      	movs	r3, #1
 800367c:	e016      	b.n	80036ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa26 	bl	8003ad8 <DMA_CalcBaseAndBitshift>
 800368c:	4603      	mov	r3, r0
 800368e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	223f      	movs	r2, #63	; 0x3f
 8003696:	409a      	lsls	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	f010803f 	.word	0xf010803f

080036b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_DMA_Start_IT+0x26>
 80036da:	2302      	movs	r3, #2
 80036dc:	e040      	b.n	8003760 <HAL_DMA_Start_IT+0xa8>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d12f      	bne.n	8003752 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f9b8 	bl	8003a7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003710:	223f      	movs	r2, #63	; 0x3f
 8003712:	409a      	lsls	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0216 	orr.w	r2, r2, #22
 8003726:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0208 	orr.w	r2, r2, #8
 800373e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e005      	b.n	800375e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800375e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003774:	4b92      	ldr	r3, [pc, #584]	; (80039c0 <HAL_DMA_IRQHandler+0x258>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a92      	ldr	r2, [pc, #584]	; (80039c4 <HAL_DMA_IRQHandler+0x25c>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0a9b      	lsrs	r3, r3, #10
 8003780:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	2208      	movs	r2, #8
 8003794:	409a      	lsls	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01a      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0204 	bic.w	r2, r2, #4
 80037ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	2208      	movs	r2, #8
 80037c2:	409a      	lsls	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	2201      	movs	r2, #1
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	2201      	movs	r2, #1
 80037f8:	409a      	lsls	r2, r3
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2204      	movs	r2, #4
 8003810:	409a      	lsls	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d012      	beq.n	8003840 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	2204      	movs	r2, #4
 800382e:	409a      	lsls	r2, r3
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	2210      	movs	r2, #16
 8003846:	409a      	lsls	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d043      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d03c      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	2210      	movs	r2, #16
 8003864:	409a      	lsls	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d018      	beq.n	80038aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d108      	bne.n	8003898 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d024      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
 8003896:	e01f      	b.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
 80038a8:	e016      	b.n	80038d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0208 	bic.w	r2, r2, #8
 80038c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2220      	movs	r2, #32
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 808e 	beq.w	8003a06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8086 	beq.w	8003a06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	2220      	movs	r2, #32
 8003900:	409a      	lsls	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b05      	cmp	r3, #5
 8003910:	d136      	bne.n	8003980 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0216 	bic.w	r2, r2, #22
 8003920:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003930:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <HAL_DMA_IRQHandler+0x1da>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0208 	bic.w	r2, r2, #8
 8003950:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	223f      	movs	r2, #63	; 0x3f
 8003958:	409a      	lsls	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	2b00      	cmp	r3, #0
 8003974:	d07d      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
        }
        return;
 800397e:	e078      	b.n	8003a72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01c      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d030      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e02b      	b.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d027      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
 80039be:	e022      	b.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
 80039c0:	200002a4 	.word	0x200002a4
 80039c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0210 	bic.w	r2, r2, #16
 80039e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d032      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d022      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d307      	bcc.n	8003a4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f2      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x2ca>
 8003a4c:	e000      	b.n	8003a50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a4e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
 8003a70:	e000      	b.n	8003a74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a72:	bf00      	nop
    }
  }
}
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop

08003a7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b40      	cmp	r3, #64	; 0x40
 8003aa8:	d108      	bne.n	8003abc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003aba:	e007      	b.n	8003acc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	60da      	str	r2, [r3, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	3b10      	subs	r3, #16
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <DMA_CalcBaseAndBitshift+0x64>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <DMA_CalcBaseAndBitshift+0x68>)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d909      	bls.n	8003b1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	659a      	str	r2, [r3, #88]	; 0x58
 8003b18:	e007      	b.n	8003b2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	aaaaaaab 	.word	0xaaaaaaab
 8003b40:	0800d8b0 	.word	0x0800d8b0

08003b44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d11f      	bne.n	8003b9e <DMA_CheckFifoParam+0x5a>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d856      	bhi.n	8003c12 <DMA_CheckFifoParam+0xce>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <DMA_CheckFifoParam+0x28>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b8f 	.word	0x08003b8f
 8003b74:	08003b7d 	.word	0x08003b7d
 8003b78:	08003c13 	.word	0x08003c13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d046      	beq.n	8003c16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8c:	e043      	b.n	8003c16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b96:	d140      	bne.n	8003c1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9c:	e03d      	b.n	8003c1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba6:	d121      	bne.n	8003bec <DMA_CheckFifoParam+0xa8>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d837      	bhi.n	8003c1e <DMA_CheckFifoParam+0xda>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <DMA_CheckFifoParam+0x70>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bcb 	.word	0x08003bcb
 8003bbc:	08003bc5 	.word	0x08003bc5
 8003bc0:	08003bdd 	.word	0x08003bdd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc8:	e030      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d025      	beq.n	8003c22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bda:	e022      	b.n	8003c22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003be4:	d11f      	bne.n	8003c26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bea:	e01c      	b.n	8003c26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d903      	bls.n	8003bfa <DMA_CheckFifoParam+0xb6>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d003      	beq.n	8003c00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bf8:	e018      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bfe:	e015      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c10:	e00b      	b.n	8003c2a <DMA_CheckFifoParam+0xe6>
      break;
 8003c12:	bf00      	nop
 8003c14:	e00a      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c16:	bf00      	nop
 8003c18:	e008      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e006      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e004      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop

08003c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e16b      	b.n	8003f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c58:	2201      	movs	r2, #1
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	f040 815a 	bne.w	8003f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d005      	beq.n	8003c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d130      	bne.n	8003cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	2203      	movs	r2, #3
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 0201 	and.w	r2, r3, #1
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d017      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d123      	bne.n	8003d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	08da      	lsrs	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3208      	adds	r2, #8
 8003d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	08da      	lsrs	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3208      	adds	r2, #8
 8003d7a:	69b9      	ldr	r1, [r7, #24]
 8003d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0203 	and.w	r2, r3, #3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80b4 	beq.w	8003f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	4b60      	ldr	r3, [pc, #384]	; (8003f48 <HAL_GPIO_Init+0x30c>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	4a5f      	ldr	r2, [pc, #380]	; (8003f48 <HAL_GPIO_Init+0x30c>)
 8003dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <HAL_GPIO_Init+0x30c>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dde:	4a5b      	ldr	r2, [pc, #364]	; (8003f4c <HAL_GPIO_Init+0x310>)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	089b      	lsrs	r3, r3, #2
 8003de4:	3302      	adds	r3, #2
 8003de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	220f      	movs	r2, #15
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a52      	ldr	r2, [pc, #328]	; (8003f50 <HAL_GPIO_Init+0x314>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d02b      	beq.n	8003e62 <HAL_GPIO_Init+0x226>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a51      	ldr	r2, [pc, #324]	; (8003f54 <HAL_GPIO_Init+0x318>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d025      	beq.n	8003e5e <HAL_GPIO_Init+0x222>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a50      	ldr	r2, [pc, #320]	; (8003f58 <HAL_GPIO_Init+0x31c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01f      	beq.n	8003e5a <HAL_GPIO_Init+0x21e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4f      	ldr	r2, [pc, #316]	; (8003f5c <HAL_GPIO_Init+0x320>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d019      	beq.n	8003e56 <HAL_GPIO_Init+0x21a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4e      	ldr	r2, [pc, #312]	; (8003f60 <HAL_GPIO_Init+0x324>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_GPIO_Init+0x216>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4d      	ldr	r2, [pc, #308]	; (8003f64 <HAL_GPIO_Init+0x328>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00d      	beq.n	8003e4e <HAL_GPIO_Init+0x212>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4c      	ldr	r2, [pc, #304]	; (8003f68 <HAL_GPIO_Init+0x32c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <HAL_GPIO_Init+0x20e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	; (8003f6c <HAL_GPIO_Init+0x330>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_GPIO_Init+0x20a>
 8003e42:	2307      	movs	r3, #7
 8003e44:	e00e      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e46:	2308      	movs	r3, #8
 8003e48:	e00c      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	e00a      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e4e:	2305      	movs	r3, #5
 8003e50:	e008      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e52:	2304      	movs	r3, #4
 8003e54:	e006      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e56:	2303      	movs	r3, #3
 8003e58:	e004      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e002      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e62:	2300      	movs	r3, #0
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	f002 0203 	and.w	r2, r2, #3
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	4093      	lsls	r3, r2
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e74:	4935      	ldr	r1, [pc, #212]	; (8003f4c <HAL_GPIO_Init+0x310>)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e82:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ea6:	4a32      	ldr	r2, [pc, #200]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003eac:	4b30      	ldr	r3, [pc, #192]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ed0:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed6:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003efa:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f24:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	f67f ae90 	bls.w	8003c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40020000 	.word	0x40020000
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020c00 	.word	0x40020c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40021400 	.word	0x40021400
 8003f68:	40021800 	.word	0x40021800
 8003f6c:	40021c00 	.word	0x40021c00
 8003f70:	40013c00 	.word	0x40013c00

08003f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e001      	b.n	8003f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fc0:	e003      	b.n	8003fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	041a      	lsls	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	619a      	str	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd8:	b08f      	sub	sp, #60	; 0x3c
 8003fda:	af0a      	add	r7, sp, #40	; 0x28
 8003fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e054      	b.n	8004092 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f008 fb3e 	bl	800c684 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2203      	movs	r2, #3
 800400c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f004 fb26 	bl	8008678 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	687e      	ldr	r6, [r7, #4]
 8004034:	466d      	mov	r5, sp
 8004036:	f106 0410 	add.w	r4, r6, #16
 800403a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800403c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800403e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004046:	e885 0003 	stmia.w	r5, {r0, r1}
 800404a:	1d33      	adds	r3, r6, #4
 800404c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800404e:	6838      	ldr	r0, [r7, #0]
 8004050:	f004 faa0 	bl	8008594 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f004 fb1d 	bl	800869a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	687e      	ldr	r6, [r7, #4]
 8004068:	466d      	mov	r5, sp
 800406a:	f106 0410 	add.w	r4, r6, #16
 800406e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800407a:	e885 0003 	stmia.w	r5, {r0, r1}
 800407e:	1d33      	adds	r3, r6, #4
 8004080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004082:	6838      	ldr	r0, [r7, #0]
 8004084:	f004 fc84 	bl	8008990 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800409a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800409a:	b590      	push	{r4, r7, lr}
 800409c:	b089      	sub	sp, #36	; 0x24
 800409e:	af04      	add	r7, sp, #16
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	4608      	mov	r0, r1
 80040a4:	4611      	mov	r1, r2
 80040a6:	461a      	mov	r2, r3
 80040a8:	4603      	mov	r3, r0
 80040aa:	70fb      	strb	r3, [r7, #3]
 80040ac:	460b      	mov	r3, r1
 80040ae:	70bb      	strb	r3, [r7, #2]
 80040b0:	4613      	mov	r3, r2
 80040b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_HCD_HC_Init+0x28>
 80040be:	2302      	movs	r3, #2
 80040c0:	e076      	b.n	80041b0 <HAL_HCD_HC_Init+0x116>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	333d      	adds	r3, #61	; 0x3d
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3338      	adds	r3, #56	; 0x38
 80040ea:	787a      	ldrb	r2, [r7, #1]
 80040ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	3340      	adds	r3, #64	; 0x40
 80040fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80040fe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	212c      	movs	r1, #44	; 0x2c
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	4413      	add	r3, r2
 800410c:	3339      	adds	r3, #57	; 0x39
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	333f      	adds	r3, #63	; 0x3f
 8004120:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004124:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	78ba      	ldrb	r2, [r7, #2]
 800412a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800412e:	b2d0      	uxtb	r0, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	333a      	adds	r3, #58	; 0x3a
 800413c:	4602      	mov	r2, r0
 800413e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004140:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da09      	bge.n	800415c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	333b      	adds	r3, #59	; 0x3b
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e008      	b.n	800416e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	333b      	adds	r3, #59	; 0x3b
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	333c      	adds	r3, #60	; 0x3c
 800417c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004180:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	787c      	ldrb	r4, [r7, #1]
 8004188:	78ba      	ldrb	r2, [r7, #2]
 800418a:	78f9      	ldrb	r1, [r7, #3]
 800418c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800418e:	9302      	str	r3, [sp, #8]
 8004190:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	f897 3020 	ldrb.w	r3, [r7, #32]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4623      	mov	r3, r4
 800419e:	f004 fd71 	bl	8008c84 <USB_HC_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd90      	pop	{r4, r7, pc}

080041b8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_HCD_HC_Halt+0x1e>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e00f      	b.n	80041f6 <HAL_HCD_HC_Halt+0x3e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f004 ffad 	bl	8009146 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	4608      	mov	r0, r1
 800420a:	4611      	mov	r1, r2
 800420c:	461a      	mov	r2, r3
 800420e:	4603      	mov	r3, r0
 8004210:	70fb      	strb	r3, [r7, #3]
 8004212:	460b      	mov	r3, r1
 8004214:	70bb      	strb	r3, [r7, #2]
 8004216:	4613      	mov	r3, r2
 8004218:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	333b      	adds	r3, #59	; 0x3b
 8004228:	78ba      	ldrb	r2, [r7, #2]
 800422a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	212c      	movs	r1, #44	; 0x2c
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	333f      	adds	r3, #63	; 0x3f
 800423a:	787a      	ldrb	r2, [r7, #1]
 800423c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800423e:	7c3b      	ldrb	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d112      	bne.n	800426a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3342      	adds	r3, #66	; 0x42
 8004252:	2203      	movs	r2, #3
 8004254:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	212c      	movs	r1, #44	; 0x2c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	333d      	adds	r3, #61	; 0x3d
 8004264:	7f3a      	ldrb	r2, [r7, #28]
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	e008      	b.n	800427c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3342      	adds	r3, #66	; 0x42
 8004278:	2202      	movs	r2, #2
 800427a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800427c:	787b      	ldrb	r3, [r7, #1]
 800427e:	2b03      	cmp	r3, #3
 8004280:	f200 80c6 	bhi.w	8004410 <HAL_HCD_HC_SubmitRequest+0x210>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080043fd 	.word	0x080043fd
 8004294:	08004301 	.word	0x08004301
 8004298:	0800437f 	.word	0x0800437f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800429c:	7c3b      	ldrb	r3, [r7, #16]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f040 80b8 	bne.w	8004414 <HAL_HCD_HC_SubmitRequest+0x214>
 80042a4:	78bb      	ldrb	r3, [r7, #2]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 80b4 	bne.w	8004414 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80042ac:	8b3b      	ldrh	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	3355      	adds	r3, #85	; 0x55
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3355      	adds	r3, #85	; 0x55
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3342      	adds	r3, #66	; 0x42
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80042ea:	e093      	b.n	8004414 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	212c      	movs	r1, #44	; 0x2c
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	3342      	adds	r3, #66	; 0x42
 80042fa:	2202      	movs	r2, #2
 80042fc:	701a      	strb	r2, [r3, #0]
      break;
 80042fe:	e089      	b.n	8004414 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004300:	78bb      	ldrb	r3, [r7, #2]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11d      	bne.n	8004342 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	3355      	adds	r3, #85	; 0x55
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	3342      	adds	r3, #66	; 0x42
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800432c:	e073      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3342      	adds	r3, #66	; 0x42
 800433c:	2202      	movs	r2, #2
 800433e:	701a      	strb	r2, [r3, #0]
      break;
 8004340:	e069      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	212c      	movs	r1, #44	; 0x2c
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	4413      	add	r3, r2
 800434e:	3354      	adds	r3, #84	; 0x54
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	212c      	movs	r1, #44	; 0x2c
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	4413      	add	r3, r2
 8004362:	3342      	adds	r3, #66	; 0x42
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
      break;
 8004368:	e055      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	212c      	movs	r1, #44	; 0x2c
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	4413      	add	r3, r2
 8004376:	3342      	adds	r3, #66	; 0x42
 8004378:	2202      	movs	r2, #2
 800437a:	701a      	strb	r2, [r3, #0]
      break;
 800437c:	e04b      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800437e:	78bb      	ldrb	r3, [r7, #2]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11d      	bne.n	80043c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3355      	adds	r3, #85	; 0x55
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	212c      	movs	r1, #44	; 0x2c
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	3342      	adds	r3, #66	; 0x42
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80043aa:	e034      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3342      	adds	r3, #66	; 0x42
 80043ba:	2202      	movs	r2, #2
 80043bc:	701a      	strb	r2, [r3, #0]
      break;
 80043be:	e02a      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	3354      	adds	r3, #84	; 0x54
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3342      	adds	r3, #66	; 0x42
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
      break;
 80043e6:	e016      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	3342      	adds	r3, #66	; 0x42
 80043f6:	2202      	movs	r2, #2
 80043f8:	701a      	strb	r2, [r3, #0]
      break;
 80043fa:	e00c      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	212c      	movs	r1, #44	; 0x2c
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	3342      	adds	r3, #66	; 0x42
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
      break;
 800440e:	e002      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004414:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	212c      	movs	r1, #44	; 0x2c
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	3344      	adds	r3, #68	; 0x44
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	8b3a      	ldrh	r2, [r7, #24]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	202c      	movs	r0, #44	; 0x2c
 8004430:	fb00 f303 	mul.w	r3, r0, r3
 8004434:	440b      	add	r3, r1
 8004436:	334c      	adds	r3, #76	; 0x4c
 8004438:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	212c      	movs	r1, #44	; 0x2c
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	3360      	adds	r3, #96	; 0x60
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	212c      	movs	r1, #44	; 0x2c
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	4413      	add	r3, r2
 8004458:	3350      	adds	r3, #80	; 0x50
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	212c      	movs	r1, #44	; 0x2c
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	4413      	add	r3, r2
 800446a:	3339      	adds	r3, #57	; 0x39
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	4413      	add	r3, r2
 800447c:	3361      	adds	r3, #97	; 0x61
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	222c      	movs	r2, #44	; 0x2c
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	3338      	adds	r3, #56	; 0x38
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	18d1      	adds	r1, r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	f004 fd00 	bl	8008ea0 <USB_HC_StartXfer>
 80044a0:	4603      	mov	r3, r0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop

080044ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f004 fa23 	bl	800890e <USB_GetMode>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	f040 80f6 	bne.w	80046bc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f004 fa07 	bl	80088e8 <USB_ReadInterrupts>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80ec 	beq.w	80046ba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 f9fe 	bl	80088e8 <USB_ReadInterrupts>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f6:	d104      	bne.n	8004502 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004500:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f004 f9ee 	bl	80088e8 <USB_ReadInterrupts>
 800450c:	4603      	mov	r3, r0
 800450e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004516:	d104      	bne.n	8004522 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004520:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f004 f9de 	bl	80088e8 <USB_ReadInterrupts>
 800452c:	4603      	mov	r3, r0
 800452e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004536:	d104      	bne.n	8004542 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004540:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f004 f9ce 	bl	80088e8 <USB_ReadInterrupts>
 800454c:	4603      	mov	r3, r0
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	d103      	bne.n	800455e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2202      	movs	r2, #2
 800455c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f004 f9c0 	bl	80088e8 <USB_ReadInterrupts>
 8004568:	4603      	mov	r3, r0
 800456a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800456e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004572:	d11c      	bne.n	80045ae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800457c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800458e:	2110      	movs	r1, #16
 8004590:	6938      	ldr	r0, [r7, #16]
 8004592:	f004 f8cf 	bl	8008734 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004596:	6938      	ldr	r0, [r7, #16]
 8004598:	f004 f8f0 	bl	800877c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f004 faa8 	bl	8008af8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f008 f8e9 	bl	800c780 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 f998 	bl	80088e8 <USB_ReadInterrupts>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c2:	d102      	bne.n	80045ca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 fa03 	bl	80059d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f004 f98a 	bl	80088e8 <USB_ReadInterrupts>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d106      	bne.n	80045ec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f008 f8b2 	bl	800c748 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2208      	movs	r2, #8
 80045ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f004 f979 	bl	80088e8 <USB_ReadInterrupts>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d101      	bne.n	8004604 <HAL_HCD_IRQHandler+0x158>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_HCD_IRQHandler+0x15a>
 8004604:	2300      	movs	r3, #0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0210 	bic.w	r2, r2, #16
 8004618:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 f906 	bl	800582c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0210 	orr.w	r2, r2, #16
 800462e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f004 f957 	bl	80088e8 <USB_ReadInterrupts>
 800463a:	4603      	mov	r3, r0
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004644:	d13a      	bne.n	80046bc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f004 fd6a 	bl	8009124 <USB_HC_ReadInterrupt>
 8004650:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e025      	b.n	80046a4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d018      	beq.n	800469e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800467e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004682:	d106      	bne.n	8004692 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8ab 	bl	80047e6 <HCD_HC_IN_IRQHandler>
 8004690:	e005      	b.n	800469e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fcc6 	bl	800502a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	3301      	adds	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d3d4      	bcc.n	8004658 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046b6:	615a      	str	r2, [r3, #20]
 80046b8:	e000      	b.n	80046bc <HAL_HCD_IRQHandler+0x210>
      return;
 80046ba:	bf00      	nop
    }
  }
}
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_HCD_Start+0x16>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e013      	b.n	8004700 <HAL_HCD_Start+0x3e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2101      	movs	r1, #1
 80046e6:	4618      	mov	r0, r3
 80046e8:	f004 fa6a 	bl	8008bc0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 ffb0 	bl	8008656 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_HCD_Stop+0x16>
 800471a:	2302      	movs	r3, #2
 800471c:	e00d      	b.n	800473a <HAL_HCD_Stop+0x32>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f004 fe64 	bl	80093f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f004 fa0c 	bl	8008b6c <USB_ResetPort>
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	212c      	movs	r1, #44	; 0x2c
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	3360      	adds	r3, #96	; 0x60
 8004778:	781b      	ldrb	r3, [r3, #0]
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	3350      	adds	r3, #80	; 0x50
 80047a0:	681b      	ldr	r3, [r3, #0]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f004 fa50 	bl	8008c60 <USB_GetCurrentFrame>
 80047c0:	4603      	mov	r3, r0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f004 fa2b 	bl	8008c32 <USB_GetHostSpeed>
 80047dc:	4603      	mov	r3, r0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4413      	add	r3, r2
 8004808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d119      	bne.n	800484a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4413      	add	r3, r2
 800481e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004822:	461a      	mov	r2, r3
 8004824:	2304      	movs	r3, #4
 8004826:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	440a      	add	r2, r1
 800483e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004842:	f043 0302 	orr.w	r3, r3, #2
 8004846:	60d3      	str	r3, [r2, #12]
 8004848:	e101      	b.n	8004a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4413      	add	r3, r2
 8004852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004860:	d12b      	bne.n	80048ba <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	461a      	mov	r2, r3
 8004870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004874:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3361      	adds	r3, #97	; 0x61
 8004884:	2207      	movs	r2, #7
 8004886:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	440a      	add	r2, r1
 800489e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 fc47 	bl	8009146 <USB_HC_Halt>
 80048b8:	e0c9      	b.n	8004a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d109      	bne.n	80048e4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048dc:	461a      	mov	r2, r3
 80048de:	2320      	movs	r3, #32
 80048e0:	6093      	str	r3, [r2, #8]
 80048e2:	e0b4      	b.n	8004a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d133      	bne.n	8004962 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	440a      	add	r2, r1
 8004910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	212c      	movs	r1, #44	; 0x2c
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	4413      	add	r3, r2
 8004926:	3361      	adds	r3, #97	; 0x61
 8004928:	2205      	movs	r2, #5
 800492a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	2310      	movs	r3, #16
 800493c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4413      	add	r3, r2
 8004946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494a:	461a      	mov	r2, r3
 800494c:	2308      	movs	r3, #8
 800494e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f004 fbf3 	bl	8009146 <USB_HC_Halt>
 8004960:	e075      	b.n	8004a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4413      	add	r3, r2
 800496a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004978:	d134      	bne.n	80049e4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4413      	add	r3, r2
 8004982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	440a      	add	r2, r1
 8004990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004994:	f043 0302 	orr.w	r3, r3, #2
 8004998:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	212c      	movs	r1, #44	; 0x2c
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	4413      	add	r3, r2
 80049a6:	3361      	adds	r3, #97	; 0x61
 80049a8:	2208      	movs	r2, #8
 80049aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b8:	461a      	mov	r2, r3
 80049ba:	2310      	movs	r3, #16
 80049bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ca:	461a      	mov	r2, r3
 80049cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f004 fbb2 	bl	8009146 <USB_HC_Halt>
 80049e2:	e034      	b.n	8004a4e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d129      	bne.n	8004a4e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a14:	f043 0302 	orr.w	r3, r3, #2
 8004a18:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	212c      	movs	r1, #44	; 0x2c
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	3361      	adds	r3, #97	; 0x61
 8004a28:	2206      	movs	r2, #6
 8004a2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f004 fb85 	bl	8009146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2380      	movs	r3, #128	; 0x80
 8004a4c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a64:	d122      	bne.n	8004aac <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f004 fb58 	bl	8009146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004aaa:	e2ba      	b.n	8005022 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	f040 811b 	bne.w	8004cfa <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d019      	beq.n	8004b00 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3348      	adds	r3, #72	; 0x48
 8004ada:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	0159      	lsls	r1, r3, #5
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	440b      	add	r3, r1
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004aee:	1ad2      	subs	r2, r2, r3
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	202c      	movs	r0, #44	; 0x2c
 8004af6:	fb00 f303 	mul.w	r3, r0, r3
 8004afa:	440b      	add	r3, r1
 8004afc:	3350      	adds	r3, #80	; 0x50
 8004afe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	212c      	movs	r1, #44	; 0x2c
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3361      	adds	r3, #97	; 0x61
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	212c      	movs	r1, #44	; 0x2c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	335c      	adds	r3, #92	; 0x5c
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	461a      	mov	r2, r3
 8004b32:	2301      	movs	r3, #1
 8004b34:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	333f      	adds	r3, #63	; 0x3f
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	212c      	movs	r1, #44	; 0x2c
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	4413      	add	r3, r2
 8004b56:	333f      	adds	r3, #63	; 0x3f
 8004b58:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d121      	bne.n	8004ba2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f004 fadc 	bl	8009146 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	6093      	str	r3, [r2, #8]
 8004ba0:	e066      	b.n	8004c70 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	333f      	adds	r3, #63	; 0x3f
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d127      	bne.n	8004c06 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bd4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	212c      	movs	r1, #44	; 0x2c
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	4413      	add	r3, r2
 8004be2:	3360      	adds	r3, #96	; 0x60
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	b2d9      	uxtb	r1, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	202c      	movs	r0, #44	; 0x2c
 8004bf2:	fb00 f303 	mul.w	r3, r0, r3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3360      	adds	r3, #96	; 0x60
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f007 fdcc 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c04:	e034      	b.n	8004c70 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	333f      	adds	r3, #63	; 0x3f
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d12a      	bne.n	8004c70 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3360      	adds	r3, #96	; 0x60
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3354      	adds	r3, #84	; 0x54
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	f083 0301 	eor.w	r3, r3, #1
 8004c40:	b2d8      	uxtb	r0, r3
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3354      	adds	r3, #84	; 0x54
 8004c50:	4602      	mov	r2, r0
 8004c52:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	b2d9      	uxtb	r1, r3
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	202c      	movs	r0, #44	; 0x2c
 8004c5e:	fb00 f303 	mul.w	r3, r0, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	3360      	adds	r3, #96	; 0x60
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f007 fd96 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d12b      	bne.n	8004cd0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3348      	adds	r3, #72	; 0x48
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	202c      	movs	r0, #44	; 0x2c
 8004c8e:	fb00 f202 	mul.w	r2, r0, r2
 8004c92:	440a      	add	r2, r1
 8004c94:	3240      	adds	r2, #64	; 0x40
 8004c96:	8812      	ldrh	r2, [r2, #0]
 8004c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 81be 	beq.w	8005022 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	212c      	movs	r1, #44	; 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3354      	adds	r3, #84	; 0x54
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f083 0301 	eor.w	r3, r3, #1
 8004cba:	b2d8      	uxtb	r0, r3
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	212c      	movs	r1, #44	; 0x2c
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3354      	adds	r3, #84	; 0x54
 8004cca:	4602      	mov	r2, r0
 8004ccc:	701a      	strb	r2, [r3, #0]
}
 8004cce:	e1a8      	b.n	8005022 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	212c      	movs	r1, #44	; 0x2c
 8004cd6:	fb01 f303 	mul.w	r3, r1, r3
 8004cda:	4413      	add	r3, r2
 8004cdc:	3354      	adds	r3, #84	; 0x54
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f083 0301 	eor.w	r3, r3, #1
 8004ce4:	b2d8      	uxtb	r0, r3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	212c      	movs	r1, #44	; 0x2c
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3354      	adds	r3, #84	; 0x54
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	701a      	strb	r2, [r3, #0]
}
 8004cf8:	e193      	b.n	8005022 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	f040 8106 	bne.w	8004f1e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	212c      	movs	r1, #44	; 0x2c
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3361      	adds	r3, #97	; 0x61
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d109      	bne.n	8004d5a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	212c      	movs	r1, #44	; 0x2c
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	4413      	add	r3, r2
 8004d52:	3360      	adds	r3, #96	; 0x60
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e0c9      	b.n	8004eee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	212c      	movs	r1, #44	; 0x2c
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	4413      	add	r3, r2
 8004d66:	3361      	adds	r3, #97	; 0x61
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b05      	cmp	r3, #5
 8004d6c:	d109      	bne.n	8004d82 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	212c      	movs	r1, #44	; 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	3360      	adds	r3, #96	; 0x60
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	e0b5      	b.n	8004eee <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	212c      	movs	r1, #44	; 0x2c
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3361      	adds	r3, #97	; 0x61
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d009      	beq.n	8004daa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	212c      	movs	r1, #44	; 0x2c
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	3361      	adds	r3, #97	; 0x61
 8004da4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d150      	bne.n	8004e4c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	212c      	movs	r1, #44	; 0x2c
 8004db0:	fb01 f303 	mul.w	r3, r1, r3
 8004db4:	4413      	add	r3, r2
 8004db6:	335c      	adds	r3, #92	; 0x5c
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	202c      	movs	r0, #44	; 0x2c
 8004dc2:	fb00 f303 	mul.w	r3, r0, r3
 8004dc6:	440b      	add	r3, r1
 8004dc8:	335c      	adds	r3, #92	; 0x5c
 8004dca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	335c      	adds	r3, #92	; 0x5c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d912      	bls.n	8004e06 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	335c      	adds	r3, #92	; 0x5c
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3360      	adds	r3, #96	; 0x60
 8004e00:	2204      	movs	r2, #4
 8004e02:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e04:	e073      	b.n	8004eee <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	212c      	movs	r1, #44	; 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	3360      	adds	r3, #96	; 0x60
 8004e14:	2202      	movs	r2, #2
 8004e16:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e2e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e36:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	461a      	mov	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e4a:	e050      	b.n	8004eee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3361      	adds	r3, #97	; 0x61
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d122      	bne.n	8004ea6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	212c      	movs	r1, #44	; 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3360      	adds	r3, #96	; 0x60
 8004e6e:	2202      	movs	r2, #2
 8004e70:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e88:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e90:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e023      	b.n	8004eee <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3361      	adds	r3, #97	; 0x61
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b07      	cmp	r3, #7
 8004eb8:	d119      	bne.n	8004eee <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	212c      	movs	r1, #44	; 0x2c
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	335c      	adds	r3, #92	; 0x5c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	202c      	movs	r0, #44	; 0x2c
 8004ed2:	fb00 f303 	mul.w	r3, r0, r3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	335c      	adds	r3, #92	; 0x5c
 8004eda:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	212c      	movs	r1, #44	; 0x2c
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3360      	adds	r3, #96	; 0x60
 8004eea:	2204      	movs	r2, #4
 8004eec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efa:	461a      	mov	r2, r3
 8004efc:	2302      	movs	r3, #2
 8004efe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	b2d9      	uxtb	r1, r3
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	202c      	movs	r0, #44	; 0x2c
 8004f0a:	fb00 f303 	mul.w	r3, r0, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	3360      	adds	r3, #96	; 0x60
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f007 fc40 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f1c:	e081      	b.n	8005022 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d176      	bne.n	8005022 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	212c      	movs	r1, #44	; 0x2c
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	333f      	adds	r3, #63	; 0x3f
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d121      	bne.n	8004f8c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	212c      	movs	r1, #44	; 0x2c
 8004f4e:	fb01 f303 	mul.w	r3, r1, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	335c      	adds	r3, #92	; 0x5c
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f004 f8de 	bl	8009146 <USB_HC_Halt>
 8004f8a:	e041      	b.n	8005010 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	212c      	movs	r1, #44	; 0x2c
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	333f      	adds	r3, #63	; 0x3f
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	212c      	movs	r1, #44	; 0x2c
 8004fa6:	fb01 f303 	mul.w	r3, r1, r3
 8004faa:	4413      	add	r3, r2
 8004fac:	333f      	adds	r3, #63	; 0x3f
 8004fae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d12d      	bne.n	8005010 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	212c      	movs	r1, #44	; 0x2c
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	335c      	adds	r3, #92	; 0x5c
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d120      	bne.n	8005010 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	212c      	movs	r1, #44	; 0x2c
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	3361      	adds	r3, #97	; 0x61
 8004fdc:	2203      	movs	r2, #3
 8004fde:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f004 f89b 	bl	8009146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501c:	461a      	mov	r2, r3
 800501e:	2310      	movs	r3, #16
 8005020:	6093      	str	r3, [r2, #8]
}
 8005022:	bf00      	nop
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b088      	sub	sp, #32
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d119      	bne.n	800508e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	461a      	mov	r2, r3
 8005068:	2304      	movs	r3, #4
 800506a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	4413      	add	r3, r2
 8005074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	440a      	add	r2, r1
 8005082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005086:	f043 0302 	orr.w	r3, r3, #2
 800508a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800508c:	e3ca      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d13e      	bne.n	8005122 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b0:	461a      	mov	r2, r3
 80050b2:	2320      	movs	r3, #32
 80050b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	212c      	movs	r1, #44	; 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	333d      	adds	r3, #61	; 0x3d
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	f040 83ac 	bne.w	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	212c      	movs	r1, #44	; 0x2c
 80050d2:	fb01 f303 	mul.w	r3, r1, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	333d      	adds	r3, #61	; 0x3d
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	212c      	movs	r1, #44	; 0x2c
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	4413      	add	r3, r2
 80050ea:	3360      	adds	r3, #96	; 0x60
 80050ec:	2202      	movs	r2, #2
 80050ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	440a      	add	r2, r1
 8005106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800510a:	f043 0302 	orr.w	r3, r3, #2
 800510e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f004 f813 	bl	8009146 <USB_HC_Halt>
}
 8005120:	e380      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	4413      	add	r3, r2
 800512a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005138:	d122      	bne.n	8005180 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	440a      	add	r2, r1
 8005150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	4611      	mov	r1, r2
 8005164:	4618      	mov	r0, r3
 8005166:	f003 ffee 	bl	8009146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	4413      	add	r3, r2
 8005172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005176:	461a      	mov	r2, r3
 8005178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800517c:	6093      	str	r3, [r2, #8]
}
 800517e:	e351      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d150      	bne.n	8005238 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	212c      	movs	r1, #44	; 0x2c
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	335c      	adds	r3, #92	; 0x5c
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d111      	bne.n	80051e2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	212c      	movs	r1, #44	; 0x2c
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	333d      	adds	r3, #61	; 0x3d
 80051cc:	2201      	movs	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051dc:	461a      	mov	r2, r3
 80051de:	2340      	movs	r3, #64	; 0x40
 80051e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051fc:	f043 0302 	orr.w	r3, r3, #2
 8005200:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f003 ff9a 	bl	8009146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	461a      	mov	r2, r3
 8005220:	2301      	movs	r3, #1
 8005222:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	212c      	movs	r1, #44	; 0x2c
 800522a:	fb01 f303 	mul.w	r3, r1, r3
 800522e:	4413      	add	r3, r2
 8005230:	3361      	adds	r3, #97	; 0x61
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
}
 8005236:	e2f5      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d13c      	bne.n	80052c8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	212c      	movs	r1, #44	; 0x2c
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	3361      	adds	r3, #97	; 0x61
 800525c:	2204      	movs	r2, #4
 800525e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	212c      	movs	r1, #44	; 0x2c
 8005266:	fb01 f303 	mul.w	r3, r1, r3
 800526a:	4413      	add	r3, r2
 800526c:	333d      	adds	r3, #61	; 0x3d
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	212c      	movs	r1, #44	; 0x2c
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	4413      	add	r3, r2
 800527e:	335c      	adds	r3, #92	; 0x5c
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529e:	f043 0302 	orr.w	r3, r3, #2
 80052a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	4611      	mov	r1, r2
 80052ae:	4618      	mov	r0, r3
 80052b0:	f003 ff49 	bl	8009146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c0:	461a      	mov	r2, r3
 80052c2:	2340      	movs	r3, #64	; 0x40
 80052c4:	6093      	str	r3, [r2, #8]
}
 80052c6:	e2ad      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d12a      	bne.n	8005334 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ea:	461a      	mov	r2, r3
 80052ec:	2308      	movs	r3, #8
 80052ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	440a      	add	r2, r1
 8005306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530a:	f043 0302 	orr.w	r3, r3, #2
 800530e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f003 ff13 	bl	8009146 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	212c      	movs	r1, #44	; 0x2c
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	4413      	add	r3, r2
 800532c:	3361      	adds	r3, #97	; 0x61
 800532e:	2205      	movs	r2, #5
 8005330:	701a      	strb	r2, [r3, #0]
}
 8005332:	e277      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b10      	cmp	r3, #16
 8005348:	d150      	bne.n	80053ec <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	212c      	movs	r1, #44	; 0x2c
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	4413      	add	r3, r2
 8005356:	335c      	adds	r3, #92	; 0x5c
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	212c      	movs	r1, #44	; 0x2c
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	4413      	add	r3, r2
 8005368:	3361      	adds	r3, #97	; 0x61
 800536a:	2203      	movs	r2, #3
 800536c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	212c      	movs	r1, #44	; 0x2c
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	4413      	add	r3, r2
 800537a:	333d      	adds	r3, #61	; 0x3d
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d112      	bne.n	80053a8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	212c      	movs	r1, #44	; 0x2c
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	4413      	add	r3, r2
 800538e:	333c      	adds	r3, #60	; 0x3c
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d108      	bne.n	80053a8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	212c      	movs	r1, #44	; 0x2c
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	333d      	adds	r3, #61	; 0x3d
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	4611      	mov	r1, r2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f003 feb7 	bl	8009146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e4:	461a      	mov	r2, r3
 80053e6:	2310      	movs	r3, #16
 80053e8:	6093      	str	r3, [r2, #8]
}
 80053ea:	e21b      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d174      	bne.n	80054ec <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d121      	bne.n	800544e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	212c      	movs	r1, #44	; 0x2c
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	4413      	add	r3, r2
 8005416:	3361      	adds	r3, #97	; 0x61
 8005418:	2206      	movs	r2, #6
 800541a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	440a      	add	r2, r1
 8005432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005436:	f043 0302 	orr.w	r3, r3, #2
 800543a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f003 fe7d 	bl	8009146 <USB_HC_Halt>
 800544c:	e044      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	212c      	movs	r1, #44	; 0x2c
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	4413      	add	r3, r2
 800545a:	335c      	adds	r3, #92	; 0x5c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	202c      	movs	r0, #44	; 0x2c
 8005466:	fb00 f303 	mul.w	r3, r0, r3
 800546a:	440b      	add	r3, r1
 800546c:	335c      	adds	r3, #92	; 0x5c
 800546e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	212c      	movs	r1, #44	; 0x2c
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	4413      	add	r3, r2
 800547c:	335c      	adds	r3, #92	; 0x5c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d920      	bls.n	80054c6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	212c      	movs	r1, #44	; 0x2c
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	4413      	add	r3, r2
 8005490:	335c      	adds	r3, #92	; 0x5c
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	212c      	movs	r1, #44	; 0x2c
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	4413      	add	r3, r2
 80054a2:	3360      	adds	r3, #96	; 0x60
 80054a4:	2204      	movs	r2, #4
 80054a6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	b2d9      	uxtb	r1, r3
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	202c      	movs	r0, #44	; 0x2c
 80054b2:	fb00 f303 	mul.w	r3, r0, r3
 80054b6:	4413      	add	r3, r2
 80054b8:	3360      	adds	r3, #96	; 0x60
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f007 f96c 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
 80054c4:	e008      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	212c      	movs	r1, #44	; 0x2c
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	4413      	add	r3, r2
 80054d2:	3360      	adds	r3, #96	; 0x60
 80054d4:	2202      	movs	r2, #2
 80054d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e4:	461a      	mov	r2, r3
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	6093      	str	r3, [r2, #8]
}
 80054ea:	e19b      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005502:	d134      	bne.n	800556e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	440a      	add	r2, r1
 800551a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551e:	f043 0302 	orr.w	r3, r3, #2
 8005522:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f003 fe09 	bl	8009146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	461a      	mov	r2, r3
 8005542:	2310      	movs	r3, #16
 8005544:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	4413      	add	r3, r2
 800554e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005552:	461a      	mov	r2, r3
 8005554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005558:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	212c      	movs	r1, #44	; 0x2c
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	4413      	add	r3, r2
 8005566:	3361      	adds	r3, #97	; 0x61
 8005568:	2208      	movs	r2, #8
 800556a:	701a      	strb	r2, [r3, #0]
}
 800556c:	e15a      	b.n	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	f040 814f 	bne.w	8005824 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	440a      	add	r2, r1
 800559c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a0:	f023 0302 	bic.w	r3, r3, #2
 80055a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	212c      	movs	r1, #44	; 0x2c
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	3361      	adds	r3, #97	; 0x61
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d17d      	bne.n	80056b6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	212c      	movs	r1, #44	; 0x2c
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	3360      	adds	r3, #96	; 0x60
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	212c      	movs	r1, #44	; 0x2c
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	333f      	adds	r3, #63	; 0x3f
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d00a      	beq.n	80055f6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	212c      	movs	r1, #44	; 0x2c
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	333f      	adds	r3, #63	; 0x3f
 80055ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	f040 8100 	bne.w	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d113      	bne.n	8005626 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	212c      	movs	r1, #44	; 0x2c
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	3355      	adds	r3, #85	; 0x55
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f083 0301 	eor.w	r3, r3, #1
 8005612:	b2d8      	uxtb	r0, r3
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	212c      	movs	r1, #44	; 0x2c
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	4413      	add	r3, r2
 8005620:	3355      	adds	r3, #85	; 0x55
 8005622:	4602      	mov	r2, r0
 8005624:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b01      	cmp	r3, #1
 800562c:	f040 80e3 	bne.w	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	212c      	movs	r1, #44	; 0x2c
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	334c      	adds	r3, #76	; 0x4c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80d8 	beq.w	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	212c      	movs	r1, #44	; 0x2c
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	334c      	adds	r3, #76	; 0x4c
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	202c      	movs	r0, #44	; 0x2c
 800565c:	fb00 f202 	mul.w	r2, r0, r2
 8005660:	440a      	add	r2, r1
 8005662:	3240      	adds	r2, #64	; 0x40
 8005664:	8812      	ldrh	r2, [r2, #0]
 8005666:	4413      	add	r3, r2
 8005668:	3b01      	subs	r3, #1
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	202c      	movs	r0, #44	; 0x2c
 8005670:	fb00 f202 	mul.w	r2, r0, r2
 8005674:	440a      	add	r2, r1
 8005676:	3240      	adds	r2, #64	; 0x40
 8005678:	8812      	ldrh	r2, [r2, #0]
 800567a:	fbb3 f3f2 	udiv	r3, r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 80b5 	beq.w	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3355      	adds	r3, #85	; 0x55
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f083 0301 	eor.w	r3, r3, #1
 80056a0:	b2d8      	uxtb	r0, r3
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	212c      	movs	r1, #44	; 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	3355      	adds	r3, #85	; 0x55
 80056b0:	4602      	mov	r2, r0
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e09f      	b.n	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	212c      	movs	r1, #44	; 0x2c
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	4413      	add	r3, r2
 80056c2:	3361      	adds	r3, #97	; 0x61
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d109      	bne.n	80056de <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	3360      	adds	r3, #96	; 0x60
 80056d8:	2202      	movs	r2, #2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	e08b      	b.n	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	212c      	movs	r1, #44	; 0x2c
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	4413      	add	r3, r2
 80056ea:	3361      	adds	r3, #97	; 0x61
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d109      	bne.n	8005706 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	212c      	movs	r1, #44	; 0x2c
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	3360      	adds	r3, #96	; 0x60
 8005700:	2202      	movs	r2, #2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	e077      	b.n	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	212c      	movs	r1, #44	; 0x2c
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	3361      	adds	r3, #97	; 0x61
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	2b05      	cmp	r3, #5
 8005718:	d109      	bne.n	800572e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	212c      	movs	r1, #44	; 0x2c
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	4413      	add	r3, r2
 8005726:	3360      	adds	r3, #96	; 0x60
 8005728:	2205      	movs	r2, #5
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e063      	b.n	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	212c      	movs	r1, #44	; 0x2c
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	4413      	add	r3, r2
 800573a:	3361      	adds	r3, #97	; 0x61
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d009      	beq.n	8005756 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	212c      	movs	r1, #44	; 0x2c
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	4413      	add	r3, r2
 800574e:	3361      	adds	r3, #97	; 0x61
 8005750:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005752:	2b08      	cmp	r3, #8
 8005754:	d14f      	bne.n	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	212c      	movs	r1, #44	; 0x2c
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	4413      	add	r3, r2
 8005762:	335c      	adds	r3, #92	; 0x5c
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	202c      	movs	r0, #44	; 0x2c
 800576e:	fb00 f303 	mul.w	r3, r0, r3
 8005772:	440b      	add	r3, r1
 8005774:	335c      	adds	r3, #92	; 0x5c
 8005776:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	212c      	movs	r1, #44	; 0x2c
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	4413      	add	r3, r2
 8005784:	335c      	adds	r3, #92	; 0x5c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d912      	bls.n	80057b2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	212c      	movs	r1, #44	; 0x2c
 8005792:	fb01 f303 	mul.w	r3, r1, r3
 8005796:	4413      	add	r3, r2
 8005798:	335c      	adds	r3, #92	; 0x5c
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	212c      	movs	r1, #44	; 0x2c
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	3360      	adds	r3, #96	; 0x60
 80057ac:	2204      	movs	r2, #4
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e021      	b.n	80057f6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	212c      	movs	r1, #44	; 0x2c
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	4413      	add	r3, r2
 80057be:	3360      	adds	r3, #96	; 0x60
 80057c0:	2202      	movs	r2, #2
 80057c2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057da:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057e2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	461a      	mov	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	461a      	mov	r2, r3
 8005804:	2302      	movs	r3, #2
 8005806:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	b2d9      	uxtb	r1, r3
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	202c      	movs	r0, #44	; 0x2c
 8005812:	fb00 f303 	mul.w	r3, r0, r3
 8005816:	4413      	add	r3, r2
 8005818:	3360      	adds	r3, #96	; 0x60
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f006 ffbc 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005824:	bf00      	nop
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	0c5b      	lsrs	r3, r3, #17
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	091b      	lsrs	r3, r3, #4
 800585c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005860:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d004      	beq.n	8005872 <HCD_RXQLVL_IRQHandler+0x46>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b05      	cmp	r3, #5
 800586c:	f000 80a9 	beq.w	80059c2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005870:	e0aa      	b.n	80059c8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80a6 	beq.w	80059c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	212c      	movs	r1, #44	; 0x2c
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	4413      	add	r3, r2
 8005886:	3344      	adds	r3, #68	; 0x44
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 809b 	beq.w	80059c6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	212c      	movs	r1, #44	; 0x2c
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	4413      	add	r3, r2
 800589c:	3350      	adds	r3, #80	; 0x50
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	441a      	add	r2, r3
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	202c      	movs	r0, #44	; 0x2c
 80058aa:	fb00 f303 	mul.w	r3, r0, r3
 80058ae:	440b      	add	r3, r1
 80058b0:	334c      	adds	r3, #76	; 0x4c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d87a      	bhi.n	80059ae <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	212c      	movs	r1, #44	; 0x2c
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	3344      	adds	r3, #68	; 0x44
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	b292      	uxth	r2, r2
 80058d0:	4619      	mov	r1, r3
 80058d2:	f002 ffb1 	bl	8008838 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	212c      	movs	r1, #44	; 0x2c
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	3344      	adds	r3, #68	; 0x44
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	441a      	add	r2, r3
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	202c      	movs	r0, #44	; 0x2c
 80058f0:	fb00 f303 	mul.w	r3, r0, r3
 80058f4:	440b      	add	r3, r1
 80058f6:	3344      	adds	r3, #68	; 0x44
 80058f8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	212c      	movs	r1, #44	; 0x2c
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	4413      	add	r3, r2
 8005906:	3350      	adds	r3, #80	; 0x50
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	441a      	add	r2, r3
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	202c      	movs	r0, #44	; 0x2c
 8005914:	fb00 f303 	mul.w	r3, r0, r3
 8005918:	440b      	add	r3, r1
 800591a:	3350      	adds	r3, #80	; 0x50
 800591c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	0cdb      	lsrs	r3, r3, #19
 800592e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005932:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	212c      	movs	r1, #44	; 0x2c
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	3340      	adds	r3, #64	; 0x40
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4293      	cmp	r3, r2
 800594a:	d13c      	bne.n	80059c6 <HCD_RXQLVL_IRQHandler+0x19a>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d039      	beq.n	80059c6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005968:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005970:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	212c      	movs	r1, #44	; 0x2c
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	4413      	add	r3, r2
 8005990:	3354      	adds	r3, #84	; 0x54
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	f083 0301 	eor.w	r3, r3, #1
 8005998:	b2d8      	uxtb	r0, r3
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	212c      	movs	r1, #44	; 0x2c
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	4413      	add	r3, r2
 80059a6:	3354      	adds	r3, #84	; 0x54
 80059a8:	4602      	mov	r2, r0
 80059aa:	701a      	strb	r2, [r3, #0]
      break;
 80059ac:	e00b      	b.n	80059c6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	212c      	movs	r1, #44	; 0x2c
 80059b4:	fb01 f303 	mul.w	r3, r1, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	3360      	adds	r3, #96	; 0x60
 80059bc:	2204      	movs	r2, #4
 80059be:	701a      	strb	r2, [r3, #0]
      break;
 80059c0:	e001      	b.n	80059c6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80059c2:	bf00      	nop
 80059c4:	e000      	b.n	80059c8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80059c6:	bf00      	nop
  }
}
 80059c8:	bf00      	nop
 80059ca:	3728      	adds	r7, #40	; 0x28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d10b      	bne.n	8005a20 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d102      	bne.n	8005a18 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f006 fea6 	bl	800c764 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f043 0302 	orr.w	r3, r3, #2
 8005a1e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d132      	bne.n	8005a90 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f043 0308 	orr.w	r3, r3, #8
 8005a30:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d126      	bne.n	8005a8a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d113      	bne.n	8005a6c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a4e:	d106      	bne.n	8005a5e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2102      	movs	r1, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f003 f84e 	bl	8008af8 <USB_InitFSLSPClkSel>
 8005a5c:	e011      	b.n	8005a82 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2101      	movs	r1, #1
 8005a64:	4618      	mov	r0, r3
 8005a66:	f003 f847 	bl	8008af8 <USB_InitFSLSPClkSel>
 8005a6a:	e00a      	b.n	8005a82 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d106      	bne.n	8005a82 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005a80:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f006 fe98 	bl	800c7b8 <HAL_HCD_PortEnabled_Callback>
 8005a88:	e002      	b.n	8005a90 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f006 fea2 	bl	800c7d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	d103      	bne.n	8005aa2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f043 0320 	orr.w	r3, r3, #32
 8005aa0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6013      	str	r3, [r2, #0]
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e12b      	b.n	8005d22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fd f8ec 	bl	8002cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	; 0x24
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b1c:	f002 f956 	bl	8007dcc <HAL_RCC_GetPCLK1Freq>
 8005b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4a81      	ldr	r2, [pc, #516]	; (8005d2c <HAL_I2C_Init+0x274>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d807      	bhi.n	8005b3c <HAL_I2C_Init+0x84>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a80      	ldr	r2, [pc, #512]	; (8005d30 <HAL_I2C_Init+0x278>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	bf94      	ite	ls
 8005b34:	2301      	movls	r3, #1
 8005b36:	2300      	movhi	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	e006      	b.n	8005b4a <HAL_I2C_Init+0x92>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a7d      	ldr	r2, [pc, #500]	; (8005d34 <HAL_I2C_Init+0x27c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bf94      	ite	ls
 8005b44:	2301      	movls	r3, #1
 8005b46:	2300      	movhi	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e0e7      	b.n	8005d22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a78      	ldr	r2, [pc, #480]	; (8005d38 <HAL_I2C_Init+0x280>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	0c9b      	lsrs	r3, r3, #18
 8005b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4a6a      	ldr	r2, [pc, #424]	; (8005d2c <HAL_I2C_Init+0x274>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d802      	bhi.n	8005b8c <HAL_I2C_Init+0xd4>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	e009      	b.n	8005ba0 <HAL_I2C_Init+0xe8>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	4a69      	ldr	r2, [pc, #420]	; (8005d3c <HAL_I2C_Init+0x284>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	099b      	lsrs	r3, r3, #6
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	495c      	ldr	r1, [pc, #368]	; (8005d2c <HAL_I2C_Init+0x274>)
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	d819      	bhi.n	8005bf4 <HAL_I2C_Init+0x13c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	1e59      	subs	r1, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bd4:	400b      	ands	r3, r1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_I2C_Init+0x138>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1e59      	subs	r1, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bee:	e051      	b.n	8005c94 <HAL_I2C_Init+0x1dc>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	e04f      	b.n	8005c94 <HAL_I2C_Init+0x1dc>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d111      	bne.n	8005c20 <HAL_I2C_Init+0x168>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1e58      	subs	r0, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6859      	ldr	r1, [r3, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	440b      	add	r3, r1
 8005c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e012      	b.n	8005c46 <HAL_I2C_Init+0x18e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1e58      	subs	r0, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	0099      	lsls	r1, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c36:	3301      	adds	r3, #1
 8005c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf0c      	ite	eq
 8005c40:	2301      	moveq	r3, #1
 8005c42:	2300      	movne	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_I2C_Init+0x196>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e022      	b.n	8005c94 <HAL_I2C_Init+0x1dc>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10e      	bne.n	8005c74 <HAL_I2C_Init+0x1bc>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1e58      	subs	r0, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	440b      	add	r3, r1
 8005c64:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c72:	e00f      	b.n	8005c94 <HAL_I2C_Init+0x1dc>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1e58      	subs	r0, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	0099      	lsls	r1, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	6809      	ldr	r1, [r1, #0]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6911      	ldr	r1, [r2, #16]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68d2      	ldr	r2, [r2, #12]
 8005cce:	4311      	orrs	r1, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	000186a0 	.word	0x000186a0
 8005d30:	001e847f 	.word	0x001e847f
 8005d34:	003d08ff 	.word	0x003d08ff
 8005d38:	431bde83 	.word	0x431bde83
 8005d3c:	10624dd3 	.word	0x10624dd3

08005d40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	817b      	strh	r3, [r7, #10]
 8005d50:	4613      	mov	r3, r2
 8005d52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d54:	f7fd fac0 	bl	80032d8 <HAL_GetTick>
 8005d58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	f040 80e0 	bne.w	8005f28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2319      	movs	r3, #25
 8005d6e:	2201      	movs	r2, #1
 8005d70:	4970      	ldr	r1, [pc, #448]	; (8005f34 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fc58 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e0d3      	b.n	8005f2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_I2C_Master_Transmit+0x50>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e0cc      	b.n	8005f2a <HAL_I2C_Master_Transmit+0x1ea>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d007      	beq.n	8005db6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0201 	orr.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2221      	movs	r2, #33	; 0x21
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	893a      	ldrh	r2, [r7, #8]
 8005de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a50      	ldr	r2, [pc, #320]	; (8005f38 <HAL_I2C_Master_Transmit+0x1f8>)
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005df8:	8979      	ldrh	r1, [r7, #10]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fac2 	bl	8006388 <I2C_MasterRequestWrite>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e08d      	b.n	8005f2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e24:	e066      	b.n	8005ef4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	6a39      	ldr	r1, [r7, #32]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fcd2 	bl	80067d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d107      	bne.n	8005e4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e06b      	b.n	8005f2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	781a      	ldrb	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_I2C_Master_Transmit+0x188>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d017      	beq.n	8005ec8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	6a39      	ldr	r1, [r7, #32]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fcc2 	bl	8006856 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00d      	beq.n	8005ef4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d107      	bne.n	8005ef0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e01a      	b.n	8005f2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d194      	bne.n	8005e26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e000      	b.n	8005f2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
  }
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	00100002 	.word	0x00100002
 8005f38:	ffff0000 	.word	0xffff0000

08005f3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08c      	sub	sp, #48	; 0x30
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	461a      	mov	r2, r3
 8005f48:	460b      	mov	r3, r1
 8005f4a:	817b      	strh	r3, [r7, #10]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f50:	f7fd f9c2 	bl	80032d8 <HAL_GetTick>
 8005f54:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	f040 820b 	bne.w	800637a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2319      	movs	r3, #25
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	497c      	ldr	r1, [pc, #496]	; (8006160 <HAL_I2C_Master_Receive+0x224>)
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fb5a 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e1fe      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_I2C_Master_Receive+0x50>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e1f7      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d007      	beq.n	8005fb2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2222      	movs	r2, #34	; 0x22
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	893a      	ldrh	r2, [r7, #8]
 8005fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <HAL_I2C_Master_Receive+0x228>)
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ff4:	8979      	ldrh	r1, [r7, #10]
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fa46 	bl	800648c <I2C_MasterRequestRead>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e1b8      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d113      	bne.n	800603a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006012:	2300      	movs	r3, #0
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e18c      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603e:	2b01      	cmp	r3, #1
 8006040:	d11b      	bne.n	800607a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e16c      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607e:	2b02      	cmp	r3, #2
 8006080:	d11b      	bne.n	80060ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006090:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a2:	2300      	movs	r3, #0
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	e14c      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060e0:	e138      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	f200 80f1 	bhi.w	80062ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d123      	bne.n	800613c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fbed 	bl	80068d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e139      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	855a      	strh	r2, [r3, #42]	; 0x2a
 800613a:	e10b      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006140:	2b02      	cmp	r3, #2
 8006142:	d14e      	bne.n	80061e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	2200      	movs	r2, #0
 800614c:	4906      	ldr	r1, [pc, #24]	; (8006168 <HAL_I2C_Master_Receive+0x22c>)
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fa6a 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e10e      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
 800615e:	bf00      	nop
 8006160:	00100002 	.word	0x00100002
 8006164:	ffff0000 	.word	0xffff0000
 8006168:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061e0:	e0b8      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	2200      	movs	r2, #0
 80061ea:	4966      	ldr	r1, [pc, #408]	; (8006384 <HAL_I2C_Master_Receive+0x448>)
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 fa1b 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0bf      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	2200      	movs	r2, #0
 8006246:	494f      	ldr	r1, [pc, #316]	; (8006384 <HAL_I2C_Master_Receive+0x448>)
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f9ed 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e091      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062cc:	e042      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fb00 	bl	80068d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e04c      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b04      	cmp	r3, #4
 8006320:	d118      	bne.n	8006354 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	2b00      	cmp	r3, #0
 800635a:	f47f aec2 	bne.w	80060e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	e000      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
  }
}
 800637c:	4618      	mov	r0, r3
 800637e:	3728      	adds	r7, #40	; 0x28
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	00010004 	.word	0x00010004

08006388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	603b      	str	r3, [r7, #0]
 8006394:	460b      	mov	r3, r1
 8006396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d006      	beq.n	80063b2 <I2C_MasterRequestWrite+0x2a>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d003      	beq.n	80063b2 <I2C_MasterRequestWrite+0x2a>
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063b0:	d108      	bne.n	80063c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e00b      	b.n	80063dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	2b12      	cmp	r3, #18
 80063ca:	d107      	bne.n	80063dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f91d 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00d      	beq.n	8006410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d103      	bne.n	800640c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e035      	b.n	800647c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006418:	d108      	bne.n	800642c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800641a:	897b      	ldrh	r3, [r7, #10]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006428:	611a      	str	r2, [r3, #16]
 800642a:	e01b      	b.n	8006464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800642c:	897b      	ldrh	r3, [r7, #10]
 800642e:	11db      	asrs	r3, r3, #7
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f003 0306 	and.w	r3, r3, #6
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f063 030f 	orn	r3, r3, #15
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	490e      	ldr	r1, [pc, #56]	; (8006484 <I2C_MasterRequestWrite+0xfc>)
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f943 	bl	80066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e010      	b.n	800647c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800645a:	897b      	ldrh	r3, [r7, #10]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4907      	ldr	r1, [pc, #28]	; (8006488 <I2C_MasterRequestWrite+0x100>)
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f933 	bl	80066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e000      	b.n	800647c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	00010008 	.word	0x00010008
 8006488:	00010002 	.word	0x00010002

0800648c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	460b      	mov	r3, r1
 800649a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d006      	beq.n	80064c6 <I2C_MasterRequestRead+0x3a>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d003      	beq.n	80064c6 <I2C_MasterRequestRead+0x3a>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064c4:	d108      	bne.n	80064d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e00b      	b.n	80064f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2b11      	cmp	r3, #17
 80064de:	d107      	bne.n	80064f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f893 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00d      	beq.n	8006524 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006516:	d103      	bne.n	8006520 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800651e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e079      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800652c:	d108      	bne.n	8006540 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800652e:	897b      	ldrh	r3, [r7, #10]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	611a      	str	r2, [r3, #16]
 800653e:	e05f      	b.n	8006600 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006540:	897b      	ldrh	r3, [r7, #10]
 8006542:	11db      	asrs	r3, r3, #7
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0306 	and.w	r3, r3, #6
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f063 030f 	orn	r3, r3, #15
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4930      	ldr	r1, [pc, #192]	; (8006620 <I2C_MasterRequestRead+0x194>)
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f8b9 	bl	80066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e054      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800656e:	897b      	ldrh	r3, [r7, #10]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4929      	ldr	r1, [pc, #164]	; (8006624 <I2C_MasterRequestRead+0x198>)
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 f8a9 	bl	80066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e044      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f831 	bl	8006628 <I2C_WaitOnFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065da:	d103      	bne.n	80065e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e017      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80065e8:	897b      	ldrh	r3, [r7, #10]
 80065ea:	11db      	asrs	r3, r3, #7
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 0306 	and.w	r3, r3, #6
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f063 030e 	orn	r3, r3, #14
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4907      	ldr	r1, [pc, #28]	; (8006624 <I2C_MasterRequestRead+0x198>)
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f865 	bl	80066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	00010008 	.word	0x00010008
 8006624:	00010002 	.word	0x00010002

08006628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006638:	e025      	b.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006640:	d021      	beq.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006642:	f7fc fe49 	bl	80032d8 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d302      	bcc.n	8006658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d116      	bne.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	f043 0220 	orr.w	r2, r3, #32
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e023      	b.n	80066ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	0c1b      	lsrs	r3, r3, #16
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10d      	bne.n	80066ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	43da      	mvns	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4013      	ands	r3, r2
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bf0c      	ite	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	2300      	movne	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	e00c      	b.n	80066c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	43da      	mvns	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4013      	ands	r3, r2
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf0c      	ite	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	2300      	movne	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d0b6      	beq.n	800663a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066e4:	e051      	b.n	800678a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f4:	d123      	bne.n	800673e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006704:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800670e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f043 0204 	orr.w	r2, r3, #4
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e046      	b.n	80067cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006744:	d021      	beq.n	800678a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006746:	f7fc fdc7 	bl	80032d8 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d302      	bcc.n	800675c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d116      	bne.n	800678a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f043 0220 	orr.w	r2, r3, #32
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e020      	b.n	80067cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	0c1b      	lsrs	r3, r3, #16
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10c      	bne.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	43da      	mvns	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4013      	ands	r3, r2
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	bf14      	ite	ne
 80067a6:	2301      	movne	r3, #1
 80067a8:	2300      	moveq	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	e00b      	b.n	80067c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	43da      	mvns	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4013      	ands	r3, r2
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d18d      	bne.n	80066e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067e0:	e02d      	b.n	800683e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 f8ce 	bl	8006984 <I2C_IsAcknowledgeFailed>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e02d      	b.n	800684e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f8:	d021      	beq.n	800683e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fc fd6d 	bl	80032d8 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d116      	bne.n	800683e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f043 0220 	orr.w	r2, r3, #32
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e007      	b.n	800684e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006848:	2b80      	cmp	r3, #128	; 0x80
 800684a:	d1ca      	bne.n	80067e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006862:	e02d      	b.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f88d 	bl	8006984 <I2C_IsAcknowledgeFailed>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e02d      	b.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800687a:	d021      	beq.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800687c:	f7fc fd2c 	bl	80032d8 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d302      	bcc.n	8006892 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d116      	bne.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	f043 0220 	orr.w	r2, r3, #32
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e007      	b.n	80068d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d1ca      	bne.n	8006864 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068e4:	e042      	b.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d119      	bne.n	8006928 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0210 	mvn.w	r2, #16
 80068fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e029      	b.n	800697c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006928:	f7fc fcd6 	bl	80032d8 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	429a      	cmp	r2, r3
 8006936:	d302      	bcc.n	800693e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d116      	bne.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e007      	b.n	800697c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d1b5      	bne.n	80068e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699a:	d11b      	bne.n	80069d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c0:	f043 0204 	orr.w	r2, r3, #4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e128      	b.n	8006c48 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a90      	ldr	r2, [pc, #576]	; (8006c50 <HAL_I2S_Init+0x26c>)
 8006a0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fc f99b 	bl	8002d4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a2c:	f023 030f 	bic.w	r3, r3, #15
 8006a30:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2202      	movs	r2, #2
 8006a38:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d060      	beq.n	8006b04 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e001      	b.n	8006a54 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006a50:	2320      	movs	r3, #32
 8006a52:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d802      	bhi.n	8006a62 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006a62:	2001      	movs	r0, #1
 8006a64:	f001 faa8 	bl	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a68:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a72:	d125      	bne.n	8006ac0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d010      	beq.n	8006a9e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	461a      	mov	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a98:	3305      	adds	r3, #5
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	e01f      	b.n	8006ade <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aba:	3305      	adds	r3, #5
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	e00e      	b.n	8006ade <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	3305      	adds	r3, #5
 8006adc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4a5c      	ldr	r2, [pc, #368]	; (8006c54 <HAL_I2S_Init+0x270>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	08db      	lsrs	r3, r3, #3
 8006ae8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e003      	b.n	8006b0c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006b04:	2302      	movs	r3, #2
 8006b06:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d902      	bls.n	8006b18 <HAL_I2S_Init+0x134>
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	2bff      	cmp	r3, #255	; 0xff
 8006b16:	d907      	bls.n	8006b28 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1c:	f043 0210 	orr.w	r2, r3, #16
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e08f      	b.n	8006c48 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	ea42 0103 	orr.w	r1, r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b46:	f023 030f 	bic.w	r3, r3, #15
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6851      	ldr	r1, [r2, #4]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6892      	ldr	r2, [r2, #8]
 8006b52:	4311      	orrs	r1, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	68d2      	ldr	r2, [r2, #12]
 8006b58:	4311      	orrs	r1, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6992      	ldr	r2, [r2, #24]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b6a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d161      	bne.n	8006c38 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a38      	ldr	r2, [pc, #224]	; (8006c58 <HAL_I2S_Init+0x274>)
 8006b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a37      	ldr	r2, [pc, #220]	; (8006c5c <HAL_I2S_Init+0x278>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d101      	bne.n	8006b88 <HAL_I2S_Init+0x1a4>
 8006b84:	4b36      	ldr	r3, [pc, #216]	; (8006c60 <HAL_I2S_Init+0x27c>)
 8006b86:	e001      	b.n	8006b8c <HAL_I2S_Init+0x1a8>
 8006b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	4932      	ldr	r1, [pc, #200]	; (8006c5c <HAL_I2S_Init+0x278>)
 8006b94:	428a      	cmp	r2, r1
 8006b96:	d101      	bne.n	8006b9c <HAL_I2S_Init+0x1b8>
 8006b98:	4a31      	ldr	r2, [pc, #196]	; (8006c60 <HAL_I2S_Init+0x27c>)
 8006b9a:	e001      	b.n	8006ba0 <HAL_I2S_Init+0x1bc>
 8006b9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006ba0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006ba4:	f023 030f 	bic.w	r3, r3, #15
 8006ba8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <HAL_I2S_Init+0x278>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d101      	bne.n	8006bb8 <HAL_I2S_Init+0x1d4>
 8006bb4:	4b2a      	ldr	r3, [pc, #168]	; (8006c60 <HAL_I2S_Init+0x27c>)
 8006bb6:	e001      	b.n	8006bbc <HAL_I2S_Init+0x1d8>
 8006bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a25      	ldr	r2, [pc, #148]	; (8006c5c <HAL_I2S_Init+0x278>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d101      	bne.n	8006bce <HAL_I2S_Init+0x1ea>
 8006bca:	4b25      	ldr	r3, [pc, #148]	; (8006c60 <HAL_I2S_Init+0x27c>)
 8006bcc:	e001      	b.n	8006bd2 <HAL_I2S_Init+0x1ee>
 8006bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bde:	d003      	beq.n	8006be8 <HAL_I2S_Init+0x204>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d103      	bne.n	8006bf0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	e001      	b.n	8006bf4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c12:	4313      	orrs	r3, r2
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	897b      	ldrh	r3, [r7, #10]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c20:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a0d      	ldr	r2, [pc, #52]	; (8006c5c <HAL_I2S_Init+0x278>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d101      	bne.n	8006c30 <HAL_I2S_Init+0x24c>
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <HAL_I2S_Init+0x27c>)
 8006c2e:	e001      	b.n	8006c34 <HAL_I2S_Init+0x250>
 8006c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c34:	897a      	ldrh	r2, [r7, #10]
 8006c36:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	08006f6d 	.word	0x08006f6d
 8006c54:	cccccccd 	.word	0xcccccccd
 8006c58:	08007081 	.word	0x08007081
 8006c5c:	40003800 	.word	0x40003800
 8006c60:	40003400 	.word	0x40003400

08006c64 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <HAL_I2S_Receive_DMA+0x1a>
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e0a1      	b.n	8006dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_I2S_Receive_DMA+0x2e>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e099      	b.n	8006dc6 <HAL_I2S_Receive_DMA+0x162>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d005      	beq.n	8006cb2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e089      	b.n	8006dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d002      	beq.n	8006cde <HAL_I2S_Receive_DMA+0x7a>
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d10a      	bne.n	8006cf4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	865a      	strh	r2, [r3, #50]	; 0x32
 8006cf2:	e005      	b.n	8006d00 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	88fa      	ldrh	r2, [r7, #6]
 8006cfe:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d04:	4a32      	ldr	r2, [pc, #200]	; (8006dd0 <HAL_I2S_Receive_DMA+0x16c>)
 8006d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0c:	4a31      	ldr	r2, [pc, #196]	; (8006dd4 <HAL_I2S_Receive_DMA+0x170>)
 8006d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d14:	4a30      	ldr	r2, [pc, #192]	; (8006dd8 <HAL_I2S_Receive_DMA+0x174>)
 8006d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d26:	d10a      	bne.n	8006d3e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	4619      	mov	r1, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006d54:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8006d56:	f7fc fcaf 	bl	80036b8 <HAL_DMA_Start_IT>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00f      	beq.n	8006d80 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d64:	f043 0208 	orr.w	r2, r3, #8
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e022      	b.n	8006dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d107      	bne.n	8006d9e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d9c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d107      	bne.n	8006dbc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	08006e4b 	.word	0x08006e4b
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006e67 	.word	0x08006e67

08006ddc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10e      	bne.n	8006e3c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7fa fbe1 	bl	8001604 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7fa fb95 	bl	8001588 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0203 	bic.w	r2, r2, #3
 8006e82:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9c:	f043 0208 	orr.w	r2, r3, #8
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff ffa5 	bl	8006df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	881a      	ldrh	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	1c9a      	adds	r2, r3, #2
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10e      	bne.n	8006f06 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ef6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7fa fbbd 	bl	8001680 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	b292      	uxth	r2, r2
 8006f22:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	1c9a      	adds	r2, r3, #2
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10e      	bne.n	8006f64 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fa fb50 	bl	8001604 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b04      	cmp	r3, #4
 8006f86:	d13a      	bne.n	8006ffe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d109      	bne.n	8006fa6 <I2S_IRQHandler+0x3a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9c:	2b40      	cmp	r3, #64	; 0x40
 8006f9e:	d102      	bne.n	8006fa6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff ffb4 	bl	8006f0e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fac:	2b40      	cmp	r3, #64	; 0x40
 8006fae:	d126      	bne.n	8006ffe <I2S_IRQHandler+0x92>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d11f      	bne.n	8006ffe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fcc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff0:	f043 0202 	orr.w	r2, r3, #2
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff fefb 	bl	8006df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b03      	cmp	r3, #3
 8007008:	d136      	bne.n	8007078 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b02      	cmp	r3, #2
 8007012:	d109      	bne.n	8007028 <I2S_IRQHandler+0xbc>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d102      	bne.n	8007028 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff ff45 	bl	8006eb2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b08      	cmp	r3, #8
 8007030:	d122      	bne.n	8007078 <I2S_IRQHandler+0x10c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b20      	cmp	r3, #32
 800703e:	d11b      	bne.n	8007078 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800704e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	f043 0204 	orr.w	r2, r3, #4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff febe 	bl	8006df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007078:	bf00      	nop
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4aa2      	ldr	r2, [pc, #648]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d101      	bne.n	800709e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800709a:	4ba2      	ldr	r3, [pc, #648]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800709c:	e001      	b.n	80070a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800709e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a9b      	ldr	r2, [pc, #620]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d101      	bne.n	80070bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80070b8:	4b9a      	ldr	r3, [pc, #616]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070ba:	e001      	b.n	80070c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80070bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070cc:	d004      	beq.n	80070d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f040 8099 	bne.w	800720a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d107      	bne.n	80070f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f925 	bl	800733c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d107      	bne.n	800710c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f9c8 	bl	800749c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d13a      	bne.n	800718c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d035      	beq.n	800718c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a7e      	ldr	r2, [pc, #504]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d101      	bne.n	800712e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800712a:	4b7e      	ldr	r3, [pc, #504]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800712c:	e001      	b.n	8007132 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800712e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4979      	ldr	r1, [pc, #484]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800713a:	428b      	cmp	r3, r1
 800713c:	d101      	bne.n	8007142 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800713e:	4b79      	ldr	r3, [pc, #484]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007140:	e001      	b.n	8007146 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007146:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800714a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800715a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717e:	f043 0202 	orr.w	r2, r3, #2
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fe34 	bl	8006df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b08      	cmp	r3, #8
 8007194:	f040 80be 	bne.w	8007314 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 80b8 	beq.w	8007314 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a59      	ldr	r2, [pc, #356]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d101      	bne.n	80071c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071c0:	e001      	b.n	80071c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80071c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4954      	ldr	r1, [pc, #336]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071ce:	428b      	cmp	r3, r1
 80071d0:	d101      	bne.n	80071d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80071d2:	4b54      	ldr	r3, [pc, #336]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071d4:	e001      	b.n	80071da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80071d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80071e0:	2300      	movs	r3, #0
 80071e2:	60bb      	str	r3, [r7, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	60bb      	str	r3, [r7, #8]
 80071ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	f043 0204 	orr.w	r2, r3, #4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fdf6 	bl	8006df4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007208:	e084      	b.n	8007314 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d107      	bne.n	8007224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8be 	bl	80073a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b01      	cmp	r3, #1
 800722c:	d107      	bne.n	800723e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f8fd 	bl	8007438 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d12f      	bne.n	80072a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d02a      	beq.n	80072a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007260:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a2e      	ldr	r2, [pc, #184]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d101      	bne.n	8007270 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800726c:	4b2d      	ldr	r3, [pc, #180]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800726e:	e001      	b.n	8007274 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007270:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4929      	ldr	r1, [pc, #164]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800727c:	428b      	cmp	r3, r1
 800727e:	d101      	bne.n	8007284 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007280:	4b28      	ldr	r3, [pc, #160]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007282:	e001      	b.n	8007288 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007288:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800728c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729a:	f043 0202 	orr.w	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff fda6 	bl	8006df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f003 0308 	and.w	r3, r3, #8
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d131      	bne.n	8007316 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d02c      	beq.n	8007316 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a17      	ldr	r2, [pc, #92]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d101      	bne.n	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80072c6:	4b17      	ldr	r3, [pc, #92]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072c8:	e001      	b.n	80072ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80072ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4912      	ldr	r1, [pc, #72]	; (8007320 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072d6:	428b      	cmp	r3, r1
 80072d8:	d101      	bne.n	80072de <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072dc:	e001      	b.n	80072e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80072de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072f6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007304:	f043 0204 	orr.w	r2, r3, #4
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff fd71 	bl	8006df4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007312:	e000      	b.n	8007316 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007314:	bf00      	nop
}
 8007316:	bf00      	nop
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	40003800 	.word	0x40003800
 8007324:	40003400 	.word	0x40003400

08007328 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	1c99      	adds	r1, r3, #2
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6251      	str	r1, [r2, #36]	; 0x24
 800734e:	881a      	ldrh	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d113      	bne.n	8007396 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800737c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d106      	bne.n	8007396 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff ffc9 	bl	8007328 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007396:	bf00      	nop
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	1c99      	adds	r1, r3, #2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6251      	str	r1, [r2, #36]	; 0x24
 80073b2:	8819      	ldrh	r1, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a1d      	ldr	r2, [pc, #116]	; (8007430 <I2SEx_TxISR_I2SExt+0x90>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d101      	bne.n	80073c2 <I2SEx_TxISR_I2SExt+0x22>
 80073be:	4b1d      	ldr	r3, [pc, #116]	; (8007434 <I2SEx_TxISR_I2SExt+0x94>)
 80073c0:	e001      	b.n	80073c6 <I2SEx_TxISR_I2SExt+0x26>
 80073c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073c6:	460a      	mov	r2, r1
 80073c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d121      	bne.n	8007426 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a12      	ldr	r2, [pc, #72]	; (8007430 <I2SEx_TxISR_I2SExt+0x90>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d101      	bne.n	80073f0 <I2SEx_TxISR_I2SExt+0x50>
 80073ec:	4b11      	ldr	r3, [pc, #68]	; (8007434 <I2SEx_TxISR_I2SExt+0x94>)
 80073ee:	e001      	b.n	80073f4 <I2SEx_TxISR_I2SExt+0x54>
 80073f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	490d      	ldr	r1, [pc, #52]	; (8007430 <I2SEx_TxISR_I2SExt+0x90>)
 80073fc:	428b      	cmp	r3, r1
 80073fe:	d101      	bne.n	8007404 <I2SEx_TxISR_I2SExt+0x64>
 8007400:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <I2SEx_TxISR_I2SExt+0x94>)
 8007402:	e001      	b.n	8007408 <I2SEx_TxISR_I2SExt+0x68>
 8007404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007408:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800740c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d106      	bne.n	8007426 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff ff81 	bl	8007328 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	40003800 	.word	0x40003800
 8007434:	40003400 	.word	0x40003400

08007438 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68d8      	ldr	r0, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	1c99      	adds	r1, r3, #2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007450:	b282      	uxth	r2, r0
 8007452:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d113      	bne.n	8007494 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800747a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff ff4a 	bl	8007328 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a20      	ldr	r2, [pc, #128]	; (800752c <I2SEx_RxISR_I2SExt+0x90>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <I2SEx_RxISR_I2SExt+0x16>
 80074ae:	4b20      	ldr	r3, [pc, #128]	; (8007530 <I2SEx_RxISR_I2SExt+0x94>)
 80074b0:	e001      	b.n	80074b6 <I2SEx_RxISR_I2SExt+0x1a>
 80074b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b6:	68d8      	ldr	r0, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	1c99      	adds	r1, r3, #2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80074c2:	b282      	uxth	r2, r0
 80074c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d121      	bne.n	8007522 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a12      	ldr	r2, [pc, #72]	; (800752c <I2SEx_RxISR_I2SExt+0x90>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d101      	bne.n	80074ec <I2SEx_RxISR_I2SExt+0x50>
 80074e8:	4b11      	ldr	r3, [pc, #68]	; (8007530 <I2SEx_RxISR_I2SExt+0x94>)
 80074ea:	e001      	b.n	80074f0 <I2SEx_RxISR_I2SExt+0x54>
 80074ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	490d      	ldr	r1, [pc, #52]	; (800752c <I2SEx_RxISR_I2SExt+0x90>)
 80074f8:	428b      	cmp	r3, r1
 80074fa:	d101      	bne.n	8007500 <I2SEx_RxISR_I2SExt+0x64>
 80074fc:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <I2SEx_RxISR_I2SExt+0x94>)
 80074fe:	e001      	b.n	8007504 <I2SEx_RxISR_I2SExt+0x68>
 8007500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007504:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007508:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750e:	b29b      	uxth	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d106      	bne.n	8007522 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ff03 	bl	8007328 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40003800 	.word	0x40003800
 8007530:	40003400 	.word	0x40003400

08007534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e264      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d075      	beq.n	800763e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007552:	4ba3      	ldr	r3, [pc, #652]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 030c 	and.w	r3, r3, #12
 800755a:	2b04      	cmp	r3, #4
 800755c:	d00c      	beq.n	8007578 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800755e:	4ba0      	ldr	r3, [pc, #640]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007566:	2b08      	cmp	r3, #8
 8007568:	d112      	bne.n	8007590 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800756a:	4b9d      	ldr	r3, [pc, #628]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007576:	d10b      	bne.n	8007590 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007578:	4b99      	ldr	r3, [pc, #612]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d05b      	beq.n	800763c <HAL_RCC_OscConfig+0x108>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d157      	bne.n	800763c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e23f      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007598:	d106      	bne.n	80075a8 <HAL_RCC_OscConfig+0x74>
 800759a:	4b91      	ldr	r3, [pc, #580]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a90      	ldr	r2, [pc, #576]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	e01d      	b.n	80075e4 <HAL_RCC_OscConfig+0xb0>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075b0:	d10c      	bne.n	80075cc <HAL_RCC_OscConfig+0x98>
 80075b2:	4b8b      	ldr	r3, [pc, #556]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a8a      	ldr	r2, [pc, #552]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	4b88      	ldr	r3, [pc, #544]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a87      	ldr	r2, [pc, #540]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e00b      	b.n	80075e4 <HAL_RCC_OscConfig+0xb0>
 80075cc:	4b84      	ldr	r3, [pc, #528]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a83      	ldr	r2, [pc, #524]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	4b81      	ldr	r3, [pc, #516]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a80      	ldr	r2, [pc, #512]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80075de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d013      	beq.n	8007614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ec:	f7fb fe74 	bl	80032d8 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075f4:	f7fb fe70 	bl	80032d8 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b64      	cmp	r3, #100	; 0x64
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e204      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007606:	4b76      	ldr	r3, [pc, #472]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f0      	beq.n	80075f4 <HAL_RCC_OscConfig+0xc0>
 8007612:	e014      	b.n	800763e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007614:	f7fb fe60 	bl	80032d8 <HAL_GetTick>
 8007618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800761c:	f7fb fe5c 	bl	80032d8 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b64      	cmp	r3, #100	; 0x64
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e1f0      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800762e:	4b6c      	ldr	r3, [pc, #432]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f0      	bne.n	800761c <HAL_RCC_OscConfig+0xe8>
 800763a:	e000      	b.n	800763e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d063      	beq.n	8007712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800764a:	4b65      	ldr	r3, [pc, #404]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 030c 	and.w	r3, r3, #12
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007656:	4b62      	ldr	r3, [pc, #392]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800765e:	2b08      	cmp	r3, #8
 8007660:	d11c      	bne.n	800769c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007662:	4b5f      	ldr	r3, [pc, #380]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d116      	bne.n	800769c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800766e:	4b5c      	ldr	r3, [pc, #368]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_RCC_OscConfig+0x152>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d001      	beq.n	8007686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e1c4      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007686:	4b56      	ldr	r3, [pc, #344]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	4952      	ldr	r1, [pc, #328]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007696:	4313      	orrs	r3, r2
 8007698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800769a:	e03a      	b.n	8007712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d020      	beq.n	80076e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076a4:	4b4f      	ldr	r3, [pc, #316]	; (80077e4 <HAL_RCC_OscConfig+0x2b0>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076aa:	f7fb fe15 	bl	80032d8 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076b2:	f7fb fe11 	bl	80032d8 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e1a5      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c4:	4b46      	ldr	r3, [pc, #280]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0f0      	beq.n	80076b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d0:	4b43      	ldr	r3, [pc, #268]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	4940      	ldr	r1, [pc, #256]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	600b      	str	r3, [r1, #0]
 80076e4:	e015      	b.n	8007712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076e6:	4b3f      	ldr	r3, [pc, #252]	; (80077e4 <HAL_RCC_OscConfig+0x2b0>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fb fdf4 	bl	80032d8 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076f4:	f7fb fdf0 	bl	80032d8 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e184      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007706:	4b36      	ldr	r3, [pc, #216]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f0      	bne.n	80076f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d030      	beq.n	8007780 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d016      	beq.n	8007754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007726:	4b30      	ldr	r3, [pc, #192]	; (80077e8 <HAL_RCC_OscConfig+0x2b4>)
 8007728:	2201      	movs	r2, #1
 800772a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800772c:	f7fb fdd4 	bl	80032d8 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007734:	f7fb fdd0 	bl	80032d8 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e164      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007746:	4b26      	ldr	r3, [pc, #152]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HAL_RCC_OscConfig+0x200>
 8007752:	e015      	b.n	8007780 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <HAL_RCC_OscConfig+0x2b4>)
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800775a:	f7fb fdbd 	bl	80032d8 <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007762:	f7fb fdb9 	bl	80032d8 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e14d      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f0      	bne.n	8007762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80a0 	beq.w	80078ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800778e:	2300      	movs	r3, #0
 8007790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007792:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10f      	bne.n	80077be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	4a0e      	ldr	r2, [pc, #56]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80077a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ac:	6413      	str	r3, [r2, #64]	; 0x40
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_RCC_OscConfig+0x2ac>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b6:	60bb      	str	r3, [r7, #8]
 80077b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ba:	2301      	movs	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077be:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <HAL_RCC_OscConfig+0x2b8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d121      	bne.n	800780e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077ca:	4b08      	ldr	r3, [pc, #32]	; (80077ec <HAL_RCC_OscConfig+0x2b8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a07      	ldr	r2, [pc, #28]	; (80077ec <HAL_RCC_OscConfig+0x2b8>)
 80077d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077d6:	f7fb fd7f 	bl	80032d8 <HAL_GetTick>
 80077da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077dc:	e011      	b.n	8007802 <HAL_RCC_OscConfig+0x2ce>
 80077de:	bf00      	nop
 80077e0:	40023800 	.word	0x40023800
 80077e4:	42470000 	.word	0x42470000
 80077e8:	42470e80 	.word	0x42470e80
 80077ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f0:	f7fb fd72 	bl	80032d8 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e106      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007802:	4b85      	ldr	r3, [pc, #532]	; (8007a18 <HAL_RCC_OscConfig+0x4e4>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d106      	bne.n	8007824 <HAL_RCC_OscConfig+0x2f0>
 8007816:	4b81      	ldr	r3, [pc, #516]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	4a80      	ldr	r2, [pc, #512]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 800781c:	f043 0301 	orr.w	r3, r3, #1
 8007820:	6713      	str	r3, [r2, #112]	; 0x70
 8007822:	e01c      	b.n	800785e <HAL_RCC_OscConfig+0x32a>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b05      	cmp	r3, #5
 800782a:	d10c      	bne.n	8007846 <HAL_RCC_OscConfig+0x312>
 800782c:	4b7b      	ldr	r3, [pc, #492]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 800782e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007830:	4a7a      	ldr	r2, [pc, #488]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 8007832:	f043 0304 	orr.w	r3, r3, #4
 8007836:	6713      	str	r3, [r2, #112]	; 0x70
 8007838:	4b78      	ldr	r3, [pc, #480]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 800783a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783c:	4a77      	ldr	r2, [pc, #476]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	6713      	str	r3, [r2, #112]	; 0x70
 8007844:	e00b      	b.n	800785e <HAL_RCC_OscConfig+0x32a>
 8007846:	4b75      	ldr	r3, [pc, #468]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	4a74      	ldr	r2, [pc, #464]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 800784c:	f023 0301 	bic.w	r3, r3, #1
 8007850:	6713      	str	r3, [r2, #112]	; 0x70
 8007852:	4b72      	ldr	r3, [pc, #456]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 8007854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007856:	4a71      	ldr	r2, [pc, #452]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 8007858:	f023 0304 	bic.w	r3, r3, #4
 800785c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d015      	beq.n	8007892 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007866:	f7fb fd37 	bl	80032d8 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800786c:	e00a      	b.n	8007884 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800786e:	f7fb fd33 	bl	80032d8 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	f241 3288 	movw	r2, #5000	; 0x1388
 800787c:	4293      	cmp	r3, r2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e0c5      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007884:	4b65      	ldr	r3, [pc, #404]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 8007886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0ee      	beq.n	800786e <HAL_RCC_OscConfig+0x33a>
 8007890:	e014      	b.n	80078bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007892:	f7fb fd21 	bl	80032d8 <HAL_GetTick>
 8007896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007898:	e00a      	b.n	80078b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800789a:	f7fb fd1d 	bl	80032d8 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e0af      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078b0:	4b5a      	ldr	r3, [pc, #360]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 80078b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1ee      	bne.n	800789a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d105      	bne.n	80078ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078c2:	4b56      	ldr	r3, [pc, #344]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	4a55      	ldr	r2, [pc, #340]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 80078c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 809b 	beq.w	8007a0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078d8:	4b50      	ldr	r3, [pc, #320]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f003 030c 	and.w	r3, r3, #12
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d05c      	beq.n	800799e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d141      	bne.n	8007970 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ec:	4b4c      	ldr	r3, [pc, #304]	; (8007a20 <HAL_RCC_OscConfig+0x4ec>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f2:	f7fb fcf1 	bl	80032d8 <HAL_GetTick>
 80078f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078f8:	e008      	b.n	800790c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078fa:	f7fb fced 	bl	80032d8 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d901      	bls.n	800790c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e081      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800790c:	4b43      	ldr	r3, [pc, #268]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1f0      	bne.n	80078fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	019b      	lsls	r3, r3, #6
 8007928:	431a      	orrs	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	085b      	lsrs	r3, r3, #1
 8007930:	3b01      	subs	r3, #1
 8007932:	041b      	lsls	r3, r3, #16
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	061b      	lsls	r3, r3, #24
 800793c:	4937      	ldr	r1, [pc, #220]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 800793e:	4313      	orrs	r3, r2
 8007940:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007942:	4b37      	ldr	r3, [pc, #220]	; (8007a20 <HAL_RCC_OscConfig+0x4ec>)
 8007944:	2201      	movs	r2, #1
 8007946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007948:	f7fb fcc6 	bl	80032d8 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007950:	f7fb fcc2 	bl	80032d8 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e056      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007962:	4b2e      	ldr	r3, [pc, #184]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0f0      	beq.n	8007950 <HAL_RCC_OscConfig+0x41c>
 800796e:	e04e      	b.n	8007a0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007970:	4b2b      	ldr	r3, [pc, #172]	; (8007a20 <HAL_RCC_OscConfig+0x4ec>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007976:	f7fb fcaf 	bl	80032d8 <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800797c:	e008      	b.n	8007990 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800797e:	f7fb fcab 	bl	80032d8 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d901      	bls.n	8007990 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e03f      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007990:	4b22      	ldr	r3, [pc, #136]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1f0      	bne.n	800797e <HAL_RCC_OscConfig+0x44a>
 800799c:	e037      	b.n	8007a0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e032      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079aa:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <HAL_RCC_OscConfig+0x4e8>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d028      	beq.n	8007a0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d121      	bne.n	8007a0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d11a      	bne.n	8007a0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079da:	4013      	ands	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d111      	bne.n	8007a0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	085b      	lsrs	r3, r3, #1
 80079f2:	3b01      	subs	r3, #1
 80079f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d107      	bne.n	8007a0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d001      	beq.n	8007a0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40007000 	.word	0x40007000
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	42470060 	.word	0x42470060

08007a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e0cc      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a38:	4b68      	ldr	r3, [pc, #416]	; (8007bdc <HAL_RCC_ClockConfig+0x1b8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d90c      	bls.n	8007a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a46:	4b65      	ldr	r3, [pc, #404]	; (8007bdc <HAL_RCC_ClockConfig+0x1b8>)
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4e:	4b63      	ldr	r3, [pc, #396]	; (8007bdc <HAL_RCC_ClockConfig+0x1b8>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0307 	and.w	r3, r3, #7
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0b8      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d020      	beq.n	8007aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a78:	4b59      	ldr	r3, [pc, #356]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4a58      	ldr	r2, [pc, #352]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0308 	and.w	r3, r3, #8
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a90:	4b53      	ldr	r3, [pc, #332]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	4a52      	ldr	r2, [pc, #328]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a9c:	4b50      	ldr	r3, [pc, #320]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	494d      	ldr	r1, [pc, #308]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d044      	beq.n	8007b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d107      	bne.n	8007ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ac2:	4b47      	ldr	r3, [pc, #284]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d119      	bne.n	8007b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e07f      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d003      	beq.n	8007ae2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d107      	bne.n	8007af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae2:	4b3f      	ldr	r3, [pc, #252]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e06f      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af2:	4b3b      	ldr	r3, [pc, #236]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e067      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b02:	4b37      	ldr	r3, [pc, #220]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f023 0203 	bic.w	r2, r3, #3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	4934      	ldr	r1, [pc, #208]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b14:	f7fb fbe0 	bl	80032d8 <HAL_GetTick>
 8007b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b1a:	e00a      	b.n	8007b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b1c:	f7fb fbdc 	bl	80032d8 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e04f      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b32:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 020c 	and.w	r2, r3, #12
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d1eb      	bne.n	8007b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b44:	4b25      	ldr	r3, [pc, #148]	; (8007bdc <HAL_RCC_ClockConfig+0x1b8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d20c      	bcs.n	8007b6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b52:	4b22      	ldr	r3, [pc, #136]	; (8007bdc <HAL_RCC_ClockConfig+0x1b8>)
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b5a:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <HAL_RCC_ClockConfig+0x1b8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d001      	beq.n	8007b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e032      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d008      	beq.n	8007b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b78:	4b19      	ldr	r3, [pc, #100]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4916      	ldr	r1, [pc, #88]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d009      	beq.n	8007baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b96:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	490e      	ldr	r1, [pc, #56]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007baa:	f000 f821 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	4b0b      	ldr	r3, [pc, #44]	; (8007be0 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	091b      	lsrs	r3, r3, #4
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	490a      	ldr	r1, [pc, #40]	; (8007be4 <HAL_RCC_ClockConfig+0x1c0>)
 8007bbc:	5ccb      	ldrb	r3, [r1, r3]
 8007bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc2:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <HAL_RCC_ClockConfig+0x1c8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fb fb40 	bl	8003250 <HAL_InitTick>

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	40023c00 	.word	0x40023c00
 8007be0:	40023800 	.word	0x40023800
 8007be4:	0800d898 	.word	0x0800d898
 8007be8:	200002a4 	.word	0x200002a4
 8007bec:	200002a8 	.word	0x200002a8

08007bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	607b      	str	r3, [r7, #4]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	2300      	movs	r3, #0
 8007c02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c08:	4b67      	ldr	r3, [pc, #412]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 030c 	and.w	r3, r3, #12
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d00d      	beq.n	8007c30 <HAL_RCC_GetSysClockFreq+0x40>
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	f200 80bd 	bhi.w	8007d94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_RCC_GetSysClockFreq+0x34>
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d003      	beq.n	8007c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8007c22:	e0b7      	b.n	8007d94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c24:	4b61      	ldr	r3, [pc, #388]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c26:	60bb      	str	r3, [r7, #8]
       break;
 8007c28:	e0b7      	b.n	8007d9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c2a:	4b61      	ldr	r3, [pc, #388]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007c2c:	60bb      	str	r3, [r7, #8]
      break;
 8007c2e:	e0b4      	b.n	8007d9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c30:	4b5d      	ldr	r3, [pc, #372]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c3a:	4b5b      	ldr	r3, [pc, #364]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d04d      	beq.n	8007ce2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c46:	4b58      	ldr	r3, [pc, #352]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	099b      	lsrs	r3, r3, #6
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c56:	f04f 0100 	mov.w	r1, #0
 8007c5a:	ea02 0800 	and.w	r8, r2, r0
 8007c5e:	ea03 0901 	and.w	r9, r3, r1
 8007c62:	4640      	mov	r0, r8
 8007c64:	4649      	mov	r1, r9
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	f04f 0300 	mov.w	r3, #0
 8007c6e:	014b      	lsls	r3, r1, #5
 8007c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c74:	0142      	lsls	r2, r0, #5
 8007c76:	4610      	mov	r0, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	ebb0 0008 	subs.w	r0, r0, r8
 8007c7e:	eb61 0109 	sbc.w	r1, r1, r9
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	018b      	lsls	r3, r1, #6
 8007c8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c90:	0182      	lsls	r2, r0, #6
 8007c92:	1a12      	subs	r2, r2, r0
 8007c94:	eb63 0301 	sbc.w	r3, r3, r1
 8007c98:	f04f 0000 	mov.w	r0, #0
 8007c9c:	f04f 0100 	mov.w	r1, #0
 8007ca0:	00d9      	lsls	r1, r3, #3
 8007ca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ca6:	00d0      	lsls	r0, r2, #3
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	eb12 0208 	adds.w	r2, r2, r8
 8007cb0:	eb43 0309 	adc.w	r3, r3, r9
 8007cb4:	f04f 0000 	mov.w	r0, #0
 8007cb8:	f04f 0100 	mov.w	r1, #0
 8007cbc:	0259      	lsls	r1, r3, #9
 8007cbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007cc2:	0250      	lsls	r0, r2, #9
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f04f 0300 	mov.w	r3, #0
 8007cd4:	f7f8 fec2 	bl	8000a5c <__aeabi_uldivmod>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4613      	mov	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e04a      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce2:	4b31      	ldr	r3, [pc, #196]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	099b      	lsrs	r3, r3, #6
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f04f 0300 	mov.w	r3, #0
 8007cee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cf2:	f04f 0100 	mov.w	r1, #0
 8007cf6:	ea02 0400 	and.w	r4, r2, r0
 8007cfa:	ea03 0501 	and.w	r5, r3, r1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	014b      	lsls	r3, r1, #5
 8007d0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d10:	0142      	lsls	r2, r0, #5
 8007d12:	4610      	mov	r0, r2
 8007d14:	4619      	mov	r1, r3
 8007d16:	1b00      	subs	r0, r0, r4
 8007d18:	eb61 0105 	sbc.w	r1, r1, r5
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	018b      	lsls	r3, r1, #6
 8007d26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d2a:	0182      	lsls	r2, r0, #6
 8007d2c:	1a12      	subs	r2, r2, r0
 8007d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8007d32:	f04f 0000 	mov.w	r0, #0
 8007d36:	f04f 0100 	mov.w	r1, #0
 8007d3a:	00d9      	lsls	r1, r3, #3
 8007d3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d40:	00d0      	lsls	r0, r2, #3
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	1912      	adds	r2, r2, r4
 8007d48:	eb45 0303 	adc.w	r3, r5, r3
 8007d4c:	f04f 0000 	mov.w	r0, #0
 8007d50:	f04f 0100 	mov.w	r1, #0
 8007d54:	0299      	lsls	r1, r3, #10
 8007d56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d5a:	0290      	lsls	r0, r2, #10
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4610      	mov	r0, r2
 8007d62:	4619      	mov	r1, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	f7f8 fe76 	bl	8000a5c <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4613      	mov	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d78:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	0c1b      	lsrs	r3, r3, #16
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	3301      	adds	r3, #1
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	60bb      	str	r3, [r7, #8]
      break;
 8007d92:	e002      	b.n	8007d9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d94:	4b05      	ldr	r3, [pc, #20]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d96:	60bb      	str	r3, [r7, #8]
      break;
 8007d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007da6:	bf00      	nop
 8007da8:	40023800 	.word	0x40023800
 8007dac:	00f42400 	.word	0x00f42400
 8007db0:	007a1200 	.word	0x007a1200

08007db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007db8:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dba:	681b      	ldr	r3, [r3, #0]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	200002a4 	.word	0x200002a4

08007dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dd0:	f7ff fff0 	bl	8007db4 <HAL_RCC_GetHCLKFreq>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	0a9b      	lsrs	r3, r3, #10
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	4903      	ldr	r1, [pc, #12]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de2:	5ccb      	ldrb	r3, [r1, r3]
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	40023800 	.word	0x40023800
 8007df0:	0800d8a8 	.word	0x0800d8a8

08007df4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d105      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d035      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e1c:	4b62      	ldr	r3, [pc, #392]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e22:	f7fb fa59 	bl	80032d8 <HAL_GetTick>
 8007e26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e28:	e008      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e2a:	f7fb fa55 	bl	80032d8 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d901      	bls.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e0b0      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e3c:	4b5b      	ldr	r3, [pc, #364]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1f0      	bne.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	019a      	lsls	r2, r3, #6
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	071b      	lsls	r3, r3, #28
 8007e54:	4955      	ldr	r1, [pc, #340]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e5c:	4b52      	ldr	r3, [pc, #328]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e62:	f7fb fa39 	bl	80032d8 <HAL_GetTick>
 8007e66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e68:	e008      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e6a:	f7fb fa35 	bl	80032d8 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e090      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e7c:	4b4b      	ldr	r3, [pc, #300]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0f0      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8083 	beq.w	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	4b44      	ldr	r3, [pc, #272]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	4a43      	ldr	r2, [pc, #268]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ea6:	4b41      	ldr	r3, [pc, #260]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007eb2:	4b3f      	ldr	r3, [pc, #252]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a3e      	ldr	r2, [pc, #248]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ebc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ebe:	f7fb fa0b 	bl	80032d8 <HAL_GetTick>
 8007ec2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ec4:	e008      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ec6:	f7fb fa07 	bl	80032d8 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d901      	bls.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e062      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ed8:	4b35      	ldr	r3, [pc, #212]	; (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0f0      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ee4:	4b31      	ldr	r3, [pc, #196]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d02f      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d028      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f02:	4b2a      	ldr	r3, [pc, #168]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f0c:	4b29      	ldr	r3, [pc, #164]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f12:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007f18:	4a24      	ldr	r2, [pc, #144]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f1e:	4b23      	ldr	r3, [pc, #140]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d114      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007f2a:	f7fb f9d5 	bl	80032d8 <HAL_GetTick>
 8007f2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f30:	e00a      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f32:	f7fb f9d1 	bl	80032d8 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d901      	bls.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e02a      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f48:	4b18      	ldr	r3, [pc, #96]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0ee      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f60:	d10d      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f76:	490d      	ldr	r1, [pc, #52]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	608b      	str	r3, [r1, #8]
 8007f7c:	e005      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007f88:	6093      	str	r3, [r2, #8]
 8007f8a:	4b08      	ldr	r3, [pc, #32]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f96:	4905      	ldr	r1, [pc, #20]	; (8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	42470068 	.word	0x42470068
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	40007000 	.word	0x40007000
 8007fb4:	42470e40 	.word	0x42470e40

08007fb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d13e      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007fd6:	4b23      	ldr	r3, [pc, #140]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d12f      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007fec:	4b1e      	ldr	r3, [pc, #120]	; (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007fee:	617b      	str	r3, [r7, #20]
          break;
 8007ff0:	e02f      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007ff2:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ffe:	d108      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008008:	4a18      	ldr	r2, [pc, #96]	; (800806c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800800a:	fbb2 f3f3 	udiv	r3, r2, r3
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	e007      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008012:	4b14      	ldr	r3, [pc, #80]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800801a:	4a15      	ldr	r2, [pc, #84]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800801c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008020:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008022:	4b10      	ldr	r3, [pc, #64]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008028:	099b      	lsrs	r3, r3, #6
 800802a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	fb02 f303 	mul.w	r3, r2, r3
 8008034:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008036:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803c:	0f1b      	lsrs	r3, r3, #28
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	fbb2 f3f3 	udiv	r3, r2, r3
 8008048:	617b      	str	r3, [r7, #20]
          break;
 800804a:	e002      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]
          break;
 8008050:	bf00      	nop
        }
      }
      break;
 8008052:	bf00      	nop
    }
  }
  return frequency;
 8008054:	697b      	ldr	r3, [r7, #20]
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40023800 	.word	0x40023800
 8008068:	00bb8000 	.word	0x00bb8000
 800806c:	007a1200 	.word	0x007a1200
 8008070:	00f42400 	.word	0x00f42400

08008074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e07b      	b.n	800817e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	2b00      	cmp	r3, #0
 800808c:	d108      	bne.n	80080a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008096:	d009      	beq.n	80080ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	61da      	str	r2, [r3, #28]
 800809e:	e005      	b.n	80080ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fa ff8a 	bl	8002fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	431a      	orrs	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008126:	431a      	orrs	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008130:	ea42 0103 	orr.w	r1, r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008138:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	0c1b      	lsrs	r3, r3, #16
 800814a:	f003 0104 	and.w	r1, r3, #4
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	f003 0210 	and.w	r2, r3, #16
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800816c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b088      	sub	sp, #32
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	603b      	str	r3, [r7, #0]
 8008192:	4613      	mov	r3, r2
 8008194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_SPI_Transmit+0x22>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e126      	b.n	80083f6 <HAL_SPI_Transmit+0x270>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081b0:	f7fb f892 	bl	80032d8 <HAL_GetTick>
 80081b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d002      	beq.n	80081cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80081c6:	2302      	movs	r3, #2
 80081c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081ca:	e10b      	b.n	80083e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_SPI_Transmit+0x52>
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80081dc:	e102      	b.n	80083e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2203      	movs	r2, #3
 80081e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	88fa      	ldrh	r2, [r7, #6]
 80081f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	88fa      	ldrh	r2, [r7, #6]
 80081fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008224:	d10f      	bne.n	8008246 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008234:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008244:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d007      	beq.n	8008264 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800826c:	d14b      	bne.n	8008306 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <HAL_SPI_Transmit+0xf6>
 8008276:	8afb      	ldrh	r3, [r7, #22]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d13e      	bne.n	80082fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	881a      	ldrh	r2, [r3, #0]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828c:	1c9a      	adds	r2, r3, #2
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80082a0:	e02b      	b.n	80082fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d112      	bne.n	80082d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b4:	881a      	ldrh	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	1c9a      	adds	r2, r3, #2
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80082d4:	e011      	b.n	80082fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082d6:	f7fa ffff 	bl	80032d8 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d803      	bhi.n	80082ee <HAL_SPI_Transmit+0x168>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ec:	d102      	bne.n	80082f4 <HAL_SPI_Transmit+0x16e>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082f8:	e074      	b.n	80083e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1ce      	bne.n	80082a2 <HAL_SPI_Transmit+0x11c>
 8008304:	e04c      	b.n	80083a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <HAL_SPI_Transmit+0x18e>
 800830e:	8afb      	ldrh	r3, [r7, #22]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d140      	bne.n	8008396 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	330c      	adds	r3, #12
 800831e:	7812      	ldrb	r2, [r2, #0]
 8008320:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008330:	b29b      	uxth	r3, r3
 8008332:	3b01      	subs	r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800833a:	e02c      	b.n	8008396 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b02      	cmp	r3, #2
 8008348:	d113      	bne.n	8008372 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	330c      	adds	r3, #12
 8008354:	7812      	ldrb	r2, [r2, #0]
 8008356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008366:	b29b      	uxth	r3, r3
 8008368:	3b01      	subs	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008370:	e011      	b.n	8008396 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008372:	f7fa ffb1 	bl	80032d8 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d803      	bhi.n	800838a <HAL_SPI_Transmit+0x204>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008388:	d102      	bne.n	8008390 <HAL_SPI_Transmit+0x20a>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008394:	e026      	b.n	80083e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1cd      	bne.n	800833c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 f8b3 	bl	8008510 <SPI_EndRxTxTransaction>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2220      	movs	r2, #32
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083be:	2300      	movs	r3, #0
 80083c0:	613b      	str	r3, [r7, #16]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	77fb      	strb	r3, [r7, #31]
 80083e0:	e000      	b.n	80083e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80083e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	4613      	mov	r3, r2
 800840e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008410:	f7fa ff62 	bl	80032d8 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	1a9b      	subs	r3, r3, r2
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4413      	add	r3, r2
 800841e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008420:	f7fa ff5a 	bl	80032d8 <HAL_GetTick>
 8008424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008426:	4b39      	ldr	r3, [pc, #228]	; (800850c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	015b      	lsls	r3, r3, #5
 800842c:	0d1b      	lsrs	r3, r3, #20
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	fb02 f303 	mul.w	r3, r2, r3
 8008434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008436:	e054      	b.n	80084e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800843e:	d050      	beq.n	80084e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008440:	f7fa ff4a 	bl	80032d8 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	429a      	cmp	r2, r3
 800844e:	d902      	bls.n	8008456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d13d      	bne.n	80084d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800846e:	d111      	bne.n	8008494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008478:	d004      	beq.n	8008484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008482:	d107      	bne.n	8008494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849c:	d10f      	bne.n	80084be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e017      	b.n	8008502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	3b01      	subs	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4013      	ands	r3, r2
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	bf0c      	ite	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	2300      	movne	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d19b      	bne.n	8008438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3720      	adds	r7, #32
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200002a4 	.word	0x200002a4

08008510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800851c:	4b1b      	ldr	r3, [pc, #108]	; (800858c <SPI_EndRxTxTransaction+0x7c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a1b      	ldr	r2, [pc, #108]	; (8008590 <SPI_EndRxTxTransaction+0x80>)
 8008522:	fba2 2303 	umull	r2, r3, r2, r3
 8008526:	0d5b      	lsrs	r3, r3, #21
 8008528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800852c:	fb02 f303 	mul.w	r3, r2, r3
 8008530:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800853a:	d112      	bne.n	8008562 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2200      	movs	r2, #0
 8008544:	2180      	movs	r1, #128	; 0x80
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7ff ff5a 	bl	8008400 <SPI_WaitFlagStateUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d016      	beq.n	8008580 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008556:	f043 0220 	orr.w	r2, r3, #32
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e00f      	b.n	8008582 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00a      	beq.n	800857e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	3b01      	subs	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008578:	2b80      	cmp	r3, #128	; 0x80
 800857a:	d0f2      	beq.n	8008562 <SPI_EndRxTxTransaction+0x52>
 800857c:	e000      	b.n	8008580 <SPI_EndRxTxTransaction+0x70>
        break;
 800857e:	bf00      	nop
  }

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	200002a4 	.word	0x200002a4
 8008590:	165e9f81 	.word	0x165e9f81

08008594 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008594:	b084      	sub	sp, #16
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	f107 001c 	add.w	r0, r7, #28
 80085a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d122      	bne.n	80085f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80085c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d105      	bne.n	80085e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f9a0 	bl	800892c <USB_CoreReset>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e01a      	b.n	8008628 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f994 	bl	800892c <USB_CoreReset>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
 800861a:	e005      	b.n	8008628 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	2b01      	cmp	r3, #1
 800862c:	d10b      	bne.n	8008646 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f043 0206 	orr.w	r2, r3, #6
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008652:	b004      	add	sp, #16
 8008654:	4770      	bx	lr

08008656 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f043 0201 	orr.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f023 0201 	bic.w	r2, r3, #1
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086b6:	78fb      	ldrb	r3, [r7, #3]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d115      	bne.n	80086e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086c8:	2001      	movs	r0, #1
 80086ca:	f7fa fe11 	bl	80032f0 <HAL_Delay>
      ms++;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f91a 	bl	800890e <USB_GetMode>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d01e      	beq.n	800871e <USB_SetCurrentMode+0x84>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b31      	cmp	r3, #49	; 0x31
 80086e4:	d9f0      	bls.n	80086c8 <USB_SetCurrentMode+0x2e>
 80086e6:	e01a      	b.n	800871e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086e8:	78fb      	ldrb	r3, [r7, #3]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d115      	bne.n	800871a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80086fa:	2001      	movs	r0, #1
 80086fc:	f7fa fdf8 	bl	80032f0 <HAL_Delay>
      ms++;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f901 	bl	800890e <USB_GetMode>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <USB_SetCurrentMode+0x84>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2b31      	cmp	r3, #49	; 0x31
 8008716:	d9f0      	bls.n	80086fa <USB_SetCurrentMode+0x60>
 8008718:	e001      	b.n	800871e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e005      	b.n	800872a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b32      	cmp	r3, #50	; 0x32
 8008722:	d101      	bne.n	8008728 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	019b      	lsls	r3, r3, #6
 8008746:	f043 0220 	orr.w	r2, r3, #32
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	4a08      	ldr	r2, [pc, #32]	; (8008778 <USB_FlushTxFifo+0x44>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d901      	bls.n	800875e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e006      	b.n	800876c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b20      	cmp	r3, #32
 8008768:	d0f1      	beq.n	800874e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	00030d40 	.word	0x00030d40

0800877c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2210      	movs	r2, #16
 800878c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3301      	adds	r3, #1
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	4a08      	ldr	r2, [pc, #32]	; (80087b8 <USB_FlushRxFifo+0x3c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d901      	bls.n	800879e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e006      	b.n	80087ac <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 0310 	and.w	r3, r3, #16
 80087a6:	2b10      	cmp	r3, #16
 80087a8:	d0f1      	beq.n	800878e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	00030d40 	.word	0x00030d40

080087bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80087bc:	b480      	push	{r7}
 80087be:	b089      	sub	sp, #36	; 0x24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4611      	mov	r1, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	460b      	mov	r3, r1
 80087cc:	71fb      	strb	r3, [r7, #7]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80087da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d123      	bne.n	800882a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80087e2:	88bb      	ldrh	r3, [r7, #4]
 80087e4:	3303      	adds	r3, #3
 80087e6:	089b      	lsrs	r3, r3, #2
 80087e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80087ea:	2300      	movs	r3, #0
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	e018      	b.n	8008822 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	031a      	lsls	r2, r3, #12
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087fc:	461a      	mov	r2, r3
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	3301      	adds	r3, #1
 8008808:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	3301      	adds	r3, #1
 800880e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	3301      	adds	r3, #1
 800881a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	3301      	adds	r3, #1
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	429a      	cmp	r2, r3
 8008828:	d3e2      	bcc.n	80087f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3724      	adds	r7, #36	; 0x24
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008838:	b480      	push	{r7}
 800883a:	b08b      	sub	sp, #44	; 0x2c
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	089b      	lsrs	r3, r3, #2
 8008852:	b29b      	uxth	r3, r3
 8008854:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800885e:	2300      	movs	r3, #0
 8008860:	623b      	str	r3, [r7, #32]
 8008862:	e014      	b.n	800888e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	3301      	adds	r3, #1
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	3301      	adds	r3, #1
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	3301      	adds	r3, #1
 8008880:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	3301      	adds	r3, #1
 8008886:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	3301      	adds	r3, #1
 800888c:	623b      	str	r3, [r7, #32]
 800888e:	6a3a      	ldr	r2, [r7, #32]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	429a      	cmp	r2, r3
 8008894:	d3e6      	bcc.n	8008864 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008896:	8bfb      	ldrh	r3, [r7, #30]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01e      	beq.n	80088da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a6:	461a      	mov	r2, r3
 80088a8:	f107 0310 	add.w	r3, r7, #16
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	fa22 f303 	lsr.w	r3, r2, r3
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	701a      	strb	r2, [r3, #0]
      i++;
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	3301      	adds	r3, #1
 80088c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	3301      	adds	r3, #1
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80088ce:	8bfb      	ldrh	r3, [r7, #30]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80088d4:	8bfb      	ldrh	r3, [r7, #30]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1ea      	bne.n	80088b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088dc:	4618      	mov	r0, r3
 80088de:	372c      	adds	r7, #44	; 0x2c
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4013      	ands	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008900:	68fb      	ldr	r3, [r7, #12]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3714      	adds	r7, #20
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f003 0301 	and.w	r3, r3, #1
}
 800891e:	4618      	mov	r0, r3
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
	...

0800892c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800892c:	b480      	push	{r7}
 800892e:	b085      	sub	sp, #20
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3301      	adds	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	4a13      	ldr	r2, [pc, #76]	; (800898c <USB_CoreReset+0x60>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d901      	bls.n	8008948 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e01a      	b.n	800897e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	daf3      	bge.n	8008938 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	f043 0201 	orr.w	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3301      	adds	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	4a09      	ldr	r2, [pc, #36]	; (800898c <USB_CoreReset+0x60>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d901      	bls.n	8008970 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e006      	b.n	800897e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b01      	cmp	r3, #1
 800897a:	d0f1      	beq.n	8008960 <USB_CoreReset+0x34>

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	00030d40 	.word	0x00030d40

08008990 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008990:	b084      	sub	sp, #16
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	f107 001c 	add.w	r0, r7, #28
 800899e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089ac:	461a      	mov	r2, r3
 80089ae:	2300      	movs	r3, #0
 80089b0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d018      	beq.n	8008a14 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d10a      	bne.n	80089fe <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089f6:	f043 0304 	orr.w	r3, r3, #4
 80089fa:	6013      	str	r3, [r2, #0]
 80089fc:	e014      	b.n	8008a28 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a0c:	f023 0304 	bic.w	r3, r3, #4
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	e009      	b.n	8008a28 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a22:	f023 0304 	bic.w	r3, r3, #4
 8008a26:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008a28:	2110      	movs	r1, #16
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff fe82 	bl	8008734 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff fea3 	bl	800877c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	e015      	b.n	8008a68 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a48:	461a      	mov	r2, r3
 8008a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a4e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d3e5      	bcc.n	8008a3c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a7c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00b      	beq.n	8008aa2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a90:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a13      	ldr	r2, [pc, #76]	; (8008ae4 <USB_HostInit+0x154>)
 8008a96:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a13      	ldr	r2, [pc, #76]	; (8008ae8 <USB_HostInit+0x158>)
 8008a9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008aa0:	e009      	b.n	8008ab6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2280      	movs	r2, #128	; 0x80
 8008aa6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a10      	ldr	r2, [pc, #64]	; (8008aec <USB_HostInit+0x15c>)
 8008aac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a0f      	ldr	r2, [pc, #60]	; (8008af0 <USB_HostInit+0x160>)
 8008ab2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d105      	bne.n	8008ac8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	f043 0210 	orr.w	r2, r3, #16
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	699a      	ldr	r2, [r3, #24]
 8008acc:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <USB_HostInit+0x164>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ae0:	b004      	add	sp, #16
 8008ae2:	4770      	bx	lr
 8008ae4:	01000200 	.word	0x01000200
 8008ae8:	00e00300 	.word	0x00e00300
 8008aec:	00600080 	.word	0x00600080
 8008af0:	004000e0 	.word	0x004000e0
 8008af4:	a3200008 	.word	0xa3200008

08008af8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b16:	f023 0303 	bic.w	r3, r3, #3
 8008b1a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	68f9      	ldr	r1, [r7, #12]
 8008b2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b30:	4313      	orrs	r3, r2
 8008b32:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d107      	bne.n	8008b4a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b40:	461a      	mov	r2, r3
 8008b42:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008b46:	6053      	str	r3, [r2, #4]
 8008b48:	e009      	b.n	8008b5e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d106      	bne.n	8008b5e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b56:	461a      	mov	r2, r3
 8008b58:	f241 7370 	movw	r3, #6000	; 0x1770
 8008b5c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008b9c:	2064      	movs	r0, #100	; 0x64
 8008b9e:	f7fa fba7 	bl	80032f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008bb0:	200a      	movs	r0, #10
 8008bb2:	f7fa fb9d 	bl	80032f0 <HAL_Delay>

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008be4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <USB_DriveVbus+0x44>
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d106      	bne.n	8008c04 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c02:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0e:	d109      	bne.n	8008c24 <USB_DriveVbus+0x64>
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c22:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	0c5b      	lsrs	r3, r3, #17
 8008c50:	f003 0303 	and.w	r3, r3, #3
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	b29b      	uxth	r3, r3
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
	...

08008c84 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	4611      	mov	r1, r2
 8008c90:	461a      	mov	r2, r3
 8008c92:	4603      	mov	r3, r0
 8008c94:	70fb      	strb	r3, [r7, #3]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70bb      	strb	r3, [r7, #2]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cb8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008cba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d87e      	bhi.n	8008dc0 <USB_HC_Init+0x13c>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <USB_HC_Init+0x44>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008cd9 	.word	0x08008cd9
 8008ccc:	08008d83 	.word	0x08008d83
 8008cd0:	08008cd9 	.word	0x08008cd9
 8008cd4:	08008d45 	.word	0x08008d45
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f240 439d 	movw	r3, #1181	; 0x49d
 8008cea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008cec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da10      	bge.n	8008d16 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	0151      	lsls	r1, r2, #5
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	440a      	add	r2, r1
 8008d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d12:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008d14:	e057      	b.n	8008dc6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d051      	beq.n	8008dc6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	78fa      	ldrb	r2, [r7, #3]
 8008d32:	0151      	lsls	r1, r2, #5
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	440a      	add	r2, r1
 8008d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d3c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008d40:	60d3      	str	r3, [r2, #12]
      break;
 8008d42:	e040      	b.n	8008dc6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d50:	461a      	mov	r2, r3
 8008d52:	f240 639d 	movw	r3, #1693	; 0x69d
 8008d56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	da34      	bge.n	8008dca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	0151      	lsls	r1, r2, #5
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	440a      	add	r2, r1
 8008d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d7e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008d80:	e023      	b.n	8008dca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f240 2325 	movw	r3, #549	; 0x225
 8008d94:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	da17      	bge.n	8008dce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	0151      	lsls	r1, r2, #5
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	440a      	add	r2, r1
 8008db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008db8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008dbc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008dbe:	e006      	b.n	8008dce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	77fb      	strb	r3, [r7, #31]
      break;
 8008dc4:	e004      	b.n	8008dd0 <USB_HC_Init+0x14c>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e002      	b.n	8008dd0 <USB_HC_Init+0x14c>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e000      	b.n	8008dd0 <USB_HC_Init+0x14c>
      break;
 8008dce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	2101      	movs	r1, #1
 8008de0:	fa01 f303 	lsl.w	r3, r1, r3
 8008de4:	6939      	ldr	r1, [r7, #16]
 8008de6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008dea:	4313      	orrs	r3, r2
 8008dec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008dfa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	da03      	bge.n	8008e0a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	e001      	b.n	8008e0e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff ff0f 	bl	8008c32 <USB_GetHostSpeed>
 8008e14:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d106      	bne.n	8008e2c <USB_HC_Init+0x1a8>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d003      	beq.n	8008e2c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e28:	617b      	str	r3, [r7, #20]
 8008e2a:	e001      	b.n	8008e30 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e30:	787b      	ldrb	r3, [r7, #1]
 8008e32:	059b      	lsls	r3, r3, #22
 8008e34:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e38:	78bb      	ldrb	r3, [r7, #2]
 8008e3a:	02db      	lsls	r3, r3, #11
 8008e3c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e40:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e46:	049b      	lsls	r3, r3, #18
 8008e48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	0159      	lsls	r1, r3, #5
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	440b      	add	r3, r1
 8008e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e66:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e6c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008e6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d10f      	bne.n	8008e96 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	0151      	lsls	r1, r2, #5
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	440a      	add	r2, r1
 8008e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e94:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08c      	sub	sp, #48	; 0x30
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ebc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d02d      	beq.n	8008f26 <USB_HC_StartXfer+0x86>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	791b      	ldrb	r3, [r3, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d129      	bne.n	8008f26 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d117      	bne.n	8008f08 <USB_HC_StartXfer+0x68>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	79db      	ldrb	r3, [r3, #7]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <USB_HC_StartXfer+0x48>
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	79db      	ldrb	r3, [r3, #7]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d10f      	bne.n	8008f08 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	0151      	lsls	r1, r2, #5
 8008efa:	6a3a      	ldr	r2, [r7, #32]
 8008efc:	440a      	add	r2, r1
 8008efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f06:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10b      	bne.n	8008f26 <USB_HC_StartXfer+0x86>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	795b      	ldrb	r3, [r3, #5]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d107      	bne.n	8008f26 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	785b      	ldrb	r3, [r3, #1]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 fa2f 	bl	8009380 <USB_DoPing>
      return HAL_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e0f8      	b.n	8009118 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d018      	beq.n	8008f60 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	8912      	ldrh	r2, [r2, #8]
 8008f36:	4413      	add	r3, r2
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	8912      	ldrh	r2, [r2, #8]
 8008f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f42:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008f44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f46:	8b7b      	ldrh	r3, [r7, #26]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d90b      	bls.n	8008f64 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008f4c:	8b7b      	ldrh	r3, [r7, #26]
 8008f4e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	8912      	ldrh	r2, [r2, #8]
 8008f56:	fb02 f203 	mul.w	r2, r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	611a      	str	r2, [r3, #16]
 8008f5e:	e001      	b.n	8008f64 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008f60:	2301      	movs	r3, #1
 8008f62:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	78db      	ldrb	r3, [r3, #3]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d007      	beq.n	8008f7c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	8912      	ldrh	r2, [r2, #8]
 8008f72:	fb02 f203 	mul.w	r2, r2, r3
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	611a      	str	r2, [r3, #16]
 8008f7a:	e003      	b.n	8008f84 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	695a      	ldr	r2, [r3, #20]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f8e:	04d9      	lsls	r1, r3, #19
 8008f90:	4b63      	ldr	r3, [pc, #396]	; (8009120 <USB_HC_StartXfer+0x280>)
 8008f92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	7a9b      	ldrb	r3, [r3, #10]
 8008f9a:	075b      	lsls	r3, r3, #29
 8008f9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008fa0:	69f9      	ldr	r1, [r7, #28]
 8008fa2:	0148      	lsls	r0, r1, #5
 8008fa4:	6a39      	ldr	r1, [r7, #32]
 8008fa6:	4401      	add	r1, r0
 8008fa8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008fac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008fae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008fb0:	79fb      	ldrb	r3, [r7, #7]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d009      	beq.n	8008fca <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	68d9      	ldr	r1, [r3, #12]
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	6a3a      	ldr	r2, [r7, #32]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ffc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009000:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	4413      	add	r3, r2
 800900a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	7e7b      	ldrb	r3, [r7, #25]
 8009012:	075b      	lsls	r3, r3, #29
 8009014:	69f9      	ldr	r1, [r7, #28]
 8009016:	0148      	lsls	r0, r1, #5
 8009018:	6a39      	ldr	r1, [r7, #32]
 800901a:	4401      	add	r1, r0
 800901c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009020:	4313      	orrs	r3, r2
 8009022:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	4413      	add	r3, r2
 800902c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800903a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	78db      	ldrb	r3, [r3, #3]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800904a:	613b      	str	r3, [r7, #16]
 800904c:	e003      	b.n	8009056 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009054:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800905c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	4413      	add	r3, r2
 8009066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800906a:	461a      	mov	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	e04e      	b.n	8009118 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	78db      	ldrb	r3, [r3, #3]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d149      	bne.n	8009116 <USB_HC_StartXfer+0x276>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d045      	beq.n	8009116 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	79db      	ldrb	r3, [r3, #7]
 800908e:	2b03      	cmp	r3, #3
 8009090:	d830      	bhi.n	80090f4 <USB_HC_StartXfer+0x254>
 8009092:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <USB_HC_StartXfer+0x1f8>)
 8009094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009098:	080090a9 	.word	0x080090a9
 800909c:	080090cd 	.word	0x080090cd
 80090a0:	080090a9 	.word	0x080090a9
 80090a4:	080090cd 	.word	0x080090cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	3303      	adds	r3, #3
 80090ae:	089b      	lsrs	r3, r3, #2
 80090b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80090b2:	8afa      	ldrh	r2, [r7, #22]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d91c      	bls.n	80090f8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	f043 0220 	orr.w	r2, r3, #32
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80090ca:	e015      	b.n	80090f8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	3303      	adds	r3, #3
 80090d2:	089b      	lsrs	r3, r3, #2
 80090d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80090d6:	8afa      	ldrh	r2, [r7, #22]
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d90a      	bls.n	80090fc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80090f2:	e003      	b.n	80090fc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80090f4:	bf00      	nop
 80090f6:	e002      	b.n	80090fe <USB_HC_StartXfer+0x25e>
        break;
 80090f8:	bf00      	nop
 80090fa:	e000      	b.n	80090fe <USB_HC_StartXfer+0x25e>
        break;
 80090fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	68d9      	ldr	r1, [r3, #12]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	785a      	ldrb	r2, [r3, #1]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	b29b      	uxth	r3, r3
 800910c:	2000      	movs	r0, #0
 800910e:	9000      	str	r0, [sp, #0]
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7ff fb53 	bl	80087bc <USB_WritePacket>
  }

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3728      	adds	r7, #40	; 0x28
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	1ff80000 	.word	0x1ff80000

08009124 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	b29b      	uxth	r3, r3
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009146:	b480      	push	{r7}
 8009148:	b089      	sub	sp, #36	; 0x24
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800915a:	2300      	movs	r3, #0
 800915c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	4413      	add	r3, r2
 8009166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	0c9b      	lsrs	r3, r3, #18
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	4413      	add	r3, r2
 800917c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	0fdb      	lsrs	r3, r3, #31
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b20      	cmp	r3, #32
 8009194:	d104      	bne.n	80091a0 <USB_HC_Halt+0x5a>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	e0e8      	b.n	8009372 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <USB_HC_Halt+0x66>
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d173      	bne.n	8009294 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	0151      	lsls	r1, r2, #5
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	440a      	add	r2, r1
 80091c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091ca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f040 80cb 	bne.w	8009370 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d143      	bne.n	800926e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	0151      	lsls	r1, r2, #5
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	440a      	add	r2, r1
 80091fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009204:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	4413      	add	r3, r2
 800920e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	0151      	lsls	r1, r2, #5
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	440a      	add	r2, r1
 800921c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009224:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	4413      	add	r3, r2
 800922e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	440a      	add	r2, r1
 800923c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009244:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	3301      	adds	r3, #1
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009252:	d81d      	bhi.n	8009290 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	4413      	add	r3, r2
 800925c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800926a:	d0ec      	beq.n	8009246 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800926c:	e080      	b.n	8009370 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	4413      	add	r3, r2
 8009276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	440a      	add	r2, r1
 8009284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800928c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800928e:	e06f      	b.n	8009370 <USB_HC_Halt+0x22a>
            break;
 8009290:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009292:	e06d      	b.n	8009370 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	4413      	add	r3, r2
 800929c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	0151      	lsls	r1, r2, #5
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	440a      	add	r2, r1
 80092aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d143      	bne.n	800934c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009302:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	4413      	add	r3, r2
 800930c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	440a      	add	r2, r1
 800931a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800931e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009322:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	3301      	adds	r3, #1
 8009328:	61fb      	str	r3, [r7, #28]
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009330:	d81d      	bhi.n	800936e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	4413      	add	r3, r2
 800933a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009348:	d0ec      	beq.n	8009324 <USB_HC_Halt+0x1de>
 800934a:	e011      	b.n	8009370 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	4413      	add	r3, r2
 8009354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	0151      	lsls	r1, r2, #5
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	440a      	add	r2, r1
 8009362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	e000      	b.n	8009370 <USB_HC_Halt+0x22a>
          break;
 800936e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3724      	adds	r7, #36	; 0x24
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
	...

08009380 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009394:	2301      	movs	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	04da      	lsls	r2, r3, #19
 800939c:	4b15      	ldr	r3, [pc, #84]	; (80093f4 <USB_DoPing+0x74>)
 800939e:	4013      	ands	r3, r2
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	0151      	lsls	r1, r2, #5
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	440a      	add	r2, r1
 80093a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093de:	461a      	mov	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	1ff80000 	.word	0x1ff80000

080093f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7ff f935 	bl	8008678 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800940e:	2110      	movs	r1, #16
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff f98f 	bl	8008734 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff f9b0 	bl	800877c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800941c:	2300      	movs	r3, #0
 800941e:	613b      	str	r3, [r7, #16]
 8009420:	e01f      	b.n	8009462 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	4413      	add	r3, r2
 800942a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009438:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009440:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009448:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009456:	461a      	mov	r2, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	3301      	adds	r3, #1
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	2b0f      	cmp	r3, #15
 8009466:	d9dc      	bls.n	8009422 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009468:	2300      	movs	r3, #0
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	e034      	b.n	80094d8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009484:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800948c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009494:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a2:	461a      	mov	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	3301      	adds	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094b4:	d80c      	bhi.n	80094d0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094cc:	d0ec      	beq.n	80094a8 <USB_StopHost+0xb0>
 80094ce:	e000      	b.n	80094d2 <USB_StopHost+0xda>
        break;
 80094d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	3301      	adds	r3, #1
 80094d6:	613b      	str	r3, [r7, #16]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b0f      	cmp	r3, #15
 80094dc:	d9c7      	bls.n	800946e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094e4:	461a      	mov	r2, r3
 80094e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff f8ae 	bl	8008656 <USB_EnableGlobalInt>

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009508:	4904      	ldr	r1, [pc, #16]	; (800951c <MX_FATFS_Init+0x18>)
 800950a:	4805      	ldr	r0, [pc, #20]	; (8009520 <MX_FATFS_Init+0x1c>)
 800950c:	f003 f84c 	bl	800c5a8 <FATFS_LinkDriver>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	4b03      	ldr	r3, [pc, #12]	; (8009524 <MX_FATFS_Init+0x20>)
 8009516:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009518:	bf00      	nop
 800951a:	bd80      	pop	{r7, pc}
 800951c:	200033d8 	.word	0x200033d8
 8009520:	0800d8b8 	.word	0x0800d8b8
 8009524:	20005440 	.word	0x20005440

08009528 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	4603      	mov	r3, r0
 8009548:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	4619      	mov	r1, r3
 8009552:	4808      	ldr	r0, [pc, #32]	; (8009574 <USBH_status+0x34>)
 8009554:	f000 fe1a 	bl	800a18c <USBH_MSC_UnitIsReady>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <USBH_status+0x24>
  {
    res = RES_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
 8009562:	e001      	b.n	8009568 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20005444 	.word	0x20005444

08009578 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b094      	sub	sp, #80	; 0x50
 800957c:	af02      	add	r7, sp, #8
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	607a      	str	r2, [r7, #4]
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	4603      	mov	r3, r0
 8009586:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800958e:	7bf9      	ldrb	r1, [r7, #15]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	4813      	ldr	r0, [pc, #76]	; (80095e8 <USBH_read+0x70>)
 800959a:	f000 fe41 	bl	800a220 <USBH_MSC_Read>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <USBH_read+0x34>
  {
    res = RES_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80095aa:	e017      	b.n	80095dc <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80095ac:	f107 0210 	add.w	r2, r7, #16
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	4619      	mov	r1, r3
 80095b4:	480c      	ldr	r0, [pc, #48]	; (80095e8 <USBH_read+0x70>)
 80095b6:	f000 fe0f 	bl	800a1d8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80095ba:	7f7b      	ldrb	r3, [r7, #29]
 80095bc:	2b3a      	cmp	r3, #58	; 0x3a
 80095be:	d005      	beq.n	80095cc <USBH_read+0x54>
 80095c0:	2b3a      	cmp	r3, #58	; 0x3a
 80095c2:	dc07      	bgt.n	80095d4 <USBH_read+0x5c>
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	d001      	beq.n	80095cc <USBH_read+0x54>
 80095c8:	2b28      	cmp	r3, #40	; 0x28
 80095ca:	d103      	bne.n	80095d4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80095cc:	2303      	movs	r3, #3
 80095ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80095d2:	e003      	b.n	80095dc <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80095da:	bf00      	nop
    }
  }

  return res;
 80095dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3748      	adds	r7, #72	; 0x48
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	20005444 	.word	0x20005444

080095ec <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b094      	sub	sp, #80	; 0x50
 80095f0:	af02      	add	r7, sp, #8
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009602:	7bf9      	ldrb	r1, [r7, #15]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	4817      	ldr	r0, [pc, #92]	; (800966c <USBH_write+0x80>)
 800960e:	f000 fe70 	bl	800a2f2 <USBH_MSC_Write>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <USBH_write+0x34>
  {
    res = RES_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800961e:	e01f      	b.n	8009660 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009620:	f107 0210 	add.w	r2, r7, #16
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4619      	mov	r1, r3
 8009628:	4810      	ldr	r0, [pc, #64]	; (800966c <USBH_write+0x80>)
 800962a:	f000 fdd5 	bl	800a1d8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800962e:	7f7b      	ldrb	r3, [r7, #29]
 8009630:	2b3a      	cmp	r3, #58	; 0x3a
 8009632:	d00d      	beq.n	8009650 <USBH_write+0x64>
 8009634:	2b3a      	cmp	r3, #58	; 0x3a
 8009636:	dc0f      	bgt.n	8009658 <USBH_write+0x6c>
 8009638:	2b28      	cmp	r3, #40	; 0x28
 800963a:	d009      	beq.n	8009650 <USBH_write+0x64>
 800963c:	2b28      	cmp	r3, #40	; 0x28
 800963e:	dc0b      	bgt.n	8009658 <USBH_write+0x6c>
 8009640:	2b04      	cmp	r3, #4
 8009642:	d005      	beq.n	8009650 <USBH_write+0x64>
 8009644:	2b27      	cmp	r3, #39	; 0x27
 8009646:	d107      	bne.n	8009658 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009648:	2302      	movs	r3, #2
 800964a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800964e:	e007      	b.n	8009660 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009650:	2303      	movs	r3, #3
 8009652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009656:	e003      	b.n	8009660 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800965e:	bf00      	nop
    }
  }

  return res;
 8009660:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009664:	4618      	mov	r0, r3
 8009666:	3748      	adds	r7, #72	; 0x48
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20005444 	.word	0x20005444

08009670 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b090      	sub	sp, #64	; 0x40
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	603a      	str	r2, [r7, #0]
 800967a:	71fb      	strb	r3, [r7, #7]
 800967c:	460b      	mov	r3, r1
 800967e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009686:	79bb      	ldrb	r3, [r7, #6]
 8009688:	2b03      	cmp	r3, #3
 800968a:	d852      	bhi.n	8009732 <USBH_ioctl+0xc2>
 800968c:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <USBH_ioctl+0x24>)
 800968e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009692:	bf00      	nop
 8009694:	080096a5 	.word	0x080096a5
 8009698:	080096ad 	.word	0x080096ad
 800969c:	080096d7 	.word	0x080096d7
 80096a0:	08009703 	.word	0x08009703
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80096aa:	e045      	b.n	8009738 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80096ac:	f107 0208 	add.w	r2, r7, #8
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	4619      	mov	r1, r3
 80096b4:	4823      	ldr	r0, [pc, #140]	; (8009744 <USBH_ioctl+0xd4>)
 80096b6:	f000 fd8f 	bl	800a1d8 <USBH_MSC_GetLUNInfo>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d106      	bne.n	80096ce <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80096cc:	e034      	b.n	8009738 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80096d4:	e030      	b.n	8009738 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80096d6:	f107 0208 	add.w	r2, r7, #8
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	4619      	mov	r1, r3
 80096de:	4819      	ldr	r0, [pc, #100]	; (8009744 <USBH_ioctl+0xd4>)
 80096e0:	f000 fd7a 	bl	800a1d8 <USBH_MSC_GetLUNInfo>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d107      	bne.n	80096fa <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80096ea:	8a3b      	ldrh	r3, [r7, #16]
 80096ec:	461a      	mov	r2, r3
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80096f8:	e01e      	b.n	8009738 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009700:	e01a      	b.n	8009738 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009702:	f107 0208 	add.w	r2, r7, #8
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	4619      	mov	r1, r3
 800970a:	480e      	ldr	r0, [pc, #56]	; (8009744 <USBH_ioctl+0xd4>)
 800970c:	f000 fd64 	bl	800a1d8 <USBH_MSC_GetLUNInfo>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d109      	bne.n	800972a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009716:	8a3b      	ldrh	r3, [r7, #16]
 8009718:	0a5b      	lsrs	r3, r3, #9
 800971a:	b29b      	uxth	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009728:	e006      	b.n	8009738 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009730:	e002      	b.n	8009738 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009732:	2304      	movs	r3, #4
 8009734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800973c:	4618      	mov	r0, r3
 800973e:	3740      	adds	r7, #64	; 0x40
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20005444 	.word	0x20005444

08009748 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009748:	b590      	push	{r4, r7, lr}
 800974a:	b089      	sub	sp, #36	; 0x24
 800974c:	af04      	add	r7, sp, #16
 800974e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009756:	7919      	ldrb	r1, [r3, #4]
 8009758:	2350      	movs	r3, #80	; 0x50
 800975a:	2206      	movs	r2, #6
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 fc53 	bl	800b008 <USBH_FindInterface>
 8009762:	4603      	mov	r3, r0
 8009764:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009766:	7bfb      	ldrb	r3, [r7, #15]
 8009768:	2bff      	cmp	r3, #255	; 0xff
 800976a:	d002      	beq.n	8009772 <USBH_MSC_InterfaceInit+0x2a>
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d901      	bls.n	8009776 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009772:	2302      	movs	r3, #2
 8009774:	e0ef      	b.n	8009956 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fc28 	bl	800afd0 <USBH_SelectInterface>
 8009780:	4603      	mov	r3, r0
 8009782:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	e0e3      	b.n	8009956 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009794:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009798:	f003 fa78 	bl	800cc8c <malloc>
 800979c:	4603      	mov	r3, r0
 800979e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80097b0:	2302      	movs	r3, #2
 80097b2:	e0d0      	b.n	8009956 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80097b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097b8:	2100      	movs	r1, #0
 80097ba:	68b8      	ldr	r0, [r7, #8]
 80097bc:	f003 fa84 	bl	800ccc8 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	211a      	movs	r1, #26
 80097c6:	fb01 f303 	mul.w	r3, r1, r3
 80097ca:	4413      	add	r3, r2
 80097cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	b25b      	sxtb	r3, r3
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	da16      	bge.n	8009806 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	211a      	movs	r1, #26
 80097de:	fb01 f303 	mul.w	r3, r1, r3
 80097e2:	4413      	add	r3, r2
 80097e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097e8:	781a      	ldrb	r2, [r3, #0]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	211a      	movs	r1, #26
 80097f4:	fb01 f303 	mul.w	r3, r1, r3
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80097fe:	881a      	ldrh	r2, [r3, #0]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	815a      	strh	r2, [r3, #10]
 8009804:	e015      	b.n	8009832 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	211a      	movs	r1, #26
 800980c:	fb01 f303 	mul.w	r3, r1, r3
 8009810:	4413      	add	r3, r2
 8009812:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009816:	781a      	ldrb	r2, [r3, #0]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	211a      	movs	r1, #26
 8009822:	fb01 f303 	mul.w	r3, r1, r3
 8009826:	4413      	add	r3, r2
 8009828:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800982c:	881a      	ldrh	r2, [r3, #0]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	211a      	movs	r1, #26
 8009838:	fb01 f303 	mul.w	r3, r1, r3
 800983c:	4413      	add	r3, r2
 800983e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	b25b      	sxtb	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	da16      	bge.n	8009878 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	211a      	movs	r1, #26
 8009850:	fb01 f303 	mul.w	r3, r1, r3
 8009854:	4413      	add	r3, r2
 8009856:	f203 3356 	addw	r3, r3, #854	; 0x356
 800985a:	781a      	ldrb	r2, [r3, #0]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	211a      	movs	r1, #26
 8009866:	fb01 f303 	mul.w	r3, r1, r3
 800986a:	4413      	add	r3, r2
 800986c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009870:	881a      	ldrh	r2, [r3, #0]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	815a      	strh	r2, [r3, #10]
 8009876:	e015      	b.n	80098a4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	211a      	movs	r1, #26
 800987e:	fb01 f303 	mul.w	r3, r1, r3
 8009882:	4413      	add	r3, r2
 8009884:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	211a      	movs	r1, #26
 8009894:	fb01 f303 	mul.w	r3, r1, r3
 8009898:	4413      	add	r3, r2
 800989a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800989e:	881a      	ldrh	r2, [r3, #0]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2200      	movs	r2, #0
 80098a8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	2200      	movs	r2, #0
 80098ae:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2200      	movs	r2, #0
 80098b4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	799b      	ldrb	r3, [r3, #6]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f002 fdc4 	bl	800c44a <USBH_AllocPipe>
 80098c2:	4603      	mov	r3, r0
 80098c4:	461a      	mov	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	79db      	ldrb	r3, [r3, #7]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f002 fdba 	bl	800c44a <USBH_AllocPipe>
 80098d6:	4603      	mov	r3, r0
 80098d8:	461a      	mov	r2, r3
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fdac 	bl	800a43c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	7959      	ldrb	r1, [r3, #5]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	7998      	ldrb	r0, [r3, #6]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	8912      	ldrh	r2, [r2, #8]
 80098fc:	9202      	str	r2, [sp, #8]
 80098fe:	2202      	movs	r2, #2
 8009900:	9201      	str	r2, [sp, #4]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	4623      	mov	r3, r4
 8009906:	4602      	mov	r2, r0
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f002 fd6f 	bl	800c3ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	7919      	ldrb	r1, [r3, #4]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	79d8      	ldrb	r0, [r3, #7]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	8952      	ldrh	r2, [r2, #10]
 8009926:	9202      	str	r2, [sp, #8]
 8009928:	2202      	movs	r2, #2
 800992a:	9201      	str	r2, [sp, #4]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	4623      	mov	r3, r4
 8009930:	4602      	mov	r2, r0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f002 fd5a 	bl	800c3ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	791b      	ldrb	r3, [r3, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f003 f8c5 	bl	800cad0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	795b      	ldrb	r3, [r3, #5]
 800994a:	2200      	movs	r2, #0
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f003 f8be 	bl	800cad0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	bd90      	pop	{r4, r7, pc}

0800995e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	795b      	ldrb	r3, [r3, #5]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00e      	beq.n	8009996 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	795b      	ldrb	r3, [r3, #5]
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f002 fd53 	bl	800c42a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	795b      	ldrb	r3, [r3, #5]
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f002 fd7e 	bl	800c48c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	791b      	ldrb	r3, [r3, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00e      	beq.n	80099bc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	791b      	ldrb	r3, [r3, #4]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f002 fd40 	bl	800c42a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	791b      	ldrb	r3, [r3, #4]
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f002 fd6b 	bl	800c48c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099c2:	69db      	ldr	r3, [r3, #28]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00b      	beq.n	80099e0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f003 f963 	bl	800cc9c <free>
    phost->pActiveClass->pData = 0U;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099dc:	2200      	movs	r2, #0
 80099de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80099fc:	2301      	movs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	7b9b      	ldrb	r3, [r3, #14]
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d041      	beq.n	8009a8c <USBH_MSC_ClassRequest+0xa2>
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	dc4b      	bgt.n	8009aa4 <USBH_MSC_ClassRequest+0xba>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <USBH_MSC_ClassRequest+0x2a>
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d147      	bne.n	8009aa4 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fcf0 	bl	800a3fe <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d104      	bne.n	8009a32 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d137      	bne.n	8009aa8 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d804      	bhi.n	8009a4a <USBH_MSC_ClassRequest+0x60>
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	e000      	b.n	8009a4c <USBH_MSC_ClassRequest+0x62>
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009a50:	2300      	movs	r3, #0
 8009a52:	73bb      	strb	r3, [r7, #14]
 8009a54:	e014      	b.n	8009a80 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	2134      	movs	r1, #52	; 0x34
 8009a5c:	fb01 f303 	mul.w	r3, r1, r3
 8009a60:	4413      	add	r3, r2
 8009a62:	3392      	adds	r3, #146	; 0x92
 8009a64:	2202      	movs	r2, #2
 8009a66:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	2134      	movs	r1, #52	; 0x34
 8009a6e:	fb01 f303 	mul.w	r3, r1, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	33c1      	adds	r3, #193	; 0xc1
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	73bb      	strb	r3, [r7, #14]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	7bba      	ldrb	r2, [r7, #14]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d3e5      	bcc.n	8009a56 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009a8a:	e00d      	b.n	8009aa8 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f002 f87b 	bl	800bb8a <USBH_ClrFeature>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d108      	bne.n	8009aac <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	7bda      	ldrb	r2, [r3, #15]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009aa2:	e003      	b.n	8009aac <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e002      	b.n	8009aae <USBH_MSC_ClassRequest+0xc4>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e000      	b.n	8009aae <USBH_MSC_ClassRequest+0xc4>
      break;
 8009aac:	bf00      	nop
  }

  return status;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009aca:	2301      	movs	r3, #1
 8009acc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	7b1b      	ldrb	r3, [r3, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <USBH_MSC_Process+0x2e>
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	f000 8271 	beq.w	8009fc6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009ae4:	e272      	b.n	8009fcc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	429a      	cmp	r2, r3
 8009af4:	f080 824f 	bcs.w	8009f96 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009afe:	4619      	mov	r1, r3
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	2334      	movs	r3, #52	; 0x34
 8009b04:	fb03 f301 	mul.w	r3, r3, r1
 8009b08:	4413      	add	r3, r2
 8009b0a:	3391      	adds	r3, #145	; 0x91
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b16:	4619      	mov	r1, r3
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	2334      	movs	r3, #52	; 0x34
 8009b1c:	fb03 f301 	mul.w	r3, r3, r1
 8009b20:	4413      	add	r3, r2
 8009b22:	3390      	adds	r3, #144	; 0x90
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	f200 8243 	bhi.w	8009fb2 <USBH_MSC_Process+0x4fa>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <USBH_MSC_Process+0x7c>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009fb3 	.word	0x08009fb3
 8009b3c:	08009c21 	.word	0x08009c21
 8009b40:	08009da5 	.word	0x08009da5
 8009b44:	08009b7f 	.word	0x08009b7f
 8009b48:	08009e71 	.word	0x08009e71
 8009b4c:	08009fb3 	.word	0x08009fb3
 8009b50:	08009fb3 	.word	0x08009fb3
 8009b54:	08009f85 	.word	0x08009f85
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b5e:	4619      	mov	r1, r3
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	2334      	movs	r3, #52	; 0x34
 8009b64:	fb03 f301 	mul.w	r3, r3, r1
 8009b68:	4413      	add	r3, r2
 8009b6a:	3390      	adds	r3, #144	; 0x90
 8009b6c:	2204      	movs	r2, #4
 8009b6e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009b7c:	e222      	b.n	8009fc4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b84:	b2d9      	uxtb	r1, r3
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	2334      	movs	r3, #52	; 0x34
 8009b90:	fb03 f302 	mul.w	r3, r3, r2
 8009b94:	3398      	adds	r3, #152	; 0x98
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	4413      	add	r3, r2
 8009b9a:	3307      	adds	r3, #7
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 ff6a 	bl	800aa78 <USBH_MSC_SCSI_Inquiry>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10b      	bne.n	8009bc6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	2334      	movs	r3, #52	; 0x34
 8009bba:	fb03 f301 	mul.w	r3, r3, r1
 8009bbe:	4413      	add	r3, r2
 8009bc0:	3390      	adds	r3, #144	; 0x90
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d10c      	bne.n	8009be6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	2334      	movs	r3, #52	; 0x34
 8009bd8:	fb03 f301 	mul.w	r3, r3, r1
 8009bdc:	4413      	add	r3, r2
 8009bde:	3390      	adds	r3, #144	; 0x90
 8009be0:	2205      	movs	r2, #5
 8009be2:	701a      	strb	r2, [r3, #0]
            break;
 8009be4:	e1e7      	b.n	8009fb6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	f040 81e4 	bne.w	8009fb6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	2334      	movs	r3, #52	; 0x34
 8009bfa:	fb03 f301 	mul.w	r3, r3, r1
 8009bfe:	4413      	add	r3, r2
 8009c00:	3390      	adds	r3, #144	; 0x90
 8009c02:	2201      	movs	r2, #1
 8009c04:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	2334      	movs	r3, #52	; 0x34
 8009c12:	fb03 f301 	mul.w	r3, r3, r1
 8009c16:	4413      	add	r3, r2
 8009c18:	3391      	adds	r3, #145	; 0x91
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	701a      	strb	r2, [r3, #0]
            break;
 8009c1e:	e1ca      	b.n	8009fb6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fe66 	bl	800a8fc <USBH_MSC_SCSI_TestUnitReady>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d149      	bne.n	8009cce <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c40:	4619      	mov	r1, r3
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	2334      	movs	r3, #52	; 0x34
 8009c46:	fb03 f301 	mul.w	r3, r3, r1
 8009c4a:	4413      	add	r3, r2
 8009c4c:	3392      	adds	r3, #146	; 0x92
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00c      	beq.n	8009c6e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	2334      	movs	r3, #52	; 0x34
 8009c60:	fb03 f301 	mul.w	r3, r3, r1
 8009c64:	4413      	add	r3, r2
 8009c66:	33c1      	adds	r3, #193	; 0xc1
 8009c68:	2201      	movs	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e00b      	b.n	8009c86 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c74:	4619      	mov	r1, r3
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	2334      	movs	r3, #52	; 0x34
 8009c7a:	fb03 f301 	mul.w	r3, r3, r1
 8009c7e:	4413      	add	r3, r2
 8009c80:	33c1      	adds	r3, #193	; 0xc1
 8009c82:	2200      	movs	r2, #0
 8009c84:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	2334      	movs	r3, #52	; 0x34
 8009c92:	fb03 f301 	mul.w	r3, r3, r1
 8009c96:	4413      	add	r3, r2
 8009c98:	3390      	adds	r3, #144	; 0x90
 8009c9a:	2203      	movs	r2, #3
 8009c9c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	2334      	movs	r3, #52	; 0x34
 8009caa:	fb03 f301 	mul.w	r3, r3, r1
 8009cae:	4413      	add	r3, r2
 8009cb0:	3391      	adds	r3, #145	; 0x91
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	2334      	movs	r3, #52	; 0x34
 8009cc2:	fb03 f301 	mul.w	r3, r3, r1
 8009cc6:	4413      	add	r3, r2
 8009cc8:	3392      	adds	r3, #146	; 0x92
 8009cca:	2200      	movs	r2, #0
 8009ccc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d14a      	bne.n	8009d6a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cda:	4619      	mov	r1, r3
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	2334      	movs	r3, #52	; 0x34
 8009ce0:	fb03 f301 	mul.w	r3, r3, r1
 8009ce4:	4413      	add	r3, r2
 8009ce6:	3392      	adds	r3, #146	; 0x92
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d00c      	beq.n	8009d08 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	2334      	movs	r3, #52	; 0x34
 8009cfa:	fb03 f301 	mul.w	r3, r3, r1
 8009cfe:	4413      	add	r3, r2
 8009d00:	33c1      	adds	r3, #193	; 0xc1
 8009d02:	2201      	movs	r2, #1
 8009d04:	701a      	strb	r2, [r3, #0]
 8009d06:	e00b      	b.n	8009d20 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d0e:	4619      	mov	r1, r3
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	2334      	movs	r3, #52	; 0x34
 8009d14:	fb03 f301 	mul.w	r3, r3, r1
 8009d18:	4413      	add	r3, r2
 8009d1a:	33c1      	adds	r3, #193	; 0xc1
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d26:	4619      	mov	r1, r3
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	2334      	movs	r3, #52	; 0x34
 8009d2c:	fb03 f301 	mul.w	r3, r3, r1
 8009d30:	4413      	add	r3, r2
 8009d32:	3390      	adds	r3, #144	; 0x90
 8009d34:	2205      	movs	r2, #5
 8009d36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d3e:	4619      	mov	r1, r3
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	2334      	movs	r3, #52	; 0x34
 8009d44:	fb03 f301 	mul.w	r3, r3, r1
 8009d48:	4413      	add	r3, r2
 8009d4a:	3391      	adds	r3, #145	; 0x91
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d56:	4619      	mov	r1, r3
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	2334      	movs	r3, #52	; 0x34
 8009d5c:	fb03 f301 	mul.w	r3, r3, r1
 8009d60:	4413      	add	r3, r2
 8009d62:	3392      	adds	r3, #146	; 0x92
 8009d64:	2202      	movs	r2, #2
 8009d66:	701a      	strb	r2, [r3, #0]
            break;
 8009d68:	e127      	b.n	8009fba <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	f040 8124 	bne.w	8009fba <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d78:	4619      	mov	r1, r3
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	2334      	movs	r3, #52	; 0x34
 8009d7e:	fb03 f301 	mul.w	r3, r3, r1
 8009d82:	4413      	add	r3, r2
 8009d84:	3390      	adds	r3, #144	; 0x90
 8009d86:	2201      	movs	r2, #1
 8009d88:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d90:	4619      	mov	r1, r3
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	2334      	movs	r3, #52	; 0x34
 8009d96:	fb03 f301 	mul.w	r3, r3, r1
 8009d9a:	4413      	add	r3, r2
 8009d9c:	3391      	adds	r3, #145	; 0x91
 8009d9e:	2202      	movs	r2, #2
 8009da0:	701a      	strb	r2, [r3, #0]
            break;
 8009da2:	e10a      	b.n	8009fba <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009daa:	b2d9      	uxtb	r1, r3
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009db2:	461a      	mov	r2, r3
 8009db4:	2334      	movs	r3, #52	; 0x34
 8009db6:	fb03 f302 	mul.w	r3, r3, r2
 8009dba:	3390      	adds	r3, #144	; 0x90
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fddc 	bl	800a982 <USBH_MSC_SCSI_ReadCapacity>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d120      	bne.n	8009e16 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dda:	4619      	mov	r1, r3
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	2334      	movs	r3, #52	; 0x34
 8009de0:	fb03 f301 	mul.w	r3, r3, r1
 8009de4:	4413      	add	r3, r2
 8009de6:	3390      	adds	r3, #144	; 0x90
 8009de8:	2201      	movs	r2, #1
 8009dea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009df2:	4619      	mov	r1, r3
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	2334      	movs	r3, #52	; 0x34
 8009df8:	fb03 f301 	mul.w	r3, r3, r1
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3391      	adds	r3, #145	; 0x91
 8009e00:	2200      	movs	r2, #0
 8009e02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009e14:	e0d3      	b.n	8009fbe <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d10c      	bne.n	8009e36 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e22:	4619      	mov	r1, r3
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	2334      	movs	r3, #52	; 0x34
 8009e28:	fb03 f301 	mul.w	r3, r3, r1
 8009e2c:	4413      	add	r3, r2
 8009e2e:	3390      	adds	r3, #144	; 0x90
 8009e30:	2205      	movs	r2, #5
 8009e32:	701a      	strb	r2, [r3, #0]
            break;
 8009e34:	e0c3      	b.n	8009fbe <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	f040 80c0 	bne.w	8009fbe <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e44:	4619      	mov	r1, r3
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	2334      	movs	r3, #52	; 0x34
 8009e4a:	fb03 f301 	mul.w	r3, r3, r1
 8009e4e:	4413      	add	r3, r2
 8009e50:	3390      	adds	r3, #144	; 0x90
 8009e52:	2201      	movs	r2, #1
 8009e54:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	2334      	movs	r3, #52	; 0x34
 8009e62:	fb03 f301 	mul.w	r3, r3, r1
 8009e66:	4413      	add	r3, r2
 8009e68:	3391      	adds	r3, #145	; 0x91
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	701a      	strb	r2, [r3, #0]
            break;
 8009e6e:	e0a6      	b.n	8009fbe <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e76:	b2d9      	uxtb	r1, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e7e:	461a      	mov	r2, r3
 8009e80:	2334      	movs	r3, #52	; 0x34
 8009e82:	fb03 f302 	mul.w	r3, r3, r2
 8009e86:	3398      	adds	r3, #152	; 0x98
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fe96 	bl	800abc2 <USBH_MSC_SCSI_RequestSense>
 8009e96:	4603      	mov	r3, r0
 8009e98:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d145      	bne.n	8009f2c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	2334      	movs	r3, #52	; 0x34
 8009eac:	fb03 f301 	mul.w	r3, r3, r1
 8009eb0:	4413      	add	r3, r2
 8009eb2:	339c      	adds	r3, #156	; 0x9c
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	2b06      	cmp	r3, #6
 8009eb8:	d00c      	beq.n	8009ed4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	2334      	movs	r3, #52	; 0x34
 8009ec6:	fb03 f301 	mul.w	r3, r3, r1
 8009eca:	4413      	add	r3, r2
 8009ecc:	339c      	adds	r3, #156	; 0x9c
 8009ece:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d117      	bne.n	8009f04 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	f242 720f 	movw	r2, #9999	; 0x270f
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d80c      	bhi.n	8009f04 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	2334      	movs	r3, #52	; 0x34
 8009ef6:	fb03 f301 	mul.w	r3, r3, r1
 8009efa:	4413      	add	r3, r2
 8009efc:	3390      	adds	r3, #144	; 0x90
 8009efe:	2202      	movs	r2, #2
 8009f00:	701a      	strb	r2, [r3, #0]
                  break;
 8009f02:	e05f      	b.n	8009fc4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	2334      	movs	r3, #52	; 0x34
 8009f10:	fb03 f301 	mul.w	r3, r3, r1
 8009f14:	4413      	add	r3, r2
 8009f16:	3390      	adds	r3, #144	; 0x90
 8009f18:	2201      	movs	r2, #1
 8009f1a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f22:	3301      	adds	r3, #1
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d10c      	bne.n	8009f4c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f38:	4619      	mov	r1, r3
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	2334      	movs	r3, #52	; 0x34
 8009f3e:	fb03 f301 	mul.w	r3, r3, r1
 8009f42:	4413      	add	r3, r2
 8009f44:	3390      	adds	r3, #144	; 0x90
 8009f46:	2208      	movs	r2, #8
 8009f48:	701a      	strb	r2, [r3, #0]
            break;
 8009f4a:	e03a      	b.n	8009fc2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d137      	bne.n	8009fc2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f58:	4619      	mov	r1, r3
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	2334      	movs	r3, #52	; 0x34
 8009f5e:	fb03 f301 	mul.w	r3, r3, r1
 8009f62:	4413      	add	r3, r2
 8009f64:	3390      	adds	r3, #144	; 0x90
 8009f66:	2201      	movs	r2, #1
 8009f68:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f70:	4619      	mov	r1, r3
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	2334      	movs	r3, #52	; 0x34
 8009f76:	fb03 f301 	mul.w	r3, r3, r1
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3391      	adds	r3, #145	; 0x91
 8009f7e:	2202      	movs	r2, #2
 8009f80:	701a      	strb	r2, [r3, #0]
            break;
 8009f82:	e01e      	b.n	8009fc2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009f94:	e016      	b.n	8009fc4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009faa:	2102      	movs	r1, #2
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	4798      	blx	r3
      break;
 8009fb0:	e00c      	b.n	8009fcc <USBH_MSC_Process+0x514>
            break;
 8009fb2:	bf00      	nop
 8009fb4:	e00a      	b.n	8009fcc <USBH_MSC_Process+0x514>
            break;
 8009fb6:	bf00      	nop
 8009fb8:	e008      	b.n	8009fcc <USBH_MSC_Process+0x514>
            break;
 8009fba:	bf00      	nop
 8009fbc:	e006      	b.n	8009fcc <USBH_MSC_Process+0x514>
            break;
 8009fbe:	bf00      	nop
 8009fc0:	e004      	b.n	8009fcc <USBH_MSC_Process+0x514>
            break;
 8009fc2:	bf00      	nop
      break;
 8009fc4:	e002      	b.n	8009fcc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fca:	bf00      	nop
  }
  return error;
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop

08009fd8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b088      	sub	sp, #32
 8009ff2:	af02      	add	r7, sp, #8
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a004:	2301      	movs	r3, #1
 800a006:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a008:	2301      	movs	r3, #1
 800a00a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	2134      	movs	r1, #52	; 0x34
 800a012:	fb01 f303 	mul.w	r3, r1, r3
 800a016:	4413      	add	r3, r2
 800a018:	3390      	adds	r3, #144	; 0x90
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b07      	cmp	r3, #7
 800a01e:	d03c      	beq.n	800a09a <USBH_MSC_RdWrProcess+0xac>
 800a020:	2b07      	cmp	r3, #7
 800a022:	f300 80a7 	bgt.w	800a174 <USBH_MSC_RdWrProcess+0x186>
 800a026:	2b05      	cmp	r3, #5
 800a028:	d06c      	beq.n	800a104 <USBH_MSC_RdWrProcess+0x116>
 800a02a:	2b06      	cmp	r3, #6
 800a02c:	f040 80a2 	bne.w	800a174 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a030:	78f9      	ldrb	r1, [r7, #3]
 800a032:	2300      	movs	r3, #0
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	2300      	movs	r3, #0
 800a038:	2200      	movs	r2, #0
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fea5 	bl	800ad8a <USBH_MSC_SCSI_Read>
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10b      	bne.n	800a062 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	2134      	movs	r1, #52	; 0x34
 800a050:	fb01 f303 	mul.w	r3, r1, r3
 800a054:	4413      	add	r3, r2
 800a056:	3390      	adds	r3, #144	; 0x90
 800a058:	2201      	movs	r2, #1
 800a05a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a060:	e08a      	b.n	800a178 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d109      	bne.n	800a07c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a068:	78fb      	ldrb	r3, [r7, #3]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	2134      	movs	r1, #52	; 0x34
 800a06e:	fb01 f303 	mul.w	r3, r1, r3
 800a072:	4413      	add	r3, r2
 800a074:	3390      	adds	r3, #144	; 0x90
 800a076:	2205      	movs	r2, #5
 800a078:	701a      	strb	r2, [r3, #0]
      break;
 800a07a:	e07d      	b.n	800a178 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d17a      	bne.n	800a178 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a082:	78fb      	ldrb	r3, [r7, #3]
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	2134      	movs	r1, #52	; 0x34
 800a088:	fb01 f303 	mul.w	r3, r1, r3
 800a08c:	4413      	add	r3, r2
 800a08e:	3390      	adds	r3, #144	; 0x90
 800a090:	2208      	movs	r2, #8
 800a092:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a094:	2302      	movs	r3, #2
 800a096:	75fb      	strb	r3, [r7, #23]
      break;
 800a098:	e06e      	b.n	800a178 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a09a:	78f9      	ldrb	r1, [r7, #3]
 800a09c:	2300      	movs	r3, #0
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fe05 	bl	800acb4 <USBH_MSC_SCSI_Write>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10b      	bne.n	800a0cc <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	2134      	movs	r1, #52	; 0x34
 800a0ba:	fb01 f303 	mul.w	r3, r1, r3
 800a0be:	4413      	add	r3, r2
 800a0c0:	3390      	adds	r3, #144	; 0x90
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a0ca:	e057      	b.n	800a17c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d109      	bne.n	800a0e6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a0d2:	78fb      	ldrb	r3, [r7, #3]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	2134      	movs	r1, #52	; 0x34
 800a0d8:	fb01 f303 	mul.w	r3, r1, r3
 800a0dc:	4413      	add	r3, r2
 800a0de:	3390      	adds	r3, #144	; 0x90
 800a0e0:	2205      	movs	r2, #5
 800a0e2:	701a      	strb	r2, [r3, #0]
      break;
 800a0e4:	e04a      	b.n	800a17c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d147      	bne.n	800a17c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	2134      	movs	r1, #52	; 0x34
 800a0f2:	fb01 f303 	mul.w	r3, r1, r3
 800a0f6:	4413      	add	r3, r2
 800a0f8:	3390      	adds	r3, #144	; 0x90
 800a0fa:	2208      	movs	r2, #8
 800a0fc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a0fe:	2302      	movs	r3, #2
 800a100:	75fb      	strb	r3, [r7, #23]
      break;
 800a102:	e03b      	b.n	800a17c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	2234      	movs	r2, #52	; 0x34
 800a108:	fb02 f303 	mul.w	r3, r2, r3
 800a10c:	3398      	adds	r3, #152	; 0x98
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	4413      	add	r3, r2
 800a112:	1d1a      	adds	r2, r3, #4
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fd52 	bl	800abc2 <USBH_MSC_SCSI_RequestSense>
 800a11e:	4603      	mov	r3, r0
 800a120:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d113      	bne.n	800a150 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	2134      	movs	r1, #52	; 0x34
 800a12e:	fb01 f303 	mul.w	r3, r1, r3
 800a132:	4413      	add	r3, r2
 800a134:	3390      	adds	r3, #144	; 0x90
 800a136:	2201      	movs	r2, #1
 800a138:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a13a:	78fb      	ldrb	r3, [r7, #3]
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	2134      	movs	r1, #52	; 0x34
 800a140:	fb01 f303 	mul.w	r3, r1, r3
 800a144:	4413      	add	r3, r2
 800a146:	3391      	adds	r3, #145	; 0x91
 800a148:	2202      	movs	r2, #2
 800a14a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a14c:	2302      	movs	r3, #2
 800a14e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2b02      	cmp	r3, #2
 800a154:	d014      	beq.n	800a180 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	2b04      	cmp	r3, #4
 800a15a:	d111      	bne.n	800a180 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	2134      	movs	r1, #52	; 0x34
 800a162:	fb01 f303 	mul.w	r3, r1, r3
 800a166:	4413      	add	r3, r2
 800a168:	3390      	adds	r3, #144	; 0x90
 800a16a:	2208      	movs	r2, #8
 800a16c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a16e:	2302      	movs	r3, #2
 800a170:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a172:	e005      	b.n	800a180 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a174:	bf00      	nop
 800a176:	e004      	b.n	800a182 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a178:	bf00      	nop
 800a17a:	e002      	b.n	800a182 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a17c:	bf00      	nop
 800a17e:	e000      	b.n	800a182 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a180:	bf00      	nop

  }
  return error;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b0b      	cmp	r3, #11
 800a1aa:	d10c      	bne.n	800a1c6 <USBH_MSC_UnitIsReady+0x3a>
 800a1ac:	78fb      	ldrb	r3, [r7, #3]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	2134      	movs	r1, #52	; 0x34
 800a1b2:	fb01 f303 	mul.w	r3, r1, r3
 800a1b6:	4413      	add	r3, r2
 800a1b8:	3391      	adds	r3, #145	; 0x91
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d102      	bne.n	800a1c6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	73fb      	strb	r3, [r7, #15]
 800a1c4:	e001      	b.n	800a1ca <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b0b      	cmp	r3, #11
 800a1f8:	d10d      	bne.n	800a216 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a1fa:	7afb      	ldrb	r3, [r7, #11]
 800a1fc:	2234      	movs	r2, #52	; 0x34
 800a1fe:	fb02 f303 	mul.w	r3, r2, r3
 800a202:	3390      	adds	r3, #144	; 0x90
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	4413      	add	r3, r2
 800a208:	2234      	movs	r2, #52	; 0x34
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f002 fd4d 	bl	800ccac <memcpy>
    return USBH_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	e000      	b.n	800a218 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a216:	2302      	movs	r3, #2
  }
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b088      	sub	sp, #32
 800a224:	af02      	add	r7, sp, #8
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	460b      	mov	r3, r1
 800a22e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00e      	beq.n	800a264 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a24c:	2b0b      	cmp	r3, #11
 800a24e:	d109      	bne.n	800a264 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a250:	7afb      	ldrb	r3, [r7, #11]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	2134      	movs	r1, #52	; 0x34
 800a256:	fb01 f303 	mul.w	r3, r1, r3
 800a25a:	4413      	add	r3, r2
 800a25c:	3390      	adds	r3, #144	; 0x90
 800a25e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a260:	2b01      	cmp	r3, #1
 800a262:	d001      	beq.n	800a268 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a264:	2302      	movs	r3, #2
 800a266:	e040      	b.n	800a2ea <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2206      	movs	r2, #6
 800a26c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	2134      	movs	r1, #52	; 0x34
 800a274:	fb01 f303 	mul.w	r3, r1, r3
 800a278:	4413      	add	r3, r2
 800a27a:	3390      	adds	r3, #144	; 0x90
 800a27c:	2206      	movs	r2, #6
 800a27e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	b29a      	uxth	r2, r3
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a28a:	7af9      	ldrb	r1, [r7, #11]
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 fd78 	bl	800ad8a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2a0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a2a2:	e016      	b.n	800a2d2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	1ad2      	subs	r2, r2, r3
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	f242 7110 	movw	r1, #10000	; 0x2710
 800a2b4:	fb01 f303 	mul.w	r3, r1, r3
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d805      	bhi.n	800a2c8 <USBH_MSC_Read+0xa8>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e00b      	b.n	800a2ea <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a2d2:	7afb      	ldrb	r3, [r7, #11]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f7ff fe89 	bl	8009fee <USBH_MSC_RdWrProcess>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d0e0      	beq.n	800a2a4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b088      	sub	sp, #32
 800a2f6:	af02      	add	r7, sp, #8
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	603b      	str	r3, [r7, #0]
 800a2fe:	460b      	mov	r3, r1
 800a300:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00e      	beq.n	800a336 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a31e:	2b0b      	cmp	r3, #11
 800a320:	d109      	bne.n	800a336 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	2134      	movs	r1, #52	; 0x34
 800a328:	fb01 f303 	mul.w	r3, r1, r3
 800a32c:	4413      	add	r3, r2
 800a32e:	3390      	adds	r3, #144	; 0x90
 800a330:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a332:	2b01      	cmp	r3, #1
 800a334:	d001      	beq.n	800a33a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a336:	2302      	movs	r3, #2
 800a338:	e040      	b.n	800a3bc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2207      	movs	r2, #7
 800a33e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a340:	7afb      	ldrb	r3, [r7, #11]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	2134      	movs	r1, #52	; 0x34
 800a346:	fb01 f303 	mul.w	r3, r1, r3
 800a34a:	4413      	add	r3, r2
 800a34c:	3390      	adds	r3, #144	; 0x90
 800a34e:	2207      	movs	r2, #7
 800a350:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a352:	7afb      	ldrb	r3, [r7, #11]
 800a354:	b29a      	uxth	r2, r3
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a35c:	7af9      	ldrb	r1, [r7, #11]
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f000 fca4 	bl	800acb4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a372:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a374:	e016      	b.n	800a3a4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	f242 7110 	movw	r1, #10000	; 0x2710
 800a386:	fb01 f303 	mul.w	r3, r1, r3
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d805      	bhi.n	800a39a <USBH_MSC_Write+0xa8>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d104      	bne.n	800a3a4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2201      	movs	r2, #1
 800a39e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	e00b      	b.n	800a3bc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7ff fe20 	bl	8009fee <USBH_MSC_RdWrProcess>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d0e0      	beq.n	800a376 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2221      	movs	r2, #33	; 0x21
 800a3d0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	22ff      	movs	r2, #255	; 0xff
 800a3d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f001 fdab 	bl	800bf4a <USBH_CtlReq>
 800a3f4:	4603      	mov	r3, r0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b082      	sub	sp, #8
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	22a1      	movs	r2, #161	; 0xa1
 800a40c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	22fe      	movs	r2, #254	; 0xfe
 800a412:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a426:	2201      	movs	r2, #1
 800a428:	6839      	ldr	r1, [r7, #0]
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 fd8d 	bl	800bf4a <USBH_CtlReq>
 800a430:	4603      	mov	r3, r0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	4a09      	ldr	r2, [pc, #36]	; (800a478 <USBH_MSC_BOT_Init+0x3c>)
 800a452:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4a09      	ldr	r2, [pc, #36]	; (800a47c <USBH_MSC_BOT_Init+0x40>)
 800a458:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	43425355 	.word	0x43425355
 800a47c:	20304050 	.word	0x20304050

0800a480 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af02      	add	r7, sp, #8
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a48c:	2301      	movs	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a490:	2301      	movs	r3, #1
 800a492:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a494:	2301      	movs	r3, #1
 800a496:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a498:	2300      	movs	r3, #0
 800a49a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	2b0a      	cmp	r3, #10
 800a4b4:	f200 819e 	bhi.w	800a7f4 <USBH_MSC_BOT_Process+0x374>
 800a4b8:	a201      	add	r2, pc, #4	; (adr r2, 800a4c0 <USBH_MSC_BOT_Process+0x40>)
 800a4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4be:	bf00      	nop
 800a4c0:	0800a4ed 	.word	0x0800a4ed
 800a4c4:	0800a515 	.word	0x0800a515
 800a4c8:	0800a57f 	.word	0x0800a57f
 800a4cc:	0800a59d 	.word	0x0800a59d
 800a4d0:	0800a621 	.word	0x0800a621
 800a4d4:	0800a643 	.word	0x0800a643
 800a4d8:	0800a6db 	.word	0x0800a6db
 800a4dc:	0800a6f7 	.word	0x0800a6f7
 800a4e0:	0800a749 	.word	0x0800a749
 800a4e4:	0800a779 	.word	0x0800a779
 800a4e8:	0800a7db 	.word	0x0800a7db
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	795b      	ldrb	r3, [r3, #5]
 800a506:	2201      	movs	r2, #1
 800a508:	9200      	str	r2, [sp, #0]
 800a50a:	221f      	movs	r2, #31
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 ff2a 	bl	800c366 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a512:	e17e      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	795b      	ldrb	r3, [r3, #5]
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f002 faae 	bl	800ca7c <USBH_LL_GetURBState>
 800a520:	4603      	mov	r3, r0
 800a522:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a524:	7d3b      	ldrb	r3, [r7, #20]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d118      	bne.n	800a55c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00f      	beq.n	800a552 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a538:	b25b      	sxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	da04      	bge.n	800a548 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	2203      	movs	r2, #3
 800a542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a546:	e157      	b.n	800a7f8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	2205      	movs	r2, #5
 800a54c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a550:	e152      	b.n	800a7f8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	2207      	movs	r2, #7
 800a556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a55a:	e14d      	b.n	800a7f8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a55c:	7d3b      	ldrb	r3, [r7, #20]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d104      	bne.n	800a56c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a56a:	e145      	b.n	800a7f8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a56c:	7d3b      	ldrb	r3, [r7, #20]
 800a56e:	2b05      	cmp	r3, #5
 800a570:	f040 8142 	bne.w	800a7f8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	220a      	movs	r2, #10
 800a578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a57c:	e13c      	b.n	800a7f8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	895a      	ldrh	r2, [r3, #10]
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	791b      	ldrb	r3, [r3, #4]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f001 ff0f 	bl	800c3b0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2204      	movs	r2, #4
 800a596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a59a:	e13a      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	791b      	ldrb	r3, [r3, #4]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f002 fa6a 	bl	800ca7c <USBH_LL_GetURBState>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a5ac:	7d3b      	ldrb	r3, [r7, #20]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d12d      	bne.n	800a60e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	8952      	ldrh	r2, [r2, #10]
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d910      	bls.n	800a5e0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	8952      	ldrh	r2, [r2, #10]
 800a5c8:	441a      	add	r2, r3
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	8952      	ldrh	r2, [r2, #10]
 800a5d8:	1a9a      	subs	r2, r3, r2
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a5de:	e002      	b.n	800a5e6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	895a      	ldrh	r2, [r3, #10]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	791b      	ldrb	r3, [r3, #4]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 fed7 	bl	800c3b0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a602:	e0fb      	b.n	800a7fc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2207      	movs	r2, #7
 800a608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a60c:	e0f6      	b.n	800a7fc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a60e:	7d3b      	ldrb	r3, [r7, #20]
 800a610:	2b05      	cmp	r3, #5
 800a612:	f040 80f3 	bne.w	800a7fc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2209      	movs	r2, #9
 800a61a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a61e:	e0ed      	b.n	800a7fc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	891a      	ldrh	r2, [r3, #8]
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	795b      	ldrb	r3, [r3, #5]
 800a62e:	2001      	movs	r0, #1
 800a630:	9000      	str	r0, [sp, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f001 fe97 	bl	800c366 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	2206      	movs	r2, #6
 800a63c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a640:	e0e7      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	795b      	ldrb	r3, [r3, #5]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f002 fa17 	bl	800ca7c <USBH_LL_GetURBState>
 800a64e:	4603      	mov	r3, r0
 800a650:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a652:	7d3b      	ldrb	r3, [r7, #20]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d12f      	bne.n	800a6b8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	8912      	ldrh	r2, [r2, #8]
 800a660:	4293      	cmp	r3, r2
 800a662:	d910      	bls.n	800a686 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	8912      	ldrh	r2, [r2, #8]
 800a66e:	441a      	add	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	8912      	ldrh	r2, [r2, #8]
 800a67e:	1a9a      	subs	r2, r3, r2
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	65da      	str	r2, [r3, #92]	; 0x5c
 800a684:	e002      	b.n	800a68c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	2200      	movs	r2, #0
 800a68a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00c      	beq.n	800a6ae <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	891a      	ldrh	r2, [r3, #8]
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	795b      	ldrb	r3, [r3, #5]
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	9000      	str	r0, [sp, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 fe5d 	bl	800c366 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a6ac:	e0a8      	b.n	800a800 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2207      	movs	r2, #7
 800a6b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a6b6:	e0a3      	b.n	800a800 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6b8:	7d3b      	ldrb	r3, [r7, #20]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d104      	bne.n	800a6c8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2205      	movs	r2, #5
 800a6c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a6c6:	e09b      	b.n	800a800 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a6c8:	7d3b      	ldrb	r3, [r7, #20]
 800a6ca:	2b05      	cmp	r3, #5
 800a6cc:	f040 8098 	bne.w	800a800 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	220a      	movs	r2, #10
 800a6d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a6d8:	e092      	b.n	800a800 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	791b      	ldrb	r3, [r3, #4]
 800a6e4:	220d      	movs	r2, #13
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 fe62 	bl	800c3b0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	2208      	movs	r2, #8
 800a6f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a6f4:	e08d      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	791b      	ldrb	r3, [r3, #4]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 f9bd 	bl	800ca7c <USBH_LL_GetURBState>
 800a702:	4603      	mov	r3, r0
 800a704:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a706:	7d3b      	ldrb	r3, [r7, #20]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d115      	bne.n	800a738 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f8a9 	bl	800a874 <USBH_MSC_DecodeCSW>
 800a722:	4603      	mov	r3, r0
 800a724:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a726:	7d7b      	ldrb	r3, [r7, #21]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d102      	bne.n	800a732 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a730:	e068      	b.n	800a804 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a732:	2302      	movs	r3, #2
 800a734:	75fb      	strb	r3, [r7, #23]
      break;
 800a736:	e065      	b.n	800a804 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a738:	7d3b      	ldrb	r3, [r7, #20]
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d162      	bne.n	800a804 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	2209      	movs	r2, #9
 800a742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a746:	e05d      	b.n	800a804 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	2200      	movs	r2, #0
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f864 	bl	800a81c <USBH_MSC_BOT_Abort>
 800a754:	4603      	mov	r3, r0
 800a756:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a758:	7dbb      	ldrb	r3, [r7, #22]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d104      	bne.n	800a768 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2207      	movs	r2, #7
 800a762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a766:	e04f      	b.n	800a808 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a768:	7dbb      	ldrb	r3, [r7, #22]
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d14c      	bne.n	800a808 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	220b      	movs	r2, #11
 800a772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a776:	e047      	b.n	800a808 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	2201      	movs	r2, #1
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f84c 	bl	800a81c <USBH_MSC_BOT_Abort>
 800a784:	4603      	mov	r3, r0
 800a786:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a788:	7dbb      	ldrb	r3, [r7, #22]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d11d      	bne.n	800a7ca <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	795b      	ldrb	r3, [r3, #5]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f002 f9cb 	bl	800cb30 <USBH_LL_GetToggle>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	7959      	ldrb	r1, [r3, #5]
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	f1c3 0301 	rsb	r3, r3, #1
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f002 f98f 	bl	800cad0 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	791b      	ldrb	r3, [r3, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f002 f988 	bl	800cad0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2209      	movs	r2, #9
 800a7c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a7c8:	e020      	b.n	800a80c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a7ca:	7dbb      	ldrb	r3, [r7, #22]
 800a7cc:	2b04      	cmp	r3, #4
 800a7ce:	d11d      	bne.n	800a80c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	220b      	movs	r2, #11
 800a7d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7d8:	e018      	b.n	800a80c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff fdf2 	bl	800a3c4 <USBH_MSC_BOT_REQ_Reset>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d112      	bne.n	800a810 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a7f2:	e00d      	b.n	800a810 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a7f4:	bf00      	nop
 800a7f6:	e00c      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>
      break;
 800a7f8:	bf00      	nop
 800a7fa:	e00a      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>
      break;
 800a7fc:	bf00      	nop
 800a7fe:	e008      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>
      break;
 800a800:	bf00      	nop
 800a802:	e006      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>
      break;
 800a804:	bf00      	nop
 800a806:	e004      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>
      break;
 800a808:	bf00      	nop
 800a80a:	e002      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>
      break;
 800a80c:	bf00      	nop
 800a80e:	e000      	b.n	800a812 <USBH_MSC_BOT_Process+0x392>
      break;
 800a810:	bf00      	nop
  }
  return status;
 800a812:	7dfb      	ldrb	r3, [r7, #23]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
 800a828:	4613      	mov	r3, r2
 800a82a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a82c:	2302      	movs	r3, #2
 800a82e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a83a:	78bb      	ldrb	r3, [r7, #2]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <USBH_MSC_BOT_Abort+0x2a>
 800a840:	2b01      	cmp	r3, #1
 800a842:	d009      	beq.n	800a858 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a844:	e011      	b.n	800a86a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	79db      	ldrb	r3, [r3, #7]
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f001 f99c 	bl	800bb8a <USBH_ClrFeature>
 800a852:	4603      	mov	r3, r0
 800a854:	73fb      	strb	r3, [r7, #15]
      break;
 800a856:	e008      	b.n	800a86a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	799b      	ldrb	r3, [r3, #6]
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f001 f993 	bl	800bb8a <USBH_ClrFeature>
 800a864:	4603      	mov	r3, r0
 800a866:	73fb      	strb	r3, [r7, #15]
      break;
 800a868:	bf00      	nop
  }
  return status;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a886:	2301      	movs	r3, #1
 800a888:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	791b      	ldrb	r3, [r3, #4]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f002 f861 	bl	800c958 <USBH_LL_GetLastXferSize>
 800a896:	4603      	mov	r3, r0
 800a898:	2b0d      	cmp	r3, #13
 800a89a:	d002      	beq.n	800a8a2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a89c:	2302      	movs	r3, #2
 800a89e:	73fb      	strb	r3, [r7, #15]
 800a8a0:	e024      	b.n	800a8ec <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8a6:	4a14      	ldr	r2, [pc, #80]	; (800a8f8 <USBH_MSC_DecodeCSW+0x84>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d11d      	bne.n	800a8e8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d119      	bne.n	800a8ec <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
 800a8c6:	e011      	b.n	800a8ec <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d102      	bne.n	800a8d8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	73fb      	strb	r3, [r7, #15]
 800a8d6:	e009      	b.n	800a8ec <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d104      	bne.n	800a8ec <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	73fb      	strb	r3, [r7, #15]
 800a8e6:	e001      	b.n	800a8ec <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	53425355 	.word	0x53425355

0800a8fc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a908:	2302      	movs	r3, #2
 800a90a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a912:	69db      	ldr	r3, [r3, #28]
 800a914:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d002      	beq.n	800a926 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a920:	2b02      	cmp	r3, #2
 800a922:	d021      	beq.n	800a968 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a924:	e028      	b.n	800a978 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	2200      	movs	r2, #0
 800a92a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	220a      	movs	r2, #10
 800a938:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	3363      	adds	r3, #99	; 0x63
 800a940:	2210      	movs	r2, #16
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f002 f9bf 	bl	800ccc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2202      	movs	r2, #2
 800a95e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a962:	2301      	movs	r3, #1
 800a964:	73fb      	strb	r3, [r7, #15]
      break;
 800a966:	e007      	b.n	800a978 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff fd87 	bl	800a480 <USBH_MSC_BOT_Process>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]
      break;
 800a976:	bf00      	nop
  }

  return error;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b086      	sub	sp, #24
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	460b      	mov	r3, r1
 800a98c:	607a      	str	r2, [r7, #4]
 800a98e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a990:	2301      	movs	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a99a:	69db      	ldr	r3, [r3, #28]
 800a99c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d002      	beq.n	800a9ae <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d027      	beq.n	800a9fc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a9ac:	e05f      	b.n	800aa6e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2280      	movs	r2, #128	; 0x80
 800a9b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	220a      	movs	r2, #10
 800a9c0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	3363      	adds	r3, #99	; 0x63
 800a9c8:	2210      	movs	r2, #16
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f002 f97b 	bl	800ccc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	2225      	movs	r2, #37	; 0x25
 800a9d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	f103 0210 	add.w	r2, r3, #16
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a9fa:	e038      	b.n	800aa6e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a9fc:	7afb      	ldrb	r3, [r7, #11]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f7ff fd3d 	bl	800a480 <USBH_MSC_BOT_Process>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aa0a:	7dfb      	ldrb	r3, [r7, #23]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d12d      	bne.n	800aa6c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa16:	3303      	adds	r3, #3
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa22:	3302      	adds	r3, #2
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa30:	3301      	adds	r3, #1
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aa36:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	061b      	lsls	r3, r3, #24
 800aa42:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa4e:	3307      	adds	r3, #7
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa5a:	3306      	adds	r3, #6
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	021b      	lsls	r3, r3, #8
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	4313      	orrs	r3, r2
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	809a      	strh	r2, [r3, #4]
      break;
 800aa6c:	bf00      	nop
  }

  return error;
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	460b      	mov	r3, r1
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800aa86:	2302      	movs	r3, #2
 800aa88:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d002      	beq.n	800aaa4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d03d      	beq.n	800ab1e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800aaa2:	e089      	b.n	800abb8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	2224      	movs	r2, #36	; 0x24
 800aaa8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2280      	movs	r2, #128	; 0x80
 800aaae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	220a      	movs	r2, #10
 800aab6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	3363      	adds	r3, #99	; 0x63
 800aabe:	220a      	movs	r2, #10
 800aac0:	2100      	movs	r1, #0
 800aac2:	4618      	mov	r0, r3
 800aac4:	f002 f900 	bl	800ccc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	2212      	movs	r2, #18
 800aacc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	015b      	lsls	r3, r3, #5
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	2224      	movs	r2, #36	; 0x24
 800aaf0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	2202      	movs	r2, #2
 800ab08:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f103 0210 	add.w	r2, r3, #16
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab1c:	e04c      	b.n	800abb8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab1e:	7afb      	ldrb	r3, [r7, #11]
 800ab20:	4619      	mov	r1, r3
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7ff fcac 	bl	800a480 <USBH_MSC_BOT_Process>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d141      	bne.n	800abb6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ab32:	2222      	movs	r2, #34	; 0x22
 800ab34:	2100      	movs	r1, #0
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f002 f8c6 	bl	800ccc8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	f003 031f 	and.w	r3, r3, #31
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	095b      	lsrs	r3, r3, #5
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab64:	3301      	adds	r3, #1
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	b25b      	sxtb	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	da03      	bge.n	800ab76 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	709a      	strb	r2, [r3, #2]
 800ab74:	e002      	b.n	800ab7c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	1cd8      	adds	r0, r3, #3
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab86:	3308      	adds	r3, #8
 800ab88:	2208      	movs	r2, #8
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f002 f88e 	bl	800ccac <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f103 000c 	add.w	r0, r3, #12
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab9c:	3310      	adds	r3, #16
 800ab9e:	2210      	movs	r2, #16
 800aba0:	4619      	mov	r1, r3
 800aba2:	f002 f883 	bl	800ccac <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	331d      	adds	r3, #29
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800abb0:	3220      	adds	r2, #32
 800abb2:	6812      	ldr	r2, [r2, #0]
 800abb4:	601a      	str	r2, [r3, #0]
      break;
 800abb6:	bf00      	nop
  }

  return error;
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	460b      	mov	r3, r1
 800abcc:	607a      	str	r2, [r7, #4]
 800abce:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800abd0:	2302      	movs	r3, #2
 800abd2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abda:	69db      	ldr	r3, [r3, #28]
 800abdc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d002      	beq.n	800abee <USBH_MSC_SCSI_RequestSense+0x2c>
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d03d      	beq.n	800ac68 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800abec:	e05d      	b.n	800acaa <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	220e      	movs	r2, #14
 800abf2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2280      	movs	r2, #128	; 0x80
 800abf8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	220a      	movs	r2, #10
 800ac00:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	3363      	adds	r3, #99	; 0x63
 800ac08:	2210      	movs	r2, #16
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f002 f85b 	bl	800ccc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2203      	movs	r2, #3
 800ac16:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ac1a:	7afb      	ldrb	r3, [r7, #11]
 800ac1c:	015b      	lsls	r3, r3, #5
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	220e      	movs	r2, #14
 800ac3a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2202      	movs	r2, #2
 800ac52:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f103 0210 	add.w	r2, r3, #16
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac62:	2301      	movs	r3, #1
 800ac64:	75fb      	strb	r3, [r7, #23]
      break;
 800ac66:	e020      	b.n	800acaa <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac68:	7afb      	ldrb	r3, [r7, #11]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7ff fc07 	bl	800a480 <USBH_MSC_BOT_Process>
 800ac72:	4603      	mov	r3, r0
 800ac74:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d115      	bne.n	800aca8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac82:	3302      	adds	r3, #2
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	f003 030f 	and.w	r3, r3, #15
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac96:	7b1a      	ldrb	r2, [r3, #12]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aca2:	7b5a      	ldrb	r2, [r3, #13]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	709a      	strb	r2, [r3, #2]
      break;
 800aca8:	bf00      	nop
  }

  return error;
 800acaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	607a      	str	r2, [r7, #4]
 800acbe:	603b      	str	r3, [r7, #0]
 800acc0:	460b      	mov	r3, r1
 800acc2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800acc4:	2302      	movs	r3, #2
 800acc6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d002      	beq.n	800ace2 <USBH_MSC_SCSI_Write+0x2e>
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d047      	beq.n	800ad70 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ace0:	e04e      	b.n	800ad80 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ace8:	461a      	mov	r2, r3
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	fb03 f202 	mul.w	r2, r3, r2
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	220a      	movs	r2, #10
 800ad00:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	3363      	adds	r3, #99	; 0x63
 800ad08:	2210      	movs	r2, #16
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f001 ffdb 	bl	800ccc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	222a      	movs	r2, #42	; 0x2a
 800ad16:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ad1a:	79fa      	ldrb	r2, [r7, #7]
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ad22:	79ba      	ldrb	r2, [r7, #6]
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ad2a:	797a      	ldrb	r2, [r7, #5]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ad32:	1d3b      	adds	r3, r7, #4
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ad3c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ad46:	f107 0320 	add.w	r3, r7, #32
 800ad4a:	781a      	ldrb	r2, [r3, #0]
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad6e:	e007      	b.n	800ad80 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	4619      	mov	r1, r3
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff fb83 	bl	800a480 <USBH_MSC_BOT_Process>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad7e:	bf00      	nop
  }

  return error;
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b086      	sub	sp, #24
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	603b      	str	r3, [r7, #0]
 800ad96:	460b      	mov	r3, r1
 800ad98:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d002      	beq.n	800adb8 <USBH_MSC_SCSI_Read+0x2e>
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d047      	beq.n	800ae46 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800adb6:	e04e      	b.n	800ae56 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800adbe:	461a      	mov	r2, r3
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	fb03 f202 	mul.w	r2, r3, r2
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	2280      	movs	r2, #128	; 0x80
 800adce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	220a      	movs	r2, #10
 800add6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	3363      	adds	r3, #99	; 0x63
 800adde:	2210      	movs	r2, #16
 800ade0:	2100      	movs	r1, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f001 ff70 	bl	800ccc8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	2228      	movs	r2, #40	; 0x28
 800adec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800adf0:	79fa      	ldrb	r2, [r7, #7]
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800adf8:	79ba      	ldrb	r2, [r7, #6]
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ae00:	797a      	ldrb	r2, [r7, #5]
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ae08:	1d3b      	adds	r3, r7, #4
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ae12:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ae1c:	f107 0320 	add.w	r3, r7, #32
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	2202      	movs	r2, #2
 800ae34:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae40:	2301      	movs	r3, #1
 800ae42:	75fb      	strb	r3, [r7, #23]
      break;
 800ae44:	e007      	b.n	800ae56 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae46:	7afb      	ldrb	r3, [r7, #11]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f7ff fb18 	bl	800a480 <USBH_MSC_BOT_Process>
 800ae50:	4603      	mov	r3, r0
 800ae52:	75fb      	strb	r3, [r7, #23]
      break;
 800ae54:	bf00      	nop
  }

  return error;
 800ae56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ae74:	2302      	movs	r3, #2
 800ae76:	e029      	b.n	800aecc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	79fa      	ldrb	r2, [r7, #7]
 800ae7c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f81f 	bl	800aed4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f001 fc93 	bl	800c7f0 <USBH_LL_Init>

  return USBH_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aee0:	2300      	movs	r3, #0
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	e009      	b.n	800aefa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	33e0      	adds	r3, #224	; 0xe0
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4413      	add	r3, r2
 800aef0:	2200      	movs	r2, #0
 800aef2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3301      	adds	r3, #1
 800aef8:	60fb      	str	r3, [r7, #12]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2b0e      	cmp	r3, #14
 800aefe:	d9f2      	bls.n	800aee6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	e009      	b.n	800af1a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af10:	2200      	movs	r2, #0
 800af12:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3301      	adds	r3, #1
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af20:	d3f1      	bcc.n	800af06 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2240      	movs	r2, #64	; 0x40
 800af46:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d016      	beq.n	800afbe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10e      	bne.n	800afb8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800afa0:	1c59      	adds	r1, r3, #1
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	33de      	adds	r3, #222	; 0xde
 800afac:	6839      	ldr	r1, [r7, #0]
 800afae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]
 800afb6:	e004      	b.n	800afc2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800afb8:	2302      	movs	r3, #2
 800afba:	73fb      	strb	r3, [r7, #15]
 800afbc:	e001      	b.n	800afc2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800afbe:	2302      	movs	r3, #2
 800afc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800afe6:	78fa      	ldrb	r2, [r7, #3]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d204      	bcs.n	800aff6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	78fa      	ldrb	r2, [r7, #3]
 800aff0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aff4:	e001      	b.n	800affa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aff6:	2302      	movs	r3, #2
 800aff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3714      	adds	r7, #20
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b008:	b480      	push	{r7}
 800b00a:	b087      	sub	sp, #28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	4608      	mov	r0, r1
 800b012:	4611      	mov	r1, r2
 800b014:	461a      	mov	r2, r3
 800b016:	4603      	mov	r3, r0
 800b018:	70fb      	strb	r3, [r7, #3]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70bb      	strb	r3, [r7, #2]
 800b01e:	4613      	mov	r3, r2
 800b020:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b026:	2300      	movs	r3, #0
 800b028:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b030:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b032:	e025      	b.n	800b080 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	221a      	movs	r2, #26
 800b038:	fb02 f303 	mul.w	r3, r2, r3
 800b03c:	3308      	adds	r3, #8
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4413      	add	r3, r2
 800b042:	3302      	adds	r3, #2
 800b044:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	795b      	ldrb	r3, [r3, #5]
 800b04a:	78fa      	ldrb	r2, [r7, #3]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d002      	beq.n	800b056 <USBH_FindInterface+0x4e>
 800b050:	78fb      	ldrb	r3, [r7, #3]
 800b052:	2bff      	cmp	r3, #255	; 0xff
 800b054:	d111      	bne.n	800b07a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b05a:	78ba      	ldrb	r2, [r7, #2]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d002      	beq.n	800b066 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b060:	78bb      	ldrb	r3, [r7, #2]
 800b062:	2bff      	cmp	r3, #255	; 0xff
 800b064:	d109      	bne.n	800b07a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b06a:	787a      	ldrb	r2, [r7, #1]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d002      	beq.n	800b076 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b070:	787b      	ldrb	r3, [r7, #1]
 800b072:	2bff      	cmp	r3, #255	; 0xff
 800b074:	d101      	bne.n	800b07a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	e006      	b.n	800b088 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	3301      	adds	r3, #1
 800b07e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b080:	7dfb      	ldrb	r3, [r7, #23]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d9d6      	bls.n	800b034 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b086:	23ff      	movs	r3, #255	; 0xff
}
 800b088:	4618      	mov	r0, r3
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f001 fbe3 	bl	800c868 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 fcfc 	bl	800caa2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af04      	add	r7, sp, #16
 800b0ba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b0bc:	2302      	movs	r3, #2
 800b0be:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d102      	bne.n	800b0d6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2203      	movs	r2, #3
 800b0d4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b0b      	cmp	r3, #11
 800b0de:	f200 81b3 	bhi.w	800b448 <USBH_Process+0x394>
 800b0e2:	a201      	add	r2, pc, #4	; (adr r2, 800b0e8 <USBH_Process+0x34>)
 800b0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e8:	0800b119 	.word	0x0800b119
 800b0ec:	0800b14b 	.word	0x0800b14b
 800b0f0:	0800b1b3 	.word	0x0800b1b3
 800b0f4:	0800b3e3 	.word	0x0800b3e3
 800b0f8:	0800b449 	.word	0x0800b449
 800b0fc:	0800b257 	.word	0x0800b257
 800b100:	0800b389 	.word	0x0800b389
 800b104:	0800b28d 	.word	0x0800b28d
 800b108:	0800b2ad 	.word	0x0800b2ad
 800b10c:	0800b2cd 	.word	0x0800b2cd
 800b110:	0800b2fb 	.word	0x0800b2fb
 800b114:	0800b3cb 	.word	0x0800b3cb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 8193 	beq.w	800b44c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b12c:	20c8      	movs	r0, #200	; 0xc8
 800b12e:	f001 fd2f 	bl	800cb90 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f001 fbf5 	bl	800c922 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b148:	e180      	b.n	800b44c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b150:	2b01      	cmp	r3, #1
 800b152:	d107      	bne.n	800b164 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b162:	e182      	b.n	800b46a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b16a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b16e:	d914      	bls.n	800b19a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b176:	3301      	adds	r3, #1
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b186:	2b03      	cmp	r3, #3
 800b188:	d903      	bls.n	800b192 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	220d      	movs	r2, #13
 800b18e:	701a      	strb	r2, [r3, #0]
      break;
 800b190:	e16b      	b.n	800b46a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	701a      	strb	r2, [r3, #0]
      break;
 800b198:	e167      	b.n	800b46a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b1a0:	f103 020a 	add.w	r2, r3, #10
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b1aa:	200a      	movs	r0, #10
 800b1ac:	f001 fcf0 	bl	800cb90 <USBH_Delay>
      break;
 800b1b0:	e15b      	b.n	800b46a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d005      	beq.n	800b1c8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1c2:	2104      	movs	r1, #4
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b1c8:	2064      	movs	r0, #100	; 0x64
 800b1ca:	f001 fce1 	bl	800cb90 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f001 fb80 	bl	800c8d4 <USBH_LL_GetSpeed>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2205      	movs	r2, #5
 800b1e2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f001 f92f 	bl	800c44a <USBH_AllocPipe>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b1f4:	2180      	movs	r1, #128	; 0x80
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f001 f927 	bl	800c44a <USBH_AllocPipe>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	7919      	ldrb	r1, [r3, #4]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b218:	b292      	uxth	r2, r2
 800b21a:	9202      	str	r2, [sp, #8]
 800b21c:	2200      	movs	r2, #0
 800b21e:	9201      	str	r2, [sp, #4]
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	4603      	mov	r3, r0
 800b224:	2280      	movs	r2, #128	; 0x80
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f001 f8e0 	bl	800c3ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	7959      	ldrb	r1, [r3, #5]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b240:	b292      	uxth	r2, r2
 800b242:	9202      	str	r2, [sp, #8]
 800b244:	2200      	movs	r2, #0
 800b246:	9201      	str	r2, [sp, #4]
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	4603      	mov	r3, r0
 800b24c:	2200      	movs	r2, #0
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 f8cc 	bl	800c3ec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b254:	e109      	b.n	800b46a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f90c 	bl	800b474 <USBH_HandleEnum>
 800b25c:	4603      	mov	r3, r0
 800b25e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b260:	7bbb      	ldrb	r3, [r7, #14]
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	f040 80f3 	bne.w	800b450 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d103      	bne.n	800b284 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2208      	movs	r2, #8
 800b280:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b282:	e0e5      	b.n	800b450 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2207      	movs	r2, #7
 800b288:	701a      	strb	r2, [r3, #0]
      break;
 800b28a:	e0e1      	b.n	800b450 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b292:	2b00      	cmp	r3, #0
 800b294:	f000 80de 	beq.w	800b454 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b29e:	2101      	movs	r1, #1
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2208      	movs	r2, #8
 800b2a8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b2aa:	e0d3      	b.n	800b454 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fc20 	bl	800bafc <USBH_SetCfg>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f040 80ca 	bne.w	800b458 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2209      	movs	r2, #9
 800b2c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2ca:	e0c5      	b.n	800b458 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b2d2:	f003 0320 	and.w	r3, r3, #32
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00b      	beq.n	800b2f2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b2da:	2101      	movs	r1, #1
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fc30 	bl	800bb42 <USBH_SetFeature>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f040 80b9 	bne.w	800b45c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	220a      	movs	r2, #10
 800b2ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2f0:	e0b4      	b.n	800b45c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	220a      	movs	r2, #10
 800b2f6:	701a      	strb	r2, [r3, #0]
      break;
 800b2f8:	e0b0      	b.n	800b45c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 80ad 	beq.w	800b460 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b30e:	2300      	movs	r3, #0
 800b310:	73fb      	strb	r3, [r7, #15]
 800b312:	e016      	b.n	800b342 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b314:	7bfa      	ldrb	r2, [r7, #15]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	32de      	adds	r2, #222	; 0xde
 800b31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31e:	791a      	ldrb	r2, [r3, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b326:	429a      	cmp	r2, r3
 800b328:	d108      	bne.n	800b33c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b32a:	7bfa      	ldrb	r2, [r7, #15]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	32de      	adds	r2, #222	; 0xde
 800b330:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b33a:	e005      	b.n	800b348 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	3301      	adds	r3, #1
 800b340:	73fb      	strb	r3, [r7, #15]
 800b342:	7bfb      	ldrb	r3, [r7, #15]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d0e5      	beq.n	800b314 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d016      	beq.n	800b380 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	4798      	blx	r3
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2206      	movs	r2, #6
 800b368:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b370:	2103      	movs	r1, #3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b376:	e073      	b.n	800b460 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	220d      	movs	r2, #13
 800b37c:	701a      	strb	r2, [r3, #0]
      break;
 800b37e:	e06f      	b.n	800b460 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	220d      	movs	r2, #13
 800b384:	701a      	strb	r2, [r3, #0]
      break;
 800b386:	e06b      	b.n	800b460 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d017      	beq.n	800b3c2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	4798      	blx	r3
 800b39e:	4603      	mov	r3, r0
 800b3a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b3a2:	7bbb      	ldrb	r3, [r7, #14]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d103      	bne.n	800b3b2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	220b      	movs	r2, #11
 800b3ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3b0:	e058      	b.n	800b464 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d154      	bne.n	800b464 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	220d      	movs	r2, #13
 800b3be:	701a      	strb	r2, [r3, #0]
      break;
 800b3c0:	e050      	b.n	800b464 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	220d      	movs	r2, #13
 800b3c6:	701a      	strb	r2, [r3, #0]
      break;
 800b3c8:	e04c      	b.n	800b464 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d049      	beq.n	800b468 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	4798      	blx	r3
      }
      break;
 800b3e0:	e042      	b.n	800b468 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff fd72 	bl	800aed4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d009      	beq.n	800b40e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b414:	2b00      	cmp	r3, #0
 800b416:	d005      	beq.n	800b424 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b41e:	2105      	movs	r1, #5
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d107      	bne.n	800b440 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff fe2b 	bl	800b094 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b43e:	e014      	b.n	800b46a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 fa11 	bl	800c868 <USBH_LL_Start>
      break;
 800b446:	e010      	b.n	800b46a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b448:	bf00      	nop
 800b44a:	e00e      	b.n	800b46a <USBH_Process+0x3b6>
      break;
 800b44c:	bf00      	nop
 800b44e:	e00c      	b.n	800b46a <USBH_Process+0x3b6>
      break;
 800b450:	bf00      	nop
 800b452:	e00a      	b.n	800b46a <USBH_Process+0x3b6>
    break;
 800b454:	bf00      	nop
 800b456:	e008      	b.n	800b46a <USBH_Process+0x3b6>
      break;
 800b458:	bf00      	nop
 800b45a:	e006      	b.n	800b46a <USBH_Process+0x3b6>
      break;
 800b45c:	bf00      	nop
 800b45e:	e004      	b.n	800b46a <USBH_Process+0x3b6>
      break;
 800b460:	bf00      	nop
 800b462:	e002      	b.n	800b46a <USBH_Process+0x3b6>
      break;
 800b464:	bf00      	nop
 800b466:	e000      	b.n	800b46a <USBH_Process+0x3b6>
      break;
 800b468:	bf00      	nop
  }
  return USBH_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af04      	add	r7, sp, #16
 800b47a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b47c:	2301      	movs	r3, #1
 800b47e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b480:	2301      	movs	r3, #1
 800b482:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	785b      	ldrb	r3, [r3, #1]
 800b488:	2b07      	cmp	r3, #7
 800b48a:	f200 81c1 	bhi.w	800b810 <USBH_HandleEnum+0x39c>
 800b48e:	a201      	add	r2, pc, #4	; (adr r2, 800b494 <USBH_HandleEnum+0x20>)
 800b490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b494:	0800b4b5 	.word	0x0800b4b5
 800b498:	0800b573 	.word	0x0800b573
 800b49c:	0800b5dd 	.word	0x0800b5dd
 800b4a0:	0800b66b 	.word	0x0800b66b
 800b4a4:	0800b6d5 	.word	0x0800b6d5
 800b4a8:	0800b745 	.word	0x0800b745
 800b4ac:	0800b78b 	.word	0x0800b78b
 800b4b0:	0800b7d1 	.word	0x0800b7d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b4b4:	2108      	movs	r1, #8
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa50 	bl	800b95c <USBH_Get_DevDesc>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d130      	bne.n	800b528 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	7919      	ldrb	r1, [r3, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b4ea:	b292      	uxth	r2, r2
 800b4ec:	9202      	str	r2, [sp, #8]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	9201      	str	r2, [sp, #4]
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2280      	movs	r2, #128	; 0x80
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 ff77 	bl	800c3ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	7959      	ldrb	r1, [r3, #5]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b512:	b292      	uxth	r2, r2
 800b514:	9202      	str	r2, [sp, #8]
 800b516:	2200      	movs	r2, #0
 800b518:	9201      	str	r2, [sp, #4]
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	4603      	mov	r3, r0
 800b51e:	2200      	movs	r2, #0
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 ff63 	bl	800c3ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b526:	e175      	b.n	800b814 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	f040 8172 	bne.w	800b814 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b536:	3301      	adds	r3, #1
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b546:	2b03      	cmp	r3, #3
 800b548:	d903      	bls.n	800b552 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	220d      	movs	r2, #13
 800b54e:	701a      	strb	r2, [r3, #0]
      break;
 800b550:	e160      	b.n	800b814 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	795b      	ldrb	r3, [r3, #5]
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 ff97 	bl	800c48c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	791b      	ldrb	r3, [r3, #4]
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 ff91 	bl	800c48c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	701a      	strb	r2, [r3, #0]
      break;
 800b570:	e150      	b.n	800b814 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b572:	2112      	movs	r1, #18
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f9f1 	bl	800b95c <USBH_Get_DevDesc>
 800b57a:	4603      	mov	r3, r0
 800b57c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b57e:	7bbb      	ldrb	r3, [r7, #14]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d103      	bne.n	800b58c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b58a:	e145      	b.n	800b818 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	2b03      	cmp	r3, #3
 800b590:	f040 8142 	bne.w	800b818 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b59a:	3301      	adds	r3, #1
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d903      	bls.n	800b5b6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	220d      	movs	r2, #13
 800b5b2:	701a      	strb	r2, [r3, #0]
      break;
 800b5b4:	e130      	b.n	800b818 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	795b      	ldrb	r3, [r3, #5]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 ff65 	bl	800c48c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	791b      	ldrb	r3, [r3, #4]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 ff5f 	bl	800c48c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
      break;
 800b5da:	e11d      	b.n	800b818 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b5dc:	2101      	movs	r1, #1
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fa68 	bl	800bab4 <USBH_SetAddress>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d132      	bne.n	800b654 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b5ee:	2002      	movs	r0, #2
 800b5f0:	f001 face 	bl	800cb90 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2203      	movs	r2, #3
 800b600:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	7919      	ldrb	r1, [r3, #4]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b616:	b292      	uxth	r2, r2
 800b618:	9202      	str	r2, [sp, #8]
 800b61a:	2200      	movs	r2, #0
 800b61c:	9201      	str	r2, [sp, #4]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	4603      	mov	r3, r0
 800b622:	2280      	movs	r2, #128	; 0x80
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 fee1 	bl	800c3ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	7959      	ldrb	r1, [r3, #5]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b63e:	b292      	uxth	r2, r2
 800b640:	9202      	str	r2, [sp, #8]
 800b642:	2200      	movs	r2, #0
 800b644:	9201      	str	r2, [sp, #4]
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	4603      	mov	r3, r0
 800b64a:	2200      	movs	r2, #0
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fecd 	bl	800c3ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b652:	e0e3      	b.n	800b81c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b654:	7bbb      	ldrb	r3, [r7, #14]
 800b656:	2b03      	cmp	r3, #3
 800b658:	f040 80e0 	bne.w	800b81c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	220d      	movs	r2, #13
 800b660:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	705a      	strb	r2, [r3, #1]
      break;
 800b668:	e0d8      	b.n	800b81c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b66a:	2109      	movs	r1, #9
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f99d 	bl	800b9ac <USBH_Get_CfgDesc>
 800b672:	4603      	mov	r3, r0
 800b674:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d103      	bne.n	800b684 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2204      	movs	r2, #4
 800b680:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b682:	e0cd      	b.n	800b820 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b684:	7bbb      	ldrb	r3, [r7, #14]
 800b686:	2b03      	cmp	r3, #3
 800b688:	f040 80ca 	bne.w	800b820 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b692:	3301      	adds	r3, #1
 800b694:	b2da      	uxtb	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d903      	bls.n	800b6ae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	220d      	movs	r2, #13
 800b6aa:	701a      	strb	r2, [r3, #0]
      break;
 800b6ac:	e0b8      	b.n	800b820 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	795b      	ldrb	r3, [r3, #5]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fee9 	bl	800c48c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	791b      	ldrb	r3, [r3, #4]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 fee3 	bl	800c48c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]
      break;
 800b6d2:	e0a5      	b.n	800b820 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 f965 	bl	800b9ac <USBH_Get_CfgDesc>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d103      	bne.n	800b6f4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2205      	movs	r2, #5
 800b6f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b6f2:	e097      	b.n	800b824 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6f4:	7bbb      	ldrb	r3, [r7, #14]
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	f040 8094 	bne.w	800b824 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b702:	3301      	adds	r3, #1
 800b704:	b2da      	uxtb	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b712:	2b03      	cmp	r3, #3
 800b714:	d903      	bls.n	800b71e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	220d      	movs	r2, #13
 800b71a:	701a      	strb	r2, [r3, #0]
      break;
 800b71c:	e082      	b.n	800b824 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	795b      	ldrb	r3, [r3, #5]
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 feb1 	bl	800c48c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	791b      	ldrb	r3, [r3, #4]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 feab 	bl	800c48c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
      break;
 800b742:	e06f      	b.n	800b824 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d019      	beq.n	800b782 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b75a:	23ff      	movs	r3, #255	; 0xff
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f949 	bl	800b9f4 <USBH_Get_StringDesc>
 800b762:	4603      	mov	r3, r0
 800b764:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b766:	7bbb      	ldrb	r3, [r7, #14]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d103      	bne.n	800b774 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2206      	movs	r2, #6
 800b770:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b772:	e059      	b.n	800b828 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	2b03      	cmp	r3, #3
 800b778:	d156      	bne.n	800b828 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2206      	movs	r2, #6
 800b77e:	705a      	strb	r2, [r3, #1]
      break;
 800b780:	e052      	b.n	800b828 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2206      	movs	r2, #6
 800b786:	705a      	strb	r2, [r3, #1]
      break;
 800b788:	e04e      	b.n	800b828 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b790:	2b00      	cmp	r3, #0
 800b792:	d019      	beq.n	800b7c8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b7a0:	23ff      	movs	r3, #255	; 0xff
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f926 	bl	800b9f4 <USBH_Get_StringDesc>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d103      	bne.n	800b7ba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2207      	movs	r2, #7
 800b7b6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b7b8:	e038      	b.n	800b82c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7ba:	7bbb      	ldrb	r3, [r7, #14]
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d135      	bne.n	800b82c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2207      	movs	r2, #7
 800b7c4:	705a      	strb	r2, [r3, #1]
      break;
 800b7c6:	e031      	b.n	800b82c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2207      	movs	r2, #7
 800b7cc:	705a      	strb	r2, [r3, #1]
      break;
 800b7ce:	e02d      	b.n	800b82c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d017      	beq.n	800b80a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b7e6:	23ff      	movs	r3, #255	; 0xff
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f903 	bl	800b9f4 <USBH_Get_StringDesc>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b7f2:	7bbb      	ldrb	r3, [r7, #14]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b7fc:	e018      	b.n	800b830 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7fe:	7bbb      	ldrb	r3, [r7, #14]
 800b800:	2b03      	cmp	r3, #3
 800b802:	d115      	bne.n	800b830 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]
      break;
 800b808:	e012      	b.n	800b830 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b80a:	2300      	movs	r3, #0
 800b80c:	73fb      	strb	r3, [r7, #15]
      break;
 800b80e:	e00f      	b.n	800b830 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b810:	bf00      	nop
 800b812:	e00e      	b.n	800b832 <USBH_HandleEnum+0x3be>
      break;
 800b814:	bf00      	nop
 800b816:	e00c      	b.n	800b832 <USBH_HandleEnum+0x3be>
      break;
 800b818:	bf00      	nop
 800b81a:	e00a      	b.n	800b832 <USBH_HandleEnum+0x3be>
      break;
 800b81c:	bf00      	nop
 800b81e:	e008      	b.n	800b832 <USBH_HandleEnum+0x3be>
      break;
 800b820:	bf00      	nop
 800b822:	e006      	b.n	800b832 <USBH_HandleEnum+0x3be>
      break;
 800b824:	bf00      	nop
 800b826:	e004      	b.n	800b832 <USBH_HandleEnum+0x3be>
      break;
 800b828:	bf00      	nop
 800b82a:	e002      	b.n	800b832 <USBH_HandleEnum+0x3be>
      break;
 800b82c:	bf00      	nop
 800b82e:	e000      	b.n	800b832 <USBH_HandleEnum+0x3be>
      break;
 800b830:	bf00      	nop
  }
  return Status;
 800b832:	7bfb      	ldrb	r3, [r7, #15]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f804 	bl	800b87e <USBH_HandleSof>
}
 800b876:	bf00      	nop
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	2b0b      	cmp	r3, #11
 800b88e:	d10a      	bne.n	800b8a6 <USBH_HandleSof+0x28>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b896:	2b00      	cmp	r3, #0
 800b898:	d005      	beq.n	800b8a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	4798      	blx	r3
  }
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b8ae:	b480      	push	{r7}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b8be:	bf00      	nop
}
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b083      	sub	sp, #12
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b8da:	bf00      	nop
}
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 ffb2 	bl	800c89e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	791b      	ldrb	r3, [r3, #4]
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fda3 	bl	800c48c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	795b      	ldrb	r3, [r3, #5]
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fd9d 	bl	800c48c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af02      	add	r7, sp, #8
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b96e:	78fb      	ldrb	r3, [r7, #3]
 800b970:	b29b      	uxth	r3, r3
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	4613      	mov	r3, r2
 800b976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b97a:	2100      	movs	r1, #0
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f864 	bl	800ba4a <USBH_GetDescriptor>
 800b982:	4603      	mov	r3, r0
 800b984:	73fb      	strb	r3, [r7, #15]
 800b986:	7bfb      	ldrb	r3, [r7, #15]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10a      	bne.n	800b9a2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b998:	78fa      	ldrb	r2, [r7, #3]
 800b99a:	b292      	uxth	r2, r2
 800b99c:	4619      	mov	r1, r3
 800b99e:	f000 f918 	bl	800bbd2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af02      	add	r7, sp, #8
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	331c      	adds	r3, #28
 800b9bc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b9be:	887b      	ldrh	r3, [r7, #2]
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 f83d 	bl	800ba4a <USBH_GetDescriptor>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	72fb      	strb	r3, [r7, #11]
 800b9d4:	7afb      	ldrb	r3, [r7, #11]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d107      	bne.n	800b9ea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b9e0:	887a      	ldrh	r2, [r7, #2]
 800b9e2:	68f9      	ldr	r1, [r7, #12]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 f964 	bl	800bcb2 <USBH_ParseCfgDesc>
  }

  return status;
 800b9ea:	7afb      	ldrb	r3, [r7, #11]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b088      	sub	sp, #32
 800b9f8:	af02      	add	r7, sp, #8
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	460b      	mov	r3, r1
 800ba02:	72fb      	strb	r3, [r7, #11]
 800ba04:	4613      	mov	r3, r2
 800ba06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ba08:	7afb      	ldrb	r3, [r7, #11]
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ba10:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ba18:	893b      	ldrh	r3, [r7, #8]
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	2100      	movs	r1, #0
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f812 	bl	800ba4a <USBH_GetDescriptor>
 800ba26:	4603      	mov	r3, r0
 800ba28:	75fb      	strb	r3, [r7, #23]
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d107      	bne.n	800ba40 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba36:	893a      	ldrh	r2, [r7, #8]
 800ba38:	6879      	ldr	r1, [r7, #4]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 fa37 	bl	800beae <USBH_ParseStringDesc>
  }

  return status;
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	60f8      	str	r0, [r7, #12]
 800ba52:	607b      	str	r3, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	72fb      	strb	r3, [r7, #11]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	789b      	ldrb	r3, [r3, #2]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d11c      	bne.n	800ba9e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ba64:	7afb      	ldrb	r3, [r7, #11]
 800ba66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba6a:	b2da      	uxtb	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2206      	movs	r2, #6
 800ba74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	893a      	ldrh	r2, [r7, #8]
 800ba7a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ba7c:	893b      	ldrh	r3, [r7, #8]
 800ba7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba86:	d104      	bne.n	800ba92 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f240 4209 	movw	r2, #1033	; 0x409
 800ba8e:	829a      	strh	r2, [r3, #20]
 800ba90:	e002      	b.n	800ba98 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	8b3a      	ldrh	r2, [r7, #24]
 800ba9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ba9e:	8b3b      	ldrh	r3, [r7, #24]
 800baa0:	461a      	mov	r2, r3
 800baa2:	6879      	ldr	r1, [r7, #4]
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 fa50 	bl	800bf4a <USBH_CtlReq>
 800baaa:	4603      	mov	r3, r0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	789b      	ldrb	r3, [r3, #2]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d10f      	bne.n	800bae8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2205      	movs	r2, #5
 800bad2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bad4:	78fb      	ldrb	r3, [r7, #3]
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bae8:	2200      	movs	r2, #0
 800baea:	2100      	movs	r1, #0
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fa2c 	bl	800bf4a <USBH_CtlReq>
 800baf2:	4603      	mov	r3, r0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	460b      	mov	r3, r1
 800bb06:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	789b      	ldrb	r3, [r3, #2]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d10e      	bne.n	800bb2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2209      	movs	r2, #9
 800bb1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	887a      	ldrh	r2, [r7, #2]
 800bb20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb2e:	2200      	movs	r2, #0
 800bb30:	2100      	movs	r1, #0
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fa09 	bl	800bf4a <USBH_CtlReq>
 800bb38:	4603      	mov	r3, r0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b082      	sub	sp, #8
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	789b      	ldrb	r3, [r3, #2]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d10f      	bne.n	800bb76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bb62:	78fb      	ldrb	r3, [r7, #3]
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb76:	2200      	movs	r2, #0
 800bb78:	2100      	movs	r1, #0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f9e5 	bl	800bf4a <USBH_CtlReq>
 800bb80:	4603      	mov	r3, r0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	789b      	ldrb	r3, [r3, #2]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d10f      	bne.n	800bbbe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2202      	movs	r2, #2
 800bba2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f9c1 	bl	800bf4a <USBH_CtlReq>
 800bbc8:	4603      	mov	r3, r0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b085      	sub	sp, #20
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	781a      	ldrb	r2, [r3, #0]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	785a      	ldrb	r2, [r3, #1]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	3302      	adds	r3, #2
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	3303      	adds	r3, #3
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	021b      	lsls	r3, r3, #8
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	4313      	orrs	r3, r2
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	791a      	ldrb	r2, [r3, #4]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	795a      	ldrb	r2, [r3, #5]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	799a      	ldrb	r2, [r3, #6]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	79da      	ldrb	r2, [r3, #7]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bc2c:	88fb      	ldrh	r3, [r7, #6]
 800bc2e:	2b08      	cmp	r3, #8
 800bc30:	d939      	bls.n	800bca6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	3308      	adds	r3, #8
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	3309      	adds	r3, #9
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	021b      	lsls	r3, r3, #8
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	4313      	orrs	r3, r2
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	330a      	adds	r3, #10
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	b29a      	uxth	r2, r3
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	330b      	adds	r3, #11
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	021b      	lsls	r3, r3, #8
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	4313      	orrs	r3, r2
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	330c      	adds	r3, #12
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	330d      	adds	r3, #13
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	021b      	lsls	r3, r3, #8
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	7b9a      	ldrb	r2, [r3, #14]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	7bda      	ldrb	r2, [r3, #15]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	7c1a      	ldrb	r2, [r3, #16]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	7c5a      	ldrb	r2, [r3, #17]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	745a      	strb	r2, [r3, #17]
  }
}
 800bca6:	bf00      	nop
 800bca8:	3714      	adds	r7, #20
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b08a      	sub	sp, #40	; 0x28
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	781a      	ldrb	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	785a      	ldrb	r2, [r3, #1]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	3302      	adds	r3, #2
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	3303      	adds	r3, #3
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	791a      	ldrb	r2, [r3, #4]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	795a      	ldrb	r2, [r3, #5]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	799a      	ldrb	r2, [r3, #6]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	79da      	ldrb	r2, [r3, #7]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	7a1a      	ldrb	r2, [r3, #8]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bd28:	88fb      	ldrh	r3, [r7, #6]
 800bd2a:	2b09      	cmp	r3, #9
 800bd2c:	d95f      	bls.n	800bdee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bd2e:	2309      	movs	r3, #9
 800bd30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bd36:	e051      	b.n	800bddc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd38:	f107 0316 	add.w	r3, r7, #22
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd40:	f000 f8e8 	bl	800bf14 <USBH_GetNextDesc>
 800bd44:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	785b      	ldrb	r3, [r3, #1]
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d146      	bne.n	800bddc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bd4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd52:	221a      	movs	r2, #26
 800bd54:	fb02 f303 	mul.w	r3, r2, r3
 800bd58:	3308      	adds	r3, #8
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	3302      	adds	r3, #2
 800bd60:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bd62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd64:	69f8      	ldr	r0, [r7, #28]
 800bd66:	f000 f846 	bl	800bdf6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bd70:	2300      	movs	r3, #0
 800bd72:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd74:	e022      	b.n	800bdbc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd76:	f107 0316 	add.w	r3, r7, #22
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd7e:	f000 f8c9 	bl	800bf14 <USBH_GetNextDesc>
 800bd82:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	785b      	ldrb	r3, [r3, #1]
 800bd88:	2b05      	cmp	r3, #5
 800bd8a:	d117      	bne.n	800bdbc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd90:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bd94:	3201      	adds	r2, #1
 800bd96:	00d2      	lsls	r2, r2, #3
 800bd98:	211a      	movs	r1, #26
 800bd9a:	fb01 f303 	mul.w	r3, r1, r3
 800bd9e:	4413      	add	r3, r2
 800bda0:	3308      	adds	r3, #8
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	4413      	add	r3, r2
 800bda6:	3304      	adds	r3, #4
 800bda8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bdaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdac:	69b8      	ldr	r0, [r7, #24]
 800bdae:	f000 f851 	bl	800be54 <USBH_ParseEPDesc>
            ep_ix++;
 800bdb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	791b      	ldrb	r3, [r3, #4]
 800bdc0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d204      	bcs.n	800bdd2 <USBH_ParseCfgDesc+0x120>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	885a      	ldrh	r2, [r3, #2]
 800bdcc:	8afb      	ldrh	r3, [r7, #22]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d8d1      	bhi.n	800bd76 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bdd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d804      	bhi.n	800bdee <USBH_ParseCfgDesc+0x13c>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	885a      	ldrh	r2, [r3, #2]
 800bde8:	8afb      	ldrh	r3, [r7, #22]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d8a4      	bhi.n	800bd38 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bdee:	bf00      	nop
 800bdf0:	3728      	adds	r7, #40	; 0x28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781a      	ldrb	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	785a      	ldrb	r2, [r3, #1]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	789a      	ldrb	r2, [r3, #2]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	78da      	ldrb	r2, [r3, #3]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	791a      	ldrb	r2, [r3, #4]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	795a      	ldrb	r2, [r3, #5]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	799a      	ldrb	r2, [r3, #6]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	79da      	ldrb	r2, [r3, #7]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	7a1a      	ldrb	r2, [r3, #8]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	721a      	strb	r2, [r3, #8]
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781a      	ldrb	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	785a      	ldrb	r2, [r3, #1]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	789a      	ldrb	r2, [r3, #2]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	78da      	ldrb	r2, [r3, #3]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	3304      	adds	r3, #4
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	b29a      	uxth	r2, r3
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	3305      	adds	r3, #5
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	021b      	lsls	r3, r3, #8
 800be90:	b29b      	uxth	r3, r3
 800be92:	4313      	orrs	r3, r2
 800be94:	b29a      	uxth	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	799a      	ldrb	r2, [r3, #6]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	719a      	strb	r2, [r3, #6]
}
 800bea2:	bf00      	nop
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800beae:	b480      	push	{r7}
 800beb0:	b087      	sub	sp, #28
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	4613      	mov	r3, r2
 800beba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3301      	adds	r3, #1
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b03      	cmp	r3, #3
 800bec4:	d120      	bne.n	800bf08 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	1e9a      	subs	r2, r3, #2
 800becc:	88fb      	ldrh	r3, [r7, #6]
 800bece:	4293      	cmp	r3, r2
 800bed0:	bf28      	it	cs
 800bed2:	4613      	movcs	r3, r2
 800bed4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3302      	adds	r3, #2
 800beda:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bedc:	2300      	movs	r3, #0
 800bede:	82fb      	strh	r3, [r7, #22]
 800bee0:	e00b      	b.n	800befa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bee2:	8afb      	ldrh	r3, [r7, #22]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	4413      	add	r3, r2
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	701a      	strb	r2, [r3, #0]
      pdest++;
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	3301      	adds	r3, #1
 800bef2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bef4:	8afb      	ldrh	r3, [r7, #22]
 800bef6:	3302      	adds	r3, #2
 800bef8:	82fb      	strh	r3, [r7, #22]
 800befa:	8afa      	ldrh	r2, [r7, #22]
 800befc:	8abb      	ldrh	r3, [r7, #20]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d3ef      	bcc.n	800bee2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2200      	movs	r2, #0
 800bf06:	701a      	strb	r2, [r3, #0]
  }
}
 800bf08:	bf00      	nop
 800bf0a:	371c      	adds	r7, #28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	881a      	ldrh	r2, [r3, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	4413      	add	r3, r2
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4413      	add	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b086      	sub	sp, #24
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	60f8      	str	r0, [r7, #12]
 800bf52:	60b9      	str	r1, [r7, #8]
 800bf54:	4613      	mov	r3, r2
 800bf56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	789b      	ldrb	r3, [r3, #2]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d002      	beq.n	800bf6a <USBH_CtlReq+0x20>
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d00f      	beq.n	800bf88 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bf68:	e027      	b.n	800bfba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	88fa      	ldrh	r2, [r7, #6]
 800bf74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2202      	movs	r2, #2
 800bf80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bf82:	2301      	movs	r3, #1
 800bf84:	75fb      	strb	r3, [r7, #23]
      break;
 800bf86:	e018      	b.n	800bfba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f000 f81b 	bl	800bfc4 <USBH_HandleControl>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <USBH_CtlReq+0x54>
 800bf98:	7dfb      	ldrb	r3, [r7, #23]
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d106      	bne.n	800bfac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	761a      	strb	r2, [r3, #24]
      break;
 800bfaa:	e005      	b.n	800bfb8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d102      	bne.n	800bfb8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	709a      	strb	r2, [r3, #2]
      break;
 800bfb8:	bf00      	nop
  }
  return status;
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af02      	add	r7, sp, #8
 800bfca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	7e1b      	ldrb	r3, [r3, #24]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	2b0a      	cmp	r3, #10
 800bfdc:	f200 8156 	bhi.w	800c28c <USBH_HandleControl+0x2c8>
 800bfe0:	a201      	add	r2, pc, #4	; (adr r2, 800bfe8 <USBH_HandleControl+0x24>)
 800bfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe6:	bf00      	nop
 800bfe8:	0800c015 	.word	0x0800c015
 800bfec:	0800c02f 	.word	0x0800c02f
 800bff0:	0800c099 	.word	0x0800c099
 800bff4:	0800c0bf 	.word	0x0800c0bf
 800bff8:	0800c0f7 	.word	0x0800c0f7
 800bffc:	0800c121 	.word	0x0800c121
 800c000:	0800c173 	.word	0x0800c173
 800c004:	0800c195 	.word	0x0800c195
 800c008:	0800c1d1 	.word	0x0800c1d1
 800c00c:	0800c1f7 	.word	0x0800c1f7
 800c010:	0800c235 	.word	0x0800c235
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f103 0110 	add.w	r1, r3, #16
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	795b      	ldrb	r3, [r3, #5]
 800c01e:	461a      	mov	r2, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f943 	bl	800c2ac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2202      	movs	r2, #2
 800c02a:	761a      	strb	r2, [r3, #24]
      break;
 800c02c:	e139      	b.n	800c2a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	795b      	ldrb	r3, [r3, #5]
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fd21 	bl	800ca7c <USBH_LL_GetURBState>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d11e      	bne.n	800c082 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7c1b      	ldrb	r3, [r3, #16]
 800c048:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c04c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	8adb      	ldrh	r3, [r3, #22]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00a      	beq.n	800c06c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c056:	7b7b      	ldrb	r3, [r7, #13]
 800c058:	2b80      	cmp	r3, #128	; 0x80
 800c05a:	d103      	bne.n	800c064 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2203      	movs	r2, #3
 800c060:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c062:	e115      	b.n	800c290 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2205      	movs	r2, #5
 800c068:	761a      	strb	r2, [r3, #24]
      break;
 800c06a:	e111      	b.n	800c290 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c06c:	7b7b      	ldrb	r3, [r7, #13]
 800c06e:	2b80      	cmp	r3, #128	; 0x80
 800c070:	d103      	bne.n	800c07a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2209      	movs	r2, #9
 800c076:	761a      	strb	r2, [r3, #24]
      break;
 800c078:	e10a      	b.n	800c290 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2207      	movs	r2, #7
 800c07e:	761a      	strb	r2, [r3, #24]
      break;
 800c080:	e106      	b.n	800c290 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	2b04      	cmp	r3, #4
 800c086:	d003      	beq.n	800c090 <USBH_HandleControl+0xcc>
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	f040 8100 	bne.w	800c290 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	220b      	movs	r2, #11
 800c094:	761a      	strb	r2, [r3, #24]
      break;
 800c096:	e0fb      	b.n	800c290 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6899      	ldr	r1, [r3, #8]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	899a      	ldrh	r2, [r3, #12]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	791b      	ldrb	r3, [r3, #4]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f93a 	bl	800c32a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2204      	movs	r2, #4
 800c0ba:	761a      	strb	r2, [r3, #24]
      break;
 800c0bc:	e0f1      	b.n	800c2a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	791b      	ldrb	r3, [r3, #4]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fcd9 	bl	800ca7c <USBH_LL_GetURBState>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d102      	bne.n	800c0da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2209      	movs	r2, #9
 800c0d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	2b05      	cmp	r3, #5
 800c0de:	d102      	bne.n	800c0e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0e4:	e0d6      	b.n	800c294 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
 800c0e8:	2b04      	cmp	r3, #4
 800c0ea:	f040 80d3 	bne.w	800c294 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	220b      	movs	r2, #11
 800c0f2:	761a      	strb	r2, [r3, #24]
      break;
 800c0f4:	e0ce      	b.n	800c294 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6899      	ldr	r1, [r3, #8]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	899a      	ldrh	r2, [r3, #12]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	795b      	ldrb	r3, [r3, #5]
 800c102:	2001      	movs	r0, #1
 800c104:	9000      	str	r0, [sp, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f8ea 	bl	800c2e0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c112:	b29a      	uxth	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2206      	movs	r2, #6
 800c11c:	761a      	strb	r2, [r3, #24]
      break;
 800c11e:	e0c0      	b.n	800c2a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	795b      	ldrb	r3, [r3, #5]
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fca8 	bl	800ca7c <USBH_LL_GetURBState>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d103      	bne.n	800c13e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2207      	movs	r2, #7
 800c13a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c13c:	e0ac      	b.n	800c298 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c13e:	7bbb      	ldrb	r3, [r7, #14]
 800c140:	2b05      	cmp	r3, #5
 800c142:	d105      	bne.n	800c150 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	220c      	movs	r2, #12
 800c148:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c14a:	2303      	movs	r3, #3
 800c14c:	73fb      	strb	r3, [r7, #15]
      break;
 800c14e:	e0a3      	b.n	800c298 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c150:	7bbb      	ldrb	r3, [r7, #14]
 800c152:	2b02      	cmp	r3, #2
 800c154:	d103      	bne.n	800c15e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2205      	movs	r2, #5
 800c15a:	761a      	strb	r2, [r3, #24]
      break;
 800c15c:	e09c      	b.n	800c298 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	2b04      	cmp	r3, #4
 800c162:	f040 8099 	bne.w	800c298 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	220b      	movs	r2, #11
 800c16a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c16c:	2302      	movs	r3, #2
 800c16e:	73fb      	strb	r3, [r7, #15]
      break;
 800c170:	e092      	b.n	800c298 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	791b      	ldrb	r3, [r3, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	2100      	movs	r1, #0
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f8d5 	bl	800c32a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c186:	b29a      	uxth	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2208      	movs	r2, #8
 800c190:	761a      	strb	r2, [r3, #24]

      break;
 800c192:	e086      	b.n	800c2a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	791b      	ldrb	r3, [r3, #4]
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fc6e 	bl	800ca7c <USBH_LL_GetURBState>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d105      	bne.n	800c1b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	220d      	movs	r2, #13
 800c1ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1b4:	e072      	b.n	800c29c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	2b04      	cmp	r3, #4
 800c1ba:	d103      	bne.n	800c1c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	220b      	movs	r2, #11
 800c1c0:	761a      	strb	r2, [r3, #24]
      break;
 800c1c2:	e06b      	b.n	800c29c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c1c4:	7bbb      	ldrb	r3, [r7, #14]
 800c1c6:	2b05      	cmp	r3, #5
 800c1c8:	d168      	bne.n	800c29c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ce:	e065      	b.n	800c29c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	795b      	ldrb	r3, [r3, #5]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	9200      	str	r2, [sp, #0]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2100      	movs	r1, #0
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f87f 	bl	800c2e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	220a      	movs	r2, #10
 800c1f2:	761a      	strb	r2, [r3, #24]
      break;
 800c1f4:	e055      	b.n	800c2a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	795b      	ldrb	r3, [r3, #5]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fc3d 	bl	800ca7c <USBH_LL_GetURBState>
 800c202:	4603      	mov	r3, r0
 800c204:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c206:	7bbb      	ldrb	r3, [r7, #14]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d105      	bne.n	800c218 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	220d      	movs	r2, #13
 800c214:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c216:	e043      	b.n	800c2a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	2b02      	cmp	r3, #2
 800c21c:	d103      	bne.n	800c226 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2209      	movs	r2, #9
 800c222:	761a      	strb	r2, [r3, #24]
      break;
 800c224:	e03c      	b.n	800c2a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d139      	bne.n	800c2a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	220b      	movs	r2, #11
 800c230:	761a      	strb	r2, [r3, #24]
      break;
 800c232:	e035      	b.n	800c2a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	7e5b      	ldrb	r3, [r3, #25]
 800c238:	3301      	adds	r3, #1
 800c23a:	b2da      	uxtb	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	765a      	strb	r2, [r3, #25]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	7e5b      	ldrb	r3, [r3, #25]
 800c244:	2b02      	cmp	r3, #2
 800c246:	d806      	bhi.n	800c256 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c254:	e025      	b.n	800c2a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c25c:	2106      	movs	r1, #6
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	795b      	ldrb	r3, [r3, #5]
 800c26c:	4619      	mov	r1, r3
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f90c 	bl	800c48c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	791b      	ldrb	r3, [r3, #4]
 800c278:	4619      	mov	r1, r3
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f906 	bl	800c48c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c286:	2302      	movs	r3, #2
 800c288:	73fb      	strb	r3, [r7, #15]
      break;
 800c28a:	e00a      	b.n	800c2a2 <USBH_HandleControl+0x2de>

    default:
      break;
 800c28c:	bf00      	nop
 800c28e:	e008      	b.n	800c2a2 <USBH_HandleControl+0x2de>
      break;
 800c290:	bf00      	nop
 800c292:	e006      	b.n	800c2a2 <USBH_HandleControl+0x2de>
      break;
 800c294:	bf00      	nop
 800c296:	e004      	b.n	800c2a2 <USBH_HandleControl+0x2de>
      break;
 800c298:	bf00      	nop
 800c29a:	e002      	b.n	800c2a2 <USBH_HandleControl+0x2de>
      break;
 800c29c:	bf00      	nop
 800c29e:	e000      	b.n	800c2a2 <USBH_HandleControl+0x2de>
      break;
 800c2a0:	bf00      	nop
  }

  return status;
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af04      	add	r7, sp, #16
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c2ba:	79f9      	ldrb	r1, [r7, #7]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9303      	str	r3, [sp, #12]
 800c2c0:	2308      	movs	r3, #8
 800c2c2:	9302      	str	r3, [sp, #8]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f000 fba2 	bl	800ca1a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b088      	sub	sp, #32
 800c2e4:	af04      	add	r7, sp, #16
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	80fb      	strh	r3, [r7, #6]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d001      	beq.n	800c304 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c300:	2300      	movs	r3, #0
 800c302:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c304:	7979      	ldrb	r1, [r7, #5]
 800c306:	7e3b      	ldrb	r3, [r7, #24]
 800c308:	9303      	str	r3, [sp, #12]
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	9302      	str	r3, [sp, #8]
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	9301      	str	r3, [sp, #4]
 800c312:	2301      	movs	r3, #1
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	2300      	movs	r3, #0
 800c318:	2200      	movs	r2, #0
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f000 fb7d 	bl	800ca1a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b088      	sub	sp, #32
 800c32e:	af04      	add	r7, sp, #16
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	4611      	mov	r1, r2
 800c336:	461a      	mov	r2, r3
 800c338:	460b      	mov	r3, r1
 800c33a:	80fb      	strh	r3, [r7, #6]
 800c33c:	4613      	mov	r3, r2
 800c33e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c340:	7979      	ldrb	r1, [r7, #5]
 800c342:	2300      	movs	r3, #0
 800c344:	9303      	str	r3, [sp, #12]
 800c346:	88fb      	ldrh	r3, [r7, #6]
 800c348:	9302      	str	r3, [sp, #8]
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	2301      	movs	r3, #1
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	2300      	movs	r3, #0
 800c354:	2201      	movs	r2, #1
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 fb5f 	bl	800ca1a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c35c:	2300      	movs	r3, #0

}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b088      	sub	sp, #32
 800c36a:	af04      	add	r7, sp, #16
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	4611      	mov	r1, r2
 800c372:	461a      	mov	r2, r3
 800c374:	460b      	mov	r3, r1
 800c376:	80fb      	strh	r3, [r7, #6]
 800c378:	4613      	mov	r3, r2
 800c37a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c386:	2300      	movs	r3, #0
 800c388:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c38a:	7979      	ldrb	r1, [r7, #5]
 800c38c:	7e3b      	ldrb	r3, [r7, #24]
 800c38e:	9303      	str	r3, [sp, #12]
 800c390:	88fb      	ldrh	r3, [r7, #6]
 800c392:	9302      	str	r3, [sp, #8]
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	9301      	str	r3, [sp, #4]
 800c398:	2301      	movs	r3, #1
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	2302      	movs	r3, #2
 800c39e:	2200      	movs	r2, #0
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f000 fb3a 	bl	800ca1a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b088      	sub	sp, #32
 800c3b4:	af04      	add	r7, sp, #16
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	461a      	mov	r2, r3
 800c3be:	460b      	mov	r3, r1
 800c3c0:	80fb      	strh	r3, [r7, #6]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3c6:	7979      	ldrb	r1, [r7, #5]
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	9303      	str	r3, [sp, #12]
 800c3cc:	88fb      	ldrh	r3, [r7, #6]
 800c3ce:	9302      	str	r3, [sp, #8]
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	2302      	movs	r3, #2
 800c3da:	2201      	movs	r2, #1
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 fb1c 	bl	800ca1a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af04      	add	r7, sp, #16
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	70fb      	strb	r3, [r7, #3]
 800c3fe:	460b      	mov	r3, r1
 800c400:	70bb      	strb	r3, [r7, #2]
 800c402:	4613      	mov	r3, r2
 800c404:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c406:	7878      	ldrb	r0, [r7, #1]
 800c408:	78ba      	ldrb	r2, [r7, #2]
 800c40a:	78f9      	ldrb	r1, [r7, #3]
 800c40c:	8b3b      	ldrh	r3, [r7, #24]
 800c40e:	9302      	str	r3, [sp, #8]
 800c410:	7d3b      	ldrb	r3, [r7, #20]
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	7c3b      	ldrb	r3, [r7, #16]
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	4603      	mov	r3, r0
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 faaf 	bl	800c97e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b082      	sub	sp, #8
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	460b      	mov	r3, r1
 800c434:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c436:	78fb      	ldrb	r3, [r7, #3]
 800c438:	4619      	mov	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 face 	bl	800c9dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b084      	sub	sp, #16
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	460b      	mov	r3, r1
 800c454:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f836 	bl	800c4c8 <USBH_GetFreePipe>
 800c45c:	4603      	mov	r3, r0
 800c45e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c460:	89fb      	ldrh	r3, [r7, #14]
 800c462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c466:	4293      	cmp	r3, r2
 800c468:	d00a      	beq.n	800c480 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c46a:	78fa      	ldrb	r2, [r7, #3]
 800c46c:	89fb      	ldrh	r3, [r7, #14]
 800c46e:	f003 030f 	and.w	r3, r3, #15
 800c472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c476:	6879      	ldr	r1, [r7, #4]
 800c478:	33e0      	adds	r3, #224	; 0xe0
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c480:	89fb      	ldrh	r3, [r7, #14]
 800c482:	b2db      	uxtb	r3, r3
}
 800c484:	4618      	mov	r0, r3
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c498:	78fb      	ldrb	r3, [r7, #3]
 800c49a:	2b0a      	cmp	r3, #10
 800c49c:	d80d      	bhi.n	800c4ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c49e:	78fb      	ldrb	r3, [r7, #3]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	33e0      	adds	r3, #224	; 0xe0
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	78fb      	ldrb	r3, [r7, #3]
 800c4ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	33e0      	adds	r3, #224	; 0xe0
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	440b      	add	r3, r1
 800c4b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	73fb      	strb	r3, [r7, #15]
 800c4d8:	e00f      	b.n	800c4fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	33e0      	adds	r3, #224	; 0xe0
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d102      	bne.n	800c4f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	e007      	b.n	800c504 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c4f4:	7bfb      	ldrb	r3, [r7, #15]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	73fb      	strb	r3, [r7, #15]
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
 800c4fc:	2b0a      	cmp	r3, #10
 800c4fe:	d9ec      	bls.n	800c4da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c500:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c510:	b480      	push	{r7}
 800c512:	b087      	sub	sp, #28
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	4613      	mov	r3, r2
 800c51c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c51e:	2301      	movs	r3, #1
 800c520:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c526:	4b1f      	ldr	r3, [pc, #124]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c528:	7a5b      	ldrb	r3, [r3, #9]
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d131      	bne.n	800c594 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c530:	4b1c      	ldr	r3, [pc, #112]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c532:	7a5b      	ldrb	r3, [r3, #9]
 800c534:	b2db      	uxtb	r3, r3
 800c536:	461a      	mov	r2, r3
 800c538:	4b1a      	ldr	r3, [pc, #104]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c53a:	2100      	movs	r1, #0
 800c53c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c53e:	4b19      	ldr	r3, [pc, #100]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c540:	7a5b      	ldrb	r3, [r3, #9]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	4a17      	ldr	r2, [pc, #92]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4413      	add	r3, r2
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c54e:	4b15      	ldr	r3, [pc, #84]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c550:	7a5b      	ldrb	r3, [r3, #9]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	461a      	mov	r2, r3
 800c556:	4b13      	ldr	r3, [pc, #76]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c558:	4413      	add	r3, r2
 800c55a:	79fa      	ldrb	r2, [r7, #7]
 800c55c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c55e:	4b11      	ldr	r3, [pc, #68]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c560:	7a5b      	ldrb	r3, [r3, #9]
 800c562:	b2db      	uxtb	r3, r3
 800c564:	1c5a      	adds	r2, r3, #1
 800c566:	b2d1      	uxtb	r1, r2
 800c568:	4a0e      	ldr	r2, [pc, #56]	; (800c5a4 <FATFS_LinkDriverEx+0x94>)
 800c56a:	7251      	strb	r1, [r2, #9]
 800c56c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c56e:	7dbb      	ldrb	r3, [r7, #22]
 800c570:	3330      	adds	r3, #48	; 0x30
 800c572:	b2da      	uxtb	r2, r3
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	3301      	adds	r3, #1
 800c57c:	223a      	movs	r2, #58	; 0x3a
 800c57e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	3302      	adds	r3, #2
 800c584:	222f      	movs	r2, #47	; 0x2f
 800c586:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	3303      	adds	r3, #3
 800c58c:	2200      	movs	r2, #0
 800c58e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c594:	7dfb      	ldrb	r3, [r7, #23]
}
 800c596:	4618      	mov	r0, r3
 800c598:	371c      	adds	r7, #28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	200003c0 	.word	0x200003c0

0800c5a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff ffaa 	bl	800c510 <FATFS_LinkDriverEx>
 800c5bc:	4603      	mov	r3, r0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	490e      	ldr	r1, [pc, #56]	; (800c608 <MX_USB_HOST_Init+0x40>)
 800c5d0:	480e      	ldr	r0, [pc, #56]	; (800c60c <MX_USB_HOST_Init+0x44>)
 800c5d2:	f7fe fc45 	bl	800ae60 <USBH_Init>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c5dc:	f7f5 fbe2 	bl	8001da4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c5e0:	490b      	ldr	r1, [pc, #44]	; (800c610 <MX_USB_HOST_Init+0x48>)
 800c5e2:	480a      	ldr	r0, [pc, #40]	; (800c60c <MX_USB_HOST_Init+0x44>)
 800c5e4:	f7fe fcca 	bl	800af7c <USBH_RegisterClass>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c5ee:	f7f5 fbd9 	bl	8001da4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c5f2:	4806      	ldr	r0, [pc, #24]	; (800c60c <MX_USB_HOST_Init+0x44>)
 800c5f4:	f7fe fd4e 	bl	800b094 <USBH_Start>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c5fe:	f7f5 fbd1 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c602:	bf00      	nop
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	0800c629 	.word	0x0800c629
 800c60c:	20005444 	.word	0x20005444
 800c610:	200002b0 	.word	0x200002b0

0800c614 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c618:	4802      	ldr	r0, [pc, #8]	; (800c624 <MX_USB_HOST_Process+0x10>)
 800c61a:	f7fe fd4b 	bl	800b0b4 <USBH_Process>
}
 800c61e:	bf00      	nop
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	20005444 	.word	0x20005444

0800c628 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	3b01      	subs	r3, #1
 800c638:	2b04      	cmp	r3, #4
 800c63a:	d819      	bhi.n	800c670 <USBH_UserProcess+0x48>
 800c63c:	a201      	add	r2, pc, #4	; (adr r2, 800c644 <USBH_UserProcess+0x1c>)
 800c63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c642:	bf00      	nop
 800c644:	0800c671 	.word	0x0800c671
 800c648:	0800c661 	.word	0x0800c661
 800c64c:	0800c671 	.word	0x0800c671
 800c650:	0800c669 	.word	0x0800c669
 800c654:	0800c659 	.word	0x0800c659
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c658:	4b09      	ldr	r3, [pc, #36]	; (800c680 <USBH_UserProcess+0x58>)
 800c65a:	2203      	movs	r2, #3
 800c65c:	701a      	strb	r2, [r3, #0]
  break;
 800c65e:	e008      	b.n	800c672 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c660:	4b07      	ldr	r3, [pc, #28]	; (800c680 <USBH_UserProcess+0x58>)
 800c662:	2202      	movs	r2, #2
 800c664:	701a      	strb	r2, [r3, #0]
  break;
 800c666:	e004      	b.n	800c672 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c668:	4b05      	ldr	r3, [pc, #20]	; (800c680 <USBH_UserProcess+0x58>)
 800c66a:	2201      	movs	r2, #1
 800c66c:	701a      	strb	r2, [r3, #0]
  break;
 800c66e:	e000      	b.n	800c672 <USBH_UserProcess+0x4a>

  default:
  break;
 800c670:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c672:	bf00      	nop
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	200003cc 	.word	0x200003cc

0800c684 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b08a      	sub	sp, #40	; 0x28
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c68c:	f107 0314 	add.w	r3, r7, #20
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	605a      	str	r2, [r3, #4]
 800c696:	609a      	str	r2, [r3, #8]
 800c698:	60da      	str	r2, [r3, #12]
 800c69a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6a4:	d147      	bne.n	800c736 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	613b      	str	r3, [r7, #16]
 800c6aa:	4b25      	ldr	r3, [pc, #148]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ae:	4a24      	ldr	r2, [pc, #144]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c6b0:	f043 0301 	orr.w	r3, r3, #1
 800c6b4:	6313      	str	r3, [r2, #48]	; 0x30
 800c6b6:	4b22      	ldr	r3, [pc, #136]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	613b      	str	r3, [r7, #16]
 800c6c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c6c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6d0:	f107 0314 	add.w	r3, r7, #20
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	481b      	ldr	r0, [pc, #108]	; (800c744 <HAL_HCD_MspInit+0xc0>)
 800c6d8:	f7f7 fab0 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c6dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c6e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6ee:	230a      	movs	r3, #10
 800c6f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6f2:	f107 0314 	add.w	r3, r7, #20
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4812      	ldr	r0, [pc, #72]	; (800c744 <HAL_HCD_MspInit+0xc0>)
 800c6fa:	f7f7 fa9f 	bl	8003c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c6fe:	4b10      	ldr	r3, [pc, #64]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c702:	4a0f      	ldr	r2, [pc, #60]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c708:	6353      	str	r3, [r2, #52]	; 0x34
 800c70a:	2300      	movs	r3, #0
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c712:	4a0b      	ldr	r2, [pc, #44]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c718:	6453      	str	r3, [r2, #68]	; 0x44
 800c71a:	4b09      	ldr	r3, [pc, #36]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c726:	2200      	movs	r2, #0
 800c728:	2100      	movs	r1, #0
 800c72a:	2043      	movs	r0, #67	; 0x43
 800c72c:	f7f6 fedf 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c730:	2043      	movs	r0, #67	; 0x43
 800c732:	f7f6 fef8 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c736:	bf00      	nop
 800c738:	3728      	adds	r7, #40	; 0x28
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	40023800 	.word	0x40023800
 800c744:	40020000 	.word	0x40020000

0800c748 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff f87f 	bl	800b85a <USBH_LL_IncTimer>
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff f8b7 	bl	800b8e6 <USBH_LL_Connect>
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c78e:	4618      	mov	r0, r3
 800c790:	f7ff f8c0 	bl	800b914 <USBH_LL_Disconnect>
}
 800c794:	bf00      	nop
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	70fb      	strb	r3, [r7, #3]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff f871 	bl	800b8ae <USBH_LL_PortEnabled>
}
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff f871 	bl	800b8ca <USBH_LL_PortDisabled>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d12a      	bne.n	800c858 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c802:	4a18      	ldr	r2, [pc, #96]	; (800c864 <USBH_LL_Init+0x74>)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a15      	ldr	r2, [pc, #84]	; (800c864 <USBH_LL_Init+0x74>)
 800c80e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c812:	4b14      	ldr	r3, [pc, #80]	; (800c864 <USBH_LL_Init+0x74>)
 800c814:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c818:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c81a:	4b12      	ldr	r3, [pc, #72]	; (800c864 <USBH_LL_Init+0x74>)
 800c81c:	2208      	movs	r2, #8
 800c81e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c820:	4b10      	ldr	r3, [pc, #64]	; (800c864 <USBH_LL_Init+0x74>)
 800c822:	2201      	movs	r2, #1
 800c824:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c826:	4b0f      	ldr	r3, [pc, #60]	; (800c864 <USBH_LL_Init+0x74>)
 800c828:	2200      	movs	r2, #0
 800c82a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c82c:	4b0d      	ldr	r3, [pc, #52]	; (800c864 <USBH_LL_Init+0x74>)
 800c82e:	2202      	movs	r2, #2
 800c830:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c832:	4b0c      	ldr	r3, [pc, #48]	; (800c864 <USBH_LL_Init+0x74>)
 800c834:	2200      	movs	r2, #0
 800c836:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c838:	480a      	ldr	r0, [pc, #40]	; (800c864 <USBH_LL_Init+0x74>)
 800c83a:	f7f7 fbcc 	bl	8003fd6 <HAL_HCD_Init>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c844:	f7f5 faae 	bl	8001da4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c848:	4806      	ldr	r0, [pc, #24]	; (800c864 <USBH_LL_Init+0x74>)
 800c84a:	f7f7 ffb0 	bl	80047ae <HAL_HCD_GetCurrentFrame>
 800c84e:	4603      	mov	r3, r0
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7fe fff2 	bl	800b83c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	2000581c 	.word	0x2000581c

0800c868 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c874:	2300      	movs	r3, #0
 800c876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7f7 ff1f 	bl	80046c2 <HAL_HCD_Start>
 800c884:	4603      	mov	r3, r0
 800c886:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 f98c 	bl	800cba8 <USBH_Get_USB_Status>
 800c890:	4603      	mov	r3, r0
 800c892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c894:	7bbb      	ldrb	r3, [r7, #14]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b084      	sub	sp, #16
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7f7 ff27 	bl	8004708 <HAL_HCD_Stop>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 f971 	bl	800cba8 <USBH_Get_USB_Status>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7f7 ff6f 	bl	80047ca <HAL_HCD_GetCurrentSpeed>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d00c      	beq.n	800c90c <USBH_LL_GetSpeed+0x38>
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d80d      	bhi.n	800c912 <USBH_LL_GetSpeed+0x3e>
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <USBH_LL_GetSpeed+0x2c>
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d003      	beq.n	800c906 <USBH_LL_GetSpeed+0x32>
 800c8fe:	e008      	b.n	800c912 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
    break;
 800c904:	e008      	b.n	800c918 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c906:	2301      	movs	r3, #1
 800c908:	73fb      	strb	r3, [r7, #15]
    break;
 800c90a:	e005      	b.n	800c918 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c90c:	2302      	movs	r3, #2
 800c90e:	73fb      	strb	r3, [r7, #15]
    break;
 800c910:	e002      	b.n	800c918 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c912:	2301      	movs	r3, #1
 800c914:	73fb      	strb	r3, [r7, #15]
    break;
 800c916:	bf00      	nop
  }
  return  speed;
 800c918:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c92e:	2300      	movs	r3, #0
 800c930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c938:	4618      	mov	r0, r3
 800c93a:	f7f7 ff02 	bl	8004742 <HAL_HCD_ResetPort>
 800c93e:	4603      	mov	r3, r0
 800c940:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c942:	7bfb      	ldrb	r3, [r7, #15]
 800c944:	4618      	mov	r0, r3
 800c946:	f000 f92f 	bl	800cba8 <USBH_Get_USB_Status>
 800c94a:	4603      	mov	r3, r0
 800c94c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c94e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c96a:	78fa      	ldrb	r2, [r7, #3]
 800c96c:	4611      	mov	r1, r2
 800c96e:	4618      	mov	r0, r3
 800c970:	f7f7 ff09 	bl	8004786 <HAL_HCD_HC_GetXferCount>
 800c974:	4603      	mov	r3, r0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c97e:	b590      	push	{r4, r7, lr}
 800c980:	b089      	sub	sp, #36	; 0x24
 800c982:	af04      	add	r7, sp, #16
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	4608      	mov	r0, r1
 800c988:	4611      	mov	r1, r2
 800c98a:	461a      	mov	r2, r3
 800c98c:	4603      	mov	r3, r0
 800c98e:	70fb      	strb	r3, [r7, #3]
 800c990:	460b      	mov	r3, r1
 800c992:	70bb      	strb	r3, [r7, #2]
 800c994:	4613      	mov	r3, r2
 800c996:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c998:	2300      	movs	r3, #0
 800c99a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c9a6:	787c      	ldrb	r4, [r7, #1]
 800c9a8:	78ba      	ldrb	r2, [r7, #2]
 800c9aa:	78f9      	ldrb	r1, [r7, #3]
 800c9ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9ae:	9302      	str	r3, [sp, #8]
 800c9b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9b4:	9301      	str	r3, [sp, #4]
 800c9b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	4623      	mov	r3, r4
 800c9be:	f7f7 fb6c 	bl	800409a <HAL_HCD_HC_Init>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 f8ed 	bl	800cba8 <USBH_Get_USB_Status>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd90      	pop	{r4, r7, pc}

0800c9dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9f6:	78fa      	ldrb	r2, [r7, #3]
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7f7 fbdc 	bl	80041b8 <HAL_HCD_HC_Halt>
 800ca00:	4603      	mov	r3, r0
 800ca02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 f8ce 	bl	800cba8 <USBH_Get_USB_Status>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ca1a:	b590      	push	{r4, r7, lr}
 800ca1c:	b089      	sub	sp, #36	; 0x24
 800ca1e:	af04      	add	r7, sp, #16
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	4608      	mov	r0, r1
 800ca24:	4611      	mov	r1, r2
 800ca26:	461a      	mov	r2, r3
 800ca28:	4603      	mov	r3, r0
 800ca2a:	70fb      	strb	r3, [r7, #3]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	70bb      	strb	r3, [r7, #2]
 800ca30:	4613      	mov	r3, r2
 800ca32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ca42:	787c      	ldrb	r4, [r7, #1]
 800ca44:	78ba      	ldrb	r2, [r7, #2]
 800ca46:	78f9      	ldrb	r1, [r7, #3]
 800ca48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca4c:	9303      	str	r3, [sp, #12]
 800ca4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca50:	9302      	str	r3, [sp, #8]
 800ca52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	4623      	mov	r3, r4
 800ca5e:	f7f7 fbcf 	bl	8004200 <HAL_HCD_HC_SubmitRequest>
 800ca62:	4603      	mov	r3, r0
 800ca64:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 f89d 	bl	800cba8 <USBH_Get_USB_Status>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd90      	pop	{r4, r7, pc}

0800ca7c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca8e:	78fa      	ldrb	r2, [r7, #3]
 800ca90:	4611      	mov	r1, r2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7f7 fe63 	bl	800475e <HAL_HCD_HC_GetURBState>
 800ca98:	4603      	mov	r3, r0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b082      	sub	sp, #8
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	460b      	mov	r3, r1
 800caac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d103      	bne.n	800cac0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cab8:	78fb      	ldrb	r3, [r7, #3]
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 f8a0 	bl	800cc00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cac0:	20c8      	movs	r0, #200	; 0xc8
 800cac2:	f7f6 fc15 	bl	80032f0 <HAL_Delay>
  return USBH_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	460b      	mov	r3, r1
 800cada:	70fb      	strb	r3, [r7, #3]
 800cadc:	4613      	mov	r3, r2
 800cade:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cae6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cae8:	78fb      	ldrb	r3, [r7, #3]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	212c      	movs	r1, #44	; 0x2c
 800caee:	fb01 f303 	mul.w	r3, r1, r3
 800caf2:	4413      	add	r3, r2
 800caf4:	333b      	adds	r3, #59	; 0x3b
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d009      	beq.n	800cb10 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cafc:	78fb      	ldrb	r3, [r7, #3]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	212c      	movs	r1, #44	; 0x2c
 800cb02:	fb01 f303 	mul.w	r3, r1, r3
 800cb06:	4413      	add	r3, r2
 800cb08:	3354      	adds	r3, #84	; 0x54
 800cb0a:	78ba      	ldrb	r2, [r7, #2]
 800cb0c:	701a      	strb	r2, [r3, #0]
 800cb0e:	e008      	b.n	800cb22 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cb10:	78fb      	ldrb	r3, [r7, #3]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	212c      	movs	r1, #44	; 0x2c
 800cb16:	fb01 f303 	mul.w	r3, r1, r3
 800cb1a:	4413      	add	r3, r2
 800cb1c:	3355      	adds	r3, #85	; 0x55
 800cb1e:	78ba      	ldrb	r2, [r7, #2]
 800cb20:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb46:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800cb48:	78fb      	ldrb	r3, [r7, #3]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	212c      	movs	r1, #44	; 0x2c
 800cb4e:	fb01 f303 	mul.w	r3, r1, r3
 800cb52:	4413      	add	r3, r2
 800cb54:	333b      	adds	r3, #59	; 0x3b
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d009      	beq.n	800cb70 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800cb5c:	78fb      	ldrb	r3, [r7, #3]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	212c      	movs	r1, #44	; 0x2c
 800cb62:	fb01 f303 	mul.w	r3, r1, r3
 800cb66:	4413      	add	r3, r2
 800cb68:	3354      	adds	r3, #84	; 0x54
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	73fb      	strb	r3, [r7, #15]
 800cb6e:	e008      	b.n	800cb82 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800cb70:	78fb      	ldrb	r3, [r7, #3]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	212c      	movs	r1, #44	; 0x2c
 800cb76:	fb01 f303 	mul.w	r3, r1, r3
 800cb7a:	4413      	add	r3, r2
 800cb7c:	3355      	adds	r3, #85	; 0x55
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7f6 fba9 	bl	80032f0 <HAL_Delay>
}
 800cb9e:	bf00      	nop
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	4603      	mov	r3, r0
 800cbb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	2b03      	cmp	r3, #3
 800cbba:	d817      	bhi.n	800cbec <USBH_Get_USB_Status+0x44>
 800cbbc:	a201      	add	r2, pc, #4	; (adr r2, 800cbc4 <USBH_Get_USB_Status+0x1c>)
 800cbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc2:	bf00      	nop
 800cbc4:	0800cbd5 	.word	0x0800cbd5
 800cbc8:	0800cbdb 	.word	0x0800cbdb
 800cbcc:	0800cbe1 	.word	0x0800cbe1
 800cbd0:	0800cbe7 	.word	0x0800cbe7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd8:	e00b      	b.n	800cbf2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cbda:	2302      	movs	r3, #2
 800cbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbde:	e008      	b.n	800cbf2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe4:	e005      	b.n	800cbf2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbea:	e002      	b.n	800cbf2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cbec:	2302      	movs	r3, #2
 800cbee:	73fb      	strb	r3, [r7, #15]
    break;
 800cbf0:	bf00      	nop
  }
  return usb_status;
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3714      	adds	r7, #20
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cc0e:	79fb      	ldrb	r3, [r7, #7]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cc14:	2300      	movs	r3, #0
 800cc16:	73fb      	strb	r3, [r7, #15]
 800cc18:	e001      	b.n	800cc1e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
 800cc20:	461a      	mov	r2, r3
 800cc22:	2101      	movs	r1, #1
 800cc24:	4803      	ldr	r0, [pc, #12]	; (800cc34 <MX_DriverVbusFS+0x34>)
 800cc26:	f7f7 f9bd 	bl	8003fa4 <HAL_GPIO_WritePin>
}
 800cc2a:	bf00      	nop
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	40020800 	.word	0x40020800

0800cc38 <__errno>:
 800cc38:	4b01      	ldr	r3, [pc, #4]	; (800cc40 <__errno+0x8>)
 800cc3a:	6818      	ldr	r0, [r3, #0]
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	200002d0 	.word	0x200002d0

0800cc44 <__libc_init_array>:
 800cc44:	b570      	push	{r4, r5, r6, lr}
 800cc46:	4d0d      	ldr	r5, [pc, #52]	; (800cc7c <__libc_init_array+0x38>)
 800cc48:	4c0d      	ldr	r4, [pc, #52]	; (800cc80 <__libc_init_array+0x3c>)
 800cc4a:	1b64      	subs	r4, r4, r5
 800cc4c:	10a4      	asrs	r4, r4, #2
 800cc4e:	2600      	movs	r6, #0
 800cc50:	42a6      	cmp	r6, r4
 800cc52:	d109      	bne.n	800cc68 <__libc_init_array+0x24>
 800cc54:	4d0b      	ldr	r5, [pc, #44]	; (800cc84 <__libc_init_array+0x40>)
 800cc56:	4c0c      	ldr	r4, [pc, #48]	; (800cc88 <__libc_init_array+0x44>)
 800cc58:	f000 fc5e 	bl	800d518 <_init>
 800cc5c:	1b64      	subs	r4, r4, r5
 800cc5e:	10a4      	asrs	r4, r4, #2
 800cc60:	2600      	movs	r6, #0
 800cc62:	42a6      	cmp	r6, r4
 800cc64:	d105      	bne.n	800cc72 <__libc_init_array+0x2e>
 800cc66:	bd70      	pop	{r4, r5, r6, pc}
 800cc68:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc6c:	4798      	blx	r3
 800cc6e:	3601      	adds	r6, #1
 800cc70:	e7ee      	b.n	800cc50 <__libc_init_array+0xc>
 800cc72:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc76:	4798      	blx	r3
 800cc78:	3601      	adds	r6, #1
 800cc7a:	e7f2      	b.n	800cc62 <__libc_init_array+0x1e>
 800cc7c:	0800d908 	.word	0x0800d908
 800cc80:	0800d908 	.word	0x0800d908
 800cc84:	0800d908 	.word	0x0800d908
 800cc88:	0800d90c 	.word	0x0800d90c

0800cc8c <malloc>:
 800cc8c:	4b02      	ldr	r3, [pc, #8]	; (800cc98 <malloc+0xc>)
 800cc8e:	4601      	mov	r1, r0
 800cc90:	6818      	ldr	r0, [r3, #0]
 800cc92:	f000 b871 	b.w	800cd78 <_malloc_r>
 800cc96:	bf00      	nop
 800cc98:	200002d0 	.word	0x200002d0

0800cc9c <free>:
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <free+0xc>)
 800cc9e:	4601      	mov	r1, r0
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	f000 b819 	b.w	800ccd8 <_free_r>
 800cca6:	bf00      	nop
 800cca8:	200002d0 	.word	0x200002d0

0800ccac <memcpy>:
 800ccac:	440a      	add	r2, r1
 800ccae:	4291      	cmp	r1, r2
 800ccb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ccb4:	d100      	bne.n	800ccb8 <memcpy+0xc>
 800ccb6:	4770      	bx	lr
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccc2:	4291      	cmp	r1, r2
 800ccc4:	d1f9      	bne.n	800ccba <memcpy+0xe>
 800ccc6:	bd10      	pop	{r4, pc}

0800ccc8 <memset>:
 800ccc8:	4402      	add	r2, r0
 800ccca:	4603      	mov	r3, r0
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d100      	bne.n	800ccd2 <memset+0xa>
 800ccd0:	4770      	bx	lr
 800ccd2:	f803 1b01 	strb.w	r1, [r3], #1
 800ccd6:	e7f9      	b.n	800cccc <memset+0x4>

0800ccd8 <_free_r>:
 800ccd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccda:	2900      	cmp	r1, #0
 800ccdc:	d048      	beq.n	800cd70 <_free_r+0x98>
 800ccde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce2:	9001      	str	r0, [sp, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f1a1 0404 	sub.w	r4, r1, #4
 800ccea:	bfb8      	it	lt
 800ccec:	18e4      	addlt	r4, r4, r3
 800ccee:	f000 f8cd 	bl	800ce8c <__malloc_lock>
 800ccf2:	4a20      	ldr	r2, [pc, #128]	; (800cd74 <_free_r+0x9c>)
 800ccf4:	9801      	ldr	r0, [sp, #4]
 800ccf6:	6813      	ldr	r3, [r2, #0]
 800ccf8:	4615      	mov	r5, r2
 800ccfa:	b933      	cbnz	r3, 800cd0a <_free_r+0x32>
 800ccfc:	6063      	str	r3, [r4, #4]
 800ccfe:	6014      	str	r4, [r2, #0]
 800cd00:	b003      	add	sp, #12
 800cd02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd06:	f000 b8c7 	b.w	800ce98 <__malloc_unlock>
 800cd0a:	42a3      	cmp	r3, r4
 800cd0c:	d90b      	bls.n	800cd26 <_free_r+0x4e>
 800cd0e:	6821      	ldr	r1, [r4, #0]
 800cd10:	1862      	adds	r2, r4, r1
 800cd12:	4293      	cmp	r3, r2
 800cd14:	bf04      	itt	eq
 800cd16:	681a      	ldreq	r2, [r3, #0]
 800cd18:	685b      	ldreq	r3, [r3, #4]
 800cd1a:	6063      	str	r3, [r4, #4]
 800cd1c:	bf04      	itt	eq
 800cd1e:	1852      	addeq	r2, r2, r1
 800cd20:	6022      	streq	r2, [r4, #0]
 800cd22:	602c      	str	r4, [r5, #0]
 800cd24:	e7ec      	b.n	800cd00 <_free_r+0x28>
 800cd26:	461a      	mov	r2, r3
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	b10b      	cbz	r3, 800cd30 <_free_r+0x58>
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	d9fa      	bls.n	800cd26 <_free_r+0x4e>
 800cd30:	6811      	ldr	r1, [r2, #0]
 800cd32:	1855      	adds	r5, r2, r1
 800cd34:	42a5      	cmp	r5, r4
 800cd36:	d10b      	bne.n	800cd50 <_free_r+0x78>
 800cd38:	6824      	ldr	r4, [r4, #0]
 800cd3a:	4421      	add	r1, r4
 800cd3c:	1854      	adds	r4, r2, r1
 800cd3e:	42a3      	cmp	r3, r4
 800cd40:	6011      	str	r1, [r2, #0]
 800cd42:	d1dd      	bne.n	800cd00 <_free_r+0x28>
 800cd44:	681c      	ldr	r4, [r3, #0]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	6053      	str	r3, [r2, #4]
 800cd4a:	4421      	add	r1, r4
 800cd4c:	6011      	str	r1, [r2, #0]
 800cd4e:	e7d7      	b.n	800cd00 <_free_r+0x28>
 800cd50:	d902      	bls.n	800cd58 <_free_r+0x80>
 800cd52:	230c      	movs	r3, #12
 800cd54:	6003      	str	r3, [r0, #0]
 800cd56:	e7d3      	b.n	800cd00 <_free_r+0x28>
 800cd58:	6825      	ldr	r5, [r4, #0]
 800cd5a:	1961      	adds	r1, r4, r5
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	bf04      	itt	eq
 800cd60:	6819      	ldreq	r1, [r3, #0]
 800cd62:	685b      	ldreq	r3, [r3, #4]
 800cd64:	6063      	str	r3, [r4, #4]
 800cd66:	bf04      	itt	eq
 800cd68:	1949      	addeq	r1, r1, r5
 800cd6a:	6021      	streq	r1, [r4, #0]
 800cd6c:	6054      	str	r4, [r2, #4]
 800cd6e:	e7c7      	b.n	800cd00 <_free_r+0x28>
 800cd70:	b003      	add	sp, #12
 800cd72:	bd30      	pop	{r4, r5, pc}
 800cd74:	200003d0 	.word	0x200003d0

0800cd78 <_malloc_r>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	1ccd      	adds	r5, r1, #3
 800cd7c:	f025 0503 	bic.w	r5, r5, #3
 800cd80:	3508      	adds	r5, #8
 800cd82:	2d0c      	cmp	r5, #12
 800cd84:	bf38      	it	cc
 800cd86:	250c      	movcc	r5, #12
 800cd88:	2d00      	cmp	r5, #0
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	db01      	blt.n	800cd92 <_malloc_r+0x1a>
 800cd8e:	42a9      	cmp	r1, r5
 800cd90:	d903      	bls.n	800cd9a <_malloc_r+0x22>
 800cd92:	230c      	movs	r3, #12
 800cd94:	6033      	str	r3, [r6, #0]
 800cd96:	2000      	movs	r0, #0
 800cd98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd9a:	f000 f877 	bl	800ce8c <__malloc_lock>
 800cd9e:	4921      	ldr	r1, [pc, #132]	; (800ce24 <_malloc_r+0xac>)
 800cda0:	680a      	ldr	r2, [r1, #0]
 800cda2:	4614      	mov	r4, r2
 800cda4:	b99c      	cbnz	r4, 800cdce <_malloc_r+0x56>
 800cda6:	4f20      	ldr	r7, [pc, #128]	; (800ce28 <_malloc_r+0xb0>)
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	b923      	cbnz	r3, 800cdb6 <_malloc_r+0x3e>
 800cdac:	4621      	mov	r1, r4
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f000 f83c 	bl	800ce2c <_sbrk_r>
 800cdb4:	6038      	str	r0, [r7, #0]
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f000 f837 	bl	800ce2c <_sbrk_r>
 800cdbe:	1c43      	adds	r3, r0, #1
 800cdc0:	d123      	bne.n	800ce0a <_malloc_r+0x92>
 800cdc2:	230c      	movs	r3, #12
 800cdc4:	6033      	str	r3, [r6, #0]
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f000 f866 	bl	800ce98 <__malloc_unlock>
 800cdcc:	e7e3      	b.n	800cd96 <_malloc_r+0x1e>
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	1b5b      	subs	r3, r3, r5
 800cdd2:	d417      	bmi.n	800ce04 <_malloc_r+0x8c>
 800cdd4:	2b0b      	cmp	r3, #11
 800cdd6:	d903      	bls.n	800cde0 <_malloc_r+0x68>
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	441c      	add	r4, r3
 800cddc:	6025      	str	r5, [r4, #0]
 800cdde:	e004      	b.n	800cdea <_malloc_r+0x72>
 800cde0:	6863      	ldr	r3, [r4, #4]
 800cde2:	42a2      	cmp	r2, r4
 800cde4:	bf0c      	ite	eq
 800cde6:	600b      	streq	r3, [r1, #0]
 800cde8:	6053      	strne	r3, [r2, #4]
 800cdea:	4630      	mov	r0, r6
 800cdec:	f000 f854 	bl	800ce98 <__malloc_unlock>
 800cdf0:	f104 000b 	add.w	r0, r4, #11
 800cdf4:	1d23      	adds	r3, r4, #4
 800cdf6:	f020 0007 	bic.w	r0, r0, #7
 800cdfa:	1ac2      	subs	r2, r0, r3
 800cdfc:	d0cc      	beq.n	800cd98 <_malloc_r+0x20>
 800cdfe:	1a1b      	subs	r3, r3, r0
 800ce00:	50a3      	str	r3, [r4, r2]
 800ce02:	e7c9      	b.n	800cd98 <_malloc_r+0x20>
 800ce04:	4622      	mov	r2, r4
 800ce06:	6864      	ldr	r4, [r4, #4]
 800ce08:	e7cc      	b.n	800cda4 <_malloc_r+0x2c>
 800ce0a:	1cc4      	adds	r4, r0, #3
 800ce0c:	f024 0403 	bic.w	r4, r4, #3
 800ce10:	42a0      	cmp	r0, r4
 800ce12:	d0e3      	beq.n	800cddc <_malloc_r+0x64>
 800ce14:	1a21      	subs	r1, r4, r0
 800ce16:	4630      	mov	r0, r6
 800ce18:	f000 f808 	bl	800ce2c <_sbrk_r>
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d1dd      	bne.n	800cddc <_malloc_r+0x64>
 800ce20:	e7cf      	b.n	800cdc2 <_malloc_r+0x4a>
 800ce22:	bf00      	nop
 800ce24:	200003d0 	.word	0x200003d0
 800ce28:	200003d4 	.word	0x200003d4

0800ce2c <_sbrk_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d06      	ldr	r5, [pc, #24]	; (800ce48 <_sbrk_r+0x1c>)
 800ce30:	2300      	movs	r3, #0
 800ce32:	4604      	mov	r4, r0
 800ce34:	4608      	mov	r0, r1
 800ce36:	602b      	str	r3, [r5, #0]
 800ce38:	f7f6 f976 	bl	8003128 <_sbrk>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d102      	bne.n	800ce46 <_sbrk_r+0x1a>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	b103      	cbz	r3, 800ce46 <_sbrk_r+0x1a>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	20005b20 	.word	0x20005b20

0800ce4c <siprintf>:
 800ce4c:	b40e      	push	{r1, r2, r3}
 800ce4e:	b500      	push	{lr}
 800ce50:	b09c      	sub	sp, #112	; 0x70
 800ce52:	ab1d      	add	r3, sp, #116	; 0x74
 800ce54:	9002      	str	r0, [sp, #8]
 800ce56:	9006      	str	r0, [sp, #24]
 800ce58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce5c:	4809      	ldr	r0, [pc, #36]	; (800ce84 <siprintf+0x38>)
 800ce5e:	9107      	str	r1, [sp, #28]
 800ce60:	9104      	str	r1, [sp, #16]
 800ce62:	4909      	ldr	r1, [pc, #36]	; (800ce88 <siprintf+0x3c>)
 800ce64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce68:	9105      	str	r1, [sp, #20]
 800ce6a:	6800      	ldr	r0, [r0, #0]
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	a902      	add	r1, sp, #8
 800ce70:	f000 f874 	bl	800cf5c <_svfiprintf_r>
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	b01c      	add	sp, #112	; 0x70
 800ce7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce80:	b003      	add	sp, #12
 800ce82:	4770      	bx	lr
 800ce84:	200002d0 	.word	0x200002d0
 800ce88:	ffff0208 	.word	0xffff0208

0800ce8c <__malloc_lock>:
 800ce8c:	4801      	ldr	r0, [pc, #4]	; (800ce94 <__malloc_lock+0x8>)
 800ce8e:	f000 baf9 	b.w	800d484 <__retarget_lock_acquire_recursive>
 800ce92:	bf00      	nop
 800ce94:	20005b28 	.word	0x20005b28

0800ce98 <__malloc_unlock>:
 800ce98:	4801      	ldr	r0, [pc, #4]	; (800cea0 <__malloc_unlock+0x8>)
 800ce9a:	f000 baf4 	b.w	800d486 <__retarget_lock_release_recursive>
 800ce9e:	bf00      	nop
 800cea0:	20005b28 	.word	0x20005b28

0800cea4 <__ssputs_r>:
 800cea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea8:	688e      	ldr	r6, [r1, #8]
 800ceaa:	429e      	cmp	r6, r3
 800ceac:	4682      	mov	sl, r0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	4690      	mov	r8, r2
 800ceb2:	461f      	mov	r7, r3
 800ceb4:	d838      	bhi.n	800cf28 <__ssputs_r+0x84>
 800ceb6:	898a      	ldrh	r2, [r1, #12]
 800ceb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cebc:	d032      	beq.n	800cf24 <__ssputs_r+0x80>
 800cebe:	6825      	ldr	r5, [r4, #0]
 800cec0:	6909      	ldr	r1, [r1, #16]
 800cec2:	eba5 0901 	sub.w	r9, r5, r1
 800cec6:	6965      	ldr	r5, [r4, #20]
 800cec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cecc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ced0:	3301      	adds	r3, #1
 800ced2:	444b      	add	r3, r9
 800ced4:	106d      	asrs	r5, r5, #1
 800ced6:	429d      	cmp	r5, r3
 800ced8:	bf38      	it	cc
 800ceda:	461d      	movcc	r5, r3
 800cedc:	0553      	lsls	r3, r2, #21
 800cede:	d531      	bpl.n	800cf44 <__ssputs_r+0xa0>
 800cee0:	4629      	mov	r1, r5
 800cee2:	f7ff ff49 	bl	800cd78 <_malloc_r>
 800cee6:	4606      	mov	r6, r0
 800cee8:	b950      	cbnz	r0, 800cf00 <__ssputs_r+0x5c>
 800ceea:	230c      	movs	r3, #12
 800ceec:	f8ca 3000 	str.w	r3, [sl]
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cef6:	81a3      	strh	r3, [r4, #12]
 800cef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf00:	6921      	ldr	r1, [r4, #16]
 800cf02:	464a      	mov	r2, r9
 800cf04:	f7ff fed2 	bl	800ccac <memcpy>
 800cf08:	89a3      	ldrh	r3, [r4, #12]
 800cf0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf12:	81a3      	strh	r3, [r4, #12]
 800cf14:	6126      	str	r6, [r4, #16]
 800cf16:	6165      	str	r5, [r4, #20]
 800cf18:	444e      	add	r6, r9
 800cf1a:	eba5 0509 	sub.w	r5, r5, r9
 800cf1e:	6026      	str	r6, [r4, #0]
 800cf20:	60a5      	str	r5, [r4, #8]
 800cf22:	463e      	mov	r6, r7
 800cf24:	42be      	cmp	r6, r7
 800cf26:	d900      	bls.n	800cf2a <__ssputs_r+0x86>
 800cf28:	463e      	mov	r6, r7
 800cf2a:	4632      	mov	r2, r6
 800cf2c:	6820      	ldr	r0, [r4, #0]
 800cf2e:	4641      	mov	r1, r8
 800cf30:	f000 faaa 	bl	800d488 <memmove>
 800cf34:	68a3      	ldr	r3, [r4, #8]
 800cf36:	6822      	ldr	r2, [r4, #0]
 800cf38:	1b9b      	subs	r3, r3, r6
 800cf3a:	4432      	add	r2, r6
 800cf3c:	60a3      	str	r3, [r4, #8]
 800cf3e:	6022      	str	r2, [r4, #0]
 800cf40:	2000      	movs	r0, #0
 800cf42:	e7db      	b.n	800cefc <__ssputs_r+0x58>
 800cf44:	462a      	mov	r2, r5
 800cf46:	f000 fab9 	bl	800d4bc <_realloc_r>
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d1e1      	bne.n	800cf14 <__ssputs_r+0x70>
 800cf50:	6921      	ldr	r1, [r4, #16]
 800cf52:	4650      	mov	r0, sl
 800cf54:	f7ff fec0 	bl	800ccd8 <_free_r>
 800cf58:	e7c7      	b.n	800ceea <__ssputs_r+0x46>
	...

0800cf5c <_svfiprintf_r>:
 800cf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf60:	4698      	mov	r8, r3
 800cf62:	898b      	ldrh	r3, [r1, #12]
 800cf64:	061b      	lsls	r3, r3, #24
 800cf66:	b09d      	sub	sp, #116	; 0x74
 800cf68:	4607      	mov	r7, r0
 800cf6a:	460d      	mov	r5, r1
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	d50e      	bpl.n	800cf8e <_svfiprintf_r+0x32>
 800cf70:	690b      	ldr	r3, [r1, #16]
 800cf72:	b963      	cbnz	r3, 800cf8e <_svfiprintf_r+0x32>
 800cf74:	2140      	movs	r1, #64	; 0x40
 800cf76:	f7ff feff 	bl	800cd78 <_malloc_r>
 800cf7a:	6028      	str	r0, [r5, #0]
 800cf7c:	6128      	str	r0, [r5, #16]
 800cf7e:	b920      	cbnz	r0, 800cf8a <_svfiprintf_r+0x2e>
 800cf80:	230c      	movs	r3, #12
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf88:	e0d1      	b.n	800d12e <_svfiprintf_r+0x1d2>
 800cf8a:	2340      	movs	r3, #64	; 0x40
 800cf8c:	616b      	str	r3, [r5, #20]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9309      	str	r3, [sp, #36]	; 0x24
 800cf92:	2320      	movs	r3, #32
 800cf94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf98:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf9c:	2330      	movs	r3, #48	; 0x30
 800cf9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d148 <_svfiprintf_r+0x1ec>
 800cfa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfa6:	f04f 0901 	mov.w	r9, #1
 800cfaa:	4623      	mov	r3, r4
 800cfac:	469a      	mov	sl, r3
 800cfae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfb2:	b10a      	cbz	r2, 800cfb8 <_svfiprintf_r+0x5c>
 800cfb4:	2a25      	cmp	r2, #37	; 0x25
 800cfb6:	d1f9      	bne.n	800cfac <_svfiprintf_r+0x50>
 800cfb8:	ebba 0b04 	subs.w	fp, sl, r4
 800cfbc:	d00b      	beq.n	800cfd6 <_svfiprintf_r+0x7a>
 800cfbe:	465b      	mov	r3, fp
 800cfc0:	4622      	mov	r2, r4
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	4638      	mov	r0, r7
 800cfc6:	f7ff ff6d 	bl	800cea4 <__ssputs_r>
 800cfca:	3001      	adds	r0, #1
 800cfcc:	f000 80aa 	beq.w	800d124 <_svfiprintf_r+0x1c8>
 800cfd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfd2:	445a      	add	r2, fp
 800cfd4:	9209      	str	r2, [sp, #36]	; 0x24
 800cfd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f000 80a2 	beq.w	800d124 <_svfiprintf_r+0x1c8>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfea:	f10a 0a01 	add.w	sl, sl, #1
 800cfee:	9304      	str	r3, [sp, #16]
 800cff0:	9307      	str	r3, [sp, #28]
 800cff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cff6:	931a      	str	r3, [sp, #104]	; 0x68
 800cff8:	4654      	mov	r4, sl
 800cffa:	2205      	movs	r2, #5
 800cffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d000:	4851      	ldr	r0, [pc, #324]	; (800d148 <_svfiprintf_r+0x1ec>)
 800d002:	f7f3 f8e5 	bl	80001d0 <memchr>
 800d006:	9a04      	ldr	r2, [sp, #16]
 800d008:	b9d8      	cbnz	r0, 800d042 <_svfiprintf_r+0xe6>
 800d00a:	06d0      	lsls	r0, r2, #27
 800d00c:	bf44      	itt	mi
 800d00e:	2320      	movmi	r3, #32
 800d010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d014:	0711      	lsls	r1, r2, #28
 800d016:	bf44      	itt	mi
 800d018:	232b      	movmi	r3, #43	; 0x2b
 800d01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d01e:	f89a 3000 	ldrb.w	r3, [sl]
 800d022:	2b2a      	cmp	r3, #42	; 0x2a
 800d024:	d015      	beq.n	800d052 <_svfiprintf_r+0xf6>
 800d026:	9a07      	ldr	r2, [sp, #28]
 800d028:	4654      	mov	r4, sl
 800d02a:	2000      	movs	r0, #0
 800d02c:	f04f 0c0a 	mov.w	ip, #10
 800d030:	4621      	mov	r1, r4
 800d032:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d036:	3b30      	subs	r3, #48	; 0x30
 800d038:	2b09      	cmp	r3, #9
 800d03a:	d94e      	bls.n	800d0da <_svfiprintf_r+0x17e>
 800d03c:	b1b0      	cbz	r0, 800d06c <_svfiprintf_r+0x110>
 800d03e:	9207      	str	r2, [sp, #28]
 800d040:	e014      	b.n	800d06c <_svfiprintf_r+0x110>
 800d042:	eba0 0308 	sub.w	r3, r0, r8
 800d046:	fa09 f303 	lsl.w	r3, r9, r3
 800d04a:	4313      	orrs	r3, r2
 800d04c:	9304      	str	r3, [sp, #16]
 800d04e:	46a2      	mov	sl, r4
 800d050:	e7d2      	b.n	800cff8 <_svfiprintf_r+0x9c>
 800d052:	9b03      	ldr	r3, [sp, #12]
 800d054:	1d19      	adds	r1, r3, #4
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	9103      	str	r1, [sp, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bfbb      	ittet	lt
 800d05e:	425b      	neglt	r3, r3
 800d060:	f042 0202 	orrlt.w	r2, r2, #2
 800d064:	9307      	strge	r3, [sp, #28]
 800d066:	9307      	strlt	r3, [sp, #28]
 800d068:	bfb8      	it	lt
 800d06a:	9204      	strlt	r2, [sp, #16]
 800d06c:	7823      	ldrb	r3, [r4, #0]
 800d06e:	2b2e      	cmp	r3, #46	; 0x2e
 800d070:	d10c      	bne.n	800d08c <_svfiprintf_r+0x130>
 800d072:	7863      	ldrb	r3, [r4, #1]
 800d074:	2b2a      	cmp	r3, #42	; 0x2a
 800d076:	d135      	bne.n	800d0e4 <_svfiprintf_r+0x188>
 800d078:	9b03      	ldr	r3, [sp, #12]
 800d07a:	1d1a      	adds	r2, r3, #4
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	9203      	str	r2, [sp, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	bfb8      	it	lt
 800d084:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d088:	3402      	adds	r4, #2
 800d08a:	9305      	str	r3, [sp, #20]
 800d08c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d158 <_svfiprintf_r+0x1fc>
 800d090:	7821      	ldrb	r1, [r4, #0]
 800d092:	2203      	movs	r2, #3
 800d094:	4650      	mov	r0, sl
 800d096:	f7f3 f89b 	bl	80001d0 <memchr>
 800d09a:	b140      	cbz	r0, 800d0ae <_svfiprintf_r+0x152>
 800d09c:	2340      	movs	r3, #64	; 0x40
 800d09e:	eba0 000a 	sub.w	r0, r0, sl
 800d0a2:	fa03 f000 	lsl.w	r0, r3, r0
 800d0a6:	9b04      	ldr	r3, [sp, #16]
 800d0a8:	4303      	orrs	r3, r0
 800d0aa:	3401      	adds	r4, #1
 800d0ac:	9304      	str	r3, [sp, #16]
 800d0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b2:	4826      	ldr	r0, [pc, #152]	; (800d14c <_svfiprintf_r+0x1f0>)
 800d0b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0b8:	2206      	movs	r2, #6
 800d0ba:	f7f3 f889 	bl	80001d0 <memchr>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d038      	beq.n	800d134 <_svfiprintf_r+0x1d8>
 800d0c2:	4b23      	ldr	r3, [pc, #140]	; (800d150 <_svfiprintf_r+0x1f4>)
 800d0c4:	bb1b      	cbnz	r3, 800d10e <_svfiprintf_r+0x1b2>
 800d0c6:	9b03      	ldr	r3, [sp, #12]
 800d0c8:	3307      	adds	r3, #7
 800d0ca:	f023 0307 	bic.w	r3, r3, #7
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	9303      	str	r3, [sp, #12]
 800d0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d4:	4433      	add	r3, r6
 800d0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d8:	e767      	b.n	800cfaa <_svfiprintf_r+0x4e>
 800d0da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0de:	460c      	mov	r4, r1
 800d0e0:	2001      	movs	r0, #1
 800d0e2:	e7a5      	b.n	800d030 <_svfiprintf_r+0xd4>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	3401      	adds	r4, #1
 800d0e8:	9305      	str	r3, [sp, #20]
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	f04f 0c0a 	mov.w	ip, #10
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0f6:	3a30      	subs	r2, #48	; 0x30
 800d0f8:	2a09      	cmp	r2, #9
 800d0fa:	d903      	bls.n	800d104 <_svfiprintf_r+0x1a8>
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0c5      	beq.n	800d08c <_svfiprintf_r+0x130>
 800d100:	9105      	str	r1, [sp, #20]
 800d102:	e7c3      	b.n	800d08c <_svfiprintf_r+0x130>
 800d104:	fb0c 2101 	mla	r1, ip, r1, r2
 800d108:	4604      	mov	r4, r0
 800d10a:	2301      	movs	r3, #1
 800d10c:	e7f0      	b.n	800d0f0 <_svfiprintf_r+0x194>
 800d10e:	ab03      	add	r3, sp, #12
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	462a      	mov	r2, r5
 800d114:	4b0f      	ldr	r3, [pc, #60]	; (800d154 <_svfiprintf_r+0x1f8>)
 800d116:	a904      	add	r1, sp, #16
 800d118:	4638      	mov	r0, r7
 800d11a:	f3af 8000 	nop.w
 800d11e:	1c42      	adds	r2, r0, #1
 800d120:	4606      	mov	r6, r0
 800d122:	d1d6      	bne.n	800d0d2 <_svfiprintf_r+0x176>
 800d124:	89ab      	ldrh	r3, [r5, #12]
 800d126:	065b      	lsls	r3, r3, #25
 800d128:	f53f af2c 	bmi.w	800cf84 <_svfiprintf_r+0x28>
 800d12c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d12e:	b01d      	add	sp, #116	; 0x74
 800d130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d134:	ab03      	add	r3, sp, #12
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	462a      	mov	r2, r5
 800d13a:	4b06      	ldr	r3, [pc, #24]	; (800d154 <_svfiprintf_r+0x1f8>)
 800d13c:	a904      	add	r1, sp, #16
 800d13e:	4638      	mov	r0, r7
 800d140:	f000 f87a 	bl	800d238 <_printf_i>
 800d144:	e7eb      	b.n	800d11e <_svfiprintf_r+0x1c2>
 800d146:	bf00      	nop
 800d148:	0800d8cc 	.word	0x0800d8cc
 800d14c:	0800d8d6 	.word	0x0800d8d6
 800d150:	00000000 	.word	0x00000000
 800d154:	0800cea5 	.word	0x0800cea5
 800d158:	0800d8d2 	.word	0x0800d8d2

0800d15c <_printf_common>:
 800d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	4616      	mov	r6, r2
 800d162:	4699      	mov	r9, r3
 800d164:	688a      	ldr	r2, [r1, #8]
 800d166:	690b      	ldr	r3, [r1, #16]
 800d168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d16c:	4293      	cmp	r3, r2
 800d16e:	bfb8      	it	lt
 800d170:	4613      	movlt	r3, r2
 800d172:	6033      	str	r3, [r6, #0]
 800d174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d178:	4607      	mov	r7, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	b10a      	cbz	r2, 800d182 <_printf_common+0x26>
 800d17e:	3301      	adds	r3, #1
 800d180:	6033      	str	r3, [r6, #0]
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	0699      	lsls	r1, r3, #26
 800d186:	bf42      	ittt	mi
 800d188:	6833      	ldrmi	r3, [r6, #0]
 800d18a:	3302      	addmi	r3, #2
 800d18c:	6033      	strmi	r3, [r6, #0]
 800d18e:	6825      	ldr	r5, [r4, #0]
 800d190:	f015 0506 	ands.w	r5, r5, #6
 800d194:	d106      	bne.n	800d1a4 <_printf_common+0x48>
 800d196:	f104 0a19 	add.w	sl, r4, #25
 800d19a:	68e3      	ldr	r3, [r4, #12]
 800d19c:	6832      	ldr	r2, [r6, #0]
 800d19e:	1a9b      	subs	r3, r3, r2
 800d1a0:	42ab      	cmp	r3, r5
 800d1a2:	dc26      	bgt.n	800d1f2 <_printf_common+0x96>
 800d1a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1a8:	1e13      	subs	r3, r2, #0
 800d1aa:	6822      	ldr	r2, [r4, #0]
 800d1ac:	bf18      	it	ne
 800d1ae:	2301      	movne	r3, #1
 800d1b0:	0692      	lsls	r2, r2, #26
 800d1b2:	d42b      	bmi.n	800d20c <_printf_common+0xb0>
 800d1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	47c0      	blx	r8
 800d1be:	3001      	adds	r0, #1
 800d1c0:	d01e      	beq.n	800d200 <_printf_common+0xa4>
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	68e5      	ldr	r5, [r4, #12]
 800d1c6:	6832      	ldr	r2, [r6, #0]
 800d1c8:	f003 0306 	and.w	r3, r3, #6
 800d1cc:	2b04      	cmp	r3, #4
 800d1ce:	bf08      	it	eq
 800d1d0:	1aad      	subeq	r5, r5, r2
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	6922      	ldr	r2, [r4, #16]
 800d1d6:	bf0c      	ite	eq
 800d1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1dc:	2500      	movne	r5, #0
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	bfc4      	itt	gt
 800d1e2:	1a9b      	subgt	r3, r3, r2
 800d1e4:	18ed      	addgt	r5, r5, r3
 800d1e6:	2600      	movs	r6, #0
 800d1e8:	341a      	adds	r4, #26
 800d1ea:	42b5      	cmp	r5, r6
 800d1ec:	d11a      	bne.n	800d224 <_printf_common+0xc8>
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	e008      	b.n	800d204 <_printf_common+0xa8>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4652      	mov	r2, sl
 800d1f6:	4649      	mov	r1, r9
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	47c0      	blx	r8
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	d103      	bne.n	800d208 <_printf_common+0xac>
 800d200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d208:	3501      	adds	r5, #1
 800d20a:	e7c6      	b.n	800d19a <_printf_common+0x3e>
 800d20c:	18e1      	adds	r1, r4, r3
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	2030      	movs	r0, #48	; 0x30
 800d212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d216:	4422      	add	r2, r4
 800d218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d220:	3302      	adds	r3, #2
 800d222:	e7c7      	b.n	800d1b4 <_printf_common+0x58>
 800d224:	2301      	movs	r3, #1
 800d226:	4622      	mov	r2, r4
 800d228:	4649      	mov	r1, r9
 800d22a:	4638      	mov	r0, r7
 800d22c:	47c0      	blx	r8
 800d22e:	3001      	adds	r0, #1
 800d230:	d0e6      	beq.n	800d200 <_printf_common+0xa4>
 800d232:	3601      	adds	r6, #1
 800d234:	e7d9      	b.n	800d1ea <_printf_common+0x8e>
	...

0800d238 <_printf_i>:
 800d238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d23c:	460c      	mov	r4, r1
 800d23e:	4691      	mov	r9, r2
 800d240:	7e27      	ldrb	r7, [r4, #24]
 800d242:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d244:	2f78      	cmp	r7, #120	; 0x78
 800d246:	4680      	mov	r8, r0
 800d248:	469a      	mov	sl, r3
 800d24a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d24e:	d807      	bhi.n	800d260 <_printf_i+0x28>
 800d250:	2f62      	cmp	r7, #98	; 0x62
 800d252:	d80a      	bhi.n	800d26a <_printf_i+0x32>
 800d254:	2f00      	cmp	r7, #0
 800d256:	f000 80d8 	beq.w	800d40a <_printf_i+0x1d2>
 800d25a:	2f58      	cmp	r7, #88	; 0x58
 800d25c:	f000 80a3 	beq.w	800d3a6 <_printf_i+0x16e>
 800d260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d268:	e03a      	b.n	800d2e0 <_printf_i+0xa8>
 800d26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d26e:	2b15      	cmp	r3, #21
 800d270:	d8f6      	bhi.n	800d260 <_printf_i+0x28>
 800d272:	a001      	add	r0, pc, #4	; (adr r0, 800d278 <_printf_i+0x40>)
 800d274:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d278:	0800d2d1 	.word	0x0800d2d1
 800d27c:	0800d2e5 	.word	0x0800d2e5
 800d280:	0800d261 	.word	0x0800d261
 800d284:	0800d261 	.word	0x0800d261
 800d288:	0800d261 	.word	0x0800d261
 800d28c:	0800d261 	.word	0x0800d261
 800d290:	0800d2e5 	.word	0x0800d2e5
 800d294:	0800d261 	.word	0x0800d261
 800d298:	0800d261 	.word	0x0800d261
 800d29c:	0800d261 	.word	0x0800d261
 800d2a0:	0800d261 	.word	0x0800d261
 800d2a4:	0800d3f1 	.word	0x0800d3f1
 800d2a8:	0800d315 	.word	0x0800d315
 800d2ac:	0800d3d3 	.word	0x0800d3d3
 800d2b0:	0800d261 	.word	0x0800d261
 800d2b4:	0800d261 	.word	0x0800d261
 800d2b8:	0800d413 	.word	0x0800d413
 800d2bc:	0800d261 	.word	0x0800d261
 800d2c0:	0800d315 	.word	0x0800d315
 800d2c4:	0800d261 	.word	0x0800d261
 800d2c8:	0800d261 	.word	0x0800d261
 800d2cc:	0800d3db 	.word	0x0800d3db
 800d2d0:	680b      	ldr	r3, [r1, #0]
 800d2d2:	1d1a      	adds	r2, r3, #4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	600a      	str	r2, [r1, #0]
 800d2d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e0a3      	b.n	800d42c <_printf_i+0x1f4>
 800d2e4:	6825      	ldr	r5, [r4, #0]
 800d2e6:	6808      	ldr	r0, [r1, #0]
 800d2e8:	062e      	lsls	r6, r5, #24
 800d2ea:	f100 0304 	add.w	r3, r0, #4
 800d2ee:	d50a      	bpl.n	800d306 <_printf_i+0xce>
 800d2f0:	6805      	ldr	r5, [r0, #0]
 800d2f2:	600b      	str	r3, [r1, #0]
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	da03      	bge.n	800d300 <_printf_i+0xc8>
 800d2f8:	232d      	movs	r3, #45	; 0x2d
 800d2fa:	426d      	negs	r5, r5
 800d2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d300:	485e      	ldr	r0, [pc, #376]	; (800d47c <_printf_i+0x244>)
 800d302:	230a      	movs	r3, #10
 800d304:	e019      	b.n	800d33a <_printf_i+0x102>
 800d306:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d30a:	6805      	ldr	r5, [r0, #0]
 800d30c:	600b      	str	r3, [r1, #0]
 800d30e:	bf18      	it	ne
 800d310:	b22d      	sxthne	r5, r5
 800d312:	e7ef      	b.n	800d2f4 <_printf_i+0xbc>
 800d314:	680b      	ldr	r3, [r1, #0]
 800d316:	6825      	ldr	r5, [r4, #0]
 800d318:	1d18      	adds	r0, r3, #4
 800d31a:	6008      	str	r0, [r1, #0]
 800d31c:	0628      	lsls	r0, r5, #24
 800d31e:	d501      	bpl.n	800d324 <_printf_i+0xec>
 800d320:	681d      	ldr	r5, [r3, #0]
 800d322:	e002      	b.n	800d32a <_printf_i+0xf2>
 800d324:	0669      	lsls	r1, r5, #25
 800d326:	d5fb      	bpl.n	800d320 <_printf_i+0xe8>
 800d328:	881d      	ldrh	r5, [r3, #0]
 800d32a:	4854      	ldr	r0, [pc, #336]	; (800d47c <_printf_i+0x244>)
 800d32c:	2f6f      	cmp	r7, #111	; 0x6f
 800d32e:	bf0c      	ite	eq
 800d330:	2308      	moveq	r3, #8
 800d332:	230a      	movne	r3, #10
 800d334:	2100      	movs	r1, #0
 800d336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d33a:	6866      	ldr	r6, [r4, #4]
 800d33c:	60a6      	str	r6, [r4, #8]
 800d33e:	2e00      	cmp	r6, #0
 800d340:	bfa2      	ittt	ge
 800d342:	6821      	ldrge	r1, [r4, #0]
 800d344:	f021 0104 	bicge.w	r1, r1, #4
 800d348:	6021      	strge	r1, [r4, #0]
 800d34a:	b90d      	cbnz	r5, 800d350 <_printf_i+0x118>
 800d34c:	2e00      	cmp	r6, #0
 800d34e:	d04d      	beq.n	800d3ec <_printf_i+0x1b4>
 800d350:	4616      	mov	r6, r2
 800d352:	fbb5 f1f3 	udiv	r1, r5, r3
 800d356:	fb03 5711 	mls	r7, r3, r1, r5
 800d35a:	5dc7      	ldrb	r7, [r0, r7]
 800d35c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d360:	462f      	mov	r7, r5
 800d362:	42bb      	cmp	r3, r7
 800d364:	460d      	mov	r5, r1
 800d366:	d9f4      	bls.n	800d352 <_printf_i+0x11a>
 800d368:	2b08      	cmp	r3, #8
 800d36a:	d10b      	bne.n	800d384 <_printf_i+0x14c>
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	07df      	lsls	r7, r3, #31
 800d370:	d508      	bpl.n	800d384 <_printf_i+0x14c>
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	6861      	ldr	r1, [r4, #4]
 800d376:	4299      	cmp	r1, r3
 800d378:	bfde      	ittt	le
 800d37a:	2330      	movle	r3, #48	; 0x30
 800d37c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d380:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d384:	1b92      	subs	r2, r2, r6
 800d386:	6122      	str	r2, [r4, #16]
 800d388:	f8cd a000 	str.w	sl, [sp]
 800d38c:	464b      	mov	r3, r9
 800d38e:	aa03      	add	r2, sp, #12
 800d390:	4621      	mov	r1, r4
 800d392:	4640      	mov	r0, r8
 800d394:	f7ff fee2 	bl	800d15c <_printf_common>
 800d398:	3001      	adds	r0, #1
 800d39a:	d14c      	bne.n	800d436 <_printf_i+0x1fe>
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3a0:	b004      	add	sp, #16
 800d3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a6:	4835      	ldr	r0, [pc, #212]	; (800d47c <_printf_i+0x244>)
 800d3a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	680e      	ldr	r6, [r1, #0]
 800d3b0:	061f      	lsls	r7, r3, #24
 800d3b2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d3b6:	600e      	str	r6, [r1, #0]
 800d3b8:	d514      	bpl.n	800d3e4 <_printf_i+0x1ac>
 800d3ba:	07d9      	lsls	r1, r3, #31
 800d3bc:	bf44      	itt	mi
 800d3be:	f043 0320 	orrmi.w	r3, r3, #32
 800d3c2:	6023      	strmi	r3, [r4, #0]
 800d3c4:	b91d      	cbnz	r5, 800d3ce <_printf_i+0x196>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	f023 0320 	bic.w	r3, r3, #32
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	2310      	movs	r3, #16
 800d3d0:	e7b0      	b.n	800d334 <_printf_i+0xfc>
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	f043 0320 	orr.w	r3, r3, #32
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	2378      	movs	r3, #120	; 0x78
 800d3dc:	4828      	ldr	r0, [pc, #160]	; (800d480 <_printf_i+0x248>)
 800d3de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3e2:	e7e3      	b.n	800d3ac <_printf_i+0x174>
 800d3e4:	065e      	lsls	r6, r3, #25
 800d3e6:	bf48      	it	mi
 800d3e8:	b2ad      	uxthmi	r5, r5
 800d3ea:	e7e6      	b.n	800d3ba <_printf_i+0x182>
 800d3ec:	4616      	mov	r6, r2
 800d3ee:	e7bb      	b.n	800d368 <_printf_i+0x130>
 800d3f0:	680b      	ldr	r3, [r1, #0]
 800d3f2:	6826      	ldr	r6, [r4, #0]
 800d3f4:	6960      	ldr	r0, [r4, #20]
 800d3f6:	1d1d      	adds	r5, r3, #4
 800d3f8:	600d      	str	r5, [r1, #0]
 800d3fa:	0635      	lsls	r5, r6, #24
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	d501      	bpl.n	800d404 <_printf_i+0x1cc>
 800d400:	6018      	str	r0, [r3, #0]
 800d402:	e002      	b.n	800d40a <_printf_i+0x1d2>
 800d404:	0671      	lsls	r1, r6, #25
 800d406:	d5fb      	bpl.n	800d400 <_printf_i+0x1c8>
 800d408:	8018      	strh	r0, [r3, #0]
 800d40a:	2300      	movs	r3, #0
 800d40c:	6123      	str	r3, [r4, #16]
 800d40e:	4616      	mov	r6, r2
 800d410:	e7ba      	b.n	800d388 <_printf_i+0x150>
 800d412:	680b      	ldr	r3, [r1, #0]
 800d414:	1d1a      	adds	r2, r3, #4
 800d416:	600a      	str	r2, [r1, #0]
 800d418:	681e      	ldr	r6, [r3, #0]
 800d41a:	6862      	ldr	r2, [r4, #4]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4630      	mov	r0, r6
 800d420:	f7f2 fed6 	bl	80001d0 <memchr>
 800d424:	b108      	cbz	r0, 800d42a <_printf_i+0x1f2>
 800d426:	1b80      	subs	r0, r0, r6
 800d428:	6060      	str	r0, [r4, #4]
 800d42a:	6863      	ldr	r3, [r4, #4]
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	2300      	movs	r3, #0
 800d430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d434:	e7a8      	b.n	800d388 <_printf_i+0x150>
 800d436:	6923      	ldr	r3, [r4, #16]
 800d438:	4632      	mov	r2, r6
 800d43a:	4649      	mov	r1, r9
 800d43c:	4640      	mov	r0, r8
 800d43e:	47d0      	blx	sl
 800d440:	3001      	adds	r0, #1
 800d442:	d0ab      	beq.n	800d39c <_printf_i+0x164>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	079b      	lsls	r3, r3, #30
 800d448:	d413      	bmi.n	800d472 <_printf_i+0x23a>
 800d44a:	68e0      	ldr	r0, [r4, #12]
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	4298      	cmp	r0, r3
 800d450:	bfb8      	it	lt
 800d452:	4618      	movlt	r0, r3
 800d454:	e7a4      	b.n	800d3a0 <_printf_i+0x168>
 800d456:	2301      	movs	r3, #1
 800d458:	4632      	mov	r2, r6
 800d45a:	4649      	mov	r1, r9
 800d45c:	4640      	mov	r0, r8
 800d45e:	47d0      	blx	sl
 800d460:	3001      	adds	r0, #1
 800d462:	d09b      	beq.n	800d39c <_printf_i+0x164>
 800d464:	3501      	adds	r5, #1
 800d466:	68e3      	ldr	r3, [r4, #12]
 800d468:	9903      	ldr	r1, [sp, #12]
 800d46a:	1a5b      	subs	r3, r3, r1
 800d46c:	42ab      	cmp	r3, r5
 800d46e:	dcf2      	bgt.n	800d456 <_printf_i+0x21e>
 800d470:	e7eb      	b.n	800d44a <_printf_i+0x212>
 800d472:	2500      	movs	r5, #0
 800d474:	f104 0619 	add.w	r6, r4, #25
 800d478:	e7f5      	b.n	800d466 <_printf_i+0x22e>
 800d47a:	bf00      	nop
 800d47c:	0800d8dd 	.word	0x0800d8dd
 800d480:	0800d8ee 	.word	0x0800d8ee

0800d484 <__retarget_lock_acquire_recursive>:
 800d484:	4770      	bx	lr

0800d486 <__retarget_lock_release_recursive>:
 800d486:	4770      	bx	lr

0800d488 <memmove>:
 800d488:	4288      	cmp	r0, r1
 800d48a:	b510      	push	{r4, lr}
 800d48c:	eb01 0402 	add.w	r4, r1, r2
 800d490:	d902      	bls.n	800d498 <memmove+0x10>
 800d492:	4284      	cmp	r4, r0
 800d494:	4623      	mov	r3, r4
 800d496:	d807      	bhi.n	800d4a8 <memmove+0x20>
 800d498:	1e43      	subs	r3, r0, #1
 800d49a:	42a1      	cmp	r1, r4
 800d49c:	d008      	beq.n	800d4b0 <memmove+0x28>
 800d49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4a6:	e7f8      	b.n	800d49a <memmove+0x12>
 800d4a8:	4402      	add	r2, r0
 800d4aa:	4601      	mov	r1, r0
 800d4ac:	428a      	cmp	r2, r1
 800d4ae:	d100      	bne.n	800d4b2 <memmove+0x2a>
 800d4b0:	bd10      	pop	{r4, pc}
 800d4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4ba:	e7f7      	b.n	800d4ac <memmove+0x24>

0800d4bc <_realloc_r>:
 800d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4be:	4607      	mov	r7, r0
 800d4c0:	4614      	mov	r4, r2
 800d4c2:	460e      	mov	r6, r1
 800d4c4:	b921      	cbnz	r1, 800d4d0 <_realloc_r+0x14>
 800d4c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	f7ff bc54 	b.w	800cd78 <_malloc_r>
 800d4d0:	b922      	cbnz	r2, 800d4dc <_realloc_r+0x20>
 800d4d2:	f7ff fc01 	bl	800ccd8 <_free_r>
 800d4d6:	4625      	mov	r5, r4
 800d4d8:	4628      	mov	r0, r5
 800d4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4dc:	f000 f814 	bl	800d508 <_malloc_usable_size_r>
 800d4e0:	42a0      	cmp	r0, r4
 800d4e2:	d20f      	bcs.n	800d504 <_realloc_r+0x48>
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	f7ff fc46 	bl	800cd78 <_malloc_r>
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	d0f2      	beq.n	800d4d8 <_realloc_r+0x1c>
 800d4f2:	4631      	mov	r1, r6
 800d4f4:	4622      	mov	r2, r4
 800d4f6:	f7ff fbd9 	bl	800ccac <memcpy>
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	f7ff fbeb 	bl	800ccd8 <_free_r>
 800d502:	e7e9      	b.n	800d4d8 <_realloc_r+0x1c>
 800d504:	4635      	mov	r5, r6
 800d506:	e7e7      	b.n	800d4d8 <_realloc_r+0x1c>

0800d508 <_malloc_usable_size_r>:
 800d508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d50c:	1f18      	subs	r0, r3, #4
 800d50e:	2b00      	cmp	r3, #0
 800d510:	bfbc      	itt	lt
 800d512:	580b      	ldrlt	r3, [r1, r0]
 800d514:	18c0      	addlt	r0, r0, r3
 800d516:	4770      	bx	lr

0800d518 <_init>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	bf00      	nop
 800d51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51e:	bc08      	pop	{r3}
 800d520:	469e      	mov	lr, r3
 800d522:	4770      	bx	lr

0800d524 <_fini>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	bf00      	nop
 800d528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d52a:	bc08      	pop	{r3}
 800d52c:	469e      	mov	lr, r3
 800d52e:	4770      	bx	lr
