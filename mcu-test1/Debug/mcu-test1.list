
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf0  0800c568  0800c568  0001c568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d158  0800d158  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d158  0800d158  0001d158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d160  0800d160  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d160  0800d160  0001d160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d164  0800d164  0001d164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800d168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000037f0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003880  20003880  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021946  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004734  00000000  00000000  00041a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00046140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  00046fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025885  00000000  00000000  00047c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016754  00000000  00000000  0006d50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c76b5  00000000  00000000  00083c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b316  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041bc  00000000  00000000  0014b36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c550 	.word	0x0800c550

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800c550 	.word	0x0800c550

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <readSampleFile>:
static void MX_GPIO_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

int32_t readSampleFile(FIL *file, int32_t *pBytesRead) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	int32_t sample, tmp;
	int32_t count = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
	FRESULT resRead;
	char readBuffer[16], sampleBuffer[16];
	do {
		resRead = f_read(file, &readBuffer, 1, pBytesRead);
 8000586:	f107 0118 	add.w	r1, r7, #24
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2201      	movs	r2, #1
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f009 ff7a 	bl	800a488 <f_read>
 8000594:	4603      	mov	r3, r0
 8000596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		sampleBuffer[count] = readBuffer[0];
 800059a:	7e39      	ldrb	r1, [r7, #24]
 800059c:	f107 0208 	add.w	r2, r7, #8
 80005a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a2:	4413      	add	r3, r2
 80005a4:	460a      	mov	r2, r1
 80005a6:	701a      	strb	r2, [r3, #0]
		if (sampleBuffer[count] == '\n') {
 80005a8:	f107 0208 	add.w	r2, r7, #8
 80005ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ae:	4413      	add	r3, r2
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b0a      	cmp	r3, #10
 80005b4:	d10a      	bne.n	80005cc <readSampleFile+0x54>
			sampleBuffer[count] == '\0';
			tmp = sscanf(sampleBuffer, "%ld", &sample);
 80005b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4909      	ldr	r1, [pc, #36]	; (80005e4 <readSampleFile+0x6c>)
 80005c0:	4618      	mov	r0, r3
 80005c2:	f00a ffbb 	bl	800b53c <siscanf>
 80005c6:	62f8      	str	r0, [r7, #44]	; 0x2c
			return sample;
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	e007      	b.n	80005dc <readSampleFile+0x64>
		} else {
			count++;
 80005cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ce:	3301      	adds	r3, #1
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
		}
	} while(*pBytesRead > 0);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dcd5      	bgt.n	8000586 <readSampleFile+0xe>
	return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3738      	adds	r7, #56	; 0x38
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	0800c568 	.word	0x0800c568

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	f5ad 5d34 	sub.w	sp, sp, #11520	; 0x2d00
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 fa51 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 fa4b 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fab3 	bl	8000b64 <MX_GPIO_Init>
  MX_FATFS_Init();
 80005fe:	f004 ff29 	bl	8005454 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000602:	f00a fb39 	bl	800ac78 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	pedalboard_t pedalboard;
	pedalboard.active_pedals = 0;
 8000606:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800060a:	f103 0314 	add.w	r3, r3, #20
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	//pedalboard_append(&pedalboard, BITCRUSHER_RS);
	//pedalboard_append(&pedalboard, LPF);
	//pedalboard_append(&pedalboard, LPF);
	//pedalboard_append(&pedalboard, LPF);
	//pedalboard_append(&pedalboard, LPF);
	pedalboard_append(&pedalboard, OVERDRIVE_SQRT);
 8000612:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000616:	f103 0314 	add.w	r3, r3, #20
 800061a:	2107      	movs	r1, #7
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f835 	bl	800168c <pedalboard_append>
	pedalboard_append(&pedalboard, OVERDRIVE_SQRT);
 8000622:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000626:	f103 0314 	add.w	r3, r3, #20
 800062a:	2107      	movs	r1, #7
 800062c:	4618      	mov	r0, r3
 800062e:	f001 f82d 	bl	800168c <pedalboard_append>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000632:	f00a fb47 	bl	800acc4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2101      	movs	r1, #1
 800063a:	48d2      	ldr	r0, [pc, #840]	; (8000984 <main+0x39c>)
 800063c:	f001 fd88 	bl	8002150 <HAL_GPIO_WritePin>

		if (Appli_state == APPLICATION_READY)
 8000640:	4bd1      	ldr	r3, [pc, #836]	; (8000988 <main+0x3a0>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b02      	cmp	r3, #2
 8000646:	f040 80d8 	bne.w	80007fa <main+0x212>
		{
			//HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin) == GPIO_PIN_SET) {
 800064a:	2101      	movs	r1, #1
 800064c:	48cf      	ldr	r0, [pc, #828]	; (800098c <main+0x3a4>)
 800064e:	f001 fd67 	bl	8002120 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d1ec      	bne.n	8000632 <main+0x4a>
				FRESULT resRead, resWrite;
				int32_t bytesRead, bytesWritten;
				int32_t inSample, outSample;
				char writeBuffer[16];

				resRead = f_open(&inFile, "in1.txt", FA_READ);
 8000658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065c:	3b2c      	subs	r3, #44	; 0x2c
 800065e:	2201      	movs	r2, #1
 8000660:	49cb      	ldr	r1, [pc, #812]	; (8000990 <main+0x3a8>)
 8000662:	4618      	mov	r0, r3
 8000664:	f009 fd44 	bl	800a0f0 <f_open>
 8000668:	4603      	mov	r3, r0
 800066a:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 800066e:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8000672:	7013      	strb	r3, [r2, #0]
				resWrite = f_open(&outFile, "out1.txt", FA_CREATE_ALWAYS);
 8000674:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000678:	f103 0310 	add.w	r3, r3, #16
 800067c:	3b1c      	subs	r3, #28
 800067e:	2208      	movs	r2, #8
 8000680:	49c4      	ldr	r1, [pc, #784]	; (8000994 <main+0x3ac>)
 8000682:	4618      	mov	r0, r3
 8000684:	f009 fd34 	bl	800a0f0 <f_open>
 8000688:	4603      	mov	r3, r0
 800068a:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 800068e:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8000692:	7013      	strb	r3, [r2, #0]
				f_close(&outFile);
 8000694:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000698:	f103 0310 	add.w	r3, r3, #16
 800069c:	3b1c      	subs	r3, #28
 800069e:	4618      	mov	r0, r3
 80006a0:	f00a fa63 	bl	800ab6a <f_close>
				resWrite = f_open(&outFile, "out1.txt", FA_WRITE);
 80006a4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80006a8:	f103 0310 	add.w	r3, r3, #16
 80006ac:	3b1c      	subs	r3, #28
 80006ae:	2202      	movs	r2, #2
 80006b0:	49b8      	ldr	r1, [pc, #736]	; (8000994 <main+0x3ac>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f009 fd1c 	bl	800a0f0 <f_open>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 80006be:	f102 0222 	add.w	r2, r2, #34	; 0x22
 80006c2:	7013      	strb	r3, [r2, #0]
				if(resRead == FR_OK && resWrite == FR_OK)
 80006c4:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80006c8:	f103 0323 	add.w	r3, r3, #35	; 0x23
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d174      	bne.n	80007bc <main+0x1d4>
 80006d2:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80006d6:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d16d      	bne.n	80007bc <main+0x1d4>
				{
					// succ
					HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e6:	48ac      	ldr	r0, [pc, #688]	; (8000998 <main+0x3b0>)
 80006e8:	f001 fd32 	bl	8002150 <HAL_GPIO_WritePin>
					do {
						inSample = readSampleFile(&inFile, &bytesRead);
 80006ec:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80006f0:	f102 0210 	add.w	r2, r2, #16
 80006f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f8:	3b2c      	subs	r3, #44	; 0x2c
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff3b 	bl	8000578 <readSampleFile>
 8000702:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000706:	f103 031c 	add.w	r3, r3, #28
 800070a:	6018      	str	r0, [r3, #0]
						outSample = (int32_t)pedalboard_process(&pedalboard, (float)inSample);
 800070c:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000710:	f103 031c 	add.w	r3, r3, #28
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000722:	ee17 3a90 	vmov	r3, s15
 8000726:	b21a      	sxth	r2, r3
 8000728:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800072c:	f103 0314 	add.w	r3, r3, #20
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f8a8 	bl	8001888 <pedalboard_process>
 8000738:	4603      	mov	r3, r0
 800073a:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 800073e:	f102 0218 	add.w	r2, r2, #24
 8000742:	6013      	str	r3, [r2, #0]
						sprintf(writeBuffer, "%ld\n", outSample);
 8000744:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000748:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800074c:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 8000750:	f102 0218 	add.w	r2, r2, #24
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	4991      	ldr	r1, [pc, #580]	; (800099c <main+0x3b4>)
 8000758:	4618      	mov	r0, r3
 800075a:	f00a fecf 	bl	800b4fc <siprintf>
						resWrite = f_write(&outFile, (uint8_t *)writeBuffer, strlen(writeBuffer), &bytesWritten);
 800075e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000762:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd32 	bl	80001d0 <strlen>
 800076c:	4602      	mov	r2, r0
 800076e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000772:	f103 030c 	add.w	r3, r3, #12
 8000776:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 800077a:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800077e:	f507 5082 	add.w	r0, r7, #4160	; 0x1040
 8000782:	f100 0010 	add.w	r0, r0, #16
 8000786:	381c      	subs	r0, #28
 8000788:	f009 ffdd 	bl	800a746 <f_write>
 800078c:	4603      	mov	r3, r0
 800078e:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 8000792:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8000796:	7013      	strb	r3, [r2, #0]
					} while(bytesRead > 0);
 8000798:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800079c:	f103 0310 	add.w	r3, r3, #16
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dca2      	bgt.n	80006ec <main+0x104>

					HAL_Delay(1000);
 80007a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007aa:	f001 f9e7 	bl	8001b7c <HAL_Delay>
					HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b4:	4878      	ldr	r0, [pc, #480]	; (8000998 <main+0x3b0>)
 80007b6:	f001 fccb 	bl	8002150 <HAL_GPIO_WritePin>
 80007ba:	e00f      	b.n	80007dc <main+0x1f4>
				} else {
					// wtf
					HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c2:	4875      	ldr	r0, [pc, #468]	; (8000998 <main+0x3b0>)
 80007c4:	f001 fcc4 	bl	8002150 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f001 f9d6 	bl	8001b7c <HAL_Delay>
					HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d6:	4870      	ldr	r0, [pc, #448]	; (8000998 <main+0x3b0>)
 80007d8:	f001 fcba 	bl	8002150 <HAL_GPIO_WritePin>
				}
				f_close(&inFile);
 80007dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007e0:	3b2c      	subs	r3, #44	; 0x2c
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00a f9c1 	bl	800ab6a <f_close>
				f_close(&outFile);
 80007e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80007ec:	f103 0310 	add.w	r3, r3, #16
 80007f0:	3b1c      	subs	r3, #28
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00a f9b9 	bl	800ab6a <f_close>
 80007f8:	e71b      	b.n	8000632 <main+0x4a>
			}
		}
		else if (Appli_state == APPLICATION_DISCONNECT || Appli_state == APPLICATION_IDLE)
 80007fa:	4b63      	ldr	r3, [pc, #396]	; (8000988 <main+0x3a0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d004      	beq.n	800080c <main+0x224>
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <main+0x3a0>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	f040 811c 	bne.w	8000a44 <main+0x45c>
		{
			HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000812:	4861      	ldr	r0, [pc, #388]	; (8000998 <main+0x3b0>)
 8000814:	f001 fc9c 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081e:	485e      	ldr	r0, [pc, #376]	; (8000998 <main+0x3b0>)
 8000820:	f001 fc96 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082a:	485b      	ldr	r0, [pc, #364]	; (8000998 <main+0x3b0>)
 800082c:	f001 fc90 	bl	8002150 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000836:	4858      	ldr	r0, [pc, #352]	; (8000998 <main+0x3b0>)
 8000838:	f001 fc8a 	bl	8002150 <HAL_GPIO_WritePin>

			if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin) == GPIO_PIN_SET) {
 800083c:	2101      	movs	r1, #1
 800083e:	4853      	ldr	r0, [pc, #332]	; (800098c <main+0x3a4>)
 8000840:	f001 fc6e 	bl	8002120 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	f040 8116 	bne.w	8000a78 <main+0x490>

				float f_a = 1.F, f_b = 1.F;
 800084c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000850:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 8000854:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000858:	6013      	str	r3, [r2, #0]
 800085a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800085e:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 8000862:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000866:	6013      	str	r3, [r2, #0]
				float f_ops[6] = {12.1F, -53.4F, 76.1F, 11.9F, 6.F, 14.F};
 8000868:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800086c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000870:	4a4b      	ldr	r2, [pc, #300]	; (80009a0 <main+0x3b8>)
 8000872:	461c      	mov	r4, r3
 8000874:	4615      	mov	r5, r2
 8000876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800087e:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000888:	4843      	ldr	r0, [pc, #268]	; (8000998 <main+0x3b0>)
 800088a:	f001 fc61 	bl	8002150 <HAL_GPIO_WritePin>
				for (int32_t i = 0; i < 44100 * 30; i++) {
 800088e:	2300      	movs	r3, #0
 8000890:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 8000894:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	e0c3      	b.n	8000a24 <main+0x43c>
					f_b = f_ops[i % 6];
 800089c:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80008a0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80008a4:	6819      	ldr	r1, [r3, #0]
 80008a6:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <main+0x3bc>)
 80008a8:	fb83 3201 	smull	r3, r2, r3, r1
 80008ac:	17cb      	asrs	r3, r1, #31
 80008ae:	1ad2      	subs	r2, r2, r3
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	1aca      	subs	r2, r1, r3
 80008ba:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80008be:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80008c2:	0093      	lsls	r3, r2, #2
 80008c4:	440b      	add	r3, r1
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 80008cc:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80008d0:	6013      	str	r3, [r2, #0]
					switch(i % 4) {
 80008d2:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80008d6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	425a      	negs	r2, r3
 80008de:	f003 0303 	and.w	r3, r3, #3
 80008e2:	f002 0203 	and.w	r2, r2, #3
 80008e6:	bf58      	it	pl
 80008e8:	4253      	negpl	r3, r2
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d871      	bhi.n	80009d2 <main+0x3ea>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <main+0x30c>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000905 	.word	0x08000905
 80008f8:	0800092f 	.word	0x0800092f
 80008fc:	08000959 	.word	0x08000959
 8000900:	080009a9 	.word	0x080009a9
						case 0: f_a += f_b; break;
 8000904:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000908:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800090c:	ed93 7a00 	vldr	s14, [r3]
 8000910:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000914:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000918:	edd3 7a00 	vldr	s15, [r3]
 800091c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000920:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000924:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000928:	edc3 7a00 	vstr	s15, [r3]
 800092c:	e051      	b.n	80009d2 <main+0x3ea>
						case 1: f_a -= f_b; break;
 800092e:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000932:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000936:	ed93 7a00 	vldr	s14, [r3]
 800093a:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 800093e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000942:	edd3 7a00 	vldr	s15, [r3]
 8000946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800094a:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 800094e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000952:	edc3 7a00 	vstr	s15, [r3]
 8000956:	e03c      	b.n	80009d2 <main+0x3ea>
						case 2: f_a *= f_b; break;
 8000958:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 800095c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000960:	ed93 7a00 	vldr	s14, [r3]
 8000964:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000968:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800096c:	edd3 7a00 	vldr	s15, [r3]
 8000970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000974:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000978:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800097c:	edc3 7a00 	vstr	s15, [r3]
 8000980:	e027      	b.n	80009d2 <main+0x3ea>
 8000982:	bf00      	nop
 8000984:	40020800 	.word	0x40020800
 8000988:	200000e4 	.word	0x200000e4
 800098c:	40020000 	.word	0x40020000
 8000990:	0800c56c 	.word	0x0800c56c
 8000994:	0800c574 	.word	0x0800c574
 8000998:	40020c00 	.word	0x40020c00
 800099c:	0800c580 	.word	0x0800c580
 80009a0:	0800c588 	.word	0x0800c588
 80009a4:	2aaaaaab 	.word	0x2aaaaaab
						case 3: f_a /= f_b; break;
 80009a8:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80009ac:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80009b0:	edd3 6a00 	vldr	s13, [r3]
 80009b4:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80009b8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80009bc:	ed93 7a00 	vldr	s14, [r3]
 80009c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c4:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80009c8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80009cc:	edc3 7a00 	vstr	s15, [r3]
 80009d0:	bf00      	nop
					}
					f_b = pedalboard_process(&pedalboard, f_a);
 80009d2:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 80009d6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80009da:	edd3 7a00 	vldr	s15, [r3]
 80009de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e2:	ee17 3a90 	vmov	r3, s15
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80009ec:	f103 0314 	add.w	r3, r3, #20
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 ff48 	bl	8001888 <pedalboard_process>
 80009f8:	4603      	mov	r3, r0
 80009fa:	ee07 3a90 	vmov	s15, r3
 80009fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a02:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000a06:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000a0a:	edc3 7a00 	vstr	s15, [r3]
				for (int32_t i = 0; i < 44100 * 30; i++) {
 8000a0e:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000a12:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	f507 5234 	add.w	r2, r7, #11520	; 0x2d00
 8000a1e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	f507 5334 	add.w	r3, r7, #11520	; 0x2d00
 8000a28:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <main+0x494>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	f77f af33 	ble.w	800089c <main+0x2b4>

				}
				HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4810      	ldr	r0, [pc, #64]	; (8000a80 <main+0x498>)
 8000a3e:	f001 fb87 	bl	8002150 <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin) == GPIO_PIN_SET) {
 8000a42:	e019      	b.n	8000a78 <main+0x490>
			}
		}
		else if (Appli_state == APPLICATION_START)
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <main+0x49c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	f47f adf2 	bne.w	8000632 <main+0x4a>
		{
			if (f_mount(&myUsbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	490d      	ldr	r1, [pc, #52]	; (8000a88 <main+0x4a0>)
 8000a52:	480e      	ldr	r0, [pc, #56]	; (8000a8c <main+0x4a4>)
 8000a54:	f009 fb06 	bl	800a064 <f_mount>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d106      	bne.n	8000a6c <main+0x484>
			{
				HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <main+0x498>)
 8000a66:	f001 fb73 	bl	8002150 <HAL_GPIO_WritePin>
 8000a6a:	e5e2      	b.n	8000632 <main+0x4a>
			}
			else
			{
				HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <main+0x498>)
 8000a74:	f001 fb6c 	bl	8002150 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000a78:	e5db      	b.n	8000632 <main+0x4a>
 8000a7a:	bf00      	nop
 8000a7c:	00142ff7 	.word	0x00142ff7
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	200000e4 	.word	0x200000e4
 8000a88:	20001128 	.word	0x20001128
 8000a8c:	200000f0 	.word	0x200000f0

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2230      	movs	r2, #48	; 0x30
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00a fc6a 	bl	800b378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <SystemClock_Config+0xcc>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a27      	ldr	r2, [pc, #156]	; (8000b5c <SystemClock_Config+0xcc>)
 8000abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <SystemClock_Config+0xcc>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b00:	2308      	movs	r3, #8
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 f8a4 	bl	8003c64 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b22:	f000 f8a3 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	2105      	movs	r1, #5
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fb05 	bl	8004154 <HAL_RCC_ClockConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b50:	f000 f88c 	bl	8000c6c <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3750      	adds	r7, #80	; 0x50
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_GPIO_Init+0xf8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	481c      	ldr	r0, [pc, #112]	; (8000c60 <MX_GPIO_Init+0xfc>)
 8000bf0:	f001 faae 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000bfa:	481a      	ldr	r0, [pc, #104]	; (8000c64 <MX_GPIO_Init+0x100>)
 8000bfc:	f001 faa8 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_GPIO_Init+0xfc>)
 8000c18:	f001 f8e6 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn1_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <MX_GPIO_Init+0x104>)
 8000c30:	f001 f8da 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin;
 8000c34:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_GPIO_Init+0x100>)
 8000c4e:	f001 f8cb 	bl	8001de8 <HAL_GPIO_Init>

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	40020000 	.word	0x40020000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <amplifier_pedal_init>:
#include <stdio.h>
#include "pedalboard_min.h"

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 8000c78:	b490      	push	{r4, r7}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <amplifier_pedal_init+0x34>)
 8000c84:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000c88:	4613      	mov	r3, r2
 8000c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <amplifier_pedal_init+0x38>)
 8000c94:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000c98:	4613      	mov	r3, r2
 8000c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc90      	pop	{r4, r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	0800c5a0 	.word	0x0800c5a0
 8000cb0:	0800c5b0 	.word	0x0800c5b0

08000cb4 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cbe:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000cc6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000cd8:	eef0 0a67 	vmov.f32	s1, s15
 8000cdc:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ce0:	f000 fb8c 	bl	80013fc <hard_clip>
 8000ce4:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	ee07 3a90 	vmov	s15, r3
}
 8000cee:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    return;
 8000d00:	bf00      	nop
}
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d16:	6038      	str	r0, [r7, #0]
    return in;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	ee07 3a90 	vmov	s15, r3
}
 8000d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 8000d2c:	b490      	push	{r4, r7}
 8000d2e:	b092      	sub	sp, #72	; 0x48
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){32.F, 2.F, 64.F, 2.F};
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <tremolo_pedal_init+0x5c>)
 8000d50:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8000d54:	4613      	mov	r3, r2
 8000d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.1F, 0.F, 1.F, 0.1F};
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <tremolo_pedal_init+0x60>)
 8000d60:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000d64:	4613      	mov	r3, r2
 8000d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.9F, 0.F, 1.F, 0.1F};
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <tremolo_pedal_init+0x64>)
 8000d70:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8000d74:	4613      	mov	r3, r2
 8000d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000d7c:	bf00      	nop
 8000d7e:	3748      	adds	r7, #72	; 0x48
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc90      	pop	{r4, r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	0800c5c0 	.word	0x0800c5c0
 8000d8c:	0800c5d0 	.word	0x0800c5d0
 8000d90:	0800c5e0 	.word	0x0800c5e0

08000d94 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d9e:	6038      	str	r0, [r7, #0]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, 1.F, conf->float_params[SPEED].value);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	461a      	mov	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8000dac:	eef0 0a67 	vmov.f32	s1, s15
 8000db0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000db4:	4611      	mov	r1, r2
 8000db6:	2073      	movs	r0, #115	; 0x73
 8000db8:	f000 fbcc 	bl	8001554 <wave_gen>
 8000dbc:	eeb0 7a40 	vmov.f32	s14, s0
 8000dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc8:	edc7 7a03 	vstr	s15, [r7, #12]
    conf->int_params[COUNTER].value++;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8000de2:	eef0 1a47 	vmov.f32	s3, s14
 8000de6:	eeb0 1a67 	vmov.f32	s2, s15
 8000dea:	edd7 0a01 	vldr	s1, [r7, #4]
 8000dee:	ed97 0a03 	vldr	s0, [r7, #12]
 8000df2:	f000 fae3 	bl	80013bc <mix>
 8000df6:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	ee07 3a90 	vmov	s15, r3
}
 8000e00:	eeb0 0a67 	vmov.f32	s0, s15
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 8000e0c:	b490      	push	{r4, r7}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <bitcrusher_rs_pedal_init+0x44>)
 8000e18:	f103 0420 	add.w	r4, r3, #32
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <bitcrusher_rs_pedal_init+0x48>)
 8000e28:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <bitcrusher_rs_pedal_init+0x48>)
 8000e38:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000e44:	bf00      	nop
 8000e46:	3738      	adds	r7, #56	; 0x38
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc90      	pop	{r4, r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	0800c5f0 	.word	0x0800c5f0
 8000e54:	0800c600 	.word	0x0800c600

08000e58 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e62:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 8000e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e72:	ee17 3a90 	vmov	r3, s15
 8000e76:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 8000e78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e80:	fa42 f303 	asr.w	r3, r2, r3
 8000e84:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 8000e86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	81bb      	strh	r3, [r7, #12]
    _out += (2 << (shift -2));
 8000e94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	89bb      	ldrh	r3, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 8000eaa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb6:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8000ec6:	eef0 1a47 	vmov.f32	s3, s14
 8000eca:	eeb0 1a67 	vmov.f32	s2, s15
 8000ece:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ed2:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ed6:	f000 fa71 	bl	80013bc <mix>
 8000eda:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	ee07 3a90 	vmov	s15, r3
}
 8000ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8000ef0:	b490      	push	{r4, r7}
 8000ef2:	b092      	sub	sp, #72	; 0x48
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <low_pass_filter_pedal_init+0x50>)
 8000efc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000f00:	4613      	mov	r3, r2
 8000f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <low_pass_filter_pedal_init+0x54>)
 8000f0c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000f10:	4613      	mov	r3, r2
 8000f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <low_pass_filter_pedal_init+0x58>)
 8000f1c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8000f20:	4613      	mov	r3, r2
 8000f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	33b0      	adds	r3, #176	; 0xb0
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
}
 8000f36:	bf00      	nop
 8000f38:	3748      	adds	r7, #72	; 0x48
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc90      	pop	{r4, r7}
 8000f3e:	4770      	bx	lr
 8000f40:	0800c610 	.word	0x0800c610
 8000f44:	0800c620 	.word	0x0800c620
 8000f48:	0800c630 	.word	0x0800c630

08000f4c <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f56:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8000f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f78:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f84:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8000f9c:	eef0 1a47 	vmov.f32	s3, s14
 8000fa0:	eeb0 1a67 	vmov.f32	s2, s15
 8000fa4:	edd7 0a01 	vldr	s1, [r7, #4]
 8000fa8:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fac:	f000 fa06 	bl	80013bc <mix>
 8000fb0:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	ee07 3a90 	vmov	s15, r3
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fe2:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	ee07 3a90 	vmov	s15, r3
}
 8000fea:	eeb0 0a67 	vmov.f32	s0, s15
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8000ff8:	b490      	push	{r4, r7}
 8000ffa:	b092      	sub	sp, #72	; 0x48
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <overdrive_sqrt_pedal_init+0x54>)
 8001004:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001008:	4613      	mov	r3, r2
 800100a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <overdrive_sqrt_pedal_init+0x58>)
 8001014:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001018:	4613      	mov	r3, r2
 800101a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <overdrive_sqrt_pedal_init+0x5c>)
 8001024:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001028:	4613      	mov	r3, r2
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <overdrive_sqrt_pedal_init+0x60>)
 8001034:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001038:	4613      	mov	r3, r2
 800103a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800103c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001040:	bf00      	nop
 8001042:	3748      	adds	r7, #72	; 0x48
 8001044:	46bd      	mov	sp, r7
 8001046:	bc90      	pop	{r4, r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	0800c640 	.word	0x0800c640
 8001050:	0800c5b0 	.word	0x0800c5b0
 8001054:	0800c650 	.word	0x0800c650
 8001058:	0800c660 	.word	0x0800c660

0800105c <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	ed87 0a01 	vstr	s0, [r7, #4]
 8001066:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 8001068:	edd7 7a01 	vldr	s15, [r7, #4]
 800106c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	dd06      	ble.n	8001084 <overdrive_sqrt_process+0x28>
        out = square_root(in);
 8001076:	ed97 0a01 	vldr	s0, [r7, #4]
 800107a:	f000 fa3a 	bl	80014f2 <square_root>
 800107e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001082:	e00d      	b.n	80010a0 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 8001084:	edd7 7a01 	vldr	s15, [r7, #4]
 8001088:	eef1 7a67 	vneg.f32	s15, s15
 800108c:	eeb0 0a67 	vmov.f32	s0, s15
 8001090:	f000 fa2f 	bl	80014f2 <square_root>
 8001094:	eef0 7a40 	vmov.f32	s15, s0
 8001098:	eef1 7a67 	vneg.f32	s15, s15
 800109c:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80010b8:	eef0 0a67 	vmov.f32	s1, s15
 80010bc:	ed97 0a03 	vldr	s0, [r7, #12]
 80010c0:	f000 f99c 	bl	80013fc <hard_clip>
 80010c4:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80010d4:	eef0 1a47 	vmov.f32	s3, s14
 80010d8:	eeb0 1a67 	vmov.f32	s2, s15
 80010dc:	edd7 0a01 	vldr	s1, [r7, #4]
 80010e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80010e4:	f000 f96a 	bl	80013bc <mix>
 80010e8:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	ee07 3a90 	vmov	s15, r3
}
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <overdrive_pedal_init>:

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 80010fc:	b490      	push	{r4, r7}
 80010fe:	b09a      	sub	sp, #104	; 0x68
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <overdrive_pedal_init+0x74>)
 8001108:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800110c:	4613      	mov	r3, r2
 800110e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <overdrive_pedal_init+0x78>)
 8001118:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800111c:	4613      	mov	r3, r2
 800111e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <overdrive_pedal_init+0x7c>)
 8001128:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800112c:	4613      	mov	r3, r2
 800112e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <overdrive_pedal_init+0x74>)
 8001138:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800113c:	4613      	mov	r3, r2
 800113e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a0d      	ldr	r2, [pc, #52]	; (800117c <overdrive_pedal_init+0x80>)
 8001148:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800114c:	4613      	mov	r3, r2
 800114e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <overdrive_pedal_init+0x84>)
 8001158:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800115c:	4613      	mov	r3, r2
 800115e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001164:	bf00      	nop
 8001166:	3768      	adds	r7, #104	; 0x68
 8001168:	46bd      	mov	sp, r7
 800116a:	bc90      	pop	{r4, r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	0800c670 	.word	0x0800c670
 8001174:	0800c5b0 	.word	0x0800c5b0
 8001178:	0800c680 	.word	0x0800c680
 800117c:	0800c620 	.word	0x0800c620
 8001180:	0800c630 	.word	0x0800c630

08001184 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	ed87 0a01 	vstr	s0, [r7, #4]
 800118e:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001196:	ed97 7a01 	vldr	s14, [r7, #4]
 800119a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119e:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80011ae:	eeb0 1a47 	vmov.f32	s2, s14
 80011b2:	eef0 0a67 	vmov.f32	s1, s15
 80011b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80011ba:	f000 f94f 	bl	800145c <soft_clip>
 80011be:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80011c8:	eef0 0a67 	vmov.f32	s1, s15
 80011cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80011d0:	f000 f914 	bl	80013fc <hard_clip>
 80011d4:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80011e4:	eef0 1a47 	vmov.f32	s3, s14
 80011e8:	eeb0 1a67 	vmov.f32	s2, s15
 80011ec:	edd7 0a01 	vldr	s1, [r7, #4]
 80011f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80011f4:	f000 f8e2 	bl	80013bc <mix>
 80011f8:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	ee07 3a90 	vmov	s15, r3
}
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 800120c:	b490      	push	{r4, r7}
 800120e:	b09e      	sub	sp, #120	; 0x78
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <fuzz_pedal_init+0x8c>)
 8001230:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001234:	4613      	mov	r3, r2
 8001236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <fuzz_pedal_init+0x90>)
 8001240:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001244:	4613      	mov	r3, r2
 8001246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <fuzz_pedal_init+0x94>)
 8001250:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001254:	4613      	mov	r3, r2
 8001256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){20.F, 2.F, 64.F, 2.F};
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <fuzz_pedal_init+0x98>)
 8001260:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001264:	4613      	mov	r3, r2
 8001266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <fuzz_pedal_init+0x9c>)
 8001270:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001274:	4613      	mov	r3, r2
 8001276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <fuzz_pedal_init+0xa0>)
 8001280:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001284:	4613      	mov	r3, r2
 8001286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800128c:	bf00      	nop
 800128e:	3778      	adds	r7, #120	; 0x78
 8001290:	46bd      	mov	sp, r7
 8001292:	bc90      	pop	{r4, r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	0800c670 	.word	0x0800c670
 800129c:	0800c5b0 	.word	0x0800c5b0
 80012a0:	0800c690 	.word	0x0800c690
 80012a4:	0800c6a0 	.word	0x0800c6a0
 80012a8:	0800c620 	.word	0x0800c620
 80012ac:	0800c630 	.word	0x0800c630

080012b0 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ba:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	edc7 7a05 	vstr	s15, [r7, #20]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	613b      	str	r3, [r7, #16]
    float height = conf->float_params[HEIGHT].value;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	60fb      	str	r3, [r7, #12]
    float speed = conf->float_params[SPEED].value;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80012e2:	60bb      	str	r3, [r7, #8]

    out = hard_clip(out, threshold_high);
 80012e4:	edd7 0a04 	vldr	s1, [r7, #16]
 80012e8:	ed97 0a05 	vldr	s0, [r7, #20]
 80012ec:	f000 f886 	bl	80013fc <hard_clip>
 80012f0:	ed87 0a05 	vstr	s0, [r7, #20]
    if (out == threshold_high) {
 80012f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80012f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	d116      	bne.n	8001334 <fuzz_process+0x84>
        out = out + wave_gen('s', conf->int_params[COUNTER].value, height, speed) - height;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	edd7 0a02 	vldr	s1, [r7, #8]
 800130e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001312:	4619      	mov	r1, r3
 8001314:	2073      	movs	r0, #115	; 0x73
 8001316:	f000 f91d 	bl	8001554 <wave_gen>
 800131a:	eeb0 7a40 	vmov.f32	s14, s0
 800131e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001322:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001326:	edd7 7a03 	vldr	s15, [r7, #12]
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001332:	e024      	b.n	800137e <fuzz_process+0xce>
    } else if (out == -threshold_high - 1.F) {
 8001334:	edd7 7a04 	vldr	s15, [r7, #16]
 8001338:	eef1 7a67 	vneg.f32	s15, s15
 800133c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001344:	ed97 7a05 	vldr	s14, [r7, #20]
 8001348:	eeb4 7a67 	vcmp.f32	s14, s15
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	d115      	bne.n	800137e <fuzz_process+0xce>
        out = out - wave_gen('s', conf->int_params[COUNTER].value, height, speed) + height;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	edd7 0a02 	vldr	s1, [r7, #8]
 800135a:	ed97 0a03 	vldr	s0, [r7, #12]
 800135e:	4619      	mov	r1, r3
 8001360:	2073      	movs	r0, #115	; 0x73
 8001362:	f000 f8f7 	bl	8001554 <wave_gen>
 8001366:	eeb0 7a40 	vmov.f32	s14, s0
 800136a:	edd7 7a05 	vldr	s15, [r7, #20]
 800136e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001372:	ed97 7a03 	vldr	s14, [r7, #12]
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    conf->int_params[COUNTER].value++;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001394:	eef0 1a47 	vmov.f32	s3, s14
 8001398:	eeb0 1a67 	vmov.f32	s2, s15
 800139c:	edd7 0a01 	vldr	s1, [r7, #4]
 80013a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80013a4:	f000 f80a 	bl	80013bc <mix>
 80013a8:	ed87 0a05 	vstr	s0, [r7, #20]
    return out;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	ee07 3a90 	vmov	s15, r3
}
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80013c6:	edc7 0a02 	vstr	s1, [r7, #8]
 80013ca:	ed87 1a01 	vstr	s2, [r7, #4]
 80013ce:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 80013d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013de:	edd7 6a02 	vldr	s13, [r7, #8]
 80013e2:	edd7 7a00 	vldr	s15, [r7]
 80013e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80013ee:	eeb0 0a67 	vmov.f32	s0, s15
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	ed87 0a01 	vstr	s0, [r7, #4]
 8001406:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 800140a:	ed97 7a01 	vldr	s14, [r7, #4]
 800140e:	edd7 7a00 	vldr	s15, [r7]
 8001412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	dd02      	ble.n	8001422 <hard_clip+0x26>
        return clip_threshold;
 800141c:	edd7 7a00 	vldr	s15, [r7]
 8001420:	e015      	b.n	800144e <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8001422:	edd7 7a00 	vldr	s15, [r7]
 8001426:	eef1 7a67 	vneg.f32	s15, s15
 800142a:	ed97 7a01 	vldr	s14, [r7, #4]
 800142e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	d508      	bpl.n	800144a <hard_clip+0x4e>
        return -clip_threshold - 1;
 8001438:	edd7 7a00 	vldr	s15, [r7]
 800143c:	eef1 7a67 	vneg.f32	s15, s15
 8001440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001448:	e001      	b.n	800144e <hard_clip+0x52>
    }
    return in;
 800144a:	edd7 7a01 	vldr	s15, [r7, #4]
}
 800144e:	eeb0 0a67 	vmov.f32	s0, s15
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	ed87 0a03 	vstr	s0, [r7, #12]
 8001466:	edc7 0a02 	vstr	s1, [r7, #8]
 800146a:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 800146e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001472:	edd7 7a02 	vldr	s15, [r7, #8]
 8001476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	dd10      	ble.n	80014a2 <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 8001480:	ed97 7a03 	vldr	s14, [r7, #12]
 8001484:	edd7 7a02 	vldr	s15, [r7, #8]
 8001488:	ee77 6a67 	vsub.f32	s13, s14, s15
 800148c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001494:	ed97 7a02 	vldr	s14, [r7, #8]
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	edc7 7a05 	vstr	s15, [r7, #20]
 80014a0:	e01d      	b.n	80014de <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 80014a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a6:	eef1 7a67 	vneg.f32	s15, s15
 80014aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d510      	bpl.n	80014da <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 80014b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80014bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014c0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d4:	edc7 7a05 	vstr	s15, [r7, #20]
 80014d8:	e001      	b.n	80014de <soft_clip+0x82>
    } else {
        out = in;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	617b      	str	r3, [r7, #20]
    }
    return out;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	ee07 3a90 	vmov	s15, r3
}
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <square_root>:

float square_root(float in) {
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001508:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) out = 0.5F * (out + (in / out));
 800150c:	2300      	movs	r3, #0
 800150e:	72fb      	strb	r3, [r7, #11]
 8001510:	e012      	b.n	8001538 <square_root+0x46>
 8001512:	edd7 6a01 	vldr	s13, [r7, #4]
 8001516:	edd7 7a03 	vldr	s15, [r7, #12]
 800151a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800151e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001526:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800152a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	3301      	adds	r3, #1
 8001536:	72fb      	strb	r3, [r7, #11]
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9e9      	bls.n	8001512 <square_root+0x20>
    return out;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	ee07 3a90 	vmov	s15, r3
}
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <wave_gen>:

float wave_gen(char t, u_int32_t i, float height, float speed) {
 8001554:	b580      	push	{r7, lr}
 8001556:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 800155a:	af00      	add	r7, sp, #0
 800155c:	4602      	mov	r2, r0
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	6019      	str	r1, [r3, #0]
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	ed83 0a00 	vstr	s0, [r3]
 800156a:	463b      	mov	r3, r7
 800156c:	edc3 0a00 	vstr	s1, [r3]
 8001570:	f107 030f 	add.w	r3, r7, #15
 8001574:	701a      	strb	r2, [r3, #0]
    float sin_table[512] = { 0, 0.00307396, 0.00614789, 0.00922176, 0.0122955, 0.0153692, 0.0184427, 0.0215161, 0.0245892, 0.0276621, 0.0307348, 0.0338071, 0.0368792, 0.0399509, 0.0430222, 0.0460931, 0.0491636, 0.0522336, 0.0553031, 0.0583721, 0.0614405, 0.0645084, 0.0675756, 0.0706423, 0.0737082, 0.0767734, 0.079838, 0.0829017, 0.0859647, 0.0890269, 0.0920882, 0.0951487, 0.0982083, 0.101267, 0.104325, 0.107381, 0.110437, 0.113492, 0.116545, 0.119598, 0.122649, 0.125699, 0.128748, 0.131796, 0.134842, 0.137888, 0.140932, 0.143974, 0.147015, 0.150055, 0.153094, 0.156131, 0.159166, 0.1622, 0.165233, 0.168264, 0.171293, 0.174321, 0.177347, 0.180371, 0.183394, 0.186415, 0.189434, 0.192451, 0.195467, 0.198481, 0.201493, 0.204503, 0.207511, 0.210517, 0.213521, 0.216523, 0.219523, 0.222521, 0.225517, 0.22851, 0.231502, 0.234491, 0.237478, 0.240463, 0.243446, 0.246426, 0.249404, 0.25238, 0.255353, 0.258324, 0.261292, 0.264258, 0.267222, 0.270183, 0.273141, 0.276097, 0.27905, 0.282, 0.284948, 0.287893, 0.290836, 0.293776, 0.296713, 0.299647, 0.302578, 0.305506, 0.308432, 0.311355, 0.314274, 0.317191, 0.320105, 0.323015, 0.325923, 0.328828, 0.331729, 0.334627, 0.337523, 0.340415, 0.343303, 0.346189, 0.349071, 0.35195, 0.354826, 0.357698, 0.360567, 0.363432, 0.366294, 0.369153, 0.372008, 0.37486, 0.377708, 0.380552, 0.383393, 0.38623, 0.389064, 0.391894, 0.39472, 0.397542, 0.400361, 0.403176, 0.405987, 0.408795, 0.411598, 0.414398, 0.417193, 0.419985, 0.422773, 0.425556, 0.428336, 0.431112, 0.433883, 0.436651, 0.439414, 0.442173, 0.444929, 0.447679, 0.450426, 0.453168, 0.455906, 0.45864, 0.46137, 0.464095, 0.466815, 0.469532, 0.472243, 0.474951, 0.477654, 0.480352, 0.483046, 0.485735, 0.48842, 0.4911, 0.493775, 0.496446, 0.499112, 0.501773, 0.50443, 0.507082, 0.509729, 0.512371, 0.515008, 0.517641, 0.520269, 0.522891, 0.525509, 0.528122, 0.53073, 0.533332, 0.53593, 0.538523, 0.541111, 0.543693, 0.54627, 0.548843, 0.55141, 0.553971, 0.556528, 0.559079, 0.561625, 0.564166, 0.566701, 0.569231, 0.571756, 0.574275, 0.576789, 0.579297, 0.5818, 0.584298, 0.58679, 0.589276, 0.591757, 0.594232, 0.596701, 0.599165, 0.601624, 0.604076, 0.606523, 0.608964, 0.6114, 0.613829, 0.616253, 0.618671, 0.621083, 0.623489, 0.62589, 0.628284, 0.630673, 0.633055, 0.635432, 0.637802, 0.640167, 0.642525, 0.644878, 0.647224, 0.649564, 0.651899, 0.654226, 0.656548, 0.658864, 0.661173, 0.663476, 0.665773, 0.668063, 0.670348, 0.672625, 0.674897, 0.677162, 0.679421, 0.681673, 0.683919, 0.686158, 0.688391, 0.690618, 0.692838, 0.695051, 0.697258, 0.699458, 0.701651, 0.703838, 0.706019, 0.708192, 0.710359, 0.712519, 0.714673, 0.71682, 0.71896, 0.721093, 0.723219, 0.725339, 0.727451, 0.729557, 0.731656, 0.733748, 0.735833, 0.737911, 0.739982, 0.742046, 0.744103, 0.746154, 0.748197, 0.750233, 0.752261, 0.754283, 0.756298, 0.758305, 0.760306, 0.762299, 0.764285, 0.766263, 0.768235, 0.770199, 0.772156, 0.774106, 0.776048, 0.777983, 0.779911, 0.781831, 0.783744, 0.785649, 0.787547, 0.789438, 0.791321, 0.793197, 0.795065, 0.796926, 0.798779, 0.800625, 0.802463, 0.804293, 0.806116, 0.807931, 0.809739, 0.811539, 0.813331, 0.815115, 0.816892, 0.818662, 0.820423, 0.822177, 0.823923, 0.825661, 0.827391, 0.829114, 0.830828, 0.832535, 0.834234, 0.835925, 0.837608, 0.839283, 0.840951, 0.84261, 0.844262, 0.845905, 0.84754, 0.849168, 0.850787, 0.852399, 0.854002, 0.855597, 0.857184, 0.858764, 0.860334, 0.861897, 0.863452, 0.864999, 0.866537, 0.868067, 0.869589, 0.871103, 0.872608, 0.874105, 0.875594, 0.877075, 0.878548, 0.880012, 0.881468, 0.882915, 0.884354, 0.885785, 0.887207, 0.888622, 0.890027, 0.891424, 0.892813, 0.894194, 0.895565, 0.896929, 0.898284, 0.89963, 0.900968, 0.902298, 0.903619, 0.904931, 0.906235, 0.90753, 0.908817, 0.910095, 0.911365, 0.912626, 0.913878, 0.915122, 0.916357, 0.917583, 0.918801, 0.92001, 0.92121, 0.922402, 0.923585, 0.924759, 0.925924, 0.927081, 0.928229, 0.929368, 0.930499, 0.93162, 0.932733, 0.933837, 0.934932, 0.936018, 0.937096, 0.938164, 0.939224, 0.940275, 0.941317, 0.94235, 0.943374, 0.944389, 0.945396, 0.946393, 0.947382, 0.948361, 0.949332, 0.950293, 0.951246, 0.95219, 0.953124, 0.95405, 0.954966, 0.955874, 0.956773, 0.957662, 0.958542, 0.959414, 0.960276, 0.961129, 0.961974, 0.962809, 0.963635, 0.964452, 0.965259, 0.966058, 0.966848, 0.967628, 0.968399, 0.969161, 0.969914, 0.970658, 0.971393, 0.972118, 0.972834, 0.973541, 0.974239, 0.974928, 0.975607, 0.976277, 0.976938, 0.97759, 0.978232, 0.978866, 0.97949, 0.980105, 0.98071, 0.981306, 0.981893, 0.982471, 0.983039, 0.983598, 0.984148, 0.984689, 0.98522, 0.985742, 0.986254, 0.986758, 0.987252, 0.987736, 0.988211, 0.988677, 0.989134, 0.989581, 0.990019, 0.990448, 0.990867, 0.991277, 0.991677, 0.992068, 0.99245, 0.992822, 0.993185, 0.993539, 0.993883, 0.994218, 0.994543, 0.994859, 0.995166, 0.995463, 0.995751, 0.996029, 0.996298, 0.996558, 0.996808, 0.997048, 0.99728, 0.997502, 0.997714, 0.997917, 0.998111, 0.998295, 0.99847, 0.998635, 0.998791, 0.998937, 0.999074, 0.999202, 0.99932, 0.999428, 0.999528, 0.999617, 0.999698, 0.999768, 0.99983, 0.999882, 0.999924, 0.999957, 0.999981, 0.999995, 1 };
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4a42      	ldr	r2, [pc, #264]	; (8001684 <wave_gen+0x130>)
 800157c:	4618      	mov	r0, r3
 800157e:	4611      	mov	r1, r2
 8001580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001584:	461a      	mov	r2, r3
 8001586:	f009 fee9 	bl	800b35c <memcpy>
    if (t == 's') {
 800158a:	f107 030f 	add.w	r3, r7, #15
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b73      	cmp	r3, #115	; 0x73
 8001592:	d16f      	bne.n	8001674 <wave_gen+0x120>
        i = (float)i * speed;
 8001594:	f107 0308 	add.w	r3, r7, #8
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015a2:	463b      	mov	r3, r7
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b4:	ee17 2a90 	vmov	r2, s15
 80015b8:	601a      	str	r2, [r3, #0]
        u_int32_t x = i % 512;
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c4:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
        u_int32_t quadrant = (i % 2048) / 512;
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
        if (quadrant == 0) return sin_table[x] * height;
 80015d8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <wave_gen+0xa8>
 80015e0:	f107 0210 	add.w	r2, r7, #16
 80015e4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fa:	e03d      	b.n	8001678 <wave_gen+0x124>
        else if (quadrant == 1) return sin_table[511 - x] * height;
 80015fc:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001600:	2b01      	cmp	r3, #1
 8001602:	d110      	bne.n	8001626 <wave_gen+0xd2>
 8001604:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001608:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800160c:	3301      	adds	r3, #1
 800160e:	f107 0210 	add.w	r2, r7, #16
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	e028      	b.n	8001678 <wave_gen+0x124>
        else if (quadrant == 2) return -sin_table[x] * height;
 8001626:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 800162a:	2b02      	cmp	r3, #2
 800162c:	d10f      	bne.n	800164e <wave_gen+0xfa>
 800162e:	f107 0210 	add.w	r2, r7, #16
 8001632:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eeb1 7a67 	vneg.f32	s14, s15
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	e014      	b.n	8001678 <wave_gen+0x124>
        else /*if (quadrant == 3)*/ return -sin_table[511 - x] * height;
 800164e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001652:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8001656:	3301      	adds	r3, #1
 8001658:	f107 0210 	add.w	r2, r7, #16
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb1 7a67 	vneg.f32	s14, s15
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	e001      	b.n	8001678 <wave_gen+0x124>
    }
    return 0;
 8001674:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001688 <wave_gen+0x134>
}
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	0800c6b0 	.word	0x0800c6b0
 8001688:	00000000 	.word	0x00000000

0800168c <pedalboard_append>:

// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	f200 80dd 	bhi.w	800185c <pedalboard_append+0x1d0>
        u_int8_t i = p_pb->active_pedals;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	73fb      	strb	r3, [r7, #15]
        p_pb->pedals[i].type = type;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	21c8      	movs	r1, #200	; 0xc8
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	33c4      	adds	r3, #196	; 0xc4
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d113      	bne.n	80016e8 <pedalboard_append+0x5c>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	22c8      	movs	r2, #200	; 0xc8
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	3304      	adds	r3, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fad2 	bl	8000c78 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	21c8      	movs	r1, #200	; 0xc8
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	33c8      	adds	r3, #200	; 0xc8
 80016e2:	4a60      	ldr	r2, [pc, #384]	; (8001864 <pedalboard_append+0x1d8>)
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e0b3      	b.n	8001850 <pedalboard_append+0x1c4>
        }
        else if (type == BITCRUSHER_RS)
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d113      	bne.n	8001716 <pedalboard_append+0x8a>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	22c8      	movs	r2, #200	; 0xc8
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	3304      	adds	r3, #4
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb85 	bl	8000e0c <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	21c8      	movs	r1, #200	; 0xc8
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	33c8      	adds	r3, #200	; 0xc8
 8001710:	4a55      	ldr	r2, [pc, #340]	; (8001868 <pedalboard_append+0x1dc>)
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e09c      	b.n	8001850 <pedalboard_append+0x1c4>
        }
        else if (type == DYN_AMPLIFIER)
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d113      	bne.n	8001744 <pedalboard_append+0xb8>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	22c8      	movs	r2, #200	; 0xc8
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	3304      	adds	r3, #4
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fc4a 	bl	8000fc4 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	21c8      	movs	r1, #200	; 0xc8
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	33c8      	adds	r3, #200	; 0xc8
 800173e:	4a4b      	ldr	r2, [pc, #300]	; (800186c <pedalboard_append+0x1e0>)
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e085      	b.n	8001850 <pedalboard_append+0x1c4>
        }
        else if (type == FUZZ)
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d113      	bne.n	8001772 <pedalboard_append+0xe6>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	22c8      	movs	r2, #200	; 0xc8
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	3304      	adds	r3, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fd57 	bl	800120c <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	21c8      	movs	r1, #200	; 0xc8
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	33c8      	adds	r3, #200	; 0xc8
 800176c:	4a40      	ldr	r2, [pc, #256]	; (8001870 <pedalboard_append+0x1e4>)
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e06e      	b.n	8001850 <pedalboard_append+0x1c4>
        }
        else if (type == LPF)
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d113      	bne.n	80017a0 <pedalboard_append+0x114>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	22c8      	movs	r2, #200	; 0xc8
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	3304      	adds	r3, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fbb2 	bl	8000ef0 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	21c8      	movs	r1, #200	; 0xc8
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	33c8      	adds	r3, #200	; 0xc8
 800179a:	4a36      	ldr	r2, [pc, #216]	; (8001874 <pedalboard_append+0x1e8>)
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e057      	b.n	8001850 <pedalboard_append+0x1c4>
        }
        else if (type == OVERDRIVE)
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d113      	bne.n	80017ce <pedalboard_append+0x142>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	22c8      	movs	r2, #200	; 0xc8
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	3304      	adds	r3, #4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fca1 	bl	80010fc <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	21c8      	movs	r1, #200	; 0xc8
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	33c8      	adds	r3, #200	; 0xc8
 80017c8:	4a2b      	ldr	r2, [pc, #172]	; (8001878 <pedalboard_append+0x1ec>)
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e040      	b.n	8001850 <pedalboard_append+0x1c4>
        }
        else if (type == OVERDRIVE_SQRT)
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d113      	bne.n	80017fc <pedalboard_append+0x170>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	22c8      	movs	r2, #200	; 0xc8
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	3304      	adds	r3, #4
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fc08 	bl	8000ff8 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	21c8      	movs	r1, #200	; 0xc8
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	33c8      	adds	r3, #200	; 0xc8
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <pedalboard_append+0x1f0>)
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e029      	b.n	8001850 <pedalboard_append+0x1c4>
        }
        else if (type == TREMOLO)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d113      	bne.n	800182a <pedalboard_append+0x19e>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	22c8      	movs	r2, #200	; 0xc8
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa8b 	bl	8000d2c <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	21c8      	movs	r1, #200	; 0xc8
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	33c8      	adds	r3, #200	; 0xc8
 8001824:	4a16      	ldr	r2, [pc, #88]	; (8001880 <pedalboard_append+0x1f4>)
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e012      	b.n	8001850 <pedalboard_append+0x1c4>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	22c8      	movs	r2, #200	; 0xc8
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	3304      	adds	r3, #4
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fa5d 	bl	8000cf8 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	21c8      	movs	r1, #200	; 0xc8
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	33c8      	adds	r3, #200	; 0xc8
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <pedalboard_append+0x1f8>)
 800184e:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	701a      	strb	r2, [r3, #0]
    }
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	08000cb5 	.word	0x08000cb5
 8001868:	08000e59 	.word	0x08000e59
 800186c:	08000fd9 	.word	0x08000fd9
 8001870:	080012b1 	.word	0x080012b1
 8001874:	08000f4d 	.word	0x08000f4d
 8001878:	08001185 	.word	0x08001185
 800187c:	0800105d 	.word	0x0800105d
 8001880:	08000d95 	.word	0x08000d95
 8001884:	08000d0d 	.word	0x08000d0d

08001888 <pedalboard_process>:

int16_t pedalboard_process(pedalboard_t *p_pb, int16_t in) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
    float out = (float)in;
 8001894:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a0:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < p_pb->active_pedals; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	72fb      	strb	r3, [r7, #11]
 80018a8:	e017      	b.n	80018da <pedalboard_process+0x52>
        out = p_pb->pedals[i].pedal_process(out, &(p_pb->pedals[i].config));
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	21c8      	movs	r1, #200	; 0xc8
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	33c8      	adds	r3, #200	; 0xc8
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	7afa      	ldrb	r2, [r7, #11]
 80018bc:	21c8      	movs	r1, #200	; 0xc8
 80018be:	fb01 f202 	mul.w	r2, r1, r2
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	440a      	add	r2, r1
 80018c6:	3204      	adds	r2, #4
 80018c8:	4610      	mov	r0, r2
 80018ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ce:	4798      	blx	r3
 80018d0:	ed87 0a03 	vstr	s0, [r7, #12]
    for (u_int8_t i = 0; i < p_pb->active_pedals; i++) {
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	3301      	adds	r3, #1
 80018d8:	72fb      	strb	r3, [r7, #11]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	7afa      	ldrb	r2, [r7, #11]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d3e2      	bcc.n	80018aa <pedalboard_process+0x22>
    }
    return (int16_t)out;
 80018e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ec:	ee17 3a90 	vmov	r3, s15
 80018f0:	b21b      	sxth	r3, r3
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_MspInit+0x4c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x4c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <NMI_Handler+0x4>

08001952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler+0x4>

0800195e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <UsageFault_Handler+0x4>

0800196a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001998:	f000 f8d0 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <OTG_FS_IRQHandler+0x10>)
 80019a6:	f000 fe57 	bl	8002658 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000356c 	.word	0x2000356c

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f009 fc80 	bl	800b2e8 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20020000 	.word	0x20020000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	200000ac 	.word	0x200000ac
 8001a1c:	20003880 	.word	0x20003880

08001a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a4a:	490e      	ldr	r1, [pc, #56]	; (8001a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a60:	4c0b      	ldr	r4, [pc, #44]	; (8001a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a6e:	f7ff ffd7 	bl	8001a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a72:	f009 fc3f 	bl	800b2f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a76:	f7fe fdb7 	bl	80005e8 <main>
  bx  lr    
 8001a7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a88:	0800d168 	.word	0x0800d168
  ldr r2, =_sbss
 8001a8c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a90:	20003880 	.word	0x20003880

08001a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_Init+0x40>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <HAL_Init+0x40>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_Init+0x40>)
 8001aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_Init+0x40>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f94f 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	200f      	movs	r0, #15
 8001ac8:	f000 f808 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff ff16 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f967 	bl	8001dce <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f000 f92f 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000008 	.word	0x20000008
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20001124 	.word	0x20001124

08001b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20001124 	.word	0x20001124

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff ffee 	bl	8001b64 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffde 	bl	8001b64 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff8e 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff29 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff3e 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff8e 	bl	8001cb8 <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff31 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e16b      	b.n	80020dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 815a 	bne.w	80020d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d005      	beq.n	8001e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d130      	bne.n	8001e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d017      	beq.n	8001ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d123      	bne.n	8001f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	08da      	lsrs	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3208      	adds	r2, #8
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80b4 	beq.w	80020d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	4b60      	ldr	r3, [pc, #384]	; (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_GPIO_Init+0x30c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8a:	4a5b      	ldr	r2, [pc, #364]	; (80020f8 <HAL_GPIO_Init+0x310>)
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a52      	ldr	r2, [pc, #328]	; (80020fc <HAL_GPIO_Init+0x314>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02b      	beq.n	800200e <HAL_GPIO_Init+0x226>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a51      	ldr	r2, [pc, #324]	; (8002100 <HAL_GPIO_Init+0x318>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x222>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a50      	ldr	r2, [pc, #320]	; (8002104 <HAL_GPIO_Init+0x31c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x21e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4f      	ldr	r2, [pc, #316]	; (8002108 <HAL_GPIO_Init+0x320>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x21a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4e      	ldr	r2, [pc, #312]	; (800210c <HAL_GPIO_Init+0x324>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x216>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <HAL_GPIO_Init+0x328>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x212>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	; (8002114 <HAL_GPIO_Init+0x32c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x20e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	; (8002118 <HAL_GPIO_Init+0x330>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x20a>
 8001fee:	2307      	movs	r3, #7
 8001ff0:	e00e      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	e00c      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	e00a      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e008      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8001ffe:	2304      	movs	r3, #4
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8002002:	2303      	movs	r3, #3
 8002004:	e004      	b.n	8002010 <HAL_GPIO_Init+0x228>
 8002006:	2302      	movs	r3, #2
 8002008:	e002      	b.n	8002010 <HAL_GPIO_Init+0x228>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_GPIO_Init+0x228>
 800200e:	2300      	movs	r3, #0
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f002 0203 	and.w	r2, r2, #3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4093      	lsls	r3, r2
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002020:	4935      	ldr	r1, [pc, #212]	; (80020f8 <HAL_GPIO_Init+0x310>)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_GPIO_Init+0x334>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002052:	4a32      	ldr	r2, [pc, #200]	; (800211c <HAL_GPIO_Init+0x334>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_GPIO_Init+0x334>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_GPIO_Init+0x334>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_GPIO_Init+0x334>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a6:	4a1d      	ldr	r2, [pc, #116]	; (800211c <HAL_GPIO_Init+0x334>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_GPIO_Init+0x334>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_GPIO_Init+0x334>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3301      	adds	r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b0f      	cmp	r3, #15
 80020e0:	f67f ae90 	bls.w	8001e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40013800 	.word	0x40013800
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800
 8002108:	40020c00 	.word	0x40020c00
 800210c:	40021000 	.word	0x40021000
 8002110:	40021400 	.word	0x40021400
 8002114:	40021800 	.word	0x40021800
 8002118:	40021c00 	.word	0x40021c00
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e001      	b.n	8002142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002184:	b08f      	sub	sp, #60	; 0x3c
 8002186:	af0a      	add	r7, sp, #40	; 0x28
 8002188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e054      	b.n	800223e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f008 fdc0 	bl	800ad34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 f9f8 	bl	80045c8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	687e      	ldr	r6, [r7, #4]
 80021e0:	466d      	mov	r5, sp
 80021e2:	f106 0410 	add.w	r4, r6, #16
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021f6:	1d33      	adds	r3, r6, #4
 80021f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f002 f972 	bl	80044e4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f002 f9ef 	bl	80045ea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	687e      	ldr	r6, [r7, #4]
 8002214:	466d      	mov	r5, sp
 8002216:	f106 0410 	add.w	r4, r6, #16
 800221a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800221e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002222:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002226:	e885 0003 	stmia.w	r5, {r0, r1}
 800222a:	1d33      	adds	r3, r6, #4
 800222c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222e:	6838      	ldr	r0, [r7, #0]
 8002230:	f002 fb56 	bl	80048e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002246 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b089      	sub	sp, #36	; 0x24
 800224a:	af04      	add	r7, sp, #16
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	4608      	mov	r0, r1
 8002250:	4611      	mov	r1, r2
 8002252:	461a      	mov	r2, r3
 8002254:	4603      	mov	r3, r0
 8002256:	70fb      	strb	r3, [r7, #3]
 8002258:	460b      	mov	r3, r1
 800225a:	70bb      	strb	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_HCD_HC_Init+0x28>
 800226a:	2302      	movs	r3, #2
 800226c:	e076      	b.n	800235c <HAL_HCD_HC_Init+0x116>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	333d      	adds	r3, #61	; 0x3d
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3338      	adds	r3, #56	; 0x38
 8002296:	787a      	ldrb	r2, [r7, #1]
 8002298:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3340      	adds	r3, #64	; 0x40
 80022a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022aa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3339      	adds	r3, #57	; 0x39
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	333f      	adds	r3, #63	; 0x3f
 80022cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80022d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	78ba      	ldrb	r2, [r7, #2]
 80022d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022da:	b2d0      	uxtb	r0, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	333a      	adds	r3, #58	; 0x3a
 80022e8:	4602      	mov	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80022ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da09      	bge.n	8002308 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	212c      	movs	r1, #44	; 0x2c
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	4413      	add	r3, r2
 8002300:	333b      	adds	r3, #59	; 0x3b
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
 8002306:	e008      	b.n	800231a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	333b      	adds	r3, #59	; 0x3b
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	333c      	adds	r3, #60	; 0x3c
 8002328:	f897 2020 	ldrb.w	r2, [r7, #32]
 800232c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	787c      	ldrb	r4, [r7, #1]
 8002334:	78ba      	ldrb	r2, [r7, #2]
 8002336:	78f9      	ldrb	r1, [r7, #3]
 8002338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4623      	mov	r3, r4
 800234a:	f002 fc43 	bl	8004bd4 <USB_HC_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_HCD_HC_Halt+0x1e>
 800237e:	2302      	movs	r3, #2
 8002380:	e00f      	b.n	80023a2 <HAL_HCD_HC_Halt+0x3e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f002 fe7f 	bl	8005096 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	4608      	mov	r0, r1
 80023b6:	4611      	mov	r1, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	70fb      	strb	r3, [r7, #3]
 80023be:	460b      	mov	r3, r1
 80023c0:	70bb      	strb	r3, [r7, #2]
 80023c2:	4613      	mov	r3, r2
 80023c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333b      	adds	r3, #59	; 0x3b
 80023d4:	78ba      	ldrb	r2, [r7, #2]
 80023d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	333f      	adds	r3, #63	; 0x3f
 80023e6:	787a      	ldrb	r2, [r7, #1]
 80023e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023ea:	7c3b      	ldrb	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d112      	bne.n	8002416 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3342      	adds	r3, #66	; 0x42
 80023fe:	2203      	movs	r2, #3
 8002400:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	333d      	adds	r3, #61	; 0x3d
 8002410:	7f3a      	ldrb	r2, [r7, #28]
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	e008      	b.n	8002428 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3342      	adds	r3, #66	; 0x42
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b03      	cmp	r3, #3
 800242c:	f200 80c6 	bhi.w	80025bc <HAL_HCD_HC_SubmitRequest+0x210>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	080025a9 	.word	0x080025a9
 8002440:	080024ad 	.word	0x080024ad
 8002444:	0800252b 	.word	0x0800252b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002448:	7c3b      	ldrb	r3, [r7, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	f040 80b8 	bne.w	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002450:	78bb      	ldrb	r3, [r7, #2]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f040 80b4 	bne.w	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002458:	8b3b      	ldrh	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	3355      	adds	r3, #85	; 0x55
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3355      	adds	r3, #85	; 0x55
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3342      	adds	r3, #66	; 0x42
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002496:	e093      	b.n	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3342      	adds	r3, #66	; 0x42
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
      break;
 80024aa:	e089      	b.n	80025c0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024ac:	78bb      	ldrb	r3, [r7, #2]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11d      	bne.n	80024ee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3355      	adds	r3, #85	; 0x55
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3342      	adds	r3, #66	; 0x42
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024d8:	e073      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3342      	adds	r3, #66	; 0x42
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
      break;
 80024ec:	e069      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3354      	adds	r3, #84	; 0x54
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3342      	adds	r3, #66	; 0x42
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
      break;
 8002514:	e055      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3342      	adds	r3, #66	; 0x42
 8002524:	2202      	movs	r2, #2
 8002526:	701a      	strb	r2, [r3, #0]
      break;
 8002528:	e04b      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800252a:	78bb      	ldrb	r3, [r7, #2]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11d      	bne.n	800256c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3355      	adds	r3, #85	; 0x55
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3342      	adds	r3, #66	; 0x42
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002556:	e034      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3342      	adds	r3, #66	; 0x42
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
      break;
 800256a:	e02a      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3354      	adds	r3, #84	; 0x54
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3342      	adds	r3, #66	; 0x42
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
      break;
 8002592:	e016      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3342      	adds	r3, #66	; 0x42
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
      break;
 80025a6:	e00c      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3342      	adds	r3, #66	; 0x42
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80025bc:	bf00      	nop
 80025be:	e000      	b.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80025c0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3344      	adds	r3, #68	; 0x44
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	8b3a      	ldrh	r2, [r7, #24]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	202c      	movs	r0, #44	; 0x2c
 80025dc:	fb00 f303 	mul.w	r3, r0, r3
 80025e0:	440b      	add	r3, r1
 80025e2:	334c      	adds	r3, #76	; 0x4c
 80025e4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3360      	adds	r3, #96	; 0x60
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3350      	adds	r3, #80	; 0x50
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3339      	adds	r3, #57	; 0x39
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3361      	adds	r3, #97	; 0x61
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	222c      	movs	r2, #44	; 0x2c
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	3338      	adds	r3, #56	; 0x38
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	18d1      	adds	r1, r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	f002 fbd2 	bl	8004df0 <USB_HC_StartXfer>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f002 f8f5 	bl	800485e <USB_GetMode>
 8002674:	4603      	mov	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 80f6 	bne.w	8002868 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f002 f8d9 	bl	8004838 <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80ec 	beq.w	8002866 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f002 f8d0 	bl	8004838 <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026a2:	d104      	bne.n	80026ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f002 f8c0 	bl	8004838 <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c2:	d104      	bne.n	80026ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f002 f8b0 	bl	8004838 <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e2:	d104      	bne.n	80026ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 f8a0 	bl	8004838 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d103      	bne.n	800270a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2202      	movs	r2, #2
 8002708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f002 f892 	bl	8004838 <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800271a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271e:	d11c      	bne.n	800275a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002728:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800273a:	2110      	movs	r1, #16
 800273c:	6938      	ldr	r0, [r7, #16]
 800273e:	f001 ffa1 	bl	8004684 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002742:	6938      	ldr	r0, [r7, #16]
 8002744:	f001 ffc2 	bl	80046cc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f002 f97a 	bl	8004a48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f008 fb6b 	bl	800ae30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f002 f86a 	bl	8004838 <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276e:	d102      	bne.n	8002776 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f001 fa03 	bl	8003b7c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f002 f85c 	bl	8004838 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d106      	bne.n	8002798 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f008 fb34 	bl	800adf8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2208      	movs	r2, #8
 8002796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f002 f84b 	bl	8004838 <USB_ReadInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	d101      	bne.n	80027b0 <HAL_HCD_IRQHandler+0x158>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_HCD_IRQHandler+0x15a>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d012      	beq.n	80027dc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699a      	ldr	r2, [r3, #24]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0210 	bic.w	r2, r2, #16
 80027c4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f001 f906 	bl	80039d8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0210 	orr.w	r2, r2, #16
 80027da:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 f829 	bl	8004838 <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027f0:	d13a      	bne.n	8002868 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fc3c 	bl	8005074 <USB_HC_ReadInterrupt>
 80027fc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e025      	b.n	8002850 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800282e:	d106      	bne.n	800283e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8ab 	bl	8002992 <HCD_HC_IN_IRQHandler>
 800283c:	e005      	b.n	800284a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fcc6 	bl	80031d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3d4      	bcc.n	8002804 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002862:	615a      	str	r2, [r3, #20]
 8002864:	e000      	b.n	8002868 <HAL_HCD_IRQHandler+0x210>
      return;
 8002866:	bf00      	nop
    }
  }
}
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_HCD_Start+0x16>
 8002880:	2302      	movs	r3, #2
 8002882:	e013      	b.n	80028ac <HAL_HCD_Start+0x3e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f002 f93c 	bl	8004b10 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f001 fe82 	bl	80045a6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_HCD_Stop+0x16>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e00d      	b.n	80028e6 <HAL_HCD_Stop+0x32>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fd36 	bl	8005348 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 f8de 	bl	8004abc <USB_ResetPort>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3350      	adds	r3, #80	; 0x50
 800294c:	681b      	ldr	r3, [r3, #0]
}
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f002 f922 	bl	8004bb0 <USB_GetCurrentFrame>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f002 f8fd 	bl	8004b82 <USB_GetHostSpeed>
 8002988:	4603      	mov	r3, r0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d119      	bne.n	80029f6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	461a      	mov	r2, r3
 80029d0:	2304      	movs	r3, #4
 80029d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	0151      	lsls	r1, r2, #5
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	440a      	add	r2, r1
 80029ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ee:	f043 0302 	orr.w	r3, r3, #2
 80029f2:	60d3      	str	r3, [r2, #12]
 80029f4:	e101      	b.n	8002bfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0c:	d12b      	bne.n	8002a66 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3361      	adds	r3, #97	; 0x61
 8002a30:	2207      	movs	r2, #7
 8002a32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	0151      	lsls	r1, r2, #5
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	440a      	add	r2, r1
 8002a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 fb19 	bl	8005096 <USB_HC_Halt>
 8002a64:	e0c9      	b.n	8002bfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d109      	bne.n	8002a90 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	6093      	str	r3, [r2, #8]
 8002a8e:	e0b4      	b.n	8002bfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d133      	bne.n	8002b0e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	0151      	lsls	r1, r2, #5
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	440a      	add	r2, r1
 8002abc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3361      	adds	r3, #97	; 0x61
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	461a      	mov	r2, r3
 8002af8:	2308      	movs	r3, #8
 8002afa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fac5 	bl	8005096 <USB_HC_Halt>
 8002b0c:	e075      	b.n	8002bfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b24:	d134      	bne.n	8002b90 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	0151      	lsls	r1, r2, #5
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	440a      	add	r2, r1
 8002b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3361      	adds	r3, #97	; 0x61
 8002b54:	2208      	movs	r2, #8
 8002b56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	461a      	mov	r2, r3
 8002b66:	2310      	movs	r3, #16
 8002b68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b7c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f002 fa84 	bl	8005096 <USB_HC_Halt>
 8002b8e:	e034      	b.n	8002bfa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d129      	bne.n	8002bfa <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	0151      	lsls	r1, r2, #5
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	440a      	add	r2, r1
 8002bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3361      	adds	r3, #97	; 0x61
 8002bd4:	2206      	movs	r2, #6
 8002bd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 fa57 	bl	8005096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c10:	d122      	bne.n	8002c58 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	0151      	lsls	r1, r2, #5
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	440a      	add	r2, r1
 8002c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fa2a 	bl	8005096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c54:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c56:	e2ba      	b.n	80031ce <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 811b 	bne.w	8002ea6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d019      	beq.n	8002cac <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3348      	adds	r3, #72	; 0x48
 8002c86:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	0159      	lsls	r1, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c9a:	1ad2      	subs	r2, r2, r3
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	202c      	movs	r0, #44	; 0x2c
 8002ca2:	fb00 f303 	mul.w	r3, r0, r3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3350      	adds	r3, #80	; 0x50
 8002caa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3361      	adds	r3, #97	; 0x61
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	335c      	adds	r3, #92	; 0x5c
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2301      	movs	r3, #1
 8002ce0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	333f      	adds	r3, #63	; 0x3f
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	333f      	adds	r3, #63	; 0x3f
 8002d04:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d121      	bne.n	8002d4e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 f9ae 	bl	8005096 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2310      	movs	r3, #16
 8002d4a:	6093      	str	r3, [r2, #8]
 8002d4c:	e066      	b.n	8002e1c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	333f      	adds	r3, #63	; 0x3f
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d127      	bne.n	8002db2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	0151      	lsls	r1, r2, #5
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	440a      	add	r2, r1
 8002d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d80:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3360      	adds	r3, #96	; 0x60
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	b2d9      	uxtb	r1, r3
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	202c      	movs	r0, #44	; 0x2c
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3360      	adds	r3, #96	; 0x60
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f008 f84e 	bl	800ae4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002db0:	e034      	b.n	8002e1c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	333f      	adds	r3, #63	; 0x3f
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d12a      	bne.n	8002e1c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3354      	adds	r3, #84	; 0x54
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	f083 0301 	eor.w	r3, r3, #1
 8002dec:	b2d8      	uxtb	r0, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3354      	adds	r3, #84	; 0x54
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	b2d9      	uxtb	r1, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	202c      	movs	r0, #44	; 0x2c
 8002e0a:	fb00 f303 	mul.w	r3, r0, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3360      	adds	r3, #96	; 0x60
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f008 f818 	bl	800ae4c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d12b      	bne.n	8002e7c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3348      	adds	r3, #72	; 0x48
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	202c      	movs	r0, #44	; 0x2c
 8002e3a:	fb00 f202 	mul.w	r2, r0, r2
 8002e3e:	440a      	add	r2, r1
 8002e40:	3240      	adds	r2, #64	; 0x40
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 81be 	beq.w	80031ce <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3354      	adds	r3, #84	; 0x54
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2d8      	uxtb	r0, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3354      	adds	r3, #84	; 0x54
 8002e76:	4602      	mov	r2, r0
 8002e78:	701a      	strb	r2, [r3, #0]
}
 8002e7a:	e1a8      	b.n	80031ce <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3354      	adds	r3, #84	; 0x54
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2d8      	uxtb	r0, r3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3354      	adds	r3, #84	; 0x54
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	701a      	strb	r2, [r3, #0]
}
 8002ea4:	e193      	b.n	80031ce <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f040 8106 	bne.w	80030ca <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	0151      	lsls	r1, r2, #5
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed8:	f023 0302 	bic.w	r3, r3, #2
 8002edc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3361      	adds	r3, #97	; 0x61
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d109      	bne.n	8002f06 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	e0c9      	b.n	800309a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3361      	adds	r3, #97	; 0x61
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d109      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3360      	adds	r3, #96	; 0x60
 8002f28:	2205      	movs	r2, #5
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e0b5      	b.n	800309a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3361      	adds	r3, #97	; 0x61
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d009      	beq.n	8002f56 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3361      	adds	r3, #97	; 0x61
 8002f50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d150      	bne.n	8002ff8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	335c      	adds	r3, #92	; 0x5c
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	202c      	movs	r0, #44	; 0x2c
 8002f6e:	fb00 f303 	mul.w	r3, r0, r3
 8002f72:	440b      	add	r3, r1
 8002f74:	335c      	adds	r3, #92	; 0x5c
 8002f76:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	335c      	adds	r3, #92	; 0x5c
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d912      	bls.n	8002fb2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	335c      	adds	r3, #92	; 0x5c
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3360      	adds	r3, #96	; 0x60
 8002fac:	2204      	movs	r2, #4
 8002fae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fb0:	e073      	b.n	800309a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3360      	adds	r3, #96	; 0x60
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fda:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fe2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ff6:	e050      	b.n	800309a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3361      	adds	r3, #97	; 0x61
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d122      	bne.n	8003052 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	3360      	adds	r3, #96	; 0x60
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003034:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800303c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e023      	b.n	800309a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3361      	adds	r3, #97	; 0x61
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b07      	cmp	r3, #7
 8003064:	d119      	bne.n	800309a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	335c      	adds	r3, #92	; 0x5c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	202c      	movs	r0, #44	; 0x2c
 800307e:	fb00 f303 	mul.w	r3, r0, r3
 8003082:	440b      	add	r3, r1
 8003084:	335c      	adds	r3, #92	; 0x5c
 8003086:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3360      	adds	r3, #96	; 0x60
 8003096:	2204      	movs	r2, #4
 8003098:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	461a      	mov	r2, r3
 80030a8:	2302      	movs	r3, #2
 80030aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	b2d9      	uxtb	r1, r3
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	202c      	movs	r0, #44	; 0x2c
 80030b6:	fb00 f303 	mul.w	r3, r0, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3360      	adds	r3, #96	; 0x60
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f007 fec2 	bl	800ae4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030c8:	e081      	b.n	80031ce <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d176      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	333f      	adds	r3, #63	; 0x3f
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d121      	bne.n	8003138 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	335c      	adds	r3, #92	; 0x5c
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	0151      	lsls	r1, r2, #5
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	440a      	add	r2, r1
 800311c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f001 ffb0 	bl	8005096 <USB_HC_Halt>
 8003136:	e041      	b.n	80031bc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	333f      	adds	r3, #63	; 0x3f
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d009      	beq.n	8003160 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	333f      	adds	r3, #63	; 0x3f
 800315a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800315c:	2b02      	cmp	r3, #2
 800315e:	d12d      	bne.n	80031bc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	335c      	adds	r3, #92	; 0x5c
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d120      	bne.n	80031bc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	3361      	adds	r3, #97	; 0x61
 8003188:	2203      	movs	r2, #3
 800318a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	0151      	lsls	r1, r2, #5
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	440a      	add	r2, r1
 80031a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 ff6d 	bl	8005096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2310      	movs	r3, #16
 80031cc:	6093      	str	r3, [r2, #8]
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d119      	bne.n	800323a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	461a      	mov	r2, r3
 8003214:	2304      	movs	r3, #4
 8003216:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	0151      	lsls	r1, r2, #5
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	440a      	add	r2, r1
 800322e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003238:	e3ca      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b20      	cmp	r3, #32
 800324e:	d13e      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	461a      	mov	r2, r3
 800325e:	2320      	movs	r3, #32
 8003260:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	333d      	adds	r3, #61	; 0x3d
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	f040 83ac 	bne.w	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	333d      	adds	r3, #61	; 0x3d
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	212c      	movs	r1, #44	; 0x2c
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	3360      	adds	r3, #96	; 0x60
 8003298:	2202      	movs	r2, #2
 800329a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	0151      	lsls	r1, r2, #5
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	440a      	add	r2, r1
 80032b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fee5 	bl	8005096 <USB_HC_Halt>
}
 80032cc:	e380      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d122      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	0151      	lsls	r1, r2, #5
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	440a      	add	r2, r1
 80032fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f001 fec0 	bl	8005096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003322:	461a      	mov	r2, r3
 8003324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003328:	6093      	str	r3, [r2, #8]
}
 800332a:	e351      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d150      	bne.n	80033e4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	335c      	adds	r3, #92	; 0x5c
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d111      	bne.n	800338e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	333d      	adds	r3, #61	; 0x3d
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	461a      	mov	r2, r3
 800338a:	2340      	movs	r3, #64	; 0x40
 800338c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	0151      	lsls	r1, r2, #5
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	440a      	add	r2, r1
 80033a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fe6c 	bl	8005096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	2301      	movs	r3, #1
 80033ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3361      	adds	r3, #97	; 0x61
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
}
 80033e2:	e2f5      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d13c      	bne.n	8003474 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	3361      	adds	r3, #97	; 0x61
 8003408:	2204      	movs	r2, #4
 800340a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	333d      	adds	r3, #61	; 0x3d
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	335c      	adds	r3, #92	; 0x5c
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	440a      	add	r2, r1
 8003446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800344a:	f043 0302 	orr.w	r3, r3, #2
 800344e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fe1b 	bl	8005096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	2340      	movs	r3, #64	; 0x40
 8003470:	6093      	str	r3, [r2, #8]
}
 8003472:	e2ad      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b08      	cmp	r3, #8
 8003488:	d12a      	bne.n	80034e0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	461a      	mov	r2, r3
 8003498:	2308      	movs	r3, #8
 800349a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	0151      	lsls	r1, r2, #5
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	440a      	add	r2, r1
 80034b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 fde5 	bl	8005096 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3361      	adds	r3, #97	; 0x61
 80034da:	2205      	movs	r2, #5
 80034dc:	701a      	strb	r2, [r3, #0]
}
 80034de:	e277      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d150      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	212c      	movs	r1, #44	; 0x2c
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	335c      	adds	r3, #92	; 0x5c
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3361      	adds	r3, #97	; 0x61
 8003516:	2203      	movs	r2, #3
 8003518:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	333d      	adds	r3, #61	; 0x3d
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d112      	bne.n	8003554 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	333c      	adds	r3, #60	; 0x3c
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d108      	bne.n	8003554 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	333d      	adds	r3, #61	; 0x3d
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	0151      	lsls	r1, r2, #5
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	440a      	add	r2, r1
 800356a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800356e:	f043 0302 	orr.w	r3, r3, #2
 8003572:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fd89 	bl	8005096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	2310      	movs	r3, #16
 8003594:	6093      	str	r3, [r2, #8]
}
 8003596:	e21b      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d174      	bne.n	8003698 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d121      	bne.n	80035fa <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	3361      	adds	r3, #97	; 0x61
 80035c4:	2206      	movs	r2, #6
 80035c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	0151      	lsls	r1, r2, #5
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	440a      	add	r2, r1
 80035de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fd4f 	bl	8005096 <USB_HC_Halt>
 80035f8:	e044      	b.n	8003684 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	212c      	movs	r1, #44	; 0x2c
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4413      	add	r3, r2
 8003606:	335c      	adds	r3, #92	; 0x5c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	202c      	movs	r0, #44	; 0x2c
 8003612:	fb00 f303 	mul.w	r3, r0, r3
 8003616:	440b      	add	r3, r1
 8003618:	335c      	adds	r3, #92	; 0x5c
 800361a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	335c      	adds	r3, #92	; 0x5c
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d920      	bls.n	8003672 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	335c      	adds	r3, #92	; 0x5c
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	3360      	adds	r3, #96	; 0x60
 8003650:	2204      	movs	r2, #4
 8003652:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	b2d9      	uxtb	r1, r3
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	202c      	movs	r0, #44	; 0x2c
 800365e:	fb00 f303 	mul.w	r3, r0, r3
 8003662:	4413      	add	r3, r2
 8003664:	3360      	adds	r3, #96	; 0x60
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f007 fbee 	bl	800ae4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003670:	e008      	b.n	8003684 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	3360      	adds	r3, #96	; 0x60
 8003680:	2202      	movs	r2, #2
 8003682:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	461a      	mov	r2, r3
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	6093      	str	r3, [r2, #8]
}
 8003696:	e19b      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d134      	bne.n	800371a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	0151      	lsls	r1, r2, #5
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	440a      	add	r2, r1
 80036c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ca:	f043 0302 	orr.w	r3, r3, #2
 80036ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fcdb 	bl	8005096 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	2310      	movs	r3, #16
 80036f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	461a      	mov	r2, r3
 8003700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003704:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	3361      	adds	r3, #97	; 0x61
 8003714:	2208      	movs	r2, #8
 8003716:	701a      	strb	r2, [r3, #0]
}
 8003718:	e15a      	b.n	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	f040 814f 	bne.w	80039d0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	440a      	add	r2, r1
 8003748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800374c:	f023 0302 	bic.w	r3, r3, #2
 8003750:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	3361      	adds	r3, #97	; 0x61
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d17d      	bne.n	8003862 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3360      	adds	r3, #96	; 0x60
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	333f      	adds	r3, #63	; 0x3f
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d00a      	beq.n	80037a2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	333f      	adds	r3, #63	; 0x3f
 800379a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800379c:	2b03      	cmp	r3, #3
 800379e:	f040 8100 	bne.w	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d113      	bne.n	80037d2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	3355      	adds	r3, #85	; 0x55
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	f083 0301 	eor.w	r3, r3, #1
 80037be:	b2d8      	uxtb	r0, r3
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	3355      	adds	r3, #85	; 0x55
 80037ce:	4602      	mov	r2, r0
 80037d0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	f040 80e3 	bne.w	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	334c      	adds	r3, #76	; 0x4c
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80d8 	beq.w	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	334c      	adds	r3, #76	; 0x4c
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	202c      	movs	r0, #44	; 0x2c
 8003808:	fb00 f202 	mul.w	r2, r0, r2
 800380c:	440a      	add	r2, r1
 800380e:	3240      	adds	r2, #64	; 0x40
 8003810:	8812      	ldrh	r2, [r2, #0]
 8003812:	4413      	add	r3, r2
 8003814:	3b01      	subs	r3, #1
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	202c      	movs	r0, #44	; 0x2c
 800381c:	fb00 f202 	mul.w	r2, r0, r2
 8003820:	440a      	add	r2, r1
 8003822:	3240      	adds	r2, #64	; 0x40
 8003824:	8812      	ldrh	r2, [r2, #0]
 8003826:	fbb3 f3f2 	udiv	r3, r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80b5 	beq.w	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3355      	adds	r3, #85	; 0x55
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	f083 0301 	eor.w	r3, r3, #1
 800384c:	b2d8      	uxtb	r0, r3
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	3355      	adds	r3, #85	; 0x55
 800385c:	4602      	mov	r2, r0
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e09f      	b.n	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	3361      	adds	r3, #97	; 0x61
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d109      	bne.n	800388a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	3360      	adds	r3, #96	; 0x60
 8003884:	2202      	movs	r2, #2
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e08b      	b.n	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	3361      	adds	r3, #97	; 0x61
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d109      	bne.n	80038b2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3360      	adds	r3, #96	; 0x60
 80038ac:	2202      	movs	r2, #2
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e077      	b.n	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	212c      	movs	r1, #44	; 0x2c
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	3361      	adds	r3, #97	; 0x61
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d109      	bne.n	80038da <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3360      	adds	r3, #96	; 0x60
 80038d4:	2205      	movs	r2, #5
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e063      	b.n	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3361      	adds	r3, #97	; 0x61
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d009      	beq.n	8003902 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	3361      	adds	r3, #97	; 0x61
 80038fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d14f      	bne.n	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	335c      	adds	r3, #92	; 0x5c
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	202c      	movs	r0, #44	; 0x2c
 800391a:	fb00 f303 	mul.w	r3, r0, r3
 800391e:	440b      	add	r3, r1
 8003920:	335c      	adds	r3, #92	; 0x5c
 8003922:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	335c      	adds	r3, #92	; 0x5c
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d912      	bls.n	800395e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	335c      	adds	r3, #92	; 0x5c
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	3360      	adds	r3, #96	; 0x60
 8003958:	2204      	movs	r2, #4
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e021      	b.n	80039a2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	3360      	adds	r3, #96	; 0x60
 800396c:	2202      	movs	r2, #2
 800396e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003986:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800398e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399c:	461a      	mov	r2, r3
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	461a      	mov	r2, r3
 80039b0:	2302      	movs	r3, #2
 80039b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	b2d9      	uxtb	r1, r3
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	202c      	movs	r0, #44	; 0x2c
 80039be:	fb00 f303 	mul.w	r3, r0, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3360      	adds	r3, #96	; 0x60
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f007 fa3e 	bl	800ae4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039d0:	bf00      	nop
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	; 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	0c5b      	lsrs	r3, r3, #17
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d004      	beq.n	8003a1e <HCD_RXQLVL_IRQHandler+0x46>
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	f000 80a9 	beq.w	8003b6e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a1c:	e0aa      	b.n	8003b74 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a6 	beq.w	8003b72 <HCD_RXQLVL_IRQHandler+0x19a>
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3344      	adds	r3, #68	; 0x44
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 809b 	beq.w	8003b72 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	3350      	adds	r3, #80	; 0x50
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	441a      	add	r2, r3
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	202c      	movs	r0, #44	; 0x2c
 8003a56:	fb00 f303 	mul.w	r3, r0, r3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	334c      	adds	r3, #76	; 0x4c
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d87a      	bhi.n	8003b5a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3344      	adds	r3, #68	; 0x44
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f000 fe83 	bl	8004788 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	212c      	movs	r1, #44	; 0x2c
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3344      	adds	r3, #68	; 0x44
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	441a      	add	r2, r3
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	202c      	movs	r0, #44	; 0x2c
 8003a9c:	fb00 f303 	mul.w	r3, r0, r3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3344      	adds	r3, #68	; 0x44
 8003aa4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3350      	adds	r3, #80	; 0x50
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	441a      	add	r2, r3
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	202c      	movs	r0, #44	; 0x2c
 8003ac0:	fb00 f303 	mul.w	r3, r0, r3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3350      	adds	r3, #80	; 0x50
 8003ac8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	0cdb      	lsrs	r3, r3, #19
 8003ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ade:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3340      	adds	r3, #64	; 0x40
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d13c      	bne.n	8003b72 <HCD_RXQLVL_IRQHandler+0x19a>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d039      	beq.n	8003b72 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b14:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b1c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3354      	adds	r3, #84	; 0x54
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2d8      	uxtb	r0, r3
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3354      	adds	r3, #84	; 0x54
 8003b54:	4602      	mov	r2, r0
 8003b56:	701a      	strb	r2, [r3, #0]
      break;
 8003b58:	e00b      	b.n	8003b72 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	3360      	adds	r3, #96	; 0x60
 8003b68:	2204      	movs	r2, #4
 8003b6a:	701a      	strb	r2, [r3, #0]
      break;
 8003b6c:	e001      	b.n	8003b72 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003b72:	bf00      	nop
  }
}
 8003b74:	bf00      	nop
 8003b76:	3728      	adds	r7, #40	; 0x28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ba8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d10b      	bne.n	8003bcc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d102      	bne.n	8003bc4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f007 f928 	bl	800ae14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f043 0302 	orr.w	r3, r3, #2
 8003bca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d132      	bne.n	8003c3c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f043 0308 	orr.w	r3, r3, #8
 8003bdc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d126      	bne.n	8003c36 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d113      	bne.n	8003c18 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003bf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bfa:	d106      	bne.n	8003c0a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2102      	movs	r1, #2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 ff20 	bl	8004a48 <USB_InitFSLSPClkSel>
 8003c08:	e011      	b.n	8003c2e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 ff19 	bl	8004a48 <USB_InitFSLSPClkSel>
 8003c16:	e00a      	b.n	8003c2e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c26:	461a      	mov	r2, r3
 8003c28:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c2c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f007 f91a 	bl	800ae68 <HAL_HCD_PortEnabled_Callback>
 8003c34:	e002      	b.n	8003c3c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f007 f924 	bl	800ae84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d103      	bne.n	8003c4e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f043 0320 	orr.w	r3, r3, #32
 8003c4c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6013      	str	r3, [r2, #0]
}
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e264      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d075      	beq.n	8003d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c82:	4ba3      	ldr	r3, [pc, #652]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d00c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8e:	4ba0      	ldr	r3, [pc, #640]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d112      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9a:	4b9d      	ldr	r3, [pc, #628]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	4b99      	ldr	r3, [pc, #612]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05b      	beq.n	8003d6c <HAL_RCC_OscConfig+0x108>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d157      	bne.n	8003d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e23f      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc8:	d106      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x74>
 8003cca:	4b91      	ldr	r3, [pc, #580]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a90      	ldr	r2, [pc, #576]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e01d      	b.n	8003d14 <HAL_RCC_OscConfig+0xb0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x98>
 8003ce2:	4b8b      	ldr	r3, [pc, #556]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a8a      	ldr	r2, [pc, #552]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b88      	ldr	r3, [pc, #544]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a87      	ldr	r2, [pc, #540]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xb0>
 8003cfc:	4b84      	ldr	r3, [pc, #528]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a83      	ldr	r2, [pc, #524]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b81      	ldr	r3, [pc, #516]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a80      	ldr	r2, [pc, #512]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fd ff22 	bl	8001b64 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fd ff1e 	bl	8001b64 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e204      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b76      	ldr	r3, [pc, #472]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xc0>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd ff0e 	bl	8001b64 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fd ff0a 	bl	8001b64 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1f0      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	4b6c      	ldr	r3, [pc, #432]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0xe8>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d063      	beq.n	8003e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7a:	4b65      	ldr	r3, [pc, #404]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d86:	4b62      	ldr	r3, [pc, #392]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d11c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d92:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d116      	bne.n	8003dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9e:	4b5c      	ldr	r3, [pc, #368]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_RCC_OscConfig+0x152>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1c4      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db6:	4b56      	ldr	r3, [pc, #344]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4952      	ldr	r1, [pc, #328]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dca:	e03a      	b.n	8003e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d020      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd4:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_RCC_OscConfig+0x2b0>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd fec3 	bl	8001b64 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de2:	f7fd febf 	bl	8001b64 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e1a5      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4940      	ldr	r1, [pc, #256]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]
 8003e14:	e015      	b.n	8003e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCC_OscConfig+0x2b0>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fea2 	bl	8001b64 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e24:	f7fd fe9e 	bl	8001b64 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e184      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e36:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d030      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e56:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <HAL_RCC_OscConfig+0x2b4>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fd fe82 	bl	8001b64 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e64:	f7fd fe7e 	bl	8001b64 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e164      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e76:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x200>
 8003e82:	e015      	b.n	8003eb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e84:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_OscConfig+0x2b4>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8a:	f7fd fe6b 	bl	8001b64 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e92:	f7fd fe67 	bl	8001b64 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e14d      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80a0 	beq.w	8003ffe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ede:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x2b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d121      	bne.n	8003f3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_RCC_OscConfig+0x2b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <HAL_RCC_OscConfig+0x2b8>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fd fe2d 	bl	8001b64 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e011      	b.n	8003f32 <HAL_RCC_OscConfig+0x2ce>
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	42470000 	.word	0x42470000
 8003f18:	42470e80 	.word	0x42470e80
 8003f1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7fd fe20 	bl	8001b64 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e106      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f32:	4b85      	ldr	r3, [pc, #532]	; (8004148 <HAL_RCC_OscConfig+0x4e4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
 8003f46:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a80      	ldr	r2, [pc, #512]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x32a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x312>
 8003f5c:	4b7b      	ldr	r3, [pc, #492]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a7a      	ldr	r2, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b78      	ldr	r3, [pc, #480]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a77      	ldr	r2, [pc, #476]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x32a>
 8003f76:	4b75      	ldr	r3, [pc, #468]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	4a74      	ldr	r2, [pc, #464]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	; 0x70
 8003f82:	4b72      	ldr	r3, [pc, #456]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a71      	ldr	r2, [pc, #452]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fd fde5 	bl	8001b64 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fd fde1 	bl	8001b64 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0c5      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x33a>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fd fdcf 	bl	8001b64 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd fdcb 	bl	8001b64 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0af      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b5a      	ldr	r3, [pc, #360]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b56      	ldr	r3, [pc, #344]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a55      	ldr	r2, [pc, #340]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 809b 	beq.w	800413e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004008:	4b50      	ldr	r3, [pc, #320]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d05c      	beq.n	80040ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d141      	bne.n	80040a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b4c      	ldr	r3, [pc, #304]	; (8004150 <HAL_RCC_OscConfig+0x4ec>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fd fd9f 	bl	8001b64 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402a:	f7fd fd9b 	bl	8001b64 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e081      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403c:	4b43      	ldr	r3, [pc, #268]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	019b      	lsls	r3, r3, #6
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	3b01      	subs	r3, #1
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	061b      	lsls	r3, r3, #24
 800406c:	4937      	ldr	r1, [pc, #220]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 800406e:	4313      	orrs	r3, r2
 8004070:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <HAL_RCC_OscConfig+0x4ec>)
 8004074:	2201      	movs	r2, #1
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fd fd74 	bl	8001b64 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004080:	f7fd fd70 	bl	8001b64 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e056      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x41c>
 800409e:	e04e      	b.n	800413e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a0:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_RCC_OscConfig+0x4ec>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fd fd5d 	bl	8001b64 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fd fd59 	bl	8001b64 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e03f      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c0:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x44a>
 80040cc:	e037      	b.n	800413e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e032      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <HAL_RCC_OscConfig+0x4e8>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d028      	beq.n	800413a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d121      	bne.n	800413a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d11a      	bne.n	800413a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800410a:	4013      	ands	r3, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004110:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004112:	4293      	cmp	r3, r2
 8004114:	d111      	bne.n	800413a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	3b01      	subs	r3, #1
 8004124:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d107      	bne.n	800413a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d001      	beq.n	800413e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40007000 	.word	0x40007000
 800414c:	40023800 	.word	0x40023800
 8004150:	42470060 	.word	0x42470060

08004154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0cc      	b.n	8004302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004168:	4b68      	ldr	r3, [pc, #416]	; (800430c <HAL_RCC_ClockConfig+0x1b8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d90c      	bls.n	8004190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004176:	4b65      	ldr	r3, [pc, #404]	; (800430c <HAL_RCC_ClockConfig+0x1b8>)
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417e:	4b63      	ldr	r3, [pc, #396]	; (800430c <HAL_RCC_ClockConfig+0x1b8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0b8      	b.n	8004302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d020      	beq.n	80041de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a8:	4b59      	ldr	r3, [pc, #356]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4a58      	ldr	r2, [pc, #352]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041c0:	4b53      	ldr	r3, [pc, #332]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a52      	ldr	r2, [pc, #328]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041cc:	4b50      	ldr	r3, [pc, #320]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	494d      	ldr	r1, [pc, #308]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d044      	beq.n	8004274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f2:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d119      	bne.n	8004232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e07f      	b.n	8004302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d003      	beq.n	8004212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420e:	2b03      	cmp	r3, #3
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004212:	4b3f      	ldr	r3, [pc, #252]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e06f      	b.n	8004302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004222:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e067      	b.n	8004302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004232:	4b37      	ldr	r3, [pc, #220]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f023 0203 	bic.w	r2, r3, #3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4934      	ldr	r1, [pc, #208]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004244:	f7fd fc8e 	bl	8001b64 <HAL_GetTick>
 8004248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	e00a      	b.n	8004262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424c:	f7fd fc8a 	bl	8001b64 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e04f      	b.n	8004302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004262:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 020c 	and.w	r2, r3, #12
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	429a      	cmp	r2, r3
 8004272:	d1eb      	bne.n	800424c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <HAL_RCC_ClockConfig+0x1b8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d20c      	bcs.n	800429c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004282:	4b22      	ldr	r3, [pc, #136]	; (800430c <HAL_RCC_ClockConfig+0x1b8>)
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b20      	ldr	r3, [pc, #128]	; (800430c <HAL_RCC_ClockConfig+0x1b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e032      	b.n	8004302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4916      	ldr	r1, [pc, #88]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	490e      	ldr	r1, [pc, #56]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042da:	f000 f821 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80042de:	4602      	mov	r2, r0
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	490a      	ldr	r1, [pc, #40]	; (8004314 <HAL_RCC_ClockConfig+0x1c0>)
 80042ec:	5ccb      	ldrb	r3, [r1, r3]
 80042ee:	fa22 f303 	lsr.w	r3, r2, r3
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <HAL_RCC_ClockConfig+0x1c4>)
 80042f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fd fbee 	bl	8001adc <HAL_InitTick>

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023c00 	.word	0x40023c00
 8004310:	40023800 	.word	0x40023800
 8004314:	0800cf04 	.word	0x0800cf04
 8004318:	20000000 	.word	0x20000000
 800431c:	20000004 	.word	0x20000004

08004320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	2300      	movs	r3, #0
 8004332:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004338:	4b67      	ldr	r3, [pc, #412]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d00d      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x40>
 8004344:	2b08      	cmp	r3, #8
 8004346:	f200 80bd 	bhi.w	80044c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0x34>
 800434e:	2b04      	cmp	r3, #4
 8004350:	d003      	beq.n	800435a <HAL_RCC_GetSysClockFreq+0x3a>
 8004352:	e0b7      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004354:	4b61      	ldr	r3, [pc, #388]	; (80044dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004356:	60bb      	str	r3, [r7, #8]
       break;
 8004358:	e0b7      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800435a:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800435c:	60bb      	str	r3, [r7, #8]
      break;
 800435e:	e0b4      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004360:	4b5d      	ldr	r3, [pc, #372]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004368:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800436a:	4b5b      	ldr	r3, [pc, #364]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d04d      	beq.n	8004412 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004376:	4b58      	ldr	r3, [pc, #352]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	099b      	lsrs	r3, r3, #6
 800437c:	461a      	mov	r2, r3
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	ea02 0800 	and.w	r8, r2, r0
 800438e:	ea03 0901 	and.w	r9, r3, r1
 8004392:	4640      	mov	r0, r8
 8004394:	4649      	mov	r1, r9
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	014b      	lsls	r3, r1, #5
 80043a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043a4:	0142      	lsls	r2, r0, #5
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	ebb0 0008 	subs.w	r0, r0, r8
 80043ae:	eb61 0109 	sbc.w	r1, r1, r9
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	018b      	lsls	r3, r1, #6
 80043bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043c0:	0182      	lsls	r2, r0, #6
 80043c2:	1a12      	subs	r2, r2, r0
 80043c4:	eb63 0301 	sbc.w	r3, r3, r1
 80043c8:	f04f 0000 	mov.w	r0, #0
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	00d9      	lsls	r1, r3, #3
 80043d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043d6:	00d0      	lsls	r0, r2, #3
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	eb12 0208 	adds.w	r2, r2, r8
 80043e0:	eb43 0309 	adc.w	r3, r3, r9
 80043e4:	f04f 0000 	mov.w	r0, #0
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	0259      	lsls	r1, r3, #9
 80043ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043f2:	0250      	lsls	r0, r2, #9
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	461a      	mov	r2, r3
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	f7fb ff3c 	bl	8000280 <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4613      	mov	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e04a      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004412:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	099b      	lsrs	r3, r3, #6
 8004418:	461a      	mov	r2, r3
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004422:	f04f 0100 	mov.w	r1, #0
 8004426:	ea02 0400 	and.w	r4, r2, r0
 800442a:	ea03 0501 	and.w	r5, r3, r1
 800442e:	4620      	mov	r0, r4
 8004430:	4629      	mov	r1, r5
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	014b      	lsls	r3, r1, #5
 800443c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004440:	0142      	lsls	r2, r0, #5
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	1b00      	subs	r0, r0, r4
 8004448:	eb61 0105 	sbc.w	r1, r1, r5
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	018b      	lsls	r3, r1, #6
 8004456:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800445a:	0182      	lsls	r2, r0, #6
 800445c:	1a12      	subs	r2, r2, r0
 800445e:	eb63 0301 	sbc.w	r3, r3, r1
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	00d9      	lsls	r1, r3, #3
 800446c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004470:	00d0      	lsls	r0, r2, #3
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	1912      	adds	r2, r2, r4
 8004478:	eb45 0303 	adc.w	r3, r5, r3
 800447c:	f04f 0000 	mov.w	r0, #0
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	0299      	lsls	r1, r3, #10
 8004486:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800448a:	0290      	lsls	r0, r2, #10
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	461a      	mov	r2, r3
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	f7fb fef0 	bl	8000280 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	60bb      	str	r3, [r7, #8]
      break;
 80044c2:	e002      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044c6:	60bb      	str	r3, [r7, #8]
      break;
 80044c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ca:	68bb      	ldr	r3, [r7, #8]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	007a1200 	.word	0x007a1200

080044e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e4:	b084      	sub	sp, #16
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	f107 001c 	add.w	r0, r7, #28
 80044f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d122      	bne.n	8004542 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f9a0 	bl	800487c <USB_CoreReset>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e01a      	b.n	8004578 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f994 	bl	800487c <USB_CoreReset>
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
 800456a:	e005      	b.n	8004578 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10b      	bne.n	8004596 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f043 0206 	orr.w	r2, r3, #6
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f043 0220 	orr.w	r2, r3, #32
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004596:	7bfb      	ldrb	r3, [r7, #15]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a2:	b004      	add	sp, #16
 80045a4:	4770      	bx	lr

080045a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f043 0201 	orr.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 0201 	bic.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d115      	bne.n	8004638 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004618:	2001      	movs	r0, #1
 800461a:	f7fd faaf 	bl	8001b7c <HAL_Delay>
      ms++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f91a 	bl	800485e <USB_GetMode>
 800462a:	4603      	mov	r3, r0
 800462c:	2b01      	cmp	r3, #1
 800462e:	d01e      	beq.n	800466e <USB_SetCurrentMode+0x84>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b31      	cmp	r3, #49	; 0x31
 8004634:	d9f0      	bls.n	8004618 <USB_SetCurrentMode+0x2e>
 8004636:	e01a      	b.n	800466e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d115      	bne.n	800466a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800464a:	2001      	movs	r0, #1
 800464c:	f7fd fa96 	bl	8001b7c <HAL_Delay>
      ms++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f901 	bl	800485e <USB_GetMode>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <USB_SetCurrentMode+0x84>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b31      	cmp	r3, #49	; 0x31
 8004666:	d9f0      	bls.n	800464a <USB_SetCurrentMode+0x60>
 8004668:	e001      	b.n	800466e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e005      	b.n	800467a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b32      	cmp	r3, #50	; 0x32
 8004672:	d101      	bne.n	8004678 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <USB_FlushTxFifo+0x44>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e006      	b.n	80046bc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d0f1      	beq.n	800469e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	00030d40 	.word	0x00030d40

080046cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2210      	movs	r2, #16
 80046dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3301      	adds	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	4a08      	ldr	r2, [pc, #32]	; (8004708 <USB_FlushRxFifo+0x3c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e006      	b.n	80046fc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d0f1      	beq.n	80046de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	00030d40 	.word	0x00030d40

0800470c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	4611      	mov	r1, r2
 8004718:	461a      	mov	r2, r3
 800471a:	460b      	mov	r3, r1
 800471c:	71fb      	strb	r3, [r7, #7]
 800471e:	4613      	mov	r3, r2
 8004720:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800472a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d123      	bne.n	800477a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004732:	88bb      	ldrh	r3, [r7, #4]
 8004734:	3303      	adds	r3, #3
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	e018      	b.n	8004772 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	031a      	lsls	r2, r3, #12
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	4413      	add	r3, r2
 8004748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474c:	461a      	mov	r2, r3
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3301      	adds	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3301      	adds	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	3301      	adds	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	429a      	cmp	r2, r3
 8004778:	d3e2      	bcc.n	8004740 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3724      	adds	r7, #36	; 0x24
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004788:	b480      	push	{r7}
 800478a:	b08b      	sub	sp, #44	; 0x2c
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047ae:	2300      	movs	r3, #0
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	e014      	b.n	80047de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	601a      	str	r2, [r3, #0]
    pDest++;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	3301      	adds	r3, #1
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	3301      	adds	r3, #1
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	3301      	adds	r3, #1
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3301      	adds	r3, #1
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	3301      	adds	r3, #1
 80047dc:	623b      	str	r3, [r7, #32]
 80047de:	6a3a      	ldr	r2, [r7, #32]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d3e6      	bcc.n	80047b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047e6:	8bfb      	ldrh	r3, [r7, #30]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01e      	beq.n	800482a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f6:	461a      	mov	r2, r3
 80047f8:	f107 0310 	add.w	r3, r7, #16
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	b2da      	uxtb	r2, r3
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	701a      	strb	r2, [r3, #0]
      i++;
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	3301      	adds	r3, #1
 8004816:	623b      	str	r3, [r7, #32]
      pDest++;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	3301      	adds	r3, #1
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800481e:	8bfb      	ldrh	r3, [r7, #30]
 8004820:	3b01      	subs	r3, #1
 8004822:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004824:	8bfb      	ldrh	r3, [r7, #30]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ea      	bne.n	8004800 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800482c:	4618      	mov	r0, r3
 800482e:	372c      	adds	r7, #44	; 0x2c
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4013      	ands	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0301 	and.w	r3, r3, #1
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	4a13      	ldr	r2, [pc, #76]	; (80048dc <USB_CoreReset+0x60>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d901      	bls.n	8004898 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e01a      	b.n	80048ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	daf3      	bge.n	8004888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	4a09      	ldr	r2, [pc, #36]	; (80048dc <USB_CoreReset+0x60>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e006      	b.n	80048ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d0f1      	beq.n	80048b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	00030d40 	.word	0x00030d40

080048e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048e0:	b084      	sub	sp, #16
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	f107 001c 	add.w	r0, r7, #28
 80048ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048fc:	461a      	mov	r2, r3
 80048fe:	2300      	movs	r3, #0
 8004900:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10a      	bne.n	800494e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	e014      	b.n	8004978 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800495c:	f023 0304 	bic.w	r3, r3, #4
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e009      	b.n	8004978 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004972:	f023 0304 	bic.w	r3, r3, #4
 8004976:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004978:	2110      	movs	r1, #16
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fe82 	bl	8004684 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fea3 	bl	80046cc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e015      	b.n	80049b8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	461a      	mov	r2, r3
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	461a      	mov	r2, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3301      	adds	r3, #1
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d3e5      	bcc.n	800498c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <USB_HostInit+0x154>)
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <USB_HostInit+0x158>)
 80049ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80049f0:	e009      	b.n	8004a06 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <USB_HostInit+0x15c>)
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a0f      	ldr	r2, [pc, #60]	; (8004a40 <USB_HostInit+0x160>)
 8004a02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f043 0210 	orr.w	r2, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699a      	ldr	r2, [r3, #24]
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <USB_HostInit+0x164>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a30:	b004      	add	sp, #16
 8004a32:	4770      	bx	lr
 8004a34:	01000200 	.word	0x01000200
 8004a38:	00e00300 	.word	0x00e00300
 8004a3c:	00600080 	.word	0x00600080
 8004a40:	004000e0 	.word	0x004000e0
 8004a44:	a3200008 	.word	0xa3200008

08004a48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a90:	461a      	mov	r2, r3
 8004a92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a96:	6053      	str	r3, [r2, #4]
 8004a98:	e009      	b.n	8004aae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d106      	bne.n	8004aae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004aac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004adc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004aec:	2064      	movs	r0, #100	; 0x64
 8004aee:	f7fd f845 	bl	8001b7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004afe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b00:	200a      	movs	r0, #10
 8004b02:	f7fd f83b 	bl	8001b7c <HAL_Delay>

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <USB_DriveVbus+0x44>
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d106      	bne.n	8004b54 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b52:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5e:	d109      	bne.n	8004b74 <USB_DriveVbus+0x64>
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b72:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b085      	sub	sp, #20
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	0c5b      	lsrs	r3, r3, #17
 8004ba0:	f003 0303 	and.w	r3, r3, #3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	b29b      	uxth	r3, r3
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	70fb      	strb	r3, [r7, #3]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70bb      	strb	r3, [r7, #2]
 8004bea:	4613      	mov	r3, r2
 8004bec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d87e      	bhi.n	8004d10 <USB_HC_Init+0x13c>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <USB_HC_Init+0x44>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c29 	.word	0x08004c29
 8004c1c:	08004cd3 	.word	0x08004cd3
 8004c20:	08004c29 	.word	0x08004c29
 8004c24:	08004c95 	.word	0x08004c95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	461a      	mov	r2, r3
 8004c36:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	da10      	bge.n	8004c66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004c64:	e057      	b.n	8004d16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d051      	beq.n	8004d16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c90:	60d3      	str	r3, [r2, #12]
      break;
 8004c92:	e040      	b.n	8004d16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ca6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ca8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	da34      	bge.n	8004d1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	0151      	lsls	r1, r2, #5
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	440a      	add	r2, r1
 8004cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004cd0:	e023      	b.n	8004d1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f240 2325 	movw	r3, #549	; 0x225
 8004ce4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ce6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da17      	bge.n	8004d1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d0e:	e006      	b.n	8004d1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	77fb      	strb	r3, [r7, #31]
      break;
 8004d14:	e004      	b.n	8004d20 <USB_HC_Init+0x14c>
      break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <USB_HC_Init+0x14c>
      break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <USB_HC_Init+0x14c>
      break;
 8004d1e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	6939      	ldr	r1, [r7, #16]
 8004d36:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da03      	bge.n	8004d5a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e001      	b.n	8004d5e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ff0f 	bl	8004b82 <USB_GetHostSpeed>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004d66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d106      	bne.n	8004d7c <USB_HC_Init+0x1a8>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d003      	beq.n	8004d7c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e001      	b.n	8004d80 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d80:	787b      	ldrb	r3, [r7, #1]
 8004d82:	059b      	lsls	r3, r3, #22
 8004d84:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d88:	78bb      	ldrb	r3, [r7, #2]
 8004d8a:	02db      	lsls	r3, r3, #11
 8004d8c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d90:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d96:	049b      	lsls	r3, r3, #18
 8004d98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d9c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004da4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	0159      	lsls	r1, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dbc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004dbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d10f      	bne.n	8004de6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004de4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004de6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08c      	sub	sp, #48	; 0x30
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e0c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02d      	beq.n	8004e76 <USB_HC_StartXfer+0x86>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	791b      	ldrb	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d129      	bne.n	8004e76 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d117      	bne.n	8004e58 <USB_HC_StartXfer+0x68>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	79db      	ldrb	r3, [r3, #7]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <USB_HC_StartXfer+0x48>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	79db      	ldrb	r3, [r3, #7]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d10f      	bne.n	8004e58 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <USB_HC_StartXfer+0x86>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	795b      	ldrb	r3, [r3, #5]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d107      	bne.n	8004e76 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fa2f 	bl	80052d0 <USB_DoPing>
      return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e0f8      	b.n	8005068 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	8912      	ldrh	r2, [r2, #8]
 8004e86:	4413      	add	r3, r2
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	8912      	ldrh	r2, [r2, #8]
 8004e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e92:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004e94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e96:	8b7b      	ldrh	r3, [r7, #26]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d90b      	bls.n	8004eb4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004e9c:	8b7b      	ldrh	r3, [r7, #26]
 8004e9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	8912      	ldrh	r2, [r2, #8]
 8004ea6:	fb02 f203 	mul.w	r2, r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	611a      	str	r2, [r3, #16]
 8004eae:	e001      	b.n	8004eb4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	78db      	ldrb	r3, [r3, #3]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ebc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	8912      	ldrh	r2, [r2, #8]
 8004ec2:	fb02 f203 	mul.w	r2, r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	611a      	str	r2, [r3, #16]
 8004eca:	e003      	b.n	8004ed4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004edc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ede:	04d9      	lsls	r1, r3, #19
 8004ee0:	4b63      	ldr	r3, [pc, #396]	; (8005070 <USB_HC_StartXfer+0x280>)
 8004ee2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ee4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	7a9b      	ldrb	r3, [r3, #10]
 8004eea:	075b      	lsls	r3, r3, #29
 8004eec:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	0148      	lsls	r0, r1, #5
 8004ef4:	6a39      	ldr	r1, [r7, #32]
 8004ef6:	4401      	add	r1, r0
 8004ef8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004efc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004efe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	68d9      	ldr	r1, [r3, #12]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	460a      	mov	r2, r1
 8004f18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	6a3a      	ldr	r2, [r7, #32]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	7e7b      	ldrb	r3, [r7, #25]
 8004f62:	075b      	lsls	r3, r3, #29
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	0148      	lsls	r0, r1, #5
 8004f68:	6a39      	ldr	r1, [r7, #32]
 8004f6a:	4401      	add	r1, r0
 8004f6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f8a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	78db      	ldrb	r3, [r3, #3]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	e003      	b.n	8004fa6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fa4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fac:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fba:	461a      	mov	r2, r3
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e04e      	b.n	8005068 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	78db      	ldrb	r3, [r3, #3]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d149      	bne.n	8005066 <USB_HC_StartXfer+0x276>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d045      	beq.n	8005066 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	79db      	ldrb	r3, [r3, #7]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d830      	bhi.n	8005044 <USB_HC_StartXfer+0x254>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <USB_HC_StartXfer+0x1f8>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08004ff9 	.word	0x08004ff9
 8004fec:	0800501d 	.word	0x0800501d
 8004ff0:	08004ff9 	.word	0x08004ff9
 8004ff4:	0800501d 	.word	0x0800501d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	3303      	adds	r3, #3
 8004ffe:	089b      	lsrs	r3, r3, #2
 8005000:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005002:	8afa      	ldrh	r2, [r7, #22]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	b29b      	uxth	r3, r3
 800500a:	429a      	cmp	r2, r3
 800500c:	d91c      	bls.n	8005048 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	619a      	str	r2, [r3, #24]
        }
        break;
 800501a:	e015      	b.n	8005048 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	3303      	adds	r3, #3
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005026:	8afa      	ldrh	r2, [r7, #22]
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	b29b      	uxth	r3, r3
 8005032:	429a      	cmp	r2, r3
 8005034:	d90a      	bls.n	800504c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]
        }
        break;
 8005042:	e003      	b.n	800504c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005044:	bf00      	nop
 8005046:	e002      	b.n	800504e <USB_HC_StartXfer+0x25e>
        break;
 8005048:	bf00      	nop
 800504a:	e000      	b.n	800504e <USB_HC_StartXfer+0x25e>
        break;
 800504c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	68d9      	ldr	r1, [r3, #12]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	785a      	ldrb	r2, [r3, #1]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	b29b      	uxth	r3, r3
 800505c:	2000      	movs	r0, #0
 800505e:	9000      	str	r0, [sp, #0]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff fb53 	bl	800470c <USB_WritePacket>
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3728      	adds	r7, #40	; 0x28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	1ff80000 	.word	0x1ff80000

08005074 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	b29b      	uxth	r3, r3
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005096:	b480      	push	{r7}
 8005098:	b089      	sub	sp, #36	; 0x24
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	0c9b      	lsrs	r3, r3, #18
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	0fdb      	lsrs	r3, r3, #31
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d104      	bne.n	80050f0 <USB_HC_Halt+0x5a>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e0e8      	b.n	80052c2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <USB_HC_Halt+0x66>
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d173      	bne.n	80051e4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	440a      	add	r2, r1
 8005112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005116:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800511a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 80cb 	bne.w	80052c0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d143      	bne.n	80051be <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	440a      	add	r2, r1
 800514c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005154:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	440a      	add	r2, r1
 800516c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005174:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	440a      	add	r2, r1
 800518c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005190:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005194:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3301      	adds	r3, #1
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a2:	d81d      	bhi.n	80051e0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ba:	d0ec      	beq.n	8005196 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051bc:	e080      	b.n	80052c0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051de:	e06f      	b.n	80052c0 <USB_HC_Halt+0x22a>
            break;
 80051e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051e2:	e06d      	b.n	80052c0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005202:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d143      	bne.n	800529c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	440a      	add	r2, r1
 800522a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005232:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	440a      	add	r2, r1
 800524a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800524e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005252:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	440a      	add	r2, r1
 800526a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800526e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005272:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	3301      	adds	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005280:	d81d      	bhi.n	80052be <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	4413      	add	r3, r2
 800528a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005298:	d0ec      	beq.n	8005274 <USB_HC_Halt+0x1de>
 800529a:	e011      	b.n	80052c0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e000      	b.n	80052c0 <USB_HC_Halt+0x22a>
          break;
 80052be:	bf00      	nop
    }
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3724      	adds	r7, #36	; 0x24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80052e4:	2301      	movs	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	04da      	lsls	r2, r3, #19
 80052ec:	4b15      	ldr	r3, [pc, #84]	; (8005344 <USB_DoPing+0x74>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005300:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005318:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005320:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	461a      	mov	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	1ff80000 	.word	0x1ff80000

08005348 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff f935 	bl	80045c8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800535e:	2110      	movs	r1, #16
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff f98f 	bl	8004684 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff f9b0 	bl	80046cc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800536c:	2300      	movs	r3, #0
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e01f      	b.n	80053b2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005388:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005390:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005398:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	461a      	mov	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3301      	adds	r3, #1
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b0f      	cmp	r3, #15
 80053b6:	d9dc      	bls.n	8005372 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	e034      	b.n	8005428 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	461a      	mov	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	3301      	adds	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005404:	d80c      	bhi.n	8005420 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800541c:	d0ec      	beq.n	80053f8 <USB_StopHost+0xb0>
 800541e:	e000      	b.n	8005422 <USB_StopHost+0xda>
        break;
 8005420:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3301      	adds	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	d9c7      	bls.n	80053be <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005434:	461a      	mov	r2, r3
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f04f 32ff 	mov.w	r2, #4294967295
 8005442:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff f8ae 	bl	80045a6 <USB_EnableGlobalInt>

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005458:	4904      	ldr	r1, [pc, #16]	; (800546c <MX_FATFS_Init+0x18>)
 800545a:	4805      	ldr	r0, [pc, #20]	; (8005470 <MX_FATFS_Init+0x1c>)
 800545c:	f005 fbfc 	bl	800ac58 <FATFS_LinkDriver>
 8005460:	4603      	mov	r3, r0
 8005462:	461a      	mov	r2, r3
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <MX_FATFS_Init+0x20>)
 8005466:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005468:	bf00      	nop
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20001128 	.word	0x20001128
 8005470:	0800cf14 	.word	0x0800cf14
 8005474:	20003190 	.word	0x20003190

08005478 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800547c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	4619      	mov	r1, r3
 80054b2:	4808      	ldr	r0, [pc, #32]	; (80054d4 <USBH_status+0x34>)
 80054b4:	f000 fe1a 	bl	80060ec <USBH_MSC_UnitIsReady>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <USBH_status+0x24>
  {
    res = RES_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
 80054c2:	e001      	b.n	80054c8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20003194 	.word	0x20003194

080054d8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b094      	sub	sp, #80	; 0x50
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	4603      	mov	r3, r0
 80054e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80054ee:	7bf9      	ldrb	r1, [r7, #15]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4813      	ldr	r0, [pc, #76]	; (8005548 <USBH_read+0x70>)
 80054fa:	f000 fe41 	bl	8006180 <USBH_MSC_Read>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <USBH_read+0x34>
  {
    res = RES_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800550a:	e017      	b.n	800553c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800550c:	f107 0210 	add.w	r2, r7, #16
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	4619      	mov	r1, r3
 8005514:	480c      	ldr	r0, [pc, #48]	; (8005548 <USBH_read+0x70>)
 8005516:	f000 fe0f 	bl	8006138 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800551a:	7f7b      	ldrb	r3, [r7, #29]
 800551c:	2b3a      	cmp	r3, #58	; 0x3a
 800551e:	d005      	beq.n	800552c <USBH_read+0x54>
 8005520:	2b3a      	cmp	r3, #58	; 0x3a
 8005522:	dc07      	bgt.n	8005534 <USBH_read+0x5c>
 8005524:	2b04      	cmp	r3, #4
 8005526:	d001      	beq.n	800552c <USBH_read+0x54>
 8005528:	2b28      	cmp	r3, #40	; 0x28
 800552a:	d103      	bne.n	8005534 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800552c:	2303      	movs	r3, #3
 800552e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005532:	e003      	b.n	800553c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800553a:	bf00      	nop
    }
  }

  return res;
 800553c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005540:	4618      	mov	r0, r3
 8005542:	3748      	adds	r7, #72	; 0x48
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20003194 	.word	0x20003194

0800554c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b094      	sub	sp, #80	; 0x50
 8005550:	af02      	add	r7, sp, #8
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4603      	mov	r3, r0
 800555a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005562:	7bf9      	ldrb	r1, [r7, #15]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4817      	ldr	r0, [pc, #92]	; (80055cc <USBH_write+0x80>)
 800556e:	f000 fe70 	bl	8006252 <USBH_MSC_Write>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d103      	bne.n	8005580 <USBH_write+0x34>
  {
    res = RES_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800557e:	e01f      	b.n	80055c0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005580:	f107 0210 	add.w	r2, r7, #16
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	4619      	mov	r1, r3
 8005588:	4810      	ldr	r0, [pc, #64]	; (80055cc <USBH_write+0x80>)
 800558a:	f000 fdd5 	bl	8006138 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800558e:	7f7b      	ldrb	r3, [r7, #29]
 8005590:	2b3a      	cmp	r3, #58	; 0x3a
 8005592:	d00d      	beq.n	80055b0 <USBH_write+0x64>
 8005594:	2b3a      	cmp	r3, #58	; 0x3a
 8005596:	dc0f      	bgt.n	80055b8 <USBH_write+0x6c>
 8005598:	2b28      	cmp	r3, #40	; 0x28
 800559a:	d009      	beq.n	80055b0 <USBH_write+0x64>
 800559c:	2b28      	cmp	r3, #40	; 0x28
 800559e:	dc0b      	bgt.n	80055b8 <USBH_write+0x6c>
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d005      	beq.n	80055b0 <USBH_write+0x64>
 80055a4:	2b27      	cmp	r3, #39	; 0x27
 80055a6:	d107      	bne.n	80055b8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80055a8:	2302      	movs	r3, #2
 80055aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80055ae:	e007      	b.n	80055c0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80055b0:	2303      	movs	r3, #3
 80055b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80055b6:	e003      	b.n	80055c0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80055be:	bf00      	nop
    }
  }

  return res;
 80055c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3748      	adds	r7, #72	; 0x48
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20003194 	.word	0x20003194

080055d0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b090      	sub	sp, #64	; 0x40
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	603a      	str	r2, [r7, #0]
 80055da:	71fb      	strb	r3, [r7, #7]
 80055dc:	460b      	mov	r3, r1
 80055de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80055e6:	79bb      	ldrb	r3, [r7, #6]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d852      	bhi.n	8005692 <USBH_ioctl+0xc2>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <USBH_ioctl+0x24>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005605 	.word	0x08005605
 80055f8:	0800560d 	.word	0x0800560d
 80055fc:	08005637 	.word	0x08005637
 8005600:	08005663 	.word	0x08005663
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800560a:	e045      	b.n	8005698 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800560c:	f107 0208 	add.w	r2, r7, #8
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	4619      	mov	r1, r3
 8005614:	4823      	ldr	r0, [pc, #140]	; (80056a4 <USBH_ioctl+0xd4>)
 8005616:	f000 fd8f 	bl	8006138 <USBH_MSC_GetLUNInfo>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800562c:	e034      	b.n	8005698 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005634:	e030      	b.n	8005698 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005636:	f107 0208 	add.w	r2, r7, #8
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	4619      	mov	r1, r3
 800563e:	4819      	ldr	r0, [pc, #100]	; (80056a4 <USBH_ioctl+0xd4>)
 8005640:	f000 fd7a 	bl	8006138 <USBH_MSC_GetLUNInfo>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d107      	bne.n	800565a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800564a:	8a3b      	ldrh	r3, [r7, #16]
 800564c:	461a      	mov	r2, r3
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005658:	e01e      	b.n	8005698 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005660:	e01a      	b.n	8005698 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005662:	f107 0208 	add.w	r2, r7, #8
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	4619      	mov	r1, r3
 800566a:	480e      	ldr	r0, [pc, #56]	; (80056a4 <USBH_ioctl+0xd4>)
 800566c:	f000 fd64 	bl	8006138 <USBH_MSC_GetLUNInfo>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005676:	8a3b      	ldrh	r3, [r7, #16]
 8005678:	0a5b      	lsrs	r3, r3, #9
 800567a:	b29b      	uxth	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005688:	e006      	b.n	8005698 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005690:	e002      	b.n	8005698 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005692:	2304      	movs	r3, #4
 8005694:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005698:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800569c:	4618      	mov	r0, r3
 800569e:	3740      	adds	r7, #64	; 0x40
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20003194 	.word	0x20003194

080056a8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af04      	add	r7, sp, #16
 80056ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056b6:	7919      	ldrb	r1, [r3, #4]
 80056b8:	2350      	movs	r3, #80	; 0x50
 80056ba:	2206      	movs	r2, #6
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 fc53 	bl	8006f68 <USBH_FindInterface>
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2bff      	cmp	r3, #255	; 0xff
 80056ca:	d002      	beq.n	80056d2 <USBH_MSC_InterfaceInit+0x2a>
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d901      	bls.n	80056d6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056d2:	2302      	movs	r3, #2
 80056d4:	e0ef      	b.n	80058b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f001 fc28 	bl	8006f30 <USBH_SelectInterface>
 80056e0:	4603      	mov	r3, r0
 80056e2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80056ea:	2302      	movs	r3, #2
 80056ec:	e0e3      	b.n	80058b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80056f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056f8:	f005 fe20 	bl	800b33c <malloc>
 80056fc:	4603      	mov	r3, r0
 80056fe:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005710:	2302      	movs	r3, #2
 8005712:	e0d0      	b.n	80058b6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005718:	2100      	movs	r1, #0
 800571a:	68b8      	ldr	r0, [r7, #8]
 800571c:	f005 fe2c 	bl	800b378 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	211a      	movs	r1, #26
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	4413      	add	r3, r2
 800572c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b25b      	sxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	da16      	bge.n	8005766 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	211a      	movs	r1, #26
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	4413      	add	r3, r2
 8005744:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	211a      	movs	r1, #26
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	815a      	strh	r2, [r3, #10]
 8005764:	e015      	b.n	8005792 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	211a      	movs	r1, #26
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	211a      	movs	r1, #26
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	4413      	add	r3, r2
 8005788:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800578c:	881a      	ldrh	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	211a      	movs	r1, #26
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	da16      	bge.n	80057d8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	211a      	movs	r1, #26
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	211a      	movs	r1, #26
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	815a      	strh	r2, [r3, #10]
 80057d6:	e015      	b.n	8005804 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	211a      	movs	r1, #26
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	211a      	movs	r1, #26
 80057f4:	fb01 f303 	mul.w	r3, r1, r3
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2200      	movs	r2, #0
 8005808:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2200      	movs	r2, #0
 8005814:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	799b      	ldrb	r3, [r3, #6]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f002 fdc4 	bl	80083aa <USBH_AllocPipe>
 8005822:	4603      	mov	r3, r0
 8005824:	461a      	mov	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	79db      	ldrb	r3, [r3, #7]
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f002 fdba 	bl	80083aa <USBH_AllocPipe>
 8005836:	4603      	mov	r3, r0
 8005838:	461a      	mov	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fdac 	bl	800639c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	7959      	ldrb	r1, [r3, #5]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	7998      	ldrb	r0, [r3, #6]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	8912      	ldrh	r2, [r2, #8]
 800585c:	9202      	str	r2, [sp, #8]
 800585e:	2202      	movs	r2, #2
 8005860:	9201      	str	r2, [sp, #4]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	4623      	mov	r3, r4
 8005866:	4602      	mov	r2, r0
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f002 fd6f 	bl	800834c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	7919      	ldrb	r1, [r3, #4]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	79d8      	ldrb	r0, [r3, #7]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	8952      	ldrh	r2, [r2, #10]
 8005886:	9202      	str	r2, [sp, #8]
 8005888:	2202      	movs	r2, #2
 800588a:	9201      	str	r2, [sp, #4]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	4623      	mov	r3, r4
 8005890:	4602      	mov	r2, r0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f002 fd5a 	bl	800834c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	791b      	ldrb	r3, [r3, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f005 fc6d 	bl	800b180 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	795b      	ldrb	r3, [r3, #5]
 80058aa:	2200      	movs	r2, #0
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f005 fc66 	bl	800b180 <USBH_LL_SetToggle>

  return USBH_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}

080058be <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	795b      	ldrb	r3, [r3, #5]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00e      	beq.n	80058f6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	795b      	ldrb	r3, [r3, #5]
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f002 fd53 	bl	800838a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	795b      	ldrb	r3, [r3, #5]
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f002 fd7e 	bl	80083ec <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	791b      	ldrb	r3, [r3, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00e      	beq.n	800591c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	791b      	ldrb	r3, [r3, #4]
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f002 fd40 	bl	800838a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	791b      	ldrb	r3, [r3, #4]
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f002 fd6b 	bl	80083ec <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	4618      	mov	r0, r3
 8005932:	f005 fd0b 	bl	800b34c <free>
    phost->pActiveClass->pData = 0U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800593c:	2200      	movs	r2, #0
 800593e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	7b9b      	ldrb	r3, [r3, #14]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d041      	beq.n	80059ec <USBH_MSC_ClassRequest+0xa2>
 8005968:	2b03      	cmp	r3, #3
 800596a:	dc4b      	bgt.n	8005a04 <USBH_MSC_ClassRequest+0xba>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <USBH_MSC_ClassRequest+0x2a>
 8005970:	2b02      	cmp	r3, #2
 8005972:	d147      	bne.n	8005a04 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fcf0 	bl	800635e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d104      	bne.n	8005992 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005992:	7bfb      	ldrb	r3, [r7, #15]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d137      	bne.n	8005a08 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d804      	bhi.n	80059aa <USBH_MSC_ClassRequest+0x60>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	3301      	adds	r3, #1
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	e000      	b.n	80059ac <USBH_MSC_ClassRequest+0x62>
 80059aa:	2202      	movs	r2, #2
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80059b0:	2300      	movs	r3, #0
 80059b2:	73bb      	strb	r3, [r7, #14]
 80059b4:	e014      	b.n	80059e0 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	2134      	movs	r1, #52	; 0x34
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	4413      	add	r3, r2
 80059c2:	3392      	adds	r3, #146	; 0x92
 80059c4:	2202      	movs	r2, #2
 80059c6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	2134      	movs	r1, #52	; 0x34
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	33c1      	adds	r3, #193	; 0xc1
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80059da:	7bbb      	ldrb	r3, [r7, #14]
 80059dc:	3301      	adds	r3, #1
 80059de:	73bb      	strb	r3, [r7, #14]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	7bba      	ldrb	r2, [r7, #14]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d3e5      	bcc.n	80059b6 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80059ea:	e00d      	b.n	8005a08 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80059ec:	2100      	movs	r1, #0
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f002 f87b 	bl	8007aea <USBH_ClrFeature>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d108      	bne.n	8005a0c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	7bda      	ldrb	r2, [r3, #15]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005a02:	e003      	b.n	8005a0c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005a04:	bf00      	nop
 8005a06:	e002      	b.n	8005a0e <USBH_MSC_ClassRequest+0xc4>
      break;
 8005a08:	bf00      	nop
 8005a0a:	e000      	b.n	8005a0e <USBH_MSC_ClassRequest+0xc4>
      break;
 8005a0c:	bf00      	nop
  }

  return status;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005a32:	2301      	movs	r3, #1
 8005a34:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	7b1b      	ldrb	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <USBH_MSC_Process+0x2e>
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	f000 8271 	beq.w	8005f26 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005a44:	e272      	b.n	8005f2c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	429a      	cmp	r2, r3
 8005a54:	f080 824f 	bcs.w	8005ef6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a5e:	4619      	mov	r1, r3
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	2334      	movs	r3, #52	; 0x34
 8005a64:	fb03 f301 	mul.w	r3, r3, r1
 8005a68:	4413      	add	r3, r2
 8005a6a:	3391      	adds	r3, #145	; 0x91
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005a76:	4619      	mov	r1, r3
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	2334      	movs	r3, #52	; 0x34
 8005a7c:	fb03 f301 	mul.w	r3, r3, r1
 8005a80:	4413      	add	r3, r2
 8005a82:	3390      	adds	r3, #144	; 0x90
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	f200 8243 	bhi.w	8005f12 <USBH_MSC_Process+0x4fa>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <USBH_MSC_Process+0x7c>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005f13 	.word	0x08005f13
 8005a9c:	08005b81 	.word	0x08005b81
 8005aa0:	08005d05 	.word	0x08005d05
 8005aa4:	08005adf 	.word	0x08005adf
 8005aa8:	08005dd1 	.word	0x08005dd1
 8005aac:	08005f13 	.word	0x08005f13
 8005ab0:	08005f13 	.word	0x08005f13
 8005ab4:	08005ee5 	.word	0x08005ee5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005abe:	4619      	mov	r1, r3
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	2334      	movs	r3, #52	; 0x34
 8005ac4:	fb03 f301 	mul.w	r3, r3, r1
 8005ac8:	4413      	add	r3, r2
 8005aca:	3390      	adds	r3, #144	; 0x90
 8005acc:	2204      	movs	r2, #4
 8005ace:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005adc:	e222      	b.n	8005f24 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ae4:	b2d9      	uxtb	r1, r3
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005aec:	461a      	mov	r2, r3
 8005aee:	2334      	movs	r3, #52	; 0x34
 8005af0:	fb03 f302 	mul.w	r3, r3, r2
 8005af4:	3398      	adds	r3, #152	; 0x98
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	3307      	adds	r3, #7
 8005afc:	461a      	mov	r2, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 ff6a 	bl	80069d8 <USBH_MSC_SCSI_Inquiry>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10b      	bne.n	8005b26 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b14:	4619      	mov	r1, r3
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	2334      	movs	r3, #52	; 0x34
 8005b1a:	fb03 f301 	mul.w	r3, r3, r1
 8005b1e:	4413      	add	r3, r2
 8005b20:	3390      	adds	r3, #144	; 0x90
 8005b22:	2202      	movs	r2, #2
 8005b24:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d10c      	bne.n	8005b46 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b32:	4619      	mov	r1, r3
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	2334      	movs	r3, #52	; 0x34
 8005b38:	fb03 f301 	mul.w	r3, r3, r1
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3390      	adds	r3, #144	; 0x90
 8005b40:	2205      	movs	r2, #5
 8005b42:	701a      	strb	r2, [r3, #0]
            break;
 8005b44:	e1e7      	b.n	8005f16 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	f040 81e4 	bne.w	8005f16 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b54:	4619      	mov	r1, r3
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	2334      	movs	r3, #52	; 0x34
 8005b5a:	fb03 f301 	mul.w	r3, r3, r1
 8005b5e:	4413      	add	r3, r2
 8005b60:	3390      	adds	r3, #144	; 0x90
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	2334      	movs	r3, #52	; 0x34
 8005b72:	fb03 f301 	mul.w	r3, r3, r1
 8005b76:	4413      	add	r3, r2
 8005b78:	3391      	adds	r3, #145	; 0x91
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	701a      	strb	r2, [r3, #0]
            break;
 8005b7e:	e1ca      	b.n	8005f16 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	4619      	mov	r1, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fe66 	bl	800685c <USBH_MSC_SCSI_TestUnitReady>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d149      	bne.n	8005c2e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	2334      	movs	r3, #52	; 0x34
 8005ba6:	fb03 f301 	mul.w	r3, r3, r1
 8005baa:	4413      	add	r3, r2
 8005bac:	3392      	adds	r3, #146	; 0x92
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bba:	4619      	mov	r1, r3
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	2334      	movs	r3, #52	; 0x34
 8005bc0:	fb03 f301 	mul.w	r3, r3, r1
 8005bc4:	4413      	add	r3, r2
 8005bc6:	33c1      	adds	r3, #193	; 0xc1
 8005bc8:	2201      	movs	r2, #1
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	e00b      	b.n	8005be6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	2334      	movs	r3, #52	; 0x34
 8005bda:	fb03 f301 	mul.w	r3, r3, r1
 8005bde:	4413      	add	r3, r2
 8005be0:	33c1      	adds	r3, #193	; 0xc1
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005bec:	4619      	mov	r1, r3
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	2334      	movs	r3, #52	; 0x34
 8005bf2:	fb03 f301 	mul.w	r3, r3, r1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3390      	adds	r3, #144	; 0x90
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c04:	4619      	mov	r1, r3
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	2334      	movs	r3, #52	; 0x34
 8005c0a:	fb03 f301 	mul.w	r3, r3, r1
 8005c0e:	4413      	add	r3, r2
 8005c10:	3391      	adds	r3, #145	; 0x91
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	2334      	movs	r3, #52	; 0x34
 8005c22:	fb03 f301 	mul.w	r3, r3, r1
 8005c26:	4413      	add	r3, r2
 8005c28:	3392      	adds	r3, #146	; 0x92
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d14a      	bne.n	8005cca <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	2334      	movs	r3, #52	; 0x34
 8005c40:	fb03 f301 	mul.w	r3, r3, r1
 8005c44:	4413      	add	r3, r2
 8005c46:	3392      	adds	r3, #146	; 0x92
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d00c      	beq.n	8005c68 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c54:	4619      	mov	r1, r3
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	2334      	movs	r3, #52	; 0x34
 8005c5a:	fb03 f301 	mul.w	r3, r3, r1
 8005c5e:	4413      	add	r3, r2
 8005c60:	33c1      	adds	r3, #193	; 0xc1
 8005c62:	2201      	movs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	e00b      	b.n	8005c80 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c6e:	4619      	mov	r1, r3
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	2334      	movs	r3, #52	; 0x34
 8005c74:	fb03 f301 	mul.w	r3, r3, r1
 8005c78:	4413      	add	r3, r2
 8005c7a:	33c1      	adds	r3, #193	; 0xc1
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c86:	4619      	mov	r1, r3
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	2334      	movs	r3, #52	; 0x34
 8005c8c:	fb03 f301 	mul.w	r3, r3, r1
 8005c90:	4413      	add	r3, r2
 8005c92:	3390      	adds	r3, #144	; 0x90
 8005c94:	2205      	movs	r2, #5
 8005c96:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	2334      	movs	r3, #52	; 0x34
 8005ca4:	fb03 f301 	mul.w	r3, r3, r1
 8005ca8:	4413      	add	r3, r2
 8005caa:	3391      	adds	r3, #145	; 0x91
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	2334      	movs	r3, #52	; 0x34
 8005cbc:	fb03 f301 	mul.w	r3, r3, r1
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3392      	adds	r3, #146	; 0x92
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	701a      	strb	r2, [r3, #0]
            break;
 8005cc8:	e127      	b.n	8005f1a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8005cca:	7bbb      	ldrb	r3, [r7, #14]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	f040 8124 	bne.w	8005f1a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cd8:	4619      	mov	r1, r3
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	2334      	movs	r3, #52	; 0x34
 8005cde:	fb03 f301 	mul.w	r3, r3, r1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3390      	adds	r3, #144	; 0x90
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	2334      	movs	r3, #52	; 0x34
 8005cf6:	fb03 f301 	mul.w	r3, r3, r1
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3391      	adds	r3, #145	; 0x91
 8005cfe:	2202      	movs	r2, #2
 8005d00:	701a      	strb	r2, [r3, #0]
            break;
 8005d02:	e10a      	b.n	8005f1a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d0a:	b2d9      	uxtb	r1, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d12:	461a      	mov	r2, r3
 8005d14:	2334      	movs	r3, #52	; 0x34
 8005d16:	fb03 f302 	mul.w	r3, r3, r2
 8005d1a:	3390      	adds	r3, #144	; 0x90
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	3304      	adds	r3, #4
 8005d22:	461a      	mov	r2, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fddc 	bl	80068e2 <USBH_MSC_SCSI_ReadCapacity>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d120      	bne.n	8005d76 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	2334      	movs	r3, #52	; 0x34
 8005d40:	fb03 f301 	mul.w	r3, r3, r1
 8005d44:	4413      	add	r3, r2
 8005d46:	3390      	adds	r3, #144	; 0x90
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d52:	4619      	mov	r1, r3
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	2334      	movs	r3, #52	; 0x34
 8005d58:	fb03 f301 	mul.w	r3, r3, r1
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3391      	adds	r3, #145	; 0x91
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005d74:	e0d3      	b.n	8005f1e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d10c      	bne.n	8005d96 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005d82:	4619      	mov	r1, r3
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	2334      	movs	r3, #52	; 0x34
 8005d88:	fb03 f301 	mul.w	r3, r3, r1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3390      	adds	r3, #144	; 0x90
 8005d90:	2205      	movs	r2, #5
 8005d92:	701a      	strb	r2, [r3, #0]
            break;
 8005d94:	e0c3      	b.n	8005f1e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	f040 80c0 	bne.w	8005f1e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005da4:	4619      	mov	r1, r3
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	2334      	movs	r3, #52	; 0x34
 8005daa:	fb03 f301 	mul.w	r3, r3, r1
 8005dae:	4413      	add	r3, r2
 8005db0:	3390      	adds	r3, #144	; 0x90
 8005db2:	2201      	movs	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	2334      	movs	r3, #52	; 0x34
 8005dc2:	fb03 f301 	mul.w	r3, r3, r1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3391      	adds	r3, #145	; 0x91
 8005dca:	2202      	movs	r2, #2
 8005dcc:	701a      	strb	r2, [r3, #0]
            break;
 8005dce:	e0a6      	b.n	8005f1e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dd6:	b2d9      	uxtb	r1, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005dde:	461a      	mov	r2, r3
 8005de0:	2334      	movs	r3, #52	; 0x34
 8005de2:	fb03 f302 	mul.w	r3, r3, r2
 8005de6:	3398      	adds	r3, #152	; 0x98
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	461a      	mov	r2, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fe96 	bl	8006b22 <USBH_MSC_SCSI_RequestSense>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d145      	bne.n	8005e8c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e06:	4619      	mov	r1, r3
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	2334      	movs	r3, #52	; 0x34
 8005e0c:	fb03 f301 	mul.w	r3, r3, r1
 8005e10:	4413      	add	r3, r2
 8005e12:	339c      	adds	r3, #156	; 0x9c
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b06      	cmp	r3, #6
 8005e18:	d00c      	beq.n	8005e34 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e20:	4619      	mov	r1, r3
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	2334      	movs	r3, #52	; 0x34
 8005e26:	fb03 f301 	mul.w	r3, r3, r1
 8005e2a:	4413      	add	r3, r2
 8005e2c:	339c      	adds	r3, #156	; 0x9c
 8005e2e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d117      	bne.n	8005e64 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	f242 720f 	movw	r2, #9999	; 0x270f
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d80c      	bhi.n	8005e64 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e50:	4619      	mov	r1, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	2334      	movs	r3, #52	; 0x34
 8005e56:	fb03 f301 	mul.w	r3, r3, r1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3390      	adds	r3, #144	; 0x90
 8005e5e:	2202      	movs	r2, #2
 8005e60:	701a      	strb	r2, [r3, #0]
                  break;
 8005e62:	e05f      	b.n	8005f24 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	2334      	movs	r3, #52	; 0x34
 8005e70:	fb03 f301 	mul.w	r3, r3, r1
 8005e74:	4413      	add	r3, r2
 8005e76:	3390      	adds	r3, #144	; 0x90
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e82:	3301      	adds	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d10c      	bne.n	8005eac <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e98:	4619      	mov	r1, r3
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	2334      	movs	r3, #52	; 0x34
 8005e9e:	fb03 f301 	mul.w	r3, r3, r1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3390      	adds	r3, #144	; 0x90
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	701a      	strb	r2, [r3, #0]
            break;
 8005eaa:	e03a      	b.n	8005f22 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d137      	bne.n	8005f22 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eb8:	4619      	mov	r1, r3
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	2334      	movs	r3, #52	; 0x34
 8005ebe:	fb03 f301 	mul.w	r3, r3, r1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3390      	adds	r3, #144	; 0x90
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	2334      	movs	r3, #52	; 0x34
 8005ed6:	fb03 f301 	mul.w	r3, r3, r1
 8005eda:	4413      	add	r3, r2
 8005edc:	3391      	adds	r3, #145	; 0x91
 8005ede:	2202      	movs	r2, #2
 8005ee0:	701a      	strb	r2, [r3, #0]
            break;
 8005ee2:	e01e      	b.n	8005f22 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eea:	3301      	adds	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8005ef4:	e016      	b.n	8005f24 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2201      	movs	r2, #1
 8005f02:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
      break;
 8005f10:	e00c      	b.n	8005f2c <USBH_MSC_Process+0x514>
            break;
 8005f12:	bf00      	nop
 8005f14:	e00a      	b.n	8005f2c <USBH_MSC_Process+0x514>
            break;
 8005f16:	bf00      	nop
 8005f18:	e008      	b.n	8005f2c <USBH_MSC_Process+0x514>
            break;
 8005f1a:	bf00      	nop
 8005f1c:	e006      	b.n	8005f2c <USBH_MSC_Process+0x514>
            break;
 8005f1e:	bf00      	nop
 8005f20:	e004      	b.n	8005f2c <USBH_MSC_Process+0x514>
            break;
 8005f22:	bf00      	nop
      break;
 8005f24:	e002      	b.n	8005f2c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
      break;
 8005f2a:	bf00      	nop
  }
  return error;
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop

08005f38 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b088      	sub	sp, #32
 8005f52:	af02      	add	r7, sp, #8
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	2134      	movs	r1, #52	; 0x34
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	3390      	adds	r3, #144	; 0x90
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b07      	cmp	r3, #7
 8005f7e:	d03c      	beq.n	8005ffa <USBH_MSC_RdWrProcess+0xac>
 8005f80:	2b07      	cmp	r3, #7
 8005f82:	f300 80a7 	bgt.w	80060d4 <USBH_MSC_RdWrProcess+0x186>
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d06c      	beq.n	8006064 <USBH_MSC_RdWrProcess+0x116>
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	f040 80a2 	bne.w	80060d4 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8005f90:	78f9      	ldrb	r1, [r7, #3]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	2200      	movs	r2, #0
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fea5 	bl	8006cea <USBH_MSC_SCSI_Read>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	2134      	movs	r1, #52	; 0x34
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3390      	adds	r3, #144	; 0x90
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fc0:	e08a      	b.n	80060d8 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d109      	bne.n	8005fdc <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	2134      	movs	r1, #52	; 0x34
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3390      	adds	r3, #144	; 0x90
 8005fd6:	2205      	movs	r2, #5
 8005fd8:	701a      	strb	r2, [r3, #0]
      break;
 8005fda:	e07d      	b.n	80060d8 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d17a      	bne.n	80060d8 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	2134      	movs	r1, #52	; 0x34
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	3390      	adds	r3, #144	; 0x90
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff8:	e06e      	b.n	80060d8 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8005ffa:	78f9      	ldrb	r1, [r7, #3]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2300      	movs	r3, #0
 8006002:	2200      	movs	r2, #0
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fe05 	bl	8006c14 <USBH_MSC_SCSI_Write>
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	2134      	movs	r1, #52	; 0x34
 800601a:	fb01 f303 	mul.w	r3, r1, r3
 800601e:	4413      	add	r3, r2
 8006020:	3390      	adds	r3, #144	; 0x90
 8006022:	2201      	movs	r2, #1
 8006024:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800602a:	e057      	b.n	80060dc <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d109      	bne.n	8006046 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	2134      	movs	r1, #52	; 0x34
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	4413      	add	r3, r2
 800603e:	3390      	adds	r3, #144	; 0x90
 8006040:	2205      	movs	r2, #5
 8006042:	701a      	strb	r2, [r3, #0]
      break;
 8006044:	e04a      	b.n	80060dc <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b04      	cmp	r3, #4
 800604a:	d147      	bne.n	80060dc <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	2134      	movs	r1, #52	; 0x34
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	3390      	adds	r3, #144	; 0x90
 800605a:	2208      	movs	r2, #8
 800605c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800605e:	2302      	movs	r3, #2
 8006060:	75fb      	strb	r3, [r7, #23]
      break;
 8006062:	e03b      	b.n	80060dc <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	2234      	movs	r2, #52	; 0x34
 8006068:	fb02 f303 	mul.w	r3, r2, r3
 800606c:	3398      	adds	r3, #152	; 0x98
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4413      	add	r3, r2
 8006072:	1d1a      	adds	r2, r3, #4
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fd52 	bl	8006b22 <USBH_MSC_SCSI_RequestSense>
 800607e:	4603      	mov	r3, r0
 8006080:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d113      	bne.n	80060b0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	2134      	movs	r1, #52	; 0x34
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	3390      	adds	r3, #144	; 0x90
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	2134      	movs	r1, #52	; 0x34
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	3391      	adds	r3, #145	; 0x91
 80060a8:	2202      	movs	r2, #2
 80060aa:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80060ac:	2302      	movs	r3, #2
 80060ae:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d014      	beq.n	80060e0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d111      	bne.n	80060e0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	2134      	movs	r1, #52	; 0x34
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	4413      	add	r3, r2
 80060c8:	3390      	adds	r3, #144	; 0x90
 80060ca:	2208      	movs	r2, #8
 80060cc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80060ce:	2302      	movs	r3, #2
 80060d0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060d2:	e005      	b.n	80060e0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80060d4:	bf00      	nop
 80060d6:	e004      	b.n	80060e2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80060d8:	bf00      	nop
 80060da:	e002      	b.n	80060e2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80060dc:	bf00      	nop
 80060de:	e000      	b.n	80060e2 <USBH_MSC_RdWrProcess+0x194>
      break;
 80060e0:	bf00      	nop

  }
  return error;
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b0b      	cmp	r3, #11
 800610a:	d10c      	bne.n	8006126 <USBH_MSC_UnitIsReady+0x3a>
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	2134      	movs	r1, #52	; 0x34
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	4413      	add	r3, r2
 8006118:	3391      	adds	r3, #145	; 0x91
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006120:	2301      	movs	r3, #1
 8006122:	73fb      	strb	r3, [r7, #15]
 8006124:	e001      	b.n	800612a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	460b      	mov	r3, r1
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b0b      	cmp	r3, #11
 8006158:	d10d      	bne.n	8006176 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	2234      	movs	r2, #52	; 0x34
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	3390      	adds	r3, #144	; 0x90
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4413      	add	r3, r2
 8006168:	2234      	movs	r2, #52	; 0x34
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f005 f8f5 	bl	800b35c <memcpy>
    return USBH_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e000      	b.n	8006178 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006176:	2302      	movs	r3, #2
  }
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	460b      	mov	r3, r1
 800618e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00e      	beq.n	80061c4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80061ac:	2b0b      	cmp	r3, #11
 80061ae:	d109      	bne.n	80061c4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80061b0:	7afb      	ldrb	r3, [r7, #11]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	2134      	movs	r1, #52	; 0x34
 80061b6:	fb01 f303 	mul.w	r3, r1, r3
 80061ba:	4413      	add	r3, r2
 80061bc:	3390      	adds	r3, #144	; 0x90
 80061be:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d001      	beq.n	80061c8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80061c4:	2302      	movs	r3, #2
 80061c6:	e040      	b.n	800624a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2206      	movs	r2, #6
 80061cc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	2134      	movs	r1, #52	; 0x34
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	3390      	adds	r3, #144	; 0x90
 80061dc:	2206      	movs	r2, #6
 80061de:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80061ea:	7af9      	ldrb	r1, [r7, #11]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fd78 	bl	8006cea <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006200:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006202:	e016      	b.n	8006232 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad2      	subs	r2, r2, r3
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	f242 7110 	movw	r1, #10000	; 0x2710
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	429a      	cmp	r2, r3
 800621a:	d805      	bhi.n	8006228 <USBH_MSC_Read+0xa8>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2201      	movs	r2, #1
 800622c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800622e:	2302      	movs	r3, #2
 8006230:	e00b      	b.n	800624a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006232:	7afb      	ldrb	r3, [r7, #11]
 8006234:	4619      	mov	r1, r3
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7ff fe89 	bl	8005f4e <USBH_MSC_RdWrProcess>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d0e0      	beq.n	8006204 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2201      	movs	r2, #1
 8006246:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b088      	sub	sp, #32
 8006256:	af02      	add	r7, sp, #8
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
 800625e:	460b      	mov	r3, r1
 8006260:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00e      	beq.n	8006296 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800627e:	2b0b      	cmp	r3, #11
 8006280:	d109      	bne.n	8006296 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006282:	7afb      	ldrb	r3, [r7, #11]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	2134      	movs	r1, #52	; 0x34
 8006288:	fb01 f303 	mul.w	r3, r1, r3
 800628c:	4413      	add	r3, r2
 800628e:	3390      	adds	r3, #144	; 0x90
 8006290:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006292:	2b01      	cmp	r3, #1
 8006294:	d001      	beq.n	800629a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006296:	2302      	movs	r3, #2
 8006298:	e040      	b.n	800631c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2207      	movs	r2, #7
 800629e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	2134      	movs	r1, #52	; 0x34
 80062a6:	fb01 f303 	mul.w	r3, r1, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	3390      	adds	r3, #144	; 0x90
 80062ae:	2207      	movs	r2, #7
 80062b0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80062b2:	7afb      	ldrb	r3, [r7, #11]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80062bc:	7af9      	ldrb	r1, [r7, #11]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 fca4 	bl	8006c14 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062d2:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80062d4:	e016      	b.n	8006304 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad2      	subs	r2, r2, r3
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	f242 7110 	movw	r1, #10000	; 0x2710
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d805      	bhi.n	80062fa <USBH_MSC_Write+0xa8>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2201      	movs	r2, #1
 80062fe:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006300:	2302      	movs	r3, #2
 8006302:	e00b      	b.n	800631c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006304:	7afb      	ldrb	r3, [r7, #11]
 8006306:	4619      	mov	r1, r3
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fe20 	bl	8005f4e <USBH_MSC_RdWrProcess>
 800630e:	4603      	mov	r3, r0
 8006310:	2b01      	cmp	r3, #1
 8006312:	d0e0      	beq.n	80062d6 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2201      	movs	r2, #1
 8006318:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2221      	movs	r2, #33	; 0x21
 8006330:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	22ff      	movs	r2, #255	; 0xff
 8006336:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fdab 	bl	8007eaa <USBH_CtlReq>
 8006354:	4603      	mov	r3, r0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	22a1      	movs	r2, #161	; 0xa1
 800636c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	22fe      	movs	r2, #254	; 0xfe
 8006372:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006386:	2201      	movs	r2, #1
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fd8d 	bl	8007eaa <USBH_CtlReq>
 8006390:	4603      	mov	r3, r0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <USBH_MSC_BOT_Init+0x3c>)
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <USBH_MSC_BOT_Init+0x40>)
 80063b8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	43425355 	.word	0x43425355
 80063dc:	20304050 	.word	0x20304050

080063e0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80063ec:	2301      	movs	r3, #1
 80063ee:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80063f4:	2301      	movs	r3, #1
 80063f6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006410:	3b01      	subs	r3, #1
 8006412:	2b0a      	cmp	r3, #10
 8006414:	f200 819e 	bhi.w	8006754 <USBH_MSC_BOT_Process+0x374>
 8006418:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <USBH_MSC_BOT_Process+0x40>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	0800644d 	.word	0x0800644d
 8006424:	08006475 	.word	0x08006475
 8006428:	080064df 	.word	0x080064df
 800642c:	080064fd 	.word	0x080064fd
 8006430:	08006581 	.word	0x08006581
 8006434:	080065a3 	.word	0x080065a3
 8006438:	0800663b 	.word	0x0800663b
 800643c:	08006657 	.word	0x08006657
 8006440:	080066a9 	.word	0x080066a9
 8006444:	080066d9 	.word	0x080066d9
 8006448:	0800673b 	.word	0x0800673b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	78fa      	ldrb	r2, [r7, #3]
 8006450:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	795b      	ldrb	r3, [r3, #5]
 8006466:	2201      	movs	r2, #1
 8006468:	9200      	str	r2, [sp, #0]
 800646a:	221f      	movs	r2, #31
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 ff2a 	bl	80082c6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006472:	e17e      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	795b      	ldrb	r3, [r3, #5]
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f004 fe56 	bl	800b12c <USBH_LL_GetURBState>
 8006480:	4603      	mov	r3, r0
 8006482:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006484:	7d3b      	ldrb	r3, [r7, #20]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d118      	bne.n	80064bc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00f      	beq.n	80064b2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006498:	b25b      	sxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	da04      	bge.n	80064a8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2203      	movs	r2, #3
 80064a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80064a6:	e157      	b.n	8006758 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2205      	movs	r2, #5
 80064ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80064b0:	e152      	b.n	8006758 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2207      	movs	r2, #7
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80064ba:	e14d      	b.n	8006758 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80064bc:	7d3b      	ldrb	r3, [r7, #20]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d104      	bne.n	80064cc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80064ca:	e145      	b.n	8006758 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80064cc:	7d3b      	ldrb	r3, [r7, #20]
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	f040 8142 	bne.w	8006758 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	220a      	movs	r2, #10
 80064d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80064dc:	e13c      	b.n	8006758 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	895a      	ldrh	r2, [r3, #10]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	791b      	ldrb	r3, [r3, #4]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 ff0f 	bl	8008310 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2204      	movs	r2, #4
 80064f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80064fa:	e13a      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	791b      	ldrb	r3, [r3, #4]
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f004 fe12 	bl	800b12c <USBH_LL_GetURBState>
 8006508:	4603      	mov	r3, r0
 800650a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800650c:	7d3b      	ldrb	r3, [r7, #20]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d12d      	bne.n	800656e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	8952      	ldrh	r2, [r2, #10]
 800651a:	4293      	cmp	r3, r2
 800651c:	d910      	bls.n	8006540 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	8952      	ldrh	r2, [r2, #10]
 8006528:	441a      	add	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	8952      	ldrh	r2, [r2, #10]
 8006538:	1a9a      	subs	r2, r3, r2
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	65da      	str	r2, [r3, #92]	; 0x5c
 800653e:	e002      	b.n	8006546 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2200      	movs	r2, #0
 8006544:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	895a      	ldrh	r2, [r3, #10]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	791b      	ldrb	r3, [r3, #4]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fed7 	bl	8008310 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006562:	e0fb      	b.n	800675c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2207      	movs	r2, #7
 8006568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800656c:	e0f6      	b.n	800675c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800656e:	7d3b      	ldrb	r3, [r7, #20]
 8006570:	2b05      	cmp	r3, #5
 8006572:	f040 80f3 	bne.w	800675c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2209      	movs	r2, #9
 800657a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800657e:	e0ed      	b.n	800675c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	891a      	ldrh	r2, [r3, #8]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	795b      	ldrb	r3, [r3, #5]
 800658e:	2001      	movs	r0, #1
 8006590:	9000      	str	r0, [sp, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 fe97 	bl	80082c6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2206      	movs	r2, #6
 800659c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80065a0:	e0e7      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	795b      	ldrb	r3, [r3, #5]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f004 fdbf 	bl	800b12c <USBH_LL_GetURBState>
 80065ae:	4603      	mov	r3, r0
 80065b0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80065b2:	7d3b      	ldrb	r3, [r7, #20]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d12f      	bne.n	8006618 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	8912      	ldrh	r2, [r2, #8]
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d910      	bls.n	80065e6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	8912      	ldrh	r2, [r2, #8]
 80065ce:	441a      	add	r2, r3
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	8912      	ldrh	r2, [r2, #8]
 80065de:	1a9a      	subs	r2, r3, r2
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80065e4:	e002      	b.n	80065ec <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2200      	movs	r2, #0
 80065ea:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	891a      	ldrh	r2, [r3, #8]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	795b      	ldrb	r3, [r3, #5]
 8006602:	2001      	movs	r0, #1
 8006604:	9000      	str	r0, [sp, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fe5d 	bl	80082c6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800660c:	e0a8      	b.n	8006760 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2207      	movs	r2, #7
 8006612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006616:	e0a3      	b.n	8006760 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006618:	7d3b      	ldrb	r3, [r7, #20]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d104      	bne.n	8006628 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2205      	movs	r2, #5
 8006622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006626:	e09b      	b.n	8006760 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006628:	7d3b      	ldrb	r3, [r7, #20]
 800662a:	2b05      	cmp	r3, #5
 800662c:	f040 8098 	bne.w	8006760 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	220a      	movs	r2, #10
 8006634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006638:	e092      	b.n	8006760 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	791b      	ldrb	r3, [r3, #4]
 8006644:	220d      	movs	r2, #13
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fe62 	bl	8008310 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2208      	movs	r2, #8
 8006650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006654:	e08d      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	791b      	ldrb	r3, [r3, #4]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f004 fd65 	bl	800b12c <USBH_LL_GetURBState>
 8006662:	4603      	mov	r3, r0
 8006664:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006666:	7d3b      	ldrb	r3, [r7, #20]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d115      	bne.n	8006698 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f8a9 	bl	80067d4 <USBH_MSC_DecodeCSW>
 8006682:	4603      	mov	r3, r0
 8006684:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006686:	7d7b      	ldrb	r3, [r7, #21]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006690:	e068      	b.n	8006764 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006692:	2302      	movs	r3, #2
 8006694:	75fb      	strb	r3, [r7, #23]
      break;
 8006696:	e065      	b.n	8006764 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006698:	7d3b      	ldrb	r3, [r7, #20]
 800669a:	2b05      	cmp	r3, #5
 800669c:	d162      	bne.n	8006764 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2209      	movs	r2, #9
 80066a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80066a6:	e05d      	b.n	8006764 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	2200      	movs	r2, #0
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f864 	bl	800677c <USBH_MSC_BOT_Abort>
 80066b4:	4603      	mov	r3, r0
 80066b6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80066b8:	7dbb      	ldrb	r3, [r7, #22]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2207      	movs	r2, #7
 80066c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80066c6:	e04f      	b.n	8006768 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80066c8:	7dbb      	ldrb	r3, [r7, #22]
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d14c      	bne.n	8006768 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	220b      	movs	r2, #11
 80066d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80066d6:	e047      	b.n	8006768 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	2201      	movs	r2, #1
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f84c 	bl	800677c <USBH_MSC_BOT_Abort>
 80066e4:	4603      	mov	r3, r0
 80066e6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80066e8:	7dbb      	ldrb	r3, [r7, #22]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d11d      	bne.n	800672a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	795b      	ldrb	r3, [r3, #5]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f004 fd73 	bl	800b1e0 <USBH_LL_GetToggle>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	7959      	ldrb	r1, [r3, #5]
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	f1c3 0301 	rsb	r3, r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f004 fd37 	bl	800b180 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	791b      	ldrb	r3, [r3, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f004 fd30 	bl	800b180 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2209      	movs	r2, #9
 8006724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006728:	e020      	b.n	800676c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800672a:	7dbb      	ldrb	r3, [r7, #22]
 800672c:	2b04      	cmp	r3, #4
 800672e:	d11d      	bne.n	800676c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	220b      	movs	r2, #11
 8006734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006738:	e018      	b.n	800676c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fdf2 	bl	8006324 <USBH_MSC_BOT_REQ_Reset>
 8006740:	4603      	mov	r3, r0
 8006742:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d112      	bne.n	8006770 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006752:	e00d      	b.n	8006770 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006754:	bf00      	nop
 8006756:	e00c      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>
      break;
 8006758:	bf00      	nop
 800675a:	e00a      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>
      break;
 800675c:	bf00      	nop
 800675e:	e008      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>
      break;
 8006760:	bf00      	nop
 8006762:	e006      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>
      break;
 8006764:	bf00      	nop
 8006766:	e004      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>
      break;
 8006768:	bf00      	nop
 800676a:	e002      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>
      break;
 800676c:	bf00      	nop
 800676e:	e000      	b.n	8006772 <USBH_MSC_BOT_Process+0x392>
      break;
 8006770:	bf00      	nop
  }
  return status;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
 8006788:	4613      	mov	r3, r2
 800678a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800678c:	2302      	movs	r3, #2
 800678e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800679a:	78bb      	ldrb	r3, [r7, #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <USBH_MSC_BOT_Abort+0x2a>
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d009      	beq.n	80067b8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80067a4:	e011      	b.n	80067ca <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	79db      	ldrb	r3, [r3, #7]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f99c 	bl	8007aea <USBH_ClrFeature>
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
      break;
 80067b6:	e008      	b.n	80067ca <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	799b      	ldrb	r3, [r3, #6]
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 f993 	bl	8007aea <USBH_ClrFeature>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
      break;
 80067c8:	bf00      	nop
  }
  return status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	791b      	ldrb	r3, [r3, #4]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f004 fc09 	bl	800b008 <USBH_LL_GetLastXferSize>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b0d      	cmp	r3, #13
 80067fa:	d002      	beq.n	8006802 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80067fc:	2302      	movs	r3, #2
 80067fe:	73fb      	strb	r3, [r7, #15]
 8006800:	e024      	b.n	800684c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006806:	4a14      	ldr	r2, [pc, #80]	; (8006858 <USBH_MSC_DecodeCSW+0x84>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d11d      	bne.n	8006848 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006814:	429a      	cmp	r2, r3
 8006816:	d119      	bne.n	800684c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006822:	2300      	movs	r3, #0
 8006824:	73fb      	strb	r3, [r7, #15]
 8006826:	e011      	b.n	800684c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800682e:	2b01      	cmp	r3, #1
 8006830:	d102      	bne.n	8006838 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006832:	2301      	movs	r3, #1
 8006834:	73fb      	strb	r3, [r7, #15]
 8006836:	e009      	b.n	800684c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800683e:	2b02      	cmp	r3, #2
 8006840:	d104      	bne.n	800684c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006842:	2302      	movs	r3, #2
 8006844:	73fb      	strb	r3, [r7, #15]
 8006846:	e001      	b.n	800684c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006848:	2302      	movs	r3, #2
 800684a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	53425355 	.word	0x53425355

0800685c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006868:	2302      	movs	r3, #2
 800686a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800687c:	2b01      	cmp	r3, #1
 800687e:	d002      	beq.n	8006886 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006880:	2b02      	cmp	r3, #2
 8006882:	d021      	beq.n	80068c8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006884:	e028      	b.n	80068d8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	220a      	movs	r2, #10
 8006898:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	3363      	adds	r3, #99	; 0x63
 80068a0:	2210      	movs	r2, #16
 80068a2:	2100      	movs	r1, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f004 fd67 	bl	800b378 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2202      	movs	r2, #2
 80068be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80068c2:	2301      	movs	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
      break;
 80068c6:	e007      	b.n	80068d8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff fd87 	bl	80063e0 <USBH_MSC_BOT_Process>
 80068d2:	4603      	mov	r3, r0
 80068d4:	73fb      	strb	r3, [r7, #15]
      break;
 80068d6:	bf00      	nop
  }

  return error;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b086      	sub	sp, #24
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	460b      	mov	r3, r1
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80068f0:	2301      	movs	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006904:	2b01      	cmp	r3, #1
 8006906:	d002      	beq.n	800690e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006908:	2b02      	cmp	r3, #2
 800690a:	d027      	beq.n	800695c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800690c:	e05f      	b.n	80069ce <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2208      	movs	r2, #8
 8006912:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2280      	movs	r2, #128	; 0x80
 8006918:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	220a      	movs	r2, #10
 8006920:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3363      	adds	r3, #99	; 0x63
 8006928:	2210      	movs	r2, #16
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f004 fd23 	bl	800b378 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2225      	movs	r2, #37	; 0x25
 8006936:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2202      	movs	r2, #2
 8006946:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f103 0210 	add.w	r2, r3, #16
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006956:	2301      	movs	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]
      break;
 800695a:	e038      	b.n	80069ce <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800695c:	7afb      	ldrb	r3, [r7, #11]
 800695e:	4619      	mov	r1, r3
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff fd3d 	bl	80063e0 <USBH_MSC_BOT_Process>
 8006966:	4603      	mov	r3, r0
 8006968:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d12d      	bne.n	80069cc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006976:	3303      	adds	r3, #3
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006982:	3302      	adds	r3, #2
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	021b      	lsls	r3, r3, #8
 8006988:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006990:	3301      	adds	r3, #1
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006996:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ae:	3307      	adds	r3, #7
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ba:	3306      	adds	r3, #6
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	021b      	lsls	r3, r3, #8
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4313      	orrs	r3, r2
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	809a      	strh	r2, [r3, #4]
      break;
 80069cc:	bf00      	nop
  }

  return error;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	460b      	mov	r3, r1
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80069e6:	2302      	movs	r3, #2
 80069e8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d002      	beq.n	8006a04 <USBH_MSC_SCSI_Inquiry+0x2c>
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d03d      	beq.n	8006a7e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006a02:	e089      	b.n	8006b18 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2224      	movs	r2, #36	; 0x24
 8006a08:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	220a      	movs	r2, #10
 8006a16:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	3363      	adds	r3, #99	; 0x63
 8006a1e:	220a      	movs	r2, #10
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f004 fca8 	bl	800b378 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2212      	movs	r2, #18
 8006a2c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006a30:	7afb      	ldrb	r3, [r7, #11]
 8006a32:	015b      	lsls	r3, r3, #5
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2224      	movs	r2, #36	; 0x24
 8006a50:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f103 0210 	add.w	r2, r3, #16
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e04c      	b.n	8006b18 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006a7e:	7afb      	ldrb	r3, [r7, #11]
 8006a80:	4619      	mov	r1, r3
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f7ff fcac 	bl	80063e0 <USBH_MSC_BOT_Process>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d141      	bne.n	8006b16 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006a92:	2222      	movs	r2, #34	; 0x22
 8006a94:	2100      	movs	r1, #0
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f004 fc6e 	bl	800b378 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 031f 	and.w	r3, r3, #31
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da03      	bge.n	8006ad6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	709a      	strb	r2, [r3, #2]
 8006ad4:	e002      	b.n	8006adc <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	1cd8      	adds	r0, r3, #3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	2208      	movs	r2, #8
 8006aea:	4619      	mov	r1, r3
 8006aec:	f004 fc36 	bl	800b35c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f103 000c 	add.w	r0, r3, #12
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006afc:	3310      	adds	r3, #16
 8006afe:	2210      	movs	r2, #16
 8006b00:	4619      	mov	r1, r3
 8006b02:	f004 fc2b 	bl	800b35c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	331d      	adds	r3, #29
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006b10:	3220      	adds	r2, #32
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	601a      	str	r2, [r3, #0]
      break;
 8006b16:	bf00      	nop
  }

  return error;
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006b30:	2302      	movs	r3, #2
 8006b32:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d002      	beq.n	8006b4e <USBH_MSC_SCSI_RequestSense+0x2c>
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d03d      	beq.n	8006bc8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006b4c:	e05d      	b.n	8006c0a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	220e      	movs	r2, #14
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2280      	movs	r2, #128	; 0x80
 8006b58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	220a      	movs	r2, #10
 8006b60:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	3363      	adds	r3, #99	; 0x63
 8006b68:	2210      	movs	r2, #16
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f004 fc03 	bl	800b378 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2203      	movs	r2, #3
 8006b76:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006b7a:	7afb      	ldrb	r3, [r7, #11]
 8006b7c:	015b      	lsls	r3, r3, #5
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	220e      	movs	r2, #14
 8006b9a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f103 0210 	add.w	r2, r3, #16
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc6:	e020      	b.n	8006c0a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fc07 	bl	80063e0 <USBH_MSC_BOT_Process>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d115      	bne.n	8006c08 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006be2:	3302      	adds	r3, #2
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf6:	7b1a      	ldrb	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c02:	7b5a      	ldrb	r2, [r3, #13]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	709a      	strb	r2, [r3, #2]
      break;
 8006c08:	bf00      	nop
  }

  return error;
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	460b      	mov	r3, r1
 8006c22:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006c24:	2302      	movs	r3, #2
 8006c26:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d002      	beq.n	8006c42 <USBH_MSC_SCSI_Write+0x2e>
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d047      	beq.n	8006cd0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006c40:	e04e      	b.n	8006ce0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	fb03 f202 	mul.w	r2, r3, r2
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	220a      	movs	r2, #10
 8006c60:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3363      	adds	r3, #99	; 0x63
 8006c68:	2210      	movs	r2, #16
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f004 fb83 	bl	800b378 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	222a      	movs	r2, #42	; 0x2a
 8006c76:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006c7a:	79fa      	ldrb	r2, [r7, #7]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006c82:	79ba      	ldrb	r2, [r7, #6]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006c8a:	797a      	ldrb	r2, [r7, #5]
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006c92:	1d3b      	adds	r3, r7, #4
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006c9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006ca6:	f107 0320 	add.w	r3, r7, #32
 8006caa:	781a      	ldrb	r2, [r3, #0]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cce:	e007      	b.n	8006ce0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff fb83 	bl	80063e0 <USBH_MSC_BOT_Process>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cde:	bf00      	nop
  }

  return error;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d002      	beq.n	8006d18 <USBH_MSC_SCSI_Read+0x2e>
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d047      	beq.n	8006da6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006d16:	e04e      	b.n	8006db6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	fb03 f202 	mul.w	r2, r3, r2
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2280      	movs	r2, #128	; 0x80
 8006d2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	220a      	movs	r2, #10
 8006d36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	3363      	adds	r3, #99	; 0x63
 8006d3e:	2210      	movs	r2, #16
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f004 fb18 	bl	800b378 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2228      	movs	r2, #40	; 0x28
 8006d4c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006d50:	79fa      	ldrb	r2, [r7, #7]
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006d58:	79ba      	ldrb	r2, [r7, #6]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006d60:	797a      	ldrb	r2, [r7, #5]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006d72:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006d7c:	f107 0320 	add.w	r3, r7, #32
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006da0:	2301      	movs	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
      break;
 8006da4:	e007      	b.n	8006db6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006da6:	7afb      	ldrb	r3, [r7, #11]
 8006da8:	4619      	mov	r1, r3
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7ff fb18 	bl	80063e0 <USBH_MSC_BOT_Process>
 8006db0:	4603      	mov	r3, r0
 8006db2:	75fb      	strb	r3, [r7, #23]
      break;
 8006db4:	bf00      	nop
  }

  return error;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e029      	b.n	8006e2c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	79fa      	ldrb	r2, [r7, #7]
 8006ddc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f81f 	bl	8006e34 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f004 f83b 	bl	800aea0 <USBH_LL_Init>

  return USBH_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e009      	b.n	8006e5a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	33e0      	adds	r3, #224	; 0xe0
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	2200      	movs	r2, #0
 8006e52:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b0e      	cmp	r3, #14
 8006e5e:	d9f2      	bls.n	8006e46 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e009      	b.n	8006e7a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e80:	d3f1      	bcc.n	8006e66 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2240      	movs	r2, #64	; 0x40
 8006ea6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10e      	bne.n	8006f18 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f00:	1c59      	adds	r1, r3, #1
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	33de      	adds	r3, #222	; 0xde
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
 8006f16:	e004      	b.n	8006f22 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	73fb      	strb	r3, [r7, #15]
 8006f1c:	e001      	b.n	8006f22 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d204      	bcs.n	8006f56 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006f54:	e001      	b.n	8006f5a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f56:	2302      	movs	r3, #2
 8006f58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	4608      	mov	r0, r1
 8006f72:	4611      	mov	r1, r2
 8006f74:	461a      	mov	r2, r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	70fb      	strb	r3, [r7, #3]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70bb      	strb	r3, [r7, #2]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f90:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f92:	e025      	b.n	8006fe0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	221a      	movs	r2, #26
 8006f98:	fb02 f303 	mul.w	r3, r2, r3
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3302      	adds	r3, #2
 8006fa4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	795b      	ldrb	r3, [r3, #5]
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d002      	beq.n	8006fb6 <USBH_FindInterface+0x4e>
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	2bff      	cmp	r3, #255	; 0xff
 8006fb4:	d111      	bne.n	8006fda <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fba:	78ba      	ldrb	r2, [r7, #2]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d002      	beq.n	8006fc6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fc0:	78bb      	ldrb	r3, [r7, #2]
 8006fc2:	2bff      	cmp	r3, #255	; 0xff
 8006fc4:	d109      	bne.n	8006fda <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fca:	787a      	ldrb	r2, [r7, #1]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d002      	beq.n	8006fd6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fd0:	787b      	ldrb	r3, [r7, #1]
 8006fd2:	2bff      	cmp	r3, #255	; 0xff
 8006fd4:	d101      	bne.n	8006fda <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	e006      	b.n	8006fe8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d9d6      	bls.n	8006f94 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006fe6:	23ff      	movs	r3, #255	; 0xff
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f003 ff8b 	bl	800af18 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007002:	2101      	movs	r1, #1
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f004 f8a4 	bl	800b152 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af04      	add	r7, sp, #16
 800701a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800701c:	2302      	movs	r3, #2
 800701e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b01      	cmp	r3, #1
 800702e:	d102      	bne.n	8007036 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2203      	movs	r2, #3
 8007034:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b0b      	cmp	r3, #11
 800703e:	f200 81b3 	bhi.w	80073a8 <USBH_Process+0x394>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <USBH_Process+0x34>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007079 	.word	0x08007079
 800704c:	080070ab 	.word	0x080070ab
 8007050:	08007113 	.word	0x08007113
 8007054:	08007343 	.word	0x08007343
 8007058:	080073a9 	.word	0x080073a9
 800705c:	080071b7 	.word	0x080071b7
 8007060:	080072e9 	.word	0x080072e9
 8007064:	080071ed 	.word	0x080071ed
 8007068:	0800720d 	.word	0x0800720d
 800706c:	0800722d 	.word	0x0800722d
 8007070:	0800725b 	.word	0x0800725b
 8007074:	0800732b 	.word	0x0800732b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8193 	beq.w	80073ac <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800708c:	20c8      	movs	r0, #200	; 0xc8
 800708e:	f004 f8d7 	bl	800b240 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f003 ff9d 	bl	800afd2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070a8:	e180      	b.n	80073ac <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d107      	bne.n	80070c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80070c2:	e182      	b.n	80073ca <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ce:	d914      	bls.n	80070fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070d6:	3301      	adds	r3, #1
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d903      	bls.n	80070f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	220d      	movs	r2, #13
 80070ee:	701a      	strb	r2, [r3, #0]
      break;
 80070f0:	e16b      	b.n	80073ca <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
      break;
 80070f8:	e167      	b.n	80073ca <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007100:	f103 020a 	add.w	r2, r3, #10
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800710a:	200a      	movs	r0, #10
 800710c:	f004 f898 	bl	800b240 <USBH_Delay>
      break;
 8007110:	e15b      	b.n	80073ca <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007122:	2104      	movs	r1, #4
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007128:	2064      	movs	r0, #100	; 0x64
 800712a:	f004 f889 	bl	800b240 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f003 ff28 	bl	800af84 <USBH_LL_GetSpeed>
 8007134:	4603      	mov	r3, r0
 8007136:	461a      	mov	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2205      	movs	r2, #5
 8007142:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007144:	2100      	movs	r1, #0
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 f92f 	bl	80083aa <USBH_AllocPipe>
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007154:	2180      	movs	r1, #128	; 0x80
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 f927 	bl	80083aa <USBH_AllocPipe>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	7919      	ldrb	r1, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007178:	b292      	uxth	r2, r2
 800717a:	9202      	str	r2, [sp, #8]
 800717c:	2200      	movs	r2, #0
 800717e:	9201      	str	r2, [sp, #4]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	4603      	mov	r3, r0
 8007184:	2280      	movs	r2, #128	; 0x80
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 f8e0 	bl	800834c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7959      	ldrb	r1, [r3, #5]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80071a0:	b292      	uxth	r2, r2
 80071a2:	9202      	str	r2, [sp, #8]
 80071a4:	2200      	movs	r2, #0
 80071a6:	9201      	str	r2, [sp, #4]
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	4603      	mov	r3, r0
 80071ac:	2200      	movs	r2, #0
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 f8cc 	bl	800834c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071b4:	e109      	b.n	80073ca <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f90c 	bl	80073d4 <USBH_HandleEnum>
 80071bc:	4603      	mov	r3, r0
 80071be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 80f3 	bne.w	80073b0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d103      	bne.n	80071e4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2208      	movs	r2, #8
 80071e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80071e2:	e0e5      	b.n	80073b0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2207      	movs	r2, #7
 80071e8:	701a      	strb	r2, [r3, #0]
      break;
 80071ea:	e0e1      	b.n	80073b0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 80de 	beq.w	80073b4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071fe:	2101      	movs	r1, #1
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2208      	movs	r2, #8
 8007208:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800720a:	e0d3      	b.n	80073b4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007212:	b29b      	uxth	r3, r3
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fc20 	bl	8007a5c <USBH_SetCfg>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	f040 80ca 	bne.w	80073b8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2209      	movs	r2, #9
 8007228:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800722a:	e0c5      	b.n	80073b8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800723a:	2101      	movs	r1, #1
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc30 	bl	8007aa2 <USBH_SetFeature>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	f040 80b9 	bne.w	80073bc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	220a      	movs	r2, #10
 800724e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007250:	e0b4      	b.n	80073bc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	220a      	movs	r2, #10
 8007256:	701a      	strb	r2, [r3, #0]
      break;
 8007258:	e0b0      	b.n	80073bc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80ad 	beq.w	80073c0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]
 8007272:	e016      	b.n	80072a2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007274:	7bfa      	ldrb	r2, [r7, #15]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32de      	adds	r2, #222	; 0xde
 800727a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727e:	791a      	ldrb	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007286:	429a      	cmp	r2, r3
 8007288:	d108      	bne.n	800729c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800728a:	7bfa      	ldrb	r2, [r7, #15]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	32de      	adds	r2, #222	; 0xde
 8007290:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800729a:	e005      	b.n	80072a8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	3301      	adds	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0e5      	beq.n	8007274 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d016      	beq.n	80072e0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2206      	movs	r2, #6
 80072c8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072d0:	2103      	movs	r1, #3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072d6:	e073      	b.n	80073c0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	220d      	movs	r2, #13
 80072dc:	701a      	strb	r2, [r3, #0]
      break;
 80072de:	e06f      	b.n	80073c0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	220d      	movs	r2, #13
 80072e4:	701a      	strb	r2, [r3, #0]
      break;
 80072e6:	e06b      	b.n	80073c0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d017      	beq.n	8007322 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	220b      	movs	r2, #11
 800730e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007310:	e058      	b.n	80073c4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d154      	bne.n	80073c4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	220d      	movs	r2, #13
 800731e:	701a      	strb	r2, [r3, #0]
      break;
 8007320:	e050      	b.n	80073c4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	220d      	movs	r2, #13
 8007326:	701a      	strb	r2, [r3, #0]
      break;
 8007328:	e04c      	b.n	80073c4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d049      	beq.n	80073c8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
      }
      break;
 8007340:	e042      	b.n	80073c8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff fd72 	bl	8006e34 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d009      	beq.n	800736e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800737e:	2105      	movs	r1, #5
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	d107      	bne.n	80073a0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff fe2b 	bl	8006ff4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800739e:	e014      	b.n	80073ca <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f003 fdb9 	bl	800af18 <USBH_LL_Start>
      break;
 80073a6:	e010      	b.n	80073ca <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80073a8:	bf00      	nop
 80073aa:	e00e      	b.n	80073ca <USBH_Process+0x3b6>
      break;
 80073ac:	bf00      	nop
 80073ae:	e00c      	b.n	80073ca <USBH_Process+0x3b6>
      break;
 80073b0:	bf00      	nop
 80073b2:	e00a      	b.n	80073ca <USBH_Process+0x3b6>
    break;
 80073b4:	bf00      	nop
 80073b6:	e008      	b.n	80073ca <USBH_Process+0x3b6>
      break;
 80073b8:	bf00      	nop
 80073ba:	e006      	b.n	80073ca <USBH_Process+0x3b6>
      break;
 80073bc:	bf00      	nop
 80073be:	e004      	b.n	80073ca <USBH_Process+0x3b6>
      break;
 80073c0:	bf00      	nop
 80073c2:	e002      	b.n	80073ca <USBH_Process+0x3b6>
      break;
 80073c4:	bf00      	nop
 80073c6:	e000      	b.n	80073ca <USBH_Process+0x3b6>
      break;
 80073c8:	bf00      	nop
  }
  return USBH_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af04      	add	r7, sp, #16
 80073da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80073dc:	2301      	movs	r3, #1
 80073de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80073e0:	2301      	movs	r3, #1
 80073e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	f200 81c1 	bhi.w	8007770 <USBH_HandleEnum+0x39c>
 80073ee:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <USBH_HandleEnum+0x20>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	08007415 	.word	0x08007415
 80073f8:	080074d3 	.word	0x080074d3
 80073fc:	0800753d 	.word	0x0800753d
 8007400:	080075cb 	.word	0x080075cb
 8007404:	08007635 	.word	0x08007635
 8007408:	080076a5 	.word	0x080076a5
 800740c:	080076eb 	.word	0x080076eb
 8007410:	08007731 	.word	0x08007731
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007414:	2108      	movs	r1, #8
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa50 	bl	80078bc <USBH_Get_DevDesc>
 800741c:	4603      	mov	r3, r0
 800741e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d130      	bne.n	8007488 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7919      	ldrb	r1, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800744a:	b292      	uxth	r2, r2
 800744c:	9202      	str	r2, [sp, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	9201      	str	r2, [sp, #4]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	4603      	mov	r3, r0
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 ff77 	bl	800834c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7959      	ldrb	r1, [r3, #5]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007472:	b292      	uxth	r2, r2
 8007474:	9202      	str	r2, [sp, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	9201      	str	r2, [sp, #4]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	4603      	mov	r3, r0
 800747e:	2200      	movs	r2, #0
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 ff63 	bl	800834c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007486:	e175      	b.n	8007774 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b03      	cmp	r3, #3
 800748c:	f040 8172 	bne.w	8007774 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007496:	3301      	adds	r3, #1
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d903      	bls.n	80074b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	220d      	movs	r2, #13
 80074ae:	701a      	strb	r2, [r3, #0]
      break;
 80074b0:	e160      	b.n	8007774 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	795b      	ldrb	r3, [r3, #5]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 ff97 	bl	80083ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	791b      	ldrb	r3, [r3, #4]
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 ff91 	bl	80083ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
      break;
 80074d0:	e150      	b.n	8007774 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80074d2:	2112      	movs	r1, #18
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f9f1 	bl	80078bc <USBH_Get_DevDesc>
 80074da:	4603      	mov	r3, r0
 80074dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074ea:	e145      	b.n	8007778 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	f040 8142 	bne.w	8007778 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074fa:	3301      	adds	r3, #1
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800750a:	2b03      	cmp	r3, #3
 800750c:	d903      	bls.n	8007516 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	220d      	movs	r2, #13
 8007512:	701a      	strb	r2, [r3, #0]
      break;
 8007514:	e130      	b.n	8007778 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	795b      	ldrb	r3, [r3, #5]
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 ff65 	bl	80083ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	791b      	ldrb	r3, [r3, #4]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 ff5f 	bl	80083ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
      break;
 800753a:	e11d      	b.n	8007778 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800753c:	2101      	movs	r1, #1
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa68 	bl	8007a14 <USBH_SetAddress>
 8007544:	4603      	mov	r3, r0
 8007546:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d132      	bne.n	80075b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800754e:	2002      	movs	r0, #2
 8007550:	f003 fe76 	bl	800b240 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2203      	movs	r2, #3
 8007560:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7919      	ldrb	r1, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007576:	b292      	uxth	r2, r2
 8007578:	9202      	str	r2, [sp, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	9201      	str	r2, [sp, #4]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4603      	mov	r3, r0
 8007582:	2280      	movs	r2, #128	; 0x80
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fee1 	bl	800834c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7959      	ldrb	r1, [r3, #5]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800759e:	b292      	uxth	r2, r2
 80075a0:	9202      	str	r2, [sp, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	9201      	str	r2, [sp, #4]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4603      	mov	r3, r0
 80075aa:	2200      	movs	r2, #0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fecd 	bl	800834c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80075b2:	e0e3      	b.n	800777c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	f040 80e0 	bne.w	800777c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	220d      	movs	r2, #13
 80075c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	705a      	strb	r2, [r3, #1]
      break;
 80075c8:	e0d8      	b.n	800777c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80075ca:	2109      	movs	r1, #9
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f99d 	bl	800790c <USBH_Get_CfgDesc>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d103      	bne.n	80075e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2204      	movs	r2, #4
 80075e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075e2:	e0cd      	b.n	8007780 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	f040 80ca 	bne.w	8007780 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075f2:	3301      	adds	r3, #1
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007602:	2b03      	cmp	r3, #3
 8007604:	d903      	bls.n	800760e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	220d      	movs	r2, #13
 800760a:	701a      	strb	r2, [r3, #0]
      break;
 800760c:	e0b8      	b.n	8007780 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	795b      	ldrb	r3, [r3, #5]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fee9 	bl	80083ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	791b      	ldrb	r3, [r3, #4]
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fee3 	bl	80083ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	701a      	strb	r2, [r3, #0]
      break;
 8007632:	e0a5      	b.n	8007780 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f965 	bl	800790c <USBH_Get_CfgDesc>
 8007642:	4603      	mov	r3, r0
 8007644:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d103      	bne.n	8007654 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2205      	movs	r2, #5
 8007650:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007652:	e097      	b.n	8007784 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b03      	cmp	r3, #3
 8007658:	f040 8094 	bne.w	8007784 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007662:	3301      	adds	r3, #1
 8007664:	b2da      	uxtb	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007672:	2b03      	cmp	r3, #3
 8007674:	d903      	bls.n	800767e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	220d      	movs	r2, #13
 800767a:	701a      	strb	r2, [r3, #0]
      break;
 800767c:	e082      	b.n	8007784 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	795b      	ldrb	r3, [r3, #5]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 feb1 	bl	80083ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	791b      	ldrb	r3, [r3, #4]
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 feab 	bl	80083ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	701a      	strb	r2, [r3, #0]
      break;
 80076a2:	e06f      	b.n	8007784 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d019      	beq.n	80076e2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80076ba:	23ff      	movs	r3, #255	; 0xff
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f949 	bl	8007954 <USBH_Get_StringDesc>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2206      	movs	r2, #6
 80076d0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80076d2:	e059      	b.n	8007788 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d156      	bne.n	8007788 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2206      	movs	r2, #6
 80076de:	705a      	strb	r2, [r3, #1]
      break;
 80076e0:	e052      	b.n	8007788 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2206      	movs	r2, #6
 80076e6:	705a      	strb	r2, [r3, #1]
      break;
 80076e8:	e04e      	b.n	8007788 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d019      	beq.n	8007728 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007700:	23ff      	movs	r3, #255	; 0xff
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f926 	bl	8007954 <USBH_Get_StringDesc>
 8007708:	4603      	mov	r3, r0
 800770a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2207      	movs	r2, #7
 8007716:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007718:	e038      	b.n	800778c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d135      	bne.n	800778c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2207      	movs	r2, #7
 8007724:	705a      	strb	r2, [r3, #1]
      break;
 8007726:	e031      	b.n	800778c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2207      	movs	r2, #7
 800772c:	705a      	strb	r2, [r3, #1]
      break;
 800772e:	e02d      	b.n	800778c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007736:	2b00      	cmp	r3, #0
 8007738:	d017      	beq.n	800776a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007746:	23ff      	movs	r3, #255	; 0xff
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f903 	bl	8007954 <USBH_Get_StringDesc>
 800774e:	4603      	mov	r3, r0
 8007750:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800775c:	e018      	b.n	8007790 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b03      	cmp	r3, #3
 8007762:	d115      	bne.n	8007790 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
      break;
 8007768:	e012      	b.n	8007790 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
      break;
 800776e:	e00f      	b.n	8007790 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007770:	bf00      	nop
 8007772:	e00e      	b.n	8007792 <USBH_HandleEnum+0x3be>
      break;
 8007774:	bf00      	nop
 8007776:	e00c      	b.n	8007792 <USBH_HandleEnum+0x3be>
      break;
 8007778:	bf00      	nop
 800777a:	e00a      	b.n	8007792 <USBH_HandleEnum+0x3be>
      break;
 800777c:	bf00      	nop
 800777e:	e008      	b.n	8007792 <USBH_HandleEnum+0x3be>
      break;
 8007780:	bf00      	nop
 8007782:	e006      	b.n	8007792 <USBH_HandleEnum+0x3be>
      break;
 8007784:	bf00      	nop
 8007786:	e004      	b.n	8007792 <USBH_HandleEnum+0x3be>
      break;
 8007788:	bf00      	nop
 800778a:	e002      	b.n	8007792 <USBH_HandleEnum+0x3be>
      break;
 800778c:	bf00      	nop
 800778e:	e000      	b.n	8007792 <USBH_HandleEnum+0x3be>
      break;
 8007790:	bf00      	nop
  }
  return Status;
 8007792:	7bfb      	ldrb	r3, [r7, #15]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f804 	bl	80077de <USBH_HandleSof>
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b0b      	cmp	r3, #11
 80077ee:	d10a      	bne.n	8007806 <USBH_HandleSof+0x28>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	4798      	blx	r3
  }
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800781e:	bf00      	nop
}
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800783a:	bf00      	nop
}
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f003 fb5a 	bl	800af4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	791b      	ldrb	r3, [r3, #4]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fda3 	bl	80083ec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	795b      	ldrb	r3, [r3, #5]
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fd9d 	bl	80083ec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078da:	2100      	movs	r1, #0
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f864 	bl	80079aa <USBH_GetDescriptor>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73fb      	strb	r3, [r7, #15]
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f203 3026 	addw	r0, r3, #806	; 0x326
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	b292      	uxth	r2, r2
 80078fc:	4619      	mov	r1, r3
 80078fe:	f000 f918 	bl	8007b32 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007902:	7bfb      	ldrb	r3, [r7, #15]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af02      	add	r7, sp, #8
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	331c      	adds	r3, #28
 800791c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007928:	2100      	movs	r1, #0
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f83d 	bl	80079aa <USBH_GetDescriptor>
 8007930:	4603      	mov	r3, r0
 8007932:	72fb      	strb	r3, [r7, #11]
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d107      	bne.n	800794a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007940:	887a      	ldrh	r2, [r7, #2]
 8007942:	68f9      	ldr	r1, [r7, #12]
 8007944:	4618      	mov	r0, r3
 8007946:	f000 f964 	bl	8007c12 <USBH_ParseCfgDesc>
  }

  return status;
 800794a:	7afb      	ldrb	r3, [r7, #11]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af02      	add	r7, sp, #8
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	461a      	mov	r2, r3
 8007960:	460b      	mov	r3, r1
 8007962:	72fb      	strb	r3, [r7, #11]
 8007964:	4613      	mov	r3, r2
 8007966:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	b29b      	uxth	r3, r3
 800796c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007970:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007978:	893b      	ldrh	r3, [r7, #8]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	460b      	mov	r3, r1
 800797e:	2100      	movs	r1, #0
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f812 	bl	80079aa <USBH_GetDescriptor>
 8007986:	4603      	mov	r3, r0
 8007988:	75fb      	strb	r3, [r7, #23]
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d107      	bne.n	80079a0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007996:	893a      	ldrh	r2, [r7, #8]
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 fa37 	bl	8007e0e <USBH_ParseStringDesc>
  }

  return status;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	607b      	str	r3, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	72fb      	strb	r3, [r7, #11]
 80079b8:	4613      	mov	r3, r2
 80079ba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	789b      	ldrb	r3, [r3, #2]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d11c      	bne.n	80079fe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2206      	movs	r2, #6
 80079d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	893a      	ldrh	r2, [r7, #8]
 80079da:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80079dc:	893b      	ldrh	r3, [r7, #8]
 80079de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079e6:	d104      	bne.n	80079f2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f240 4209 	movw	r2, #1033	; 0x409
 80079ee:	829a      	strh	r2, [r3, #20]
 80079f0:	e002      	b.n	80079f8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8b3a      	ldrh	r2, [r7, #24]
 80079fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80079fe:	8b3b      	ldrh	r3, [r7, #24]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6879      	ldr	r1, [r7, #4]
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 fa50 	bl	8007eaa <USBH_CtlReq>
 8007a0a:	4603      	mov	r3, r0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	789b      	ldrb	r3, [r3, #2]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d10f      	bne.n	8007a48 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2205      	movs	r2, #5
 8007a32:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa2c 	bl	8007eaa <USBH_CtlReq>
 8007a52:	4603      	mov	r3, r0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	789b      	ldrb	r3, [r3, #2]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d10e      	bne.n	8007a8e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2209      	movs	r2, #9
 8007a7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	887a      	ldrh	r2, [r7, #2]
 8007a80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa09 	bl	8007eaa <USBH_CtlReq>
 8007a98:	4603      	mov	r3, r0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	789b      	ldrb	r3, [r3, #2]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d10f      	bne.n	8007ad6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2203      	movs	r2, #3
 8007ac0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2100      	movs	r1, #0
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9e5 	bl	8007eaa <USBH_CtlReq>
 8007ae0:	4603      	mov	r3, r0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	460b      	mov	r3, r1
 8007af4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	789b      	ldrb	r3, [r3, #2]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d10f      	bne.n	8007b1e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2202      	movs	r2, #2
 8007b02:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2100      	movs	r1, #0
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9c1 	bl	8007eaa <USBH_CtlReq>
 8007b28:	4603      	mov	r3, r0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	785a      	ldrb	r2, [r3, #1]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3302      	adds	r3, #2
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	3303      	adds	r3, #3
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	791a      	ldrb	r2, [r3, #4]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	795a      	ldrb	r2, [r3, #5]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	799a      	ldrb	r2, [r3, #6]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	79da      	ldrb	r2, [r3, #7]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d939      	bls.n	8007c06 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	3308      	adds	r3, #8
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	3309      	adds	r3, #9
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	330a      	adds	r3, #10
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	330b      	adds	r3, #11
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	330d      	adds	r3, #13
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	7b9a      	ldrb	r2, [r3, #14]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	7bda      	ldrb	r2, [r3, #15]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	7c1a      	ldrb	r2, [r3, #16]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	7c5a      	ldrb	r2, [r3, #17]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	745a      	strb	r2, [r3, #17]
  }
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b08a      	sub	sp, #40	; 0x28
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	781a      	ldrb	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	785a      	ldrb	r2, [r3, #1]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	3302      	adds	r3, #2
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	3303      	adds	r3, #3
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	791a      	ldrb	r2, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	795a      	ldrb	r2, [r3, #5]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	799a      	ldrb	r2, [r3, #6]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	79da      	ldrb	r2, [r3, #7]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	7a1a      	ldrb	r2, [r3, #8]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c88:	88fb      	ldrh	r3, [r7, #6]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d95f      	bls.n	8007d4e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c8e:	2309      	movs	r3, #9
 8007c90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c96:	e051      	b.n	8007d3c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c98:	f107 0316 	add.w	r3, r7, #22
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ca0:	f000 f8e8 	bl	8007e74 <USBH_GetNextDesc>
 8007ca4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d146      	bne.n	8007d3c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cb2:	221a      	movs	r2, #26
 8007cb4:	fb02 f303 	mul.w	r3, r2, r3
 8007cb8:	3308      	adds	r3, #8
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cc4:	69f8      	ldr	r0, [r7, #28]
 8007cc6:	f000 f846 	bl	8007d56 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cd4:	e022      	b.n	8007d1c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007cd6:	f107 0316 	add.w	r3, r7, #22
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cde:	f000 f8c9 	bl	8007e74 <USBH_GetNextDesc>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b05      	cmp	r3, #5
 8007cea:	d117      	bne.n	8007d1c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007cec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cf0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007cf4:	3201      	adds	r2, #1
 8007cf6:	00d2      	lsls	r2, r2, #3
 8007cf8:	211a      	movs	r1, #26
 8007cfa:	fb01 f303 	mul.w	r3, r1, r3
 8007cfe:	4413      	add	r3, r2
 8007d00:	3308      	adds	r3, #8
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	3304      	adds	r3, #4
 8007d08:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d0c:	69b8      	ldr	r0, [r7, #24]
 8007d0e:	f000 f851 	bl	8007db4 <USBH_ParseEPDesc>
            ep_ix++;
 8007d12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007d16:	3301      	adds	r3, #1
 8007d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d204      	bcs.n	8007d32 <USBH_ParseCfgDesc+0x120>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	885a      	ldrh	r2, [r3, #2]
 8007d2c:	8afb      	ldrh	r3, [r7, #22]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d8d1      	bhi.n	8007cd6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d36:	3301      	adds	r3, #1
 8007d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d804      	bhi.n	8007d4e <USBH_ParseCfgDesc+0x13c>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	885a      	ldrh	r2, [r3, #2]
 8007d48:	8afb      	ldrh	r3, [r7, #22]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d8a4      	bhi.n	8007c98 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007d4e:	bf00      	nop
 8007d50:	3728      	adds	r7, #40	; 0x28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	785a      	ldrb	r2, [r3, #1]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	789a      	ldrb	r2, [r3, #2]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	78da      	ldrb	r2, [r3, #3]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	791a      	ldrb	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	795a      	ldrb	r2, [r3, #5]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	799a      	ldrb	r2, [r3, #6]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	79da      	ldrb	r2, [r3, #7]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	7a1a      	ldrb	r2, [r3, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	721a      	strb	r2, [r3, #8]
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781a      	ldrb	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	785a      	ldrb	r2, [r3, #1]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	789a      	ldrb	r2, [r3, #2]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	78da      	ldrb	r2, [r3, #3]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	3304      	adds	r3, #4
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	3305      	adds	r3, #5
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	021b      	lsls	r3, r3, #8
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4313      	orrs	r3, r2
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	799a      	ldrb	r2, [r3, #6]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	719a      	strb	r2, [r3, #6]
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b087      	sub	sp, #28
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d120      	bne.n	8007e68 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	1e9a      	subs	r2, r3, #2
 8007e2c:	88fb      	ldrh	r3, [r7, #6]
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	bf28      	it	cs
 8007e32:	4613      	movcs	r3, r2
 8007e34:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3302      	adds	r3, #2
 8007e3a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	82fb      	strh	r3, [r7, #22]
 8007e40:	e00b      	b.n	8007e5a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007e42:	8afb      	ldrh	r3, [r7, #22]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	3301      	adds	r3, #1
 8007e52:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007e54:	8afb      	ldrh	r3, [r7, #22]
 8007e56:	3302      	adds	r3, #2
 8007e58:	82fb      	strh	r3, [r7, #22]
 8007e5a:	8afa      	ldrh	r2, [r7, #22]
 8007e5c:	8abb      	ldrh	r3, [r7, #20]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d3ef      	bcc.n	8007e42 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
  }
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	881a      	ldrh	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	4413      	add	r3, r2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4413      	add	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b086      	sub	sp, #24
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	789b      	ldrb	r3, [r3, #2]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d002      	beq.n	8007eca <USBH_CtlReq+0x20>
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d00f      	beq.n	8007ee8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ec8:	e027      	b.n	8007f1a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	88fa      	ldrh	r2, [r7, #6]
 8007ed4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee6:	e018      	b.n	8007f1a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f81b 	bl	8007f24 <USBH_HandleControl>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <USBH_CtlReq+0x54>
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d106      	bne.n	8007f0c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2201      	movs	r2, #1
 8007f02:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	761a      	strb	r2, [r3, #24]
      break;
 8007f0a:	e005      	b.n	8007f18 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d102      	bne.n	8007f18 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	709a      	strb	r2, [r3, #2]
      break;
 8007f18:	bf00      	nop
  }
  return status;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	7e1b      	ldrb	r3, [r3, #24]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	2b0a      	cmp	r3, #10
 8007f3c:	f200 8156 	bhi.w	80081ec <USBH_HandleControl+0x2c8>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <USBH_HandleControl+0x24>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f75 	.word	0x08007f75
 8007f4c:	08007f8f 	.word	0x08007f8f
 8007f50:	08007ff9 	.word	0x08007ff9
 8007f54:	0800801f 	.word	0x0800801f
 8007f58:	08008057 	.word	0x08008057
 8007f5c:	08008081 	.word	0x08008081
 8007f60:	080080d3 	.word	0x080080d3
 8007f64:	080080f5 	.word	0x080080f5
 8007f68:	08008131 	.word	0x08008131
 8007f6c:	08008157 	.word	0x08008157
 8007f70:	08008195 	.word	0x08008195
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f103 0110 	add.w	r1, r3, #16
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	795b      	ldrb	r3, [r3, #5]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f943 	bl	800820c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	761a      	strb	r2, [r3, #24]
      break;
 8007f8c:	e139      	b.n	8008202 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	795b      	ldrb	r3, [r3, #5]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f003 f8c9 	bl	800b12c <USBH_LL_GetURBState>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d11e      	bne.n	8007fe2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	7c1b      	ldrb	r3, [r3, #16]
 8007fa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	8adb      	ldrh	r3, [r3, #22]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007fb6:	7b7b      	ldrb	r3, [r7, #13]
 8007fb8:	2b80      	cmp	r3, #128	; 0x80
 8007fba:	d103      	bne.n	8007fc4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2203      	movs	r2, #3
 8007fc0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fc2:	e115      	b.n	80081f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2205      	movs	r2, #5
 8007fc8:	761a      	strb	r2, [r3, #24]
      break;
 8007fca:	e111      	b.n	80081f0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007fcc:	7b7b      	ldrb	r3, [r7, #13]
 8007fce:	2b80      	cmp	r3, #128	; 0x80
 8007fd0:	d103      	bne.n	8007fda <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2209      	movs	r2, #9
 8007fd6:	761a      	strb	r2, [r3, #24]
      break;
 8007fd8:	e10a      	b.n	80081f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2207      	movs	r2, #7
 8007fde:	761a      	strb	r2, [r3, #24]
      break;
 8007fe0:	e106      	b.n	80081f0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d003      	beq.n	8007ff0 <USBH_HandleControl+0xcc>
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	f040 8100 	bne.w	80081f0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	220b      	movs	r2, #11
 8007ff4:	761a      	strb	r2, [r3, #24]
      break;
 8007ff6:	e0fb      	b.n	80081f0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6899      	ldr	r1, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	899a      	ldrh	r2, [r3, #12]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	791b      	ldrb	r3, [r3, #4]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f93a 	bl	800828a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2204      	movs	r2, #4
 800801a:	761a      	strb	r2, [r3, #24]
      break;
 800801c:	e0f1      	b.n	8008202 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	791b      	ldrb	r3, [r3, #4]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f003 f881 	bl	800b12c <USBH_LL_GetURBState>
 800802a:	4603      	mov	r3, r0
 800802c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d102      	bne.n	800803a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2209      	movs	r2, #9
 8008038:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b05      	cmp	r3, #5
 800803e:	d102      	bne.n	8008046 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008040:	2303      	movs	r3, #3
 8008042:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008044:	e0d6      	b.n	80081f4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	2b04      	cmp	r3, #4
 800804a:	f040 80d3 	bne.w	80081f4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	220b      	movs	r2, #11
 8008052:	761a      	strb	r2, [r3, #24]
      break;
 8008054:	e0ce      	b.n	80081f4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6899      	ldr	r1, [r3, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	899a      	ldrh	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	795b      	ldrb	r3, [r3, #5]
 8008062:	2001      	movs	r0, #1
 8008064:	9000      	str	r0, [sp, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f8ea 	bl	8008240 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008072:	b29a      	uxth	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2206      	movs	r2, #6
 800807c:	761a      	strb	r2, [r3, #24]
      break;
 800807e:	e0c0      	b.n	8008202 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	795b      	ldrb	r3, [r3, #5]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f003 f850 	bl	800b12c <USBH_LL_GetURBState>
 800808c:	4603      	mov	r3, r0
 800808e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008090:	7bbb      	ldrb	r3, [r7, #14]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d103      	bne.n	800809e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2207      	movs	r2, #7
 800809a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800809c:	e0ac      	b.n	80081f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b05      	cmp	r3, #5
 80080a2:	d105      	bne.n	80080b0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	220c      	movs	r2, #12
 80080a8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80080aa:	2303      	movs	r3, #3
 80080ac:	73fb      	strb	r3, [r7, #15]
      break;
 80080ae:	e0a3      	b.n	80081f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d103      	bne.n	80080be <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2205      	movs	r2, #5
 80080ba:	761a      	strb	r2, [r3, #24]
      break;
 80080bc:	e09c      	b.n	80081f8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	f040 8099 	bne.w	80081f8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	220b      	movs	r2, #11
 80080ca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80080cc:	2302      	movs	r3, #2
 80080ce:	73fb      	strb	r3, [r7, #15]
      break;
 80080d0:	e092      	b.n	80081f8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	791b      	ldrb	r3, [r3, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f8d5 	bl	800828a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2208      	movs	r2, #8
 80080f0:	761a      	strb	r2, [r3, #24]

      break;
 80080f2:	e086      	b.n	8008202 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	791b      	ldrb	r3, [r3, #4]
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f003 f816 	bl	800b12c <USBH_LL_GetURBState>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d105      	bne.n	8008116 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	220d      	movs	r2, #13
 800810e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008114:	e072      	b.n	80081fc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b04      	cmp	r3, #4
 800811a:	d103      	bne.n	8008124 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	220b      	movs	r2, #11
 8008120:	761a      	strb	r2, [r3, #24]
      break;
 8008122:	e06b      	b.n	80081fc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b05      	cmp	r3, #5
 8008128:	d168      	bne.n	80081fc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800812a:	2303      	movs	r3, #3
 800812c:	73fb      	strb	r3, [r7, #15]
      break;
 800812e:	e065      	b.n	80081fc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	795b      	ldrb	r3, [r3, #5]
 8008134:	2201      	movs	r2, #1
 8008136:	9200      	str	r2, [sp, #0]
 8008138:	2200      	movs	r2, #0
 800813a:	2100      	movs	r1, #0
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f87f 	bl	8008240 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008148:	b29a      	uxth	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	220a      	movs	r2, #10
 8008152:	761a      	strb	r2, [r3, #24]
      break;
 8008154:	e055      	b.n	8008202 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	795b      	ldrb	r3, [r3, #5]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f002 ffe5 	bl	800b12c <USBH_LL_GetURBState>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d105      	bne.n	8008178 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	220d      	movs	r2, #13
 8008174:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008176:	e043      	b.n	8008200 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	2b02      	cmp	r3, #2
 800817c:	d103      	bne.n	8008186 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2209      	movs	r2, #9
 8008182:	761a      	strb	r2, [r3, #24]
      break;
 8008184:	e03c      	b.n	8008200 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b04      	cmp	r3, #4
 800818a:	d139      	bne.n	8008200 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	220b      	movs	r2, #11
 8008190:	761a      	strb	r2, [r3, #24]
      break;
 8008192:	e035      	b.n	8008200 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	7e5b      	ldrb	r3, [r3, #25]
 8008198:	3301      	adds	r3, #1
 800819a:	b2da      	uxtb	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	765a      	strb	r2, [r3, #25]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7e5b      	ldrb	r3, [r3, #25]
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d806      	bhi.n	80081b6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80081b4:	e025      	b.n	8008202 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081bc:	2106      	movs	r1, #6
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	795b      	ldrb	r3, [r3, #5]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f90c 	bl	80083ec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	791b      	ldrb	r3, [r3, #4]
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f906 	bl	80083ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081e6:	2302      	movs	r3, #2
 80081e8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ea:	e00a      	b.n	8008202 <USBH_HandleControl+0x2de>

    default:
      break;
 80081ec:	bf00      	nop
 80081ee:	e008      	b.n	8008202 <USBH_HandleControl+0x2de>
      break;
 80081f0:	bf00      	nop
 80081f2:	e006      	b.n	8008202 <USBH_HandleControl+0x2de>
      break;
 80081f4:	bf00      	nop
 80081f6:	e004      	b.n	8008202 <USBH_HandleControl+0x2de>
      break;
 80081f8:	bf00      	nop
 80081fa:	e002      	b.n	8008202 <USBH_HandleControl+0x2de>
      break;
 80081fc:	bf00      	nop
 80081fe:	e000      	b.n	8008202 <USBH_HandleControl+0x2de>
      break;
 8008200:	bf00      	nop
  }

  return status;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af04      	add	r7, sp, #16
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800821a:	79f9      	ldrb	r1, [r7, #7]
 800821c:	2300      	movs	r3, #0
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	2308      	movs	r3, #8
 8008222:	9302      	str	r3, [sp, #8]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	2300      	movs	r3, #0
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	2300      	movs	r3, #0
 800822e:	2200      	movs	r2, #0
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f002 ff4a 	bl	800b0ca <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af04      	add	r7, sp, #16
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4611      	mov	r1, r2
 800824c:	461a      	mov	r2, r3
 800824e:	460b      	mov	r3, r1
 8008250:	80fb      	strh	r3, [r7, #6]
 8008252:	4613      	mov	r3, r2
 8008254:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008264:	7979      	ldrb	r1, [r7, #5]
 8008266:	7e3b      	ldrb	r3, [r7, #24]
 8008268:	9303      	str	r3, [sp, #12]
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	2301      	movs	r3, #1
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	2300      	movs	r3, #0
 8008278:	2200      	movs	r2, #0
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f002 ff25 	bl	800b0ca <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b088      	sub	sp, #32
 800828e:	af04      	add	r7, sp, #16
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	4611      	mov	r1, r2
 8008296:	461a      	mov	r2, r3
 8008298:	460b      	mov	r3, r1
 800829a:	80fb      	strh	r3, [r7, #6]
 800829c:	4613      	mov	r3, r2
 800829e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082a0:	7979      	ldrb	r1, [r7, #5]
 80082a2:	2300      	movs	r3, #0
 80082a4:	9303      	str	r3, [sp, #12]
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	9302      	str	r3, [sp, #8]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	2301      	movs	r3, #1
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	2300      	movs	r3, #0
 80082b4:	2201      	movs	r2, #1
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f002 ff07 	bl	800b0ca <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80082bc:	2300      	movs	r3, #0

}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b088      	sub	sp, #32
 80082ca:	af04      	add	r7, sp, #16
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	4611      	mov	r1, r2
 80082d2:	461a      	mov	r2, r3
 80082d4:	460b      	mov	r3, r1
 80082d6:	80fb      	strh	r3, [r7, #6]
 80082d8:	4613      	mov	r3, r2
 80082da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082ea:	7979      	ldrb	r1, [r7, #5]
 80082ec:	7e3b      	ldrb	r3, [r7, #24]
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	88fb      	ldrh	r3, [r7, #6]
 80082f2:	9302      	str	r3, [sp, #8]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	2301      	movs	r3, #1
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	2302      	movs	r3, #2
 80082fe:	2200      	movs	r2, #0
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f002 fee2 	bl	800b0ca <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af04      	add	r7, sp, #16
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	4611      	mov	r1, r2
 800831c:	461a      	mov	r2, r3
 800831e:	460b      	mov	r3, r1
 8008320:	80fb      	strh	r3, [r7, #6]
 8008322:	4613      	mov	r3, r2
 8008324:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008326:	7979      	ldrb	r1, [r7, #5]
 8008328:	2300      	movs	r3, #0
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	9301      	str	r3, [sp, #4]
 8008334:	2301      	movs	r3, #1
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	2302      	movs	r3, #2
 800833a:	2201      	movs	r2, #1
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f002 fec4 	bl	800b0ca <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af04      	add	r7, sp, #16
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	461a      	mov	r2, r3
 800835a:	4603      	mov	r3, r0
 800835c:	70fb      	strb	r3, [r7, #3]
 800835e:	460b      	mov	r3, r1
 8008360:	70bb      	strb	r3, [r7, #2]
 8008362:	4613      	mov	r3, r2
 8008364:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008366:	7878      	ldrb	r0, [r7, #1]
 8008368:	78ba      	ldrb	r2, [r7, #2]
 800836a:	78f9      	ldrb	r1, [r7, #3]
 800836c:	8b3b      	ldrh	r3, [r7, #24]
 800836e:	9302      	str	r3, [sp, #8]
 8008370:	7d3b      	ldrb	r3, [r7, #20]
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	7c3b      	ldrb	r3, [r7, #16]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4603      	mov	r3, r0
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f002 fe57 	bl	800b02e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f002 fe76 	bl	800b08c <USBH_LL_ClosePipe>

  return USBH_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f836 	bl	8008428 <USBH_GetFreePipe>
 80083bc:	4603      	mov	r3, r0
 80083be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083c0:	89fb      	ldrh	r3, [r7, #14]
 80083c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00a      	beq.n	80083e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	89fb      	ldrh	r3, [r7, #14]
 80083ce:	f003 030f 	and.w	r3, r3, #15
 80083d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	33e0      	adds	r3, #224	; 0xe0
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083e0:	89fb      	ldrh	r3, [r7, #14]
 80083e2:	b2db      	uxtb	r3, r3
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	2b0a      	cmp	r3, #10
 80083fc:	d80d      	bhi.n	800841a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	33e0      	adds	r3, #224	; 0xe0
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008410:	6879      	ldr	r1, [r7, #4]
 8008412:	33e0      	adds	r3, #224	; 0xe0
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	440b      	add	r3, r1
 8008418:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
 8008438:	e00f      	b.n	800845a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	33e0      	adds	r3, #224	; 0xe0
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	b29b      	uxth	r3, r3
 8008452:	e007      	b.n	8008464 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	3301      	adds	r3, #1
 8008458:	73fb      	strb	r3, [r7, #15]
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b0a      	cmp	r3, #10
 800845e:	d9ec      	bls.n	800843a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008460:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	4a08      	ldr	r2, [pc, #32]	; (80084a0 <disk_status+0x30>)
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	79fa      	ldrb	r2, [r7, #7]
 8008488:	4905      	ldr	r1, [pc, #20]	; (80084a0 <disk_status+0x30>)
 800848a:	440a      	add	r2, r1
 800848c:	7a12      	ldrb	r2, [r2, #8]
 800848e:	4610      	mov	r0, r2
 8008490:	4798      	blx	r3
 8008492:	4603      	mov	r3, r0
 8008494:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008496:	7bfb      	ldrb	r3, [r7, #15]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	200000d8 	.word	0x200000d8

080084a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	4a0d      	ldr	r2, [pc, #52]	; (80084ec <disk_initialize+0x48>)
 80084b6:	5cd3      	ldrb	r3, [r2, r3]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d111      	bne.n	80084e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80084bc:	79fb      	ldrb	r3, [r7, #7]
 80084be:	4a0b      	ldr	r2, [pc, #44]	; (80084ec <disk_initialize+0x48>)
 80084c0:	2101      	movs	r1, #1
 80084c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	4a09      	ldr	r2, [pc, #36]	; (80084ec <disk_initialize+0x48>)
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	79fa      	ldrb	r2, [r7, #7]
 80084d2:	4906      	ldr	r1, [pc, #24]	; (80084ec <disk_initialize+0x48>)
 80084d4:	440a      	add	r2, r1
 80084d6:	7a12      	ldrb	r2, [r2, #8]
 80084d8:	4610      	mov	r0, r2
 80084da:	4798      	blx	r3
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200000d8 	.word	0x200000d8

080084f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80084f0:	b590      	push	{r4, r7, lr}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	4a0a      	ldr	r2, [pc, #40]	; (800852c <disk_read+0x3c>)
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	689c      	ldr	r4, [r3, #8]
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	4a07      	ldr	r2, [pc, #28]	; (800852c <disk_read+0x3c>)
 8008510:	4413      	add	r3, r2
 8008512:	7a18      	ldrb	r0, [r3, #8]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	47a0      	blx	r4
 800851c:	4603      	mov	r3, r0
 800851e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008520:	7dfb      	ldrb	r3, [r7, #23]
}
 8008522:	4618      	mov	r0, r3
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	bd90      	pop	{r4, r7, pc}
 800852a:	bf00      	nop
 800852c:	200000d8 	.word	0x200000d8

08008530 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008530:	b590      	push	{r4, r7, lr}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60b9      	str	r1, [r7, #8]
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	4a0a      	ldr	r2, [pc, #40]	; (800856c <disk_write+0x3c>)
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	68dc      	ldr	r4, [r3, #12]
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	4a07      	ldr	r2, [pc, #28]	; (800856c <disk_write+0x3c>)
 8008550:	4413      	add	r3, r2
 8008552:	7a18      	ldrb	r0, [r3, #8]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	47a0      	blx	r4
 800855c:	4603      	mov	r3, r0
 800855e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008560:	7dfb      	ldrb	r3, [r7, #23]
}
 8008562:	4618      	mov	r0, r3
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	bd90      	pop	{r4, r7, pc}
 800856a:	bf00      	nop
 800856c:	200000d8 	.word	0x200000d8

08008570 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	603a      	str	r2, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
 800857c:	460b      	mov	r3, r1
 800857e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	4a09      	ldr	r2, [pc, #36]	; (80085a8 <disk_ioctl+0x38>)
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	79fa      	ldrb	r2, [r7, #7]
 800858e:	4906      	ldr	r1, [pc, #24]	; (80085a8 <disk_ioctl+0x38>)
 8008590:	440a      	add	r2, r1
 8008592:	7a10      	ldrb	r0, [r2, #8]
 8008594:	79b9      	ldrb	r1, [r7, #6]
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	4798      	blx	r3
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
  return res;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	200000d8 	.word	0x200000d8

080085ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3301      	adds	r3, #1
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	b21a      	sxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b21b      	sxth	r3, r3
 80085c8:	4313      	orrs	r3, r2
 80085ca:	b21b      	sxth	r3, r3
 80085cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80085ce:	89fb      	ldrh	r3, [r7, #14]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3303      	adds	r3, #3
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	3202      	adds	r2, #2
 80085f4:	7812      	ldrb	r2, [r2, #0]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	3201      	adds	r2, #1
 8008602:	7812      	ldrb	r2, [r2, #0]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	7812      	ldrb	r2, [r2, #0]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
	return rv;
 8008614:	68fb      	ldr	r3, [r7, #12]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	887a      	ldrh	r2, [r7, #2]
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	887b      	ldrh	r3, [r7, #2]
 800863c:	0a1b      	lsrs	r3, r3, #8
 800863e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	607a      	str	r2, [r7, #4]
 8008646:	887a      	ldrh	r2, [r7, #2]
 8008648:	b2d2      	uxtb	r2, r2
 800864a:	701a      	strb	r2, [r3, #0]
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	0a1b      	lsrs	r3, r3, #8
 8008672:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	607a      	str	r2, [r7, #4]
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	b2d2      	uxtb	r2, r2
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	0a1b      	lsrs	r3, r3, #8
 8008696:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	607a      	str	r2, [r7, #4]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	701a      	strb	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00d      	beq.n	80086e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	1c53      	adds	r3, r2, #1
 80086ce:	613b      	str	r3, [r7, #16]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	1c59      	adds	r1, r3, #1
 80086d4:	6179      	str	r1, [r7, #20]
 80086d6:	7812      	ldrb	r2, [r2, #0]
 80086d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3b01      	subs	r3, #1
 80086de:	607b      	str	r3, [r7, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1f1      	bne.n	80086ca <mem_cpy+0x1a>
	}
}
 80086e6:	bf00      	nop
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80086f2:	b480      	push	{r7}
 80086f4:	b087      	sub	sp, #28
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	617a      	str	r2, [r7, #20]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3b01      	subs	r3, #1
 8008712:	607b      	str	r3, [r7, #4]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1f3      	bne.n	8008702 <mem_set+0x10>
}
 800871a:	bf00      	nop
 800871c:	bf00      	nop
 800871e:	371c      	adds	r7, #28
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008728:	b480      	push	{r7}
 800872a:	b089      	sub	sp, #36	; 0x24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	61fb      	str	r3, [r7, #28]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	61fa      	str	r2, [r7, #28]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	4619      	mov	r1, r3
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	61ba      	str	r2, [r7, #24]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	1acb      	subs	r3, r1, r3
 8008754:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3b01      	subs	r3, #1
 800875a:	607b      	str	r3, [r7, #4]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <mem_cmp+0x40>
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0eb      	beq.n	8008740 <mem_cmp+0x18>

	return r;
 8008768:	697b      	ldr	r3, [r7, #20]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3724      	adds	r7, #36	; 0x24
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008780:	e002      	b.n	8008788 <chk_chr+0x12>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3301      	adds	r3, #1
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <chk_chr+0x26>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	4293      	cmp	r3, r2
 800879a:	d1f2      	bne.n	8008782 <chk_chr+0xc>
	return *str;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	781b      	ldrb	r3, [r3, #0]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	e029      	b.n	8008814 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80087c0:	4a27      	ldr	r2, [pc, #156]	; (8008860 <chk_lock+0xb4>)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	011b      	lsls	r3, r3, #4
 80087c6:	4413      	add	r3, r2
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01d      	beq.n	800880a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087ce:	4a24      	ldr	r2, [pc, #144]	; (8008860 <chk_lock+0xb4>)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	4413      	add	r3, r2
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d116      	bne.n	800880e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80087e0:	4a1f      	ldr	r2, [pc, #124]	; (8008860 <chk_lock+0xb4>)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	011b      	lsls	r3, r3, #4
 80087e6:	4413      	add	r3, r2
 80087e8:	3304      	adds	r3, #4
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d10c      	bne.n	800880e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087f4:	4a1a      	ldr	r2, [pc, #104]	; (8008860 <chk_lock+0xb4>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	4413      	add	r3, r2
 80087fc:	3308      	adds	r3, #8
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008804:	429a      	cmp	r2, r3
 8008806:	d102      	bne.n	800880e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008808:	e007      	b.n	800881a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800880a:	2301      	movs	r3, #1
 800880c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d9d2      	bls.n	80087c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d109      	bne.n	8008834 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <chk_lock+0x80>
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d101      	bne.n	8008830 <chk_lock+0x84>
 800882c:	2300      	movs	r3, #0
 800882e:	e010      	b.n	8008852 <chk_lock+0xa6>
 8008830:	2312      	movs	r3, #18
 8008832:	e00e      	b.n	8008852 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d108      	bne.n	800884c <chk_lock+0xa0>
 800883a:	4a09      	ldr	r2, [pc, #36]	; (8008860 <chk_lock+0xb4>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	4413      	add	r3, r2
 8008842:	330c      	adds	r3, #12
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884a:	d101      	bne.n	8008850 <chk_lock+0xa4>
 800884c:	2310      	movs	r3, #16
 800884e:	e000      	b.n	8008852 <chk_lock+0xa6>
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	200000b8 	.word	0x200000b8

08008864 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800886a:	2300      	movs	r3, #0
 800886c:	607b      	str	r3, [r7, #4]
 800886e:	e002      	b.n	8008876 <enq_lock+0x12>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3301      	adds	r3, #1
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d806      	bhi.n	800888a <enq_lock+0x26>
 800887c:	4a09      	ldr	r2, [pc, #36]	; (80088a4 <enq_lock+0x40>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	4413      	add	r3, r2
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f2      	bne.n	8008870 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b02      	cmp	r3, #2
 800888e:	bf14      	ite	ne
 8008890:	2301      	movne	r3, #1
 8008892:	2300      	moveq	r3, #0
 8008894:	b2db      	uxtb	r3, r3
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	200000b8 	.word	0x200000b8

080088a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	e01f      	b.n	80088f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80088b8:	4a41      	ldr	r2, [pc, #260]	; (80089c0 <inc_lock+0x118>)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	4413      	add	r3, r2
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d113      	bne.n	80088f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80088ca:	4a3d      	ldr	r2, [pc, #244]	; (80089c0 <inc_lock+0x118>)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	011b      	lsls	r3, r3, #4
 80088d0:	4413      	add	r3, r2
 80088d2:	3304      	adds	r3, #4
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80088da:	429a      	cmp	r2, r3
 80088dc:	d109      	bne.n	80088f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80088de:	4a38      	ldr	r2, [pc, #224]	; (80089c0 <inc_lock+0x118>)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	4413      	add	r3, r2
 80088e6:	3308      	adds	r3, #8
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d006      	beq.n	8008900 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d9dc      	bls.n	80088b8 <inc_lock+0x10>
 80088fe:	e000      	b.n	8008902 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008900:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d132      	bne.n	800896e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	e002      	b.n	8008914 <inc_lock+0x6c>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d806      	bhi.n	8008928 <inc_lock+0x80>
 800891a:	4a29      	ldr	r2, [pc, #164]	; (80089c0 <inc_lock+0x118>)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	4413      	add	r3, r2
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1f2      	bne.n	800890e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d101      	bne.n	8008932 <inc_lock+0x8a>
 800892e:	2300      	movs	r3, #0
 8008930:	e040      	b.n	80089b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4922      	ldr	r1, [pc, #136]	; (80089c0 <inc_lock+0x118>)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	440b      	add	r3, r1
 800893e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	491e      	ldr	r1, [pc, #120]	; (80089c0 <inc_lock+0x118>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	440b      	add	r3, r1
 800894c:	3304      	adds	r3, #4
 800894e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	491a      	ldr	r1, [pc, #104]	; (80089c0 <inc_lock+0x118>)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	440b      	add	r3, r1
 800895c:	3308      	adds	r3, #8
 800895e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008960:	4a17      	ldr	r2, [pc, #92]	; (80089c0 <inc_lock+0x118>)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	4413      	add	r3, r2
 8008968:	330c      	adds	r3, #12
 800896a:	2200      	movs	r2, #0
 800896c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d009      	beq.n	8008988 <inc_lock+0xe0>
 8008974:	4a12      	ldr	r2, [pc, #72]	; (80089c0 <inc_lock+0x118>)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	4413      	add	r3, r2
 800897c:	330c      	adds	r3, #12
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <inc_lock+0xe0>
 8008984:	2300      	movs	r3, #0
 8008986:	e015      	b.n	80089b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d108      	bne.n	80089a0 <inc_lock+0xf8>
 800898e:	4a0c      	ldr	r2, [pc, #48]	; (80089c0 <inc_lock+0x118>)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	4413      	add	r3, r2
 8008996:	330c      	adds	r3, #12
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	3301      	adds	r3, #1
 800899c:	b29a      	uxth	r2, r3
 800899e:	e001      	b.n	80089a4 <inc_lock+0xfc>
 80089a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089a4:	4906      	ldr	r1, [pc, #24]	; (80089c0 <inc_lock+0x118>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	440b      	add	r3, r1
 80089ac:	330c      	adds	r3, #12
 80089ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3301      	adds	r3, #1
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	200000b8 	.word	0x200000b8

080089c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	607b      	str	r3, [r7, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d825      	bhi.n	8008a24 <dec_lock+0x60>
		n = Files[i].ctr;
 80089d8:	4a17      	ldr	r2, [pc, #92]	; (8008a38 <dec_lock+0x74>)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	4413      	add	r3, r2
 80089e0:	330c      	adds	r3, #12
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80089e6:	89fb      	ldrh	r3, [r7, #14]
 80089e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ec:	d101      	bne.n	80089f2 <dec_lock+0x2e>
 80089ee:	2300      	movs	r3, #0
 80089f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80089f2:	89fb      	ldrh	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <dec_lock+0x3a>
 80089f8:	89fb      	ldrh	r3, [r7, #14]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80089fe:	4a0e      	ldr	r2, [pc, #56]	; (8008a38 <dec_lock+0x74>)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	4413      	add	r3, r2
 8008a06:	330c      	adds	r3, #12
 8008a08:	89fa      	ldrh	r2, [r7, #14]
 8008a0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008a0c:	89fb      	ldrh	r3, [r7, #14]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d105      	bne.n	8008a1e <dec_lock+0x5a>
 8008a12:	4a09      	ldr	r2, [pc, #36]	; (8008a38 <dec_lock+0x74>)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	4413      	add	r3, r2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	737b      	strb	r3, [r7, #13]
 8008a22:	e001      	b.n	8008a28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008a24:	2302      	movs	r3, #2
 8008a26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008a28:	7b7b      	ldrb	r3, [r7, #13]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	200000b8 	.word	0x200000b8

08008a3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	e010      	b.n	8008a6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008a4a:	4a0d      	ldr	r2, [pc, #52]	; (8008a80 <clear_lock+0x44>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	4413      	add	r3, r2
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d105      	bne.n	8008a66 <clear_lock+0x2a>
 8008a5a:	4a09      	ldr	r2, [pc, #36]	; (8008a80 <clear_lock+0x44>)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	011b      	lsls	r3, r3, #4
 8008a60:	4413      	add	r3, r2
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d9eb      	bls.n	8008a4a <clear_lock+0xe>
	}
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	200000b8 	.word	0x200000b8

08008a84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	78db      	ldrb	r3, [r3, #3]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d034      	beq.n	8008b02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7858      	ldrb	r0, [r3, #1]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	f7ff fd40 	bl	8008530 <disk_write>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <sync_window+0x38>
			res = FR_DISK_ERR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	73fb      	strb	r3, [r7, #15]
 8008aba:	e022      	b.n	8008b02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	1ad2      	subs	r2, r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d217      	bcs.n	8008b02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	789b      	ldrb	r3, [r3, #2]
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	e010      	b.n	8008afc <sync_window+0x78>
					wsect += fs->fsize;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7858      	ldrb	r0, [r3, #1]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008aee:	2301      	movs	r3, #1
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	f7ff fd1d 	bl	8008530 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d8eb      	bhi.n	8008ada <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d01b      	beq.n	8008b5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff ffad 	bl	8008a84 <sync_window>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d113      	bne.n	8008b5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7858      	ldrb	r0, [r3, #1]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008b3e:	2301      	movs	r3, #1
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	f7ff fcd5 	bl	80084f0 <disk_read>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff ff87 	bl	8008a84 <sync_window>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d159      	bne.n	8008c34 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d149      	bne.n	8008c1c <sync_fs+0xb4>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	791b      	ldrb	r3, [r3, #4]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d145      	bne.n	8008c1c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	899b      	ldrh	r3, [r3, #12]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	f7ff fda8 	bl	80086f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3334      	adds	r3, #52	; 0x34
 8008ba6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008baa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fd37 	bl	8008622 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3334      	adds	r3, #52	; 0x34
 8008bb8:	4921      	ldr	r1, [pc, #132]	; (8008c40 <sync_fs+0xd8>)
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff fd4c 	bl	8008658 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3334      	adds	r3, #52	; 0x34
 8008bc4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008bc8:	491e      	ldr	r1, [pc, #120]	; (8008c44 <sync_fs+0xdc>)
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fd44 	bl	8008658 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3334      	adds	r3, #52	; 0x34
 8008bd4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7ff fd3a 	bl	8008658 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3334      	adds	r3, #52	; 0x34
 8008be8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7ff fd30 	bl	8008658 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	7858      	ldrb	r0, [r3, #1]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c10:	2301      	movs	r3, #1
 8008c12:	f7ff fc8d 	bl	8008530 <disk_write>
			fs->fsi_flag = 0;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2200      	movs	r2, #0
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff fca3 	bl	8008570 <disk_ioctl>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <sync_fs+0xcc>
 8008c30:	2301      	movs	r3, #1
 8008c32:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	41615252 	.word	0x41615252
 8008c44:	61417272 	.word	0x61417272

08008c48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	3b02      	subs	r3, #2
 8008c56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	3b02      	subs	r3, #2
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d301      	bcc.n	8008c68 <clust2sect+0x20>
 8008c64:	2300      	movs	r3, #0
 8008c66:	e008      	b.n	8008c7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	895b      	ldrh	r3, [r3, #10]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	fb03 f202 	mul.w	r2, r3, r2
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	4413      	add	r3, r2
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b086      	sub	sp, #24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d904      	bls.n	8008ca6 <get_fat+0x20>
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d302      	bcc.n	8008cac <get_fat+0x26>
		val = 1;	/* Internal error */
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	617b      	str	r3, [r7, #20]
 8008caa:	e0bb      	b.n	8008e24 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008cac:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	f000 8083 	beq.w	8008dc2 <get_fat+0x13c>
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	f300 80a7 	bgt.w	8008e10 <get_fat+0x18a>
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d002      	beq.n	8008ccc <get_fat+0x46>
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d056      	beq.n	8008d78 <get_fat+0xf2>
 8008cca:	e0a1      	b.n	8008e10 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	085b      	lsrs	r3, r3, #1
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	899b      	ldrh	r3, [r3, #12]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cea:	4413      	add	r3, r2
 8008cec:	4619      	mov	r1, r3
 8008cee:	6938      	ldr	r0, [r7, #16]
 8008cf0:	f7ff ff0c 	bl	8008b0c <move_window>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f040 808d 	bne.w	8008e16 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	1c5a      	adds	r2, r3, #1
 8008d00:	60fa      	str	r2, [r7, #12]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	8992      	ldrh	r2, [r2, #12]
 8008d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d0a:	fb02 f201 	mul.w	r2, r2, r1
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	4413      	add	r3, r2
 8008d14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	899b      	ldrh	r3, [r3, #12]
 8008d22:	4619      	mov	r1, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d2a:	4413      	add	r3, r2
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6938      	ldr	r0, [r7, #16]
 8008d30:	f7ff feec 	bl	8008b0c <move_window>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d16f      	bne.n	8008e1a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	899b      	ldrh	r3, [r3, #12]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d46:	fb02 f201 	mul.w	r2, r2, r1
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d54:	021b      	lsls	r3, r3, #8
 8008d56:	461a      	mov	r2, r3
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d002      	beq.n	8008d6e <get_fat+0xe8>
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	091b      	lsrs	r3, r3, #4
 8008d6c:	e002      	b.n	8008d74 <get_fat+0xee>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d74:	617b      	str	r3, [r7, #20]
			break;
 8008d76:	e055      	b.n	8008e24 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	899b      	ldrh	r3, [r3, #12]
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d8c:	4413      	add	r3, r2
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6938      	ldr	r0, [r7, #16]
 8008d92:	f7ff febb 	bl	8008b0c <move_window>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d140      	bne.n	8008e1e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	8992      	ldrh	r2, [r2, #12]
 8008daa:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dae:	fb02 f200 	mul.w	r2, r2, r0
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	440b      	add	r3, r1
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff fbf8 	bl	80085ac <ld_word>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	617b      	str	r3, [r7, #20]
			break;
 8008dc0:	e030      	b.n	8008e24 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	899b      	ldrh	r3, [r3, #12]
 8008dca:	089b      	lsrs	r3, r3, #2
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4619      	mov	r1, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6938      	ldr	r0, [r7, #16]
 8008ddc:	f7ff fe96 	bl	8008b0c <move_window>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d11d      	bne.n	8008e22 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	8992      	ldrh	r2, [r2, #12]
 8008df4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008df8:	fb02 f200 	mul.w	r2, r2, r0
 8008dfc:	1a9b      	subs	r3, r3, r2
 8008dfe:	440b      	add	r3, r1
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fbeb 	bl	80085dc <ld_dword>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e0c:	617b      	str	r3, [r7, #20]
			break;
 8008e0e:	e009      	b.n	8008e24 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008e10:	2301      	movs	r3, #1
 8008e12:	617b      	str	r3, [r7, #20]
 8008e14:	e006      	b.n	8008e24 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e16:	bf00      	nop
 8008e18:	e004      	b.n	8008e24 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e1a:	bf00      	nop
 8008e1c:	e002      	b.n	8008e24 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008e1e:	bf00      	nop
 8008e20:	e000      	b.n	8008e24 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008e22:	bf00      	nop
		}
	}

	return val;
 8008e24:	697b      	ldr	r3, [r7, #20]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008e2e:	b590      	push	{r4, r7, lr}
 8008e30:	b089      	sub	sp, #36	; 0x24
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	f240 8102 	bls.w	800904a <put_fat+0x21c>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	f080 80fc 	bcs.w	800904a <put_fat+0x21c>
		switch (fs->fs_type) {
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	f000 80b6 	beq.w	8008fc8 <put_fat+0x19a>
 8008e5c:	2b03      	cmp	r3, #3
 8008e5e:	f300 80fd 	bgt.w	800905c <put_fat+0x22e>
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d003      	beq.n	8008e6e <put_fat+0x40>
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	f000 8083 	beq.w	8008f72 <put_fat+0x144>
 8008e6c:	e0f6      	b.n	800905c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	085b      	lsrs	r3, r3, #1
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	4413      	add	r3, r2
 8008e7a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	899b      	ldrh	r3, [r3, #12]
 8008e84:	4619      	mov	r1, r3
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e8c:	4413      	add	r3, r2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f7ff fe3b 	bl	8008b0c <move_window>
 8008e96:	4603      	mov	r3, r0
 8008e98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e9a:	7ffb      	ldrb	r3, [r7, #31]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f040 80d6 	bne.w	800904e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	61ba      	str	r2, [r7, #24]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	8992      	ldrh	r2, [r2, #12]
 8008eb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008eb6:	fb02 f200 	mul.w	r2, r2, r0
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00d      	beq.n	8008ee6 <put_fat+0xb8>
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	f003 030f 	and.w	r3, r3, #15
 8008ed4:	b25a      	sxtb	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	b25b      	sxtb	r3, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	b25b      	sxtb	r3, r3
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	e001      	b.n	8008eea <put_fat+0xbc>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	899b      	ldrh	r3, [r3, #12]
 8008efc:	4619      	mov	r1, r3
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f04:	4413      	add	r3, r2
 8008f06:	4619      	mov	r1, r3
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff fdff 	bl	8008b0c <move_window>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f12:	7ffb      	ldrb	r3, [r7, #31]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f040 809c 	bne.w	8009052 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	899b      	ldrh	r3, [r3, #12]
 8008f24:	461a      	mov	r2, r3
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f2c:	fb02 f200 	mul.w	r2, r2, r0
 8008f30:	1a9b      	subs	r3, r3, r2
 8008f32:	440b      	add	r3, r1
 8008f34:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <put_fat+0x11a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	091b      	lsrs	r3, r3, #4
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	e00e      	b.n	8008f66 <put_fat+0x138>
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	b25b      	sxtb	r3, r3
 8008f4e:	f023 030f 	bic.w	r3, r3, #15
 8008f52:	b25a      	sxtb	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	0a1b      	lsrs	r3, r3, #8
 8008f58:	b25b      	sxtb	r3, r3
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	b25b      	sxtb	r3, r3
 8008f60:	4313      	orrs	r3, r2
 8008f62:	b25b      	sxtb	r3, r3
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	70da      	strb	r2, [r3, #3]
			break;
 8008f70:	e074      	b.n	800905c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	899b      	ldrh	r3, [r3, #12]
 8008f7a:	085b      	lsrs	r3, r3, #1
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4619      	mov	r1, r3
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f86:	4413      	add	r3, r2
 8008f88:	4619      	mov	r1, r3
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff fdbe 	bl	8008b0c <move_window>
 8008f90:	4603      	mov	r3, r0
 8008f92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f94:	7ffb      	ldrb	r3, [r7, #31]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d15d      	bne.n	8009056 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	8992      	ldrh	r2, [r2, #12]
 8008fa8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fac:	fb02 f200 	mul.w	r2, r2, r0
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	b292      	uxth	r2, r2
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff fb31 	bl	8008622 <st_word>
			fs->wflag = 1;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	70da      	strb	r2, [r3, #3]
			break;
 8008fc6:	e049      	b.n	800905c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	899b      	ldrh	r3, [r3, #12]
 8008fd0:	089b      	lsrs	r3, r3, #2
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fdc:	4413      	add	r3, r2
 8008fde:	4619      	mov	r1, r3
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f7ff fd93 	bl	8008b0c <move_window>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fea:	7ffb      	ldrb	r3, [r7, #31]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d134      	bne.n	800905a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	8992      	ldrh	r2, [r2, #12]
 8009004:	fbb3 f0f2 	udiv	r0, r3, r2
 8009008:	fb02 f200 	mul.w	r2, r2, r0
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	440b      	add	r3, r1
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff fae3 	bl	80085dc <ld_dword>
 8009016:	4603      	mov	r3, r0
 8009018:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800901c:	4323      	orrs	r3, r4
 800901e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	8992      	ldrh	r2, [r2, #12]
 800902e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009032:	fb02 f200 	mul.w	r2, r2, r0
 8009036:	1a9b      	subs	r3, r3, r2
 8009038:	440b      	add	r3, r1
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff fb0b 	bl	8008658 <st_dword>
			fs->wflag = 1;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	70da      	strb	r2, [r3, #3]
			break;
 8009048:	e008      	b.n	800905c <put_fat+0x22e>
		}
	}
 800904a:	bf00      	nop
 800904c:	e006      	b.n	800905c <put_fat+0x22e>
			if (res != FR_OK) break;
 800904e:	bf00      	nop
 8009050:	e004      	b.n	800905c <put_fat+0x22e>
			if (res != FR_OK) break;
 8009052:	bf00      	nop
 8009054:	e002      	b.n	800905c <put_fat+0x22e>
			if (res != FR_OK) break;
 8009056:	bf00      	nop
 8009058:	e000      	b.n	800905c <put_fat+0x22e>
			if (res != FR_OK) break;
 800905a:	bf00      	nop
	return res;
 800905c:	7ffb      	ldrb	r3, [r7, #31]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3724      	adds	r7, #36	; 0x24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd90      	pop	{r4, r7, pc}

08009066 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b088      	sub	sp, #32
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d904      	bls.n	800908c <remove_chain+0x26>
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	429a      	cmp	r2, r3
 800908a:	d301      	bcc.n	8009090 <remove_chain+0x2a>
 800908c:	2302      	movs	r3, #2
 800908e:	e04b      	b.n	8009128 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00c      	beq.n	80090b0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	69b8      	ldr	r0, [r7, #24]
 800909e:	f7ff fec6 	bl	8008e2e <put_fat>
 80090a2:	4603      	mov	r3, r0
 80090a4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80090a6:	7ffb      	ldrb	r3, [r7, #31]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <remove_chain+0x4a>
 80090ac:	7ffb      	ldrb	r3, [r7, #31]
 80090ae:	e03b      	b.n	8009128 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff fde7 	bl	8008c86 <get_fat>
 80090b8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d031      	beq.n	8009124 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d101      	bne.n	80090ca <remove_chain+0x64>
 80090c6:	2302      	movs	r3, #2
 80090c8:	e02e      	b.n	8009128 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d0:	d101      	bne.n	80090d6 <remove_chain+0x70>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e028      	b.n	8009128 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80090d6:	2200      	movs	r2, #0
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	69b8      	ldr	r0, [r7, #24]
 80090dc:	f7ff fea7 	bl	8008e2e <put_fat>
 80090e0:	4603      	mov	r3, r0
 80090e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80090e4:	7ffb      	ldrb	r3, [r7, #31]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <remove_chain+0x88>
 80090ea:	7ffb      	ldrb	r3, [r7, #31]
 80090ec:	e01c      	b.n	8009128 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	695a      	ldr	r2, [r3, #20]
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	3b02      	subs	r3, #2
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d20b      	bcs.n	8009114 <remove_chain+0xae>
			fs->free_clst++;
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	791b      	ldrb	r3, [r3, #4]
 800910a:	f043 0301 	orr.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	429a      	cmp	r2, r3
 8009120:	d3c6      	bcc.n	80090b0 <remove_chain+0x4a>
 8009122:	e000      	b.n	8009126 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009124:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10d      	bne.n	8009162 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d004      	beq.n	800915c <create_chain+0x2c>
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	429a      	cmp	r2, r3
 800915a:	d31b      	bcc.n	8009194 <create_chain+0x64>
 800915c:	2301      	movs	r3, #1
 800915e:	61bb      	str	r3, [r7, #24]
 8009160:	e018      	b.n	8009194 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff fd8e 	bl	8008c86 <get_fat>
 800916a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d801      	bhi.n	8009176 <create_chain+0x46>
 8009172:	2301      	movs	r3, #1
 8009174:	e070      	b.n	8009258 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d101      	bne.n	8009182 <create_chain+0x52>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	e06a      	b.n	8009258 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	429a      	cmp	r2, r3
 800918a:	d201      	bcs.n	8009190 <create_chain+0x60>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	e063      	b.n	8009258 <create_chain+0x128>
		scl = clst;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	3301      	adds	r3, #1
 800919c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d307      	bcc.n	80091b8 <create_chain+0x88>
				ncl = 2;
 80091a8:	2302      	movs	r3, #2
 80091aa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d901      	bls.n	80091b8 <create_chain+0x88>
 80091b4:	2300      	movs	r3, #0
 80091b6:	e04f      	b.n	8009258 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80091b8:	69f9      	ldr	r1, [r7, #28]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff fd63 	bl	8008c86 <get_fat>
 80091c0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00e      	beq.n	80091e6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d003      	beq.n	80091d6 <create_chain+0xa6>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d4:	d101      	bne.n	80091da <create_chain+0xaa>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	e03e      	b.n	8009258 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d1da      	bne.n	8009198 <create_chain+0x68>
 80091e2:	2300      	movs	r3, #0
 80091e4:	e038      	b.n	8009258 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80091e6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80091e8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ec:	69f9      	ldr	r1, [r7, #28]
 80091ee:	6938      	ldr	r0, [r7, #16]
 80091f0:	f7ff fe1d 	bl	8008e2e <put_fat>
 80091f4:	4603      	mov	r3, r0
 80091f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <create_chain+0xe2>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d006      	beq.n	8009212 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6938      	ldr	r0, [r7, #16]
 800920a:	f7ff fe10 	bl	8008e2e <put_fat>
 800920e:	4603      	mov	r3, r0
 8009210:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d116      	bne.n	8009246 <create_chain+0x116>
		fs->last_clst = ncl;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	695a      	ldr	r2, [r3, #20]
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	3b02      	subs	r3, #2
 8009228:	429a      	cmp	r2, r3
 800922a:	d804      	bhi.n	8009236 <create_chain+0x106>
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	1e5a      	subs	r2, r3, #1
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	791b      	ldrb	r3, [r3, #4]
 800923a:	f043 0301 	orr.w	r3, r3, #1
 800923e:	b2da      	uxtb	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	711a      	strb	r2, [r3, #4]
 8009244:	e007      	b.n	8009256 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d102      	bne.n	8009252 <create_chain+0x122>
 800924c:	f04f 33ff 	mov.w	r3, #4294967295
 8009250:	e000      	b.n	8009254 <create_chain+0x124>
 8009252:	2301      	movs	r3, #1
 8009254:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009256:	69fb      	ldr	r3, [r7, #28]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	3304      	adds	r3, #4
 8009276:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	899b      	ldrh	r3, [r3, #12]
 800927c:	461a      	mov	r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	fbb3 f3f2 	udiv	r3, r3, r2
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	8952      	ldrh	r2, [r2, #10]
 8009288:	fbb3 f3f2 	udiv	r3, r3, r2
 800928c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	1d1a      	adds	r2, r3, #4
 8009292:	613a      	str	r2, [r7, #16]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <clmt_clust+0x42>
 800929e:	2300      	movs	r3, #0
 80092a0:	e010      	b.n	80092c4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d307      	bcc.n	80092ba <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	3304      	adds	r3, #4
 80092b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80092b8:	e7e9      	b.n	800928e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80092ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	4413      	add	r3, r2
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	371c      	adds	r7, #28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092e6:	d204      	bcs.n	80092f2 <dir_sdi+0x22>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	f003 031f 	and.w	r3, r3, #31
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80092f2:	2302      	movs	r3, #2
 80092f4:	e071      	b.n	80093da <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d106      	bne.n	8009316 <dir_sdi+0x46>
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d902      	bls.n	8009316 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009314:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10c      	bne.n	8009336 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	095b      	lsrs	r3, r3, #5
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	8912      	ldrh	r2, [r2, #8]
 8009324:	4293      	cmp	r3, r2
 8009326:	d301      	bcc.n	800932c <dir_sdi+0x5c>
 8009328:	2302      	movs	r3, #2
 800932a:	e056      	b.n	80093da <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	61da      	str	r2, [r3, #28]
 8009334:	e02d      	b.n	8009392 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	895b      	ldrh	r3, [r3, #10]
 800933a:	461a      	mov	r2, r3
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	899b      	ldrh	r3, [r3, #12]
 8009340:	fb03 f302 	mul.w	r3, r3, r2
 8009344:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009346:	e019      	b.n	800937c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6979      	ldr	r1, [r7, #20]
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff fc9a 	bl	8008c86 <get_fat>
 8009352:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935a:	d101      	bne.n	8009360 <dir_sdi+0x90>
 800935c:	2301      	movs	r3, #1
 800935e:	e03c      	b.n	80093da <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d904      	bls.n	8009370 <dir_sdi+0xa0>
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	429a      	cmp	r2, r3
 800936e:	d301      	bcc.n	8009374 <dir_sdi+0xa4>
 8009370:	2302      	movs	r3, #2
 8009372:	e032      	b.n	80093da <dir_sdi+0x10a>
			ofs -= csz;
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	429a      	cmp	r2, r3
 8009382:	d2e1      	bcs.n	8009348 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009384:	6979      	ldr	r1, [r7, #20]
 8009386:	6938      	ldr	r0, [r7, #16]
 8009388:	f7ff fc5e 	bl	8008c48 <clust2sect>
 800938c:	4602      	mov	r2, r0
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <dir_sdi+0xd4>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e01a      	b.n	80093da <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	69da      	ldr	r2, [r3, #28]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	899b      	ldrh	r3, [r3, #12]
 80093ac:	4619      	mov	r1, r3
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80093b4:	441a      	add	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	899b      	ldrh	r3, [r3, #12]
 80093c4:	461a      	mov	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80093cc:	fb02 f200 	mul.w	r2, r2, r0
 80093d0:	1a9b      	subs	r3, r3, r2
 80093d2:	18ca      	adds	r2, r1, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	3320      	adds	r3, #32
 80093f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <dir_next+0x28>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009408:	d301      	bcc.n	800940e <dir_next+0x2c>
 800940a:	2304      	movs	r3, #4
 800940c:	e0bb      	b.n	8009586 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	899b      	ldrh	r3, [r3, #12]
 8009412:	461a      	mov	r2, r3
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	fbb3 f1f2 	udiv	r1, r3, r2
 800941a:	fb02 f201 	mul.w	r2, r2, r1
 800941e:	1a9b      	subs	r3, r3, r2
 8009420:	2b00      	cmp	r3, #0
 8009422:	f040 809d 	bne.w	8009560 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10b      	bne.n	8009450 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	095b      	lsrs	r3, r3, #5
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	8912      	ldrh	r2, [r2, #8]
 8009440:	4293      	cmp	r3, r2
 8009442:	f0c0 808d 	bcc.w	8009560 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	61da      	str	r2, [r3, #28]
 800944c:	2304      	movs	r3, #4
 800944e:	e09a      	b.n	8009586 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	899b      	ldrh	r3, [r3, #12]
 8009454:	461a      	mov	r2, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	fbb3 f3f2 	udiv	r3, r3, r2
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	8952      	ldrh	r2, [r2, #10]
 8009460:	3a01      	subs	r2, #1
 8009462:	4013      	ands	r3, r2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d17b      	bne.n	8009560 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	4619      	mov	r1, r3
 8009470:	4610      	mov	r0, r2
 8009472:	f7ff fc08 	bl	8008c86 <get_fat>
 8009476:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d801      	bhi.n	8009482 <dir_next+0xa0>
 800947e:	2302      	movs	r3, #2
 8009480:	e081      	b.n	8009586 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d101      	bne.n	800948e <dir_next+0xac>
 800948a:	2301      	movs	r3, #1
 800948c:	e07b      	b.n	8009586 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	429a      	cmp	r2, r3
 8009496:	d359      	bcc.n	800954c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	61da      	str	r2, [r3, #28]
 80094a4:	2304      	movs	r3, #4
 80094a6:	e06e      	b.n	8009586 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	4619      	mov	r1, r3
 80094b0:	4610      	mov	r0, r2
 80094b2:	f7ff fe3d 	bl	8009130 <create_chain>
 80094b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <dir_next+0xe0>
 80094be:	2307      	movs	r3, #7
 80094c0:	e061      	b.n	8009586 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d101      	bne.n	80094cc <dir_next+0xea>
 80094c8:	2302      	movs	r3, #2
 80094ca:	e05c      	b.n	8009586 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d2:	d101      	bne.n	80094d8 <dir_next+0xf6>
 80094d4:	2301      	movs	r3, #1
 80094d6:	e056      	b.n	8009586 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f7ff fad3 	bl	8008a84 <sync_window>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <dir_next+0x106>
 80094e4:	2301      	movs	r3, #1
 80094e6:	e04e      	b.n	8009586 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	899b      	ldrh	r3, [r3, #12]
 80094f2:	461a      	mov	r2, r3
 80094f4:	2100      	movs	r1, #0
 80094f6:	f7ff f8fc 	bl	80086f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	6979      	ldr	r1, [r7, #20]
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff fba1 	bl	8008c48 <clust2sect>
 8009506:	4602      	mov	r2, r0
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	631a      	str	r2, [r3, #48]	; 0x30
 800950c:	e012      	b.n	8009534 <dir_next+0x152>
						fs->wflag = 1;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f7ff fab5 	bl	8008a84 <sync_window>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <dir_next+0x142>
 8009520:	2301      	movs	r3, #1
 8009522:	e030      	b.n	8009586 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	3301      	adds	r3, #1
 8009528:	613b      	str	r3, [r7, #16]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	631a      	str	r2, [r3, #48]	; 0x30
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	895b      	ldrh	r3, [r3, #10]
 8009538:	461a      	mov	r2, r3
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	4293      	cmp	r3, r2
 800953e:	d3e6      	bcc.n	800950e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	1ad2      	subs	r2, r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009552:	6979      	ldr	r1, [r7, #20]
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7ff fb77 	bl	8008c48 <clust2sect>
 800955a:	4602      	mov	r2, r0
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	899b      	ldrh	r3, [r3, #12]
 8009570:	461a      	mov	r2, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	fbb3 f0f2 	udiv	r0, r3, r2
 8009578:	fb02 f200 	mul.w	r2, r2, r0
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	18ca      	adds	r2, r1, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b086      	sub	sp, #24
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800959e:	2100      	movs	r1, #0
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff fe95 	bl	80092d0 <dir_sdi>
 80095a6:	4603      	mov	r3, r0
 80095a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d12b      	bne.n	8009608 <dir_alloc+0x7a>
		n = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	4619      	mov	r1, r3
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff faa6 	bl	8008b0c <move_window>
 80095c0:	4603      	mov	r3, r0
 80095c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d11d      	bne.n	8009606 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	2be5      	cmp	r3, #229	; 0xe5
 80095d2:	d004      	beq.n	80095de <dir_alloc+0x50>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a1b      	ldr	r3, [r3, #32]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d107      	bne.n	80095ee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3301      	adds	r3, #1
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d102      	bne.n	80095f2 <dir_alloc+0x64>
 80095ec:	e00c      	b.n	8009608 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80095ee:	2300      	movs	r3, #0
 80095f0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80095f2:	2101      	movs	r1, #1
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff fef4 	bl	80093e2 <dir_next>
 80095fa:	4603      	mov	r3, r0
 80095fc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d0d7      	beq.n	80095b4 <dir_alloc+0x26>
 8009604:	e000      	b.n	8009608 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009606:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	2b04      	cmp	r3, #4
 800960c:	d101      	bne.n	8009612 <dir_alloc+0x84>
 800960e:	2307      	movs	r3, #7
 8009610:	75fb      	strb	r3, [r7, #23]
	return res;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	331a      	adds	r3, #26
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe ffbe 	bl	80085ac <ld_word>
 8009630:	4603      	mov	r3, r0
 8009632:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b03      	cmp	r3, #3
 800963a:	d109      	bne.n	8009650 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	3314      	adds	r3, #20
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe ffb3 	bl	80085ac <ld_word>
 8009646:	4603      	mov	r3, r0
 8009648:	041b      	lsls	r3, r3, #16
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009650:	68fb      	ldr	r3, [r7, #12]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	331a      	adds	r3, #26
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	b292      	uxth	r2, r2
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f7fe ffd6 	bl	8008622 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d109      	bne.n	8009692 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f103 0214 	add.w	r2, r3, #20
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	0c1b      	lsrs	r3, r3, #16
 8009688:	b29b      	uxth	r3, r3
 800968a:	4619      	mov	r1, r3
 800968c:	4610      	mov	r0, r2
 800968e:	f7fe ffc8 	bl	8008622 <st_word>
	}
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff fe10 	bl	80092d0 <dir_sdi>
 80096b0:	4603      	mov	r3, r0
 80096b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <dir_find+0x24>
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	e03e      	b.n	800973c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6938      	ldr	r0, [r7, #16]
 80096c6:	f7ff fa21 	bl	8008b0c <move_window>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d12f      	bne.n	8009734 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a1b      	ldr	r3, [r3, #32]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d102      	bne.n	80096e8 <dir_find+0x4e>
 80096e2:	2304      	movs	r3, #4
 80096e4:	75fb      	strb	r3, [r7, #23]
 80096e6:	e028      	b.n	800973a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a1b      	ldr	r3, [r3, #32]
 80096ec:	330b      	adds	r3, #11
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	330b      	adds	r3, #11
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	f003 0308 	and.w	r3, r3, #8
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <dir_find+0x86>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a18      	ldr	r0, [r3, #32]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3324      	adds	r3, #36	; 0x24
 8009712:	220b      	movs	r2, #11
 8009714:	4619      	mov	r1, r3
 8009716:	f7ff f807 	bl	8008728 <mem_cmp>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009720:	2100      	movs	r1, #0
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fe5d 	bl	80093e2 <dir_next>
 8009728:	4603      	mov	r3, r0
 800972a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d0c5      	beq.n	80096be <dir_find+0x24>
 8009732:	e002      	b.n	800973a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009734:	bf00      	nop
 8009736:	e000      	b.n	800973a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009738:	bf00      	nop

	return res;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009752:	2101      	movs	r1, #1
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7ff ff1a 	bl	800958e <dir_alloc>
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d11c      	bne.n	800979e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	4619      	mov	r1, r3
 800976a:	68b8      	ldr	r0, [r7, #8]
 800976c:	f7ff f9ce 	bl	8008b0c <move_window>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d111      	bne.n	800979e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	2220      	movs	r2, #32
 8009780:	2100      	movs	r1, #0
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe ffb5 	bl	80086f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a18      	ldr	r0, [r3, #32]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3324      	adds	r3, #36	; 0x24
 8009790:	220b      	movs	r2, #11
 8009792:	4619      	mov	r1, r3
 8009794:	f7fe ff8c 	bl	80086b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2201      	movs	r2, #1
 800979c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3324      	adds	r3, #36	; 0x24
 80097bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80097be:	220b      	movs	r2, #11
 80097c0:	2120      	movs	r1, #32
 80097c2:	68b8      	ldr	r0, [r7, #8]
 80097c4:	f7fe ff95 	bl	80086f2 <mem_set>
	si = i = 0; ni = 8;
 80097c8:	2300      	movs	r3, #0
 80097ca:	613b      	str	r3, [r7, #16]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	61fb      	str	r3, [r7, #28]
 80097d0:	2308      	movs	r3, #8
 80097d2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	61fa      	str	r2, [r7, #28]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80097e2:	7efb      	ldrb	r3, [r7, #27]
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d94e      	bls.n	8009886 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80097e8:	7efb      	ldrb	r3, [r7, #27]
 80097ea:	2b2f      	cmp	r3, #47	; 0x2f
 80097ec:	d006      	beq.n	80097fc <create_name+0x54>
 80097ee:	7efb      	ldrb	r3, [r7, #27]
 80097f0:	2b5c      	cmp	r3, #92	; 0x5c
 80097f2:	d110      	bne.n	8009816 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80097f4:	e002      	b.n	80097fc <create_name+0x54>
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	3301      	adds	r3, #1
 80097fa:	61fb      	str	r3, [r7, #28]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b2f      	cmp	r3, #47	; 0x2f
 8009806:	d0f6      	beq.n	80097f6 <create_name+0x4e>
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	4413      	add	r3, r2
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b5c      	cmp	r3, #92	; 0x5c
 8009812:	d0f0      	beq.n	80097f6 <create_name+0x4e>
			break;
 8009814:	e038      	b.n	8009888 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009816:	7efb      	ldrb	r3, [r7, #27]
 8009818:	2b2e      	cmp	r3, #46	; 0x2e
 800981a:	d003      	beq.n	8009824 <create_name+0x7c>
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	429a      	cmp	r2, r3
 8009822:	d30c      	bcc.n	800983e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2b0b      	cmp	r3, #11
 8009828:	d002      	beq.n	8009830 <create_name+0x88>
 800982a:	7efb      	ldrb	r3, [r7, #27]
 800982c:	2b2e      	cmp	r3, #46	; 0x2e
 800982e:	d001      	beq.n	8009834 <create_name+0x8c>
 8009830:	2306      	movs	r3, #6
 8009832:	e044      	b.n	80098be <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009834:	2308      	movs	r3, #8
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	230b      	movs	r3, #11
 800983a:	617b      	str	r3, [r7, #20]
			continue;
 800983c:	e022      	b.n	8009884 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800983e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009842:	2b00      	cmp	r3, #0
 8009844:	da04      	bge.n	8009850 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009846:	7efb      	ldrb	r3, [r7, #27]
 8009848:	3b80      	subs	r3, #128	; 0x80
 800984a:	4a1f      	ldr	r2, [pc, #124]	; (80098c8 <create_name+0x120>)
 800984c:	5cd3      	ldrb	r3, [r2, r3]
 800984e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009850:	7efb      	ldrb	r3, [r7, #27]
 8009852:	4619      	mov	r1, r3
 8009854:	481d      	ldr	r0, [pc, #116]	; (80098cc <create_name+0x124>)
 8009856:	f7fe ff8e 	bl	8008776 <chk_chr>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <create_name+0xbc>
 8009860:	2306      	movs	r3, #6
 8009862:	e02c      	b.n	80098be <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009864:	7efb      	ldrb	r3, [r7, #27]
 8009866:	2b60      	cmp	r3, #96	; 0x60
 8009868:	d905      	bls.n	8009876 <create_name+0xce>
 800986a:	7efb      	ldrb	r3, [r7, #27]
 800986c:	2b7a      	cmp	r3, #122	; 0x7a
 800986e:	d802      	bhi.n	8009876 <create_name+0xce>
 8009870:	7efb      	ldrb	r3, [r7, #27]
 8009872:	3b20      	subs	r3, #32
 8009874:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	1c5a      	adds	r2, r3, #1
 800987a:	613a      	str	r2, [r7, #16]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	4413      	add	r3, r2
 8009880:	7efa      	ldrb	r2, [r7, #27]
 8009882:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009884:	e7a6      	b.n	80097d4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009886:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	441a      	add	r2, r3
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <create_name+0xf4>
 8009898:	2306      	movs	r3, #6
 800989a:	e010      	b.n	80098be <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	2be5      	cmp	r3, #229	; 0xe5
 80098a2:	d102      	bne.n	80098aa <create_name+0x102>
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2205      	movs	r2, #5
 80098a8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80098aa:	7efb      	ldrb	r3, [r7, #27]
 80098ac:	2b20      	cmp	r3, #32
 80098ae:	d801      	bhi.n	80098b4 <create_name+0x10c>
 80098b0:	2204      	movs	r2, #4
 80098b2:	e000      	b.n	80098b6 <create_name+0x10e>
 80098b4:	2200      	movs	r2, #0
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	330b      	adds	r3, #11
 80098ba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80098bc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3720      	adds	r7, #32
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	0800cf28 	.word	0x0800cf28
 80098cc:	0800ceb4 	.word	0x0800ceb4

080098d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80098e4:	e002      	b.n	80098ec <follow_path+0x1c>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	3301      	adds	r3, #1
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b2f      	cmp	r3, #47	; 0x2f
 80098f2:	d0f8      	beq.n	80098e6 <follow_path+0x16>
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2b5c      	cmp	r3, #92	; 0x5c
 80098fa:	d0f4      	beq.n	80098e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2200      	movs	r2, #0
 8009900:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b1f      	cmp	r3, #31
 8009908:	d80a      	bhi.n	8009920 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2280      	movs	r2, #128	; 0x80
 800990e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009912:	2100      	movs	r1, #0
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff fcdb 	bl	80092d0 <dir_sdi>
 800991a:	4603      	mov	r3, r0
 800991c:	75fb      	strb	r3, [r7, #23]
 800991e:	e048      	b.n	80099b2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009920:	463b      	mov	r3, r7
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff ff3f 	bl	80097a8 <create_name>
 800992a:	4603      	mov	r3, r0
 800992c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800992e:	7dfb      	ldrb	r3, [r7, #23]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d139      	bne.n	80099a8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff feb0 	bl	800969a <dir_find>
 800993a:	4603      	mov	r3, r0
 800993c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009944:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009946:	7dfb      	ldrb	r3, [r7, #23]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00a      	beq.n	8009962 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800994c:	7dfb      	ldrb	r3, [r7, #23]
 800994e:	2b04      	cmp	r3, #4
 8009950:	d12c      	bne.n	80099ac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d127      	bne.n	80099ac <follow_path+0xdc>
 800995c:	2305      	movs	r3, #5
 800995e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009960:	e024      	b.n	80099ac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009962:	7afb      	ldrb	r3, [r7, #11]
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d121      	bne.n	80099b0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	799b      	ldrb	r3, [r3, #6]
 8009970:	f003 0310 	and.w	r3, r3, #16
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009978:	2305      	movs	r3, #5
 800997a:	75fb      	strb	r3, [r7, #23]
 800997c:	e019      	b.n	80099b2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	8992      	ldrh	r2, [r2, #12]
 800998c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009990:	fb02 f200 	mul.w	r2, r2, r0
 8009994:	1a9b      	subs	r3, r3, r2
 8009996:	440b      	add	r3, r1
 8009998:	4619      	mov	r1, r3
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff fe3e 	bl	800961c <ld_clust>
 80099a0:	4602      	mov	r2, r0
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80099a6:	e7bb      	b.n	8009920 <follow_path+0x50>
			if (res != FR_OK) break;
 80099a8:	bf00      	nop
 80099aa:	e002      	b.n	80099b2 <follow_path+0xe2>
				break;
 80099ac:	bf00      	nop
 80099ae:	e000      	b.n	80099b2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80099b0:	bf00      	nop
			}
		}
	}

	return res;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3718      	adds	r7, #24
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80099c4:	f04f 33ff 	mov.w	r3, #4294967295
 80099c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d031      	beq.n	8009a36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	e002      	b.n	80099e0 <get_ldnumber+0x24>
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	3301      	adds	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b20      	cmp	r3, #32
 80099e6:	d903      	bls.n	80099f0 <get_ldnumber+0x34>
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b3a      	cmp	r3, #58	; 0x3a
 80099ee:	d1f4      	bne.n	80099da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b3a      	cmp	r3, #58	; 0x3a
 80099f6:	d11c      	bne.n	8009a32 <get_ldnumber+0x76>
			tp = *path;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	60fa      	str	r2, [r7, #12]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	3b30      	subs	r3, #48	; 0x30
 8009a08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2b09      	cmp	r3, #9
 8009a0e:	d80e      	bhi.n	8009a2e <get_ldnumber+0x72>
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d10a      	bne.n	8009a2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d107      	bne.n	8009a2e <get_ldnumber+0x72>
					vol = (int)i;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	3301      	adds	r3, #1
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	e002      	b.n	8009a38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009a32:	2300      	movs	r3, #0
 8009a34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009a36:	693b      	ldr	r3, [r7, #16]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	371c      	adds	r7, #28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	70da      	strb	r2, [r3, #3]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff f854 	bl	8008b0c <move_window>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <check_fs+0x2a>
 8009a6a:	2304      	movs	r3, #4
 8009a6c:	e038      	b.n	8009ae0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3334      	adds	r3, #52	; 0x34
 8009a72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fd98 	bl	80085ac <ld_word>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d001      	beq.n	8009a8c <check_fs+0x48>
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e029      	b.n	8009ae0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a92:	2be9      	cmp	r3, #233	; 0xe9
 8009a94:	d009      	beq.n	8009aaa <check_fs+0x66>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a9c:	2beb      	cmp	r3, #235	; 0xeb
 8009a9e:	d11e      	bne.n	8009ade <check_fs+0x9a>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009aa6:	2b90      	cmp	r3, #144	; 0x90
 8009aa8:	d119      	bne.n	8009ade <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3334      	adds	r3, #52	; 0x34
 8009aae:	3336      	adds	r3, #54	; 0x36
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fd93 	bl	80085dc <ld_dword>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009abc:	4a0a      	ldr	r2, [pc, #40]	; (8009ae8 <check_fs+0xa4>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d101      	bne.n	8009ac6 <check_fs+0x82>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	e00c      	b.n	8009ae0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3334      	adds	r3, #52	; 0x34
 8009aca:	3352      	adds	r3, #82	; 0x52
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe fd85 	bl	80085dc <ld_dword>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	4a05      	ldr	r2, [pc, #20]	; (8009aec <check_fs+0xa8>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d101      	bne.n	8009ade <check_fs+0x9a>
 8009ada:	2300      	movs	r3, #0
 8009adc:	e000      	b.n	8009ae0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009ade:	2302      	movs	r3, #2
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	00544146 	.word	0x00544146
 8009aec:	33544146 	.word	0x33544146

08009af0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b096      	sub	sp, #88	; 0x58
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	4613      	mov	r3, r2
 8009afc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f7ff ff59 	bl	80099bc <get_ldnumber>
 8009b0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	da01      	bge.n	8009b16 <find_volume+0x26>
 8009b12:	230b      	movs	r3, #11
 8009b14:	e265      	b.n	8009fe2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009b16:	4ab0      	ldr	r2, [pc, #704]	; (8009dd8 <find_volume+0x2e8>)
 8009b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <find_volume+0x3a>
 8009b26:	230c      	movs	r3, #12
 8009b28:	e25b      	b.n	8009fe2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	f023 0301 	bic.w	r3, r3, #1
 8009b36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d01a      	beq.n	8009b76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe fc93 	bl	8008470 <disk_status>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009b50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10c      	bne.n	8009b76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d007      	beq.n	8009b72 <find_volume+0x82>
 8009b62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b66:	f003 0304 	and.w	r3, r3, #4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009b6e:	230a      	movs	r3, #10
 8009b70:	e237      	b.n	8009fe2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009b72:	2300      	movs	r3, #0
 8009b74:	e235      	b.n	8009fe2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	785b      	ldrb	r3, [r3, #1]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fe fc8b 	bl	80084a4 <disk_initialize>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e21e      	b.n	8009fe2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009ba4:	79fb      	ldrb	r3, [r7, #7]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d007      	beq.n	8009bba <find_volume+0xca>
 8009baa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bae:	f003 0304 	and.w	r3, r3, #4
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009bb6:	230a      	movs	r3, #10
 8009bb8:	e213      	b.n	8009fe2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	7858      	ldrb	r0, [r3, #1]
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	330c      	adds	r3, #12
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2102      	movs	r1, #2
 8009bc6:	f7fe fcd3 	bl	8008570 <disk_ioctl>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <find_volume+0xe4>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e206      	b.n	8009fe2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd6:	899b      	ldrh	r3, [r3, #12]
 8009bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bdc:	d80d      	bhi.n	8009bfa <find_volume+0x10a>
 8009bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be0:	899b      	ldrh	r3, [r3, #12]
 8009be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009be6:	d308      	bcc.n	8009bfa <find_volume+0x10a>
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	899b      	ldrh	r3, [r3, #12]
 8009bec:	461a      	mov	r2, r3
 8009bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf0:	899b      	ldrh	r3, [r3, #12]
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <find_volume+0x10e>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e1f1      	b.n	8009fe2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009c02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c06:	f7ff ff1d 	bl	8009a44 <check_fs>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d14b      	bne.n	8009cb0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009c18:	2300      	movs	r3, #0
 8009c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c1c:	e01f      	b.n	8009c5e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c26:	011b      	lsls	r3, r3, #4
 8009c28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009c2c:	4413      	add	r3, r2
 8009c2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	3304      	adds	r3, #4
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d006      	beq.n	8009c48 <find_volume+0x158>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fccc 	bl	80085dc <ld_dword>
 8009c44:	4602      	mov	r2, r0
 8009c46:	e000      	b.n	8009c4a <find_volume+0x15a>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009c52:	440b      	add	r3, r1
 8009c54:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8009c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d9dc      	bls.n	8009c1e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009c64:	2300      	movs	r3, #0
 8009c66:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <find_volume+0x184>
 8009c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c70:	3b01      	subs	r3, #1
 8009c72:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009c82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <find_volume+0x1a6>
 8009c8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c8e:	f7ff fed9 	bl	8009a44 <check_fs>
 8009c92:	4603      	mov	r3, r0
 8009c94:	e000      	b.n	8009c98 <find_volume+0x1a8>
 8009c96:	2303      	movs	r3, #3
 8009c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d905      	bls.n	8009cb0 <find_volume+0x1c0>
 8009ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8009caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	d9e1      	bls.n	8009c74 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d101      	bne.n	8009cbc <find_volume+0x1cc>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e192      	b.n	8009fe2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d901      	bls.n	8009cc8 <find_volume+0x1d8>
 8009cc4:	230d      	movs	r3, #13
 8009cc6:	e18c      	b.n	8009fe2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cca:	3334      	adds	r3, #52	; 0x34
 8009ccc:	330b      	adds	r3, #11
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fc6c 	bl	80085ac <ld_word>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cda:	899b      	ldrh	r3, [r3, #12]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d001      	beq.n	8009ce4 <find_volume+0x1f4>
 8009ce0:	230d      	movs	r3, #13
 8009ce2:	e17e      	b.n	8009fe2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce6:	3334      	adds	r3, #52	; 0x34
 8009ce8:	3316      	adds	r3, #22
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fc5e 	bl	80085ac <ld_word>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d106      	bne.n	8009d08 <find_volume+0x218>
 8009cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfc:	3334      	adds	r3, #52	; 0x34
 8009cfe:	3324      	adds	r3, #36	; 0x24
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fc6b 	bl	80085dc <ld_dword>
 8009d06:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d0c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d10:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1a:	789b      	ldrb	r3, [r3, #2]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d005      	beq.n	8009d2c <find_volume+0x23c>
 8009d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d22:	789b      	ldrb	r3, [r3, #2]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d001      	beq.n	8009d2c <find_volume+0x23c>
 8009d28:	230d      	movs	r3, #13
 8009d2a:	e15a      	b.n	8009fe2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	789b      	ldrb	r3, [r3, #2]
 8009d30:	461a      	mov	r2, r3
 8009d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d34:	fb02 f303 	mul.w	r3, r2, r3
 8009d38:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d44:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	895b      	ldrh	r3, [r3, #10]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d008      	beq.n	8009d60 <find_volume+0x270>
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	895b      	ldrh	r3, [r3, #10]
 8009d52:	461a      	mov	r2, r3
 8009d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d56:	895b      	ldrh	r3, [r3, #10]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <find_volume+0x274>
 8009d60:	230d      	movs	r3, #13
 8009d62:	e13e      	b.n	8009fe2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d66:	3334      	adds	r3, #52	; 0x34
 8009d68:	3311      	adds	r3, #17
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fe fc1e 	bl	80085ac <ld_word>
 8009d70:	4603      	mov	r3, r0
 8009d72:	461a      	mov	r2, r3
 8009d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d76:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	891b      	ldrh	r3, [r3, #8]
 8009d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d7e:	8992      	ldrh	r2, [r2, #12]
 8009d80:	0952      	lsrs	r2, r2, #5
 8009d82:	b292      	uxth	r2, r2
 8009d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d88:	fb02 f201 	mul.w	r2, r2, r1
 8009d8c:	1a9b      	subs	r3, r3, r2
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <find_volume+0x2a8>
 8009d94:	230d      	movs	r3, #13
 8009d96:	e124      	b.n	8009fe2 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9a:	3334      	adds	r3, #52	; 0x34
 8009d9c:	3313      	adds	r3, #19
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fc04 	bl	80085ac <ld_word>
 8009da4:	4603      	mov	r3, r0
 8009da6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <find_volume+0x2cc>
 8009dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db0:	3334      	adds	r3, #52	; 0x34
 8009db2:	3320      	adds	r3, #32
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fc11 	bl	80085dc <ld_dword>
 8009dba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbe:	3334      	adds	r3, #52	; 0x34
 8009dc0:	330e      	adds	r3, #14
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fbf2 	bl	80085ac <ld_word>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009dcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d104      	bne.n	8009ddc <find_volume+0x2ec>
 8009dd2:	230d      	movs	r3, #13
 8009dd4:	e105      	b.n	8009fe2 <find_volume+0x4f2>
 8009dd6:	bf00      	nop
 8009dd8:	200000b0 	.word	0x200000b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009ddc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de0:	4413      	add	r3, r2
 8009de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de4:	8911      	ldrh	r1, [r2, #8]
 8009de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de8:	8992      	ldrh	r2, [r2, #12]
 8009dea:	0952      	lsrs	r2, r2, #5
 8009dec:	b292      	uxth	r2, r2
 8009dee:	fbb1 f2f2 	udiv	r2, r1, r2
 8009df2:	b292      	uxth	r2, r2
 8009df4:	4413      	add	r3, r2
 8009df6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d201      	bcs.n	8009e04 <find_volume+0x314>
 8009e00:	230d      	movs	r3, #13
 8009e02:	e0ee      	b.n	8009fe2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e0c:	8952      	ldrh	r2, [r2, #10]
 8009e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <find_volume+0x32e>
 8009e1a:	230d      	movs	r3, #13
 8009e1c:	e0e1      	b.n	8009fe2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d802      	bhi.n	8009e34 <find_volume+0x344>
 8009e2e:	2302      	movs	r3, #2
 8009e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d802      	bhi.n	8009e44 <find_volume+0x354>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	1c9a      	adds	r2, r3, #2
 8009e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e50:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009e52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e56:	441a      	add	r2, r3
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009e5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e60:	441a      	add	r2, r3
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8009e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d11e      	bne.n	8009eac <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e70:	3334      	adds	r3, #52	; 0x34
 8009e72:	332a      	adds	r3, #42	; 0x2a
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe fb99 	bl	80085ac <ld_word>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <find_volume+0x394>
 8009e80:	230d      	movs	r3, #13
 8009e82:	e0ae      	b.n	8009fe2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e86:	891b      	ldrh	r3, [r3, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <find_volume+0x3a0>
 8009e8c:	230d      	movs	r3, #13
 8009e8e:	e0a8      	b.n	8009fe2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	3334      	adds	r3, #52	; 0x34
 8009e94:	332c      	adds	r3, #44	; 0x2c
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe fba0 	bl	80085dc <ld_dword>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8009eaa:	e01f      	b.n	8009eec <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	891b      	ldrh	r3, [r3, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <find_volume+0x3c8>
 8009eb4:	230d      	movs	r3, #13
 8009eb6:	e094      	b.n	8009fe2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ebe:	441a      	add	r2, r3
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d103      	bne.n	8009ed4 <find_volume+0x3e4>
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	e00a      	b.n	8009eea <find_volume+0x3fa>
 8009ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed6:	699a      	ldr	r2, [r3, #24]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	4413      	add	r3, r2
 8009ede:	085a      	lsrs	r2, r3, #1
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009eea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	69da      	ldr	r2, [r3, #28]
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	899b      	ldrh	r3, [r3, #12]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef8:	440b      	add	r3, r1
 8009efa:	3b01      	subs	r3, #1
 8009efc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009efe:	8989      	ldrh	r1, [r1, #12]
 8009f00:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d201      	bcs.n	8009f0c <find_volume+0x41c>
 8009f08:	230d      	movs	r3, #13
 8009f0a:	e06a      	b.n	8009fe2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f12:	615a      	str	r2, [r3, #20]
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	695a      	ldr	r2, [r3, #20]
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1e:	2280      	movs	r2, #128	; 0x80
 8009f20:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d149      	bne.n	8009fbe <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	3334      	adds	r3, #52	; 0x34
 8009f2e:	3330      	adds	r3, #48	; 0x30
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe fb3b 	bl	80085ac <ld_word>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d140      	bne.n	8009fbe <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f3e:	3301      	adds	r3, #1
 8009f40:	4619      	mov	r1, r3
 8009f42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f44:	f7fe fde2 	bl	8008b0c <move_window>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d137      	bne.n	8009fbe <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	2200      	movs	r2, #0
 8009f52:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	3334      	adds	r3, #52	; 0x34
 8009f58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fb25 	bl	80085ac <ld_word>
 8009f62:	4603      	mov	r3, r0
 8009f64:	461a      	mov	r2, r3
 8009f66:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d127      	bne.n	8009fbe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	3334      	adds	r3, #52	; 0x34
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fb32 	bl	80085dc <ld_dword>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	4a1c      	ldr	r2, [pc, #112]	; (8009fec <find_volume+0x4fc>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d11e      	bne.n	8009fbe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f82:	3334      	adds	r3, #52	; 0x34
 8009f84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe fb27 	bl	80085dc <ld_dword>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4a17      	ldr	r2, [pc, #92]	; (8009ff0 <find_volume+0x500>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d113      	bne.n	8009fbe <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	3334      	adds	r3, #52	; 0x34
 8009f9a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fb1c 	bl	80085dc <ld_dword>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	3334      	adds	r3, #52	; 0x34
 8009fae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fb12 	bl	80085dc <ld_dword>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009fc4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <find_volume+0x504>)
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <find_volume+0x504>)
 8009fd0:	801a      	strh	r2, [r3, #0]
 8009fd2:	4b08      	ldr	r3, [pc, #32]	; (8009ff4 <find_volume+0x504>)
 8009fd4:	881a      	ldrh	r2, [r3, #0]
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009fda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fdc:	f7fe fd2e 	bl	8008a3c <clear_lock>
#endif
	return FR_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3758      	adds	r7, #88	; 0x58
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	41615252 	.word	0x41615252
 8009ff0:	61417272 	.word	0x61417272
 8009ff4:	200000b4 	.word	0x200000b4

08009ff8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a002:	2309      	movs	r3, #9
 800a004:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01c      	beq.n	800a046 <validate+0x4e>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d018      	beq.n	800a046 <validate+0x4e>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d013      	beq.n	800a046 <validate+0x4e>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	889a      	ldrh	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	88db      	ldrh	r3, [r3, #6]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d10c      	bne.n	800a046 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fa1c 	bl	8008470 <disk_status>
 800a038:	4603      	mov	r3, r0
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <validate+0x4e>
			res = FR_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d102      	bne.n	800a052 <validate+0x5a>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	e000      	b.n	800a054 <validate+0x5c>
 800a052:	2300      	movs	r3, #0
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	6013      	str	r3, [r2, #0]
	return res;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a076:	f107 0310 	add.w	r3, r7, #16
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7ff fc9e 	bl	80099bc <get_ldnumber>
 800a080:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	2b00      	cmp	r3, #0
 800a086:	da01      	bge.n	800a08c <f_mount+0x28>
 800a088:	230b      	movs	r3, #11
 800a08a:	e02b      	b.n	800a0e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a08c:	4a17      	ldr	r2, [pc, #92]	; (800a0ec <f_mount+0x88>)
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a094:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a09c:	69b8      	ldr	r0, [r7, #24]
 800a09e:	f7fe fccd 	bl	8008a3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	490d      	ldr	r1, [pc, #52]	; (800a0ec <f_mount+0x88>)
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <f_mount+0x66>
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d001      	beq.n	800a0ce <f_mount+0x6a>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	e00a      	b.n	800a0e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a0ce:	f107 010c 	add.w	r1, r7, #12
 800a0d2:	f107 0308 	add.w	r3, r7, #8
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff fd09 	bl	8009af0 <find_volume>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3720      	adds	r7, #32
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	200000b0 	.word	0x200000b0

0800a0f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b098      	sub	sp, #96	; 0x60
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <f_open+0x18>
 800a104:	2309      	movs	r3, #9
 800a106:	e1bb      	b.n	800a480 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a10e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a110:	79fa      	ldrb	r2, [r7, #7]
 800a112:	f107 0110 	add.w	r1, r7, #16
 800a116:	f107 0308 	add.w	r3, r7, #8
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7ff fce8 	bl	8009af0 <find_volume>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f040 819f 	bne.w	800a46e <f_open+0x37e>
		dj.obj.fs = fs;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	f107 0314 	add.w	r3, r7, #20
 800a13a:	4611      	mov	r1, r2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff fbc7 	bl	80098d0 <follow_path>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d11a      	bne.n	800a186 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a150:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a154:	b25b      	sxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	da03      	bge.n	800a162 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a15a:	2306      	movs	r3, #6
 800a15c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a160:	e011      	b.n	800a186 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	f023 0301 	bic.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bf14      	ite	ne
 800a16c:	2301      	movne	r3, #1
 800a16e:	2300      	moveq	r3, #0
 800a170:	b2db      	uxtb	r3, r3
 800a172:	461a      	mov	r2, r3
 800a174:	f107 0314 	add.w	r3, r7, #20
 800a178:	4611      	mov	r1, r2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fb16 	bl	80087ac <chk_lock>
 800a180:	4603      	mov	r3, r0
 800a182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a186:	79fb      	ldrb	r3, [r7, #7]
 800a188:	f003 031c 	and.w	r3, r3, #28
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d07f      	beq.n	800a290 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a194:	2b00      	cmp	r3, #0
 800a196:	d017      	beq.n	800a1c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a19c:	2b04      	cmp	r3, #4
 800a19e:	d10e      	bne.n	800a1be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a1a0:	f7fe fb60 	bl	8008864 <enq_lock>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d006      	beq.n	800a1b8 <f_open+0xc8>
 800a1aa:	f107 0314 	add.w	r3, r7, #20
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff fac8 	bl	8009744 <dir_register>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	e000      	b.n	800a1ba <f_open+0xca>
 800a1b8:	2312      	movs	r3, #18
 800a1ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	f043 0308 	orr.w	r3, r3, #8
 800a1c4:	71fb      	strb	r3, [r7, #7]
 800a1c6:	e010      	b.n	800a1ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a1c8:	7ebb      	ldrb	r3, [r7, #26]
 800a1ca:	f003 0311 	and.w	r3, r3, #17
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <f_open+0xea>
					res = FR_DENIED;
 800a1d2:	2307      	movs	r3, #7
 800a1d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a1d8:	e007      	b.n	800a1ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <f_open+0xfa>
 800a1e4:	2308      	movs	r3, #8
 800a1e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a1ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d168      	bne.n	800a2c4 <f_open+0x1d4>
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d063      	beq.n	800a2c4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a1fc:	f7fb f93c 	bl	8005478 <get_fattime>
 800a200:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a204:	330e      	adds	r3, #14
 800a206:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fe fa25 	bl	8008658 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a210:	3316      	adds	r3, #22
 800a212:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe fa1f 	bl	8008658 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21c:	330b      	adds	r3, #11
 800a21e:	2220      	movs	r2, #32
 800a220:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff f9f7 	bl	800961c <ld_clust>
 800a22e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a234:	2200      	movs	r2, #0
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fa0f 	bl	800965a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23e:	331c      	adds	r3, #28
 800a240:	2100      	movs	r1, #0
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe fa08 	bl	8008658 <st_dword>
					fs->wflag = 1;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2201      	movs	r2, #1
 800a24c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d037      	beq.n	800a2c4 <f_open+0x1d4>
						dw = fs->winsect;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a258:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a25a:	f107 0314 	add.w	r3, r7, #20
 800a25e:	2200      	movs	r2, #0
 800a260:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe feff 	bl	8009066 <remove_chain>
 800a268:	4603      	mov	r3, r0
 800a26a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a26e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a272:	2b00      	cmp	r3, #0
 800a274:	d126      	bne.n	800a2c4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fe fc46 	bl	8008b0c <move_window>
 800a280:	4603      	mov	r3, r0
 800a282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a28a:	3a01      	subs	r2, #1
 800a28c:	611a      	str	r2, [r3, #16]
 800a28e:	e019      	b.n	800a2c4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a294:	2b00      	cmp	r3, #0
 800a296:	d115      	bne.n	800a2c4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a298:	7ebb      	ldrb	r3, [r7, #26]
 800a29a:	f003 0310 	and.w	r3, r3, #16
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <f_open+0x1ba>
					res = FR_NO_FILE;
 800a2a2:	2304      	movs	r3, #4
 800a2a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a2a8:	e00c      	b.n	800a2c4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a2aa:	79fb      	ldrb	r3, [r7, #7]
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d007      	beq.n	800a2c4 <f_open+0x1d4>
 800a2b4:	7ebb      	ldrb	r3, [r7, #26]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <f_open+0x1d4>
						res = FR_DENIED;
 800a2be:	2307      	movs	r3, #7
 800a2c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a2c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d128      	bne.n	800a31e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	f003 0308 	and.w	r3, r3, #8
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a2d6:	79fb      	ldrb	r3, [r7, #7]
 800a2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2dc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2ec:	79fb      	ldrb	r3, [r7, #7]
 800a2ee:	f023 0301 	bic.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bf14      	ite	ne
 800a2f6:	2301      	movne	r3, #1
 800a2f8:	2300      	moveq	r3, #0
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f107 0314 	add.w	r3, r7, #20
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe facf 	bl	80088a8 <inc_lock>
 800a30a:	4602      	mov	r2, r0
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <f_open+0x22e>
 800a318:	2302      	movs	r3, #2
 800a31a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a31e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a322:	2b00      	cmp	r3, #0
 800a324:	f040 80a3 	bne.w	800a46e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff f974 	bl	800961c <ld_clust>
 800a334:	4602      	mov	r2, r0
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a33c:	331c      	adds	r3, #28
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe f94c 	bl	80085dc <ld_dword>
 800a344:	4602      	mov	r2, r0
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	88da      	ldrh	r2, [r3, #6]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	79fa      	ldrb	r2, [r7, #7]
 800a362:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3330      	adds	r3, #48	; 0x30
 800a37a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe f9b6 	bl	80086f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a386:	79fb      	ldrb	r3, [r7, #7]
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d06e      	beq.n	800a46e <f_open+0x37e>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d06a      	beq.n	800a46e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	895b      	ldrh	r3, [r3, #10]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	899b      	ldrh	r3, [r3, #12]
 800a3aa:	fb03 f302 	mul.w	r3, r3, r2
 800a3ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	657b      	str	r3, [r7, #84]	; 0x54
 800a3bc:	e016      	b.n	800a3ec <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fe fc5f 	bl	8008c86 <get_fat>
 800a3c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a3ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d802      	bhi.n	800a3d6 <f_open+0x2e6>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a3d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3dc:	d102      	bne.n	800a3e4 <f_open+0x2f4>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a3e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	657b      	str	r3, [r7, #84]	; 0x54
 800a3ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d103      	bne.n	800a3fc <f_open+0x30c>
 800a3f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d8e0      	bhi.n	800a3be <f_open+0x2ce>
				}
				fp->clust = clst;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a400:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a406:	2b00      	cmp	r3, #0
 800a408:	d131      	bne.n	800a46e <f_open+0x37e>
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	899b      	ldrh	r3, [r3, #12]
 800a40e:	461a      	mov	r2, r3
 800a410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a412:	fbb3 f1f2 	udiv	r1, r3, r2
 800a416:	fb02 f201 	mul.w	r2, r2, r1
 800a41a:	1a9b      	subs	r3, r3, r2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d026      	beq.n	800a46e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a424:	4618      	mov	r0, r3
 800a426:	f7fe fc0f 	bl	8008c48 <clust2sect>
 800a42a:	6478      	str	r0, [r7, #68]	; 0x44
 800a42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d103      	bne.n	800a43a <f_open+0x34a>
						res = FR_INT_ERR;
 800a432:	2302      	movs	r3, #2
 800a434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a438:	e019      	b.n	800a46e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	899b      	ldrh	r3, [r3, #12]
 800a43e:	461a      	mov	r2, r3
 800a440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a442:	fbb3 f2f2 	udiv	r2, r3, r2
 800a446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a448:	441a      	add	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	7858      	ldrb	r0, [r3, #1]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a1a      	ldr	r2, [r3, #32]
 800a45c:	2301      	movs	r3, #1
 800a45e:	f7fe f847 	bl	80084f0 <disk_read>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <f_open+0x37e>
 800a468:	2301      	movs	r3, #1
 800a46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a46e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <f_open+0x38c>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a47c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a480:	4618      	mov	r0, r3
 800a482:	3760      	adds	r7, #96	; 0x60
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08e      	sub	sp, #56	; 0x38
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f107 0214 	add.w	r2, r7, #20
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff fda5 	bl	8009ff8 <validate>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a4b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d107      	bne.n	800a4cc <f_read+0x44>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	7d5b      	ldrb	r3, [r3, #21]
 800a4c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a4c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <f_read+0x4a>
 800a4cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4d0:	e135      	b.n	800a73e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	7d1b      	ldrb	r3, [r3, #20]
 800a4d6:	f003 0301 	and.w	r3, r3, #1
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <f_read+0x5a>
 800a4de:	2307      	movs	r3, #7
 800a4e0:	e12d      	b.n	800a73e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	6a3b      	ldr	r3, [r7, #32]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	f240 811e 	bls.w	800a734 <f_read+0x2ac>
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a4fc:	e11a      	b.n	800a734 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	8992      	ldrh	r2, [r2, #12]
 800a506:	fbb3 f1f2 	udiv	r1, r3, r2
 800a50a:	fb02 f201 	mul.w	r2, r2, r1
 800a50e:	1a9b      	subs	r3, r3, r2
 800a510:	2b00      	cmp	r3, #0
 800a512:	f040 80d5 	bne.w	800a6c0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	8992      	ldrh	r2, [r2, #12]
 800a51e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	8952      	ldrh	r2, [r2, #10]
 800a526:	3a01      	subs	r2, #1
 800a528:	4013      	ands	r3, r2
 800a52a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d12f      	bne.n	800a592 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d103      	bne.n	800a542 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	633b      	str	r3, [r7, #48]	; 0x30
 800a540:	e013      	b.n	800a56a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d007      	beq.n	800a55a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	4619      	mov	r1, r3
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f7fe fe85 	bl	8009260 <clmt_clust>
 800a556:	6338      	str	r0, [r7, #48]	; 0x30
 800a558:	e007      	b.n	800a56a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	4619      	mov	r1, r3
 800a562:	4610      	mov	r0, r2
 800a564:	f7fe fb8f 	bl	8008c86 <get_fat>
 800a568:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d804      	bhi.n	800a57a <f_read+0xf2>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2202      	movs	r2, #2
 800a574:	755a      	strb	r2, [r3, #21]
 800a576:	2302      	movs	r3, #2
 800a578:	e0e1      	b.n	800a73e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a580:	d104      	bne.n	800a58c <f_read+0x104>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	755a      	strb	r2, [r3, #21]
 800a588:	2301      	movs	r3, #1
 800a58a:	e0d8      	b.n	800a73e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a590:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f7fe fb54 	bl	8008c48 <clust2sect>
 800a5a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d104      	bne.n	800a5b2 <f_read+0x12a>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	755a      	strb	r2, [r3, #21]
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e0c5      	b.n	800a73e <f_read+0x2b6>
			sect += csect;
 800a5b2:	69ba      	ldr	r2, [r7, #24]
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	899b      	ldrh	r3, [r3, #12]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d041      	beq.n	800a652 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a5ce:	69fa      	ldr	r2, [r7, #28]
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	4413      	add	r3, r2
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	8952      	ldrh	r2, [r2, #10]
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d905      	bls.n	800a5e8 <f_read+0x160>
					cc = fs->csize - csect;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	895b      	ldrh	r3, [r3, #10]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	7858      	ldrb	r0, [r3, #1]
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5f2:	f7fd ff7d 	bl	80084f0 <disk_read>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d004      	beq.n	800a606 <f_read+0x17e>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2201      	movs	r2, #1
 800a600:	755a      	strb	r2, [r3, #21]
 800a602:	2301      	movs	r3, #1
 800a604:	e09b      	b.n	800a73e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	7d1b      	ldrb	r3, [r3, #20]
 800a60a:	b25b      	sxtb	r3, r3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da18      	bge.n	800a642 <f_read+0x1ba>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6a1a      	ldr	r2, [r3, #32]
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d911      	bls.n	800a642 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1a      	ldr	r2, [r3, #32]
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	8992      	ldrh	r2, [r2, #12]
 800a62a:	fb02 f303 	mul.w	r3, r2, r3
 800a62e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a630:	18d0      	adds	r0, r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	899b      	ldrh	r3, [r3, #12]
 800a63c:	461a      	mov	r2, r3
 800a63e:	f7fe f837 	bl	80086b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	899b      	ldrh	r3, [r3, #12]
 800a646:	461a      	mov	r2, r3
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	fb02 f303 	mul.w	r3, r2, r3
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a650:	e05c      	b.n	800a70c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	69ba      	ldr	r2, [r7, #24]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d02e      	beq.n	800a6ba <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	7d1b      	ldrb	r3, [r3, #20]
 800a660:	b25b      	sxtb	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	da18      	bge.n	800a698 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	7858      	ldrb	r0, [r3, #1]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6a1a      	ldr	r2, [r3, #32]
 800a674:	2301      	movs	r3, #1
 800a676:	f7fd ff5b 	bl	8008530 <disk_write>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d004      	beq.n	800a68a <f_read+0x202>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	755a      	strb	r2, [r3, #21]
 800a686:	2301      	movs	r3, #1
 800a688:	e059      	b.n	800a73e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	7d1b      	ldrb	r3, [r3, #20]
 800a68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a692:	b2da      	uxtb	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	7858      	ldrb	r0, [r3, #1]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	69ba      	ldr	r2, [r7, #24]
 800a6a6:	f7fd ff23 	bl	80084f0 <disk_read>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d004      	beq.n	800a6ba <f_read+0x232>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	755a      	strb	r2, [r3, #21]
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e041      	b.n	800a73e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	899b      	ldrh	r3, [r3, #12]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	8992      	ldrh	r2, [r2, #12]
 800a6ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6d2:	fb02 f201 	mul.w	r2, r2, r1
 800a6d6:	1a9b      	subs	r3, r3, r2
 800a6d8:	1ac3      	subs	r3, r0, r3
 800a6da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d901      	bls.n	800a6e8 <f_read+0x260>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	8992      	ldrh	r2, [r2, #12]
 800a6f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a6fa:	fb02 f200 	mul.w	r2, r2, r0
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	440b      	add	r3, r1
 800a702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a704:	4619      	mov	r1, r3
 800a706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a708:	f7fd ffd2 	bl	80086b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a70c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a710:	4413      	add	r3, r2
 800a712:	627b      	str	r3, [r7, #36]	; 0x24
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	699a      	ldr	r2, [r3, #24]
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	441a      	add	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	619a      	str	r2, [r3, #24]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	441a      	add	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f47f aee1 	bne.w	800a4fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3738      	adds	r7, #56	; 0x38
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b08c      	sub	sp, #48	; 0x30
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
 800a752:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f107 0210 	add.w	r2, r7, #16
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff fc46 	bl	8009ff8 <validate>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a776:	2b00      	cmp	r3, #0
 800a778:	d107      	bne.n	800a78a <f_write+0x44>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	7d5b      	ldrb	r3, [r3, #21]
 800a77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <f_write+0x4a>
 800a78a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a78e:	e16a      	b.n	800aa66 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	7d1b      	ldrb	r3, [r3, #20]
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <f_write+0x5a>
 800a79c:	2307      	movs	r3, #7
 800a79e:	e162      	b.n	800aa66 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	699a      	ldr	r2, [r3, #24]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	441a      	add	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	f080 814c 	bcs.w	800aa4a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	43db      	mvns	r3, r3
 800a7b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a7ba:	e146      	b.n	800aa4a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	8992      	ldrh	r2, [r2, #12]
 800a7c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7c8:	fb02 f201 	mul.w	r2, r2, r1
 800a7cc:	1a9b      	subs	r3, r3, r2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f040 80f1 	bne.w	800a9b6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	8992      	ldrh	r2, [r2, #12]
 800a7dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	8952      	ldrh	r2, [r2, #10]
 800a7e4:	3a01      	subs	r2, #1
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d143      	bne.n	800a878 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10c      	bne.n	800a812 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a800:	2b00      	cmp	r3, #0
 800a802:	d11a      	bne.n	800a83a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fe fc91 	bl	8009130 <create_chain>
 800a80e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a810:	e013      	b.n	800a83a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d007      	beq.n	800a82a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	4619      	mov	r1, r3
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7fe fd1d 	bl	8009260 <clmt_clust>
 800a826:	62b8      	str	r0, [r7, #40]	; 0x28
 800a828:	e007      	b.n	800a83a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	4619      	mov	r1, r3
 800a832:	4610      	mov	r0, r2
 800a834:	f7fe fc7c 	bl	8009130 <create_chain>
 800a838:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 8109 	beq.w	800aa54 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	2b01      	cmp	r3, #1
 800a846:	d104      	bne.n	800a852 <f_write+0x10c>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2202      	movs	r2, #2
 800a84c:	755a      	strb	r2, [r3, #21]
 800a84e:	2302      	movs	r3, #2
 800a850:	e109      	b.n	800aa66 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a858:	d104      	bne.n	800a864 <f_write+0x11e>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2201      	movs	r2, #1
 800a85e:	755a      	strb	r2, [r3, #21]
 800a860:	2301      	movs	r3, #1
 800a862:	e100      	b.n	800aa66 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a868:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d102      	bne.n	800a878 <f_write+0x132>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a876:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	7d1b      	ldrb	r3, [r3, #20]
 800a87c:	b25b      	sxtb	r3, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	da18      	bge.n	800a8b4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	7858      	ldrb	r0, [r3, #1]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6a1a      	ldr	r2, [r3, #32]
 800a890:	2301      	movs	r3, #1
 800a892:	f7fd fe4d 	bl	8008530 <disk_write>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d004      	beq.n	800a8a6 <f_write+0x160>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	755a      	strb	r2, [r3, #21]
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e0df      	b.n	800aa66 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	7d1b      	ldrb	r3, [r3, #20]
 800a8aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	4610      	mov	r0, r2
 800a8be:	f7fe f9c3 	bl	8008c48 <clust2sect>
 800a8c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d104      	bne.n	800a8d4 <f_write+0x18e>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	755a      	strb	r2, [r3, #21]
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e0c8      	b.n	800aa66 <f_write+0x320>
			sect += csect;
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	4413      	add	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	899b      	ldrh	r3, [r3, #12]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d043      	beq.n	800a978 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	8952      	ldrh	r2, [r2, #10]
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d905      	bls.n	800a90a <f_write+0x1c4>
					cc = fs->csize - csect;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	895b      	ldrh	r3, [r3, #10]
 800a902:	461a      	mov	r2, r3
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	7858      	ldrb	r0, [r3, #1]
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	69f9      	ldr	r1, [r7, #28]
 800a914:	f7fd fe0c 	bl	8008530 <disk_write>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d004      	beq.n	800a928 <f_write+0x1e2>
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2201      	movs	r2, #1
 800a922:	755a      	strb	r2, [r3, #21]
 800a924:	2301      	movs	r3, #1
 800a926:	e09e      	b.n	800aa66 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6a1a      	ldr	r2, [r3, #32]
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	6a3a      	ldr	r2, [r7, #32]
 800a932:	429a      	cmp	r2, r3
 800a934:	d918      	bls.n	800a968 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6a1a      	ldr	r2, [r3, #32]
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	8992      	ldrh	r2, [r2, #12]
 800a948:	fb02 f303 	mul.w	r3, r2, r3
 800a94c:	69fa      	ldr	r2, [r7, #28]
 800a94e:	18d1      	adds	r1, r2, r3
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	899b      	ldrh	r3, [r3, #12]
 800a954:	461a      	mov	r2, r3
 800a956:	f7fd feab 	bl	80086b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	7d1b      	ldrb	r3, [r3, #20]
 800a95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a962:	b2da      	uxtb	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	899b      	ldrh	r3, [r3, #12]
 800a96c:	461a      	mov	r2, r3
 800a96e:	6a3b      	ldr	r3, [r7, #32]
 800a970:	fb02 f303 	mul.w	r3, r2, r3
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a976:	e04b      	b.n	800aa10 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d016      	beq.n	800a9b0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	699a      	ldr	r2, [r3, #24]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d210      	bcs.n	800a9b0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	7858      	ldrb	r0, [r3, #1]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a998:	2301      	movs	r3, #1
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	f7fd fda8 	bl	80084f0 <disk_read>
 800a9a0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	755a      	strb	r2, [r3, #21]
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e05a      	b.n	800aa66 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	899b      	ldrh	r3, [r3, #12]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	693a      	ldr	r2, [r7, #16]
 800a9c2:	8992      	ldrh	r2, [r2, #12]
 800a9c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9c8:	fb02 f201 	mul.w	r2, r2, r1
 800a9cc:	1a9b      	subs	r3, r3, r2
 800a9ce:	1ac3      	subs	r3, r0, r3
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d901      	bls.n	800a9de <f_write+0x298>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	8992      	ldrh	r2, [r2, #12]
 800a9ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9f0:	fb02 f200 	mul.w	r2, r2, r0
 800a9f4:	1a9b      	subs	r3, r3, r2
 800a9f6:	440b      	add	r3, r1
 800a9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9fa:	69f9      	ldr	r1, [r7, #28]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fd fe57 	bl	80086b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	7d1b      	ldrb	r3, [r3, #20]
 800aa06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aa10:	69fa      	ldr	r2, [r7, #28]
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	4413      	add	r3, r2
 800aa16:	61fb      	str	r3, [r7, #28]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	699a      	ldr	r2, [r3, #24]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	441a      	add	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	619a      	str	r2, [r3, #24]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	68da      	ldr	r2, [r3, #12]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	bf38      	it	cc
 800aa30:	461a      	movcc	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	60da      	str	r2, [r3, #12]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	441a      	add	r2, r3
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f47f aeb5 	bne.w	800a7bc <f_write+0x76>
 800aa52:	e000      	b.n	800aa56 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aa54:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	7d1b      	ldrb	r3, [r3, #20]
 800aa5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3730      	adds	r7, #48	; 0x30
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b086      	sub	sp, #24
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f107 0208 	add.w	r2, r7, #8
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff faba 	bl	8009ff8 <validate>
 800aa84:	4603      	mov	r3, r0
 800aa86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d168      	bne.n	800ab60 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7d1b      	ldrb	r3, [r3, #20]
 800aa92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d062      	beq.n	800ab60 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	7d1b      	ldrb	r3, [r3, #20]
 800aa9e:	b25b      	sxtb	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da15      	bge.n	800aad0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	7858      	ldrb	r0, [r3, #1]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a1a      	ldr	r2, [r3, #32]
 800aab2:	2301      	movs	r3, #1
 800aab4:	f7fd fd3c 	bl	8008530 <disk_write>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <f_sync+0x54>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e04f      	b.n	800ab62 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	7d1b      	ldrb	r3, [r3, #20]
 800aac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aad0:	f7fa fcd2 	bl	8005478 <get_fattime>
 800aad4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	4619      	mov	r1, r3
 800aade:	4610      	mov	r0, r2
 800aae0:	f7fe f814 	bl	8008b0c <move_window>
 800aae4:	4603      	mov	r3, r0
 800aae6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d138      	bne.n	800ab60 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	330b      	adds	r3, #11
 800aaf8:	781a      	ldrb	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	330b      	adds	r3, #11
 800aafe:	f042 0220 	orr.w	r2, r2, #32
 800ab02:	b2d2      	uxtb	r2, r2
 800ab04:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6818      	ldr	r0, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	68f9      	ldr	r1, [r7, #12]
 800ab12:	f7fe fda2 	bl	800965a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f103 021c 	add.w	r2, r3, #28
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f7fd fd98 	bl	8008658 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3316      	adds	r3, #22
 800ab2c:	6939      	ldr	r1, [r7, #16]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fd fd92 	bl	8008658 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3312      	adds	r3, #18
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fd fd71 	bl	8008622 <st_word>
					fs->wflag = 1;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2201      	movs	r2, #1
 800ab44:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fe f80d 	bl	8008b68 <sync_fs>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	7d1b      	ldrb	r3, [r3, #20]
 800ab56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff ff7b 	bl	800aa6e <f_sync>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d118      	bne.n	800abb4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f107 0208 	add.w	r2, r7, #8
 800ab88:	4611      	mov	r1, r2
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff fa34 	bl	8009ff8 <validate>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10c      	bne.n	800abb4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fd ff10 	bl	80089c4 <dec_lock>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d102      	bne.n	800abb4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
	...

0800abc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b087      	sub	sp, #28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	4613      	mov	r3, r2
 800abcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800abce:	2301      	movs	r3, #1
 800abd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800abd6:	4b1f      	ldr	r3, [pc, #124]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800abd8:	7a5b      	ldrb	r3, [r3, #9]
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d131      	bne.n	800ac44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800abe0:	4b1c      	ldr	r3, [pc, #112]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800abe2:	7a5b      	ldrb	r3, [r3, #9]
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	461a      	mov	r2, r3
 800abe8:	4b1a      	ldr	r3, [pc, #104]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800abea:	2100      	movs	r1, #0
 800abec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800abee:	4b19      	ldr	r3, [pc, #100]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800abf0:	7a5b      	ldrb	r3, [r3, #9]
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	4a17      	ldr	r2, [pc, #92]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800abfe:	4b15      	ldr	r3, [pc, #84]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800ac00:	7a5b      	ldrb	r3, [r3, #9]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	461a      	mov	r2, r3
 800ac06:	4b13      	ldr	r3, [pc, #76]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800ac08:	4413      	add	r3, r2
 800ac0a:	79fa      	ldrb	r2, [r7, #7]
 800ac0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac0e:	4b11      	ldr	r3, [pc, #68]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800ac10:	7a5b      	ldrb	r3, [r3, #9]
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	b2d1      	uxtb	r1, r2
 800ac18:	4a0e      	ldr	r2, [pc, #56]	; (800ac54 <FATFS_LinkDriverEx+0x94>)
 800ac1a:	7251      	strb	r1, [r2, #9]
 800ac1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac1e:	7dbb      	ldrb	r3, [r7, #22]
 800ac20:	3330      	adds	r3, #48	; 0x30
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	223a      	movs	r2, #58	; 0x3a
 800ac2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	3302      	adds	r3, #2
 800ac34:	222f      	movs	r2, #47	; 0x2f
 800ac36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	3303      	adds	r3, #3
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	371c      	adds	r7, #28
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	200000d8 	.word	0x200000d8

0800ac58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac62:	2200      	movs	r2, #0
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff ffaa 	bl	800abc0 <FATFS_LinkDriverEx>
 800ac6c:	4603      	mov	r3, r0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	490e      	ldr	r1, [pc, #56]	; (800acb8 <MX_USB_HOST_Init+0x40>)
 800ac80:	480e      	ldr	r0, [pc, #56]	; (800acbc <MX_USB_HOST_Init+0x44>)
 800ac82:	f7fc f89d 	bl	8006dc0 <USBH_Init>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ac8c:	f7f5 ffee 	bl	8000c6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ac90:	490b      	ldr	r1, [pc, #44]	; (800acc0 <MX_USB_HOST_Init+0x48>)
 800ac92:	480a      	ldr	r0, [pc, #40]	; (800acbc <MX_USB_HOST_Init+0x44>)
 800ac94:	f7fc f922 	bl	8006edc <USBH_RegisterClass>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ac9e:	f7f5 ffe5 	bl	8000c6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aca2:	4806      	ldr	r0, [pc, #24]	; (800acbc <MX_USB_HOST_Init+0x44>)
 800aca4:	f7fc f9a6 	bl	8006ff4 <USBH_Start>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800acae:	f7f5 ffdd 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800acb2:	bf00      	nop
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	0800acd9 	.word	0x0800acd9
 800acbc:	20003194 	.word	0x20003194
 800acc0:	2000000c 	.word	0x2000000c

0800acc4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800acc8:	4802      	ldr	r0, [pc, #8]	; (800acd4 <MX_USB_HOST_Process+0x10>)
 800acca:	f7fc f9a3 	bl	8007014 <USBH_Process>
}
 800acce:	bf00      	nop
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20003194 	.word	0x20003194

0800acd8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ace4:	78fb      	ldrb	r3, [r7, #3]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	2b04      	cmp	r3, #4
 800acea:	d819      	bhi.n	800ad20 <USBH_UserProcess+0x48>
 800acec:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <USBH_UserProcess+0x1c>)
 800acee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf2:	bf00      	nop
 800acf4:	0800ad21 	.word	0x0800ad21
 800acf8:	0800ad11 	.word	0x0800ad11
 800acfc:	0800ad21 	.word	0x0800ad21
 800ad00:	0800ad19 	.word	0x0800ad19
 800ad04:	0800ad09 	.word	0x0800ad09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ad08:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <USBH_UserProcess+0x58>)
 800ad0a:	2203      	movs	r2, #3
 800ad0c:	701a      	strb	r2, [r3, #0]
  break;
 800ad0e:	e008      	b.n	800ad22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <USBH_UserProcess+0x58>)
 800ad12:	2202      	movs	r2, #2
 800ad14:	701a      	strb	r2, [r3, #0]
  break;
 800ad16:	e004      	b.n	800ad22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <USBH_UserProcess+0x58>)
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	701a      	strb	r2, [r3, #0]
  break;
 800ad1e:	e000      	b.n	800ad22 <USBH_UserProcess+0x4a>

  default:
  break;
 800ad20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ad22:	bf00      	nop
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	200000e4 	.word	0x200000e4

0800ad34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08a      	sub	sp, #40	; 0x28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad3c:	f107 0314 	add.w	r3, r7, #20
 800ad40:	2200      	movs	r2, #0
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	605a      	str	r2, [r3, #4]
 800ad46:	609a      	str	r2, [r3, #8]
 800ad48:	60da      	str	r2, [r3, #12]
 800ad4a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad54:	d147      	bne.n	800ade6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad56:	2300      	movs	r3, #0
 800ad58:	613b      	str	r3, [r7, #16]
 800ad5a:	4b25      	ldr	r3, [pc, #148]	; (800adf0 <HAL_HCD_MspInit+0xbc>)
 800ad5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad5e:	4a24      	ldr	r2, [pc, #144]	; (800adf0 <HAL_HCD_MspInit+0xbc>)
 800ad60:	f043 0301 	orr.w	r3, r3, #1
 800ad64:	6313      	str	r3, [r2, #48]	; 0x30
 800ad66:	4b22      	ldr	r3, [pc, #136]	; (800adf0 <HAL_HCD_MspInit+0xbc>)
 800ad68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	613b      	str	r3, [r7, #16]
 800ad70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ad72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad80:	f107 0314 	add.w	r3, r7, #20
 800ad84:	4619      	mov	r1, r3
 800ad86:	481b      	ldr	r0, [pc, #108]	; (800adf4 <HAL_HCD_MspInit+0xc0>)
 800ad88:	f7f7 f82e 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad92:	2302      	movs	r3, #2
 800ad94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad9e:	230a      	movs	r3, #10
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ada2:	f107 0314 	add.w	r3, r7, #20
 800ada6:	4619      	mov	r1, r3
 800ada8:	4812      	ldr	r0, [pc, #72]	; (800adf4 <HAL_HCD_MspInit+0xc0>)
 800adaa:	f7f7 f81d 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800adae:	4b10      	ldr	r3, [pc, #64]	; (800adf0 <HAL_HCD_MspInit+0xbc>)
 800adb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb2:	4a0f      	ldr	r2, [pc, #60]	; (800adf0 <HAL_HCD_MspInit+0xbc>)
 800adb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb8:	6353      	str	r3, [r2, #52]	; 0x34
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	4b0c      	ldr	r3, [pc, #48]	; (800adf0 <HAL_HCD_MspInit+0xbc>)
 800adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc2:	4a0b      	ldr	r2, [pc, #44]	; (800adf0 <HAL_HCD_MspInit+0xbc>)
 800adc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800adc8:	6453      	str	r3, [r2, #68]	; 0x44
 800adca:	4b09      	ldr	r3, [pc, #36]	; (800adf0 <HAL_HCD_MspInit+0xbc>)
 800adcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800add6:	2200      	movs	r2, #0
 800add8:	2100      	movs	r1, #0
 800adda:	2043      	movs	r0, #67	; 0x43
 800addc:	f7f6 ffcd 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ade0:	2043      	movs	r0, #67	; 0x43
 800ade2:	f7f6 ffe6 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ade6:	bf00      	nop
 800ade8:	3728      	adds	r7, #40	; 0x28
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	40023800 	.word	0x40023800
 800adf4:	40020000 	.word	0x40020000

0800adf8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fc fcd7 	bl	80077ba <USBH_LL_IncTimer>
}
 800ae0c:	bf00      	nop
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fc fd0f 	bl	8007846 <USBH_LL_Connect>
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fc fd18 	bl	8007874 <USBH_LL_Disconnect>
}
 800ae44:	bf00      	nop
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fc fcc9 	bl	800780e <USBH_LL_PortEnabled>
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fc fcc9 	bl	800782a <USBH_LL_PortDisabled>
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d12a      	bne.n	800af08 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aeb2:	4a18      	ldr	r2, [pc, #96]	; (800af14 <USBH_LL_Init+0x74>)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a15      	ldr	r2, [pc, #84]	; (800af14 <USBH_LL_Init+0x74>)
 800aebe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aec2:	4b14      	ldr	r3, [pc, #80]	; (800af14 <USBH_LL_Init+0x74>)
 800aec4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aec8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aeca:	4b12      	ldr	r3, [pc, #72]	; (800af14 <USBH_LL_Init+0x74>)
 800aecc:	2208      	movs	r2, #8
 800aece:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aed0:	4b10      	ldr	r3, [pc, #64]	; (800af14 <USBH_LL_Init+0x74>)
 800aed2:	2201      	movs	r2, #1
 800aed4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aed6:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <USBH_LL_Init+0x74>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aedc:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <USBH_LL_Init+0x74>)
 800aede:	2202      	movs	r2, #2
 800aee0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <USBH_LL_Init+0x74>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aee8:	480a      	ldr	r0, [pc, #40]	; (800af14 <USBH_LL_Init+0x74>)
 800aeea:	f7f7 f94a 	bl	8002182 <HAL_HCD_Init>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aef4:	f7f5 feba 	bl	8000c6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aef8:	4806      	ldr	r0, [pc, #24]	; (800af14 <USBH_LL_Init+0x74>)
 800aefa:	f7f7 fd2e 	bl	800295a <HAL_HCD_GetCurrentFrame>
 800aefe:	4603      	mov	r3, r0
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7fc fc4a 	bl	800779c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	2000356c 	.word	0x2000356c

0800af18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af2e:	4618      	mov	r0, r3
 800af30:	f7f7 fc9d 	bl	800286e <HAL_HCD_Start>
 800af34:	4603      	mov	r3, r0
 800af36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 f98c 	bl	800b258 <USBH_Get_USB_Status>
 800af40:	4603      	mov	r3, r0
 800af42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af44:	7bbb      	ldrb	r3, [r7, #14]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af64:	4618      	mov	r0, r3
 800af66:	f7f7 fca5 	bl	80028b4 <HAL_HCD_Stop>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	4618      	mov	r0, r3
 800af72:	f000 f971 	bl	800b258 <USBH_Get_USB_Status>
 800af76:	4603      	mov	r3, r0
 800af78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800af8c:	2301      	movs	r3, #1
 800af8e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af96:	4618      	mov	r0, r3
 800af98:	f7f7 fced 	bl	8002976 <HAL_HCD_GetCurrentSpeed>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d00c      	beq.n	800afbc <USBH_LL_GetSpeed+0x38>
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d80d      	bhi.n	800afc2 <USBH_LL_GetSpeed+0x3e>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <USBH_LL_GetSpeed+0x2c>
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d003      	beq.n	800afb6 <USBH_LL_GetSpeed+0x32>
 800afae:	e008      	b.n	800afc2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73fb      	strb	r3, [r7, #15]
    break;
 800afb4:	e008      	b.n	800afc8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800afb6:	2301      	movs	r3, #1
 800afb8:	73fb      	strb	r3, [r7, #15]
    break;
 800afba:	e005      	b.n	800afc8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800afbc:	2302      	movs	r3, #2
 800afbe:	73fb      	strb	r3, [r7, #15]
    break;
 800afc0:	e002      	b.n	800afc8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800afc2:	2301      	movs	r3, #1
 800afc4:	73fb      	strb	r3, [r7, #15]
    break;
 800afc6:	bf00      	nop
  }
  return  speed;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afda:	2300      	movs	r3, #0
 800afdc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800afe8:	4618      	mov	r0, r3
 800afea:	f7f7 fc80 	bl	80028ee <HAL_HCD_ResetPort>
 800afee:	4603      	mov	r3, r0
 800aff0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 f92f 	bl	800b258 <USBH_Get_USB_Status>
 800affa:	4603      	mov	r3, r0
 800affc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800affe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b01a:	78fa      	ldrb	r2, [r7, #3]
 800b01c:	4611      	mov	r1, r2
 800b01e:	4618      	mov	r0, r3
 800b020:	f7f7 fc87 	bl	8002932 <HAL_HCD_HC_GetXferCount>
 800b024:	4603      	mov	r3, r0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b02e:	b590      	push	{r4, r7, lr}
 800b030:	b089      	sub	sp, #36	; 0x24
 800b032:	af04      	add	r7, sp, #16
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	4608      	mov	r0, r1
 800b038:	4611      	mov	r1, r2
 800b03a:	461a      	mov	r2, r3
 800b03c:	4603      	mov	r3, r0
 800b03e:	70fb      	strb	r3, [r7, #3]
 800b040:	460b      	mov	r3, r1
 800b042:	70bb      	strb	r3, [r7, #2]
 800b044:	4613      	mov	r3, r2
 800b046:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b056:	787c      	ldrb	r4, [r7, #1]
 800b058:	78ba      	ldrb	r2, [r7, #2]
 800b05a:	78f9      	ldrb	r1, [r7, #3]
 800b05c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b05e:	9302      	str	r3, [sp, #8]
 800b060:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	4623      	mov	r3, r4
 800b06e:	f7f7 f8ea 	bl	8002246 <HAL_HCD_HC_Init>
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 f8ed 	bl	800b258 <USBH_Get_USB_Status>
 800b07e:	4603      	mov	r3, r0
 800b080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b082:	7bbb      	ldrb	r3, [r7, #14]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd90      	pop	{r4, r7, pc}

0800b08c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0a6:	78fa      	ldrb	r2, [r7, #3]
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7f7 f95a 	bl	8002364 <HAL_HCD_HC_Halt>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 f8ce 	bl	800b258 <USBH_Get_USB_Status>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b0ca:	b590      	push	{r4, r7, lr}
 800b0cc:	b089      	sub	sp, #36	; 0x24
 800b0ce:	af04      	add	r7, sp, #16
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	4608      	mov	r0, r1
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4603      	mov	r3, r0
 800b0da:	70fb      	strb	r3, [r7, #3]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70bb      	strb	r3, [r7, #2]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b0f2:	787c      	ldrb	r4, [r7, #1]
 800b0f4:	78ba      	ldrb	r2, [r7, #2]
 800b0f6:	78f9      	ldrb	r1, [r7, #3]
 800b0f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b0fc:	9303      	str	r3, [sp, #12]
 800b0fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b100:	9302      	str	r3, [sp, #8]
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	4623      	mov	r3, r4
 800b10e:	f7f7 f94d 	bl	80023ac <HAL_HCD_HC_SubmitRequest>
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 f89d 	bl	800b258 <USBH_Get_USB_Status>
 800b11e:	4603      	mov	r3, r0
 800b120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b122:	7bbb      	ldrb	r3, [r7, #14]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd90      	pop	{r4, r7, pc}

0800b12c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	4611      	mov	r1, r2
 800b142:	4618      	mov	r0, r3
 800b144:	f7f7 fbe1 	bl	800290a <HAL_HCD_HC_GetURBState>
 800b148:	4603      	mov	r3, r0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	460b      	mov	r3, r1
 800b15c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b164:	2b01      	cmp	r3, #1
 800b166:	d103      	bne.n	800b170 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f8a0 	bl	800b2b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b170:	20c8      	movs	r0, #200	; 0xc8
 800b172:	f7f6 fd03 	bl	8001b7c <HAL_Delay>
  return USBH_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
 800b18c:	4613      	mov	r3, r2
 800b18e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b196:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b198:	78fb      	ldrb	r3, [r7, #3]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	212c      	movs	r1, #44	; 0x2c
 800b19e:	fb01 f303 	mul.w	r3, r1, r3
 800b1a2:	4413      	add	r3, r2
 800b1a4:	333b      	adds	r3, #59	; 0x3b
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d009      	beq.n	800b1c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b1ac:	78fb      	ldrb	r3, [r7, #3]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	212c      	movs	r1, #44	; 0x2c
 800b1b2:	fb01 f303 	mul.w	r3, r1, r3
 800b1b6:	4413      	add	r3, r2
 800b1b8:	3354      	adds	r3, #84	; 0x54
 800b1ba:	78ba      	ldrb	r2, [r7, #2]
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	e008      	b.n	800b1d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b1c0:	78fb      	ldrb	r3, [r7, #3]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	212c      	movs	r1, #44	; 0x2c
 800b1c6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ca:	4413      	add	r3, r2
 800b1cc:	3355      	adds	r3, #85	; 0x55
 800b1ce:	78ba      	ldrb	r2, [r7, #2]
 800b1d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1f6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	212c      	movs	r1, #44	; 0x2c
 800b1fe:	fb01 f303 	mul.w	r3, r1, r3
 800b202:	4413      	add	r3, r2
 800b204:	333b      	adds	r3, #59	; 0x3b
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d009      	beq.n	800b220 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	212c      	movs	r1, #44	; 0x2c
 800b212:	fb01 f303 	mul.w	r3, r1, r3
 800b216:	4413      	add	r3, r2
 800b218:	3354      	adds	r3, #84	; 0x54
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	73fb      	strb	r3, [r7, #15]
 800b21e:	e008      	b.n	800b232 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b220:	78fb      	ldrb	r3, [r7, #3]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	212c      	movs	r1, #44	; 0x2c
 800b226:	fb01 f303 	mul.w	r3, r1, r3
 800b22a:	4413      	add	r3, r2
 800b22c:	3355      	adds	r3, #85	; 0x55
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b232:	7bfb      	ldrb	r3, [r7, #15]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7f6 fc97 	bl	8001b7c <HAL_Delay>
}
 800b24e:	bf00      	nop
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
	...

0800b258 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d817      	bhi.n	800b29c <USBH_Get_USB_Status+0x44>
 800b26c:	a201      	add	r2, pc, #4	; (adr r2, 800b274 <USBH_Get_USB_Status+0x1c>)
 800b26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b272:	bf00      	nop
 800b274:	0800b285 	.word	0x0800b285
 800b278:	0800b28b 	.word	0x0800b28b
 800b27c:	0800b291 	.word	0x0800b291
 800b280:	0800b297 	.word	0x0800b297
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73fb      	strb	r3, [r7, #15]
    break;
 800b288:	e00b      	b.n	800b2a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b28a:	2302      	movs	r3, #2
 800b28c:	73fb      	strb	r3, [r7, #15]
    break;
 800b28e:	e008      	b.n	800b2a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b290:	2301      	movs	r3, #1
 800b292:	73fb      	strb	r3, [r7, #15]
    break;
 800b294:	e005      	b.n	800b2a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b296:	2302      	movs	r3, #2
 800b298:	73fb      	strb	r3, [r7, #15]
    break;
 800b29a:	e002      	b.n	800b2a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b29c:	2302      	movs	r3, #2
 800b29e:	73fb      	strb	r3, [r7, #15]
    break;
 800b2a0:	bf00      	nop
  }
  return usb_status;
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b2be:	79fb      	ldrb	r3, [r7, #7]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d102      	bne.n	800b2ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	73fb      	strb	r3, [r7, #15]
 800b2c8:	e001      	b.n	800b2ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	2101      	movs	r1, #1
 800b2d4:	4803      	ldr	r0, [pc, #12]	; (800b2e4 <MX_DriverVbusFS+0x34>)
 800b2d6:	f7f6 ff3b 	bl	8002150 <HAL_GPIO_WritePin>
}
 800b2da:	bf00      	nop
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	40020800 	.word	0x40020800

0800b2e8 <__errno>:
 800b2e8:	4b01      	ldr	r3, [pc, #4]	; (800b2f0 <__errno+0x8>)
 800b2ea:	6818      	ldr	r0, [r3, #0]
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	2000002c 	.word	0x2000002c

0800b2f4 <__libc_init_array>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	4d0d      	ldr	r5, [pc, #52]	; (800b32c <__libc_init_array+0x38>)
 800b2f8:	4c0d      	ldr	r4, [pc, #52]	; (800b330 <__libc_init_array+0x3c>)
 800b2fa:	1b64      	subs	r4, r4, r5
 800b2fc:	10a4      	asrs	r4, r4, #2
 800b2fe:	2600      	movs	r6, #0
 800b300:	42a6      	cmp	r6, r4
 800b302:	d109      	bne.n	800b318 <__libc_init_array+0x24>
 800b304:	4d0b      	ldr	r5, [pc, #44]	; (800b334 <__libc_init_array+0x40>)
 800b306:	4c0c      	ldr	r4, [pc, #48]	; (800b338 <__libc_init_array+0x44>)
 800b308:	f001 f922 	bl	800c550 <_init>
 800b30c:	1b64      	subs	r4, r4, r5
 800b30e:	10a4      	asrs	r4, r4, #2
 800b310:	2600      	movs	r6, #0
 800b312:	42a6      	cmp	r6, r4
 800b314:	d105      	bne.n	800b322 <__libc_init_array+0x2e>
 800b316:	bd70      	pop	{r4, r5, r6, pc}
 800b318:	f855 3b04 	ldr.w	r3, [r5], #4
 800b31c:	4798      	blx	r3
 800b31e:	3601      	adds	r6, #1
 800b320:	e7ee      	b.n	800b300 <__libc_init_array+0xc>
 800b322:	f855 3b04 	ldr.w	r3, [r5], #4
 800b326:	4798      	blx	r3
 800b328:	3601      	adds	r6, #1
 800b32a:	e7f2      	b.n	800b312 <__libc_init_array+0x1e>
 800b32c:	0800d160 	.word	0x0800d160
 800b330:	0800d160 	.word	0x0800d160
 800b334:	0800d160 	.word	0x0800d160
 800b338:	0800d164 	.word	0x0800d164

0800b33c <malloc>:
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <malloc+0xc>)
 800b33e:	4601      	mov	r1, r0
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	f000 b871 	b.w	800b428 <_malloc_r>
 800b346:	bf00      	nop
 800b348:	2000002c 	.word	0x2000002c

0800b34c <free>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <free+0xc>)
 800b34e:	4601      	mov	r1, r0
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f000 b819 	b.w	800b388 <_free_r>
 800b356:	bf00      	nop
 800b358:	2000002c 	.word	0x2000002c

0800b35c <memcpy>:
 800b35c:	440a      	add	r2, r1
 800b35e:	4291      	cmp	r1, r2
 800b360:	f100 33ff 	add.w	r3, r0, #4294967295
 800b364:	d100      	bne.n	800b368 <memcpy+0xc>
 800b366:	4770      	bx	lr
 800b368:	b510      	push	{r4, lr}
 800b36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b36e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b372:	4291      	cmp	r1, r2
 800b374:	d1f9      	bne.n	800b36a <memcpy+0xe>
 800b376:	bd10      	pop	{r4, pc}

0800b378 <memset>:
 800b378:	4402      	add	r2, r0
 800b37a:	4603      	mov	r3, r0
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d100      	bne.n	800b382 <memset+0xa>
 800b380:	4770      	bx	lr
 800b382:	f803 1b01 	strb.w	r1, [r3], #1
 800b386:	e7f9      	b.n	800b37c <memset+0x4>

0800b388 <_free_r>:
 800b388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b38a:	2900      	cmp	r1, #0
 800b38c:	d048      	beq.n	800b420 <_free_r+0x98>
 800b38e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b392:	9001      	str	r0, [sp, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	f1a1 0404 	sub.w	r4, r1, #4
 800b39a:	bfb8      	it	lt
 800b39c:	18e4      	addlt	r4, r4, r3
 800b39e:	f000 f8fb 	bl	800b598 <__malloc_lock>
 800b3a2:	4a20      	ldr	r2, [pc, #128]	; (800b424 <_free_r+0x9c>)
 800b3a4:	9801      	ldr	r0, [sp, #4]
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	4615      	mov	r5, r2
 800b3aa:	b933      	cbnz	r3, 800b3ba <_free_r+0x32>
 800b3ac:	6063      	str	r3, [r4, #4]
 800b3ae:	6014      	str	r4, [r2, #0]
 800b3b0:	b003      	add	sp, #12
 800b3b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3b6:	f000 b8f5 	b.w	800b5a4 <__malloc_unlock>
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	d90b      	bls.n	800b3d6 <_free_r+0x4e>
 800b3be:	6821      	ldr	r1, [r4, #0]
 800b3c0:	1862      	adds	r2, r4, r1
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	bf04      	itt	eq
 800b3c6:	681a      	ldreq	r2, [r3, #0]
 800b3c8:	685b      	ldreq	r3, [r3, #4]
 800b3ca:	6063      	str	r3, [r4, #4]
 800b3cc:	bf04      	itt	eq
 800b3ce:	1852      	addeq	r2, r2, r1
 800b3d0:	6022      	streq	r2, [r4, #0]
 800b3d2:	602c      	str	r4, [r5, #0]
 800b3d4:	e7ec      	b.n	800b3b0 <_free_r+0x28>
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	b10b      	cbz	r3, 800b3e0 <_free_r+0x58>
 800b3dc:	42a3      	cmp	r3, r4
 800b3de:	d9fa      	bls.n	800b3d6 <_free_r+0x4e>
 800b3e0:	6811      	ldr	r1, [r2, #0]
 800b3e2:	1855      	adds	r5, r2, r1
 800b3e4:	42a5      	cmp	r5, r4
 800b3e6:	d10b      	bne.n	800b400 <_free_r+0x78>
 800b3e8:	6824      	ldr	r4, [r4, #0]
 800b3ea:	4421      	add	r1, r4
 800b3ec:	1854      	adds	r4, r2, r1
 800b3ee:	42a3      	cmp	r3, r4
 800b3f0:	6011      	str	r1, [r2, #0]
 800b3f2:	d1dd      	bne.n	800b3b0 <_free_r+0x28>
 800b3f4:	681c      	ldr	r4, [r3, #0]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	6053      	str	r3, [r2, #4]
 800b3fa:	4421      	add	r1, r4
 800b3fc:	6011      	str	r1, [r2, #0]
 800b3fe:	e7d7      	b.n	800b3b0 <_free_r+0x28>
 800b400:	d902      	bls.n	800b408 <_free_r+0x80>
 800b402:	230c      	movs	r3, #12
 800b404:	6003      	str	r3, [r0, #0]
 800b406:	e7d3      	b.n	800b3b0 <_free_r+0x28>
 800b408:	6825      	ldr	r5, [r4, #0]
 800b40a:	1961      	adds	r1, r4, r5
 800b40c:	428b      	cmp	r3, r1
 800b40e:	bf04      	itt	eq
 800b410:	6819      	ldreq	r1, [r3, #0]
 800b412:	685b      	ldreq	r3, [r3, #4]
 800b414:	6063      	str	r3, [r4, #4]
 800b416:	bf04      	itt	eq
 800b418:	1949      	addeq	r1, r1, r5
 800b41a:	6021      	streq	r1, [r4, #0]
 800b41c:	6054      	str	r4, [r2, #4]
 800b41e:	e7c7      	b.n	800b3b0 <_free_r+0x28>
 800b420:	b003      	add	sp, #12
 800b422:	bd30      	pop	{r4, r5, pc}
 800b424:	200000e8 	.word	0x200000e8

0800b428 <_malloc_r>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	1ccd      	adds	r5, r1, #3
 800b42c:	f025 0503 	bic.w	r5, r5, #3
 800b430:	3508      	adds	r5, #8
 800b432:	2d0c      	cmp	r5, #12
 800b434:	bf38      	it	cc
 800b436:	250c      	movcc	r5, #12
 800b438:	2d00      	cmp	r5, #0
 800b43a:	4606      	mov	r6, r0
 800b43c:	db01      	blt.n	800b442 <_malloc_r+0x1a>
 800b43e:	42a9      	cmp	r1, r5
 800b440:	d903      	bls.n	800b44a <_malloc_r+0x22>
 800b442:	230c      	movs	r3, #12
 800b444:	6033      	str	r3, [r6, #0]
 800b446:	2000      	movs	r0, #0
 800b448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b44a:	f000 f8a5 	bl	800b598 <__malloc_lock>
 800b44e:	4921      	ldr	r1, [pc, #132]	; (800b4d4 <_malloc_r+0xac>)
 800b450:	680a      	ldr	r2, [r1, #0]
 800b452:	4614      	mov	r4, r2
 800b454:	b99c      	cbnz	r4, 800b47e <_malloc_r+0x56>
 800b456:	4f20      	ldr	r7, [pc, #128]	; (800b4d8 <_malloc_r+0xb0>)
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	b923      	cbnz	r3, 800b466 <_malloc_r+0x3e>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4630      	mov	r0, r6
 800b460:	f000 f83c 	bl	800b4dc <_sbrk_r>
 800b464:	6038      	str	r0, [r7, #0]
 800b466:	4629      	mov	r1, r5
 800b468:	4630      	mov	r0, r6
 800b46a:	f000 f837 	bl	800b4dc <_sbrk_r>
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	d123      	bne.n	800b4ba <_malloc_r+0x92>
 800b472:	230c      	movs	r3, #12
 800b474:	6033      	str	r3, [r6, #0]
 800b476:	4630      	mov	r0, r6
 800b478:	f000 f894 	bl	800b5a4 <__malloc_unlock>
 800b47c:	e7e3      	b.n	800b446 <_malloc_r+0x1e>
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	1b5b      	subs	r3, r3, r5
 800b482:	d417      	bmi.n	800b4b4 <_malloc_r+0x8c>
 800b484:	2b0b      	cmp	r3, #11
 800b486:	d903      	bls.n	800b490 <_malloc_r+0x68>
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	441c      	add	r4, r3
 800b48c:	6025      	str	r5, [r4, #0]
 800b48e:	e004      	b.n	800b49a <_malloc_r+0x72>
 800b490:	6863      	ldr	r3, [r4, #4]
 800b492:	42a2      	cmp	r2, r4
 800b494:	bf0c      	ite	eq
 800b496:	600b      	streq	r3, [r1, #0]
 800b498:	6053      	strne	r3, [r2, #4]
 800b49a:	4630      	mov	r0, r6
 800b49c:	f000 f882 	bl	800b5a4 <__malloc_unlock>
 800b4a0:	f104 000b 	add.w	r0, r4, #11
 800b4a4:	1d23      	adds	r3, r4, #4
 800b4a6:	f020 0007 	bic.w	r0, r0, #7
 800b4aa:	1ac2      	subs	r2, r0, r3
 800b4ac:	d0cc      	beq.n	800b448 <_malloc_r+0x20>
 800b4ae:	1a1b      	subs	r3, r3, r0
 800b4b0:	50a3      	str	r3, [r4, r2]
 800b4b2:	e7c9      	b.n	800b448 <_malloc_r+0x20>
 800b4b4:	4622      	mov	r2, r4
 800b4b6:	6864      	ldr	r4, [r4, #4]
 800b4b8:	e7cc      	b.n	800b454 <_malloc_r+0x2c>
 800b4ba:	1cc4      	adds	r4, r0, #3
 800b4bc:	f024 0403 	bic.w	r4, r4, #3
 800b4c0:	42a0      	cmp	r0, r4
 800b4c2:	d0e3      	beq.n	800b48c <_malloc_r+0x64>
 800b4c4:	1a21      	subs	r1, r4, r0
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f000 f808 	bl	800b4dc <_sbrk_r>
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	d1dd      	bne.n	800b48c <_malloc_r+0x64>
 800b4d0:	e7cf      	b.n	800b472 <_malloc_r+0x4a>
 800b4d2:	bf00      	nop
 800b4d4:	200000e8 	.word	0x200000e8
 800b4d8:	200000ec 	.word	0x200000ec

0800b4dc <_sbrk_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4d06      	ldr	r5, [pc, #24]	; (800b4f8 <_sbrk_r+0x1c>)
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	602b      	str	r3, [r5, #0]
 800b4e8:	f7f6 fa64 	bl	80019b4 <_sbrk>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_sbrk_r+0x1a>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_sbrk_r+0x1a>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	20003870 	.word	0x20003870

0800b4fc <siprintf>:
 800b4fc:	b40e      	push	{r1, r2, r3}
 800b4fe:	b500      	push	{lr}
 800b500:	b09c      	sub	sp, #112	; 0x70
 800b502:	ab1d      	add	r3, sp, #116	; 0x74
 800b504:	9002      	str	r0, [sp, #8]
 800b506:	9006      	str	r0, [sp, #24]
 800b508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b50c:	4809      	ldr	r0, [pc, #36]	; (800b534 <siprintf+0x38>)
 800b50e:	9107      	str	r1, [sp, #28]
 800b510:	9104      	str	r1, [sp, #16]
 800b512:	4909      	ldr	r1, [pc, #36]	; (800b538 <siprintf+0x3c>)
 800b514:	f853 2b04 	ldr.w	r2, [r3], #4
 800b518:	9105      	str	r1, [sp, #20]
 800b51a:	6800      	ldr	r0, [r0, #0]
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	a902      	add	r1, sp, #8
 800b520:	f000 f8a2 	bl	800b668 <_svfiprintf_r>
 800b524:	9b02      	ldr	r3, [sp, #8]
 800b526:	2200      	movs	r2, #0
 800b528:	701a      	strb	r2, [r3, #0]
 800b52a:	b01c      	add	sp, #112	; 0x70
 800b52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b530:	b003      	add	sp, #12
 800b532:	4770      	bx	lr
 800b534:	2000002c 	.word	0x2000002c
 800b538:	ffff0208 	.word	0xffff0208

0800b53c <siscanf>:
 800b53c:	b40e      	push	{r1, r2, r3}
 800b53e:	b510      	push	{r4, lr}
 800b540:	b09f      	sub	sp, #124	; 0x7c
 800b542:	ac21      	add	r4, sp, #132	; 0x84
 800b544:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b548:	f854 2b04 	ldr.w	r2, [r4], #4
 800b54c:	9201      	str	r2, [sp, #4]
 800b54e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b552:	9004      	str	r0, [sp, #16]
 800b554:	9008      	str	r0, [sp, #32]
 800b556:	f7f4 fe3b 	bl	80001d0 <strlen>
 800b55a:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <siscanf+0x50>)
 800b55c:	9005      	str	r0, [sp, #20]
 800b55e:	9009      	str	r0, [sp, #36]	; 0x24
 800b560:	930d      	str	r3, [sp, #52]	; 0x34
 800b562:	480b      	ldr	r0, [pc, #44]	; (800b590 <siscanf+0x54>)
 800b564:	9a01      	ldr	r2, [sp, #4]
 800b566:	6800      	ldr	r0, [r0, #0]
 800b568:	9403      	str	r4, [sp, #12]
 800b56a:	2300      	movs	r3, #0
 800b56c:	9311      	str	r3, [sp, #68]	; 0x44
 800b56e:	9316      	str	r3, [sp, #88]	; 0x58
 800b570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b574:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b578:	a904      	add	r1, sp, #16
 800b57a:	4623      	mov	r3, r4
 800b57c:	f000 f9ce 	bl	800b91c <__ssvfiscanf_r>
 800b580:	b01f      	add	sp, #124	; 0x7c
 800b582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b586:	b003      	add	sp, #12
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	0800b595 	.word	0x0800b595
 800b590:	2000002c 	.word	0x2000002c

0800b594 <__seofread>:
 800b594:	2000      	movs	r0, #0
 800b596:	4770      	bx	lr

0800b598 <__malloc_lock>:
 800b598:	4801      	ldr	r0, [pc, #4]	; (800b5a0 <__malloc_lock+0x8>)
 800b59a:	f000 bf8f 	b.w	800c4bc <__retarget_lock_acquire_recursive>
 800b59e:	bf00      	nop
 800b5a0:	20003878 	.word	0x20003878

0800b5a4 <__malloc_unlock>:
 800b5a4:	4801      	ldr	r0, [pc, #4]	; (800b5ac <__malloc_unlock+0x8>)
 800b5a6:	f000 bf8a 	b.w	800c4be <__retarget_lock_release_recursive>
 800b5aa:	bf00      	nop
 800b5ac:	20003878 	.word	0x20003878

0800b5b0 <__ssputs_r>:
 800b5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b4:	688e      	ldr	r6, [r1, #8]
 800b5b6:	429e      	cmp	r6, r3
 800b5b8:	4682      	mov	sl, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	4690      	mov	r8, r2
 800b5be:	461f      	mov	r7, r3
 800b5c0:	d838      	bhi.n	800b634 <__ssputs_r+0x84>
 800b5c2:	898a      	ldrh	r2, [r1, #12]
 800b5c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5c8:	d032      	beq.n	800b630 <__ssputs_r+0x80>
 800b5ca:	6825      	ldr	r5, [r4, #0]
 800b5cc:	6909      	ldr	r1, [r1, #16]
 800b5ce:	eba5 0901 	sub.w	r9, r5, r1
 800b5d2:	6965      	ldr	r5, [r4, #20]
 800b5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5dc:	3301      	adds	r3, #1
 800b5de:	444b      	add	r3, r9
 800b5e0:	106d      	asrs	r5, r5, #1
 800b5e2:	429d      	cmp	r5, r3
 800b5e4:	bf38      	it	cc
 800b5e6:	461d      	movcc	r5, r3
 800b5e8:	0553      	lsls	r3, r2, #21
 800b5ea:	d531      	bpl.n	800b650 <__ssputs_r+0xa0>
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	f7ff ff1b 	bl	800b428 <_malloc_r>
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	b950      	cbnz	r0, 800b60c <__ssputs_r+0x5c>
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	f8ca 3000 	str.w	r3, [sl]
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	f04f 30ff 	mov.w	r0, #4294967295
 800b608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60c:	6921      	ldr	r1, [r4, #16]
 800b60e:	464a      	mov	r2, r9
 800b610:	f7ff fea4 	bl	800b35c <memcpy>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	6126      	str	r6, [r4, #16]
 800b622:	6165      	str	r5, [r4, #20]
 800b624:	444e      	add	r6, r9
 800b626:	eba5 0509 	sub.w	r5, r5, r9
 800b62a:	6026      	str	r6, [r4, #0]
 800b62c:	60a5      	str	r5, [r4, #8]
 800b62e:	463e      	mov	r6, r7
 800b630:	42be      	cmp	r6, r7
 800b632:	d900      	bls.n	800b636 <__ssputs_r+0x86>
 800b634:	463e      	mov	r6, r7
 800b636:	4632      	mov	r2, r6
 800b638:	6820      	ldr	r0, [r4, #0]
 800b63a:	4641      	mov	r1, r8
 800b63c:	f000 ff40 	bl	800c4c0 <memmove>
 800b640:	68a3      	ldr	r3, [r4, #8]
 800b642:	6822      	ldr	r2, [r4, #0]
 800b644:	1b9b      	subs	r3, r3, r6
 800b646:	4432      	add	r2, r6
 800b648:	60a3      	str	r3, [r4, #8]
 800b64a:	6022      	str	r2, [r4, #0]
 800b64c:	2000      	movs	r0, #0
 800b64e:	e7db      	b.n	800b608 <__ssputs_r+0x58>
 800b650:	462a      	mov	r2, r5
 800b652:	f000 ff4f 	bl	800c4f4 <_realloc_r>
 800b656:	4606      	mov	r6, r0
 800b658:	2800      	cmp	r0, #0
 800b65a:	d1e1      	bne.n	800b620 <__ssputs_r+0x70>
 800b65c:	6921      	ldr	r1, [r4, #16]
 800b65e:	4650      	mov	r0, sl
 800b660:	f7ff fe92 	bl	800b388 <_free_r>
 800b664:	e7c7      	b.n	800b5f6 <__ssputs_r+0x46>
	...

0800b668 <_svfiprintf_r>:
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	4698      	mov	r8, r3
 800b66e:	898b      	ldrh	r3, [r1, #12]
 800b670:	061b      	lsls	r3, r3, #24
 800b672:	b09d      	sub	sp, #116	; 0x74
 800b674:	4607      	mov	r7, r0
 800b676:	460d      	mov	r5, r1
 800b678:	4614      	mov	r4, r2
 800b67a:	d50e      	bpl.n	800b69a <_svfiprintf_r+0x32>
 800b67c:	690b      	ldr	r3, [r1, #16]
 800b67e:	b963      	cbnz	r3, 800b69a <_svfiprintf_r+0x32>
 800b680:	2140      	movs	r1, #64	; 0x40
 800b682:	f7ff fed1 	bl	800b428 <_malloc_r>
 800b686:	6028      	str	r0, [r5, #0]
 800b688:	6128      	str	r0, [r5, #16]
 800b68a:	b920      	cbnz	r0, 800b696 <_svfiprintf_r+0x2e>
 800b68c:	230c      	movs	r3, #12
 800b68e:	603b      	str	r3, [r7, #0]
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	e0d1      	b.n	800b83a <_svfiprintf_r+0x1d2>
 800b696:	2340      	movs	r3, #64	; 0x40
 800b698:	616b      	str	r3, [r5, #20]
 800b69a:	2300      	movs	r3, #0
 800b69c:	9309      	str	r3, [sp, #36]	; 0x24
 800b69e:	2320      	movs	r3, #32
 800b6a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6a8:	2330      	movs	r3, #48	; 0x30
 800b6aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b854 <_svfiprintf_r+0x1ec>
 800b6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6b2:	f04f 0901 	mov.w	r9, #1
 800b6b6:	4623      	mov	r3, r4
 800b6b8:	469a      	mov	sl, r3
 800b6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6be:	b10a      	cbz	r2, 800b6c4 <_svfiprintf_r+0x5c>
 800b6c0:	2a25      	cmp	r2, #37	; 0x25
 800b6c2:	d1f9      	bne.n	800b6b8 <_svfiprintf_r+0x50>
 800b6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c8:	d00b      	beq.n	800b6e2 <_svfiprintf_r+0x7a>
 800b6ca:	465b      	mov	r3, fp
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	f7ff ff6d 	bl	800b5b0 <__ssputs_r>
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	f000 80aa 	beq.w	800b830 <_svfiprintf_r+0x1c8>
 800b6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6de:	445a      	add	r2, fp
 800b6e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 80a2 	beq.w	800b830 <_svfiprintf_r+0x1c8>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f6:	f10a 0a01 	add.w	sl, sl, #1
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	9307      	str	r3, [sp, #28]
 800b6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b702:	931a      	str	r3, [sp, #104]	; 0x68
 800b704:	4654      	mov	r4, sl
 800b706:	2205      	movs	r2, #5
 800b708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70c:	4851      	ldr	r0, [pc, #324]	; (800b854 <_svfiprintf_r+0x1ec>)
 800b70e:	f7f4 fd67 	bl	80001e0 <memchr>
 800b712:	9a04      	ldr	r2, [sp, #16]
 800b714:	b9d8      	cbnz	r0, 800b74e <_svfiprintf_r+0xe6>
 800b716:	06d0      	lsls	r0, r2, #27
 800b718:	bf44      	itt	mi
 800b71a:	2320      	movmi	r3, #32
 800b71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b720:	0711      	lsls	r1, r2, #28
 800b722:	bf44      	itt	mi
 800b724:	232b      	movmi	r3, #43	; 0x2b
 800b726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b72a:	f89a 3000 	ldrb.w	r3, [sl]
 800b72e:	2b2a      	cmp	r3, #42	; 0x2a
 800b730:	d015      	beq.n	800b75e <_svfiprintf_r+0xf6>
 800b732:	9a07      	ldr	r2, [sp, #28]
 800b734:	4654      	mov	r4, sl
 800b736:	2000      	movs	r0, #0
 800b738:	f04f 0c0a 	mov.w	ip, #10
 800b73c:	4621      	mov	r1, r4
 800b73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b742:	3b30      	subs	r3, #48	; 0x30
 800b744:	2b09      	cmp	r3, #9
 800b746:	d94e      	bls.n	800b7e6 <_svfiprintf_r+0x17e>
 800b748:	b1b0      	cbz	r0, 800b778 <_svfiprintf_r+0x110>
 800b74a:	9207      	str	r2, [sp, #28]
 800b74c:	e014      	b.n	800b778 <_svfiprintf_r+0x110>
 800b74e:	eba0 0308 	sub.w	r3, r0, r8
 800b752:	fa09 f303 	lsl.w	r3, r9, r3
 800b756:	4313      	orrs	r3, r2
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	46a2      	mov	sl, r4
 800b75c:	e7d2      	b.n	800b704 <_svfiprintf_r+0x9c>
 800b75e:	9b03      	ldr	r3, [sp, #12]
 800b760:	1d19      	adds	r1, r3, #4
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	9103      	str	r1, [sp, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	bfbb      	ittet	lt
 800b76a:	425b      	neglt	r3, r3
 800b76c:	f042 0202 	orrlt.w	r2, r2, #2
 800b770:	9307      	strge	r3, [sp, #28]
 800b772:	9307      	strlt	r3, [sp, #28]
 800b774:	bfb8      	it	lt
 800b776:	9204      	strlt	r2, [sp, #16]
 800b778:	7823      	ldrb	r3, [r4, #0]
 800b77a:	2b2e      	cmp	r3, #46	; 0x2e
 800b77c:	d10c      	bne.n	800b798 <_svfiprintf_r+0x130>
 800b77e:	7863      	ldrb	r3, [r4, #1]
 800b780:	2b2a      	cmp	r3, #42	; 0x2a
 800b782:	d135      	bne.n	800b7f0 <_svfiprintf_r+0x188>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	1d1a      	adds	r2, r3, #4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	9203      	str	r2, [sp, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfb8      	it	lt
 800b790:	f04f 33ff 	movlt.w	r3, #4294967295
 800b794:	3402      	adds	r4, #2
 800b796:	9305      	str	r3, [sp, #20]
 800b798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b864 <_svfiprintf_r+0x1fc>
 800b79c:	7821      	ldrb	r1, [r4, #0]
 800b79e:	2203      	movs	r2, #3
 800b7a0:	4650      	mov	r0, sl
 800b7a2:	f7f4 fd1d 	bl	80001e0 <memchr>
 800b7a6:	b140      	cbz	r0, 800b7ba <_svfiprintf_r+0x152>
 800b7a8:	2340      	movs	r3, #64	; 0x40
 800b7aa:	eba0 000a 	sub.w	r0, r0, sl
 800b7ae:	fa03 f000 	lsl.w	r0, r3, r0
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	4303      	orrs	r3, r0
 800b7b6:	3401      	adds	r4, #1
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7be:	4826      	ldr	r0, [pc, #152]	; (800b858 <_svfiprintf_r+0x1f0>)
 800b7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7c4:	2206      	movs	r2, #6
 800b7c6:	f7f4 fd0b 	bl	80001e0 <memchr>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d038      	beq.n	800b840 <_svfiprintf_r+0x1d8>
 800b7ce:	4b23      	ldr	r3, [pc, #140]	; (800b85c <_svfiprintf_r+0x1f4>)
 800b7d0:	bb1b      	cbnz	r3, 800b81a <_svfiprintf_r+0x1b2>
 800b7d2:	9b03      	ldr	r3, [sp, #12]
 800b7d4:	3307      	adds	r3, #7
 800b7d6:	f023 0307 	bic.w	r3, r3, #7
 800b7da:	3308      	adds	r3, #8
 800b7dc:	9303      	str	r3, [sp, #12]
 800b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e0:	4433      	add	r3, r6
 800b7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e4:	e767      	b.n	800b6b6 <_svfiprintf_r+0x4e>
 800b7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	2001      	movs	r0, #1
 800b7ee:	e7a5      	b.n	800b73c <_svfiprintf_r+0xd4>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	3401      	adds	r4, #1
 800b7f4:	9305      	str	r3, [sp, #20]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	f04f 0c0a 	mov.w	ip, #10
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b802:	3a30      	subs	r2, #48	; 0x30
 800b804:	2a09      	cmp	r2, #9
 800b806:	d903      	bls.n	800b810 <_svfiprintf_r+0x1a8>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d0c5      	beq.n	800b798 <_svfiprintf_r+0x130>
 800b80c:	9105      	str	r1, [sp, #20]
 800b80e:	e7c3      	b.n	800b798 <_svfiprintf_r+0x130>
 800b810:	fb0c 2101 	mla	r1, ip, r1, r2
 800b814:	4604      	mov	r4, r0
 800b816:	2301      	movs	r3, #1
 800b818:	e7f0      	b.n	800b7fc <_svfiprintf_r+0x194>
 800b81a:	ab03      	add	r3, sp, #12
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	462a      	mov	r2, r5
 800b820:	4b0f      	ldr	r3, [pc, #60]	; (800b860 <_svfiprintf_r+0x1f8>)
 800b822:	a904      	add	r1, sp, #16
 800b824:	4638      	mov	r0, r7
 800b826:	f3af 8000 	nop.w
 800b82a:	1c42      	adds	r2, r0, #1
 800b82c:	4606      	mov	r6, r0
 800b82e:	d1d6      	bne.n	800b7de <_svfiprintf_r+0x176>
 800b830:	89ab      	ldrh	r3, [r5, #12]
 800b832:	065b      	lsls	r3, r3, #25
 800b834:	f53f af2c 	bmi.w	800b690 <_svfiprintf_r+0x28>
 800b838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b83a:	b01d      	add	sp, #116	; 0x74
 800b83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b840:	ab03      	add	r3, sp, #12
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	462a      	mov	r2, r5
 800b846:	4b06      	ldr	r3, [pc, #24]	; (800b860 <_svfiprintf_r+0x1f8>)
 800b848:	a904      	add	r1, sp, #16
 800b84a:	4638      	mov	r0, r7
 800b84c:	f000 fa4c 	bl	800bce8 <_printf_i>
 800b850:	e7eb      	b.n	800b82a <_svfiprintf_r+0x1c2>
 800b852:	bf00      	nop
 800b854:	0800cfa8 	.word	0x0800cfa8
 800b858:	0800cfb2 	.word	0x0800cfb2
 800b85c:	00000000 	.word	0x00000000
 800b860:	0800b5b1 	.word	0x0800b5b1
 800b864:	0800cfae 	.word	0x0800cfae

0800b868 <_sungetc_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	1c4b      	adds	r3, r1, #1
 800b86c:	4614      	mov	r4, r2
 800b86e:	d103      	bne.n	800b878 <_sungetc_r+0x10>
 800b870:	f04f 35ff 	mov.w	r5, #4294967295
 800b874:	4628      	mov	r0, r5
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	8993      	ldrh	r3, [r2, #12]
 800b87a:	f023 0320 	bic.w	r3, r3, #32
 800b87e:	8193      	strh	r3, [r2, #12]
 800b880:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b882:	6852      	ldr	r2, [r2, #4]
 800b884:	b2cd      	uxtb	r5, r1
 800b886:	b18b      	cbz	r3, 800b8ac <_sungetc_r+0x44>
 800b888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b88a:	4293      	cmp	r3, r2
 800b88c:	dd08      	ble.n	800b8a0 <_sungetc_r+0x38>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	1e5a      	subs	r2, r3, #1
 800b892:	6022      	str	r2, [r4, #0]
 800b894:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b898:	6863      	ldr	r3, [r4, #4]
 800b89a:	3301      	adds	r3, #1
 800b89c:	6063      	str	r3, [r4, #4]
 800b89e:	e7e9      	b.n	800b874 <_sungetc_r+0xc>
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	f000 fdd1 	bl	800c448 <__submore>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d0f1      	beq.n	800b88e <_sungetc_r+0x26>
 800b8aa:	e7e1      	b.n	800b870 <_sungetc_r+0x8>
 800b8ac:	6921      	ldr	r1, [r4, #16]
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	b151      	cbz	r1, 800b8c8 <_sungetc_r+0x60>
 800b8b2:	4299      	cmp	r1, r3
 800b8b4:	d208      	bcs.n	800b8c8 <_sungetc_r+0x60>
 800b8b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b8ba:	42a9      	cmp	r1, r5
 800b8bc:	d104      	bne.n	800b8c8 <_sungetc_r+0x60>
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	3201      	adds	r2, #1
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	6062      	str	r2, [r4, #4]
 800b8c6:	e7d5      	b.n	800b874 <_sungetc_r+0xc>
 800b8c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8d0:	6363      	str	r3, [r4, #52]	; 0x34
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8d6:	4623      	mov	r3, r4
 800b8d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7dc      	b.n	800b89c <_sungetc_r+0x34>

0800b8e2 <__ssrefill_r>:
 800b8e2:	b510      	push	{r4, lr}
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b8e8:	b169      	cbz	r1, 800b906 <__ssrefill_r+0x24>
 800b8ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8ee:	4299      	cmp	r1, r3
 800b8f0:	d001      	beq.n	800b8f6 <__ssrefill_r+0x14>
 800b8f2:	f7ff fd49 	bl	800b388 <_free_r>
 800b8f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b8fe:	b113      	cbz	r3, 800b906 <__ssrefill_r+0x24>
 800b900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b902:	6023      	str	r3, [r4, #0]
 800b904:	bd10      	pop	{r4, pc}
 800b906:	6923      	ldr	r3, [r4, #16]
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	2300      	movs	r3, #0
 800b90c:	6063      	str	r3, [r4, #4]
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	f043 0320 	orr.w	r3, r3, #32
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	f04f 30ff 	mov.w	r0, #4294967295
 800b91a:	e7f3      	b.n	800b904 <__ssrefill_r+0x22>

0800b91c <__ssvfiscanf_r>:
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	460c      	mov	r4, r1
 800b922:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b926:	2100      	movs	r1, #0
 800b928:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b92c:	49b2      	ldr	r1, [pc, #712]	; (800bbf8 <__ssvfiscanf_r+0x2dc>)
 800b92e:	91a0      	str	r1, [sp, #640]	; 0x280
 800b930:	f10d 0804 	add.w	r8, sp, #4
 800b934:	49b1      	ldr	r1, [pc, #708]	; (800bbfc <__ssvfiscanf_r+0x2e0>)
 800b936:	4fb2      	ldr	r7, [pc, #712]	; (800bc00 <__ssvfiscanf_r+0x2e4>)
 800b938:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bc04 <__ssvfiscanf_r+0x2e8>
 800b93c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b940:	4606      	mov	r6, r0
 800b942:	91a1      	str	r1, [sp, #644]	; 0x284
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	f892 a000 	ldrb.w	sl, [r2]
 800b94a:	f1ba 0f00 	cmp.w	sl, #0
 800b94e:	f000 8151 	beq.w	800bbf4 <__ssvfiscanf_r+0x2d8>
 800b952:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b956:	f013 0308 	ands.w	r3, r3, #8
 800b95a:	f102 0501 	add.w	r5, r2, #1
 800b95e:	d019      	beq.n	800b994 <__ssvfiscanf_r+0x78>
 800b960:	6863      	ldr	r3, [r4, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	dd0f      	ble.n	800b986 <__ssvfiscanf_r+0x6a>
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	781a      	ldrb	r2, [r3, #0]
 800b96a:	5cba      	ldrb	r2, [r7, r2]
 800b96c:	0712      	lsls	r2, r2, #28
 800b96e:	d401      	bmi.n	800b974 <__ssvfiscanf_r+0x58>
 800b970:	462a      	mov	r2, r5
 800b972:	e7e8      	b.n	800b946 <__ssvfiscanf_r+0x2a>
 800b974:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b976:	3201      	adds	r2, #1
 800b978:	9245      	str	r2, [sp, #276]	; 0x114
 800b97a:	6862      	ldr	r2, [r4, #4]
 800b97c:	3301      	adds	r3, #1
 800b97e:	3a01      	subs	r2, #1
 800b980:	6062      	str	r2, [r4, #4]
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	e7ec      	b.n	800b960 <__ssvfiscanf_r+0x44>
 800b986:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b988:	4621      	mov	r1, r4
 800b98a:	4630      	mov	r0, r6
 800b98c:	4798      	blx	r3
 800b98e:	2800      	cmp	r0, #0
 800b990:	d0e9      	beq.n	800b966 <__ssvfiscanf_r+0x4a>
 800b992:	e7ed      	b.n	800b970 <__ssvfiscanf_r+0x54>
 800b994:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b998:	f040 8083 	bne.w	800baa2 <__ssvfiscanf_r+0x186>
 800b99c:	9341      	str	r3, [sp, #260]	; 0x104
 800b99e:	9343      	str	r3, [sp, #268]	; 0x10c
 800b9a0:	7853      	ldrb	r3, [r2, #1]
 800b9a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a4:	bf02      	ittt	eq
 800b9a6:	2310      	moveq	r3, #16
 800b9a8:	1c95      	addeq	r5, r2, #2
 800b9aa:	9341      	streq	r3, [sp, #260]	; 0x104
 800b9ac:	220a      	movs	r2, #10
 800b9ae:	46ab      	mov	fp, r5
 800b9b0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b9b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b9b8:	2b09      	cmp	r3, #9
 800b9ba:	d91d      	bls.n	800b9f8 <__ssvfiscanf_r+0xdc>
 800b9bc:	4891      	ldr	r0, [pc, #580]	; (800bc04 <__ssvfiscanf_r+0x2e8>)
 800b9be:	2203      	movs	r2, #3
 800b9c0:	f7f4 fc0e 	bl	80001e0 <memchr>
 800b9c4:	b140      	cbz	r0, 800b9d8 <__ssvfiscanf_r+0xbc>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	eba0 0009 	sub.w	r0, r0, r9
 800b9cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b9d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b9d2:	4318      	orrs	r0, r3
 800b9d4:	9041      	str	r0, [sp, #260]	; 0x104
 800b9d6:	465d      	mov	r5, fp
 800b9d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b9dc:	2b78      	cmp	r3, #120	; 0x78
 800b9de:	d806      	bhi.n	800b9ee <__ssvfiscanf_r+0xd2>
 800b9e0:	2b57      	cmp	r3, #87	; 0x57
 800b9e2:	d810      	bhi.n	800ba06 <__ssvfiscanf_r+0xea>
 800b9e4:	2b25      	cmp	r3, #37	; 0x25
 800b9e6:	d05c      	beq.n	800baa2 <__ssvfiscanf_r+0x186>
 800b9e8:	d856      	bhi.n	800ba98 <__ssvfiscanf_r+0x17c>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d074      	beq.n	800bad8 <__ssvfiscanf_r+0x1bc>
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	9347      	str	r3, [sp, #284]	; 0x11c
 800b9f2:	230a      	movs	r3, #10
 800b9f4:	9342      	str	r3, [sp, #264]	; 0x108
 800b9f6:	e081      	b.n	800bafc <__ssvfiscanf_r+0x1e0>
 800b9f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b9fa:	fb02 1303 	mla	r3, r2, r3, r1
 800b9fe:	3b30      	subs	r3, #48	; 0x30
 800ba00:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba02:	465d      	mov	r5, fp
 800ba04:	e7d3      	b.n	800b9ae <__ssvfiscanf_r+0x92>
 800ba06:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ba0a:	2a20      	cmp	r2, #32
 800ba0c:	d8ef      	bhi.n	800b9ee <__ssvfiscanf_r+0xd2>
 800ba0e:	a101      	add	r1, pc, #4	; (adr r1, 800ba14 <__ssvfiscanf_r+0xf8>)
 800ba10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba14:	0800bae7 	.word	0x0800bae7
 800ba18:	0800b9ef 	.word	0x0800b9ef
 800ba1c:	0800b9ef 	.word	0x0800b9ef
 800ba20:	0800bb45 	.word	0x0800bb45
 800ba24:	0800b9ef 	.word	0x0800b9ef
 800ba28:	0800b9ef 	.word	0x0800b9ef
 800ba2c:	0800b9ef 	.word	0x0800b9ef
 800ba30:	0800b9ef 	.word	0x0800b9ef
 800ba34:	0800b9ef 	.word	0x0800b9ef
 800ba38:	0800b9ef 	.word	0x0800b9ef
 800ba3c:	0800b9ef 	.word	0x0800b9ef
 800ba40:	0800bb5b 	.word	0x0800bb5b
 800ba44:	0800bb31 	.word	0x0800bb31
 800ba48:	0800ba9f 	.word	0x0800ba9f
 800ba4c:	0800ba9f 	.word	0x0800ba9f
 800ba50:	0800ba9f 	.word	0x0800ba9f
 800ba54:	0800b9ef 	.word	0x0800b9ef
 800ba58:	0800bb35 	.word	0x0800bb35
 800ba5c:	0800b9ef 	.word	0x0800b9ef
 800ba60:	0800b9ef 	.word	0x0800b9ef
 800ba64:	0800b9ef 	.word	0x0800b9ef
 800ba68:	0800b9ef 	.word	0x0800b9ef
 800ba6c:	0800bb6b 	.word	0x0800bb6b
 800ba70:	0800bb3d 	.word	0x0800bb3d
 800ba74:	0800badf 	.word	0x0800badf
 800ba78:	0800b9ef 	.word	0x0800b9ef
 800ba7c:	0800b9ef 	.word	0x0800b9ef
 800ba80:	0800bb67 	.word	0x0800bb67
 800ba84:	0800b9ef 	.word	0x0800b9ef
 800ba88:	0800bb31 	.word	0x0800bb31
 800ba8c:	0800b9ef 	.word	0x0800b9ef
 800ba90:	0800b9ef 	.word	0x0800b9ef
 800ba94:	0800bae7 	.word	0x0800bae7
 800ba98:	3b45      	subs	r3, #69	; 0x45
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d8a7      	bhi.n	800b9ee <__ssvfiscanf_r+0xd2>
 800ba9e:	2305      	movs	r3, #5
 800baa0:	e02b      	b.n	800bafa <__ssvfiscanf_r+0x1de>
 800baa2:	6863      	ldr	r3, [r4, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	dd0d      	ble.n	800bac4 <__ssvfiscanf_r+0x1a8>
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	781a      	ldrb	r2, [r3, #0]
 800baac:	4552      	cmp	r2, sl
 800baae:	f040 80a1 	bne.w	800bbf4 <__ssvfiscanf_r+0x2d8>
 800bab2:	3301      	adds	r3, #1
 800bab4:	6862      	ldr	r2, [r4, #4]
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800baba:	3a01      	subs	r2, #1
 800babc:	3301      	adds	r3, #1
 800babe:	6062      	str	r2, [r4, #4]
 800bac0:	9345      	str	r3, [sp, #276]	; 0x114
 800bac2:	e755      	b.n	800b970 <__ssvfiscanf_r+0x54>
 800bac4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bac6:	4621      	mov	r1, r4
 800bac8:	4630      	mov	r0, r6
 800baca:	4798      	blx	r3
 800bacc:	2800      	cmp	r0, #0
 800bace:	d0eb      	beq.n	800baa8 <__ssvfiscanf_r+0x18c>
 800bad0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bad2:	2800      	cmp	r0, #0
 800bad4:	f040 8084 	bne.w	800bbe0 <__ssvfiscanf_r+0x2c4>
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	e086      	b.n	800bbec <__ssvfiscanf_r+0x2d0>
 800bade:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bae0:	f042 0220 	orr.w	r2, r2, #32
 800bae4:	9241      	str	r2, [sp, #260]	; 0x104
 800bae6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baec:	9241      	str	r2, [sp, #260]	; 0x104
 800baee:	2210      	movs	r2, #16
 800baf0:	2b6f      	cmp	r3, #111	; 0x6f
 800baf2:	9242      	str	r2, [sp, #264]	; 0x108
 800baf4:	bf34      	ite	cc
 800baf6:	2303      	movcc	r3, #3
 800baf8:	2304      	movcs	r3, #4
 800bafa:	9347      	str	r3, [sp, #284]	; 0x11c
 800bafc:	6863      	ldr	r3, [r4, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	dd41      	ble.n	800bb86 <__ssvfiscanf_r+0x26a>
 800bb02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb04:	0659      	lsls	r1, r3, #25
 800bb06:	d404      	bmi.n	800bb12 <__ssvfiscanf_r+0x1f6>
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	781a      	ldrb	r2, [r3, #0]
 800bb0c:	5cba      	ldrb	r2, [r7, r2]
 800bb0e:	0712      	lsls	r2, r2, #28
 800bb10:	d440      	bmi.n	800bb94 <__ssvfiscanf_r+0x278>
 800bb12:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	dc4f      	bgt.n	800bbb8 <__ssvfiscanf_r+0x29c>
 800bb18:	466b      	mov	r3, sp
 800bb1a:	4622      	mov	r2, r4
 800bb1c:	a941      	add	r1, sp, #260	; 0x104
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f000 fa08 	bl	800bf34 <_scanf_chars>
 800bb24:	2801      	cmp	r0, #1
 800bb26:	d065      	beq.n	800bbf4 <__ssvfiscanf_r+0x2d8>
 800bb28:	2802      	cmp	r0, #2
 800bb2a:	f47f af21 	bne.w	800b970 <__ssvfiscanf_r+0x54>
 800bb2e:	e7cf      	b.n	800bad0 <__ssvfiscanf_r+0x1b4>
 800bb30:	220a      	movs	r2, #10
 800bb32:	e7dd      	b.n	800baf0 <__ssvfiscanf_r+0x1d4>
 800bb34:	2300      	movs	r3, #0
 800bb36:	9342      	str	r3, [sp, #264]	; 0x108
 800bb38:	2303      	movs	r3, #3
 800bb3a:	e7de      	b.n	800bafa <__ssvfiscanf_r+0x1de>
 800bb3c:	2308      	movs	r3, #8
 800bb3e:	9342      	str	r3, [sp, #264]	; 0x108
 800bb40:	2304      	movs	r3, #4
 800bb42:	e7da      	b.n	800bafa <__ssvfiscanf_r+0x1de>
 800bb44:	4629      	mov	r1, r5
 800bb46:	4640      	mov	r0, r8
 800bb48:	f000 fb40 	bl	800c1cc <__sccl>
 800bb4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb52:	9341      	str	r3, [sp, #260]	; 0x104
 800bb54:	4605      	mov	r5, r0
 800bb56:	2301      	movs	r3, #1
 800bb58:	e7cf      	b.n	800bafa <__ssvfiscanf_r+0x1de>
 800bb5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb60:	9341      	str	r3, [sp, #260]	; 0x104
 800bb62:	2300      	movs	r3, #0
 800bb64:	e7c9      	b.n	800bafa <__ssvfiscanf_r+0x1de>
 800bb66:	2302      	movs	r3, #2
 800bb68:	e7c7      	b.n	800bafa <__ssvfiscanf_r+0x1de>
 800bb6a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bb6c:	06c3      	lsls	r3, r0, #27
 800bb6e:	f53f aeff 	bmi.w	800b970 <__ssvfiscanf_r+0x54>
 800bb72:	9b00      	ldr	r3, [sp, #0]
 800bb74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb76:	1d19      	adds	r1, r3, #4
 800bb78:	9100      	str	r1, [sp, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	07c0      	lsls	r0, r0, #31
 800bb7e:	bf4c      	ite	mi
 800bb80:	801a      	strhmi	r2, [r3, #0]
 800bb82:	601a      	strpl	r2, [r3, #0]
 800bb84:	e6f4      	b.n	800b970 <__ssvfiscanf_r+0x54>
 800bb86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	4798      	blx	r3
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d0b7      	beq.n	800bb02 <__ssvfiscanf_r+0x1e6>
 800bb92:	e79d      	b.n	800bad0 <__ssvfiscanf_r+0x1b4>
 800bb94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb96:	3201      	adds	r2, #1
 800bb98:	9245      	str	r2, [sp, #276]	; 0x114
 800bb9a:	6862      	ldr	r2, [r4, #4]
 800bb9c:	3a01      	subs	r2, #1
 800bb9e:	2a00      	cmp	r2, #0
 800bba0:	6062      	str	r2, [r4, #4]
 800bba2:	dd02      	ble.n	800bbaa <__ssvfiscanf_r+0x28e>
 800bba4:	3301      	adds	r3, #1
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	e7ae      	b.n	800bb08 <__ssvfiscanf_r+0x1ec>
 800bbaa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bbac:	4621      	mov	r1, r4
 800bbae:	4630      	mov	r0, r6
 800bbb0:	4798      	blx	r3
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d0a8      	beq.n	800bb08 <__ssvfiscanf_r+0x1ec>
 800bbb6:	e78b      	b.n	800bad0 <__ssvfiscanf_r+0x1b4>
 800bbb8:	2b04      	cmp	r3, #4
 800bbba:	dc06      	bgt.n	800bbca <__ssvfiscanf_r+0x2ae>
 800bbbc:	466b      	mov	r3, sp
 800bbbe:	4622      	mov	r2, r4
 800bbc0:	a941      	add	r1, sp, #260	; 0x104
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f000 fa0e 	bl	800bfe4 <_scanf_i>
 800bbc8:	e7ac      	b.n	800bb24 <__ssvfiscanf_r+0x208>
 800bbca:	4b0f      	ldr	r3, [pc, #60]	; (800bc08 <__ssvfiscanf_r+0x2ec>)
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f43f aecf 	beq.w	800b970 <__ssvfiscanf_r+0x54>
 800bbd2:	466b      	mov	r3, sp
 800bbd4:	4622      	mov	r2, r4
 800bbd6:	a941      	add	r1, sp, #260	; 0x104
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f3af 8000 	nop.w
 800bbde:	e7a1      	b.n	800bb24 <__ssvfiscanf_r+0x208>
 800bbe0:	89a3      	ldrh	r3, [r4, #12]
 800bbe2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bbe6:	bf18      	it	ne
 800bbe8:	f04f 30ff 	movne.w	r0, #4294967295
 800bbec:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bbf6:	e7f9      	b.n	800bbec <__ssvfiscanf_r+0x2d0>
 800bbf8:	0800b869 	.word	0x0800b869
 800bbfc:	0800b8e3 	.word	0x0800b8e3
 800bc00:	0800cff7 	.word	0x0800cff7
 800bc04:	0800cfae 	.word	0x0800cfae
 800bc08:	00000000 	.word	0x00000000

0800bc0c <_printf_common>:
 800bc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc10:	4616      	mov	r6, r2
 800bc12:	4699      	mov	r9, r3
 800bc14:	688a      	ldr	r2, [r1, #8]
 800bc16:	690b      	ldr	r3, [r1, #16]
 800bc18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	bfb8      	it	lt
 800bc20:	4613      	movlt	r3, r2
 800bc22:	6033      	str	r3, [r6, #0]
 800bc24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc28:	4607      	mov	r7, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	b10a      	cbz	r2, 800bc32 <_printf_common+0x26>
 800bc2e:	3301      	adds	r3, #1
 800bc30:	6033      	str	r3, [r6, #0]
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	0699      	lsls	r1, r3, #26
 800bc36:	bf42      	ittt	mi
 800bc38:	6833      	ldrmi	r3, [r6, #0]
 800bc3a:	3302      	addmi	r3, #2
 800bc3c:	6033      	strmi	r3, [r6, #0]
 800bc3e:	6825      	ldr	r5, [r4, #0]
 800bc40:	f015 0506 	ands.w	r5, r5, #6
 800bc44:	d106      	bne.n	800bc54 <_printf_common+0x48>
 800bc46:	f104 0a19 	add.w	sl, r4, #25
 800bc4a:	68e3      	ldr	r3, [r4, #12]
 800bc4c:	6832      	ldr	r2, [r6, #0]
 800bc4e:	1a9b      	subs	r3, r3, r2
 800bc50:	42ab      	cmp	r3, r5
 800bc52:	dc26      	bgt.n	800bca2 <_printf_common+0x96>
 800bc54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc58:	1e13      	subs	r3, r2, #0
 800bc5a:	6822      	ldr	r2, [r4, #0]
 800bc5c:	bf18      	it	ne
 800bc5e:	2301      	movne	r3, #1
 800bc60:	0692      	lsls	r2, r2, #26
 800bc62:	d42b      	bmi.n	800bcbc <_printf_common+0xb0>
 800bc64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc68:	4649      	mov	r1, r9
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	47c0      	blx	r8
 800bc6e:	3001      	adds	r0, #1
 800bc70:	d01e      	beq.n	800bcb0 <_printf_common+0xa4>
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	68e5      	ldr	r5, [r4, #12]
 800bc76:	6832      	ldr	r2, [r6, #0]
 800bc78:	f003 0306 	and.w	r3, r3, #6
 800bc7c:	2b04      	cmp	r3, #4
 800bc7e:	bf08      	it	eq
 800bc80:	1aad      	subeq	r5, r5, r2
 800bc82:	68a3      	ldr	r3, [r4, #8]
 800bc84:	6922      	ldr	r2, [r4, #16]
 800bc86:	bf0c      	ite	eq
 800bc88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc8c:	2500      	movne	r5, #0
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	bfc4      	itt	gt
 800bc92:	1a9b      	subgt	r3, r3, r2
 800bc94:	18ed      	addgt	r5, r5, r3
 800bc96:	2600      	movs	r6, #0
 800bc98:	341a      	adds	r4, #26
 800bc9a:	42b5      	cmp	r5, r6
 800bc9c:	d11a      	bne.n	800bcd4 <_printf_common+0xc8>
 800bc9e:	2000      	movs	r0, #0
 800bca0:	e008      	b.n	800bcb4 <_printf_common+0xa8>
 800bca2:	2301      	movs	r3, #1
 800bca4:	4652      	mov	r2, sl
 800bca6:	4649      	mov	r1, r9
 800bca8:	4638      	mov	r0, r7
 800bcaa:	47c0      	blx	r8
 800bcac:	3001      	adds	r0, #1
 800bcae:	d103      	bne.n	800bcb8 <_printf_common+0xac>
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb8:	3501      	adds	r5, #1
 800bcba:	e7c6      	b.n	800bc4a <_printf_common+0x3e>
 800bcbc:	18e1      	adds	r1, r4, r3
 800bcbe:	1c5a      	adds	r2, r3, #1
 800bcc0:	2030      	movs	r0, #48	; 0x30
 800bcc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcc6:	4422      	add	r2, r4
 800bcc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcd0:	3302      	adds	r3, #2
 800bcd2:	e7c7      	b.n	800bc64 <_printf_common+0x58>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	4649      	mov	r1, r9
 800bcda:	4638      	mov	r0, r7
 800bcdc:	47c0      	blx	r8
 800bcde:	3001      	adds	r0, #1
 800bce0:	d0e6      	beq.n	800bcb0 <_printf_common+0xa4>
 800bce2:	3601      	adds	r6, #1
 800bce4:	e7d9      	b.n	800bc9a <_printf_common+0x8e>
	...

0800bce8 <_printf_i>:
 800bce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcec:	460c      	mov	r4, r1
 800bcee:	4691      	mov	r9, r2
 800bcf0:	7e27      	ldrb	r7, [r4, #24]
 800bcf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bcf4:	2f78      	cmp	r7, #120	; 0x78
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	469a      	mov	sl, r3
 800bcfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcfe:	d807      	bhi.n	800bd10 <_printf_i+0x28>
 800bd00:	2f62      	cmp	r7, #98	; 0x62
 800bd02:	d80a      	bhi.n	800bd1a <_printf_i+0x32>
 800bd04:	2f00      	cmp	r7, #0
 800bd06:	f000 80d8 	beq.w	800beba <_printf_i+0x1d2>
 800bd0a:	2f58      	cmp	r7, #88	; 0x58
 800bd0c:	f000 80a3 	beq.w	800be56 <_printf_i+0x16e>
 800bd10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd18:	e03a      	b.n	800bd90 <_printf_i+0xa8>
 800bd1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd1e:	2b15      	cmp	r3, #21
 800bd20:	d8f6      	bhi.n	800bd10 <_printf_i+0x28>
 800bd22:	a001      	add	r0, pc, #4	; (adr r0, 800bd28 <_printf_i+0x40>)
 800bd24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bd28:	0800bd81 	.word	0x0800bd81
 800bd2c:	0800bd95 	.word	0x0800bd95
 800bd30:	0800bd11 	.word	0x0800bd11
 800bd34:	0800bd11 	.word	0x0800bd11
 800bd38:	0800bd11 	.word	0x0800bd11
 800bd3c:	0800bd11 	.word	0x0800bd11
 800bd40:	0800bd95 	.word	0x0800bd95
 800bd44:	0800bd11 	.word	0x0800bd11
 800bd48:	0800bd11 	.word	0x0800bd11
 800bd4c:	0800bd11 	.word	0x0800bd11
 800bd50:	0800bd11 	.word	0x0800bd11
 800bd54:	0800bea1 	.word	0x0800bea1
 800bd58:	0800bdc5 	.word	0x0800bdc5
 800bd5c:	0800be83 	.word	0x0800be83
 800bd60:	0800bd11 	.word	0x0800bd11
 800bd64:	0800bd11 	.word	0x0800bd11
 800bd68:	0800bec3 	.word	0x0800bec3
 800bd6c:	0800bd11 	.word	0x0800bd11
 800bd70:	0800bdc5 	.word	0x0800bdc5
 800bd74:	0800bd11 	.word	0x0800bd11
 800bd78:	0800bd11 	.word	0x0800bd11
 800bd7c:	0800be8b 	.word	0x0800be8b
 800bd80:	680b      	ldr	r3, [r1, #0]
 800bd82:	1d1a      	adds	r2, r3, #4
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	600a      	str	r2, [r1, #0]
 800bd88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd90:	2301      	movs	r3, #1
 800bd92:	e0a3      	b.n	800bedc <_printf_i+0x1f4>
 800bd94:	6825      	ldr	r5, [r4, #0]
 800bd96:	6808      	ldr	r0, [r1, #0]
 800bd98:	062e      	lsls	r6, r5, #24
 800bd9a:	f100 0304 	add.w	r3, r0, #4
 800bd9e:	d50a      	bpl.n	800bdb6 <_printf_i+0xce>
 800bda0:	6805      	ldr	r5, [r0, #0]
 800bda2:	600b      	str	r3, [r1, #0]
 800bda4:	2d00      	cmp	r5, #0
 800bda6:	da03      	bge.n	800bdb0 <_printf_i+0xc8>
 800bda8:	232d      	movs	r3, #45	; 0x2d
 800bdaa:	426d      	negs	r5, r5
 800bdac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdb0:	485e      	ldr	r0, [pc, #376]	; (800bf2c <_printf_i+0x244>)
 800bdb2:	230a      	movs	r3, #10
 800bdb4:	e019      	b.n	800bdea <_printf_i+0x102>
 800bdb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bdba:	6805      	ldr	r5, [r0, #0]
 800bdbc:	600b      	str	r3, [r1, #0]
 800bdbe:	bf18      	it	ne
 800bdc0:	b22d      	sxthne	r5, r5
 800bdc2:	e7ef      	b.n	800bda4 <_printf_i+0xbc>
 800bdc4:	680b      	ldr	r3, [r1, #0]
 800bdc6:	6825      	ldr	r5, [r4, #0]
 800bdc8:	1d18      	adds	r0, r3, #4
 800bdca:	6008      	str	r0, [r1, #0]
 800bdcc:	0628      	lsls	r0, r5, #24
 800bdce:	d501      	bpl.n	800bdd4 <_printf_i+0xec>
 800bdd0:	681d      	ldr	r5, [r3, #0]
 800bdd2:	e002      	b.n	800bdda <_printf_i+0xf2>
 800bdd4:	0669      	lsls	r1, r5, #25
 800bdd6:	d5fb      	bpl.n	800bdd0 <_printf_i+0xe8>
 800bdd8:	881d      	ldrh	r5, [r3, #0]
 800bdda:	4854      	ldr	r0, [pc, #336]	; (800bf2c <_printf_i+0x244>)
 800bddc:	2f6f      	cmp	r7, #111	; 0x6f
 800bdde:	bf0c      	ite	eq
 800bde0:	2308      	moveq	r3, #8
 800bde2:	230a      	movne	r3, #10
 800bde4:	2100      	movs	r1, #0
 800bde6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdea:	6866      	ldr	r6, [r4, #4]
 800bdec:	60a6      	str	r6, [r4, #8]
 800bdee:	2e00      	cmp	r6, #0
 800bdf0:	bfa2      	ittt	ge
 800bdf2:	6821      	ldrge	r1, [r4, #0]
 800bdf4:	f021 0104 	bicge.w	r1, r1, #4
 800bdf8:	6021      	strge	r1, [r4, #0]
 800bdfa:	b90d      	cbnz	r5, 800be00 <_printf_i+0x118>
 800bdfc:	2e00      	cmp	r6, #0
 800bdfe:	d04d      	beq.n	800be9c <_printf_i+0x1b4>
 800be00:	4616      	mov	r6, r2
 800be02:	fbb5 f1f3 	udiv	r1, r5, r3
 800be06:	fb03 5711 	mls	r7, r3, r1, r5
 800be0a:	5dc7      	ldrb	r7, [r0, r7]
 800be0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be10:	462f      	mov	r7, r5
 800be12:	42bb      	cmp	r3, r7
 800be14:	460d      	mov	r5, r1
 800be16:	d9f4      	bls.n	800be02 <_printf_i+0x11a>
 800be18:	2b08      	cmp	r3, #8
 800be1a:	d10b      	bne.n	800be34 <_printf_i+0x14c>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	07df      	lsls	r7, r3, #31
 800be20:	d508      	bpl.n	800be34 <_printf_i+0x14c>
 800be22:	6923      	ldr	r3, [r4, #16]
 800be24:	6861      	ldr	r1, [r4, #4]
 800be26:	4299      	cmp	r1, r3
 800be28:	bfde      	ittt	le
 800be2a:	2330      	movle	r3, #48	; 0x30
 800be2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be34:	1b92      	subs	r2, r2, r6
 800be36:	6122      	str	r2, [r4, #16]
 800be38:	f8cd a000 	str.w	sl, [sp]
 800be3c:	464b      	mov	r3, r9
 800be3e:	aa03      	add	r2, sp, #12
 800be40:	4621      	mov	r1, r4
 800be42:	4640      	mov	r0, r8
 800be44:	f7ff fee2 	bl	800bc0c <_printf_common>
 800be48:	3001      	adds	r0, #1
 800be4a:	d14c      	bne.n	800bee6 <_printf_i+0x1fe>
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295
 800be50:	b004      	add	sp, #16
 800be52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be56:	4835      	ldr	r0, [pc, #212]	; (800bf2c <_printf_i+0x244>)
 800be58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	680e      	ldr	r6, [r1, #0]
 800be60:	061f      	lsls	r7, r3, #24
 800be62:	f856 5b04 	ldr.w	r5, [r6], #4
 800be66:	600e      	str	r6, [r1, #0]
 800be68:	d514      	bpl.n	800be94 <_printf_i+0x1ac>
 800be6a:	07d9      	lsls	r1, r3, #31
 800be6c:	bf44      	itt	mi
 800be6e:	f043 0320 	orrmi.w	r3, r3, #32
 800be72:	6023      	strmi	r3, [r4, #0]
 800be74:	b91d      	cbnz	r5, 800be7e <_printf_i+0x196>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	f023 0320 	bic.w	r3, r3, #32
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	2310      	movs	r3, #16
 800be80:	e7b0      	b.n	800bde4 <_printf_i+0xfc>
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	f043 0320 	orr.w	r3, r3, #32
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	2378      	movs	r3, #120	; 0x78
 800be8c:	4828      	ldr	r0, [pc, #160]	; (800bf30 <_printf_i+0x248>)
 800be8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be92:	e7e3      	b.n	800be5c <_printf_i+0x174>
 800be94:	065e      	lsls	r6, r3, #25
 800be96:	bf48      	it	mi
 800be98:	b2ad      	uxthmi	r5, r5
 800be9a:	e7e6      	b.n	800be6a <_printf_i+0x182>
 800be9c:	4616      	mov	r6, r2
 800be9e:	e7bb      	b.n	800be18 <_printf_i+0x130>
 800bea0:	680b      	ldr	r3, [r1, #0]
 800bea2:	6826      	ldr	r6, [r4, #0]
 800bea4:	6960      	ldr	r0, [r4, #20]
 800bea6:	1d1d      	adds	r5, r3, #4
 800bea8:	600d      	str	r5, [r1, #0]
 800beaa:	0635      	lsls	r5, r6, #24
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	d501      	bpl.n	800beb4 <_printf_i+0x1cc>
 800beb0:	6018      	str	r0, [r3, #0]
 800beb2:	e002      	b.n	800beba <_printf_i+0x1d2>
 800beb4:	0671      	lsls	r1, r6, #25
 800beb6:	d5fb      	bpl.n	800beb0 <_printf_i+0x1c8>
 800beb8:	8018      	strh	r0, [r3, #0]
 800beba:	2300      	movs	r3, #0
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	4616      	mov	r6, r2
 800bec0:	e7ba      	b.n	800be38 <_printf_i+0x150>
 800bec2:	680b      	ldr	r3, [r1, #0]
 800bec4:	1d1a      	adds	r2, r3, #4
 800bec6:	600a      	str	r2, [r1, #0]
 800bec8:	681e      	ldr	r6, [r3, #0]
 800beca:	6862      	ldr	r2, [r4, #4]
 800becc:	2100      	movs	r1, #0
 800bece:	4630      	mov	r0, r6
 800bed0:	f7f4 f986 	bl	80001e0 <memchr>
 800bed4:	b108      	cbz	r0, 800beda <_printf_i+0x1f2>
 800bed6:	1b80      	subs	r0, r0, r6
 800bed8:	6060      	str	r0, [r4, #4]
 800beda:	6863      	ldr	r3, [r4, #4]
 800bedc:	6123      	str	r3, [r4, #16]
 800bede:	2300      	movs	r3, #0
 800bee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bee4:	e7a8      	b.n	800be38 <_printf_i+0x150>
 800bee6:	6923      	ldr	r3, [r4, #16]
 800bee8:	4632      	mov	r2, r6
 800beea:	4649      	mov	r1, r9
 800beec:	4640      	mov	r0, r8
 800beee:	47d0      	blx	sl
 800bef0:	3001      	adds	r0, #1
 800bef2:	d0ab      	beq.n	800be4c <_printf_i+0x164>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	079b      	lsls	r3, r3, #30
 800bef8:	d413      	bmi.n	800bf22 <_printf_i+0x23a>
 800befa:	68e0      	ldr	r0, [r4, #12]
 800befc:	9b03      	ldr	r3, [sp, #12]
 800befe:	4298      	cmp	r0, r3
 800bf00:	bfb8      	it	lt
 800bf02:	4618      	movlt	r0, r3
 800bf04:	e7a4      	b.n	800be50 <_printf_i+0x168>
 800bf06:	2301      	movs	r3, #1
 800bf08:	4632      	mov	r2, r6
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	47d0      	blx	sl
 800bf10:	3001      	adds	r0, #1
 800bf12:	d09b      	beq.n	800be4c <_printf_i+0x164>
 800bf14:	3501      	adds	r5, #1
 800bf16:	68e3      	ldr	r3, [r4, #12]
 800bf18:	9903      	ldr	r1, [sp, #12]
 800bf1a:	1a5b      	subs	r3, r3, r1
 800bf1c:	42ab      	cmp	r3, r5
 800bf1e:	dcf2      	bgt.n	800bf06 <_printf_i+0x21e>
 800bf20:	e7eb      	b.n	800befa <_printf_i+0x212>
 800bf22:	2500      	movs	r5, #0
 800bf24:	f104 0619 	add.w	r6, r4, #25
 800bf28:	e7f5      	b.n	800bf16 <_printf_i+0x22e>
 800bf2a:	bf00      	nop
 800bf2c:	0800cfb9 	.word	0x0800cfb9
 800bf30:	0800cfca 	.word	0x0800cfca

0800bf34 <_scanf_chars>:
 800bf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf38:	4615      	mov	r5, r2
 800bf3a:	688a      	ldr	r2, [r1, #8]
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	b932      	cbnz	r2, 800bf50 <_scanf_chars+0x1c>
 800bf42:	698a      	ldr	r2, [r1, #24]
 800bf44:	2a00      	cmp	r2, #0
 800bf46:	bf0c      	ite	eq
 800bf48:	2201      	moveq	r2, #1
 800bf4a:	f04f 32ff 	movne.w	r2, #4294967295
 800bf4e:	608a      	str	r2, [r1, #8]
 800bf50:	6822      	ldr	r2, [r4, #0]
 800bf52:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bfe0 <_scanf_chars+0xac>
 800bf56:	06d1      	lsls	r1, r2, #27
 800bf58:	bf5f      	itttt	pl
 800bf5a:	681a      	ldrpl	r2, [r3, #0]
 800bf5c:	1d11      	addpl	r1, r2, #4
 800bf5e:	6019      	strpl	r1, [r3, #0]
 800bf60:	6816      	ldrpl	r6, [r2, #0]
 800bf62:	2700      	movs	r7, #0
 800bf64:	69a0      	ldr	r0, [r4, #24]
 800bf66:	b188      	cbz	r0, 800bf8c <_scanf_chars+0x58>
 800bf68:	2801      	cmp	r0, #1
 800bf6a:	d107      	bne.n	800bf7c <_scanf_chars+0x48>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	781a      	ldrb	r2, [r3, #0]
 800bf70:	6963      	ldr	r3, [r4, #20]
 800bf72:	5c9b      	ldrb	r3, [r3, r2]
 800bf74:	b953      	cbnz	r3, 800bf8c <_scanf_chars+0x58>
 800bf76:	bb27      	cbnz	r7, 800bfc2 <_scanf_chars+0x8e>
 800bf78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf7c:	2802      	cmp	r0, #2
 800bf7e:	d120      	bne.n	800bfc2 <_scanf_chars+0x8e>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bf88:	071b      	lsls	r3, r3, #28
 800bf8a:	d41a      	bmi.n	800bfc2 <_scanf_chars+0x8e>
 800bf8c:	6823      	ldr	r3, [r4, #0]
 800bf8e:	06da      	lsls	r2, r3, #27
 800bf90:	bf5e      	ittt	pl
 800bf92:	682b      	ldrpl	r3, [r5, #0]
 800bf94:	781b      	ldrbpl	r3, [r3, #0]
 800bf96:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bf9a:	682a      	ldr	r2, [r5, #0]
 800bf9c:	686b      	ldr	r3, [r5, #4]
 800bf9e:	3201      	adds	r2, #1
 800bfa0:	602a      	str	r2, [r5, #0]
 800bfa2:	68a2      	ldr	r2, [r4, #8]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	3a01      	subs	r2, #1
 800bfa8:	606b      	str	r3, [r5, #4]
 800bfaa:	3701      	adds	r7, #1
 800bfac:	60a2      	str	r2, [r4, #8]
 800bfae:	b142      	cbz	r2, 800bfc2 <_scanf_chars+0x8e>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	dcd7      	bgt.n	800bf64 <_scanf_chars+0x30>
 800bfb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfb8:	4629      	mov	r1, r5
 800bfba:	4640      	mov	r0, r8
 800bfbc:	4798      	blx	r3
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d0d0      	beq.n	800bf64 <_scanf_chars+0x30>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	f013 0310 	ands.w	r3, r3, #16
 800bfc8:	d105      	bne.n	800bfd6 <_scanf_chars+0xa2>
 800bfca:	68e2      	ldr	r2, [r4, #12]
 800bfcc:	3201      	adds	r2, #1
 800bfce:	60e2      	str	r2, [r4, #12]
 800bfd0:	69a2      	ldr	r2, [r4, #24]
 800bfd2:	b102      	cbz	r2, 800bfd6 <_scanf_chars+0xa2>
 800bfd4:	7033      	strb	r3, [r6, #0]
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	441f      	add	r7, r3
 800bfda:	6127      	str	r7, [r4, #16]
 800bfdc:	2000      	movs	r0, #0
 800bfde:	e7cb      	b.n	800bf78 <_scanf_chars+0x44>
 800bfe0:	0800cff7 	.word	0x0800cff7

0800bfe4 <_scanf_i>:
 800bfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe8:	4698      	mov	r8, r3
 800bfea:	4b74      	ldr	r3, [pc, #464]	; (800c1bc <_scanf_i+0x1d8>)
 800bfec:	460c      	mov	r4, r1
 800bfee:	4682      	mov	sl, r0
 800bff0:	4616      	mov	r6, r2
 800bff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bff6:	b087      	sub	sp, #28
 800bff8:	ab03      	add	r3, sp, #12
 800bffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bffe:	4b70      	ldr	r3, [pc, #448]	; (800c1c0 <_scanf_i+0x1dc>)
 800c000:	69a1      	ldr	r1, [r4, #24]
 800c002:	4a70      	ldr	r2, [pc, #448]	; (800c1c4 <_scanf_i+0x1e0>)
 800c004:	2903      	cmp	r1, #3
 800c006:	bf18      	it	ne
 800c008:	461a      	movne	r2, r3
 800c00a:	68a3      	ldr	r3, [r4, #8]
 800c00c:	9201      	str	r2, [sp, #4]
 800c00e:	1e5a      	subs	r2, r3, #1
 800c010:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c014:	bf88      	it	hi
 800c016:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c01a:	4627      	mov	r7, r4
 800c01c:	bf82      	ittt	hi
 800c01e:	eb03 0905 	addhi.w	r9, r3, r5
 800c022:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c026:	60a3      	strhi	r3, [r4, #8]
 800c028:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c02c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c030:	bf98      	it	ls
 800c032:	f04f 0900 	movls.w	r9, #0
 800c036:	6023      	str	r3, [r4, #0]
 800c038:	463d      	mov	r5, r7
 800c03a:	f04f 0b00 	mov.w	fp, #0
 800c03e:	6831      	ldr	r1, [r6, #0]
 800c040:	ab03      	add	r3, sp, #12
 800c042:	7809      	ldrb	r1, [r1, #0]
 800c044:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c048:	2202      	movs	r2, #2
 800c04a:	f7f4 f8c9 	bl	80001e0 <memchr>
 800c04e:	b328      	cbz	r0, 800c09c <_scanf_i+0xb8>
 800c050:	f1bb 0f01 	cmp.w	fp, #1
 800c054:	d159      	bne.n	800c10a <_scanf_i+0x126>
 800c056:	6862      	ldr	r2, [r4, #4]
 800c058:	b92a      	cbnz	r2, 800c066 <_scanf_i+0x82>
 800c05a:	6822      	ldr	r2, [r4, #0]
 800c05c:	2308      	movs	r3, #8
 800c05e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c062:	6063      	str	r3, [r4, #4]
 800c064:	6022      	str	r2, [r4, #0]
 800c066:	6822      	ldr	r2, [r4, #0]
 800c068:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c06c:	6022      	str	r2, [r4, #0]
 800c06e:	68a2      	ldr	r2, [r4, #8]
 800c070:	1e51      	subs	r1, r2, #1
 800c072:	60a1      	str	r1, [r4, #8]
 800c074:	b192      	cbz	r2, 800c09c <_scanf_i+0xb8>
 800c076:	6832      	ldr	r2, [r6, #0]
 800c078:	1c51      	adds	r1, r2, #1
 800c07a:	6031      	str	r1, [r6, #0]
 800c07c:	7812      	ldrb	r2, [r2, #0]
 800c07e:	f805 2b01 	strb.w	r2, [r5], #1
 800c082:	6872      	ldr	r2, [r6, #4]
 800c084:	3a01      	subs	r2, #1
 800c086:	2a00      	cmp	r2, #0
 800c088:	6072      	str	r2, [r6, #4]
 800c08a:	dc07      	bgt.n	800c09c <_scanf_i+0xb8>
 800c08c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c090:	4631      	mov	r1, r6
 800c092:	4650      	mov	r0, sl
 800c094:	4790      	blx	r2
 800c096:	2800      	cmp	r0, #0
 800c098:	f040 8085 	bne.w	800c1a6 <_scanf_i+0x1c2>
 800c09c:	f10b 0b01 	add.w	fp, fp, #1
 800c0a0:	f1bb 0f03 	cmp.w	fp, #3
 800c0a4:	d1cb      	bne.n	800c03e <_scanf_i+0x5a>
 800c0a6:	6863      	ldr	r3, [r4, #4]
 800c0a8:	b90b      	cbnz	r3, 800c0ae <_scanf_i+0xca>
 800c0aa:	230a      	movs	r3, #10
 800c0ac:	6063      	str	r3, [r4, #4]
 800c0ae:	6863      	ldr	r3, [r4, #4]
 800c0b0:	4945      	ldr	r1, [pc, #276]	; (800c1c8 <_scanf_i+0x1e4>)
 800c0b2:	6960      	ldr	r0, [r4, #20]
 800c0b4:	1ac9      	subs	r1, r1, r3
 800c0b6:	f000 f889 	bl	800c1cc <__sccl>
 800c0ba:	f04f 0b00 	mov.w	fp, #0
 800c0be:	68a3      	ldr	r3, [r4, #8]
 800c0c0:	6822      	ldr	r2, [r4, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d03d      	beq.n	800c142 <_scanf_i+0x15e>
 800c0c6:	6831      	ldr	r1, [r6, #0]
 800c0c8:	6960      	ldr	r0, [r4, #20]
 800c0ca:	f891 c000 	ldrb.w	ip, [r1]
 800c0ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d035      	beq.n	800c142 <_scanf_i+0x15e>
 800c0d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c0da:	d124      	bne.n	800c126 <_scanf_i+0x142>
 800c0dc:	0510      	lsls	r0, r2, #20
 800c0de:	d522      	bpl.n	800c126 <_scanf_i+0x142>
 800c0e0:	f10b 0b01 	add.w	fp, fp, #1
 800c0e4:	f1b9 0f00 	cmp.w	r9, #0
 800c0e8:	d003      	beq.n	800c0f2 <_scanf_i+0x10e>
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	f109 39ff 	add.w	r9, r9, #4294967295
 800c0f0:	60a3      	str	r3, [r4, #8]
 800c0f2:	6873      	ldr	r3, [r6, #4]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	6073      	str	r3, [r6, #4]
 800c0fa:	dd1b      	ble.n	800c134 <_scanf_i+0x150>
 800c0fc:	6833      	ldr	r3, [r6, #0]
 800c0fe:	3301      	adds	r3, #1
 800c100:	6033      	str	r3, [r6, #0]
 800c102:	68a3      	ldr	r3, [r4, #8]
 800c104:	3b01      	subs	r3, #1
 800c106:	60a3      	str	r3, [r4, #8]
 800c108:	e7d9      	b.n	800c0be <_scanf_i+0xda>
 800c10a:	f1bb 0f02 	cmp.w	fp, #2
 800c10e:	d1ae      	bne.n	800c06e <_scanf_i+0x8a>
 800c110:	6822      	ldr	r2, [r4, #0]
 800c112:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c116:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c11a:	d1bf      	bne.n	800c09c <_scanf_i+0xb8>
 800c11c:	2310      	movs	r3, #16
 800c11e:	6063      	str	r3, [r4, #4]
 800c120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c124:	e7a2      	b.n	800c06c <_scanf_i+0x88>
 800c126:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c12a:	6022      	str	r2, [r4, #0]
 800c12c:	780b      	ldrb	r3, [r1, #0]
 800c12e:	f805 3b01 	strb.w	r3, [r5], #1
 800c132:	e7de      	b.n	800c0f2 <_scanf_i+0x10e>
 800c134:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c138:	4631      	mov	r1, r6
 800c13a:	4650      	mov	r0, sl
 800c13c:	4798      	blx	r3
 800c13e:	2800      	cmp	r0, #0
 800c140:	d0df      	beq.n	800c102 <_scanf_i+0x11e>
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	05d9      	lsls	r1, r3, #23
 800c146:	d50d      	bpl.n	800c164 <_scanf_i+0x180>
 800c148:	42bd      	cmp	r5, r7
 800c14a:	d909      	bls.n	800c160 <_scanf_i+0x17c>
 800c14c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c150:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c154:	4632      	mov	r2, r6
 800c156:	4650      	mov	r0, sl
 800c158:	4798      	blx	r3
 800c15a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c15e:	464d      	mov	r5, r9
 800c160:	42bd      	cmp	r5, r7
 800c162:	d028      	beq.n	800c1b6 <_scanf_i+0x1d2>
 800c164:	6822      	ldr	r2, [r4, #0]
 800c166:	f012 0210 	ands.w	r2, r2, #16
 800c16a:	d113      	bne.n	800c194 <_scanf_i+0x1b0>
 800c16c:	702a      	strb	r2, [r5, #0]
 800c16e:	6863      	ldr	r3, [r4, #4]
 800c170:	9e01      	ldr	r6, [sp, #4]
 800c172:	4639      	mov	r1, r7
 800c174:	4650      	mov	r0, sl
 800c176:	47b0      	blx	r6
 800c178:	f8d8 3000 	ldr.w	r3, [r8]
 800c17c:	6821      	ldr	r1, [r4, #0]
 800c17e:	1d1a      	adds	r2, r3, #4
 800c180:	f8c8 2000 	str.w	r2, [r8]
 800c184:	f011 0f20 	tst.w	r1, #32
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	d00f      	beq.n	800c1ac <_scanf_i+0x1c8>
 800c18c:	6018      	str	r0, [r3, #0]
 800c18e:	68e3      	ldr	r3, [r4, #12]
 800c190:	3301      	adds	r3, #1
 800c192:	60e3      	str	r3, [r4, #12]
 800c194:	1bed      	subs	r5, r5, r7
 800c196:	44ab      	add	fp, r5
 800c198:	6925      	ldr	r5, [r4, #16]
 800c19a:	445d      	add	r5, fp
 800c19c:	6125      	str	r5, [r4, #16]
 800c19e:	2000      	movs	r0, #0
 800c1a0:	b007      	add	sp, #28
 800c1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a6:	f04f 0b00 	mov.w	fp, #0
 800c1aa:	e7ca      	b.n	800c142 <_scanf_i+0x15e>
 800c1ac:	07ca      	lsls	r2, r1, #31
 800c1ae:	bf4c      	ite	mi
 800c1b0:	8018      	strhmi	r0, [r3, #0]
 800c1b2:	6018      	strpl	r0, [r3, #0]
 800c1b4:	e7eb      	b.n	800c18e <_scanf_i+0x1aa>
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e7f2      	b.n	800c1a0 <_scanf_i+0x1bc>
 800c1ba:	bf00      	nop
 800c1bc:	0800cef8 	.word	0x0800cef8
 800c1c0:	0800c445 	.word	0x0800c445
 800c1c4:	0800c349 	.word	0x0800c349
 800c1c8:	0800cff4 	.word	0x0800cff4

0800c1cc <__sccl>:
 800c1cc:	b570      	push	{r4, r5, r6, lr}
 800c1ce:	780b      	ldrb	r3, [r1, #0]
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	2b5e      	cmp	r3, #94	; 0x5e
 800c1d4:	bf0b      	itete	eq
 800c1d6:	784b      	ldrbeq	r3, [r1, #1]
 800c1d8:	1c48      	addne	r0, r1, #1
 800c1da:	1c88      	addeq	r0, r1, #2
 800c1dc:	2200      	movne	r2, #0
 800c1de:	bf08      	it	eq
 800c1e0:	2201      	moveq	r2, #1
 800c1e2:	1e61      	subs	r1, r4, #1
 800c1e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c1e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c1ec:	42a9      	cmp	r1, r5
 800c1ee:	d1fb      	bne.n	800c1e8 <__sccl+0x1c>
 800c1f0:	b90b      	cbnz	r3, 800c1f6 <__sccl+0x2a>
 800c1f2:	3801      	subs	r0, #1
 800c1f4:	bd70      	pop	{r4, r5, r6, pc}
 800c1f6:	f082 0101 	eor.w	r1, r2, #1
 800c1fa:	54e1      	strb	r1, [r4, r3]
 800c1fc:	1c42      	adds	r2, r0, #1
 800c1fe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c202:	2d2d      	cmp	r5, #45	; 0x2d
 800c204:	f102 36ff 	add.w	r6, r2, #4294967295
 800c208:	4610      	mov	r0, r2
 800c20a:	d006      	beq.n	800c21a <__sccl+0x4e>
 800c20c:	2d5d      	cmp	r5, #93	; 0x5d
 800c20e:	d0f1      	beq.n	800c1f4 <__sccl+0x28>
 800c210:	b90d      	cbnz	r5, 800c216 <__sccl+0x4a>
 800c212:	4630      	mov	r0, r6
 800c214:	e7ee      	b.n	800c1f4 <__sccl+0x28>
 800c216:	462b      	mov	r3, r5
 800c218:	e7ef      	b.n	800c1fa <__sccl+0x2e>
 800c21a:	7816      	ldrb	r6, [r2, #0]
 800c21c:	2e5d      	cmp	r6, #93	; 0x5d
 800c21e:	d0fa      	beq.n	800c216 <__sccl+0x4a>
 800c220:	42b3      	cmp	r3, r6
 800c222:	dcf8      	bgt.n	800c216 <__sccl+0x4a>
 800c224:	4618      	mov	r0, r3
 800c226:	3001      	adds	r0, #1
 800c228:	4286      	cmp	r6, r0
 800c22a:	5421      	strb	r1, [r4, r0]
 800c22c:	dcfb      	bgt.n	800c226 <__sccl+0x5a>
 800c22e:	43d8      	mvns	r0, r3
 800c230:	4430      	add	r0, r6
 800c232:	1c5d      	adds	r5, r3, #1
 800c234:	42b3      	cmp	r3, r6
 800c236:	bfa8      	it	ge
 800c238:	2000      	movge	r0, #0
 800c23a:	182b      	adds	r3, r5, r0
 800c23c:	3202      	adds	r2, #2
 800c23e:	e7de      	b.n	800c1fe <__sccl+0x32>

0800c240 <_strtol_l.isra.0>:
 800c240:	2b01      	cmp	r3, #1
 800c242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c246:	d001      	beq.n	800c24c <_strtol_l.isra.0+0xc>
 800c248:	2b24      	cmp	r3, #36	; 0x24
 800c24a:	d906      	bls.n	800c25a <_strtol_l.isra.0+0x1a>
 800c24c:	f7ff f84c 	bl	800b2e8 <__errno>
 800c250:	2316      	movs	r3, #22
 800c252:	6003      	str	r3, [r0, #0]
 800c254:	2000      	movs	r0, #0
 800c256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25a:	4f3a      	ldr	r7, [pc, #232]	; (800c344 <_strtol_l.isra.0+0x104>)
 800c25c:	468e      	mov	lr, r1
 800c25e:	4676      	mov	r6, lr
 800c260:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c264:	5de5      	ldrb	r5, [r4, r7]
 800c266:	f015 0508 	ands.w	r5, r5, #8
 800c26a:	d1f8      	bne.n	800c25e <_strtol_l.isra.0+0x1e>
 800c26c:	2c2d      	cmp	r4, #45	; 0x2d
 800c26e:	d134      	bne.n	800c2da <_strtol_l.isra.0+0x9a>
 800c270:	f89e 4000 	ldrb.w	r4, [lr]
 800c274:	f04f 0801 	mov.w	r8, #1
 800c278:	f106 0e02 	add.w	lr, r6, #2
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d05c      	beq.n	800c33a <_strtol_l.isra.0+0xfa>
 800c280:	2b10      	cmp	r3, #16
 800c282:	d10c      	bne.n	800c29e <_strtol_l.isra.0+0x5e>
 800c284:	2c30      	cmp	r4, #48	; 0x30
 800c286:	d10a      	bne.n	800c29e <_strtol_l.isra.0+0x5e>
 800c288:	f89e 4000 	ldrb.w	r4, [lr]
 800c28c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c290:	2c58      	cmp	r4, #88	; 0x58
 800c292:	d14d      	bne.n	800c330 <_strtol_l.isra.0+0xf0>
 800c294:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c298:	2310      	movs	r3, #16
 800c29a:	f10e 0e02 	add.w	lr, lr, #2
 800c29e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c2a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c2a6:	2600      	movs	r6, #0
 800c2a8:	fbbc f9f3 	udiv	r9, ip, r3
 800c2ac:	4635      	mov	r5, r6
 800c2ae:	fb03 ca19 	mls	sl, r3, r9, ip
 800c2b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c2b6:	2f09      	cmp	r7, #9
 800c2b8:	d818      	bhi.n	800c2ec <_strtol_l.isra.0+0xac>
 800c2ba:	463c      	mov	r4, r7
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	dd24      	ble.n	800c30a <_strtol_l.isra.0+0xca>
 800c2c0:	2e00      	cmp	r6, #0
 800c2c2:	db1f      	blt.n	800c304 <_strtol_l.isra.0+0xc4>
 800c2c4:	45a9      	cmp	r9, r5
 800c2c6:	d31d      	bcc.n	800c304 <_strtol_l.isra.0+0xc4>
 800c2c8:	d101      	bne.n	800c2ce <_strtol_l.isra.0+0x8e>
 800c2ca:	45a2      	cmp	sl, r4
 800c2cc:	db1a      	blt.n	800c304 <_strtol_l.isra.0+0xc4>
 800c2ce:	fb05 4503 	mla	r5, r5, r3, r4
 800c2d2:	2601      	movs	r6, #1
 800c2d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c2d8:	e7eb      	b.n	800c2b2 <_strtol_l.isra.0+0x72>
 800c2da:	2c2b      	cmp	r4, #43	; 0x2b
 800c2dc:	bf08      	it	eq
 800c2de:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c2e2:	46a8      	mov	r8, r5
 800c2e4:	bf08      	it	eq
 800c2e6:	f106 0e02 	addeq.w	lr, r6, #2
 800c2ea:	e7c7      	b.n	800c27c <_strtol_l.isra.0+0x3c>
 800c2ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c2f0:	2f19      	cmp	r7, #25
 800c2f2:	d801      	bhi.n	800c2f8 <_strtol_l.isra.0+0xb8>
 800c2f4:	3c37      	subs	r4, #55	; 0x37
 800c2f6:	e7e1      	b.n	800c2bc <_strtol_l.isra.0+0x7c>
 800c2f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c2fc:	2f19      	cmp	r7, #25
 800c2fe:	d804      	bhi.n	800c30a <_strtol_l.isra.0+0xca>
 800c300:	3c57      	subs	r4, #87	; 0x57
 800c302:	e7db      	b.n	800c2bc <_strtol_l.isra.0+0x7c>
 800c304:	f04f 36ff 	mov.w	r6, #4294967295
 800c308:	e7e4      	b.n	800c2d4 <_strtol_l.isra.0+0x94>
 800c30a:	2e00      	cmp	r6, #0
 800c30c:	da05      	bge.n	800c31a <_strtol_l.isra.0+0xda>
 800c30e:	2322      	movs	r3, #34	; 0x22
 800c310:	6003      	str	r3, [r0, #0]
 800c312:	4665      	mov	r5, ip
 800c314:	b942      	cbnz	r2, 800c328 <_strtol_l.isra.0+0xe8>
 800c316:	4628      	mov	r0, r5
 800c318:	e79d      	b.n	800c256 <_strtol_l.isra.0+0x16>
 800c31a:	f1b8 0f00 	cmp.w	r8, #0
 800c31e:	d000      	beq.n	800c322 <_strtol_l.isra.0+0xe2>
 800c320:	426d      	negs	r5, r5
 800c322:	2a00      	cmp	r2, #0
 800c324:	d0f7      	beq.n	800c316 <_strtol_l.isra.0+0xd6>
 800c326:	b10e      	cbz	r6, 800c32c <_strtol_l.isra.0+0xec>
 800c328:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c32c:	6011      	str	r1, [r2, #0]
 800c32e:	e7f2      	b.n	800c316 <_strtol_l.isra.0+0xd6>
 800c330:	2430      	movs	r4, #48	; 0x30
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1b3      	bne.n	800c29e <_strtol_l.isra.0+0x5e>
 800c336:	2308      	movs	r3, #8
 800c338:	e7b1      	b.n	800c29e <_strtol_l.isra.0+0x5e>
 800c33a:	2c30      	cmp	r4, #48	; 0x30
 800c33c:	d0a4      	beq.n	800c288 <_strtol_l.isra.0+0x48>
 800c33e:	230a      	movs	r3, #10
 800c340:	e7ad      	b.n	800c29e <_strtol_l.isra.0+0x5e>
 800c342:	bf00      	nop
 800c344:	0800cff7 	.word	0x0800cff7

0800c348 <_strtol_r>:
 800c348:	f7ff bf7a 	b.w	800c240 <_strtol_l.isra.0>

0800c34c <_strtoul_l.isra.0>:
 800c34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c350:	4e3b      	ldr	r6, [pc, #236]	; (800c440 <_strtoul_l.isra.0+0xf4>)
 800c352:	4686      	mov	lr, r0
 800c354:	468c      	mov	ip, r1
 800c356:	4660      	mov	r0, ip
 800c358:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c35c:	5da5      	ldrb	r5, [r4, r6]
 800c35e:	f015 0508 	ands.w	r5, r5, #8
 800c362:	d1f8      	bne.n	800c356 <_strtoul_l.isra.0+0xa>
 800c364:	2c2d      	cmp	r4, #45	; 0x2d
 800c366:	d134      	bne.n	800c3d2 <_strtoul_l.isra.0+0x86>
 800c368:	f89c 4000 	ldrb.w	r4, [ip]
 800c36c:	f04f 0801 	mov.w	r8, #1
 800c370:	f100 0c02 	add.w	ip, r0, #2
 800c374:	2b00      	cmp	r3, #0
 800c376:	d05e      	beq.n	800c436 <_strtoul_l.isra.0+0xea>
 800c378:	2b10      	cmp	r3, #16
 800c37a:	d10c      	bne.n	800c396 <_strtoul_l.isra.0+0x4a>
 800c37c:	2c30      	cmp	r4, #48	; 0x30
 800c37e:	d10a      	bne.n	800c396 <_strtoul_l.isra.0+0x4a>
 800c380:	f89c 0000 	ldrb.w	r0, [ip]
 800c384:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c388:	2858      	cmp	r0, #88	; 0x58
 800c38a:	d14f      	bne.n	800c42c <_strtoul_l.isra.0+0xe0>
 800c38c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c390:	2310      	movs	r3, #16
 800c392:	f10c 0c02 	add.w	ip, ip, #2
 800c396:	f04f 37ff 	mov.w	r7, #4294967295
 800c39a:	2500      	movs	r5, #0
 800c39c:	fbb7 f7f3 	udiv	r7, r7, r3
 800c3a0:	fb03 f907 	mul.w	r9, r3, r7
 800c3a4:	ea6f 0909 	mvn.w	r9, r9
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c3ae:	2e09      	cmp	r6, #9
 800c3b0:	d818      	bhi.n	800c3e4 <_strtoul_l.isra.0+0x98>
 800c3b2:	4634      	mov	r4, r6
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	dd24      	ble.n	800c402 <_strtoul_l.isra.0+0xb6>
 800c3b8:	2d00      	cmp	r5, #0
 800c3ba:	db1f      	blt.n	800c3fc <_strtoul_l.isra.0+0xb0>
 800c3bc:	4287      	cmp	r7, r0
 800c3be:	d31d      	bcc.n	800c3fc <_strtoul_l.isra.0+0xb0>
 800c3c0:	d101      	bne.n	800c3c6 <_strtoul_l.isra.0+0x7a>
 800c3c2:	45a1      	cmp	r9, r4
 800c3c4:	db1a      	blt.n	800c3fc <_strtoul_l.isra.0+0xb0>
 800c3c6:	fb00 4003 	mla	r0, r0, r3, r4
 800c3ca:	2501      	movs	r5, #1
 800c3cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c3d0:	e7eb      	b.n	800c3aa <_strtoul_l.isra.0+0x5e>
 800c3d2:	2c2b      	cmp	r4, #43	; 0x2b
 800c3d4:	bf08      	it	eq
 800c3d6:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c3da:	46a8      	mov	r8, r5
 800c3dc:	bf08      	it	eq
 800c3de:	f100 0c02 	addeq.w	ip, r0, #2
 800c3e2:	e7c7      	b.n	800c374 <_strtoul_l.isra.0+0x28>
 800c3e4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c3e8:	2e19      	cmp	r6, #25
 800c3ea:	d801      	bhi.n	800c3f0 <_strtoul_l.isra.0+0xa4>
 800c3ec:	3c37      	subs	r4, #55	; 0x37
 800c3ee:	e7e1      	b.n	800c3b4 <_strtoul_l.isra.0+0x68>
 800c3f0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c3f4:	2e19      	cmp	r6, #25
 800c3f6:	d804      	bhi.n	800c402 <_strtoul_l.isra.0+0xb6>
 800c3f8:	3c57      	subs	r4, #87	; 0x57
 800c3fa:	e7db      	b.n	800c3b4 <_strtoul_l.isra.0+0x68>
 800c3fc:	f04f 35ff 	mov.w	r5, #4294967295
 800c400:	e7e4      	b.n	800c3cc <_strtoul_l.isra.0+0x80>
 800c402:	2d00      	cmp	r5, #0
 800c404:	da07      	bge.n	800c416 <_strtoul_l.isra.0+0xca>
 800c406:	2322      	movs	r3, #34	; 0x22
 800c408:	f8ce 3000 	str.w	r3, [lr]
 800c40c:	f04f 30ff 	mov.w	r0, #4294967295
 800c410:	b942      	cbnz	r2, 800c424 <_strtoul_l.isra.0+0xd8>
 800c412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c416:	f1b8 0f00 	cmp.w	r8, #0
 800c41a:	d000      	beq.n	800c41e <_strtoul_l.isra.0+0xd2>
 800c41c:	4240      	negs	r0, r0
 800c41e:	2a00      	cmp	r2, #0
 800c420:	d0f7      	beq.n	800c412 <_strtoul_l.isra.0+0xc6>
 800c422:	b10d      	cbz	r5, 800c428 <_strtoul_l.isra.0+0xdc>
 800c424:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c428:	6011      	str	r1, [r2, #0]
 800c42a:	e7f2      	b.n	800c412 <_strtoul_l.isra.0+0xc6>
 800c42c:	2430      	movs	r4, #48	; 0x30
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1b1      	bne.n	800c396 <_strtoul_l.isra.0+0x4a>
 800c432:	2308      	movs	r3, #8
 800c434:	e7af      	b.n	800c396 <_strtoul_l.isra.0+0x4a>
 800c436:	2c30      	cmp	r4, #48	; 0x30
 800c438:	d0a2      	beq.n	800c380 <_strtoul_l.isra.0+0x34>
 800c43a:	230a      	movs	r3, #10
 800c43c:	e7ab      	b.n	800c396 <_strtoul_l.isra.0+0x4a>
 800c43e:	bf00      	nop
 800c440:	0800cff7 	.word	0x0800cff7

0800c444 <_strtoul_r>:
 800c444:	f7ff bf82 	b.w	800c34c <_strtoul_l.isra.0>

0800c448 <__submore>:
 800c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44c:	460c      	mov	r4, r1
 800c44e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c454:	4299      	cmp	r1, r3
 800c456:	d11d      	bne.n	800c494 <__submore+0x4c>
 800c458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c45c:	f7fe ffe4 	bl	800b428 <_malloc_r>
 800c460:	b918      	cbnz	r0, 800c46a <__submore+0x22>
 800c462:	f04f 30ff 	mov.w	r0, #4294967295
 800c466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c470:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c474:	6360      	str	r0, [r4, #52]	; 0x34
 800c476:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c47a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c47e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c482:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c486:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c48a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c48e:	6020      	str	r0, [r4, #0]
 800c490:	2000      	movs	r0, #0
 800c492:	e7e8      	b.n	800c466 <__submore+0x1e>
 800c494:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c496:	0077      	lsls	r7, r6, #1
 800c498:	463a      	mov	r2, r7
 800c49a:	f000 f82b 	bl	800c4f4 <_realloc_r>
 800c49e:	4605      	mov	r5, r0
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d0de      	beq.n	800c462 <__submore+0x1a>
 800c4a4:	eb00 0806 	add.w	r8, r0, r6
 800c4a8:	4601      	mov	r1, r0
 800c4aa:	4632      	mov	r2, r6
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	f7fe ff55 	bl	800b35c <memcpy>
 800c4b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c4b6:	f8c4 8000 	str.w	r8, [r4]
 800c4ba:	e7e9      	b.n	800c490 <__submore+0x48>

0800c4bc <__retarget_lock_acquire_recursive>:
 800c4bc:	4770      	bx	lr

0800c4be <__retarget_lock_release_recursive>:
 800c4be:	4770      	bx	lr

0800c4c0 <memmove>:
 800c4c0:	4288      	cmp	r0, r1
 800c4c2:	b510      	push	{r4, lr}
 800c4c4:	eb01 0402 	add.w	r4, r1, r2
 800c4c8:	d902      	bls.n	800c4d0 <memmove+0x10>
 800c4ca:	4284      	cmp	r4, r0
 800c4cc:	4623      	mov	r3, r4
 800c4ce:	d807      	bhi.n	800c4e0 <memmove+0x20>
 800c4d0:	1e43      	subs	r3, r0, #1
 800c4d2:	42a1      	cmp	r1, r4
 800c4d4:	d008      	beq.n	800c4e8 <memmove+0x28>
 800c4d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4de:	e7f8      	b.n	800c4d2 <memmove+0x12>
 800c4e0:	4402      	add	r2, r0
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	428a      	cmp	r2, r1
 800c4e6:	d100      	bne.n	800c4ea <memmove+0x2a>
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4f2:	e7f7      	b.n	800c4e4 <memmove+0x24>

0800c4f4 <_realloc_r>:
 800c4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f6:	4607      	mov	r7, r0
 800c4f8:	4614      	mov	r4, r2
 800c4fa:	460e      	mov	r6, r1
 800c4fc:	b921      	cbnz	r1, 800c508 <_realloc_r+0x14>
 800c4fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c502:	4611      	mov	r1, r2
 800c504:	f7fe bf90 	b.w	800b428 <_malloc_r>
 800c508:	b922      	cbnz	r2, 800c514 <_realloc_r+0x20>
 800c50a:	f7fe ff3d 	bl	800b388 <_free_r>
 800c50e:	4625      	mov	r5, r4
 800c510:	4628      	mov	r0, r5
 800c512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c514:	f000 f814 	bl	800c540 <_malloc_usable_size_r>
 800c518:	42a0      	cmp	r0, r4
 800c51a:	d20f      	bcs.n	800c53c <_realloc_r+0x48>
 800c51c:	4621      	mov	r1, r4
 800c51e:	4638      	mov	r0, r7
 800c520:	f7fe ff82 	bl	800b428 <_malloc_r>
 800c524:	4605      	mov	r5, r0
 800c526:	2800      	cmp	r0, #0
 800c528:	d0f2      	beq.n	800c510 <_realloc_r+0x1c>
 800c52a:	4631      	mov	r1, r6
 800c52c:	4622      	mov	r2, r4
 800c52e:	f7fe ff15 	bl	800b35c <memcpy>
 800c532:	4631      	mov	r1, r6
 800c534:	4638      	mov	r0, r7
 800c536:	f7fe ff27 	bl	800b388 <_free_r>
 800c53a:	e7e9      	b.n	800c510 <_realloc_r+0x1c>
 800c53c:	4635      	mov	r5, r6
 800c53e:	e7e7      	b.n	800c510 <_realloc_r+0x1c>

0800c540 <_malloc_usable_size_r>:
 800c540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c544:	1f18      	subs	r0, r3, #4
 800c546:	2b00      	cmp	r3, #0
 800c548:	bfbc      	itt	lt
 800c54a:	580b      	ldrlt	r3, [r1, r0]
 800c54c:	18c0      	addlt	r0, r0, r3
 800c54e:	4770      	bx	lr

0800c550 <_init>:
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	bf00      	nop
 800c554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c556:	bc08      	pop	{r3}
 800c558:	469e      	mov	lr, r3
 800c55a:	4770      	bx	lr

0800c55c <_fini>:
 800c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55e:	bf00      	nop
 800c560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c562:	bc08      	pop	{r3}
 800c564:	469e      	mov	lr, r3
 800c566:	4770      	bx	lr
