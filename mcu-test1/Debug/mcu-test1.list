
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a77c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800a90c  0800a90c  0001a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa5c  0800aa5c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa64  0800aa64  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa64  0800aa64  0001aa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa68  0800aa68  0001aa68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800aa6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00004894  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004924  20004924  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002035e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043c4  00000000  00000000  0004041e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  000447e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf8  00000000  00000000  00045588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fab  00000000  00000000  00046180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bee  00000000  00000000  0006b12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c69b3  00000000  00000000  00080d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001476cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003958  00000000  00000000  00147720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8f4 	.word	0x0800a8f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a8f4 	.word	0x0800a8f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <UsbTest_Write>:
static void MX_GPIO_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
u_int16_t UsbTest_Write(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	//Open/Create file for Writing
	if(f_open(&myFile, "TEST.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800057c:	220a      	movs	r2, #10
 800057e:	4915      	ldr	r1, [pc, #84]	; (80005d4 <UsbTest_Write+0x5c>)
 8000580:	4815      	ldr	r0, [pc, #84]	; (80005d8 <UsbTest_Write+0x60>)
 8000582:	f008 fdab 	bl	80090dc <f_open>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <UsbTest_Write+0x18>
	{
		return 0; //error
 800058c:	2300      	movs	r3, #0
 800058e:	e01e      	b.n	80005ce <UsbTest_Write+0x56>
	}
	else
	{
		//Set text string to write to file
		sprintf(rwtext, "Hello world from Mohamed Yaqoob!");
 8000590:	4912      	ldr	r1, [pc, #72]	; (80005dc <UsbTest_Write+0x64>)
 8000592:	4813      	ldr	r0, [pc, #76]	; (80005e0 <UsbTest_Write+0x68>)
 8000594:	f009 fe48 	bl	800a228 <siprintf>
		//write to file
		res = f_write(&myFile, (uint8_t *)rwtext, strlen(rwtext), &byteswritten);
 8000598:	4811      	ldr	r0, [pc, #68]	; (80005e0 <UsbTest_Write+0x68>)
 800059a:	f7ff fe19 	bl	80001d0 <strlen>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <UsbTest_Write+0x6c>)
 80005a2:	490f      	ldr	r1, [pc, #60]	; (80005e0 <UsbTest_Write+0x68>)
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <UsbTest_Write+0x60>)
 80005a6:	f008 ff65 	bl	8009474 <f_write>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <UsbTest_Write+0x70>)
 80005b0:	701a      	strb	r2, [r3, #0]
		if((byteswritten == 0) || (res != FR_OK))
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <UsbTest_Write+0x6c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <UsbTest_Write+0x4a>
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <UsbTest_Write+0x70>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <UsbTest_Write+0x4e>
		{
			return 0; //error
 80005c2:	2300      	movs	r3, #0
 80005c4:	e003      	b.n	80005ce <UsbTest_Write+0x56>
		}
	}

	//Close file
	f_close(&myFile);
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <UsbTest_Write+0x60>)
 80005c8:	f009 f966 	bl	8009898 <f_close>
	return 1; //success
 80005cc:	2301      	movs	r3, #1
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800a90c 	.word	0x0800a90c
 80005d8:	200000f4 	.word	0x200000f4
 80005dc:	0800a918 	.word	0x0800a918
 80005e0:	2000112c 	.word	0x2000112c
 80005e4:	20001124 	.word	0x20001124
 80005e8:	200021c4 	.word	0x200021c4

080005ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f0:	f000 fa46 	bl	8000a80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f4:	f000 f890 	bl	8000718 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005f8:	f000 f8f8 	bl	80007ec <MX_GPIO_Init>
	MX_FATFS_Init();
 80005fc:	f003 ff20 	bl	8004440 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 8000600:	f009 f9d0 	bl	80099a4 <MX_USB_HOST_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000604:	f009 f9f4 	bl	80099f0 <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	483a      	ldr	r0, [pc, #232]	; (80006f8 <main+0x10c>)
 800060e:	f000 fd7b 	bl	8001108 <HAL_GPIO_WritePin>

		/* USER CODE BEGIN 3 */
		if (t % 85000 == 1) HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 8000612:	4b3a      	ldr	r3, [pc, #232]	; (80006fc <main+0x110>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <main+0x114>)
 8000618:	fba3 1302 	umull	r1, r3, r3, r2
 800061c:	0c1b      	lsrs	r3, r3, #16
 800061e:	4939      	ldr	r1, [pc, #228]	; (8000704 <main+0x118>)
 8000620:	fb01 f303 	mul.w	r3, r1, r3
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	2b01      	cmp	r3, #1
 8000628:	d104      	bne.n	8000634 <main+0x48>
 800062a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062e:	4836      	ldr	r0, [pc, #216]	; (8000708 <main+0x11c>)
 8000630:	f000 fd83 	bl	800113a <HAL_GPIO_TogglePin>

		switch(Appli_state)
 8000634:	4b35      	ldr	r3, [pc, #212]	; (800070c <main+0x120>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b03      	cmp	r3, #3
 800063a:	d853      	bhi.n	80006e4 <main+0xf8>
 800063c:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <main+0x58>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	080006e5 	.word	0x080006e5
 8000648:	080006c7 	.word	0x080006c7
 800064c:	08000655 	.word	0x08000655
 8000650:	0800067f 	.word	0x0800067f
		{
		case APPLICATION_READY:
			if(UsbTest_Write()) HAL_GPIO_TogglePin(Led4_GPIO_Port, Led4_Pin);
 8000654:	f7ff ff90 	bl	8000578 <UsbTest_Write>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d005      	beq.n	800066a <main+0x7e>
 800065e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000662:	4829      	ldr	r0, [pc, #164]	; (8000708 <main+0x11c>)
 8000664:	f000 fd69 	bl	800113a <HAL_GPIO_TogglePin>
 8000668:	e004      	b.n	8000674 <main+0x88>
			else HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 800066a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066e:	4826      	ldr	r0, [pc, #152]	; (8000708 <main+0x11c>)
 8000670:	f000 fd63 	bl	800113a <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f000 fa74 	bl	8000b64 <HAL_Delay>
			break;
 800067c:	e035      	b.n	80006ea <main+0xfe>

		case APPLICATION_IDLE:
			break;

		case APPLICATION_DISCONNECT:
			HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000684:	4820      	ldr	r0, [pc, #128]	; (8000708 <main+0x11c>)
 8000686:	f000 fd3f 	bl	8001108 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000690:	481d      	ldr	r0, [pc, #116]	; (8000708 <main+0x11c>)
 8000692:	f000 fd39 	bl	8001108 <HAL_GPIO_WritePin>
			if (t % 85000 == 1) HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <main+0x110>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <main+0x114>)
 800069c:	fba3 1302 	umull	r1, r3, r3, r2
 80006a0:	0c1b      	lsrs	r3, r3, #16
 80006a2:	4918      	ldr	r1, [pc, #96]	; (8000704 <main+0x118>)
 80006a4:	fb01 f303 	mul.w	r3, r1, r3
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d104      	bne.n	80006b8 <main+0xcc>
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <main+0x11c>)
 80006b4:	f000 fd41 	bl	800113a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006be:	4812      	ldr	r0, [pc, #72]	; (8000708 <main+0x11c>)
 80006c0:	f000 fd22 	bl	8001108 <HAL_GPIO_WritePin>
			break;
 80006c4:	e011      	b.n	80006ea <main+0xfe>

		case APPLICATION_START:
			if(f_mount(&myUsbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 80006c6:	2200      	movs	r2, #0
 80006c8:	4911      	ldr	r1, [pc, #68]	; (8000710 <main+0x124>)
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <main+0x128>)
 80006cc:	f008 fcc0 	bl	8009050 <f_mount>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d108      	bne.n	80006e8 <main+0xfc>
			{
				HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <main+0x11c>)
 80006de:	f000 fd13 	bl	8001108 <HAL_GPIO_WritePin>
			}

			break;
 80006e2:	e001      	b.n	80006e8 <main+0xfc>

		default:
			break;
 80006e4:	bf00      	nop
 80006e6:	e000      	b.n	80006ea <main+0xfe>
			break;
 80006e8:	bf00      	nop
		}
		t++;
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <main+0x110>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	4a02      	ldr	r2, [pc, #8]	; (80006fc <main+0x110>)
 80006f2:	6013      	str	r3, [r2, #0]
		MX_USB_HOST_Process();
 80006f4:	e786      	b.n	8000604 <main+0x18>
 80006f6:	bf00      	nop
 80006f8:	40020800 	.word	0x40020800
 80006fc:	200000ac 	.word	0x200000ac
 8000700:	c56106eb 	.word	0xc56106eb
 8000704:	00014c08 	.word	0x00014c08
 8000708:	40020c00 	.word	0x40020c00
 800070c:	200000e8 	.word	0x200000e8
 8000710:	200021cc 	.word	0x200021cc
 8000714:	20001190 	.word	0x20001190

08000718 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f009 fcbc 	bl	800a0a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <SystemClock_Config+0xcc>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <SystemClock_Config+0xd0>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000788:	2308      	movs	r3, #8
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800078c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000796:	2307      	movs	r3, #7
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fa56 	bl	8002c50 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x96>
	{
		Error_Handler();
 80007aa:	f000 f895 	bl	80008d8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2105      	movs	r1, #5
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fcb7 	bl	8003140 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80007d8:	f000 f87e 	bl	80008d8 <Error_Handler>
	}
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a30      	ldr	r2, [pc, #192]	; (80008cc <MX_GPIO_Init+0xe0>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a29      	ldr	r2, [pc, #164]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0xe0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_GPIO_Init+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <MX_GPIO_Init+0xe4>)
 8000878:	f000 fc46 	bl	8001108 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_GPIO_Init+0xe8>)
 8000884:	f000 fc40 	bl	8001108 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OtgPower_Pin */
	GPIO_InitStruct.Pin = OtgPower_Pin;
 8000888:	2301      	movs	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_GPIO_Init+0xe4>)
 80008a0:	f000 fa96 	bl	8000dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin */
	GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin;
 80008a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_GPIO_Init+0xe8>)
 80008be:	f000 fa87 	bl	8000dd0 <HAL_GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020c00 	.word	0x40020c00

080008d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f8d0 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <OTG_FS_IRQHandler+0x10>)
 800098e:	f000 fe59 	bl	8001644 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20004610 	.word	0x20004610

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f009 fb22 	bl	800a014 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20020000 	.word	0x20020000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	200000b0 	.word	0x200000b0
 8000a04:	20004928 	.word	0x20004928

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a56:	f7ff ffd7 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f009 fae1 	bl	800a020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fdc5 	bl	80005ec <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000a70:	0800aa6c 	.word	0x0800aa6c
  ldr r2, =_sbss
 8000a74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000a78:	20004924 	.word	0x20004924

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f94f 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff ff16 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f967 	bl	8000db6 <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f92f 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200021c8 	.word	0x200021c8

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200021c8 	.word	0x200021c8

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff29 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff3e 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff31 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa2 	bl	8000d08 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e16b      	b.n	80010c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 815a 	bne.w	80010be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d005      	beq.n	8000e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d130      	bne.n	8000e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	091b      	lsrs	r3, r3, #4
 8000e6e:	f003 0201 	and.w	r2, r3, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d017      	beq.n	8000ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d123      	bne.n	8000f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	08da      	lsrs	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3208      	adds	r2, #8
 8000ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	691a      	ldr	r2, [r3, #16]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	69b9      	ldr	r1, [r7, #24]
 8000f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0203 	and.w	r2, r3, #3
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80b4 	beq.w	80010be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b60      	ldr	r3, [pc, #384]	; (80010dc <HAL_GPIO_Init+0x30c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a5f      	ldr	r2, [pc, #380]	; (80010dc <HAL_GPIO_Init+0x30c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_GPIO_Init+0x30c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f72:	4a5b      	ldr	r2, [pc, #364]	; (80010e0 <HAL_GPIO_Init+0x310>)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a52      	ldr	r2, [pc, #328]	; (80010e4 <HAL_GPIO_Init+0x314>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d02b      	beq.n	8000ff6 <HAL_GPIO_Init+0x226>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <HAL_GPIO_Init+0x318>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d025      	beq.n	8000ff2 <HAL_GPIO_Init+0x222>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a50      	ldr	r2, [pc, #320]	; (80010ec <HAL_GPIO_Init+0x31c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01f      	beq.n	8000fee <HAL_GPIO_Init+0x21e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_GPIO_Init+0x320>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x21a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <HAL_GPIO_Init+0x324>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x216>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <HAL_GPIO_Init+0x328>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x212>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <HAL_GPIO_Init+0x32c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x20e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <HAL_GPIO_Init+0x330>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x20a>
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	e00e      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fda:	2308      	movs	r3, #8
 8000fdc:	e00c      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fde:	2306      	movs	r3, #6
 8000fe0:	e00a      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x228>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	; (80010e0 <HAL_GPIO_Init+0x310>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001016:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <HAL_GPIO_Init+0x334>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103a:	4a32      	ldr	r2, [pc, #200]	; (8001104 <HAL_GPIO_Init+0x334>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001040:	4b30      	ldr	r3, [pc, #192]	; (8001104 <HAL_GPIO_Init+0x334>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001064:	4a27      	ldr	r2, [pc, #156]	; (8001104 <HAL_GPIO_Init+0x334>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <HAL_GPIO_Init+0x334>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <HAL_GPIO_Init+0x334>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_GPIO_Init+0x334>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a12      	ldr	r2, [pc, #72]	; (8001104 <HAL_GPIO_Init+0x334>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f ae90 	bls.w	8000dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40021c00 	.word	0x40021c00
 8001104:	40013c00 	.word	0x40013c00

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113a:	b480      	push	{r7}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800114c:	887a      	ldrh	r2, [r7, #2]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4013      	ands	r3, r2
 8001152:	041a      	lsls	r2, r3, #16
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43d9      	mvns	r1, r3
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	400b      	ands	r3, r1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800116e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001170:	b08f      	sub	sp, #60	; 0x3c
 8001172:	af0a      	add	r7, sp, #40	; 0x28
 8001174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e054      	b.n	800122a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f008 fc60 	bl	8009a60 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 f9f8 	bl	80035b4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	687e      	ldr	r6, [r7, #4]
 80011cc:	466d      	mov	r5, sp
 80011ce:	f106 0410 	add.w	r4, r6, #16
 80011d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011de:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e2:	1d33      	adds	r3, r6, #4
 80011e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f002 f972 	bl	80034d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 f9ef 	bl	80035d6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	687e      	ldr	r6, [r7, #4]
 8001200:	466d      	mov	r5, sp
 8001202:	f106 0410 	add.w	r4, r6, #16
 8001206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001212:	e885 0003 	stmia.w	r5, {r0, r1}
 8001216:	1d33      	adds	r3, r6, #4
 8001218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f002 fb56 	bl	80038cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001232 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001232:	b590      	push	{r4, r7, lr}
 8001234:	b089      	sub	sp, #36	; 0x24
 8001236:	af04      	add	r7, sp, #16
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	4608      	mov	r0, r1
 800123c:	4611      	mov	r1, r2
 800123e:	461a      	mov	r2, r3
 8001240:	4603      	mov	r3, r0
 8001242:	70fb      	strb	r3, [r7, #3]
 8001244:	460b      	mov	r3, r1
 8001246:	70bb      	strb	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001252:	2b01      	cmp	r3, #1
 8001254:	d101      	bne.n	800125a <HAL_HCD_HC_Init+0x28>
 8001256:	2302      	movs	r3, #2
 8001258:	e076      	b.n	8001348 <HAL_HCD_HC_Init+0x116>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	212c      	movs	r1, #44	; 0x2c
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	4413      	add	r3, r2
 800126e:	333d      	adds	r3, #61	; 0x3d
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	212c      	movs	r1, #44	; 0x2c
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	3338      	adds	r3, #56	; 0x38
 8001282:	787a      	ldrb	r2, [r7, #1]
 8001284:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	212c      	movs	r1, #44	; 0x2c
 800128c:	fb01 f303 	mul.w	r3, r1, r3
 8001290:	4413      	add	r3, r2
 8001292:	3340      	adds	r3, #64	; 0x40
 8001294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001296:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	212c      	movs	r1, #44	; 0x2c
 800129e:	fb01 f303 	mul.w	r3, r1, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	3339      	adds	r3, #57	; 0x39
 80012a6:	78fa      	ldrb	r2, [r7, #3]
 80012a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	212c      	movs	r1, #44	; 0x2c
 80012b0:	fb01 f303 	mul.w	r3, r1, r3
 80012b4:	4413      	add	r3, r2
 80012b6:	333f      	adds	r3, #63	; 0x3f
 80012b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80012bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	78ba      	ldrb	r2, [r7, #2]
 80012c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012c6:	b2d0      	uxtb	r0, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	212c      	movs	r1, #44	; 0x2c
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	333a      	adds	r3, #58	; 0x3a
 80012d4:	4602      	mov	r2, r0
 80012d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80012d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da09      	bge.n	80012f4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	212c      	movs	r1, #44	; 0x2c
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	333b      	adds	r3, #59	; 0x3b
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e008      	b.n	8001306 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	212c      	movs	r1, #44	; 0x2c
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	4413      	add	r3, r2
 8001300:	333b      	adds	r3, #59	; 0x3b
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	212c      	movs	r1, #44	; 0x2c
 800130c:	fb01 f303 	mul.w	r3, r1, r3
 8001310:	4413      	add	r3, r2
 8001312:	333c      	adds	r3, #60	; 0x3c
 8001314:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001318:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	787c      	ldrb	r4, [r7, #1]
 8001320:	78ba      	ldrb	r2, [r7, #2]
 8001322:	78f9      	ldrb	r1, [r7, #3]
 8001324:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	4623      	mov	r3, r4
 8001336:	f002 fc43 	bl	8003bc0 <USB_HC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}

08001350 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_HCD_HC_Halt+0x1e>
 800136a:	2302      	movs	r3, #2
 800136c:	e00f      	b.n	800138e <HAL_HCD_HC_Halt+0x3e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	78fa      	ldrb	r2, [r7, #3]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fe7f 	bl	8004082 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	70fb      	strb	r3, [r7, #3]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70bb      	strb	r3, [r7, #2]
 80013ae:	4613      	mov	r3, r2
 80013b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	212c      	movs	r1, #44	; 0x2c
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	4413      	add	r3, r2
 80013be:	333b      	adds	r3, #59	; 0x3b
 80013c0:	78ba      	ldrb	r2, [r7, #2]
 80013c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	212c      	movs	r1, #44	; 0x2c
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	333f      	adds	r3, #63	; 0x3f
 80013d2:	787a      	ldrb	r2, [r7, #1]
 80013d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80013d6:	7c3b      	ldrb	r3, [r7, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d112      	bne.n	8001402 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	212c      	movs	r1, #44	; 0x2c
 80013e2:	fb01 f303 	mul.w	r3, r1, r3
 80013e6:	4413      	add	r3, r2
 80013e8:	3342      	adds	r3, #66	; 0x42
 80013ea:	2203      	movs	r2, #3
 80013ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	212c      	movs	r1, #44	; 0x2c
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	333d      	adds	r3, #61	; 0x3d
 80013fc:	7f3a      	ldrb	r2, [r7, #28]
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e008      	b.n	8001414 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	212c      	movs	r1, #44	; 0x2c
 8001408:	fb01 f303 	mul.w	r3, r1, r3
 800140c:	4413      	add	r3, r2
 800140e:	3342      	adds	r3, #66	; 0x42
 8001410:	2202      	movs	r2, #2
 8001412:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b03      	cmp	r3, #3
 8001418:	f200 80c6 	bhi.w	80015a8 <HAL_HCD_HC_SubmitRequest+0x210>
 800141c:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	08001435 	.word	0x08001435
 8001428:	08001595 	.word	0x08001595
 800142c:	08001499 	.word	0x08001499
 8001430:	08001517 	.word	0x08001517
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001434:	7c3b      	ldrb	r3, [r7, #16]
 8001436:	2b01      	cmp	r3, #1
 8001438:	f040 80b8 	bne.w	80015ac <HAL_HCD_HC_SubmitRequest+0x214>
 800143c:	78bb      	ldrb	r3, [r7, #2]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 80b4 	bne.w	80015ac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001444:	8b3b      	ldrh	r3, [r7, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d108      	bne.n	800145c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	212c      	movs	r1, #44	; 0x2c
 8001450:	fb01 f303 	mul.w	r3, r1, r3
 8001454:	4413      	add	r3, r2
 8001456:	3355      	adds	r3, #85	; 0x55
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	212c      	movs	r1, #44	; 0x2c
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	4413      	add	r3, r2
 8001468:	3355      	adds	r3, #85	; 0x55
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d109      	bne.n	8001484 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	212c      	movs	r1, #44	; 0x2c
 8001476:	fb01 f303 	mul.w	r3, r1, r3
 800147a:	4413      	add	r3, r2
 800147c:	3342      	adds	r3, #66	; 0x42
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001482:	e093      	b.n	80015ac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	212c      	movs	r1, #44	; 0x2c
 800148a:	fb01 f303 	mul.w	r3, r1, r3
 800148e:	4413      	add	r3, r2
 8001490:	3342      	adds	r3, #66	; 0x42
 8001492:	2202      	movs	r2, #2
 8001494:	701a      	strb	r2, [r3, #0]
      break;
 8001496:	e089      	b.n	80015ac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001498:	78bb      	ldrb	r3, [r7, #2]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d11d      	bne.n	80014da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	212c      	movs	r1, #44	; 0x2c
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	3355      	adds	r3, #85	; 0x55
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	212c      	movs	r1, #44	; 0x2c
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	3342      	adds	r3, #66	; 0x42
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80014c4:	e073      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	212c      	movs	r1, #44	; 0x2c
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	3342      	adds	r3, #66	; 0x42
 80014d4:	2202      	movs	r2, #2
 80014d6:	701a      	strb	r2, [r3, #0]
      break;
 80014d8:	e069      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	212c      	movs	r1, #44	; 0x2c
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	3354      	adds	r3, #84	; 0x54
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	212c      	movs	r1, #44	; 0x2c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	3342      	adds	r3, #66	; 0x42
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
      break;
 8001500:	e055      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	212c      	movs	r1, #44	; 0x2c
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	3342      	adds	r3, #66	; 0x42
 8001510:	2202      	movs	r2, #2
 8001512:	701a      	strb	r2, [r3, #0]
      break;
 8001514:	e04b      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11d      	bne.n	8001558 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3355      	adds	r3, #85	; 0x55
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	212c      	movs	r1, #44	; 0x2c
 8001536:	fb01 f303 	mul.w	r3, r1, r3
 800153a:	4413      	add	r3, r2
 800153c:	3342      	adds	r3, #66	; 0x42
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001542:	e034      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	212c      	movs	r1, #44	; 0x2c
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	3342      	adds	r3, #66	; 0x42
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]
      break;
 8001556:	e02a      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	212c      	movs	r1, #44	; 0x2c
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	4413      	add	r3, r2
 8001564:	3354      	adds	r3, #84	; 0x54
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	212c      	movs	r1, #44	; 0x2c
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	4413      	add	r3, r2
 8001578:	3342      	adds	r3, #66	; 0x42
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
      break;
 800157e:	e016      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	212c      	movs	r1, #44	; 0x2c
 8001586:	fb01 f303 	mul.w	r3, r1, r3
 800158a:	4413      	add	r3, r2
 800158c:	3342      	adds	r3, #66	; 0x42
 800158e:	2202      	movs	r2, #2
 8001590:	701a      	strb	r2, [r3, #0]
      break;
 8001592:	e00c      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	212c      	movs	r1, #44	; 0x2c
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	3342      	adds	r3, #66	; 0x42
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
      break;
 80015a6:	e002      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80015a8:	bf00      	nop
 80015aa:	e000      	b.n	80015ae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80015ac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	3344      	adds	r3, #68	; 0x44
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	8b3a      	ldrh	r2, [r7, #24]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	202c      	movs	r0, #44	; 0x2c
 80015c8:	fb00 f303 	mul.w	r3, r0, r3
 80015cc:	440b      	add	r3, r1
 80015ce:	334c      	adds	r3, #76	; 0x4c
 80015d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	212c      	movs	r1, #44	; 0x2c
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	3360      	adds	r3, #96	; 0x60
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	212c      	movs	r1, #44	; 0x2c
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	3350      	adds	r3, #80	; 0x50
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	3339      	adds	r3, #57	; 0x39
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	212c      	movs	r1, #44	; 0x2c
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	4413      	add	r3, r2
 8001614:	3361      	adds	r3, #97	; 0x61
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	222c      	movs	r2, #44	; 0x2c
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	3338      	adds	r3, #56	; 0x38
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	18d1      	adds	r1, r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	f002 fbd2 	bl	8003ddc <USB_HC_StartXfer>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop

08001644 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f002 f8f5 	bl	800384a <USB_GetMode>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	f040 80f6 	bne.w	8001854 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f002 f8d9 	bl	8003824 <USB_ReadInterrupts>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80ec 	beq.w	8001852 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 f8d0 	bl	8003824 <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800168e:	d104      	bne.n	800169a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001698:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 f8c0 	bl	8003824 <USB_ReadInterrupts>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016ae:	d104      	bne.n	80016ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 f8b0 	bl	8003824 <USB_ReadInterrupts>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016ce:	d104      	bne.n	80016da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 f8a0 	bl	8003824 <USB_ReadInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d103      	bne.n	80016f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2202      	movs	r2, #2
 80016f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 f892 	bl	8003824 <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800170a:	d11c      	bne.n	8001746 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001714:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10f      	bne.n	8001746 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001726:	2110      	movs	r1, #16
 8001728:	6938      	ldr	r0, [r7, #16]
 800172a:	f001 ffa1 	bl	8003670 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800172e:	6938      	ldr	r0, [r7, #16]
 8001730:	f001 ffc2 	bl	80036b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	4618      	mov	r0, r3
 800173c:	f002 f97a 	bl	8003a34 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f008 fa0b 	bl	8009b5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f002 f86a 	bl	8003824 <USB_ReadInterrupts>
 8001750:	4603      	mov	r3, r0
 8001752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001756:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175a:	d102      	bne.n	8001762 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f001 fa03 	bl	8002b68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f002 f85c 	bl	8003824 <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b08      	cmp	r3, #8
 8001774:	d106      	bne.n	8001784 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f008 f9d4 	bl	8009b24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2208      	movs	r2, #8
 8001782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 f84b 	bl	8003824 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b10      	cmp	r3, #16
 8001796:	d101      	bne.n	800179c <HAL_HCD_IRQHandler+0x158>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_HCD_IRQHandler+0x15a>
 800179c:	2300      	movs	r3, #0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d012      	beq.n	80017c8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699a      	ldr	r2, [r3, #24]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0210 	bic.w	r2, r2, #16
 80017b0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f001 f906 	bl	80029c4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0210 	orr.w	r2, r2, #16
 80017c6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 f829 	bl	8003824 <USB_ReadInterrupts>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017dc:	d13a      	bne.n	8001854 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fc3c 	bl	8004060 <USB_HC_ReadInterrupt>
 80017e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e025      	b.n	800183c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d018      	beq.n	8001836 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800181a:	d106      	bne.n	800182a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4619      	mov	r1, r3
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8ab 	bl	800197e <HCD_HC_IN_IRQHandler>
 8001828:	e005      	b.n	8001836 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fcc6 	bl	80021c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	429a      	cmp	r2, r3
 8001844:	d3d4      	bcc.n	80017f0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	e000      	b.n	8001854 <HAL_HCD_IRQHandler+0x210>
      return;
 8001852:	bf00      	nop
    }
  }
}
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_HCD_Start+0x16>
 800186c:	2302      	movs	r3, #2
 800186e:	e013      	b.n	8001898 <HAL_HCD_Start+0x3e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f002 f93c 	bl	8003afc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fe82 	bl	8003592 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_HCD_Stop+0x16>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e00d      	b.n	80018d2 <HAL_HCD_Stop+0x32>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fd36 	bl	8004334 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 f8de 	bl	8003aa8 <USB_ResetPort>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3360      	adds	r3, #96	; 0x60
 8001910:	781b      	ldrb	r3, [r3, #0]
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3350      	adds	r3, #80	; 0x50
 8001938:	681b      	ldr	r3, [r3, #0]
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f002 f922 	bl	8003b9c <USB_GetCurrentFrame>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 f8fd 	bl	8003b6e <USB_GetHostSpeed>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	015a      	lsls	r2, r3, #5
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4413      	add	r3, r2
 80019a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d119      	bne.n	80019e2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ba:	461a      	mov	r2, r3
 80019bc:	2304      	movs	r3, #4
 80019be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	0151      	lsls	r1, r2, #5
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	440a      	add	r2, r1
 80019d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	60d3      	str	r3, [r2, #12]
 80019e0:	e101      	b.n	8001be6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f8:	d12b      	bne.n	8001a52 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a06:	461a      	mov	r2, r3
 8001a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3361      	adds	r3, #97	; 0x61
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	015a      	lsls	r2, r3, #5
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	0151      	lsls	r1, r2, #5
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	440a      	add	r2, r1
 8001a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fb19 	bl	8004082 <USB_HC_Halt>
 8001a50:	e0c9      	b.n	8001be6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d109      	bne.n	8001a7c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a74:	461a      	mov	r2, r3
 8001a76:	2320      	movs	r3, #32
 8001a78:	6093      	str	r3, [r2, #8]
 8001a7a:	e0b4      	b.n	8001be6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d133      	bne.n	8001afa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	0151      	lsls	r1, r2, #5
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3361      	adds	r3, #97	; 0x61
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fac5 	bl	8004082 <USB_HC_Halt>
 8001af8:	e075      	b.n	8001be6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b10:	d134      	bne.n	8001b7c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	0151      	lsls	r1, r2, #5
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	440a      	add	r2, r1
 8001b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3361      	adds	r3, #97	; 0x61
 8001b40:	2208      	movs	r2, #8
 8001b42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b50:	461a      	mov	r2, r3
 8001b52:	2310      	movs	r3, #16
 8001b54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b62:	461a      	mov	r2, r3
 8001b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fa84 	bl	8004082 <USB_HC_Halt>
 8001b7a:	e034      	b.n	8001be6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d129      	bne.n	8001be6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	0151      	lsls	r1, r2, #5
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	440a      	add	r2, r1
 8001ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3361      	adds	r3, #97	; 0x61
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fa57 	bl	8004082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	461a      	mov	r2, r3
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bfc:	d122      	bne.n	8001c44 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	0151      	lsls	r1, r2, #5
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	440a      	add	r2, r1
 8001c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 fa2a 	bl	8004082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c40:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001c42:	e2ba      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f040 811b 	bne.w	8001e92 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d019      	beq.n	8001c98 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3348      	adds	r3, #72	; 0x48
 8001c72:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	0159      	lsls	r1, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	202c      	movs	r0, #44	; 0x2c
 8001c8e:	fb00 f303 	mul.w	r3, r0, r3
 8001c92:	440b      	add	r3, r1
 8001c94:	3350      	adds	r3, #80	; 0x50
 8001c96:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3361      	adds	r3, #97	; 0x61
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	335c      	adds	r3, #92	; 0x5c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2301      	movs	r3, #1
 8001ccc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	333f      	adds	r3, #63	; 0x3f
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	333f      	adds	r3, #63	; 0x3f
 8001cf0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d121      	bne.n	8001d3a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	0151      	lsls	r1, r2, #5
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	440a      	add	r2, r1
 8001d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 f9ae 	bl	8004082 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d32:	461a      	mov	r2, r3
 8001d34:	2310      	movs	r3, #16
 8001d36:	6093      	str	r3, [r2, #8]
 8001d38:	e066      	b.n	8001e08 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	333f      	adds	r3, #63	; 0x3f
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d127      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	0151      	lsls	r1, r2, #5
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	440a      	add	r2, r1
 8001d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d6c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	212c      	movs	r1, #44	; 0x2c
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3360      	adds	r3, #96	; 0x60
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	b2d9      	uxtb	r1, r3
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	202c      	movs	r0, #44	; 0x2c
 8001d8a:	fb00 f303 	mul.w	r3, r0, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3360      	adds	r3, #96	; 0x60
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f007 feee 	bl	8009b78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d9c:	e034      	b.n	8001e08 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	333f      	adds	r3, #63	; 0x3f
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d12a      	bne.n	8001e08 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3360      	adds	r3, #96	; 0x60
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3354      	adds	r3, #84	; 0x54
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2d8      	uxtb	r0, r3
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3354      	adds	r3, #84	; 0x54
 8001de8:	4602      	mov	r2, r0
 8001dea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	b2d9      	uxtb	r1, r3
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	202c      	movs	r0, #44	; 0x2c
 8001df6:	fb00 f303 	mul.w	r3, r0, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3360      	adds	r3, #96	; 0x60
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f007 feb8 	bl	8009b78 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d12b      	bne.n	8001e68 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3348      	adds	r3, #72	; 0x48
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	202c      	movs	r0, #44	; 0x2c
 8001e26:	fb00 f202 	mul.w	r2, r0, r2
 8001e2a:	440a      	add	r2, r1
 8001e2c:	3240      	adds	r2, #64	; 0x40
 8001e2e:	8812      	ldrh	r2, [r2, #0]
 8001e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 81be 	beq.w	80021ba <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3354      	adds	r3, #84	; 0x54
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f083 0301 	eor.w	r3, r3, #1
 8001e52:	b2d8      	uxtb	r0, r3
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3354      	adds	r3, #84	; 0x54
 8001e62:	4602      	mov	r2, r0
 8001e64:	701a      	strb	r2, [r3, #0]
}
 8001e66:	e1a8      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3354      	adds	r3, #84	; 0x54
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2d8      	uxtb	r0, r3
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3354      	adds	r3, #84	; 0x54
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	701a      	strb	r2, [r3, #0]
}
 8001e90:	e193      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	f040 8106 	bne.w	80020b6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	0151      	lsls	r1, r2, #5
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	440a      	add	r2, r1
 8001ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec4:	f023 0302 	bic.w	r3, r3, #2
 8001ec8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	212c      	movs	r1, #44	; 0x2c
 8001ed0:	fb01 f303 	mul.w	r3, r1, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3361      	adds	r3, #97	; 0x61
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d109      	bne.n	8001ef2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3360      	adds	r3, #96	; 0x60
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e0c9      	b.n	8002086 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3361      	adds	r3, #97	; 0x61
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d109      	bne.n	8001f1a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	3360      	adds	r3, #96	; 0x60
 8001f14:	2205      	movs	r2, #5
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e0b5      	b.n	8002086 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	3361      	adds	r3, #97	; 0x61
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d009      	beq.n	8001f42 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3361      	adds	r3, #97	; 0x61
 8001f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d150      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	335c      	adds	r3, #92	; 0x5c
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	202c      	movs	r0, #44	; 0x2c
 8001f5a:	fb00 f303 	mul.w	r3, r0, r3
 8001f5e:	440b      	add	r3, r1
 8001f60:	335c      	adds	r3, #92	; 0x5c
 8001f62:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	335c      	adds	r3, #92	; 0x5c
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d912      	bls.n	8001f9e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	335c      	adds	r3, #92	; 0x5c
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	3360      	adds	r3, #96	; 0x60
 8001f98:	2204      	movs	r2, #4
 8001f9a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f9c:	e073      	b.n	8002086 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	212c      	movs	r1, #44	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	3360      	adds	r3, #96	; 0x60
 8001fac:	2202      	movs	r2, #2
 8001fae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fc6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fce:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001fe2:	e050      	b.n	8002086 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	212c      	movs	r1, #44	; 0x2c
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	3361      	adds	r3, #97	; 0x61
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d122      	bne.n	800203e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	3360      	adds	r3, #96	; 0x60
 8002006:	2202      	movs	r2, #2
 8002008:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002020:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002028:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e023      	b.n	8002086 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3361      	adds	r3, #97	; 0x61
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b07      	cmp	r3, #7
 8002050:	d119      	bne.n	8002086 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	335c      	adds	r3, #92	; 0x5c
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	202c      	movs	r0, #44	; 0x2c
 800206a:	fb00 f303 	mul.w	r3, r0, r3
 800206e:	440b      	add	r3, r1
 8002070:	335c      	adds	r3, #92	; 0x5c
 8002072:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3360      	adds	r3, #96	; 0x60
 8002082:	2204      	movs	r2, #4
 8002084:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002092:	461a      	mov	r2, r3
 8002094:	2302      	movs	r3, #2
 8002096:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	b2d9      	uxtb	r1, r3
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	202c      	movs	r0, #44	; 0x2c
 80020a2:	fb00 f303 	mul.w	r3, r0, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	3360      	adds	r3, #96	; 0x60
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f007 fd62 	bl	8009b78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80020b4:	e081      	b.n	80021ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d176      	bne.n	80021ba <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	333f      	adds	r3, #63	; 0x3f
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d121      	bne.n	8002124 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	335c      	adds	r3, #92	; 0x5c
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	0151      	lsls	r1, r2, #5
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	440a      	add	r2, r1
 8002108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f001 ffb0 	bl	8004082 <USB_HC_Halt>
 8002122:	e041      	b.n	80021a8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	333f      	adds	r3, #63	; 0x3f
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	333f      	adds	r3, #63	; 0x3f
 8002146:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002148:	2b02      	cmp	r3, #2
 800214a:	d12d      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	335c      	adds	r3, #92	; 0x5c
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d120      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3361      	adds	r3, #97	; 0x61
 8002174:	2203      	movs	r2, #3
 8002176:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	0151      	lsls	r1, r2, #5
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	440a      	add	r2, r1
 800218e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 ff6d 	bl	8004082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	2310      	movs	r3, #16
 80021b8:	6093      	str	r3, [r2, #8]
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d119      	bne.n	8002226 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	461a      	mov	r2, r3
 8002200:	2304      	movs	r3, #4
 8002202:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	0151      	lsls	r1, r2, #5
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	440a      	add	r2, r1
 800221a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002224:	e3ca      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b20      	cmp	r3, #32
 800223a:	d13e      	bne.n	80022ba <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	2320      	movs	r3, #32
 800224c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	333d      	adds	r3, #61	; 0x3d
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	f040 83ac 	bne.w	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	333d      	adds	r3, #61	; 0x3d
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3360      	adds	r3, #96	; 0x60
 8002284:	2202      	movs	r2, #2
 8002286:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	0151      	lsls	r1, r2, #5
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	440a      	add	r2, r1
 800229e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 fee5 	bl	8004082 <USB_HC_Halt>
}
 80022b8:	e380      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d0:	d122      	bne.n	8002318 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	0151      	lsls	r1, r2, #5
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	440a      	add	r2, r1
 80022e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f001 fec0 	bl	8004082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002314:	6093      	str	r3, [r2, #8]
}
 8002316:	e351      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d150      	bne.n	80023d0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	335c      	adds	r3, #92	; 0x5c
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b40      	cmp	r3, #64	; 0x40
 8002354:	d111      	bne.n	800237a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	333d      	adds	r3, #61	; 0x3d
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	461a      	mov	r2, r3
 8002376:	2340      	movs	r3, #64	; 0x40
 8002378:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	0151      	lsls	r1, r2, #5
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	440a      	add	r2, r1
 8002390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fe6c 	bl	8004082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	461a      	mov	r2, r3
 80023b8:	2301      	movs	r3, #1
 80023ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3361      	adds	r3, #97	; 0x61
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
}
 80023ce:	e2f5      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	d13c      	bne.n	8002460 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3361      	adds	r3, #97	; 0x61
 80023f4:	2204      	movs	r2, #4
 80023f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	333d      	adds	r3, #61	; 0x3d
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	335c      	adds	r3, #92	; 0x5c
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	0151      	lsls	r1, r2, #5
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	440a      	add	r2, r1
 8002432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	4611      	mov	r1, r2
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fe1b 	bl	8004082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2340      	movs	r3, #64	; 0x40
 800245c:	6093      	str	r3, [r2, #8]
}
 800245e:	e2ad      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d12a      	bne.n	80024cc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	461a      	mov	r2, r3
 8002484:	2308      	movs	r3, #8
 8002486:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	0151      	lsls	r1, r2, #5
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	440a      	add	r2, r1
 800249e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 fde5 	bl	8004082 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3361      	adds	r3, #97	; 0x61
 80024c6:	2205      	movs	r2, #5
 80024c8:	701a      	strb	r2, [r3, #0]
}
 80024ca:	e277      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d150      	bne.n	8002584 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	335c      	adds	r3, #92	; 0x5c
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3361      	adds	r3, #97	; 0x61
 8002502:	2203      	movs	r2, #3
 8002504:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	333d      	adds	r3, #61	; 0x3d
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d112      	bne.n	8002540 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	333c      	adds	r3, #60	; 0x3c
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	333d      	adds	r3, #61	; 0x3d
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	0151      	lsls	r1, r2, #5
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	440a      	add	r2, r1
 8002556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fd89 	bl	8004082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	461a      	mov	r2, r3
 800257e:	2310      	movs	r3, #16
 8002580:	6093      	str	r3, [r2, #8]
}
 8002582:	e21b      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b80      	cmp	r3, #128	; 0x80
 8002598:	d174      	bne.n	8002684 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d121      	bne.n	80025e6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3361      	adds	r3, #97	; 0x61
 80025b0:	2206      	movs	r2, #6
 80025b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f001 fd4f 	bl	8004082 <USB_HC_Halt>
 80025e4:	e044      	b.n	8002670 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	335c      	adds	r3, #92	; 0x5c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	202c      	movs	r0, #44	; 0x2c
 80025fe:	fb00 f303 	mul.w	r3, r0, r3
 8002602:	440b      	add	r3, r1
 8002604:	335c      	adds	r3, #92	; 0x5c
 8002606:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	335c      	adds	r3, #92	; 0x5c
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d920      	bls.n	800265e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	335c      	adds	r3, #92	; 0x5c
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3360      	adds	r3, #96	; 0x60
 800263c:	2204      	movs	r2, #4
 800263e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	b2d9      	uxtb	r1, r3
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	202c      	movs	r0, #44	; 0x2c
 800264a:	fb00 f303 	mul.w	r3, r0, r3
 800264e:	4413      	add	r3, r2
 8002650:	3360      	adds	r3, #96	; 0x60
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f007 fa8e 	bl	8009b78 <HAL_HCD_HC_NotifyURBChange_Callback>
 800265c:	e008      	b.n	8002670 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	3360      	adds	r3, #96	; 0x60
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	6093      	str	r3, [r2, #8]
}
 8002682:	e19b      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269a:	d134      	bne.n	8002706 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	0151      	lsls	r1, r2, #5
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	440a      	add	r2, r1
 80026b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fcdb 	bl	8004082 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	2310      	movs	r3, #16
 80026dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	461a      	mov	r2, r3
 80026ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3361      	adds	r3, #97	; 0x61
 8002700:	2208      	movs	r2, #8
 8002702:	701a      	strb	r2, [r3, #0]
}
 8002704:	e15a      	b.n	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b02      	cmp	r3, #2
 800271a:	f040 814f 	bne.w	80029bc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	0151      	lsls	r1, r2, #5
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	440a      	add	r2, r1
 8002734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002738:	f023 0302 	bic.w	r3, r3, #2
 800273c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3361      	adds	r3, #97	; 0x61
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d17d      	bne.n	800284e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3360      	adds	r3, #96	; 0x60
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	333f      	adds	r3, #63	; 0x3f
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d00a      	beq.n	800278e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	333f      	adds	r3, #63	; 0x3f
 8002786:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002788:	2b03      	cmp	r3, #3
 800278a:	f040 8100 	bne.w	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d113      	bne.n	80027be <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3355      	adds	r3, #85	; 0x55
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f083 0301 	eor.w	r3, r3, #1
 80027aa:	b2d8      	uxtb	r0, r3
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	3355      	adds	r3, #85	; 0x55
 80027ba:	4602      	mov	r2, r0
 80027bc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f040 80e3 	bne.w	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	334c      	adds	r3, #76	; 0x4c
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80d8 	beq.w	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	334c      	adds	r3, #76	; 0x4c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	202c      	movs	r0, #44	; 0x2c
 80027f4:	fb00 f202 	mul.w	r2, r0, r2
 80027f8:	440a      	add	r2, r1
 80027fa:	3240      	adds	r2, #64	; 0x40
 80027fc:	8812      	ldrh	r2, [r2, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	3b01      	subs	r3, #1
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	202c      	movs	r0, #44	; 0x2c
 8002808:	fb00 f202 	mul.w	r2, r0, r2
 800280c:	440a      	add	r2, r1
 800280e:	3240      	adds	r2, #64	; 0x40
 8002810:	8812      	ldrh	r2, [r2, #0]
 8002812:	fbb3 f3f2 	udiv	r3, r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80b5 	beq.w	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3355      	adds	r3, #85	; 0x55
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f083 0301 	eor.w	r3, r3, #1
 8002838:	b2d8      	uxtb	r0, r3
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3355      	adds	r3, #85	; 0x55
 8002848:	4602      	mov	r2, r0
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e09f      	b.n	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3361      	adds	r3, #97	; 0x61
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d109      	bne.n	8002876 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3360      	adds	r3, #96	; 0x60
 8002870:	2202      	movs	r2, #2
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e08b      	b.n	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3361      	adds	r3, #97	; 0x61
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d109      	bne.n	800289e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3360      	adds	r3, #96	; 0x60
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e077      	b.n	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3361      	adds	r3, #97	; 0x61
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d109      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3360      	adds	r3, #96	; 0x60
 80028c0:	2205      	movs	r2, #5
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	e063      	b.n	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3361      	adds	r3, #97	; 0x61
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d009      	beq.n	80028ee <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3361      	adds	r3, #97	; 0x61
 80028e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d14f      	bne.n	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	202c      	movs	r0, #44	; 0x2c
 8002906:	fb00 f303 	mul.w	r3, r0, r3
 800290a:	440b      	add	r3, r1
 800290c:	335c      	adds	r3, #92	; 0x5c
 800290e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	335c      	adds	r3, #92	; 0x5c
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d912      	bls.n	800294a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	335c      	adds	r3, #92	; 0x5c
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	2204      	movs	r2, #4
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e021      	b.n	800298e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3360      	adds	r3, #96	; 0x60
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002972:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800297a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	461a      	mov	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	2302      	movs	r3, #2
 800299e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	b2d9      	uxtb	r1, r3
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	202c      	movs	r0, #44	; 0x2c
 80029aa:	fb00 f303 	mul.w	r3, r0, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f007 f8de 	bl	8009b78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029bc:	bf00      	nop
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	0c5b      	lsrs	r3, r3, #17
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d004      	beq.n	8002a0a <HCD_RXQLVL_IRQHandler+0x46>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	f000 80a9 	beq.w	8002b5a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a08:	e0aa      	b.n	8002b60 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a6 	beq.w	8002b5e <HCD_RXQLVL_IRQHandler+0x19a>
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3344      	adds	r3, #68	; 0x44
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 809b 	beq.w	8002b5e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3350      	adds	r3, #80	; 0x50
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	441a      	add	r2, r3
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	202c      	movs	r0, #44	; 0x2c
 8002a42:	fb00 f303 	mul.w	r3, r0, r3
 8002a46:	440b      	add	r3, r1
 8002a48:	334c      	adds	r3, #76	; 0x4c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d87a      	bhi.n	8002b46 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3344      	adds	r3, #68	; 0x44
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	b292      	uxth	r2, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f000 fe83 	bl	8003774 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3344      	adds	r3, #68	; 0x44
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	441a      	add	r2, r3
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	202c      	movs	r0, #44	; 0x2c
 8002a88:	fb00 f303 	mul.w	r3, r0, r3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3344      	adds	r3, #68	; 0x44
 8002a90:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3350      	adds	r3, #80	; 0x50
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	441a      	add	r2, r3
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	202c      	movs	r0, #44	; 0x2c
 8002aac:	fb00 f303 	mul.w	r3, r0, r3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3350      	adds	r3, #80	; 0x50
 8002ab4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	0cdb      	lsrs	r3, r3, #19
 8002ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3340      	adds	r3, #64	; 0x40
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d13c      	bne.n	8002b5e <HCD_RXQLVL_IRQHandler+0x19a>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d039      	beq.n	8002b5e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b00:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b08:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3354      	adds	r3, #84	; 0x54
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	f083 0301 	eor.w	r3, r3, #1
 8002b30:	b2d8      	uxtb	r0, r3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3354      	adds	r3, #84	; 0x54
 8002b40:	4602      	mov	r2, r0
 8002b42:	701a      	strb	r2, [r3, #0]
      break;
 8002b44:	e00b      	b.n	8002b5e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3360      	adds	r3, #96	; 0x60
 8002b54:	2204      	movs	r2, #4
 8002b56:	701a      	strb	r2, [r3, #0]
      break;
 8002b58:	e001      	b.n	8002b5e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e000      	b.n	8002b60 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002b5e:	bf00      	nop
  }
}
 8002b60:	bf00      	nop
 8002b62:	3728      	adds	r7, #40	; 0x28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d10b      	bne.n	8002bb8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f006 ffc8 	bl	8009b40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f043 0302 	orr.w	r3, r3, #2
 8002bb6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d132      	bne.n	8002c28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d126      	bne.n	8002c22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d113      	bne.n	8002c04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be6:	d106      	bne.n	8002bf6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 ff20 	bl	8003a34 <USB_InitFSLSPClkSel>
 8002bf4:	e011      	b.n	8002c1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 ff19 	bl	8003a34 <USB_InitFSLSPClkSel>
 8002c02:	e00a      	b.n	8002c1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c12:	461a      	mov	r2, r3
 8002c14:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f006 ffba 	bl	8009b94 <HAL_HCD_PortEnabled_Callback>
 8002c20:	e002      	b.n	8002c28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f006 ffc4 	bl	8009bb0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d103      	bne.n	8002c3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f043 0320 	orr.w	r3, r3, #32
 8002c38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6013      	str	r3, [r2, #0]
}
 8002c46:	bf00      	nop
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e264      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d075      	beq.n	8002d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c6e:	4ba3      	ldr	r3, [pc, #652]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d00c      	beq.n	8002c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7a:	4ba0      	ldr	r3, [pc, #640]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d112      	bne.n	8002cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c86:	4b9d      	ldr	r3, [pc, #628]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c92:	d10b      	bne.n	8002cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	4b99      	ldr	r3, [pc, #612]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d05b      	beq.n	8002d58 <HAL_RCC_OscConfig+0x108>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d157      	bne.n	8002d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e23f      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x74>
 8002cb6:	4b91      	ldr	r3, [pc, #580]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a90      	ldr	r2, [pc, #576]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e01d      	b.n	8002d00 <HAL_RCC_OscConfig+0xb0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x98>
 8002cce:	4b8b      	ldr	r3, [pc, #556]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a8a      	ldr	r2, [pc, #552]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b88      	ldr	r3, [pc, #544]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a87      	ldr	r2, [pc, #540]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0xb0>
 8002ce8:	4b84      	ldr	r3, [pc, #528]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a83      	ldr	r2, [pc, #524]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a80      	ldr	r2, [pc, #512]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fd ff20 	bl	8000b4c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fd ff1c 	bl	8000b4c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e204      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0xc0>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fd ff0c 	bl	8000b4c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fd ff08 	bl	8000b4c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1f0      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0xe8>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d063      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b62      	ldr	r3, [pc, #392]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d11c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	4b5c      	ldr	r3, [pc, #368]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_RCC_OscConfig+0x152>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e1c4      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	4b56      	ldr	r3, [pc, #344]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4952      	ldr	r1, [pc, #328]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db6:	e03a      	b.n	8002e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc0:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <HAL_RCC_OscConfig+0x2b0>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fd fec1 	bl	8000b4c <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dce:	f7fd febd 	bl	8000b4c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e1a5      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4940      	ldr	r1, [pc, #256]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	e015      	b.n	8002e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_OscConfig+0x2b0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fd fea0 	bl	8000b4c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e10:	f7fd fe9c 	bl	8000b4c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e184      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	4b36      	ldr	r3, [pc, #216]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d030      	beq.n	8002e9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e42:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <HAL_RCC_OscConfig+0x2b4>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fd fe80 	bl	8000b4c <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e50:	f7fd fe7c 	bl	8000b4c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e164      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e62:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x200>
 8002e6e:	e015      	b.n	8002e9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x2b4>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7fd fe69 	bl	8000b4c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e7e:	f7fd fe65 	bl	8000b4c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e14d      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a0 	beq.w	8002fea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_OscConfig+0x2b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d121      	bne.n	8002f2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_RCC_OscConfig+0x2b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a07      	ldr	r2, [pc, #28]	; (8002f08 <HAL_RCC_OscConfig+0x2b8>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7fd fe2b 	bl	8000b4c <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e011      	b.n	8002f1e <HAL_RCC_OscConfig+0x2ce>
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470000 	.word	0x42470000
 8002f04:	42470e80 	.word	0x42470e80
 8002f08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0c:	f7fd fe1e 	bl	8000b4c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e106      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b85      	ldr	r3, [pc, #532]	; (8003134 <HAL_RCC_OscConfig+0x4e4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
 8002f32:	4b81      	ldr	r3, [pc, #516]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a80      	ldr	r2, [pc, #512]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	e01c      	b.n	8002f7a <HAL_RCC_OscConfig+0x32a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d10c      	bne.n	8002f62 <HAL_RCC_OscConfig+0x312>
 8002f48:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a7a      	ldr	r2, [pc, #488]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
 8002f54:	4b78      	ldr	r3, [pc, #480]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a77      	ldr	r2, [pc, #476]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	e00b      	b.n	8002f7a <HAL_RCC_OscConfig+0x32a>
 8002f62:	4b75      	ldr	r3, [pc, #468]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a74      	ldr	r2, [pc, #464]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6e:	4b72      	ldr	r3, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a71      	ldr	r2, [pc, #452]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d015      	beq.n	8002fae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fd fde3 	bl	8000b4c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fd fddf 	bl	8000b4c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0c5      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ee      	beq.n	8002f8a <HAL_RCC_OscConfig+0x33a>
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fd fdcd 	bl	8000b4c <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fd fdc9 	bl	8000b4c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0af      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fcc:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ee      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fde:	4b56      	ldr	r3, [pc, #344]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a55      	ldr	r2, [pc, #340]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 809b 	beq.w	800312a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d05c      	beq.n	80030ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d141      	bne.n	800308c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003008:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fd fd9d 	bl	8000b4c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003016:	f7fd fd99 	bl	8000b4c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e081      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003028:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	019b      	lsls	r3, r3, #6
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	4937      	ldr	r1, [pc, #220]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305e:	4b37      	ldr	r3, [pc, #220]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fd fd72 	bl	8000b4c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306c:	f7fd fd6e 	bl	8000b4c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e056      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x41c>
 800308a:	e04e      	b.n	800312a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308c:	4b2b      	ldr	r3, [pc, #172]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7fd fd5b 	bl	8000b4c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309a:	f7fd fd57 	bl	8000b4c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e03f      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x44a>
 80030b8:	e037      	b.n	800312a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e032      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d028      	beq.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d121      	bne.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d11a      	bne.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fe:	4293      	cmp	r3, r2
 8003100:	d111      	bne.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	3b01      	subs	r3, #1
 8003110:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d107      	bne.n	8003126 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40007000 	.word	0x40007000
 8003138:	40023800 	.word	0x40023800
 800313c:	42470060 	.word	0x42470060

08003140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0cc      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d90c      	bls.n	800317c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d044      	beq.n	8003260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d119      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e067      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321e:	4b37      	ldr	r3, [pc, #220]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4934      	ldr	r1, [pc, #208]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003230:	f7fd fc8c 	bl	8000b4c <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fd fc88 	bl	8000b4c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 020c 	and.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d1eb      	bne.n	8003238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d20c      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f821 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	490a      	ldr	r1, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd fbec 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	0800a984 	.word	0x0800a984
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	2300      	movs	r3, #0
 800331e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003324:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b08      	cmp	r3, #8
 800332e:	d00d      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x40>
 8003330:	2b08      	cmp	r3, #8
 8003332:	f200 80bd 	bhi.w	80034b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
 800333a:	2b04      	cmp	r3, #4
 800333c:	d003      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x3a>
 800333e:	e0b7      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003342:	60bb      	str	r3, [r7, #8]
       break;
 8003344:	e0b7      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003346:	4b61      	ldr	r3, [pc, #388]	; (80034cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003348:	60bb      	str	r3, [r7, #8]
      break;
 800334a:	e0b4      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800334c:	4b5d      	ldr	r3, [pc, #372]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003354:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003356:	4b5b      	ldr	r3, [pc, #364]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04d      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003362:	4b58      	ldr	r3, [pc, #352]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	461a      	mov	r2, r3
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	ea02 0800 	and.w	r8, r2, r0
 800337a:	ea03 0901 	and.w	r9, r3, r1
 800337e:	4640      	mov	r0, r8
 8003380:	4649      	mov	r1, r9
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	014b      	lsls	r3, r1, #5
 800338c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003390:	0142      	lsls	r2, r0, #5
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	ebb0 0008 	subs.w	r0, r0, r8
 800339a:	eb61 0109 	sbc.w	r1, r1, r9
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	018b      	lsls	r3, r1, #6
 80033a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033ac:	0182      	lsls	r2, r0, #6
 80033ae:	1a12      	subs	r2, r2, r0
 80033b0:	eb63 0301 	sbc.w	r3, r3, r1
 80033b4:	f04f 0000 	mov.w	r0, #0
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	00d9      	lsls	r1, r3, #3
 80033be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c2:	00d0      	lsls	r0, r2, #3
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	eb12 0208 	adds.w	r2, r2, r8
 80033cc:	eb43 0309 	adc.w	r3, r3, r9
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	0259      	lsls	r1, r3, #9
 80033da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033de:	0250      	lsls	r0, r2, #9
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	f7fc ff46 	bl	8000280 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e04a      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	461a      	mov	r2, r3
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	ea02 0400 	and.w	r4, r2, r0
 8003416:	ea03 0501 	and.w	r5, r3, r1
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	014b      	lsls	r3, r1, #5
 8003428:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800342c:	0142      	lsls	r2, r0, #5
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	1b00      	subs	r0, r0, r4
 8003434:	eb61 0105 	sbc.w	r1, r1, r5
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	018b      	lsls	r3, r1, #6
 8003442:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003446:	0182      	lsls	r2, r0, #6
 8003448:	1a12      	subs	r2, r2, r0
 800344a:	eb63 0301 	sbc.w	r3, r3, r1
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	00d9      	lsls	r1, r3, #3
 8003458:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800345c:	00d0      	lsls	r0, r2, #3
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	1912      	adds	r2, r2, r4
 8003464:	eb45 0303 	adc.w	r3, r5, r3
 8003468:	f04f 0000 	mov.w	r0, #0
 800346c:	f04f 0100 	mov.w	r1, #0
 8003470:	0299      	lsls	r1, r3, #10
 8003472:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003476:	0290      	lsls	r0, r2, #10
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	461a      	mov	r2, r3
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	f7fc fefa 	bl	8000280 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	60bb      	str	r3, [r7, #8]
      break;
 80034ae:	e002      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034b2:	60bb      	str	r3, [r7, #8]
      break;
 80034b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b6:	68bb      	ldr	r3, [r7, #8]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	007a1200 	.word	0x007a1200

080034d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034d0:	b084      	sub	sp, #16
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	f107 001c 	add.w	r0, r7, #28
 80034de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d122      	bne.n	800352e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9a0 	bl	8003868 <USB_CoreReset>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	e01a      	b.n	8003564 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f994 	bl	8003868 <USB_CoreReset>
 8003540:	4603      	mov	r3, r0
 8003542:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
 8003556:	e005      	b.n	8003564 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10b      	bne.n	8003582 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f043 0206 	orr.w	r2, r3, #6
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800358e:	b004      	add	sp, #16
 8003590:	4770      	bx	lr

08003592 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 0201 	bic.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d115      	bne.n	8003624 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003604:	2001      	movs	r0, #1
 8003606:	f7fd faad 	bl	8000b64 <HAL_Delay>
      ms++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f91a 	bl	800384a <USB_GetMode>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	d01e      	beq.n	800365a <USB_SetCurrentMode+0x84>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b31      	cmp	r3, #49	; 0x31
 8003620:	d9f0      	bls.n	8003604 <USB_SetCurrentMode+0x2e>
 8003622:	e01a      	b.n	800365a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d115      	bne.n	8003656 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003636:	2001      	movs	r0, #1
 8003638:	f7fd fa94 	bl	8000b64 <HAL_Delay>
      ms++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3301      	adds	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f901 	bl	800384a <USB_GetMode>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <USB_SetCurrentMode+0x84>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b31      	cmp	r3, #49	; 0x31
 8003652:	d9f0      	bls.n	8003636 <USB_SetCurrentMode+0x60>
 8003654:	e001      	b.n	800365a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e005      	b.n	8003666 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b32      	cmp	r3, #50	; 0x32
 800365e:	d101      	bne.n	8003664 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	f043 0220 	orr.w	r2, r3, #32
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3301      	adds	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <USB_FlushTxFifo+0x44>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e006      	b.n	80036a8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d0f1      	beq.n	800368a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	00030d40 	.word	0x00030d40

080036b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2210      	movs	r2, #16
 80036c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3301      	adds	r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <USB_FlushRxFifo+0x3c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e006      	b.n	80036e8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d0f1      	beq.n	80036ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	00030d40 	.word	0x00030d40

080036f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	460b      	mov	r3, r1
 8003708:	71fb      	strb	r3, [r7, #7]
 800370a:	4613      	mov	r3, r2
 800370c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	d123      	bne.n	8003766 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800371e:	88bb      	ldrh	r3, [r7, #4]
 8003720:	3303      	adds	r3, #3
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e018      	b.n	800375e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	031a      	lsls	r2, r3, #12
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	4413      	add	r3, r2
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	461a      	mov	r2, r3
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3301      	adds	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3301      	adds	r3, #1
 800374a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3301      	adds	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	3301      	adds	r3, #1
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d3e2      	bcc.n	800372c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3724      	adds	r7, #36	; 0x24
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003774:	b480      	push	{r7}
 8003776:	b08b      	sub	sp, #44	; 0x2c
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	b29b      	uxth	r3, r3
 8003790:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	e014      	b.n	80037ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	3301      	adds	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	3301      	adds	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	3301      	adds	r3, #1
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	3301      	adds	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	3301      	adds	r3, #1
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d3e6      	bcc.n	80037a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80037d2:	8bfb      	ldrh	r3, [r7, #30]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01e      	beq.n	8003816 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e2:	461a      	mov	r2, r3
 80037e4:	f107 0310 	add.w	r3, r7, #16
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	701a      	strb	r2, [r3, #0]
      i++;
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	3301      	adds	r3, #1
 8003802:	623b      	str	r3, [r7, #32]
      pDest++;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	3301      	adds	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800380a:	8bfb      	ldrh	r3, [r7, #30]
 800380c:	3b01      	subs	r3, #1
 800380e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003810:	8bfb      	ldrh	r3, [r7, #30]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ea      	bne.n	80037ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003818:	4618      	mov	r0, r3
 800381a:	372c      	adds	r7, #44	; 0x2c
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0301 	and.w	r3, r3, #1
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <USB_CoreReset+0x60>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e01a      	b.n	80038ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	daf3      	bge.n	8003874 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <USB_CoreReset+0x60>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e006      	b.n	80038ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d0f1      	beq.n	800389c <USB_CoreReset+0x34>

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	00030d40 	.word	0x00030d40

080038cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038cc:	b084      	sub	sp, #16
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	f107 001c 	add.w	r0, r7, #28
 80038da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038e8:	461a      	mov	r2, r3
 80038ea:	2300      	movs	r3, #0
 80038ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10a      	bne.n	800393a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	e014      	b.n	8003964 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003948:	f023 0304 	bic.w	r3, r3, #4
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e009      	b.n	8003964 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003964:	2110      	movs	r1, #16
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fe82 	bl	8003670 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff fea3 	bl	80036b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e015      	b.n	80039a4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	f04f 33ff 	mov.w	r3, #4294967295
 800398a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3301      	adds	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3e5      	bcc.n	8003978 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f04f 32ff 	mov.w	r2, #4294967295
 80039b8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <USB_HostInit+0x154>)
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <USB_HostInit+0x158>)
 80039d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80039dc:	e009      	b.n	80039f2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <USB_HostInit+0x15c>)
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <USB_HostInit+0x160>)
 80039ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f043 0210 	orr.w	r2, r3, #16
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <USB_HostInit+0x164>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a1c:	b004      	add	sp, #16
 8003a1e:	4770      	bx	lr
 8003a20:	01000200 	.word	0x01000200
 8003a24:	00e00300 	.word	0x00e00300
 8003a28:	00600080 	.word	0x00600080
 8003a2c:	004000e0 	.word	0x004000e0
 8003a30:	a3200008 	.word	0xa3200008

08003a34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003a82:	6053      	str	r3, [r2, #4]
 8003a84:	e009      	b.n	8003a9a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d106      	bne.n	8003a9a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a92:	461a      	mov	r2, r3
 8003a94:	f241 7370 	movw	r3, #6000	; 0x1770
 8003a98:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ac8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003ad8:	2064      	movs	r0, #100	; 0x64
 8003ada:	f7fd f843 	bl	8000b64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003aec:	200a      	movs	r0, #10
 8003aee:	f7fd f839 	bl	8000b64 <HAL_Delay>

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d109      	bne.n	8003b40 <USB_DriveVbus+0x44>
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d106      	bne.n	8003b40 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003b3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b3e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4a:	d109      	bne.n	8003b60 <USB_DriveVbus+0x64>
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b5e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	0c5b      	lsrs	r3, r3, #17
 8003b8c:	f003 0303 	and.w	r3, r3, #3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	b29b      	uxth	r3, r3
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	70fb      	strb	r3, [r7, #3]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	70bb      	strb	r3, [r7, #2]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003bf6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d87e      	bhi.n	8003cfc <USB_HC_Init+0x13c>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <USB_HC_Init+0x44>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c15 	.word	0x08003c15
 8003c08:	08003cbf 	.word	0x08003cbf
 8003c0c:	08003c15 	.word	0x08003c15
 8003c10:	08003c81 	.word	0x08003c81
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	f240 439d 	movw	r3, #1181	; 0x49d
 8003c26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003c28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	da10      	bge.n	8003c52 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003c50:	e057      	b.n	8003d02 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d051      	beq.n	8003d02 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c7c:	60d3      	str	r3, [r2, #12]
      break;
 8003c7e:	e040      	b.n	8003d02 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f240 639d 	movw	r3, #1693	; 0x69d
 8003c92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003c94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da34      	bge.n	8003d06 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cba:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003cbc:	e023      	b.n	8003d06 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f240 2325 	movw	r3, #549	; 0x225
 8003cd0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003cd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da17      	bge.n	8003d0a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003cf8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003cfa:	e006      	b.n	8003d0a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
      break;
 8003d00:	e004      	b.n	8003d0c <USB_HC_Init+0x14c>
      break;
 8003d02:	bf00      	nop
 8003d04:	e002      	b.n	8003d0c <USB_HC_Init+0x14c>
      break;
 8003d06:	bf00      	nop
 8003d08:	e000      	b.n	8003d0c <USB_HC_Init+0x14c>
      break;
 8003d0a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d12:	699a      	ldr	r2, [r3, #24]
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	6939      	ldr	r1, [r7, #16]
 8003d22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d26:	4313      	orrs	r3, r2
 8003d28:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003d36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da03      	bge.n	8003d46 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e001      	b.n	8003d4a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff0f 	bl	8003b6e <USB_GetHostSpeed>
 8003d50:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003d52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d106      	bne.n	8003d68 <USB_HC_Init+0x1a8>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d003      	beq.n	8003d68 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e001      	b.n	8003d6c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d6c:	787b      	ldrb	r3, [r7, #1]
 8003d6e:	059b      	lsls	r3, r3, #22
 8003d70:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003d74:	78bb      	ldrb	r3, [r7, #2]
 8003d76:	02db      	lsls	r3, r3, #11
 8003d78:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d7c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d82:	049b      	lsls	r3, r3, #18
 8003d84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003d88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d8a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	0159      	lsls	r1, r3, #5
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	440b      	add	r3, r1
 8003d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003da8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8003daa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d10f      	bne.n	8003dd2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dd0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08c      	sub	sp, #48	; 0x30
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	785b      	ldrb	r3, [r3, #1]
 8003df2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8003df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003df8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02d      	beq.n	8003e62 <USB_HC_StartXfer+0x86>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	791b      	ldrb	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d129      	bne.n	8003e62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d117      	bne.n	8003e44 <USB_HC_StartXfer+0x68>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	79db      	ldrb	r3, [r3, #7]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <USB_HC_StartXfer+0x48>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	79db      	ldrb	r3, [r3, #7]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d10f      	bne.n	8003e44 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <USB_HC_StartXfer+0x86>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	795b      	ldrb	r3, [r3, #5]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	785b      	ldrb	r3, [r3, #1]
 8003e56:	4619      	mov	r1, r3
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fa2f 	bl	80042bc <USB_DoPing>
      return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e0f8      	b.n	8004054 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d018      	beq.n	8003e9c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	8912      	ldrh	r2, [r2, #8]
 8003e72:	4413      	add	r3, r2
 8003e74:	3b01      	subs	r3, #1
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	8912      	ldrh	r2, [r2, #8]
 8003e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e7e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8003e80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e82:	8b7b      	ldrh	r3, [r7, #26]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d90b      	bls.n	8003ea0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8003e88:	8b7b      	ldrh	r3, [r7, #26]
 8003e8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003e8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	8912      	ldrh	r2, [r2, #8]
 8003e92:	fb02 f203 	mul.w	r2, r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	611a      	str	r2, [r3, #16]
 8003e9a:	e001      	b.n	8003ea0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	78db      	ldrb	r3, [r3, #3]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	8912      	ldrh	r2, [r2, #8]
 8003eae:	fb02 f203 	mul.w	r2, r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	611a      	str	r2, [r3, #16]
 8003eb6:	e003      	b.n	8003ec0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003eca:	04d9      	lsls	r1, r3, #19
 8003ecc:	4b63      	ldr	r3, [pc, #396]	; (800405c <USB_HC_StartXfer+0x280>)
 8003ece:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003ed0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	7a9b      	ldrb	r3, [r3, #10]
 8003ed6:	075b      	lsls	r3, r3, #29
 8003ed8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003edc:	69f9      	ldr	r1, [r7, #28]
 8003ede:	0148      	lsls	r0, r1, #5
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	4401      	add	r1, r0
 8003ee4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003ee8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003eea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	460a      	mov	r2, r1
 8003f04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	7e7b      	ldrb	r3, [r7, #25]
 8003f4e:	075b      	lsls	r3, r3, #29
 8003f50:	69f9      	ldr	r1, [r7, #28]
 8003f52:	0148      	lsls	r0, r1, #5
 8003f54:	6a39      	ldr	r1, [r7, #32]
 8003f56:	4401      	add	r1, r0
 8003f58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f76:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	78db      	ldrb	r3, [r3, #3]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e003      	b.n	8003f92 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f90:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f98:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e04e      	b.n	8004054 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	78db      	ldrb	r3, [r3, #3]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d149      	bne.n	8004052 <USB_HC_StartXfer+0x276>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d045      	beq.n	8004052 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	79db      	ldrb	r3, [r3, #7]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d830      	bhi.n	8004030 <USB_HC_StartXfer+0x254>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <USB_HC_StartXfer+0x1f8>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08004009 	.word	0x08004009
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	08004009 	.word	0x08004009
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	3303      	adds	r3, #3
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003fee:	8afa      	ldrh	r2, [r7, #22]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d91c      	bls.n	8004034 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	619a      	str	r2, [r3, #24]
        }
        break;
 8004006:	e015      	b.n	8004034 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	3303      	adds	r3, #3
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004012:	8afa      	ldrh	r2, [r7, #22]
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	b29b      	uxth	r3, r3
 800401e:	429a      	cmp	r2, r3
 8004020:	d90a      	bls.n	8004038 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	619a      	str	r2, [r3, #24]
        }
        break;
 800402e:	e003      	b.n	8004038 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004030:	bf00      	nop
 8004032:	e002      	b.n	800403a <USB_HC_StartXfer+0x25e>
        break;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <USB_HC_StartXfer+0x25e>
        break;
 8004038:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	68d9      	ldr	r1, [r3, #12]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	785a      	ldrb	r2, [r3, #1]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	b29b      	uxth	r3, r3
 8004048:	2000      	movs	r0, #0
 800404a:	9000      	str	r0, [sp, #0]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff fb53 	bl	80036f8 <USB_WritePacket>
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3728      	adds	r7, #40	; 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	1ff80000 	.word	0x1ff80000

08004060 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	b29b      	uxth	r3, r3
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004082:	b480      	push	{r7}
 8004084:	b089      	sub	sp, #36	; 0x24
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0c9b      	lsrs	r3, r3, #18
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0fdb      	lsrs	r3, r3, #31
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d104      	bne.n	80040dc <USB_HC_Halt+0x5a>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e0e8      	b.n	80042ae <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <USB_HC_Halt+0x66>
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d173      	bne.n	80041d0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004106:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 80cb 	bne.w	80042ac <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d143      	bne.n	80041aa <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	440a      	add	r2, r1
 8004138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004140:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4413      	add	r3, r2
 800414a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	440a      	add	r2, r1
 8004158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800415c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004160:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	440a      	add	r2, r1
 8004178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004180:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800418e:	d81d      	bhi.n	80041cc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a6:	d0ec      	beq.n	8004182 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041a8:	e080      	b.n	80042ac <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041ca:	e06f      	b.n	80042ac <USB_HC_Halt+0x22a>
            break;
 80041cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041ce:	e06d      	b.n	80042ac <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d143      	bne.n	8004288 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	440a      	add	r2, r1
 8004216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800421a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800421e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	440a      	add	r2, r1
 8004236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800423a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800423e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	4413      	add	r3, r2
 8004248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	440a      	add	r2, r1
 8004256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800425a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800425e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800426c:	d81d      	bhi.n	80042aa <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	4413      	add	r3, r2
 8004276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004284:	d0ec      	beq.n	8004260 <USB_HC_Halt+0x1de>
 8004286:	e011      	b.n	80042ac <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	440a      	add	r2, r1
 800429e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	e000      	b.n	80042ac <USB_HC_Halt+0x22a>
          break;
 80042aa:	bf00      	nop
    }
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3724      	adds	r7, #36	; 0x24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80042d0:	2301      	movs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	04da      	lsls	r2, r3, #19
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <USB_DoPing+0x74>)
 80042da:	4013      	ands	r3, r2
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004304:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	1ff80000 	.word	0x1ff80000

08004334 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff f935 	bl	80035b4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800434a:	2110      	movs	r1, #16
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff f98f 	bl	8003670 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff f9b0 	bl	80036b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e01f      	b.n	800439e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004374:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800437c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004384:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3301      	adds	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b0f      	cmp	r3, #15
 80043a2:	d9dc      	bls.n	800435e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	e034      	b.n	8004414 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3301      	adds	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f0:	d80c      	bhi.n	800440c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004408:	d0ec      	beq.n	80043e4 <USB_StopHost+0xb0>
 800440a:	e000      	b.n	800440e <USB_StopHost+0xda>
        break;
 800440c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	3301      	adds	r3, #1
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b0f      	cmp	r3, #15
 8004418:	d9c7      	bls.n	80043aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004420:	461a      	mov	r2, r3
 8004422:	f04f 33ff 	mov.w	r3, #4294967295
 8004426:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f04f 32ff 	mov.w	r2, #4294967295
 800442e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff f8ae 	bl	8003592 <USB_EnableGlobalInt>

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8004444:	4904      	ldr	r1, [pc, #16]	; (8004458 <MX_FATFS_Init+0x18>)
 8004446:	4805      	ldr	r0, [pc, #20]	; (800445c <MX_FATFS_Init+0x1c>)
 8004448:	f005 fa9c 	bl	8009984 <FATFS_LinkDriver>
 800444c:	4603      	mov	r3, r0
 800444e:	461a      	mov	r2, r3
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <MX_FATFS_Init+0x20>)
 8004452:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004454:	bf00      	nop
 8004456:	bd80      	pop	{r7, pc}
 8004458:	200021cc 	.word	0x200021cc
 800445c:	0800a994 	.word	0x0800a994
 8004460:	20004234 	.word	0x20004234

08004464 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004468:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800446a:	4618      	mov	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	4619      	mov	r1, r3
 800449e:	4808      	ldr	r0, [pc, #32]	; (80044c0 <USBH_status+0x34>)
 80044a0:	f000 fe1a 	bl	80050d8 <USBH_MSC_UnitIsReady>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <USBH_status+0x24>
  {
    res = RES_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	e001      	b.n	80044b4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20004238 	.word	0x20004238

080044c4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b094      	sub	sp, #80	; 0x50
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80044da:	7bf9      	ldrb	r1, [r7, #15]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4813      	ldr	r0, [pc, #76]	; (8004534 <USBH_read+0x70>)
 80044e6:	f000 fe41 	bl	800516c <USBH_MSC_Read>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <USBH_read+0x34>
  {
    res = RES_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80044f6:	e017      	b.n	8004528 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80044f8:	f107 0210 	add.w	r2, r7, #16
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	4619      	mov	r1, r3
 8004500:	480c      	ldr	r0, [pc, #48]	; (8004534 <USBH_read+0x70>)
 8004502:	f000 fe0f 	bl	8005124 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8004506:	7f7b      	ldrb	r3, [r7, #29]
 8004508:	2b3a      	cmp	r3, #58	; 0x3a
 800450a:	d005      	beq.n	8004518 <USBH_read+0x54>
 800450c:	2b3a      	cmp	r3, #58	; 0x3a
 800450e:	dc07      	bgt.n	8004520 <USBH_read+0x5c>
 8004510:	2b04      	cmp	r3, #4
 8004512:	d001      	beq.n	8004518 <USBH_read+0x54>
 8004514:	2b28      	cmp	r3, #40	; 0x28
 8004516:	d103      	bne.n	8004520 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8004518:	2303      	movs	r3, #3
 800451a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800451e:	e003      	b.n	8004528 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8004526:	bf00      	nop
    }
  }

  return res;
 8004528:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800452c:	4618      	mov	r0, r3
 800452e:	3748      	adds	r7, #72	; 0x48
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20004238 	.word	0x20004238

08004538 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b094      	sub	sp, #80	; 0x50
 800453c:	af02      	add	r7, sp, #8
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800454e:	7bf9      	ldrb	r1, [r7, #15]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4817      	ldr	r0, [pc, #92]	; (80045b8 <USBH_write+0x80>)
 800455a:	f000 fe70 	bl	800523e <USBH_MSC_Write>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <USBH_write+0x34>
  {
    res = RES_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800456a:	e01f      	b.n	80045ac <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800456c:	f107 0210 	add.w	r2, r7, #16
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	4619      	mov	r1, r3
 8004574:	4810      	ldr	r0, [pc, #64]	; (80045b8 <USBH_write+0x80>)
 8004576:	f000 fdd5 	bl	8005124 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800457a:	7f7b      	ldrb	r3, [r7, #29]
 800457c:	2b3a      	cmp	r3, #58	; 0x3a
 800457e:	d00d      	beq.n	800459c <USBH_write+0x64>
 8004580:	2b3a      	cmp	r3, #58	; 0x3a
 8004582:	dc0f      	bgt.n	80045a4 <USBH_write+0x6c>
 8004584:	2b28      	cmp	r3, #40	; 0x28
 8004586:	d009      	beq.n	800459c <USBH_write+0x64>
 8004588:	2b28      	cmp	r3, #40	; 0x28
 800458a:	dc0b      	bgt.n	80045a4 <USBH_write+0x6c>
 800458c:	2b04      	cmp	r3, #4
 800458e:	d005      	beq.n	800459c <USBH_write+0x64>
 8004590:	2b27      	cmp	r3, #39	; 0x27
 8004592:	d107      	bne.n	80045a4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8004594:	2302      	movs	r3, #2
 8004596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800459a:	e007      	b.n	80045ac <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800459c:	2303      	movs	r3, #3
 800459e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80045a2:	e003      	b.n	80045ac <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80045aa:	bf00      	nop
    }
  }

  return res;
 80045ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3748      	adds	r7, #72	; 0x48
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20004238 	.word	0x20004238

080045bc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b090      	sub	sp, #64	; 0x40
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	603a      	str	r2, [r7, #0]
 80045c6:	71fb      	strb	r3, [r7, #7]
 80045c8:	460b      	mov	r3, r1
 80045ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80045d2:	79bb      	ldrb	r3, [r7, #6]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d852      	bhi.n	800467e <USBH_ioctl+0xc2>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <USBH_ioctl+0x24>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	080045f9 	.word	0x080045f9
 80045e8:	08004623 	.word	0x08004623
 80045ec:	0800464f 	.word	0x0800464f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80045f6:	e045      	b.n	8004684 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80045f8:	f107 0208 	add.w	r2, r7, #8
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	4619      	mov	r1, r3
 8004600:	4823      	ldr	r0, [pc, #140]	; (8004690 <USBH_ioctl+0xd4>)
 8004602:	f000 fd8f 	bl	8005124 <USBH_MSC_GetLUNInfo>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004618:	e034      	b.n	8004684 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8004620:	e030      	b.n	8004684 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8004622:	f107 0208 	add.w	r2, r7, #8
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	4619      	mov	r1, r3
 800462a:	4819      	ldr	r0, [pc, #100]	; (8004690 <USBH_ioctl+0xd4>)
 800462c:	f000 fd7a 	bl	8005124 <USBH_MSC_GetLUNInfo>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d107      	bne.n	8004646 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8004636:	8a3b      	ldrh	r3, [r7, #16]
 8004638:	461a      	mov	r2, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004644:	e01e      	b.n	8004684 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800464c:	e01a      	b.n	8004684 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800464e:	f107 0208 	add.w	r2, r7, #8
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	4619      	mov	r1, r3
 8004656:	480e      	ldr	r0, [pc, #56]	; (8004690 <USBH_ioctl+0xd4>)
 8004658:	f000 fd64 	bl	8005124 <USBH_MSC_GetLUNInfo>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8004662:	8a3b      	ldrh	r3, [r7, #16]
 8004664:	0a5b      	lsrs	r3, r3, #9
 8004666:	b29b      	uxth	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8004674:	e006      	b.n	8004684 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800467c:	e002      	b.n	8004684 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800467e:	2304      	movs	r3, #4
 8004680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8004684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004688:	4618      	mov	r0, r3
 800468a:	3740      	adds	r7, #64	; 0x40
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20004238 	.word	0x20004238

08004694 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af04      	add	r7, sp, #16
 800469a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80046a2:	7919      	ldrb	r1, [r3, #4]
 80046a4:	2350      	movs	r3, #80	; 0x50
 80046a6:	2206      	movs	r2, #6
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 fc53 	bl	8005f54 <USBH_FindInterface>
 80046ae:	4603      	mov	r3, r0
 80046b0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	2bff      	cmp	r3, #255	; 0xff
 80046b6:	d002      	beq.n	80046be <USBH_MSC_InterfaceInit+0x2a>
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d901      	bls.n	80046c2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80046be:	2302      	movs	r3, #2
 80046c0:	e0ef      	b.n	80048a2 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	4619      	mov	r1, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 fc28 	bl	8005f1c <USBH_SelectInterface>
 80046cc:	4603      	mov	r3, r0
 80046ce:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80046d6:	2302      	movs	r3, #2
 80046d8:	e0e3      	b.n	80048a2 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80046e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80046e4:	f005 fcc0 	bl	800a068 <malloc>
 80046e8:	4603      	mov	r3, r0
 80046ea:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80046fc:	2302      	movs	r3, #2
 80046fe:	e0d0      	b.n	80048a2 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8004700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004704:	2100      	movs	r1, #0
 8004706:	68b8      	ldr	r0, [r7, #8]
 8004708:	f005 fccc 	bl	800a0a4 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	211a      	movs	r1, #26
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b25b      	sxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	da16      	bge.n	8004752 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	211a      	movs	r1, #26
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	211a      	movs	r1, #26
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800474a:	881a      	ldrh	r2, [r3, #0]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	815a      	strh	r2, [r3, #10]
 8004750:	e015      	b.n	800477e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	211a      	movs	r1, #26
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004762:	781a      	ldrb	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	211a      	movs	r1, #26
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	211a      	movs	r1, #26
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	b25b      	sxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	da16      	bge.n	80047c4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	211a      	movs	r1, #26
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80047a6:	781a      	ldrb	r2, [r3, #0]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	211a      	movs	r1, #26
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80047bc:	881a      	ldrh	r2, [r3, #0]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	815a      	strh	r2, [r3, #10]
 80047c2:	e015      	b.n	80047f0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	211a      	movs	r1, #26
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	211a      	movs	r1, #26
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2200      	movs	r2, #0
 80047fa:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2200      	movs	r2, #0
 8004800:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	799b      	ldrb	r3, [r3, #6]
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f002 fdc4 	bl	8007396 <USBH_AllocPipe>
 800480e:	4603      	mov	r3, r0
 8004810:	461a      	mov	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	79db      	ldrb	r3, [r3, #7]
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f002 fdba 	bl	8007396 <USBH_AllocPipe>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fdac 	bl	8005388 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	7959      	ldrb	r1, [r3, #5]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	7998      	ldrb	r0, [r3, #6]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	8912      	ldrh	r2, [r2, #8]
 8004848:	9202      	str	r2, [sp, #8]
 800484a:	2202      	movs	r2, #2
 800484c:	9201      	str	r2, [sp, #4]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	4623      	mov	r3, r4
 8004852:	4602      	mov	r2, r0
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f002 fd6f 	bl	8007338 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	7919      	ldrb	r1, [r3, #4]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	79d8      	ldrb	r0, [r3, #7]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	8952      	ldrh	r2, [r2, #10]
 8004872:	9202      	str	r2, [sp, #8]
 8004874:	2202      	movs	r2, #2
 8004876:	9201      	str	r2, [sp, #4]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	4623      	mov	r3, r4
 800487c:	4602      	mov	r2, r0
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f002 fd5a 	bl	8007338 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f005 fb0d 	bl	8009eac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	795b      	ldrb	r3, [r3, #5]
 8004896:	2200      	movs	r2, #0
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f005 fb06 	bl	8009eac <USBH_LL_SetToggle>

  return USBH_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd90      	pop	{r4, r7, pc}

080048aa <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	795b      	ldrb	r3, [r3, #5]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00e      	beq.n	80048e2 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	795b      	ldrb	r3, [r3, #5]
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f002 fd53 	bl	8007376 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	795b      	ldrb	r3, [r3, #5]
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f002 fd7e 	bl	80073d8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	791b      	ldrb	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00e      	beq.n	8004908 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	791b      	ldrb	r3, [r3, #4]
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f002 fd40 	bl	8007376 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	791b      	ldrb	r3, [r3, #4]
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f002 fd6b 	bl	80073d8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	4618      	mov	r0, r3
 800491e:	f005 fbab 	bl	800a078 <free>
    phost->pActiveClass->pData = 0U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004928:	2200      	movs	r2, #0
 800492a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	7b9b      	ldrb	r3, [r3, #14]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d041      	beq.n	80049d8 <USBH_MSC_ClassRequest+0xa2>
 8004954:	2b03      	cmp	r3, #3
 8004956:	dc4b      	bgt.n	80049f0 <USBH_MSC_ClassRequest+0xba>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <USBH_MSC_ClassRequest+0x2a>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d147      	bne.n	80049f0 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fcf0 	bl	800534a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800496a:	4603      	mov	r3, r0
 800496c:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d104      	bne.n	800497e <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d137      	bne.n	80049f4 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d804      	bhi.n	8004996 <USBH_MSC_ClassRequest+0x60>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	b2da      	uxtb	r2, r3
 8004994:	e000      	b.n	8004998 <USBH_MSC_ClassRequest+0x62>
 8004996:	2202      	movs	r2, #2
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800499c:	2300      	movs	r3, #0
 800499e:	73bb      	strb	r3, [r7, #14]
 80049a0:	e014      	b.n	80049cc <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80049a2:	7bbb      	ldrb	r3, [r7, #14]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	2134      	movs	r1, #52	; 0x34
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	3392      	adds	r3, #146	; 0x92
 80049b0:	2202      	movs	r2, #2
 80049b2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80049b4:	7bbb      	ldrb	r3, [r7, #14]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	2134      	movs	r1, #52	; 0x34
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	33c1      	adds	r3, #193	; 0xc1
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80049c6:	7bbb      	ldrb	r3, [r7, #14]
 80049c8:	3301      	adds	r3, #1
 80049ca:	73bb      	strb	r3, [r7, #14]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	7bba      	ldrb	r2, [r7, #14]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d3e5      	bcc.n	80049a2 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80049d6:	e00d      	b.n	80049f4 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80049d8:	2100      	movs	r1, #0
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f002 f87b 	bl	8006ad6 <USBH_ClrFeature>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d108      	bne.n	80049f8 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	7bda      	ldrb	r2, [r3, #15]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	739a      	strb	r2, [r3, #14]
      }
      break;
 80049ee:	e003      	b.n	80049f8 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80049f0:	bf00      	nop
 80049f2:	e002      	b.n	80049fa <USBH_MSC_ClassRequest+0xc4>
      break;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <USBH_MSC_ClassRequest+0xc4>
      break;
 80049f8:	bf00      	nop
  }

  return status;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	7b1b      	ldrb	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <USBH_MSC_Process+0x2e>
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	f000 8271 	beq.w	8004f12 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8004a30:	e272      	b.n	8004f18 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	f080 824f 	bcs.w	8004ee2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	2334      	movs	r3, #52	; 0x34
 8004a50:	fb03 f301 	mul.w	r3, r3, r1
 8004a54:	4413      	add	r3, r2
 8004a56:	3391      	adds	r3, #145	; 0x91
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004a62:	4619      	mov	r1, r3
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	2334      	movs	r3, #52	; 0x34
 8004a68:	fb03 f301 	mul.w	r3, r3, r1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3390      	adds	r3, #144	; 0x90
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	f200 8243 	bhi.w	8004efe <USBH_MSC_Process+0x4fa>
 8004a78:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <USBH_MSC_Process+0x7c>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004aa5 	.word	0x08004aa5
 8004a84:	08004eff 	.word	0x08004eff
 8004a88:	08004b6d 	.word	0x08004b6d
 8004a8c:	08004cf1 	.word	0x08004cf1
 8004a90:	08004acb 	.word	0x08004acb
 8004a94:	08004dbd 	.word	0x08004dbd
 8004a98:	08004eff 	.word	0x08004eff
 8004a9c:	08004eff 	.word	0x08004eff
 8004aa0:	08004ed1 	.word	0x08004ed1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004aaa:	4619      	mov	r1, r3
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	2334      	movs	r3, #52	; 0x34
 8004ab0:	fb03 f301 	mul.w	r3, r3, r1
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3390      	adds	r3, #144	; 0x90
 8004ab8:	2204      	movs	r2, #4
 8004aba:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8004ac8:	e222      	b.n	8004f10 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ad0:	b2d9      	uxtb	r1, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2334      	movs	r3, #52	; 0x34
 8004adc:	fb03 f302 	mul.w	r3, r3, r2
 8004ae0:	3398      	adds	r3, #152	; 0x98
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3307      	adds	r3, #7
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 ff6a 	bl	80059c4 <USBH_MSC_SCSI_Inquiry>
 8004af0:	4603      	mov	r3, r0
 8004af2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b00:	4619      	mov	r1, r3
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	2334      	movs	r3, #52	; 0x34
 8004b06:	fb03 f301 	mul.w	r3, r3, r1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3390      	adds	r3, #144	; 0x90
 8004b0e:	2202      	movs	r2, #2
 8004b10:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d10c      	bne.n	8004b32 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b1e:	4619      	mov	r1, r3
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	2334      	movs	r3, #52	; 0x34
 8004b24:	fb03 f301 	mul.w	r3, r3, r1
 8004b28:	4413      	add	r3, r2
 8004b2a:	3390      	adds	r3, #144	; 0x90
 8004b2c:	2205      	movs	r2, #5
 8004b2e:	701a      	strb	r2, [r3, #0]
            break;
 8004b30:	e1e7      	b.n	8004f02 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	f040 81e4 	bne.w	8004f02 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b40:	4619      	mov	r1, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	2334      	movs	r3, #52	; 0x34
 8004b46:	fb03 f301 	mul.w	r3, r3, r1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3390      	adds	r3, #144	; 0x90
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b58:	4619      	mov	r1, r3
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	2334      	movs	r3, #52	; 0x34
 8004b5e:	fb03 f301 	mul.w	r3, r3, r1
 8004b62:	4413      	add	r3, r2
 8004b64:	3391      	adds	r3, #145	; 0x91
 8004b66:	2202      	movs	r2, #2
 8004b68:	701a      	strb	r2, [r3, #0]
            break;
 8004b6a:	e1ca      	b.n	8004f02 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fe66 	bl	8005848 <USBH_MSC_SCSI_TestUnitReady>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8004b80:	7bbb      	ldrb	r3, [r7, #14]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d149      	bne.n	8004c1a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	2334      	movs	r3, #52	; 0x34
 8004b92:	fb03 f301 	mul.w	r3, r3, r1
 8004b96:	4413      	add	r3, r2
 8004b98:	3392      	adds	r3, #146	; 0x92
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00c      	beq.n	8004bba <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	2334      	movs	r3, #52	; 0x34
 8004bac:	fb03 f301 	mul.w	r3, r3, r1
 8004bb0:	4413      	add	r3, r2
 8004bb2:	33c1      	adds	r3, #193	; 0xc1
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	e00b      	b.n	8004bd2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	2334      	movs	r3, #52	; 0x34
 8004bc6:	fb03 f301 	mul.w	r3, r3, r1
 8004bca:	4413      	add	r3, r2
 8004bcc:	33c1      	adds	r3, #193	; 0xc1
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004bd8:	4619      	mov	r1, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	2334      	movs	r3, #52	; 0x34
 8004bde:	fb03 f301 	mul.w	r3, r3, r1
 8004be2:	4413      	add	r3, r2
 8004be4:	3390      	adds	r3, #144	; 0x90
 8004be6:	2203      	movs	r2, #3
 8004be8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	2334      	movs	r3, #52	; 0x34
 8004bf6:	fb03 f301 	mul.w	r3, r3, r1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3391      	adds	r3, #145	; 0x91
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c08:	4619      	mov	r1, r3
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	2334      	movs	r3, #52	; 0x34
 8004c0e:	fb03 f301 	mul.w	r3, r3, r1
 8004c12:	4413      	add	r3, r2
 8004c14:	3392      	adds	r3, #146	; 0x92
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8004c1a:	7bbb      	ldrb	r3, [r7, #14]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d14a      	bne.n	8004cb6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c26:	4619      	mov	r1, r3
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	2334      	movs	r3, #52	; 0x34
 8004c2c:	fb03 f301 	mul.w	r3, r3, r1
 8004c30:	4413      	add	r3, r2
 8004c32:	3392      	adds	r3, #146	; 0x92
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d00c      	beq.n	8004c54 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c40:	4619      	mov	r1, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	2334      	movs	r3, #52	; 0x34
 8004c46:	fb03 f301 	mul.w	r3, r3, r1
 8004c4a:	4413      	add	r3, r2
 8004c4c:	33c1      	adds	r3, #193	; 0xc1
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	e00b      	b.n	8004c6c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	2334      	movs	r3, #52	; 0x34
 8004c60:	fb03 f301 	mul.w	r3, r3, r1
 8004c64:	4413      	add	r3, r2
 8004c66:	33c1      	adds	r3, #193	; 0xc1
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c72:	4619      	mov	r1, r3
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	2334      	movs	r3, #52	; 0x34
 8004c78:	fb03 f301 	mul.w	r3, r3, r1
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3390      	adds	r3, #144	; 0x90
 8004c80:	2205      	movs	r2, #5
 8004c82:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	2334      	movs	r3, #52	; 0x34
 8004c90:	fb03 f301 	mul.w	r3, r3, r1
 8004c94:	4413      	add	r3, r2
 8004c96:	3391      	adds	r3, #145	; 0x91
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	2334      	movs	r3, #52	; 0x34
 8004ca8:	fb03 f301 	mul.w	r3, r3, r1
 8004cac:	4413      	add	r3, r2
 8004cae:	3392      	adds	r3, #146	; 0x92
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	701a      	strb	r2, [r3, #0]
            break;
 8004cb4:	e127      	b.n	8004f06 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8004cb6:	7bbb      	ldrb	r3, [r7, #14]
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	f040 8124 	bne.w	8004f06 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	2334      	movs	r3, #52	; 0x34
 8004cca:	fb03 f301 	mul.w	r3, r3, r1
 8004cce:	4413      	add	r3, r2
 8004cd0:	3390      	adds	r3, #144	; 0x90
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cdc:	4619      	mov	r1, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	2334      	movs	r3, #52	; 0x34
 8004ce2:	fb03 f301 	mul.w	r3, r3, r1
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3391      	adds	r3, #145	; 0x91
 8004cea:	2202      	movs	r2, #2
 8004cec:	701a      	strb	r2, [r3, #0]
            break;
 8004cee:	e10a      	b.n	8004f06 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cf6:	b2d9      	uxtb	r1, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004cfe:	461a      	mov	r2, r3
 8004d00:	2334      	movs	r3, #52	; 0x34
 8004d02:	fb03 f302 	mul.w	r3, r3, r2
 8004d06:	3390      	adds	r3, #144	; 0x90
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fddc 	bl	80058ce <USBH_MSC_SCSI_ReadCapacity>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d120      	bne.n	8004d62 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d26:	4619      	mov	r1, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	2334      	movs	r3, #52	; 0x34
 8004d2c:	fb03 f301 	mul.w	r3, r3, r1
 8004d30:	4413      	add	r3, r2
 8004d32:	3390      	adds	r3, #144	; 0x90
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d3e:	4619      	mov	r1, r3
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	2334      	movs	r3, #52	; 0x34
 8004d44:	fb03 f301 	mul.w	r3, r3, r1
 8004d48:	4413      	add	r3, r2
 8004d4a:	3391      	adds	r3, #145	; 0x91
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d56:	3301      	adds	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8004d60:	e0d3      	b.n	8004f0a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d10c      	bne.n	8004d82 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d6e:	4619      	mov	r1, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	2334      	movs	r3, #52	; 0x34
 8004d74:	fb03 f301 	mul.w	r3, r3, r1
 8004d78:	4413      	add	r3, r2
 8004d7a:	3390      	adds	r3, #144	; 0x90
 8004d7c:	2205      	movs	r2, #5
 8004d7e:	701a      	strb	r2, [r3, #0]
            break;
 8004d80:	e0c3      	b.n	8004f0a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	f040 80c0 	bne.w	8004f0a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004d90:	4619      	mov	r1, r3
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	2334      	movs	r3, #52	; 0x34
 8004d96:	fb03 f301 	mul.w	r3, r3, r1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3390      	adds	r3, #144	; 0x90
 8004d9e:	2201      	movs	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004da8:	4619      	mov	r1, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	2334      	movs	r3, #52	; 0x34
 8004dae:	fb03 f301 	mul.w	r3, r3, r1
 8004db2:	4413      	add	r3, r2
 8004db4:	3391      	adds	r3, #145	; 0x91
 8004db6:	2202      	movs	r2, #2
 8004db8:	701a      	strb	r2, [r3, #0]
            break;
 8004dba:	e0a6      	b.n	8004f0a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004dc2:	b2d9      	uxtb	r1, r3
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2334      	movs	r3, #52	; 0x34
 8004dce:	fb03 f302 	mul.w	r3, r3, r2
 8004dd2:	3398      	adds	r3, #152	; 0x98
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3304      	adds	r3, #4
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fe96 	bl	8005b0e <USBH_MSC_SCSI_RequestSense>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d145      	bne.n	8004e78 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004df2:	4619      	mov	r1, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	2334      	movs	r3, #52	; 0x34
 8004df8:	fb03 f301 	mul.w	r3, r3, r1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	339c      	adds	r3, #156	; 0x9c
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b06      	cmp	r3, #6
 8004e04:	d00c      	beq.n	8004e20 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	2334      	movs	r3, #52	; 0x34
 8004e12:	fb03 f301 	mul.w	r3, r3, r1
 8004e16:	4413      	add	r3, r2
 8004e18:	339c      	adds	r3, #156	; 0x9c
 8004e1a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d117      	bne.n	8004e50 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d80c      	bhi.n	8004e50 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	2334      	movs	r3, #52	; 0x34
 8004e42:	fb03 f301 	mul.w	r3, r3, r1
 8004e46:	4413      	add	r3, r2
 8004e48:	3390      	adds	r3, #144	; 0x90
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	701a      	strb	r2, [r3, #0]
                  break;
 8004e4e:	e05f      	b.n	8004f10 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e56:	4619      	mov	r1, r3
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	2334      	movs	r3, #52	; 0x34
 8004e5c:	fb03 f301 	mul.w	r3, r3, r1
 8004e60:	4413      	add	r3, r2
 8004e62:	3390      	adds	r3, #144	; 0x90
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e6e:	3301      	adds	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d10c      	bne.n	8004e98 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004e84:	4619      	mov	r1, r3
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	2334      	movs	r3, #52	; 0x34
 8004e8a:	fb03 f301 	mul.w	r3, r3, r1
 8004e8e:	4413      	add	r3, r2
 8004e90:	3390      	adds	r3, #144	; 0x90
 8004e92:	2208      	movs	r2, #8
 8004e94:	701a      	strb	r2, [r3, #0]
            break;
 8004e96:	e03a      	b.n	8004f0e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d137      	bne.n	8004f0e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	2334      	movs	r3, #52	; 0x34
 8004eaa:	fb03 f301 	mul.w	r3, r3, r1
 8004eae:	4413      	add	r3, r2
 8004eb0:	3390      	adds	r3, #144	; 0x90
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	2334      	movs	r3, #52	; 0x34
 8004ec2:	fb03 f301 	mul.w	r3, r3, r1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3391      	adds	r3, #145	; 0x91
 8004eca:	2202      	movs	r2, #2
 8004ecc:	701a      	strb	r2, [r3, #0]
            break;
 8004ece:	e01e      	b.n	8004f0e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8004ee0:	e016      	b.n	8004f10 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2201      	movs	r2, #1
 8004eee:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
      break;
 8004efc:	e00c      	b.n	8004f18 <USBH_MSC_Process+0x514>
            break;
 8004efe:	bf00      	nop
 8004f00:	e00a      	b.n	8004f18 <USBH_MSC_Process+0x514>
            break;
 8004f02:	bf00      	nop
 8004f04:	e008      	b.n	8004f18 <USBH_MSC_Process+0x514>
            break;
 8004f06:	bf00      	nop
 8004f08:	e006      	b.n	8004f18 <USBH_MSC_Process+0x514>
            break;
 8004f0a:	bf00      	nop
 8004f0c:	e004      	b.n	8004f18 <USBH_MSC_Process+0x514>
            break;
 8004f0e:	bf00      	nop
      break;
 8004f10:	e002      	b.n	8004f18 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]
      break;
 8004f16:	bf00      	nop
  }
  return error;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop

08004f24 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b088      	sub	sp, #32
 8004f3e:	af02      	add	r7, sp, #8
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	2134      	movs	r1, #52	; 0x34
 8004f5e:	fb01 f303 	mul.w	r3, r1, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	3390      	adds	r3, #144	; 0x90
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b07      	cmp	r3, #7
 8004f6a:	d03c      	beq.n	8004fe6 <USBH_MSC_RdWrProcess+0xac>
 8004f6c:	2b07      	cmp	r3, #7
 8004f6e:	f300 80a7 	bgt.w	80050c0 <USBH_MSC_RdWrProcess+0x186>
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d06c      	beq.n	8005050 <USBH_MSC_RdWrProcess+0x116>
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	f040 80a2 	bne.w	80050c0 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8004f7c:	78f9      	ldrb	r1, [r7, #3]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2300      	movs	r3, #0
 8004f84:	2200      	movs	r2, #0
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fea5 	bl	8005cd6 <USBH_MSC_SCSI_Read>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	2134      	movs	r1, #52	; 0x34
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3390      	adds	r3, #144	; 0x90
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004fac:	e08a      	b.n	80050c4 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d109      	bne.n	8004fc8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	2134      	movs	r1, #52	; 0x34
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3390      	adds	r3, #144	; 0x90
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	701a      	strb	r2, [r3, #0]
      break;
 8004fc6:	e07d      	b.n	80050c4 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d17a      	bne.n	80050c4 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	2134      	movs	r1, #52	; 0x34
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	3390      	adds	r3, #144	; 0x90
 8004fdc:	2208      	movs	r2, #8
 8004fde:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe4:	e06e      	b.n	80050c4 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8004fe6:	78f9      	ldrb	r1, [r7, #3]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	2300      	movs	r3, #0
 8004fee:	2200      	movs	r2, #0
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fe05 	bl	8005c00 <USBH_MSC_SCSI_Write>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	2134      	movs	r1, #52	; 0x34
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	3390      	adds	r3, #144	; 0x90
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005016:	e057      	b.n	80050c8 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d109      	bne.n	8005032 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	2134      	movs	r1, #52	; 0x34
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3390      	adds	r3, #144	; 0x90
 800502c:	2205      	movs	r2, #5
 800502e:	701a      	strb	r2, [r3, #0]
      break;
 8005030:	e04a      	b.n	80050c8 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b04      	cmp	r3, #4
 8005036:	d147      	bne.n	80050c8 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	2134      	movs	r1, #52	; 0x34
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3390      	adds	r3, #144	; 0x90
 8005046:	2208      	movs	r2, #8
 8005048:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800504a:	2302      	movs	r3, #2
 800504c:	75fb      	strb	r3, [r7, #23]
      break;
 800504e:	e03b      	b.n	80050c8 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	2234      	movs	r2, #52	; 0x34
 8005054:	fb02 f303 	mul.w	r3, r2, r3
 8005058:	3398      	adds	r3, #152	; 0x98
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4413      	add	r3, r2
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fd52 	bl	8005b0e <USBH_MSC_SCSI_RequestSense>
 800506a:	4603      	mov	r3, r0
 800506c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d113      	bne.n	800509c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	2134      	movs	r1, #52	; 0x34
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	4413      	add	r3, r2
 8005080:	3390      	adds	r3, #144	; 0x90
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	2134      	movs	r1, #52	; 0x34
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	4413      	add	r3, r2
 8005092:	3391      	adds	r3, #145	; 0x91
 8005094:	2202      	movs	r2, #2
 8005096:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8005098:	2302      	movs	r3, #2
 800509a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d014      	beq.n	80050cc <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d111      	bne.n	80050cc <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	2134      	movs	r1, #52	; 0x34
 80050ae:	fb01 f303 	mul.w	r3, r1, r3
 80050b2:	4413      	add	r3, r2
 80050b4:	3390      	adds	r3, #144	; 0x90
 80050b6:	2208      	movs	r2, #8
 80050b8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80050ba:	2302      	movs	r3, #2
 80050bc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80050be:	e005      	b.n	80050cc <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80050c0:	bf00      	nop
 80050c2:	e004      	b.n	80050ce <USBH_MSC_RdWrProcess+0x194>
      break;
 80050c4:	bf00      	nop
 80050c6:	e002      	b.n	80050ce <USBH_MSC_RdWrProcess+0x194>
      break;
 80050c8:	bf00      	nop
 80050ca:	e000      	b.n	80050ce <USBH_MSC_RdWrProcess+0x194>
      break;
 80050cc:	bf00      	nop

  }
  return error;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b0b      	cmp	r3, #11
 80050f6:	d10c      	bne.n	8005112 <USBH_MSC_UnitIsReady+0x3a>
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	2134      	movs	r1, #52	; 0x34
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	4413      	add	r3, r2
 8005104:	3391      	adds	r3, #145	; 0x91
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
 8005110:	e001      	b.n	8005116 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	460b      	mov	r3, r1
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b0b      	cmp	r3, #11
 8005144:	d10d      	bne.n	8005162 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8005146:	7afb      	ldrb	r3, [r7, #11]
 8005148:	2234      	movs	r2, #52	; 0x34
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	3390      	adds	r3, #144	; 0x90
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	2234      	movs	r2, #52	; 0x34
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f004 ff95 	bl	800a088 <memcpy>
    return USBH_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e000      	b.n	8005164 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	460b      	mov	r3, r1
 800517a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00e      	beq.n	80051b0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8005198:	2b0b      	cmp	r3, #11
 800519a:	d109      	bne.n	80051b0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800519c:	7afb      	ldrb	r3, [r7, #11]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	2134      	movs	r1, #52	; 0x34
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	4413      	add	r3, r2
 80051a8:	3390      	adds	r3, #144	; 0x90
 80051aa:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d001      	beq.n	80051b4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80051b0:	2302      	movs	r3, #2
 80051b2:	e040      	b.n	8005236 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2206      	movs	r2, #6
 80051b8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	2134      	movs	r1, #52	; 0x34
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	4413      	add	r3, r2
 80051c6:	3390      	adds	r3, #144	; 0x90
 80051c8:	2206      	movs	r2, #6
 80051ca:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80051cc:	7afb      	ldrb	r3, [r7, #11]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80051d6:	7af9      	ldrb	r1, [r7, #11]
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 fd78 	bl	8005cd6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80051ec:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80051ee:	e016      	b.n	800521e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad2      	subs	r2, r2, r3
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	429a      	cmp	r2, r3
 8005206:	d805      	bhi.n	8005214 <USBH_MSC_Read+0xa8>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2201      	movs	r2, #1
 8005218:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800521a:	2302      	movs	r3, #2
 800521c:	e00b      	b.n	8005236 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800521e:	7afb      	ldrb	r3, [r7, #11]
 8005220:	4619      	mov	r1, r3
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f7ff fe89 	bl	8004f3a <USBH_MSC_RdWrProcess>
 8005228:	4603      	mov	r3, r0
 800522a:	2b01      	cmp	r3, #1
 800522c:	d0e0      	beq.n	80051f0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2201      	movs	r2, #1
 8005232:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b088      	sub	sp, #32
 8005242:	af02      	add	r7, sp, #8
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	460b      	mov	r3, r1
 800524c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00e      	beq.n	8005282 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800526a:	2b0b      	cmp	r3, #11
 800526c:	d109      	bne.n	8005282 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800526e:	7afb      	ldrb	r3, [r7, #11]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	2134      	movs	r1, #52	; 0x34
 8005274:	fb01 f303 	mul.w	r3, r1, r3
 8005278:	4413      	add	r3, r2
 800527a:	3390      	adds	r3, #144	; 0x90
 800527c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800527e:	2b01      	cmp	r3, #1
 8005280:	d001      	beq.n	8005286 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8005282:	2302      	movs	r3, #2
 8005284:	e040      	b.n	8005308 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2207      	movs	r2, #7
 800528a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800528c:	7afb      	ldrb	r3, [r7, #11]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	2134      	movs	r1, #52	; 0x34
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	3390      	adds	r3, #144	; 0x90
 800529a:	2207      	movs	r2, #7
 800529c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800529e:	7afb      	ldrb	r3, [r7, #11]
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80052a8:	7af9      	ldrb	r1, [r7, #11]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fca4 	bl	8005c00 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80052be:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80052c0:	e016      	b.n	80052f0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d805      	bhi.n	80052e6 <USBH_MSC_Write+0xa8>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2201      	movs	r2, #1
 80052ea:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80052ec:	2302      	movs	r3, #2
 80052ee:	e00b      	b.n	8005308 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80052f0:	7afb      	ldrb	r3, [r7, #11]
 80052f2:	4619      	mov	r1, r3
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fe20 	bl	8004f3a <USBH_MSC_RdWrProcess>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d0e0      	beq.n	80052c2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2201      	movs	r2, #1
 8005304:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2221      	movs	r2, #33	; 0x21
 800531c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	22ff      	movs	r2, #255	; 0xff
 8005322:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005336:	2200      	movs	r2, #0
 8005338:	2100      	movs	r1, #0
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 fdab 	bl	8006e96 <USBH_CtlReq>
 8005340:	4603      	mov	r3, r0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	22a1      	movs	r2, #161	; 0xa1
 8005358:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	22fe      	movs	r2, #254	; 0xfe
 800535e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8005372:	2201      	movs	r2, #1
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f001 fd8d 	bl	8006e96 <USBH_CtlReq>
 800537c:	4603      	mov	r3, r0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <USBH_MSC_BOT_Init+0x3c>)
 800539e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <USBH_MSC_BOT_Init+0x40>)
 80053a4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	43425355 	.word	0x43425355
 80053c8:	20304050 	.word	0x20304050

080053cc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80053d8:	2301      	movs	r3, #1
 80053da:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80053dc:	2301      	movs	r3, #1
 80053de:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80053e0:	2301      	movs	r3, #1
 80053e2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053fc:	3b01      	subs	r3, #1
 80053fe:	2b0a      	cmp	r3, #10
 8005400:	f200 819e 	bhi.w	8005740 <USBH_MSC_BOT_Process+0x374>
 8005404:	a201      	add	r2, pc, #4	; (adr r2, 800540c <USBH_MSC_BOT_Process+0x40>)
 8005406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540a:	bf00      	nop
 800540c:	08005439 	.word	0x08005439
 8005410:	08005461 	.word	0x08005461
 8005414:	080054cb 	.word	0x080054cb
 8005418:	080054e9 	.word	0x080054e9
 800541c:	0800556d 	.word	0x0800556d
 8005420:	0800558f 	.word	0x0800558f
 8005424:	08005627 	.word	0x08005627
 8005428:	08005643 	.word	0x08005643
 800542c:	08005695 	.word	0x08005695
 8005430:	080056c5 	.word	0x080056c5
 8005434:	08005727 	.word	0x08005727
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	795b      	ldrb	r3, [r3, #5]
 8005452:	2201      	movs	r2, #1
 8005454:	9200      	str	r2, [sp, #0]
 8005456:	221f      	movs	r2, #31
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 ff2a 	bl	80072b2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800545e:	e17e      	b.n	800575e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	795b      	ldrb	r3, [r3, #5]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f004 fcf6 	bl	8009e58 <USBH_LL_GetURBState>
 800546c:	4603      	mov	r3, r0
 800546e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8005470:	7d3b      	ldrb	r3, [r7, #20]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d118      	bne.n	80054a8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00f      	beq.n	800549e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005484:	b25b      	sxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	da04      	bge.n	8005494 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2203      	movs	r2, #3
 800548e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005492:	e157      	b.n	8005744 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2205      	movs	r2, #5
 8005498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800549c:	e152      	b.n	8005744 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2207      	movs	r2, #7
 80054a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80054a6:	e14d      	b.n	8005744 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80054a8:	7d3b      	ldrb	r3, [r7, #20]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d104      	bne.n	80054b8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80054b6:	e145      	b.n	8005744 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80054b8:	7d3b      	ldrb	r3, [r7, #20]
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	f040 8142 	bne.w	8005744 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	220a      	movs	r2, #10
 80054c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80054c8:	e13c      	b.n	8005744 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	895a      	ldrh	r2, [r3, #10]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	791b      	ldrb	r3, [r3, #4]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 ff0f 	bl	80072fc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2204      	movs	r2, #4
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80054e6:	e13a      	b.n	800575e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	791b      	ldrb	r3, [r3, #4]
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f004 fcb2 	bl	8009e58 <USBH_LL_GetURBState>
 80054f4:	4603      	mov	r3, r0
 80054f6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80054f8:	7d3b      	ldrb	r3, [r7, #20]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d12d      	bne.n	800555a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	8952      	ldrh	r2, [r2, #10]
 8005506:	4293      	cmp	r3, r2
 8005508:	d910      	bls.n	800552c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	8952      	ldrh	r2, [r2, #10]
 8005514:	441a      	add	r2, r3
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	8952      	ldrh	r2, [r2, #10]
 8005524:	1a9a      	subs	r2, r3, r2
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	65da      	str	r2, [r3, #92]	; 0x5c
 800552a:	e002      	b.n	8005532 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2200      	movs	r2, #0
 8005530:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	895a      	ldrh	r2, [r3, #10]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	791b      	ldrb	r3, [r3, #4]
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 fed7 	bl	80072fc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800554e:	e0fb      	b.n	8005748 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2207      	movs	r2, #7
 8005554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005558:	e0f6      	b.n	8005748 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800555a:	7d3b      	ldrb	r3, [r7, #20]
 800555c:	2b05      	cmp	r3, #5
 800555e:	f040 80f3 	bne.w	8005748 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2209      	movs	r2, #9
 8005566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800556a:	e0ed      	b.n	8005748 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	891a      	ldrh	r2, [r3, #8]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	795b      	ldrb	r3, [r3, #5]
 800557a:	2001      	movs	r0, #1
 800557c:	9000      	str	r0, [sp, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f001 fe97 	bl	80072b2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2206      	movs	r2, #6
 8005588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800558c:	e0e7      	b.n	800575e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	795b      	ldrb	r3, [r3, #5]
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f004 fc5f 	bl	8009e58 <USBH_LL_GetURBState>
 800559a:	4603      	mov	r3, r0
 800559c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800559e:	7d3b      	ldrb	r3, [r7, #20]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d12f      	bne.n	8005604 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	8912      	ldrh	r2, [r2, #8]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d910      	bls.n	80055d2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	8912      	ldrh	r2, [r2, #8]
 80055ba:	441a      	add	r2, r3
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	8912      	ldrh	r2, [r2, #8]
 80055ca:	1a9a      	subs	r2, r3, r2
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80055d0:	e002      	b.n	80055d8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2200      	movs	r2, #0
 80055d6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00c      	beq.n	80055fa <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	891a      	ldrh	r2, [r3, #8]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	795b      	ldrb	r3, [r3, #5]
 80055ee:	2001      	movs	r0, #1
 80055f0:	9000      	str	r0, [sp, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fe5d 	bl	80072b2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80055f8:	e0a8      	b.n	800574c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2207      	movs	r2, #7
 80055fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005602:	e0a3      	b.n	800574c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005604:	7d3b      	ldrb	r3, [r7, #20]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d104      	bne.n	8005614 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2205      	movs	r2, #5
 800560e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005612:	e09b      	b.n	800574c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8005614:	7d3b      	ldrb	r3, [r7, #20]
 8005616:	2b05      	cmp	r3, #5
 8005618:	f040 8098 	bne.w	800574c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	220a      	movs	r2, #10
 8005620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005624:	e092      	b.n	800574c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	791b      	ldrb	r3, [r3, #4]
 8005630:	220d      	movs	r2, #13
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 fe62 	bl	80072fc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2208      	movs	r2, #8
 800563c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005640:	e08d      	b.n	800575e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	791b      	ldrb	r3, [r3, #4]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f004 fc05 	bl	8009e58 <USBH_LL_GetURBState>
 800564e:	4603      	mov	r3, r0
 8005650:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8005652:	7d3b      	ldrb	r3, [r7, #20]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d115      	bne.n	8005684 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f8a9 	bl	80057c0 <USBH_MSC_DecodeCSW>
 800566e:	4603      	mov	r3, r0
 8005670:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8005672:	7d7b      	ldrb	r3, [r7, #21]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800567c:	e068      	b.n	8005750 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800567e:	2302      	movs	r3, #2
 8005680:	75fb      	strb	r3, [r7, #23]
      break;
 8005682:	e065      	b.n	8005750 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8005684:	7d3b      	ldrb	r3, [r7, #20]
 8005686:	2b05      	cmp	r3, #5
 8005688:	d162      	bne.n	8005750 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2209      	movs	r2, #9
 800568e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005692:	e05d      	b.n	8005750 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	2200      	movs	r2, #0
 8005698:	4619      	mov	r1, r3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f864 	bl	8005768 <USBH_MSC_BOT_Abort>
 80056a0:	4603      	mov	r3, r0
 80056a2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80056a4:	7dbb      	ldrb	r3, [r7, #22]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2207      	movs	r2, #7
 80056ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80056b2:	e04f      	b.n	8005754 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80056b4:	7dbb      	ldrb	r3, [r7, #22]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d14c      	bne.n	8005754 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	220b      	movs	r2, #11
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80056c2:	e047      	b.n	8005754 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	2201      	movs	r2, #1
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f84c 	bl	8005768 <USBH_MSC_BOT_Abort>
 80056d0:	4603      	mov	r3, r0
 80056d2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80056d4:	7dbb      	ldrb	r3, [r7, #22]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11d      	bne.n	8005716 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	795b      	ldrb	r3, [r3, #5]
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f004 fc13 	bl	8009f0c <USBH_LL_GetToggle>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	7959      	ldrb	r1, [r3, #5]
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	f1c3 0301 	rsb	r3, r3, #1
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f004 fbd7 	bl	8009eac <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	791b      	ldrb	r3, [r3, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f004 fbd0 	bl	8009eac <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2209      	movs	r2, #9
 8005710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8005714:	e020      	b.n	8005758 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8005716:	7dbb      	ldrb	r3, [r7, #22]
 8005718:	2b04      	cmp	r3, #4
 800571a:	d11d      	bne.n	8005758 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	220b      	movs	r2, #11
 8005720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8005724:	e018      	b.n	8005758 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff fdf2 	bl	8005310 <USBH_MSC_BOT_REQ_Reset>
 800572c:	4603      	mov	r3, r0
 800572e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d112      	bne.n	800575c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800573e:	e00d      	b.n	800575c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8005740:	bf00      	nop
 8005742:	e00c      	b.n	800575e <USBH_MSC_BOT_Process+0x392>
      break;
 8005744:	bf00      	nop
 8005746:	e00a      	b.n	800575e <USBH_MSC_BOT_Process+0x392>
      break;
 8005748:	bf00      	nop
 800574a:	e008      	b.n	800575e <USBH_MSC_BOT_Process+0x392>
      break;
 800574c:	bf00      	nop
 800574e:	e006      	b.n	800575e <USBH_MSC_BOT_Process+0x392>
      break;
 8005750:	bf00      	nop
 8005752:	e004      	b.n	800575e <USBH_MSC_BOT_Process+0x392>
      break;
 8005754:	bf00      	nop
 8005756:	e002      	b.n	800575e <USBH_MSC_BOT_Process+0x392>
      break;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <USBH_MSC_BOT_Process+0x392>
      break;
 800575c:	bf00      	nop
  }
  return status;
 800575e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
 8005774:	4613      	mov	r3, r2
 8005776:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8005778:	2302      	movs	r3, #2
 800577a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8005786:	78bb      	ldrb	r3, [r7, #2]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <USBH_MSC_BOT_Abort+0x2a>
 800578c:	2b01      	cmp	r3, #1
 800578e:	d009      	beq.n	80057a4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8005790:	e011      	b.n	80057b6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	79db      	ldrb	r3, [r3, #7]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 f99c 	bl	8006ad6 <USBH_ClrFeature>
 800579e:	4603      	mov	r3, r0
 80057a0:	73fb      	strb	r3, [r7, #15]
      break;
 80057a2:	e008      	b.n	80057b6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	799b      	ldrb	r3, [r3, #6]
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f001 f993 	bl	8006ad6 <USBH_ClrFeature>
 80057b0:	4603      	mov	r3, r0
 80057b2:	73fb      	strb	r3, [r7, #15]
      break;
 80057b4:	bf00      	nop
  }
  return status;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	791b      	ldrb	r3, [r3, #4]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f004 faa9 	bl	8009d34 <USBH_LL_GetLastXferSize>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b0d      	cmp	r3, #13
 80057e6:	d002      	beq.n	80057ee <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80057e8:	2302      	movs	r3, #2
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e024      	b.n	8005838 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f2:	4a14      	ldr	r2, [pc, #80]	; (8005844 <USBH_MSC_DecodeCSW+0x84>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d11d      	bne.n	8005834 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	429a      	cmp	r2, r3
 8005802:	d119      	bne.n	8005838 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800580e:	2300      	movs	r3, #0
 8005810:	73fb      	strb	r3, [r7, #15]
 8005812:	e011      	b.n	8005838 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800581a:	2b01      	cmp	r3, #1
 800581c:	d102      	bne.n	8005824 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
 8005822:	e009      	b.n	8005838 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800582a:	2b02      	cmp	r3, #2
 800582c:	d104      	bne.n	8005838 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800582e:	2302      	movs	r3, #2
 8005830:	73fb      	strb	r3, [r7, #15]
 8005832:	e001      	b.n	8005838 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8005834:	2302      	movs	r3, #2
 8005836:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	53425355 	.word	0x53425355

08005848 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005854:	2302      	movs	r3, #2
 8005856:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005868:	2b01      	cmp	r3, #1
 800586a:	d002      	beq.n	8005872 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800586c:	2b02      	cmp	r3, #2
 800586e:	d021      	beq.n	80058b4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005870:	e028      	b.n	80058c4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2200      	movs	r2, #0
 8005876:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	220a      	movs	r2, #10
 8005884:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	3363      	adds	r3, #99	; 0x63
 800588c:	2210      	movs	r2, #16
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f004 fc07 	bl	800a0a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
      break;
 80058b2:	e007      	b.n	80058c4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fd87 	bl	80053cc <USBH_MSC_BOT_Process>
 80058be:	4603      	mov	r3, r0
 80058c0:	73fb      	strb	r3, [r7, #15]
      break;
 80058c2:	bf00      	nop
  }

  return error;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b086      	sub	sp, #24
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	460b      	mov	r3, r1
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80058dc:	2301      	movs	r3, #1
 80058de:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d002      	beq.n	80058fa <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d027      	beq.n	8005948 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80058f8:	e05f      	b.n	80059ba <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2208      	movs	r2, #8
 80058fe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2280      	movs	r2, #128	; 0x80
 8005904:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	220a      	movs	r2, #10
 800590c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	3363      	adds	r3, #99	; 0x63
 8005914:	2210      	movs	r2, #16
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f004 fbc3 	bl	800a0a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2225      	movs	r2, #37	; 0x25
 8005922:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f103 0210 	add.w	r2, r3, #16
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
      break;
 8005946:	e038      	b.n	80059ba <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005948:	7afb      	ldrb	r3, [r7, #11]
 800594a:	4619      	mov	r1, r3
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f7ff fd3d 	bl	80053cc <USBH_MSC_BOT_Process>
 8005952:	4603      	mov	r3, r0
 8005954:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d12d      	bne.n	80059b8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005962:	3303      	adds	r3, #3
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800596e:	3302      	adds	r3, #2
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800597c:	3301      	adds	r3, #1
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005982:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599a:	3307      	adds	r3, #7
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a6:	3306      	adds	r3, #6
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4313      	orrs	r3, r2
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	809a      	strh	r2, [r3, #4]
      break;
 80059b8:	bf00      	nop
  }

  return error;
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	460b      	mov	r3, r1
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80059d2:	2302      	movs	r3, #2
 80059d4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d002      	beq.n	80059f0 <USBH_MSC_SCSI_Inquiry+0x2c>
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d03d      	beq.n	8005a6a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80059ee:	e089      	b.n	8005b04 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2280      	movs	r2, #128	; 0x80
 80059fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	220a      	movs	r2, #10
 8005a02:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	3363      	adds	r3, #99	; 0x63
 8005a0a:	220a      	movs	r2, #10
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f004 fb48 	bl	800a0a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2212      	movs	r2, #18
 8005a18:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005a1c:	7afb      	ldrb	r3, [r7, #11]
 8005a1e:	015b      	lsls	r3, r3, #5
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f103 0210 	add.w	r2, r3, #16
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005a64:	2301      	movs	r3, #1
 8005a66:	75fb      	strb	r3, [r7, #23]
      break;
 8005a68:	e04c      	b.n	8005b04 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005a6a:	7afb      	ldrb	r3, [r7, #11]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff fcac 	bl	80053cc <USBH_MSC_BOT_Process>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d141      	bne.n	8005b02 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8005a7e:	2222      	movs	r2, #34	; 0x22
 8005a80:	2100      	movs	r1, #0
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f004 fb0e 	bl	800a0a4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	da03      	bge.n	8005ac2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	709a      	strb	r2, [r3, #2]
 8005ac0:	e002      	b.n	8005ac8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	1cd8      	adds	r0, r3, #3
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f004 fad6 	bl	800a088 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f103 000c 	add.w	r0, r3, #12
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae8:	3310      	adds	r3, #16
 8005aea:	2210      	movs	r2, #16
 8005aec:	4619      	mov	r1, r3
 8005aee:	f004 facb 	bl	800a088 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	331d      	adds	r3, #29
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8005afc:	3220      	adds	r2, #32
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	601a      	str	r2, [r3, #0]
      break;
 8005b02:	bf00      	nop
  }

  return error;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b086      	sub	sp, #24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	460b      	mov	r3, r1
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d002      	beq.n	8005b3a <USBH_MSC_SCSI_RequestSense+0x2c>
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d03d      	beq.n	8005bb4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8005b38:	e05d      	b.n	8005bf6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	220e      	movs	r2, #14
 8005b3e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	220a      	movs	r2, #10
 8005b4c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	3363      	adds	r3, #99	; 0x63
 8005b54:	2210      	movs	r2, #16
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f004 faa3 	bl	800a0a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2203      	movs	r2, #3
 8005b62:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8005b66:	7afb      	ldrb	r3, [r7, #11]
 8005b68:	015b      	lsls	r3, r3, #5
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	220e      	movs	r2, #14
 8005b86:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f103 0210 	add.w	r2, r3, #16
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb2:	e020      	b.n	8005bf6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005bb4:	7afb      	ldrb	r3, [r7, #11]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff fc07 	bl	80053cc <USBH_MSC_BOT_Process>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d115      	bne.n	8005bf4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bce:	3302      	adds	r3, #2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	7b1a      	ldrb	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bee:	7b5a      	ldrb	r2, [r3, #13]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	709a      	strb	r2, [r3, #2]
      break;
 8005bf4:	bf00      	nop
  }

  return error;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005c10:	2302      	movs	r3, #2
 8005c12:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d002      	beq.n	8005c2e <USBH_MSC_SCSI_Write+0x2e>
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d047      	beq.n	8005cbc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005c2c:	e04e      	b.n	8005ccc <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005c34:	461a      	mov	r2, r3
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	fb03 f202 	mul.w	r2, r3, r2
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	220a      	movs	r2, #10
 8005c4c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	3363      	adds	r3, #99	; 0x63
 8005c54:	2210      	movs	r2, #16
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f004 fa23 	bl	800a0a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	222a      	movs	r2, #42	; 0x2a
 8005c62:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005c66:	79fa      	ldrb	r2, [r7, #7]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005c6e:	79ba      	ldrb	r2, [r7, #6]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005c76:	797a      	ldrb	r2, [r7, #5]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	781a      	ldrb	r2, [r3, #0]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005c88:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005c92:	f107 0320 	add.w	r3, r7, #32
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cba:	e007      	b.n	8005ccc <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005cbc:	7afb      	ldrb	r3, [r7, #11]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fb83 	bl	80053cc <USBH_MSC_BOT_Process>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cca:	bf00      	nop
  }

  return error;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d002      	beq.n	8005d04 <USBH_MSC_SCSI_Read+0x2e>
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d047      	beq.n	8005d92 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8005d02:	e04e      	b.n	8005da2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	fb03 f202 	mul.w	r2, r3, r2
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	220a      	movs	r2, #10
 8005d22:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3363      	adds	r3, #99	; 0x63
 8005d2a:	2210      	movs	r2, #16
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f004 f9b8 	bl	800a0a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2228      	movs	r2, #40	; 0x28
 8005d38:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8005d3c:	79fa      	ldrb	r2, [r7, #7]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8005d44:	79ba      	ldrb	r2, [r7, #6]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8005d4c:	797a      	ldrb	r2, [r7, #5]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8005d54:	1d3b      	adds	r3, r7, #4
 8005d56:	781a      	ldrb	r2, [r3, #0]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8005d5e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8005d68:	f107 0320 	add.w	r3, r7, #32
 8005d6c:	781a      	ldrb	r2, [r3, #0]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d90:	e007      	b.n	8005da2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	4619      	mov	r1, r3
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff fb18 	bl	80053cc <USBH_MSC_BOT_Process>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005da0:	bf00      	nop
  }

  return error;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e029      	b.n	8005e18 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	79fa      	ldrb	r2, [r7, #7]
 8005dc8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f81f 	bl	8005e20 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f003 fedb 	bl	8009bcc <USBH_LL_Init>

  return USBH_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e009      	b.n	8005e46 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	33e0      	adds	r3, #224	; 0xe0
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b0e      	cmp	r3, #14
 8005e4a:	d9f2      	bls.n	8005e32 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e009      	b.n	8005e66 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e6c:	d3f1      	bcc.n	8005e52 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2240      	movs	r2, #64	; 0x40
 8005e92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d016      	beq.n	8005f0a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10e      	bne.n	8005f04 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005eec:	1c59      	adds	r1, r3, #1
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	33de      	adds	r3, #222	; 0xde
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	e004      	b.n	8005f0e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f04:	2302      	movs	r3, #2
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e001      	b.n	8005f0e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d204      	bcs.n	8005f42 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005f40:	e001      	b.n	8005f46 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f42:	2302      	movs	r3, #2
 8005f44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	70fb      	strb	r3, [r7, #3]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70bb      	strb	r3, [r7, #2]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005f7c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005f7e:	e025      	b.n	8005fcc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	221a      	movs	r2, #26
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	3308      	adds	r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3302      	adds	r3, #2
 8005f90:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	795b      	ldrb	r3, [r3, #5]
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d002      	beq.n	8005fa2 <USBH_FindInterface+0x4e>
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	2bff      	cmp	r3, #255	; 0xff
 8005fa0:	d111      	bne.n	8005fc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fa6:	78ba      	ldrb	r2, [r7, #2]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d002      	beq.n	8005fb2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fac:	78bb      	ldrb	r3, [r7, #2]
 8005fae:	2bff      	cmp	r3, #255	; 0xff
 8005fb0:	d109      	bne.n	8005fc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fb6:	787a      	ldrb	r2, [r7, #1]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d002      	beq.n	8005fc2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fbc:	787b      	ldrb	r3, [r7, #1]
 8005fbe:	2bff      	cmp	r3, #255	; 0xff
 8005fc0:	d101      	bne.n	8005fc6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	e006      	b.n	8005fd4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d9d6      	bls.n	8005f80 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005fd2:	23ff      	movs	r3, #255	; 0xff
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f003 fe2b 	bl	8009c44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005fee:	2101      	movs	r1, #1
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f003 ff44 	bl	8009e7e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af04      	add	r7, sp, #16
 8006006:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006008:	2302      	movs	r3, #2
 800600a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d102      	bne.n	8006022 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2203      	movs	r2, #3
 8006020:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b0b      	cmp	r3, #11
 800602a:	f200 81b3 	bhi.w	8006394 <USBH_Process+0x394>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <USBH_Process+0x34>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006065 	.word	0x08006065
 8006038:	08006097 	.word	0x08006097
 800603c:	080060ff 	.word	0x080060ff
 8006040:	0800632f 	.word	0x0800632f
 8006044:	08006395 	.word	0x08006395
 8006048:	080061a3 	.word	0x080061a3
 800604c:	080062d5 	.word	0x080062d5
 8006050:	080061d9 	.word	0x080061d9
 8006054:	080061f9 	.word	0x080061f9
 8006058:	08006219 	.word	0x08006219
 800605c:	08006247 	.word	0x08006247
 8006060:	08006317 	.word	0x08006317
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8193 	beq.w	8006398 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006078:	20c8      	movs	r0, #200	; 0xc8
 800607a:	f003 ff77 	bl	8009f6c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f003 fe3d 	bl	8009cfe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006094:	e180      	b.n	8006398 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800609c:	2b01      	cmp	r3, #1
 800609e:	d107      	bne.n	80060b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060ae:	e182      	b.n	80063b6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ba:	d914      	bls.n	80060e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d903      	bls.n	80060de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	220d      	movs	r2, #13
 80060da:	701a      	strb	r2, [r3, #0]
      break;
 80060dc:	e16b      	b.n	80063b6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
      break;
 80060e4:	e167      	b.n	80063b6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060ec:	f103 020a 	add.w	r2, r3, #10
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80060f6:	200a      	movs	r0, #10
 80060f8:	f003 ff38 	bl	8009f6c <USBH_Delay>
      break;
 80060fc:	e15b      	b.n	80063b6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800610e:	2104      	movs	r1, #4
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006114:	2064      	movs	r0, #100	; 0x64
 8006116:	f003 ff29 	bl	8009f6c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f003 fdc8 	bl	8009cb0 <USBH_LL_GetSpeed>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2205      	movs	r2, #5
 800612e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006130:	2100      	movs	r1, #0
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 f92f 	bl	8007396 <USBH_AllocPipe>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 f927 	bl	8007396 <USBH_AllocPipe>
 8006148:	4603      	mov	r3, r0
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7919      	ldrb	r1, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006164:	b292      	uxth	r2, r2
 8006166:	9202      	str	r2, [sp, #8]
 8006168:	2200      	movs	r2, #0
 800616a:	9201      	str	r2, [sp, #4]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	4603      	mov	r3, r0
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 f8e0 	bl	8007338 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7959      	ldrb	r1, [r3, #5]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800618c:	b292      	uxth	r2, r2
 800618e:	9202      	str	r2, [sp, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	9201      	str	r2, [sp, #4]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	4603      	mov	r3, r0
 8006198:	2200      	movs	r2, #0
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 f8cc 	bl	8007338 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061a0:	e109      	b.n	80063b6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f90c 	bl	80063c0 <USBH_HandleEnum>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 80f3 	bne.w	800639c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d103      	bne.n	80061d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2208      	movs	r2, #8
 80061cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80061ce:	e0e5      	b.n	800639c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2207      	movs	r2, #7
 80061d4:	701a      	strb	r2, [r3, #0]
      break;
 80061d6:	e0e1      	b.n	800639c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80de 	beq.w	80063a0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061ea:	2101      	movs	r1, #1
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2208      	movs	r2, #8
 80061f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80061f6:	e0d3      	b.n	80063a0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80061fe:	b29b      	uxth	r3, r3
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc20 	bl	8006a48 <USBH_SetCfg>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 80ca 	bne.w	80063a4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2209      	movs	r2, #9
 8006214:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006216:	e0c5      	b.n	80063a4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006226:	2101      	movs	r1, #1
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fc30 	bl	8006a8e <USBH_SetFeature>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 80b9 	bne.w	80063a8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	220a      	movs	r2, #10
 800623a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800623c:	e0b4      	b.n	80063a8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	220a      	movs	r2, #10
 8006242:	701a      	strb	r2, [r3, #0]
      break;
 8006244:	e0b0      	b.n	80063a8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80ad 	beq.w	80063ac <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
 800625e:	e016      	b.n	800628e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006260:	7bfa      	ldrb	r2, [r7, #15]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	32de      	adds	r2, #222	; 0xde
 8006266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626a:	791a      	ldrb	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006272:	429a      	cmp	r2, r3
 8006274:	d108      	bne.n	8006288 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006276:	7bfa      	ldrb	r2, [r7, #15]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	32de      	adds	r2, #222	; 0xde
 800627c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006286:	e005      	b.n	8006294 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	3301      	adds	r3, #1
 800628c:	73fb      	strb	r3, [r7, #15]
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0e5      	beq.n	8006260 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2206      	movs	r2, #6
 80062b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062bc:	2103      	movs	r1, #3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062c2:	e073      	b.n	80063ac <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	220d      	movs	r2, #13
 80062c8:	701a      	strb	r2, [r3, #0]
      break;
 80062ca:	e06f      	b.n	80063ac <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	220d      	movs	r2, #13
 80062d0:	701a      	strb	r2, [r3, #0]
      break;
 80062d2:	e06b      	b.n	80063ac <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d017      	beq.n	800630e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	220b      	movs	r2, #11
 80062fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062fc:	e058      	b.n	80063b0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d154      	bne.n	80063b0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	220d      	movs	r2, #13
 800630a:	701a      	strb	r2, [r3, #0]
      break;
 800630c:	e050      	b.n	80063b0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	220d      	movs	r2, #13
 8006312:	701a      	strb	r2, [r3, #0]
      break;
 8006314:	e04c      	b.n	80063b0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d049      	beq.n	80063b4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
      }
      break;
 800632c:	e042      	b.n	80063b4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fd72 	bl	8005e20 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800636a:	2105      	movs	r1, #5
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	d107      	bne.n	800638c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fe2b 	bl	8005fe0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800638a:	e014      	b.n	80063b6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f003 fc59 	bl	8009c44 <USBH_LL_Start>
      break;
 8006392:	e010      	b.n	80063b6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006394:	bf00      	nop
 8006396:	e00e      	b.n	80063b6 <USBH_Process+0x3b6>
      break;
 8006398:	bf00      	nop
 800639a:	e00c      	b.n	80063b6 <USBH_Process+0x3b6>
      break;
 800639c:	bf00      	nop
 800639e:	e00a      	b.n	80063b6 <USBH_Process+0x3b6>
    break;
 80063a0:	bf00      	nop
 80063a2:	e008      	b.n	80063b6 <USBH_Process+0x3b6>
      break;
 80063a4:	bf00      	nop
 80063a6:	e006      	b.n	80063b6 <USBH_Process+0x3b6>
      break;
 80063a8:	bf00      	nop
 80063aa:	e004      	b.n	80063b6 <USBH_Process+0x3b6>
      break;
 80063ac:	bf00      	nop
 80063ae:	e002      	b.n	80063b6 <USBH_Process+0x3b6>
      break;
 80063b0:	bf00      	nop
 80063b2:	e000      	b.n	80063b6 <USBH_Process+0x3b6>
      break;
 80063b4:	bf00      	nop
  }
  return USBH_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af04      	add	r7, sp, #16
 80063c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b07      	cmp	r3, #7
 80063d6:	f200 81c1 	bhi.w	800675c <USBH_HandleEnum+0x39c>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <USBH_HandleEnum+0x20>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006401 	.word	0x08006401
 80063e4:	080064bf 	.word	0x080064bf
 80063e8:	08006529 	.word	0x08006529
 80063ec:	080065b7 	.word	0x080065b7
 80063f0:	08006621 	.word	0x08006621
 80063f4:	08006691 	.word	0x08006691
 80063f8:	080066d7 	.word	0x080066d7
 80063fc:	0800671d 	.word	0x0800671d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006400:	2108      	movs	r1, #8
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa50 	bl	80068a8 <USBH_Get_DevDesc>
 8006408:	4603      	mov	r3, r0
 800640a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d130      	bne.n	8006474 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	7919      	ldrb	r1, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006436:	b292      	uxth	r2, r2
 8006438:	9202      	str	r2, [sp, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	9201      	str	r2, [sp, #4]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	4603      	mov	r3, r0
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 ff77 	bl	8007338 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	7959      	ldrb	r1, [r3, #5]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800645e:	b292      	uxth	r2, r2
 8006460:	9202      	str	r2, [sp, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	9201      	str	r2, [sp, #4]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	4603      	mov	r3, r0
 800646a:	2200      	movs	r2, #0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 ff63 	bl	8007338 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006472:	e175      	b.n	8006760 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	2b03      	cmp	r3, #3
 8006478:	f040 8172 	bne.w	8006760 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006482:	3301      	adds	r3, #1
 8006484:	b2da      	uxtb	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006492:	2b03      	cmp	r3, #3
 8006494:	d903      	bls.n	800649e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	220d      	movs	r2, #13
 800649a:	701a      	strb	r2, [r3, #0]
      break;
 800649c:	e160      	b.n	8006760 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	795b      	ldrb	r3, [r3, #5]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 ff97 	bl	80073d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	791b      	ldrb	r3, [r3, #4]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 ff91 	bl	80073d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
      break;
 80064bc:	e150      	b.n	8006760 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80064be:	2112      	movs	r1, #18
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f9f1 	bl	80068a8 <USBH_Get_DevDesc>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064d6:	e145      	b.n	8006764 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	f040 8142 	bne.w	8006764 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064e6:	3301      	adds	r3, #1
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d903      	bls.n	8006502 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	220d      	movs	r2, #13
 80064fe:	701a      	strb	r2, [r3, #0]
      break;
 8006500:	e130      	b.n	8006764 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	795b      	ldrb	r3, [r3, #5]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 ff65 	bl	80073d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	791b      	ldrb	r3, [r3, #4]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 ff5f 	bl	80073d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
      break;
 8006526:	e11d      	b.n	8006764 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006528:	2101      	movs	r1, #1
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa68 	bl	8006a00 <USBH_SetAddress>
 8006530:	4603      	mov	r3, r0
 8006532:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d132      	bne.n	80065a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800653a:	2002      	movs	r0, #2
 800653c:	f003 fd16 	bl	8009f6c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2203      	movs	r2, #3
 800654c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7919      	ldrb	r1, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006562:	b292      	uxth	r2, r2
 8006564:	9202      	str	r2, [sp, #8]
 8006566:	2200      	movs	r2, #0
 8006568:	9201      	str	r2, [sp, #4]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	4603      	mov	r3, r0
 800656e:	2280      	movs	r2, #128	; 0x80
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fee1 	bl	8007338 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	7959      	ldrb	r1, [r3, #5]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800658a:	b292      	uxth	r2, r2
 800658c:	9202      	str	r2, [sp, #8]
 800658e:	2200      	movs	r2, #0
 8006590:	9201      	str	r2, [sp, #4]
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	4603      	mov	r3, r0
 8006596:	2200      	movs	r2, #0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fecd 	bl	8007338 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800659e:	e0e3      	b.n	8006768 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	f040 80e0 	bne.w	8006768 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	220d      	movs	r2, #13
 80065ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	705a      	strb	r2, [r3, #1]
      break;
 80065b4:	e0d8      	b.n	8006768 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80065b6:	2109      	movs	r1, #9
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f99d 	bl	80068f8 <USBH_Get_CfgDesc>
 80065be:	4603      	mov	r3, r0
 80065c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2204      	movs	r2, #4
 80065cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80065ce:	e0cd      	b.n	800676c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	f040 80ca 	bne.w	800676c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065de:	3301      	adds	r3, #1
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d903      	bls.n	80065fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	220d      	movs	r2, #13
 80065f6:	701a      	strb	r2, [r3, #0]
      break;
 80065f8:	e0b8      	b.n	800676c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	795b      	ldrb	r3, [r3, #5]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fee9 	bl	80073d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	791b      	ldrb	r3, [r3, #4]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fee3 	bl	80073d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
      break;
 800661e:	e0a5      	b.n	800676c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f965 	bl	80068f8 <USBH_Get_CfgDesc>
 800662e:	4603      	mov	r3, r0
 8006630:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2205      	movs	r2, #5
 800663c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800663e:	e097      	b.n	8006770 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b03      	cmp	r3, #3
 8006644:	f040 8094 	bne.w	8006770 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800664e:	3301      	adds	r3, #1
 8006650:	b2da      	uxtb	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800665e:	2b03      	cmp	r3, #3
 8006660:	d903      	bls.n	800666a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	220d      	movs	r2, #13
 8006666:	701a      	strb	r2, [r3, #0]
      break;
 8006668:	e082      	b.n	8006770 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	795b      	ldrb	r3, [r3, #5]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 feb1 	bl	80073d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	791b      	ldrb	r3, [r3, #4]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 feab 	bl	80073d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	701a      	strb	r2, [r3, #0]
      break;
 800668e:	e06f      	b.n	8006770 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006696:	2b00      	cmp	r3, #0
 8006698:	d019      	beq.n	80066ce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066a6:	23ff      	movs	r3, #255	; 0xff
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f949 	bl	8006940 <USBH_Get_StringDesc>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2206      	movs	r2, #6
 80066bc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80066be:	e059      	b.n	8006774 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d156      	bne.n	8006774 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2206      	movs	r2, #6
 80066ca:	705a      	strb	r2, [r3, #1]
      break;
 80066cc:	e052      	b.n	8006774 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2206      	movs	r2, #6
 80066d2:	705a      	strb	r2, [r3, #1]
      break;
 80066d4:	e04e      	b.n	8006774 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d019      	beq.n	8006714 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80066ec:	23ff      	movs	r3, #255	; 0xff
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f926 	bl	8006940 <USBH_Get_StringDesc>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d103      	bne.n	8006706 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2207      	movs	r2, #7
 8006702:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006704:	e038      	b.n	8006778 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	2b03      	cmp	r3, #3
 800670a:	d135      	bne.n	8006778 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2207      	movs	r2, #7
 8006710:	705a      	strb	r2, [r3, #1]
      break;
 8006712:	e031      	b.n	8006778 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2207      	movs	r2, #7
 8006718:	705a      	strb	r2, [r3, #1]
      break;
 800671a:	e02d      	b.n	8006778 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006722:	2b00      	cmp	r3, #0
 8006724:	d017      	beq.n	8006756 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006732:	23ff      	movs	r3, #255	; 0xff
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f903 	bl	8006940 <USBH_Get_StringDesc>
 800673a:	4603      	mov	r3, r0
 800673c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d102      	bne.n	800674a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006748:	e018      	b.n	800677c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	2b03      	cmp	r3, #3
 800674e:	d115      	bne.n	800677c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73fb      	strb	r3, [r7, #15]
      break;
 8006754:	e012      	b.n	800677c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
      break;
 800675a:	e00f      	b.n	800677c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800675c:	bf00      	nop
 800675e:	e00e      	b.n	800677e <USBH_HandleEnum+0x3be>
      break;
 8006760:	bf00      	nop
 8006762:	e00c      	b.n	800677e <USBH_HandleEnum+0x3be>
      break;
 8006764:	bf00      	nop
 8006766:	e00a      	b.n	800677e <USBH_HandleEnum+0x3be>
      break;
 8006768:	bf00      	nop
 800676a:	e008      	b.n	800677e <USBH_HandleEnum+0x3be>
      break;
 800676c:	bf00      	nop
 800676e:	e006      	b.n	800677e <USBH_HandleEnum+0x3be>
      break;
 8006770:	bf00      	nop
 8006772:	e004      	b.n	800677e <USBH_HandleEnum+0x3be>
      break;
 8006774:	bf00      	nop
 8006776:	e002      	b.n	800677e <USBH_HandleEnum+0x3be>
      break;
 8006778:	bf00      	nop
 800677a:	e000      	b.n	800677e <USBH_HandleEnum+0x3be>
      break;
 800677c:	bf00      	nop
  }
  return Status;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f804 	bl	80067ca <USBH_HandleSof>
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b0b      	cmp	r3, #11
 80067da:	d10a      	bne.n	80067f2 <USBH_HandleSof+0x28>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
  }
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800680a:	bf00      	nop
}
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006826:	bf00      	nop
}
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f003 f9fa 	bl	8009c7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	791b      	ldrb	r3, [r3, #4]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fda3 	bl	80073d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	795b      	ldrb	r3, [r3, #5]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fd9d 	bl	80073d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f864 	bl	8006996 <USBH_GetDescriptor>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f203 3026 	addw	r0, r3, #806	; 0x326
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	b292      	uxth	r2, r2
 80068e8:	4619      	mov	r1, r3
 80068ea:	f000 f918 	bl	8006b1e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	331c      	adds	r3, #28
 8006908:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800690a:	887b      	ldrh	r3, [r7, #2]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006914:	2100      	movs	r1, #0
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f83d 	bl	8006996 <USBH_GetDescriptor>
 800691c:	4603      	mov	r3, r0
 800691e:	72fb      	strb	r3, [r7, #11]
 8006920:	7afb      	ldrb	r3, [r7, #11]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d107      	bne.n	8006936 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800692c:	887a      	ldrh	r2, [r7, #2]
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 f964 	bl	8006bfe <USBH_ParseCfgDesc>
  }

  return status;
 8006936:	7afb      	ldrb	r3, [r7, #11]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af02      	add	r7, sp, #8
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	607a      	str	r2, [r7, #4]
 800694a:	461a      	mov	r2, r3
 800694c:	460b      	mov	r3, r1
 800694e:	72fb      	strb	r3, [r7, #11]
 8006950:	4613      	mov	r3, r2
 8006952:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800695c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006964:	893b      	ldrh	r3, [r7, #8]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	460b      	mov	r3, r1
 800696a:	2100      	movs	r1, #0
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f812 	bl	8006996 <USBH_GetDescriptor>
 8006972:	4603      	mov	r3, r0
 8006974:	75fb      	strb	r3, [r7, #23]
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d107      	bne.n	800698c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006982:	893a      	ldrh	r2, [r7, #8]
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fa37 	bl	8006dfa <USBH_ParseStringDesc>
  }

  return status;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	607b      	str	r3, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	72fb      	strb	r3, [r7, #11]
 80069a4:	4613      	mov	r3, r2
 80069a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	789b      	ldrb	r3, [r3, #2]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d11c      	bne.n	80069ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2206      	movs	r2, #6
 80069c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	893a      	ldrh	r2, [r7, #8]
 80069c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80069c8:	893b      	ldrh	r3, [r7, #8]
 80069ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069d2:	d104      	bne.n	80069de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f240 4209 	movw	r2, #1033	; 0x409
 80069da:	829a      	strh	r2, [r3, #20]
 80069dc:	e002      	b.n	80069e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8b3a      	ldrh	r2, [r7, #24]
 80069e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80069ea:	8b3b      	ldrh	r3, [r7, #24]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fa50 	bl	8006e96 <USBH_CtlReq>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	789b      	ldrb	r3, [r3, #2]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d10f      	bne.n	8006a34 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2205      	movs	r2, #5
 8006a1e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a34:	2200      	movs	r2, #0
 8006a36:	2100      	movs	r1, #0
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa2c 	bl	8006e96 <USBH_CtlReq>
 8006a3e:	4603      	mov	r3, r0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	789b      	ldrb	r3, [r3, #2]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d10e      	bne.n	8006a7a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2209      	movs	r2, #9
 8006a66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	887a      	ldrh	r2, [r7, #2]
 8006a6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa09 	bl	8006e96 <USBH_CtlReq>
 8006a84:	4603      	mov	r3, r0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	460b      	mov	r3, r1
 8006a98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	789b      	ldrb	r3, [r3, #2]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d10f      	bne.n	8006ac2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2203      	movs	r2, #3
 8006aac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f9e5 	bl	8006e96 <USBH_CtlReq>
 8006acc:	4603      	mov	r3, r0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	789b      	ldrb	r3, [r3, #2]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d10f      	bne.n	8006b0a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f9c1 	bl	8006e96 <USBH_CtlReq>
 8006b14:	4603      	mov	r3, r0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	781a      	ldrb	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	785a      	ldrb	r2, [r3, #1]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	3302      	adds	r3, #2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	3303      	adds	r3, #3
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	4313      	orrs	r3, r2
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	791a      	ldrb	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	795a      	ldrb	r2, [r3, #5]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	799a      	ldrb	r2, [r3, #6]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	79da      	ldrb	r2, [r3, #7]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d939      	bls.n	8006bf2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	3308      	adds	r3, #8
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	3309      	adds	r3, #9
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	330a      	adds	r3, #10
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	330b      	adds	r3, #11
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	330d      	adds	r3, #13
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	7b9a      	ldrb	r2, [r3, #14]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	7bda      	ldrb	r2, [r3, #15]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	7c1a      	ldrb	r2, [r3, #16]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	7c5a      	ldrb	r2, [r3, #17]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	745a      	strb	r2, [r3, #17]
  }
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b08a      	sub	sp, #40	; 0x28
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	785a      	ldrb	r2, [r3, #1]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3302      	adds	r3, #2
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	3303      	adds	r3, #3
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	791a      	ldrb	r2, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	795a      	ldrb	r2, [r3, #5]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	799a      	ldrb	r2, [r3, #6]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	79da      	ldrb	r2, [r3, #7]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	7a1a      	ldrb	r2, [r3, #8]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	2b09      	cmp	r3, #9
 8006c78:	d95f      	bls.n	8006d3a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006c7a:	2309      	movs	r3, #9
 8006c7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c82:	e051      	b.n	8006d28 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006c84:	f107 0316 	add.w	r3, r7, #22
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c8c:	f000 f8e8 	bl	8006e60 <USBH_GetNextDesc>
 8006c90:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	785b      	ldrb	r3, [r3, #1]
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d146      	bne.n	8006d28 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c9e:	221a      	movs	r2, #26
 8006ca0:	fb02 f303 	mul.w	r3, r2, r3
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	3302      	adds	r3, #2
 8006cac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cb0:	69f8      	ldr	r0, [r7, #28]
 8006cb2:	f000 f846 	bl	8006d42 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006cc0:	e022      	b.n	8006d08 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006cc2:	f107 0316 	add.w	r3, r7, #22
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cca:	f000 f8c9 	bl	8006e60 <USBH_GetNextDesc>
 8006cce:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b05      	cmp	r3, #5
 8006cd6:	d117      	bne.n	8006d08 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cdc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ce0:	3201      	adds	r2, #1
 8006ce2:	00d2      	lsls	r2, r2, #3
 8006ce4:	211a      	movs	r1, #26
 8006ce6:	fb01 f303 	mul.w	r3, r1, r3
 8006cea:	4413      	add	r3, r2
 8006cec:	3308      	adds	r3, #8
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cf8:	69b8      	ldr	r0, [r7, #24]
 8006cfa:	f000 f851 	bl	8006da0 <USBH_ParseEPDesc>
            ep_ix++;
 8006cfe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006d02:	3301      	adds	r3, #1
 8006d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	791b      	ldrb	r3, [r3, #4]
 8006d0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d204      	bcs.n	8006d1e <USBH_ParseCfgDesc+0x120>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	885a      	ldrh	r2, [r3, #2]
 8006d18:	8afb      	ldrh	r3, [r7, #22]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d8d1      	bhi.n	8006cc2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d22:	3301      	adds	r3, #1
 8006d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d804      	bhi.n	8006d3a <USBH_ParseCfgDesc+0x13c>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	885a      	ldrh	r2, [r3, #2]
 8006d34:	8afb      	ldrh	r3, [r7, #22]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d8a4      	bhi.n	8006c84 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	3728      	adds	r7, #40	; 0x28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	785a      	ldrb	r2, [r3, #1]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	789a      	ldrb	r2, [r3, #2]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	78da      	ldrb	r2, [r3, #3]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	791a      	ldrb	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	795a      	ldrb	r2, [r3, #5]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	799a      	ldrb	r2, [r3, #6]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	79da      	ldrb	r2, [r3, #7]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	7a1a      	ldrb	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	721a      	strb	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	785a      	ldrb	r2, [r3, #1]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	789a      	ldrb	r2, [r3, #2]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	78da      	ldrb	r2, [r3, #3]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	3305      	adds	r3, #5
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	4313      	orrs	r3, r2
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	799a      	ldrb	r2, [r3, #6]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	719a      	strb	r2, [r3, #6]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b087      	sub	sp, #28
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	4613      	mov	r3, r2
 8006e06:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d120      	bne.n	8006e54 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	1e9a      	subs	r2, r3, #2
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	bf28      	it	cs
 8006e1e:	4613      	movcs	r3, r2
 8006e20:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3302      	adds	r3, #2
 8006e26:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	82fb      	strh	r3, [r7, #22]
 8006e2c:	e00b      	b.n	8006e46 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e2e:	8afb      	ldrh	r3, [r7, #22]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	781a      	ldrb	r2, [r3, #0]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e40:	8afb      	ldrh	r3, [r7, #22]
 8006e42:	3302      	adds	r3, #2
 8006e44:	82fb      	strh	r3, [r7, #22]
 8006e46:	8afa      	ldrh	r2, [r7, #22]
 8006e48:	8abb      	ldrh	r3, [r7, #20]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d3ef      	bcc.n	8006e2e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]
  }
}
 8006e54:	bf00      	nop
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	881a      	ldrh	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	4413      	add	r3, r2
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4413      	add	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e88:	68fb      	ldr	r3, [r7, #12]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b086      	sub	sp, #24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	60f8      	str	r0, [r7, #12]
 8006e9e:	60b9      	str	r1, [r7, #8]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	789b      	ldrb	r3, [r3, #2]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d002      	beq.n	8006eb6 <USBH_CtlReq+0x20>
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d00f      	beq.n	8006ed4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006eb4:	e027      	b.n	8006f06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	88fa      	ldrh	r2, [r7, #6]
 8006ec0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed2:	e018      	b.n	8006f06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f81b 	bl	8006f10 <USBH_HandleControl>
 8006eda:	4603      	mov	r3, r0
 8006edc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <USBH_CtlReq+0x54>
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d106      	bne.n	8006ef8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	761a      	strb	r2, [r3, #24]
      break;
 8006ef6:	e005      	b.n	8006f04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d102      	bne.n	8006f04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	709a      	strb	r2, [r3, #2]
      break;
 8006f04:	bf00      	nop
  }
  return status;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7e1b      	ldrb	r3, [r3, #24]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	2b0a      	cmp	r3, #10
 8006f28:	f200 8156 	bhi.w	80071d8 <USBH_HandleControl+0x2c8>
 8006f2c:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <USBH_HandleControl+0x24>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	08006f7b 	.word	0x08006f7b
 8006f3c:	08006fe5 	.word	0x08006fe5
 8006f40:	0800700b 	.word	0x0800700b
 8006f44:	08007043 	.word	0x08007043
 8006f48:	0800706d 	.word	0x0800706d
 8006f4c:	080070bf 	.word	0x080070bf
 8006f50:	080070e1 	.word	0x080070e1
 8006f54:	0800711d 	.word	0x0800711d
 8006f58:	08007143 	.word	0x08007143
 8006f5c:	08007181 	.word	0x08007181
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f103 0110 	add.w	r1, r3, #16
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	795b      	ldrb	r3, [r3, #5]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f943 	bl	80071f8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	761a      	strb	r2, [r3, #24]
      break;
 8006f78:	e139      	b.n	80071ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	795b      	ldrb	r3, [r3, #5]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f002 ff69 	bl	8009e58 <USBH_LL_GetURBState>
 8006f86:	4603      	mov	r3, r0
 8006f88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d11e      	bne.n	8006fce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	7c1b      	ldrb	r3, [r3, #16]
 8006f94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8adb      	ldrh	r3, [r3, #22]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006fa2:	7b7b      	ldrb	r3, [r7, #13]
 8006fa4:	2b80      	cmp	r3, #128	; 0x80
 8006fa6:	d103      	bne.n	8006fb0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2203      	movs	r2, #3
 8006fac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006fae:	e115      	b.n	80071dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2205      	movs	r2, #5
 8006fb4:	761a      	strb	r2, [r3, #24]
      break;
 8006fb6:	e111      	b.n	80071dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006fb8:	7b7b      	ldrb	r3, [r7, #13]
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d103      	bne.n	8006fc6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2209      	movs	r2, #9
 8006fc2:	761a      	strb	r2, [r3, #24]
      break;
 8006fc4:	e10a      	b.n	80071dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2207      	movs	r2, #7
 8006fca:	761a      	strb	r2, [r3, #24]
      break;
 8006fcc:	e106      	b.n	80071dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d003      	beq.n	8006fdc <USBH_HandleControl+0xcc>
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	f040 8100 	bne.w	80071dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	220b      	movs	r2, #11
 8006fe0:	761a      	strb	r2, [r3, #24]
      break;
 8006fe2:	e0fb      	b.n	80071dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6899      	ldr	r1, [r3, #8]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	899a      	ldrh	r2, [r3, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	791b      	ldrb	r3, [r3, #4]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f93a 	bl	8007276 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2204      	movs	r2, #4
 8007006:	761a      	strb	r2, [r3, #24]
      break;
 8007008:	e0f1      	b.n	80071ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	791b      	ldrb	r3, [r3, #4]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f002 ff21 	bl	8009e58 <USBH_LL_GetURBState>
 8007016:	4603      	mov	r3, r0
 8007018:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800701a:	7bbb      	ldrb	r3, [r7, #14]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d102      	bne.n	8007026 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2209      	movs	r2, #9
 8007024:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b05      	cmp	r3, #5
 800702a:	d102      	bne.n	8007032 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800702c:	2303      	movs	r3, #3
 800702e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007030:	e0d6      	b.n	80071e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	2b04      	cmp	r3, #4
 8007036:	f040 80d3 	bne.w	80071e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	220b      	movs	r2, #11
 800703e:	761a      	strb	r2, [r3, #24]
      break;
 8007040:	e0ce      	b.n	80071e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6899      	ldr	r1, [r3, #8]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	899a      	ldrh	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	795b      	ldrb	r3, [r3, #5]
 800704e:	2001      	movs	r0, #1
 8007050:	9000      	str	r0, [sp, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f8ea 	bl	800722c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800705e:	b29a      	uxth	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2206      	movs	r2, #6
 8007068:	761a      	strb	r2, [r3, #24]
      break;
 800706a:	e0c0      	b.n	80071ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	795b      	ldrb	r3, [r3, #5]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f002 fef0 	bl	8009e58 <USBH_LL_GetURBState>
 8007078:	4603      	mov	r3, r0
 800707a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d103      	bne.n	800708a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2207      	movs	r2, #7
 8007086:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007088:	e0ac      	b.n	80071e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b05      	cmp	r3, #5
 800708e:	d105      	bne.n	800709c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	220c      	movs	r2, #12
 8007094:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007096:	2303      	movs	r3, #3
 8007098:	73fb      	strb	r3, [r7, #15]
      break;
 800709a:	e0a3      	b.n	80071e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d103      	bne.n	80070aa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2205      	movs	r2, #5
 80070a6:	761a      	strb	r2, [r3, #24]
      break;
 80070a8:	e09c      	b.n	80071e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	f040 8099 	bne.w	80071e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	220b      	movs	r2, #11
 80070b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80070b8:	2302      	movs	r3, #2
 80070ba:	73fb      	strb	r3, [r7, #15]
      break;
 80070bc:	e092      	b.n	80071e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	791b      	ldrb	r3, [r3, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f8d5 	bl	8007276 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2208      	movs	r2, #8
 80070dc:	761a      	strb	r2, [r3, #24]

      break;
 80070de:	e086      	b.n	80071ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	791b      	ldrb	r3, [r3, #4]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f002 feb6 	bl	8009e58 <USBH_LL_GetURBState>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d105      	bne.n	8007102 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	220d      	movs	r2, #13
 80070fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007100:	e072      	b.n	80071e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	2b04      	cmp	r3, #4
 8007106:	d103      	bne.n	8007110 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	220b      	movs	r2, #11
 800710c:	761a      	strb	r2, [r3, #24]
      break;
 800710e:	e06b      	b.n	80071e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b05      	cmp	r3, #5
 8007114:	d168      	bne.n	80071e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007116:	2303      	movs	r3, #3
 8007118:	73fb      	strb	r3, [r7, #15]
      break;
 800711a:	e065      	b.n	80071e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	795b      	ldrb	r3, [r3, #5]
 8007120:	2201      	movs	r2, #1
 8007122:	9200      	str	r2, [sp, #0]
 8007124:	2200      	movs	r2, #0
 8007126:	2100      	movs	r1, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f87f 	bl	800722c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007134:	b29a      	uxth	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	220a      	movs	r2, #10
 800713e:	761a      	strb	r2, [r3, #24]
      break;
 8007140:	e055      	b.n	80071ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f002 fe85 	bl	8009e58 <USBH_LL_GetURBState>
 800714e:	4603      	mov	r3, r0
 8007150:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d105      	bne.n	8007164 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220d      	movs	r2, #13
 8007160:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007162:	e043      	b.n	80071ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d103      	bne.n	8007172 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2209      	movs	r2, #9
 800716e:	761a      	strb	r2, [r3, #24]
      break;
 8007170:	e03c      	b.n	80071ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b04      	cmp	r3, #4
 8007176:	d139      	bne.n	80071ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	220b      	movs	r2, #11
 800717c:	761a      	strb	r2, [r3, #24]
      break;
 800717e:	e035      	b.n	80071ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7e5b      	ldrb	r3, [r3, #25]
 8007184:	3301      	adds	r3, #1
 8007186:	b2da      	uxtb	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	765a      	strb	r2, [r3, #25]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7e5b      	ldrb	r3, [r3, #25]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d806      	bhi.n	80071a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80071a0:	e025      	b.n	80071ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071a8:	2106      	movs	r1, #6
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	795b      	ldrb	r3, [r3, #5]
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f90c 	bl	80073d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	791b      	ldrb	r3, [r3, #4]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f906 	bl	80073d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80071d2:	2302      	movs	r3, #2
 80071d4:	73fb      	strb	r3, [r7, #15]
      break;
 80071d6:	e00a      	b.n	80071ee <USBH_HandleControl+0x2de>

    default:
      break;
 80071d8:	bf00      	nop
 80071da:	e008      	b.n	80071ee <USBH_HandleControl+0x2de>
      break;
 80071dc:	bf00      	nop
 80071de:	e006      	b.n	80071ee <USBH_HandleControl+0x2de>
      break;
 80071e0:	bf00      	nop
 80071e2:	e004      	b.n	80071ee <USBH_HandleControl+0x2de>
      break;
 80071e4:	bf00      	nop
 80071e6:	e002      	b.n	80071ee <USBH_HandleControl+0x2de>
      break;
 80071e8:	bf00      	nop
 80071ea:	e000      	b.n	80071ee <USBH_HandleControl+0x2de>
      break;
 80071ec:	bf00      	nop
  }

  return status;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007206:	79f9      	ldrb	r1, [r7, #7]
 8007208:	2300      	movs	r3, #0
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	2308      	movs	r3, #8
 800720e:	9302      	str	r3, [sp, #8]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	2300      	movs	r3, #0
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2300      	movs	r3, #0
 800721a:	2200      	movs	r2, #0
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f002 fdea 	bl	8009df6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af04      	add	r7, sp, #16
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4611      	mov	r1, r2
 8007238:	461a      	mov	r2, r3
 800723a:	460b      	mov	r3, r1
 800723c:	80fb      	strh	r3, [r7, #6]
 800723e:	4613      	mov	r3, r2
 8007240:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007250:	7979      	ldrb	r1, [r7, #5]
 8007252:	7e3b      	ldrb	r3, [r7, #24]
 8007254:	9303      	str	r3, [sp, #12]
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	9302      	str	r3, [sp, #8]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	2301      	movs	r3, #1
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	2300      	movs	r3, #0
 8007264:	2200      	movs	r2, #0
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f002 fdc5 	bl	8009df6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b088      	sub	sp, #32
 800727a:	af04      	add	r7, sp, #16
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	4611      	mov	r1, r2
 8007282:	461a      	mov	r2, r3
 8007284:	460b      	mov	r3, r1
 8007286:	80fb      	strh	r3, [r7, #6]
 8007288:	4613      	mov	r3, r2
 800728a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800728c:	7979      	ldrb	r1, [r7, #5]
 800728e:	2300      	movs	r3, #0
 8007290:	9303      	str	r3, [sp, #12]
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	9302      	str	r3, [sp, #8]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	2301      	movs	r3, #1
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	2201      	movs	r2, #1
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f002 fda7 	bl	8009df6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80072a8:	2300      	movs	r3, #0

}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b088      	sub	sp, #32
 80072b6:	af04      	add	r7, sp, #16
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	4611      	mov	r1, r2
 80072be:	461a      	mov	r2, r3
 80072c0:	460b      	mov	r3, r1
 80072c2:	80fb      	strh	r3, [r7, #6]
 80072c4:	4613      	mov	r3, r2
 80072c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072d6:	7979      	ldrb	r1, [r7, #5]
 80072d8:	7e3b      	ldrb	r3, [r7, #24]
 80072da:	9303      	str	r3, [sp, #12]
 80072dc:	88fb      	ldrh	r3, [r7, #6]
 80072de:	9302      	str	r3, [sp, #8]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	2301      	movs	r3, #1
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2302      	movs	r3, #2
 80072ea:	2200      	movs	r2, #0
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f002 fd82 	bl	8009df6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af04      	add	r7, sp, #16
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4611      	mov	r1, r2
 8007308:	461a      	mov	r2, r3
 800730a:	460b      	mov	r3, r1
 800730c:	80fb      	strh	r3, [r7, #6]
 800730e:	4613      	mov	r3, r2
 8007310:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007312:	7979      	ldrb	r1, [r7, #5]
 8007314:	2300      	movs	r3, #0
 8007316:	9303      	str	r3, [sp, #12]
 8007318:	88fb      	ldrh	r3, [r7, #6]
 800731a:	9302      	str	r3, [sp, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	2301      	movs	r3, #1
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2302      	movs	r3, #2
 8007326:	2201      	movs	r2, #1
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f002 fd64 	bl	8009df6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af04      	add	r7, sp, #16
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	4608      	mov	r0, r1
 8007342:	4611      	mov	r1, r2
 8007344:	461a      	mov	r2, r3
 8007346:	4603      	mov	r3, r0
 8007348:	70fb      	strb	r3, [r7, #3]
 800734a:	460b      	mov	r3, r1
 800734c:	70bb      	strb	r3, [r7, #2]
 800734e:	4613      	mov	r3, r2
 8007350:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007352:	7878      	ldrb	r0, [r7, #1]
 8007354:	78ba      	ldrb	r2, [r7, #2]
 8007356:	78f9      	ldrb	r1, [r7, #3]
 8007358:	8b3b      	ldrh	r3, [r7, #24]
 800735a:	9302      	str	r3, [sp, #8]
 800735c:	7d3b      	ldrb	r3, [r7, #20]
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	7c3b      	ldrb	r3, [r7, #16]
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	4603      	mov	r3, r0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f002 fcf7 	bl	8009d5a <USBH_LL_OpenPipe>

  return USBH_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 fd16 	bl	8009db8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f836 	bl	8007414 <USBH_GetFreePipe>
 80073a8:	4603      	mov	r3, r0
 80073aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80073ac:	89fb      	ldrh	r3, [r7, #14]
 80073ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00a      	beq.n	80073cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80073b6:	78fa      	ldrb	r2, [r7, #3]
 80073b8:	89fb      	ldrh	r3, [r7, #14]
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	33e0      	adds	r3, #224	; 0xe0
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80073cc:	89fb      	ldrh	r3, [r7, #14]
 80073ce:	b2db      	uxtb	r3, r3
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	2b0a      	cmp	r3, #10
 80073e8:	d80d      	bhi.n	8007406 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	33e0      	adds	r3, #224	; 0xe0
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	33e0      	adds	r3, #224	; 0xe0
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	440b      	add	r3, r1
 8007404:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
 8007424:	e00f      	b.n	8007446 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	33e0      	adds	r3, #224	; 0xe0
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	b29b      	uxth	r3, r3
 800743e:	e007      	b.n	8007450 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	3301      	adds	r3, #1
 8007444:	73fb      	strb	r3, [r7, #15]
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2b0a      	cmp	r3, #10
 800744a:	d9ec      	bls.n	8007426 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800744c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	4a08      	ldr	r2, [pc, #32]	; (800748c <disk_status+0x30>)
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	79fa      	ldrb	r2, [r7, #7]
 8007474:	4905      	ldr	r1, [pc, #20]	; (800748c <disk_status+0x30>)
 8007476:	440a      	add	r2, r1
 8007478:	7a12      	ldrb	r2, [r2, #8]
 800747a:	4610      	mov	r0, r2
 800747c:	4798      	blx	r3
 800747e:	4603      	mov	r3, r0
 8007480:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200000dc 	.word	0x200000dc

08007490 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	4a0d      	ldr	r2, [pc, #52]	; (80074d8 <disk_initialize+0x48>)
 80074a2:	5cd3      	ldrb	r3, [r2, r3]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d111      	bne.n	80074cc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	4a0b      	ldr	r2, [pc, #44]	; (80074d8 <disk_initialize+0x48>)
 80074ac:	2101      	movs	r1, #1
 80074ae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <disk_initialize+0x48>)
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	79fa      	ldrb	r2, [r7, #7]
 80074be:	4906      	ldr	r1, [pc, #24]	; (80074d8 <disk_initialize+0x48>)
 80074c0:	440a      	add	r2, r1
 80074c2:	7a12      	ldrb	r2, [r2, #8]
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200000dc 	.word	0x200000dc

080074dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	4a0a      	ldr	r2, [pc, #40]	; (8007518 <disk_read+0x3c>)
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	689c      	ldr	r4, [r3, #8]
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	4a07      	ldr	r2, [pc, #28]	; (8007518 <disk_read+0x3c>)
 80074fc:	4413      	add	r3, r2
 80074fe:	7a18      	ldrb	r0, [r3, #8]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	47a0      	blx	r4
 8007508:	4603      	mov	r3, r0
 800750a:	75fb      	strb	r3, [r7, #23]
  return res;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
}
 800750e:	4618      	mov	r0, r3
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	bd90      	pop	{r4, r7, pc}
 8007516:	bf00      	nop
 8007518:	200000dc 	.word	0x200000dc

0800751c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <disk_write+0x3c>)
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	68dc      	ldr	r4, [r3, #12]
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	4a07      	ldr	r2, [pc, #28]	; (8007558 <disk_write+0x3c>)
 800753c:	4413      	add	r3, r2
 800753e:	7a18      	ldrb	r0, [r3, #8]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	47a0      	blx	r4
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]
  return res;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
}
 800754e:	4618      	mov	r0, r3
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	bd90      	pop	{r4, r7, pc}
 8007556:	bf00      	nop
 8007558:	200000dc 	.word	0x200000dc

0800755c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	603a      	str	r2, [r7, #0]
 8007566:	71fb      	strb	r3, [r7, #7]
 8007568:	460b      	mov	r3, r1
 800756a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	4a09      	ldr	r2, [pc, #36]	; (8007594 <disk_ioctl+0x38>)
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	79fa      	ldrb	r2, [r7, #7]
 800757a:	4906      	ldr	r1, [pc, #24]	; (8007594 <disk_ioctl+0x38>)
 800757c:	440a      	add	r2, r1
 800757e:	7a10      	ldrb	r0, [r2, #8]
 8007580:	79b9      	ldrb	r1, [r7, #6]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	4798      	blx	r3
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]
  return res;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	200000dc 	.word	0x200000dc

08007598 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3301      	adds	r3, #1
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80075a8:	89fb      	ldrh	r3, [r7, #14]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	b21a      	sxth	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	b21b      	sxth	r3, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b21b      	sxth	r3, r3
 80075b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80075ba:	89fb      	ldrh	r3, [r7, #14]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3303      	adds	r3, #3
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	3202      	adds	r2, #2
 80075e0:	7812      	ldrb	r2, [r2, #0]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	3201      	adds	r2, #1
 80075ee:	7812      	ldrb	r2, [r2, #0]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	7812      	ldrb	r2, [r2, #0]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
	return rv;
 8007600:	68fb      	ldr	r3, [r7, #12]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	887a      	ldrh	r2, [r7, #2]
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	887b      	ldrh	r3, [r7, #2]
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	887a      	ldrh	r2, [r7, #2]
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	0a1b      	lsrs	r3, r3, #8
 800765e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	607a      	str	r2, [r7, #4]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	701a      	strb	r2, [r3, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	0a1b      	lsrs	r3, r3, #8
 8007682:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	607a      	str	r2, [r7, #4]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00d      	beq.n	80076d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	1c53      	adds	r3, r2, #1
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	1c59      	adds	r1, r3, #1
 80076c0:	6179      	str	r1, [r7, #20]
 80076c2:	7812      	ldrb	r2, [r2, #0]
 80076c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f1      	bne.n	80076b6 <mem_cpy+0x1a>
	}
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80076de:	b480      	push	{r7}
 80076e0:	b087      	sub	sp, #28
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	617a      	str	r2, [r7, #20]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1f3      	bne.n	80076ee <mem_set+0x10>
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007714:	b480      	push	{r7}
 8007716:	b089      	sub	sp, #36	; 0x24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	61fa      	str	r2, [r7, #28]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	4619      	mov	r1, r3
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	61ba      	str	r2, [r7, #24]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	1acb      	subs	r3, r1, r3
 8007740:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3b01      	subs	r3, #1
 8007746:	607b      	str	r3, [r7, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <mem_cmp+0x40>
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0eb      	beq.n	800772c <mem_cmp+0x18>

	return r;
 8007754:	697b      	ldr	r3, [r7, #20]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3724      	adds	r7, #36	; 0x24
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800776c:	e002      	b.n	8007774 <chk_chr+0x12>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3301      	adds	r3, #1
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <chk_chr+0x26>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	4293      	cmp	r3, r2
 8007786:	d1f2      	bne.n	800776e <chk_chr+0xc>
	return *str;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	781b      	ldrb	r3, [r3, #0]
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	e029      	b.n	8007800 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80077ac:	4a27      	ldr	r2, [pc, #156]	; (800784c <chk_lock+0xb4>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	4413      	add	r3, r2
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d01d      	beq.n	80077f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077ba:	4a24      	ldr	r2, [pc, #144]	; (800784c <chk_lock+0xb4>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	4413      	add	r3, r2
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d116      	bne.n	80077fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80077cc:	4a1f      	ldr	r2, [pc, #124]	; (800784c <chk_lock+0xb4>)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	4413      	add	r3, r2
 80077d4:	3304      	adds	r3, #4
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077dc:	429a      	cmp	r2, r3
 80077de:	d10c      	bne.n	80077fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077e0:	4a1a      	ldr	r2, [pc, #104]	; (800784c <chk_lock+0xb4>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	4413      	add	r3, r2
 80077e8:	3308      	adds	r3, #8
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d102      	bne.n	80077fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80077f4:	e007      	b.n	8007806 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80077f6:	2301      	movs	r3, #1
 80077f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3301      	adds	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d9d2      	bls.n	80077ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b02      	cmp	r3, #2
 800780a:	d109      	bne.n	8007820 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <chk_lock+0x80>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d101      	bne.n	800781c <chk_lock+0x84>
 8007818:	2300      	movs	r3, #0
 800781a:	e010      	b.n	800783e <chk_lock+0xa6>
 800781c:	2312      	movs	r3, #18
 800781e:	e00e      	b.n	800783e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <chk_lock+0xa0>
 8007826:	4a09      	ldr	r2, [pc, #36]	; (800784c <chk_lock+0xb4>)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	4413      	add	r3, r2
 800782e:	330c      	adds	r3, #12
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007836:	d101      	bne.n	800783c <chk_lock+0xa4>
 8007838:	2310      	movs	r3, #16
 800783a:	e000      	b.n	800783e <chk_lock+0xa6>
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	200000bc 	.word	0x200000bc

08007850 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007856:	2300      	movs	r3, #0
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	e002      	b.n	8007862 <enq_lock+0x12>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	3301      	adds	r3, #1
 8007860:	607b      	str	r3, [r7, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d806      	bhi.n	8007876 <enq_lock+0x26>
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <enq_lock+0x40>)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	4413      	add	r3, r2
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f2      	bne.n	800785c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b02      	cmp	r3, #2
 800787a:	bf14      	ite	ne
 800787c:	2301      	movne	r3, #1
 800787e:	2300      	moveq	r3, #0
 8007880:	b2db      	uxtb	r3, r3
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	200000bc 	.word	0x200000bc

08007894 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e01f      	b.n	80078e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80078a4:	4a41      	ldr	r2, [pc, #260]	; (80079ac <inc_lock+0x118>)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	4413      	add	r3, r2
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d113      	bne.n	80078de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80078b6:	4a3d      	ldr	r2, [pc, #244]	; (80079ac <inc_lock+0x118>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	4413      	add	r3, r2
 80078be:	3304      	adds	r3, #4
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d109      	bne.n	80078de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80078ca:	4a38      	ldr	r2, [pc, #224]	; (80079ac <inc_lock+0x118>)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	4413      	add	r3, r2
 80078d2:	3308      	adds	r3, #8
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80078da:	429a      	cmp	r2, r3
 80078dc:	d006      	beq.n	80078ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d9dc      	bls.n	80078a4 <inc_lock+0x10>
 80078ea:	e000      	b.n	80078ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80078ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d132      	bne.n	800795a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	e002      	b.n	8007900 <inc_lock+0x6c>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3301      	adds	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d806      	bhi.n	8007914 <inc_lock+0x80>
 8007906:	4a29      	ldr	r2, [pc, #164]	; (80079ac <inc_lock+0x118>)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	4413      	add	r3, r2
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f2      	bne.n	80078fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b02      	cmp	r3, #2
 8007918:	d101      	bne.n	800791e <inc_lock+0x8a>
 800791a:	2300      	movs	r3, #0
 800791c:	e040      	b.n	80079a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4922      	ldr	r1, [pc, #136]	; (80079ac <inc_lock+0x118>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	440b      	add	r3, r1
 800792a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	491e      	ldr	r1, [pc, #120]	; (80079ac <inc_lock+0x118>)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	440b      	add	r3, r1
 8007938:	3304      	adds	r3, #4
 800793a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	491a      	ldr	r1, [pc, #104]	; (80079ac <inc_lock+0x118>)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	440b      	add	r3, r1
 8007948:	3308      	adds	r3, #8
 800794a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800794c:	4a17      	ldr	r2, [pc, #92]	; (80079ac <inc_lock+0x118>)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	4413      	add	r3, r2
 8007954:	330c      	adds	r3, #12
 8007956:	2200      	movs	r2, #0
 8007958:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <inc_lock+0xe0>
 8007960:	4a12      	ldr	r2, [pc, #72]	; (80079ac <inc_lock+0x118>)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	4413      	add	r3, r2
 8007968:	330c      	adds	r3, #12
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <inc_lock+0xe0>
 8007970:	2300      	movs	r3, #0
 8007972:	e015      	b.n	80079a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d108      	bne.n	800798c <inc_lock+0xf8>
 800797a:	4a0c      	ldr	r2, [pc, #48]	; (80079ac <inc_lock+0x118>)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	4413      	add	r3, r2
 8007982:	330c      	adds	r3, #12
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	3301      	adds	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	e001      	b.n	8007990 <inc_lock+0xfc>
 800798c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007990:	4906      	ldr	r1, [pc, #24]	; (80079ac <inc_lock+0x118>)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	440b      	add	r3, r1
 8007998:	330c      	adds	r3, #12
 800799a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3301      	adds	r3, #1
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	200000bc 	.word	0x200000bc

080079b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	607b      	str	r3, [r7, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d825      	bhi.n	8007a10 <dec_lock+0x60>
		n = Files[i].ctr;
 80079c4:	4a17      	ldr	r2, [pc, #92]	; (8007a24 <dec_lock+0x74>)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	4413      	add	r3, r2
 80079cc:	330c      	adds	r3, #12
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80079d2:	89fb      	ldrh	r3, [r7, #14]
 80079d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d8:	d101      	bne.n	80079de <dec_lock+0x2e>
 80079da:	2300      	movs	r3, #0
 80079dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80079de:	89fb      	ldrh	r3, [r7, #14]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <dec_lock+0x3a>
 80079e4:	89fb      	ldrh	r3, [r7, #14]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80079ea:	4a0e      	ldr	r2, [pc, #56]	; (8007a24 <dec_lock+0x74>)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	4413      	add	r3, r2
 80079f2:	330c      	adds	r3, #12
 80079f4:	89fa      	ldrh	r2, [r7, #14]
 80079f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80079f8:	89fb      	ldrh	r3, [r7, #14]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d105      	bne.n	8007a0a <dec_lock+0x5a>
 80079fe:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <dec_lock+0x74>)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	4413      	add	r3, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	737b      	strb	r3, [r7, #13]
 8007a0e:	e001      	b.n	8007a14 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007a10:	2302      	movs	r3, #2
 8007a12:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007a14:	7b7b      	ldrb	r3, [r7, #13]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	200000bc 	.word	0x200000bc

08007a28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	e010      	b.n	8007a58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a36:	4a0d      	ldr	r2, [pc, #52]	; (8007a6c <clear_lock+0x44>)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	4413      	add	r3, r2
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d105      	bne.n	8007a52 <clear_lock+0x2a>
 8007a46:	4a09      	ldr	r2, [pc, #36]	; (8007a6c <clear_lock+0x44>)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	4413      	add	r3, r2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d9eb      	bls.n	8007a36 <clear_lock+0xe>
	}
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	200000bc 	.word	0x200000bc

08007a70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	78db      	ldrb	r3, [r3, #3]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d034      	beq.n	8007aee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7858      	ldrb	r0, [r3, #1]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a94:	2301      	movs	r3, #1
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	f7ff fd40 	bl	800751c <disk_write>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	73fb      	strb	r3, [r7, #15]
 8007aa6:	e022      	b.n	8007aee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	1ad2      	subs	r2, r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d217      	bcs.n	8007aee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	789b      	ldrb	r3, [r3, #2]
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	e010      	b.n	8007ae8 <sync_window+0x78>
					wsect += fs->fsize;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4413      	add	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7858      	ldrb	r0, [r3, #1]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ada:	2301      	movs	r3, #1
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	f7ff fd1d 	bl	800751c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	613b      	str	r3, [r7, #16]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d8eb      	bhi.n	8007ac6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d01b      	beq.n	8007b48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff ffad 	bl	8007a70 <sync_window>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d113      	bne.n	8007b48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7858      	ldrb	r0, [r3, #1]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	f7ff fcd5 	bl	80074dc <disk_read>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff ff87 	bl	8007a70 <sync_window>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d159      	bne.n	8007c20 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d149      	bne.n	8007c08 <sync_fs+0xb4>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	791b      	ldrb	r3, [r3, #4]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d145      	bne.n	8007c08 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	899b      	ldrh	r3, [r3, #12]
 8007b86:	461a      	mov	r2, r3
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f7ff fda8 	bl	80076de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3334      	adds	r3, #52	; 0x34
 8007b92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b96:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff fd37 	bl	800760e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3334      	adds	r3, #52	; 0x34
 8007ba4:	4921      	ldr	r1, [pc, #132]	; (8007c2c <sync_fs+0xd8>)
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fd4c 	bl	8007644 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3334      	adds	r3, #52	; 0x34
 8007bb0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bb4:	491e      	ldr	r1, [pc, #120]	; (8007c30 <sync_fs+0xdc>)
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff fd44 	bl	8007644 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3334      	adds	r3, #52	; 0x34
 8007bc0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	f7ff fd3a 	bl	8007644 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3334      	adds	r3, #52	; 0x34
 8007bd4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4610      	mov	r0, r2
 8007be0:	f7ff fd30 	bl	8007644 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7858      	ldrb	r0, [r3, #1]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f7ff fc8d 	bl	800751c <disk_write>
			fs->fsi_flag = 0;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2100      	movs	r1, #0
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff fca3 	bl	800755c <disk_ioctl>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <sync_fs+0xcc>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	41615252 	.word	0x41615252
 8007c30:	61417272 	.word	0x61417272

08007c34 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	3b02      	subs	r3, #2
 8007c42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	3b02      	subs	r3, #2
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d301      	bcc.n	8007c54 <clust2sect+0x20>
 8007c50:	2300      	movs	r3, #0
 8007c52:	e008      	b.n	8007c66 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	895b      	ldrh	r3, [r3, #10]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	fb03 f202 	mul.w	r2, r3, r2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	4413      	add	r3, r2
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b086      	sub	sp, #24
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d904      	bls.n	8007c92 <get_fat+0x20>
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d302      	bcc.n	8007c98 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007c92:	2301      	movs	r3, #1
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	e0bb      	b.n	8007e10 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007c98:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	f000 8083 	beq.w	8007dae <get_fat+0x13c>
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	f300 80a7 	bgt.w	8007dfc <get_fat+0x18a>
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d002      	beq.n	8007cb8 <get_fat+0x46>
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d056      	beq.n	8007d64 <get_fat+0xf2>
 8007cb6:	e0a1      	b.n	8007dfc <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	085b      	lsrs	r3, r3, #1
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	899b      	ldrh	r3, [r3, #12]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6938      	ldr	r0, [r7, #16]
 8007cdc:	f7ff ff0c 	bl	8007af8 <move_window>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f040 808d 	bne.w	8007e02 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	60fa      	str	r2, [r7, #12]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	8992      	ldrh	r2, [r2, #12]
 8007cf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cf6:	fb02 f201 	mul.w	r2, r2, r1
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	899b      	ldrh	r3, [r3, #12]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d16:	4413      	add	r3, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6938      	ldr	r0, [r7, #16]
 8007d1c:	f7ff feec 	bl	8007af8 <move_window>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d16f      	bne.n	8007e06 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	899b      	ldrh	r3, [r3, #12]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d32:	fb02 f201 	mul.w	r2, r2, r1
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	461a      	mov	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <get_fat+0xe8>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	091b      	lsrs	r3, r3, #4
 8007d58:	e002      	b.n	8007d60 <get_fat+0xee>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d60:	617b      	str	r3, [r7, #20]
			break;
 8007d62:	e055      	b.n	8007e10 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	899b      	ldrh	r3, [r3, #12]
 8007d6c:	085b      	lsrs	r3, r3, #1
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d78:	4413      	add	r3, r2
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6938      	ldr	r0, [r7, #16]
 8007d7e:	f7ff febb 	bl	8007af8 <move_window>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d140      	bne.n	8007e0a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	8992      	ldrh	r2, [r2, #12]
 8007d96:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d9a:	fb02 f200 	mul.w	r2, r2, r0
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	440b      	add	r3, r1
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fbf8 	bl	8007598 <ld_word>
 8007da8:	4603      	mov	r3, r0
 8007daa:	617b      	str	r3, [r7, #20]
			break;
 8007dac:	e030      	b.n	8007e10 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	899b      	ldrh	r3, [r3, #12]
 8007db6:	089b      	lsrs	r3, r3, #2
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4619      	mov	r1, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dc2:	4413      	add	r3, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6938      	ldr	r0, [r7, #16]
 8007dc8:	f7ff fe96 	bl	8007af8 <move_window>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11d      	bne.n	8007e0e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	8992      	ldrh	r2, [r2, #12]
 8007de0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007de4:	fb02 f200 	mul.w	r2, r2, r0
 8007de8:	1a9b      	subs	r3, r3, r2
 8007dea:	440b      	add	r3, r1
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff fbeb 	bl	80075c8 <ld_dword>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007df8:	617b      	str	r3, [r7, #20]
			break;
 8007dfa:	e009      	b.n	8007e10 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e006      	b.n	8007e10 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e02:	bf00      	nop
 8007e04:	e004      	b.n	8007e10 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e06:	bf00      	nop
 8007e08:	e002      	b.n	8007e10 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e0a:	bf00      	nop
 8007e0c:	e000      	b.n	8007e10 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e0e:	bf00      	nop
		}
	}

	return val;
 8007e10:	697b      	ldr	r3, [r7, #20]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007e1a:	b590      	push	{r4, r7, lr}
 8007e1c:	b089      	sub	sp, #36	; 0x24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007e26:	2302      	movs	r3, #2
 8007e28:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	f240 8102 	bls.w	8008036 <put_fat+0x21c>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	f080 80fc 	bcs.w	8008036 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	f000 80b6 	beq.w	8007fb4 <put_fat+0x19a>
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	f300 80fd 	bgt.w	8008048 <put_fat+0x22e>
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d003      	beq.n	8007e5a <put_fat+0x40>
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	f000 8083 	beq.w	8007f5e <put_fat+0x144>
 8007e58:	e0f6      	b.n	8008048 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	085b      	lsrs	r3, r3, #1
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	4413      	add	r3, r2
 8007e66:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	899b      	ldrh	r3, [r3, #12]
 8007e70:	4619      	mov	r1, r3
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e78:	4413      	add	r3, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff fe3b 	bl	8007af8 <move_window>
 8007e82:	4603      	mov	r3, r0
 8007e84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e86:	7ffb      	ldrb	r3, [r7, #31]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f040 80d6 	bne.w	800803a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	61ba      	str	r2, [r7, #24]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	8992      	ldrh	r2, [r2, #12]
 8007e9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ea2:	fb02 f200 	mul.w	r2, r2, r0
 8007ea6:	1a9b      	subs	r3, r3, r2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00d      	beq.n	8007ed2 <put_fat+0xb8>
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	b25b      	sxtb	r3, r3
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	b25a      	sxtb	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	b25b      	sxtb	r3, r3
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	b25b      	sxtb	r3, r3
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	e001      	b.n	8007ed6 <put_fat+0xbc>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	899b      	ldrh	r3, [r3, #12]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff fdff 	bl	8007af8 <move_window>
 8007efa:	4603      	mov	r3, r0
 8007efc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007efe:	7ffb      	ldrb	r3, [r7, #31]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 809c 	bne.w	800803e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	899b      	ldrh	r3, [r3, #12]
 8007f10:	461a      	mov	r2, r3
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f18:	fb02 f200 	mul.w	r2, r2, r0
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	440b      	add	r3, r1
 8007f20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <put_fat+0x11a>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	091b      	lsrs	r3, r3, #4
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	e00e      	b.n	8007f52 <put_fat+0x138>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	f023 030f 	bic.w	r3, r3, #15
 8007f3e:	b25a      	sxtb	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	0a1b      	lsrs	r3, r3, #8
 8007f44:	b25b      	sxtb	r3, r3
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	b25b      	sxtb	r3, r3
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	b25b      	sxtb	r3, r3
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	70da      	strb	r2, [r3, #3]
			break;
 8007f5c:	e074      	b.n	8008048 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	899b      	ldrh	r3, [r3, #12]
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f72:	4413      	add	r3, r2
 8007f74:	4619      	mov	r1, r3
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff fdbe 	bl	8007af8 <move_window>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f80:	7ffb      	ldrb	r3, [r7, #31]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d15d      	bne.n	8008042 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	8992      	ldrh	r2, [r2, #12]
 8007f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f98:	fb02 f200 	mul.w	r2, r2, r0
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	b292      	uxth	r2, r2
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff fb31 	bl	800760e <st_word>
			fs->wflag = 1;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	70da      	strb	r2, [r3, #3]
			break;
 8007fb2:	e049      	b.n	8008048 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	899b      	ldrh	r3, [r3, #12]
 8007fbc:	089b      	lsrs	r3, r3, #2
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fc8:	4413      	add	r3, r2
 8007fca:	4619      	mov	r1, r3
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fd93 	bl	8007af8 <move_window>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fd6:	7ffb      	ldrb	r3, [r7, #31]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d134      	bne.n	8008046 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	8992      	ldrh	r2, [r2, #12]
 8007ff0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ff4:	fb02 f200 	mul.w	r2, r2, r0
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff fae3 	bl	80075c8 <ld_dword>
 8008002:	4603      	mov	r3, r0
 8008004:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008008:	4323      	orrs	r3, r4
 800800a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	8992      	ldrh	r2, [r2, #12]
 800801a:	fbb3 f0f2 	udiv	r0, r3, r2
 800801e:	fb02 f200 	mul.w	r2, r2, r0
 8008022:	1a9b      	subs	r3, r3, r2
 8008024:	440b      	add	r3, r1
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fb0b 	bl	8007644 <st_dword>
			fs->wflag = 1;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	70da      	strb	r2, [r3, #3]
			break;
 8008034:	e008      	b.n	8008048 <put_fat+0x22e>
		}
	}
 8008036:	bf00      	nop
 8008038:	e006      	b.n	8008048 <put_fat+0x22e>
			if (res != FR_OK) break;
 800803a:	bf00      	nop
 800803c:	e004      	b.n	8008048 <put_fat+0x22e>
			if (res != FR_OK) break;
 800803e:	bf00      	nop
 8008040:	e002      	b.n	8008048 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008042:	bf00      	nop
 8008044:	e000      	b.n	8008048 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008046:	bf00      	nop
	return res;
 8008048:	7ffb      	ldrb	r3, [r7, #31]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3724      	adds	r7, #36	; 0x24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd90      	pop	{r4, r7, pc}

08008052 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d904      	bls.n	8008078 <remove_chain+0x26>
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	429a      	cmp	r2, r3
 8008076:	d301      	bcc.n	800807c <remove_chain+0x2a>
 8008078:	2302      	movs	r3, #2
 800807a:	e04b      	b.n	8008114 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00c      	beq.n	800809c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	69b8      	ldr	r0, [r7, #24]
 800808a:	f7ff fec6 	bl	8007e1a <put_fat>
 800808e:	4603      	mov	r3, r0
 8008090:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008092:	7ffb      	ldrb	r3, [r7, #31]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <remove_chain+0x4a>
 8008098:	7ffb      	ldrb	r3, [r7, #31]
 800809a:	e03b      	b.n	8008114 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fde7 	bl	8007c72 <get_fat>
 80080a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d031      	beq.n	8008110 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <remove_chain+0x64>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e02e      	b.n	8008114 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d101      	bne.n	80080c2 <remove_chain+0x70>
 80080be:	2301      	movs	r3, #1
 80080c0:	e028      	b.n	8008114 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80080c2:	2200      	movs	r2, #0
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	69b8      	ldr	r0, [r7, #24]
 80080c8:	f7ff fea7 	bl	8007e1a <put_fat>
 80080cc:	4603      	mov	r3, r0
 80080ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80080d0:	7ffb      	ldrb	r3, [r7, #31]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <remove_chain+0x88>
 80080d6:	7ffb      	ldrb	r3, [r7, #31]
 80080d8:	e01c      	b.n	8008114 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	695a      	ldr	r2, [r3, #20]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	3b02      	subs	r3, #2
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d20b      	bcs.n	8008100 <remove_chain+0xae>
			fs->free_clst++;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	791b      	ldrb	r3, [r3, #4]
 80080f6:	f043 0301 	orr.w	r3, r3, #1
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	d3c6      	bcc.n	800809c <remove_chain+0x4a>
 800810e:	e000      	b.n	8008112 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008110:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10d      	bne.n	800814e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <create_chain+0x2c>
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	429a      	cmp	r2, r3
 8008146:	d31b      	bcc.n	8008180 <create_chain+0x64>
 8008148:	2301      	movs	r3, #1
 800814a:	61bb      	str	r3, [r7, #24]
 800814c:	e018      	b.n	8008180 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fd8e 	bl	8007c72 <get_fat>
 8008156:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d801      	bhi.n	8008162 <create_chain+0x46>
 800815e:	2301      	movs	r3, #1
 8008160:	e070      	b.n	8008244 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008168:	d101      	bne.n	800816e <create_chain+0x52>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	e06a      	b.n	8008244 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	429a      	cmp	r2, r3
 8008176:	d201      	bcs.n	800817c <create_chain+0x60>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	e063      	b.n	8008244 <create_chain+0x128>
		scl = clst;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	3301      	adds	r3, #1
 8008188:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	429a      	cmp	r2, r3
 8008192:	d307      	bcc.n	80081a4 <create_chain+0x88>
				ncl = 2;
 8008194:	2302      	movs	r3, #2
 8008196:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	429a      	cmp	r2, r3
 800819e:	d901      	bls.n	80081a4 <create_chain+0x88>
 80081a0:	2300      	movs	r3, #0
 80081a2:	e04f      	b.n	8008244 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80081a4:	69f9      	ldr	r1, [r7, #28]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff fd63 	bl	8007c72 <get_fat>
 80081ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d003      	beq.n	80081c2 <create_chain+0xa6>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d101      	bne.n	80081c6 <create_chain+0xaa>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	e03e      	b.n	8008244 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d1da      	bne.n	8008184 <create_chain+0x68>
 80081ce:	2300      	movs	r3, #0
 80081d0:	e038      	b.n	8008244 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80081d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80081d4:	f04f 32ff 	mov.w	r2, #4294967295
 80081d8:	69f9      	ldr	r1, [r7, #28]
 80081da:	6938      	ldr	r0, [r7, #16]
 80081dc:	f7ff fe1d 	bl	8007e1a <put_fat>
 80081e0:	4603      	mov	r3, r0
 80081e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d109      	bne.n	80081fe <create_chain+0xe2>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d006      	beq.n	80081fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6938      	ldr	r0, [r7, #16]
 80081f6:	f7ff fe10 	bl	8007e1a <put_fat>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d116      	bne.n	8008232 <create_chain+0x116>
		fs->last_clst = ncl;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	695a      	ldr	r2, [r3, #20]
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	3b02      	subs	r3, #2
 8008214:	429a      	cmp	r2, r3
 8008216:	d804      	bhi.n	8008222 <create_chain+0x106>
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	1e5a      	subs	r2, r3, #1
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	791b      	ldrb	r3, [r3, #4]
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	711a      	strb	r2, [r3, #4]
 8008230:	e007      	b.n	8008242 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d102      	bne.n	800823e <create_chain+0x122>
 8008238:	f04f 33ff 	mov.w	r3, #4294967295
 800823c:	e000      	b.n	8008240 <create_chain+0x124>
 800823e:	2301      	movs	r3, #1
 8008240:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008242:	69fb      	ldr	r3, [r7, #28]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	3304      	adds	r3, #4
 8008262:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	899b      	ldrh	r3, [r3, #12]
 8008268:	461a      	mov	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	8952      	ldrh	r2, [r2, #10]
 8008274:	fbb3 f3f2 	udiv	r3, r3, r2
 8008278:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	613a      	str	r2, [r7, #16]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <clmt_clust+0x42>
 800828a:	2300      	movs	r3, #0
 800828c:	e010      	b.n	80082b0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	429a      	cmp	r2, r3
 8008294:	d307      	bcc.n	80082a6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3304      	adds	r3, #4
 80082a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80082a4:	e7e9      	b.n	800827a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80082a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	4413      	add	r3, r2
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d2:	d204      	bcs.n	80082de <dir_sdi+0x22>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80082de:	2302      	movs	r3, #2
 80082e0:	e071      	b.n	80083c6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d106      	bne.n	8008302 <dir_sdi+0x46>
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d902      	bls.n	8008302 <dir_sdi+0x46>
		clst = fs->dirbase;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10c      	bne.n	8008322 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	8912      	ldrh	r2, [r2, #8]
 8008310:	4293      	cmp	r3, r2
 8008312:	d301      	bcc.n	8008318 <dir_sdi+0x5c>
 8008314:	2302      	movs	r3, #2
 8008316:	e056      	b.n	80083c6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	61da      	str	r2, [r3, #28]
 8008320:	e02d      	b.n	800837e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	895b      	ldrh	r3, [r3, #10]
 8008326:	461a      	mov	r2, r3
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	899b      	ldrh	r3, [r3, #12]
 800832c:	fb03 f302 	mul.w	r3, r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008332:	e019      	b.n	8008368 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6979      	ldr	r1, [r7, #20]
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff fc9a 	bl	8007c72 <get_fat>
 800833e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d101      	bne.n	800834c <dir_sdi+0x90>
 8008348:	2301      	movs	r3, #1
 800834a:	e03c      	b.n	80083c6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d904      	bls.n	800835c <dir_sdi+0xa0>
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	429a      	cmp	r2, r3
 800835a:	d301      	bcc.n	8008360 <dir_sdi+0xa4>
 800835c:	2302      	movs	r3, #2
 800835e:	e032      	b.n	80083c6 <dir_sdi+0x10a>
			ofs -= csz;
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	429a      	cmp	r2, r3
 800836e:	d2e1      	bcs.n	8008334 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008370:	6979      	ldr	r1, [r7, #20]
 8008372:	6938      	ldr	r0, [r7, #16]
 8008374:	f7ff fc5e 	bl	8007c34 <clust2sect>
 8008378:	4602      	mov	r2, r0
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <dir_sdi+0xd4>
 800838c:	2302      	movs	r3, #2
 800838e:	e01a      	b.n	80083c6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	69da      	ldr	r2, [r3, #28]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	899b      	ldrh	r3, [r3, #12]
 8008398:	4619      	mov	r1, r3
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	fbb3 f3f1 	udiv	r3, r3, r1
 80083a0:	441a      	add	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	899b      	ldrh	r3, [r3, #12]
 80083b0:	461a      	mov	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80083b8:	fb02 f200 	mul.w	r2, r2, r0
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	18ca      	adds	r2, r1, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b086      	sub	sp, #24
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	3320      	adds	r3, #32
 80083e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <dir_next+0x28>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f4:	d301      	bcc.n	80083fa <dir_next+0x2c>
 80083f6:	2304      	movs	r3, #4
 80083f8:	e0bb      	b.n	8008572 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	899b      	ldrh	r3, [r3, #12]
 80083fe:	461a      	mov	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	fbb3 f1f2 	udiv	r1, r3, r2
 8008406:	fb02 f201 	mul.w	r2, r2, r1
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	f040 809d 	bne.w	800854c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	8912      	ldrh	r2, [r2, #8]
 800842c:	4293      	cmp	r3, r2
 800842e:	f0c0 808d 	bcc.w	800854c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	61da      	str	r2, [r3, #28]
 8008438:	2304      	movs	r3, #4
 800843a:	e09a      	b.n	8008572 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	899b      	ldrh	r3, [r3, #12]
 8008440:	461a      	mov	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	fbb3 f3f2 	udiv	r3, r3, r2
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	8952      	ldrh	r2, [r2, #10]
 800844c:	3a01      	subs	r2, #1
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d17b      	bne.n	800854c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f7ff fc08 	bl	8007c72 <get_fat>
 8008462:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d801      	bhi.n	800846e <dir_next+0xa0>
 800846a:	2302      	movs	r3, #2
 800846c:	e081      	b.n	8008572 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008474:	d101      	bne.n	800847a <dir_next+0xac>
 8008476:	2301      	movs	r3, #1
 8008478:	e07b      	b.n	8008572 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	429a      	cmp	r2, r3
 8008482:	d359      	bcc.n	8008538 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	61da      	str	r2, [r3, #28]
 8008490:	2304      	movs	r3, #4
 8008492:	e06e      	b.n	8008572 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	4619      	mov	r1, r3
 800849c:	4610      	mov	r0, r2
 800849e:	f7ff fe3d 	bl	800811c <create_chain>
 80084a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <dir_next+0xe0>
 80084aa:	2307      	movs	r3, #7
 80084ac:	e061      	b.n	8008572 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <dir_next+0xea>
 80084b4:	2302      	movs	r3, #2
 80084b6:	e05c      	b.n	8008572 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	d101      	bne.n	80084c4 <dir_next+0xf6>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e056      	b.n	8008572 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff fad3 	bl	8007a70 <sync_window>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <dir_next+0x106>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e04e      	b.n	8008572 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	899b      	ldrh	r3, [r3, #12]
 80084de:	461a      	mov	r2, r3
 80084e0:	2100      	movs	r1, #0
 80084e2:	f7ff f8fc 	bl	80076de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80084e6:	2300      	movs	r3, #0
 80084e8:	613b      	str	r3, [r7, #16]
 80084ea:	6979      	ldr	r1, [r7, #20]
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fba1 	bl	8007c34 <clust2sect>
 80084f2:	4602      	mov	r2, r0
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	631a      	str	r2, [r3, #48]	; 0x30
 80084f8:	e012      	b.n	8008520 <dir_next+0x152>
						fs->wflag = 1;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fab5 	bl	8007a70 <sync_window>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <dir_next+0x142>
 800850c:	2301      	movs	r3, #1
 800850e:	e030      	b.n	8008572 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	3301      	adds	r3, #1
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	895b      	ldrh	r3, [r3, #10]
 8008524:	461a      	mov	r2, r3
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4293      	cmp	r3, r2
 800852a:	d3e6      	bcc.n	80084fa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	1ad2      	subs	r2, r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800853e:	6979      	ldr	r1, [r7, #20]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff fb77 	bl	8007c34 <clust2sect>
 8008546:	4602      	mov	r2, r0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	899b      	ldrh	r3, [r3, #12]
 800855c:	461a      	mov	r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	fbb3 f0f2 	udiv	r0, r3, r2
 8008564:	fb02 f200 	mul.w	r2, r2, r0
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	18ca      	adds	r2, r1, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800858a:	2100      	movs	r1, #0
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff fe95 	bl	80082bc <dir_sdi>
 8008592:	4603      	mov	r3, r0
 8008594:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d12b      	bne.n	80085f4 <dir_alloc+0x7a>
		n = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	4619      	mov	r1, r3
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff faa6 	bl	8007af8 <move_window>
 80085ac:	4603      	mov	r3, r0
 80085ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d11d      	bne.n	80085f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2be5      	cmp	r3, #229	; 0xe5
 80085be:	d004      	beq.n	80085ca <dir_alloc+0x50>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d107      	bne.n	80085da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3301      	adds	r3, #1
 80085ce:	613b      	str	r3, [r7, #16]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d102      	bne.n	80085de <dir_alloc+0x64>
 80085d8:	e00c      	b.n	80085f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80085da:	2300      	movs	r3, #0
 80085dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80085de:	2101      	movs	r1, #1
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff fef4 	bl	80083ce <dir_next>
 80085e6:	4603      	mov	r3, r0
 80085e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0d7      	beq.n	80085a0 <dir_alloc+0x26>
 80085f0:	e000      	b.n	80085f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80085f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d101      	bne.n	80085fe <dir_alloc+0x84>
 80085fa:	2307      	movs	r3, #7
 80085fc:	75fb      	strb	r3, [r7, #23]
	return res;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	331a      	adds	r3, #26
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe ffbe 	bl	8007598 <ld_word>
 800861c:	4603      	mov	r3, r0
 800861e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b03      	cmp	r3, #3
 8008626:	d109      	bne.n	800863c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	3314      	adds	r3, #20
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe ffb3 	bl	8007598 <ld_word>
 8008632:	4603      	mov	r3, r0
 8008634:	041b      	lsls	r3, r3, #16
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	4313      	orrs	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800863c:	68fb      	ldr	r3, [r7, #12]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	331a      	adds	r3, #26
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	b292      	uxth	r2, r2
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe ffd6 	bl	800760e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b03      	cmp	r3, #3
 8008668:	d109      	bne.n	800867e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f103 0214 	add.w	r2, r3, #20
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	0c1b      	lsrs	r3, r3, #16
 8008674:	b29b      	uxth	r3, r3
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f7fe ffc8 	bl	800760e <st_word>
	}
}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b086      	sub	sp, #24
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008694:	2100      	movs	r1, #0
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fe10 	bl	80082bc <dir_sdi>
 800869c:	4603      	mov	r3, r0
 800869e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <dir_find+0x24>
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	e03e      	b.n	8008728 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6938      	ldr	r0, [r7, #16]
 80086b2:	f7ff fa21 	bl	8007af8 <move_window>
 80086b6:	4603      	mov	r3, r0
 80086b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d12f      	bne.n	8008720 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <dir_find+0x4e>
 80086ce:	2304      	movs	r3, #4
 80086d0:	75fb      	strb	r3, [r7, #23]
 80086d2:	e028      	b.n	8008726 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	330b      	adds	r3, #11
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	330b      	adds	r3, #11
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <dir_find+0x86>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a18      	ldr	r0, [r3, #32]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3324      	adds	r3, #36	; 0x24
 80086fe:	220b      	movs	r2, #11
 8008700:	4619      	mov	r1, r3
 8008702:	f7ff f807 	bl	8007714 <mem_cmp>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00b      	beq.n	8008724 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800870c:	2100      	movs	r1, #0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff fe5d 	bl	80083ce <dir_next>
 8008714:	4603      	mov	r3, r0
 8008716:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0c5      	beq.n	80086aa <dir_find+0x24>
 800871e:	e002      	b.n	8008726 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008720:	bf00      	nop
 8008722:	e000      	b.n	8008726 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008724:	bf00      	nop

	return res;
 8008726:	7dfb      	ldrb	r3, [r7, #23]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800873e:	2101      	movs	r1, #1
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ff1a 	bl	800857a <dir_alloc>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11c      	bne.n	800878a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	4619      	mov	r1, r3
 8008756:	68b8      	ldr	r0, [r7, #8]
 8008758:	f7ff f9ce 	bl	8007af8 <move_window>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d111      	bne.n	800878a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	2220      	movs	r2, #32
 800876c:	2100      	movs	r1, #0
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe ffb5 	bl	80076de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a18      	ldr	r0, [r3, #32]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	220b      	movs	r2, #11
 800877e:	4619      	mov	r1, r3
 8008780:	f7fe ff8c 	bl	800769c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2201      	movs	r2, #1
 8008788:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3324      	adds	r3, #36	; 0x24
 80087a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80087aa:	220b      	movs	r2, #11
 80087ac:	2120      	movs	r1, #32
 80087ae:	68b8      	ldr	r0, [r7, #8]
 80087b0:	f7fe ff95 	bl	80076de <mem_set>
	si = i = 0; ni = 8;
 80087b4:	2300      	movs	r3, #0
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	61fb      	str	r3, [r7, #28]
 80087bc:	2308      	movs	r3, #8
 80087be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	61fa      	str	r2, [r7, #28]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4413      	add	r3, r2
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80087ce:	7efb      	ldrb	r3, [r7, #27]
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d94e      	bls.n	8008872 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80087d4:	7efb      	ldrb	r3, [r7, #27]
 80087d6:	2b2f      	cmp	r3, #47	; 0x2f
 80087d8:	d006      	beq.n	80087e8 <create_name+0x54>
 80087da:	7efb      	ldrb	r3, [r7, #27]
 80087dc:	2b5c      	cmp	r3, #92	; 0x5c
 80087de:	d110      	bne.n	8008802 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80087e0:	e002      	b.n	80087e8 <create_name+0x54>
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	3301      	adds	r3, #1
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	4413      	add	r3, r2
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b2f      	cmp	r3, #47	; 0x2f
 80087f2:	d0f6      	beq.n	80087e2 <create_name+0x4e>
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	4413      	add	r3, r2
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b5c      	cmp	r3, #92	; 0x5c
 80087fe:	d0f0      	beq.n	80087e2 <create_name+0x4e>
			break;
 8008800:	e038      	b.n	8008874 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008802:	7efb      	ldrb	r3, [r7, #27]
 8008804:	2b2e      	cmp	r3, #46	; 0x2e
 8008806:	d003      	beq.n	8008810 <create_name+0x7c>
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	429a      	cmp	r2, r3
 800880e:	d30c      	bcc.n	800882a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2b0b      	cmp	r3, #11
 8008814:	d002      	beq.n	800881c <create_name+0x88>
 8008816:	7efb      	ldrb	r3, [r7, #27]
 8008818:	2b2e      	cmp	r3, #46	; 0x2e
 800881a:	d001      	beq.n	8008820 <create_name+0x8c>
 800881c:	2306      	movs	r3, #6
 800881e:	e044      	b.n	80088aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008820:	2308      	movs	r3, #8
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	230b      	movs	r3, #11
 8008826:	617b      	str	r3, [r7, #20]
			continue;
 8008828:	e022      	b.n	8008870 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800882a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800882e:	2b00      	cmp	r3, #0
 8008830:	da04      	bge.n	800883c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008832:	7efb      	ldrb	r3, [r7, #27]
 8008834:	3b80      	subs	r3, #128	; 0x80
 8008836:	4a1f      	ldr	r2, [pc, #124]	; (80088b4 <create_name+0x120>)
 8008838:	5cd3      	ldrb	r3, [r2, r3]
 800883a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800883c:	7efb      	ldrb	r3, [r7, #27]
 800883e:	4619      	mov	r1, r3
 8008840:	481d      	ldr	r0, [pc, #116]	; (80088b8 <create_name+0x124>)
 8008842:	f7fe ff8e 	bl	8007762 <chk_chr>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <create_name+0xbc>
 800884c:	2306      	movs	r3, #6
 800884e:	e02c      	b.n	80088aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008850:	7efb      	ldrb	r3, [r7, #27]
 8008852:	2b60      	cmp	r3, #96	; 0x60
 8008854:	d905      	bls.n	8008862 <create_name+0xce>
 8008856:	7efb      	ldrb	r3, [r7, #27]
 8008858:	2b7a      	cmp	r3, #122	; 0x7a
 800885a:	d802      	bhi.n	8008862 <create_name+0xce>
 800885c:	7efb      	ldrb	r3, [r7, #27]
 800885e:	3b20      	subs	r3, #32
 8008860:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	613a      	str	r2, [r7, #16]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	4413      	add	r3, r2
 800886c:	7efa      	ldrb	r2, [r7, #27]
 800886e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008870:	e7a6      	b.n	80087c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008872:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	441a      	add	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <create_name+0xf4>
 8008884:	2306      	movs	r3, #6
 8008886:	e010      	b.n	80088aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2be5      	cmp	r3, #229	; 0xe5
 800888e:	d102      	bne.n	8008896 <create_name+0x102>
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2205      	movs	r2, #5
 8008894:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008896:	7efb      	ldrb	r3, [r7, #27]
 8008898:	2b20      	cmp	r3, #32
 800889a:	d801      	bhi.n	80088a0 <create_name+0x10c>
 800889c:	2204      	movs	r2, #4
 800889e:	e000      	b.n	80088a2 <create_name+0x10e>
 80088a0:	2200      	movs	r2, #0
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	330b      	adds	r3, #11
 80088a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80088a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	0800a9a8 	.word	0x0800a9a8
 80088b8:	0800a940 	.word	0x0800a940

080088bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80088d0:	e002      	b.n	80088d8 <follow_path+0x1c>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	3301      	adds	r3, #1
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b2f      	cmp	r3, #47	; 0x2f
 80088de:	d0f8      	beq.n	80088d2 <follow_path+0x16>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b5c      	cmp	r3, #92	; 0x5c
 80088e6:	d0f4      	beq.n	80088d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	2200      	movs	r2, #0
 80088ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b1f      	cmp	r3, #31
 80088f4:	d80a      	bhi.n	800890c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2280      	movs	r2, #128	; 0x80
 80088fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80088fe:	2100      	movs	r1, #0
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff fcdb 	bl	80082bc <dir_sdi>
 8008906:	4603      	mov	r3, r0
 8008908:	75fb      	strb	r3, [r7, #23]
 800890a:	e048      	b.n	800899e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800890c:	463b      	mov	r3, r7
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff ff3f 	bl	8008794 <create_name>
 8008916:	4603      	mov	r3, r0
 8008918:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d139      	bne.n	8008994 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff feb0 	bl	8008686 <dir_find>
 8008926:	4603      	mov	r3, r0
 8008928:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008930:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008932:	7dfb      	ldrb	r3, [r7, #23]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	2b04      	cmp	r3, #4
 800893c:	d12c      	bne.n	8008998 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	f003 0304 	and.w	r3, r3, #4
 8008944:	2b00      	cmp	r3, #0
 8008946:	d127      	bne.n	8008998 <follow_path+0xdc>
 8008948:	2305      	movs	r3, #5
 800894a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800894c:	e024      	b.n	8008998 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800894e:	7afb      	ldrb	r3, [r7, #11]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d121      	bne.n	800899c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	799b      	ldrb	r3, [r3, #6]
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	2b00      	cmp	r3, #0
 8008962:	d102      	bne.n	800896a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008964:	2305      	movs	r3, #5
 8008966:	75fb      	strb	r3, [r7, #23]
 8008968:	e019      	b.n	800899e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	8992      	ldrh	r2, [r2, #12]
 8008978:	fbb3 f0f2 	udiv	r0, r3, r2
 800897c:	fb02 f200 	mul.w	r2, r2, r0
 8008980:	1a9b      	subs	r3, r3, r2
 8008982:	440b      	add	r3, r1
 8008984:	4619      	mov	r1, r3
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff fe3e 	bl	8008608 <ld_clust>
 800898c:	4602      	mov	r2, r0
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008992:	e7bb      	b.n	800890c <follow_path+0x50>
			if (res != FR_OK) break;
 8008994:	bf00      	nop
 8008996:	e002      	b.n	800899e <follow_path+0xe2>
				break;
 8008998:	bf00      	nop
 800899a:	e000      	b.n	800899e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800899c:	bf00      	nop
			}
		}
	}

	return res;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80089b0:	f04f 33ff 	mov.w	r3, #4294967295
 80089b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d031      	beq.n	8008a22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	e002      	b.n	80089cc <get_ldnumber+0x24>
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	3301      	adds	r3, #1
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d903      	bls.n	80089dc <get_ldnumber+0x34>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	2b3a      	cmp	r3, #58	; 0x3a
 80089da:	d1f4      	bne.n	80089c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b3a      	cmp	r3, #58	; 0x3a
 80089e2:	d11c      	bne.n	8008a1e <get_ldnumber+0x76>
			tp = *path;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	60fa      	str	r2, [r7, #12]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	3b30      	subs	r3, #48	; 0x30
 80089f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b09      	cmp	r3, #9
 80089fa:	d80e      	bhi.n	8008a1a <get_ldnumber+0x72>
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d10a      	bne.n	8008a1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d107      	bne.n	8008a1a <get_ldnumber+0x72>
					vol = (int)i;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	3301      	adds	r3, #1
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	e002      	b.n	8008a24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008a1e:	2300      	movs	r3, #0
 8008a20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008a22:	693b      	ldr	r3, [r7, #16]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	371c      	adds	r7, #28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	70da      	strb	r2, [r3, #3]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f04f 32ff 	mov.w	r2, #4294967295
 8008a46:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff f854 	bl	8007af8 <move_window>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <check_fs+0x2a>
 8008a56:	2304      	movs	r3, #4
 8008a58:	e038      	b.n	8008acc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3334      	adds	r3, #52	; 0x34
 8008a5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fd98 	bl	8007598 <ld_word>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d001      	beq.n	8008a78 <check_fs+0x48>
 8008a74:	2303      	movs	r3, #3
 8008a76:	e029      	b.n	8008acc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a7e:	2be9      	cmp	r3, #233	; 0xe9
 8008a80:	d009      	beq.n	8008a96 <check_fs+0x66>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a88:	2beb      	cmp	r3, #235	; 0xeb
 8008a8a:	d11e      	bne.n	8008aca <check_fs+0x9a>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008a92:	2b90      	cmp	r3, #144	; 0x90
 8008a94:	d119      	bne.n	8008aca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3334      	adds	r3, #52	; 0x34
 8008a9a:	3336      	adds	r3, #54	; 0x36
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fd93 	bl	80075c8 <ld_dword>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008aa8:	4a0a      	ldr	r2, [pc, #40]	; (8008ad4 <check_fs+0xa4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d101      	bne.n	8008ab2 <check_fs+0x82>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e00c      	b.n	8008acc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3334      	adds	r3, #52	; 0x34
 8008ab6:	3352      	adds	r3, #82	; 0x52
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe fd85 	bl	80075c8 <ld_dword>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4a05      	ldr	r2, [pc, #20]	; (8008ad8 <check_fs+0xa8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d101      	bne.n	8008aca <check_fs+0x9a>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e000      	b.n	8008acc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008aca:	2302      	movs	r3, #2
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	00544146 	.word	0x00544146
 8008ad8:	33544146 	.word	0x33544146

08008adc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b096      	sub	sp, #88	; 0x58
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7ff ff59 	bl	80089a8 <get_ldnumber>
 8008af6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da01      	bge.n	8008b02 <find_volume+0x26>
 8008afe:	230b      	movs	r3, #11
 8008b00:	e265      	b.n	8008fce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008b02:	4ab0      	ldr	r2, [pc, #704]	; (8008dc4 <find_volume+0x2e8>)
 8008b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <find_volume+0x3a>
 8008b12:	230c      	movs	r3, #12
 8008b14:	e25b      	b.n	8008fce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01a      	beq.n	8008b62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe fc93 	bl	800745c <disk_status>
 8008b36:	4603      	mov	r3, r0
 8008b38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10c      	bne.n	8008b62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <find_volume+0x82>
 8008b4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b52:	f003 0304 	and.w	r3, r3, #4
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008b5a:	230a      	movs	r3, #10
 8008b5c:	e237      	b.n	8008fce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e235      	b.n	8008fce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	2200      	movs	r2, #0
 8008b66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fc8b 	bl	8007490 <disk_initialize>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008b80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e21e      	b.n	8008fce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d007      	beq.n	8008ba6 <find_volume+0xca>
 8008b96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b9a:	f003 0304 	and.w	r3, r3, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008ba2:	230a      	movs	r3, #10
 8008ba4:	e213      	b.n	8008fce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	7858      	ldrb	r0, [r3, #1]
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	330c      	adds	r3, #12
 8008bae:	461a      	mov	r2, r3
 8008bb0:	2102      	movs	r1, #2
 8008bb2:	f7fe fcd3 	bl	800755c <disk_ioctl>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <find_volume+0xe4>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e206      	b.n	8008fce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	899b      	ldrh	r3, [r3, #12]
 8008bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc8:	d80d      	bhi.n	8008be6 <find_volume+0x10a>
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	899b      	ldrh	r3, [r3, #12]
 8008bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd2:	d308      	bcc.n	8008be6 <find_volume+0x10a>
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	899b      	ldrh	r3, [r3, #12]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	899b      	ldrh	r3, [r3, #12]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	4013      	ands	r3, r2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <find_volume+0x10e>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e1f1      	b.n	8008fce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008bee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bf2:	f7ff ff1d 	bl	8008a30 <check_fs>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d14b      	bne.n	8008c9c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c04:	2300      	movs	r3, #0
 8008c06:	643b      	str	r3, [r7, #64]	; 0x40
 8008c08:	e01f      	b.n	8008c4a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008c18:	4413      	add	r3, r2
 8008c1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	3304      	adds	r3, #4
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d006      	beq.n	8008c34 <find_volume+0x158>
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	3308      	adds	r3, #8
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fccc 	bl	80075c8 <ld_dword>
 8008c30:	4602      	mov	r2, r0
 8008c32:	e000      	b.n	8008c36 <find_volume+0x15a>
 8008c34:	2200      	movs	r2, #0
 8008c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008c3e:	440b      	add	r3, r1
 8008c40:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c46:	3301      	adds	r3, #1
 8008c48:	643b      	str	r3, [r7, #64]	; 0x40
 8008c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	d9dc      	bls.n	8008c0a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008c50:	2300      	movs	r3, #0
 8008c52:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <find_volume+0x184>
 8008c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008c68:	4413      	add	r3, r2
 8008c6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008c6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <find_volume+0x1a6>
 8008c76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c7a:	f7ff fed9 	bl	8008a30 <check_fs>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	e000      	b.n	8008c84 <find_volume+0x1a8>
 8008c82:	2303      	movs	r3, #3
 8008c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008c88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d905      	bls.n	8008c9c <find_volume+0x1c0>
 8008c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c92:	3301      	adds	r3, #1
 8008c94:	643b      	str	r3, [r7, #64]	; 0x40
 8008c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d9e1      	bls.n	8008c60 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d101      	bne.n	8008ca8 <find_volume+0x1cc>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e192      	b.n	8008fce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008ca8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d901      	bls.n	8008cb4 <find_volume+0x1d8>
 8008cb0:	230d      	movs	r3, #13
 8008cb2:	e18c      	b.n	8008fce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	3334      	adds	r3, #52	; 0x34
 8008cb8:	330b      	adds	r3, #11
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe fc6c 	bl	8007598 <ld_word>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	899b      	ldrh	r3, [r3, #12]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d001      	beq.n	8008cd0 <find_volume+0x1f4>
 8008ccc:	230d      	movs	r3, #13
 8008cce:	e17e      	b.n	8008fce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	3334      	adds	r3, #52	; 0x34
 8008cd4:	3316      	adds	r3, #22
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fc5e 	bl	8007598 <ld_word>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <find_volume+0x218>
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	3334      	adds	r3, #52	; 0x34
 8008cea:	3324      	adds	r3, #36	; 0x24
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fe fc6b 	bl	80075c8 <ld_dword>
 8008cf2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cf8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	789b      	ldrb	r3, [r3, #2]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d005      	beq.n	8008d18 <find_volume+0x23c>
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	789b      	ldrb	r3, [r3, #2]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d001      	beq.n	8008d18 <find_volume+0x23c>
 8008d14:	230d      	movs	r3, #13
 8008d16:	e15a      	b.n	8008fce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	789b      	ldrb	r3, [r3, #2]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	895b      	ldrh	r3, [r3, #10]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d008      	beq.n	8008d4c <find_volume+0x270>
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	895b      	ldrh	r3, [r3, #10]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	895b      	ldrh	r3, [r3, #10]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	4013      	ands	r3, r2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <find_volume+0x274>
 8008d4c:	230d      	movs	r3, #13
 8008d4e:	e13e      	b.n	8008fce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	3334      	adds	r3, #52	; 0x34
 8008d54:	3311      	adds	r3, #17
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fc1e 	bl	8007598 <ld_word>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	891b      	ldrh	r3, [r3, #8]
 8008d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d6a:	8992      	ldrh	r2, [r2, #12]
 8008d6c:	0952      	lsrs	r2, r2, #5
 8008d6e:	b292      	uxth	r2, r2
 8008d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d74:	fb02 f201 	mul.w	r2, r2, r1
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <find_volume+0x2a8>
 8008d80:	230d      	movs	r3, #13
 8008d82:	e124      	b.n	8008fce <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	3334      	adds	r3, #52	; 0x34
 8008d88:	3313      	adds	r3, #19
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fc04 	bl	8007598 <ld_word>
 8008d90:	4603      	mov	r3, r0
 8008d92:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d106      	bne.n	8008da8 <find_volume+0x2cc>
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	3334      	adds	r3, #52	; 0x34
 8008d9e:	3320      	adds	r3, #32
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fc11 	bl	80075c8 <ld_dword>
 8008da6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	3334      	adds	r3, #52	; 0x34
 8008dac:	330e      	adds	r3, #14
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fbf2 	bl	8007598 <ld_word>
 8008db4:	4603      	mov	r3, r0
 8008db6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008db8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <find_volume+0x2ec>
 8008dbe:	230d      	movs	r3, #13
 8008dc0:	e105      	b.n	8008fce <find_volume+0x4f2>
 8008dc2:	bf00      	nop
 8008dc4:	200000b4 	.word	0x200000b4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008dc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dcc:	4413      	add	r3, r2
 8008dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dd0:	8911      	ldrh	r1, [r2, #8]
 8008dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dd4:	8992      	ldrh	r2, [r2, #12]
 8008dd6:	0952      	lsrs	r2, r2, #5
 8008dd8:	b292      	uxth	r2, r2
 8008dda:	fbb1 f2f2 	udiv	r2, r1, r2
 8008dde:	b292      	uxth	r2, r2
 8008de0:	4413      	add	r3, r2
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d201      	bcs.n	8008df0 <find_volume+0x314>
 8008dec:	230d      	movs	r3, #13
 8008dee:	e0ee      	b.n	8008fce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008df8:	8952      	ldrh	r2, [r2, #10]
 8008dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <find_volume+0x32e>
 8008e06:	230d      	movs	r3, #13
 8008e08:	e0e1      	b.n	8008fce <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d802      	bhi.n	8008e20 <find_volume+0x344>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d802      	bhi.n	8008e30 <find_volume+0x354>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	1c9a      	adds	r2, r3, #2
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e3c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e42:	441a      	add	r2, r3
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008e48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	441a      	add	r2, r3
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008e52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d11e      	bne.n	8008e98 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	3334      	adds	r3, #52	; 0x34
 8008e5e:	332a      	adds	r3, #42	; 0x2a
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe fb99 	bl	8007598 <ld_word>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <find_volume+0x394>
 8008e6c:	230d      	movs	r3, #13
 8008e6e:	e0ae      	b.n	8008fce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	891b      	ldrh	r3, [r3, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <find_volume+0x3a0>
 8008e78:	230d      	movs	r3, #13
 8008e7a:	e0a8      	b.n	8008fce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	3334      	adds	r3, #52	; 0x34
 8008e80:	332c      	adds	r3, #44	; 0x2c
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fba0 	bl	80075c8 <ld_dword>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	647b      	str	r3, [r7, #68]	; 0x44
 8008e96:	e01f      	b.n	8008ed8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	891b      	ldrh	r3, [r3, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <find_volume+0x3c8>
 8008ea0:	230d      	movs	r3, #13
 8008ea2:	e094      	b.n	8008fce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eaa:	441a      	add	r2, r3
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d103      	bne.n	8008ec0 <find_volume+0x3e4>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	e00a      	b.n	8008ed6 <find_volume+0x3fa>
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	699a      	ldr	r2, [r3, #24]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	4413      	add	r3, r2
 8008eca:	085a      	lsrs	r2, r3, #1
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008ed6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eda:	69da      	ldr	r2, [r3, #28]
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	899b      	ldrh	r3, [r3, #12]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee4:	440b      	add	r3, r1
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008eea:	8989      	ldrh	r1, [r1, #12]
 8008eec:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d201      	bcs.n	8008ef8 <find_volume+0x41c>
 8008ef4:	230d      	movs	r3, #13
 8008ef6:	e06a      	b.n	8008fce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	615a      	str	r2, [r3, #20]
 8008f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f02:	695a      	ldr	r2, [r3, #20]
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	2280      	movs	r2, #128	; 0x80
 8008f0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008f0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d149      	bne.n	8008faa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	3334      	adds	r3, #52	; 0x34
 8008f1a:	3330      	adds	r3, #48	; 0x30
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe fb3b 	bl	8007598 <ld_word>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d140      	bne.n	8008faa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f30:	f7fe fde2 	bl	8007af8 <move_window>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d137      	bne.n	8008faa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	3334      	adds	r3, #52	; 0x34
 8008f44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fb25 	bl	8007598 <ld_word>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	461a      	mov	r2, r3
 8008f52:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d127      	bne.n	8008faa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	3334      	adds	r3, #52	; 0x34
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe fb32 	bl	80075c8 <ld_dword>
 8008f64:	4603      	mov	r3, r0
 8008f66:	4a1c      	ldr	r2, [pc, #112]	; (8008fd8 <find_volume+0x4fc>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d11e      	bne.n	8008faa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6e:	3334      	adds	r3, #52	; 0x34
 8008f70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe fb27 	bl	80075c8 <ld_dword>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	4a17      	ldr	r2, [pc, #92]	; (8008fdc <find_volume+0x500>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d113      	bne.n	8008faa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	3334      	adds	r3, #52	; 0x34
 8008f86:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe fb1c 	bl	80075c8 <ld_dword>
 8008f90:	4602      	mov	r2, r0
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	3334      	adds	r3, #52	; 0x34
 8008f9a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fe fb12 	bl	80075c8 <ld_dword>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008fb0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008fb2:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <find_volume+0x504>)
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <find_volume+0x504>)
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <find_volume+0x504>)
 8008fc0:	881a      	ldrh	r2, [r3, #0]
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008fc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fc8:	f7fe fd2e 	bl	8007a28 <clear_lock>
#endif
	return FR_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3758      	adds	r7, #88	; 0x58
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	41615252 	.word	0x41615252
 8008fdc:	61417272 	.word	0x61417272
 8008fe0:	200000b8 	.word	0x200000b8

08008fe4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008fee:	2309      	movs	r3, #9
 8008ff0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01c      	beq.n	8009032 <validate+0x4e>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d018      	beq.n	8009032 <validate+0x4e>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d013      	beq.n	8009032 <validate+0x4e>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	889a      	ldrh	r2, [r3, #4]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	88db      	ldrh	r3, [r3, #6]
 8009014:	429a      	cmp	r2, r3
 8009016:	d10c      	bne.n	8009032 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe fa1c 	bl	800745c <disk_status>
 8009024:	4603      	mov	r3, r0
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <validate+0x4e>
			res = FR_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d102      	bne.n	800903e <validate+0x5a>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	e000      	b.n	8009040 <validate+0x5c>
 800903e:	2300      	movs	r3, #0
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	6013      	str	r3, [r2, #0]
	return res;
 8009044:	7bfb      	ldrb	r3, [r7, #15]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009062:	f107 0310 	add.w	r3, r7, #16
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff fc9e 	bl	80089a8 <get_ldnumber>
 800906c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	2b00      	cmp	r3, #0
 8009072:	da01      	bge.n	8009078 <f_mount+0x28>
 8009074:	230b      	movs	r3, #11
 8009076:	e02b      	b.n	80090d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009078:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <f_mount+0x88>)
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009080:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009088:	69b8      	ldr	r0, [r7, #24]
 800908a:	f7fe fccd 	bl	8007a28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	2200      	movs	r2, #0
 8009092:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	490d      	ldr	r1, [pc, #52]	; (80090d8 <f_mount+0x88>)
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <f_mount+0x66>
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d001      	beq.n	80090ba <f_mount+0x6a>
 80090b6:	2300      	movs	r3, #0
 80090b8:	e00a      	b.n	80090d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80090ba:	f107 010c 	add.w	r1, r7, #12
 80090be:	f107 0308 	add.w	r3, r7, #8
 80090c2:	2200      	movs	r2, #0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7ff fd09 	bl	8008adc <find_volume>
 80090ca:	4603      	mov	r3, r0
 80090cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3720      	adds	r7, #32
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	200000b4 	.word	0x200000b4

080090dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b098      	sub	sp, #96	; 0x60
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <f_open+0x18>
 80090f0:	2309      	movs	r3, #9
 80090f2:	e1bb      	b.n	800946c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80090fc:	79fa      	ldrb	r2, [r7, #7]
 80090fe:	f107 0110 	add.w	r1, r7, #16
 8009102:	f107 0308 	add.w	r3, r7, #8
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fce8 	bl	8008adc <find_volume>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009116:	2b00      	cmp	r3, #0
 8009118:	f040 819f 	bne.w	800945a <f_open+0x37e>
		dj.obj.fs = fs;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	f107 0314 	add.w	r3, r7, #20
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff fbc7 	bl	80088bc <follow_path>
 800912e:	4603      	mov	r3, r0
 8009130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009138:	2b00      	cmp	r3, #0
 800913a:	d11a      	bne.n	8009172 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800913c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009140:	b25b      	sxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	da03      	bge.n	800914e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009146:	2306      	movs	r3, #6
 8009148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800914c:	e011      	b.n	8009172 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	f023 0301 	bic.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	bf14      	ite	ne
 8009158:	2301      	movne	r3, #1
 800915a:	2300      	moveq	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	461a      	mov	r2, r3
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fb16 	bl	8007798 <chk_lock>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	f003 031c 	and.w	r3, r3, #28
 8009178:	2b00      	cmp	r3, #0
 800917a:	d07f      	beq.n	800927c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800917c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009180:	2b00      	cmp	r3, #0
 8009182:	d017      	beq.n	80091b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009184:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009188:	2b04      	cmp	r3, #4
 800918a:	d10e      	bne.n	80091aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800918c:	f7fe fb60 	bl	8007850 <enq_lock>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d006      	beq.n	80091a4 <f_open+0xc8>
 8009196:	f107 0314 	add.w	r3, r7, #20
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff fac8 	bl	8008730 <dir_register>
 80091a0:	4603      	mov	r3, r0
 80091a2:	e000      	b.n	80091a6 <f_open+0xca>
 80091a4:	2312      	movs	r3, #18
 80091a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80091aa:	79fb      	ldrb	r3, [r7, #7]
 80091ac:	f043 0308 	orr.w	r3, r3, #8
 80091b0:	71fb      	strb	r3, [r7, #7]
 80091b2:	e010      	b.n	80091d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80091b4:	7ebb      	ldrb	r3, [r7, #26]
 80091b6:	f003 0311 	and.w	r3, r3, #17
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <f_open+0xea>
					res = FR_DENIED;
 80091be:	2307      	movs	r3, #7
 80091c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80091c4:	e007      	b.n	80091d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <f_open+0xfa>
 80091d0:	2308      	movs	r3, #8
 80091d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80091d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d168      	bne.n	80092b0 <f_open+0x1d4>
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d063      	beq.n	80092b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80091e8:	f7fb f93c 	bl	8004464 <get_fattime>
 80091ec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	330e      	adds	r3, #14
 80091f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe fa25 	bl	8007644 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80091fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fc:	3316      	adds	r3, #22
 80091fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009200:	4618      	mov	r0, r3
 8009202:	f7fe fa1f 	bl	8007644 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009208:	330b      	adds	r3, #11
 800920a:	2220      	movs	r2, #32
 800920c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009212:	4611      	mov	r1, r2
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff f9f7 	bl	8008608 <ld_clust>
 800921a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009220:	2200      	movs	r2, #0
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fa0f 	bl	8008646 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	331c      	adds	r3, #28
 800922c:	2100      	movs	r1, #0
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe fa08 	bl	8007644 <st_dword>
					fs->wflag = 1;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2201      	movs	r2, #1
 8009238:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800923a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d037      	beq.n	80092b0 <f_open+0x1d4>
						dw = fs->winsect;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009244:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009246:	f107 0314 	add.w	r3, r7, #20
 800924a:	2200      	movs	r2, #0
 800924c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe feff 	bl	8008052 <remove_chain>
 8009254:	4603      	mov	r3, r0
 8009256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800925a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800925e:	2b00      	cmp	r3, #0
 8009260:	d126      	bne.n	80092b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fc46 	bl	8007af8 <move_window>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009276:	3a01      	subs	r2, #1
 8009278:	611a      	str	r2, [r3, #16]
 800927a:	e019      	b.n	80092b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800927c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009280:	2b00      	cmp	r3, #0
 8009282:	d115      	bne.n	80092b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009284:	7ebb      	ldrb	r3, [r7, #26]
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <f_open+0x1ba>
					res = FR_NO_FILE;
 800928e:	2304      	movs	r3, #4
 8009290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009294:	e00c      	b.n	80092b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <f_open+0x1d4>
 80092a0:	7ebb      	ldrb	r3, [r7, #26]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <f_open+0x1d4>
						res = FR_DENIED;
 80092aa:	2307      	movs	r3, #7
 80092ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80092b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d128      	bne.n	800930a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	f003 0308 	and.w	r3, r3, #8
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80092d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80092d8:	79fb      	ldrb	r3, [r7, #7]
 80092da:	f023 0301 	bic.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bf14      	ite	ne
 80092e2:	2301      	movne	r3, #1
 80092e4:	2300      	moveq	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	f107 0314 	add.w	r3, r7, #20
 80092ee:	4611      	mov	r1, r2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe facf 	bl	8007894 <inc_lock>
 80092f6:	4602      	mov	r2, r0
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d102      	bne.n	800930a <f_open+0x22e>
 8009304:	2302      	movs	r3, #2
 8009306:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800930a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 80a3 	bne.w	800945a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff f974 	bl	8008608 <ld_clust>
 8009320:	4602      	mov	r2, r0
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	331c      	adds	r3, #28
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe f94c 	bl	80075c8 <ld_dword>
 8009330:	4602      	mov	r2, r0
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	88da      	ldrh	r2, [r3, #6]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	79fa      	ldrb	r2, [r7, #7]
 800934e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	3330      	adds	r3, #48	; 0x30
 8009366:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe f9b6 	bl	80076de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b00      	cmp	r3, #0
 800937a:	d06e      	beq.n	800945a <f_open+0x37e>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d06a      	beq.n	800945a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	895b      	ldrh	r3, [r3, #10]
 8009390:	461a      	mov	r2, r3
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	fb03 f302 	mul.w	r3, r3, r2
 800939a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	657b      	str	r3, [r7, #84]	; 0x54
 80093a8:	e016      	b.n	80093d8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fc5f 	bl	8007c72 <get_fat>
 80093b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80093b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d802      	bhi.n	80093c2 <f_open+0x2e6>
 80093bc:	2302      	movs	r3, #2
 80093be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80093c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c8:	d102      	bne.n	80093d0 <f_open+0x2f4>
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	657b      	str	r3, [r7, #84]	; 0x54
 80093d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <f_open+0x30c>
 80093e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d8e0      	bhi.n	80093aa <f_open+0x2ce>
				}
				fp->clust = clst;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80093ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d131      	bne.n	800945a <f_open+0x37e>
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	899b      	ldrh	r3, [r3, #12]
 80093fa:	461a      	mov	r2, r3
 80093fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009402:	fb02 f201 	mul.w	r2, r2, r1
 8009406:	1a9b      	subs	r3, r3, r2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d026      	beq.n	800945a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009410:	4618      	mov	r0, r3
 8009412:	f7fe fc0f 	bl	8007c34 <clust2sect>
 8009416:	6478      	str	r0, [r7, #68]	; 0x44
 8009418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941a:	2b00      	cmp	r3, #0
 800941c:	d103      	bne.n	8009426 <f_open+0x34a>
						res = FR_INT_ERR;
 800941e:	2302      	movs	r3, #2
 8009420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009424:	e019      	b.n	800945a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	899b      	ldrh	r3, [r3, #12]
 800942a:	461a      	mov	r2, r3
 800942c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800942e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009434:	441a      	add	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	7858      	ldrb	r0, [r3, #1]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a1a      	ldr	r2, [r3, #32]
 8009448:	2301      	movs	r3, #1
 800944a:	f7fe f847 	bl	80074dc <disk_read>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <f_open+0x37e>
 8009454:	2301      	movs	r3, #1
 8009456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800945a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <f_open+0x38c>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800946c:	4618      	mov	r0, r3
 800946e:	3760      	adds	r7, #96	; 0x60
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08c      	sub	sp, #48	; 0x30
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f107 0210 	add.w	r2, r7, #16
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff fda5 	bl	8008fe4 <validate>
 800949a:	4603      	mov	r3, r0
 800949c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80094a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d107      	bne.n	80094b8 <f_write+0x44>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	7d5b      	ldrb	r3, [r3, #21]
 80094ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80094b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <f_write+0x4a>
 80094b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094bc:	e16a      	b.n	8009794 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	7d1b      	ldrb	r3, [r3, #20]
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <f_write+0x5a>
 80094ca:	2307      	movs	r3, #7
 80094cc:	e162      	b.n	8009794 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	441a      	add	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	429a      	cmp	r2, r3
 80094dc:	f080 814c 	bcs.w	8009778 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	43db      	mvns	r3, r3
 80094e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80094e8:	e146      	b.n	8009778 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	8992      	ldrh	r2, [r2, #12]
 80094f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094f6:	fb02 f201 	mul.w	r2, r2, r1
 80094fa:	1a9b      	subs	r3, r3, r2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f040 80f1 	bne.w	80096e4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	8992      	ldrh	r2, [r2, #12]
 800950a:	fbb3 f3f2 	udiv	r3, r3, r2
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	8952      	ldrh	r2, [r2, #10]
 8009512:	3a01      	subs	r2, #1
 8009514:	4013      	ands	r3, r2
 8009516:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d143      	bne.n	80095a6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10c      	bne.n	8009540 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d11a      	bne.n	8009568 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2100      	movs	r1, #0
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fdf0 	bl	800811c <create_chain>
 800953c:	62b8      	str	r0, [r7, #40]	; 0x28
 800953e:	e013      	b.n	8009568 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d007      	beq.n	8009558 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	4619      	mov	r1, r3
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7fe fe7c 	bl	800824c <clmt_clust>
 8009554:	62b8      	str	r0, [r7, #40]	; 0x28
 8009556:	e007      	b.n	8009568 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	4619      	mov	r1, r3
 8009560:	4610      	mov	r0, r2
 8009562:	f7fe fddb 	bl	800811c <create_chain>
 8009566:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8109 	beq.w	8009782 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	2b01      	cmp	r3, #1
 8009574:	d104      	bne.n	8009580 <f_write+0x10c>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2202      	movs	r2, #2
 800957a:	755a      	strb	r2, [r3, #21]
 800957c:	2302      	movs	r3, #2
 800957e:	e109      	b.n	8009794 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009586:	d104      	bne.n	8009592 <f_write+0x11e>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	755a      	strb	r2, [r3, #21]
 800958e:	2301      	movs	r3, #1
 8009590:	e100      	b.n	8009794 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009596:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <f_write+0x132>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	7d1b      	ldrb	r3, [r3, #20]
 80095aa:	b25b      	sxtb	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	da18      	bge.n	80095e2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	7858      	ldrb	r0, [r3, #1]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a1a      	ldr	r2, [r3, #32]
 80095be:	2301      	movs	r3, #1
 80095c0:	f7fd ffac 	bl	800751c <disk_write>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d004      	beq.n	80095d4 <f_write+0x160>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2201      	movs	r2, #1
 80095ce:	755a      	strb	r2, [r3, #21]
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0df      	b.n	8009794 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	7d1b      	ldrb	r3, [r3, #20]
 80095d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	4619      	mov	r1, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	f7fe fb22 	bl	8007c34 <clust2sect>
 80095f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <f_write+0x18e>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2202      	movs	r2, #2
 80095fc:	755a      	strb	r2, [r3, #21]
 80095fe:	2302      	movs	r3, #2
 8009600:	e0c8      	b.n	8009794 <f_write+0x320>
			sect += csect;
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	4413      	add	r3, r2
 8009608:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	899b      	ldrh	r3, [r3, #12]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	fbb3 f3f2 	udiv	r3, r3, r2
 8009616:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d043      	beq.n	80096a6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	4413      	add	r3, r2
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	8952      	ldrh	r2, [r2, #10]
 8009628:	4293      	cmp	r3, r2
 800962a:	d905      	bls.n	8009638 <f_write+0x1c4>
					cc = fs->csize - csect;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	895b      	ldrh	r3, [r3, #10]
 8009630:	461a      	mov	r2, r3
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	7858      	ldrb	r0, [r3, #1]
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	69f9      	ldr	r1, [r7, #28]
 8009642:	f7fd ff6b 	bl	800751c <disk_write>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d004      	beq.n	8009656 <f_write+0x1e2>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	755a      	strb	r2, [r3, #21]
 8009652:	2301      	movs	r3, #1
 8009654:	e09e      	b.n	8009794 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6a1a      	ldr	r2, [r3, #32]
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	6a3a      	ldr	r2, [r7, #32]
 8009660:	429a      	cmp	r2, r3
 8009662:	d918      	bls.n	8009696 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a1a      	ldr	r2, [r3, #32]
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	8992      	ldrh	r2, [r2, #12]
 8009676:	fb02 f303 	mul.w	r3, r2, r3
 800967a:	69fa      	ldr	r2, [r7, #28]
 800967c:	18d1      	adds	r1, r2, r3
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	899b      	ldrh	r3, [r3, #12]
 8009682:	461a      	mov	r2, r3
 8009684:	f7fe f80a 	bl	800769c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	7d1b      	ldrb	r3, [r3, #20]
 800968c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009690:	b2da      	uxtb	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	899b      	ldrh	r3, [r3, #12]
 800969a:	461a      	mov	r2, r3
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	fb02 f303 	mul.w	r3, r2, r3
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80096a4:	e04b      	b.n	800973e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d016      	beq.n	80096de <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d210      	bcs.n	80096de <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	7858      	ldrb	r0, [r3, #1]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096c6:	2301      	movs	r3, #1
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	f7fd ff07 	bl	80074dc <disk_read>
 80096ce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	755a      	strb	r2, [r3, #21]
 80096da:	2301      	movs	r3, #1
 80096dc:	e05a      	b.n	8009794 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	899b      	ldrh	r3, [r3, #12]
 80096e8:	4618      	mov	r0, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	8992      	ldrh	r2, [r2, #12]
 80096f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80096f6:	fb02 f201 	mul.w	r2, r2, r1
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	1ac3      	subs	r3, r0, r3
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	429a      	cmp	r2, r3
 8009706:	d901      	bls.n	800970c <f_write+0x298>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	8992      	ldrh	r2, [r2, #12]
 800971a:	fbb3 f0f2 	udiv	r0, r3, r2
 800971e:	fb02 f200 	mul.w	r2, r2, r0
 8009722:	1a9b      	subs	r3, r3, r2
 8009724:	440b      	add	r3, r1
 8009726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009728:	69f9      	ldr	r1, [r7, #28]
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd ffb6 	bl	800769c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	7d1b      	ldrb	r3, [r3, #20]
 8009734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009738:	b2da      	uxtb	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009742:	4413      	add	r3, r2
 8009744:	61fb      	str	r3, [r7, #28]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	699a      	ldr	r2, [r3, #24]
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	441a      	add	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	619a      	str	r2, [r3, #24]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	429a      	cmp	r2, r3
 800975c:	bf38      	it	cc
 800975e:	461a      	movcc	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	60da      	str	r2, [r3, #12]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	441a      	add	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f47f aeb5 	bne.w	80094ea <f_write+0x76>
 8009780:	e000      	b.n	8009784 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009782:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	7d1b      	ldrb	r3, [r3, #20]
 8009788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978c:	b2da      	uxtb	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3730      	adds	r7, #48	; 0x30
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f107 0208 	add.w	r2, r7, #8
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fc19 	bl	8008fe4 <validate>
 80097b2:	4603      	mov	r3, r0
 80097b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d168      	bne.n	800988e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7d1b      	ldrb	r3, [r3, #20]
 80097c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d062      	beq.n	800988e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	7d1b      	ldrb	r3, [r3, #20]
 80097cc:	b25b      	sxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	da15      	bge.n	80097fe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	7858      	ldrb	r0, [r3, #1]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a1a      	ldr	r2, [r3, #32]
 80097e0:	2301      	movs	r3, #1
 80097e2:	f7fd fe9b 	bl	800751c <disk_write>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <f_sync+0x54>
 80097ec:	2301      	movs	r3, #1
 80097ee:	e04f      	b.n	8009890 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	7d1b      	ldrb	r3, [r3, #20]
 80097f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80097fe:	f7fa fe31 	bl	8004464 <get_fattime>
 8009802:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f7fe f973 	bl	8007af8 <move_window>
 8009812:	4603      	mov	r3, r0
 8009814:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d138      	bne.n	800988e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009820:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	330b      	adds	r3, #11
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	330b      	adds	r3, #11
 800982c:	f042 0220 	orr.w	r2, r2, #32
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6818      	ldr	r0, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	461a      	mov	r2, r3
 800983e:	68f9      	ldr	r1, [r7, #12]
 8009840:	f7fe ff01 	bl	8008646 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f103 021c 	add.w	r2, r3, #28
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	4619      	mov	r1, r3
 8009850:	4610      	mov	r0, r2
 8009852:	f7fd fef7 	bl	8007644 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3316      	adds	r3, #22
 800985a:	6939      	ldr	r1, [r7, #16]
 800985c:	4618      	mov	r0, r3
 800985e:	f7fd fef1 	bl	8007644 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3312      	adds	r3, #18
 8009866:	2100      	movs	r1, #0
 8009868:	4618      	mov	r0, r3
 800986a:	f7fd fed0 	bl	800760e <st_word>
					fs->wflag = 1;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2201      	movs	r2, #1
 8009872:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe f96c 	bl	8007b54 <sync_fs>
 800987c:	4603      	mov	r3, r0
 800987e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	7d1b      	ldrb	r3, [r3, #20]
 8009884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009888:	b2da      	uxtb	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800988e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff ff7b 	bl	800979c <f_sync>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d118      	bne.n	80098e2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f107 0208 	add.w	r2, r7, #8
 80098b6:	4611      	mov	r1, r2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff fb93 	bl	8008fe4 <validate>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10c      	bne.n	80098e2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe f86f 	bl	80079b0 <dec_lock>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009902:	4b1f      	ldr	r3, [pc, #124]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009904:	7a5b      	ldrb	r3, [r3, #9]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d131      	bne.n	8009970 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800990c:	4b1c      	ldr	r3, [pc, #112]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 800990e:	7a5b      	ldrb	r3, [r3, #9]
 8009910:	b2db      	uxtb	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009916:	2100      	movs	r1, #0
 8009918:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800991a:	4b19      	ldr	r3, [pc, #100]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 800991c:	7a5b      	ldrb	r3, [r3, #9]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	4a17      	ldr	r2, [pc, #92]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800992a:	4b15      	ldr	r3, [pc, #84]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 800992c:	7a5b      	ldrb	r3, [r3, #9]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	461a      	mov	r2, r3
 8009932:	4b13      	ldr	r3, [pc, #76]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009934:	4413      	add	r3, r2
 8009936:	79fa      	ldrb	r2, [r7, #7]
 8009938:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800993a:	4b11      	ldr	r3, [pc, #68]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 800993c:	7a5b      	ldrb	r3, [r3, #9]
 800993e:	b2db      	uxtb	r3, r3
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	b2d1      	uxtb	r1, r2
 8009944:	4a0e      	ldr	r2, [pc, #56]	; (8009980 <FATFS_LinkDriverEx+0x94>)
 8009946:	7251      	strb	r1, [r2, #9]
 8009948:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800994a:	7dbb      	ldrb	r3, [r7, #22]
 800994c:	3330      	adds	r3, #48	; 0x30
 800994e:	b2da      	uxtb	r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	3301      	adds	r3, #1
 8009958:	223a      	movs	r2, #58	; 0x3a
 800995a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	3302      	adds	r3, #2
 8009960:	222f      	movs	r2, #47	; 0x2f
 8009962:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3303      	adds	r3, #3
 8009968:	2200      	movs	r2, #0
 800996a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
}
 8009972:	4618      	mov	r0, r3
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	200000dc 	.word	0x200000dc

08009984 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800998e:	2200      	movs	r2, #0
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff ffaa 	bl	80098ec <FATFS_LinkDriverEx>
 8009998:	4603      	mov	r3, r0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80099a8:	2201      	movs	r2, #1
 80099aa:	490e      	ldr	r1, [pc, #56]	; (80099e4 <MX_USB_HOST_Init+0x40>)
 80099ac:	480e      	ldr	r0, [pc, #56]	; (80099e8 <MX_USB_HOST_Init+0x44>)
 80099ae:	f7fc f9fd 	bl	8005dac <USBH_Init>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80099b8:	f7f6 ff8e 	bl	80008d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80099bc:	490b      	ldr	r1, [pc, #44]	; (80099ec <MX_USB_HOST_Init+0x48>)
 80099be:	480a      	ldr	r0, [pc, #40]	; (80099e8 <MX_USB_HOST_Init+0x44>)
 80099c0:	f7fc fa82 	bl	8005ec8 <USBH_RegisterClass>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80099ca:	f7f6 ff85 	bl	80008d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80099ce:	4806      	ldr	r0, [pc, #24]	; (80099e8 <MX_USB_HOST_Init+0x44>)
 80099d0:	f7fc fb06 	bl	8005fe0 <USBH_Start>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80099da:	f7f6 ff7d 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80099de:	bf00      	nop
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	08009a05 	.word	0x08009a05
 80099e8:	20004238 	.word	0x20004238
 80099ec:	2000000c 	.word	0x2000000c

080099f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80099f4:	4802      	ldr	r0, [pc, #8]	; (8009a00 <MX_USB_HOST_Process+0x10>)
 80099f6:	f7fc fb03 	bl	8006000 <USBH_Process>
}
 80099fa:	bf00      	nop
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20004238 	.word	0x20004238

08009a04 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d819      	bhi.n	8009a4c <USBH_UserProcess+0x48>
 8009a18:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <USBH_UserProcess+0x1c>)
 8009a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1e:	bf00      	nop
 8009a20:	08009a4d 	.word	0x08009a4d
 8009a24:	08009a3d 	.word	0x08009a3d
 8009a28:	08009a4d 	.word	0x08009a4d
 8009a2c:	08009a45 	.word	0x08009a45
 8009a30:	08009a35 	.word	0x08009a35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009a34:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <USBH_UserProcess+0x58>)
 8009a36:	2203      	movs	r2, #3
 8009a38:	701a      	strb	r2, [r3, #0]
  break;
 8009a3a:	e008      	b.n	8009a4e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009a3c:	4b07      	ldr	r3, [pc, #28]	; (8009a5c <USBH_UserProcess+0x58>)
 8009a3e:	2202      	movs	r2, #2
 8009a40:	701a      	strb	r2, [r3, #0]
  break;
 8009a42:	e004      	b.n	8009a4e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <USBH_UserProcess+0x58>)
 8009a46:	2201      	movs	r2, #1
 8009a48:	701a      	strb	r2, [r3, #0]
  break;
 8009a4a:	e000      	b.n	8009a4e <USBH_UserProcess+0x4a>

  default:
  break;
 8009a4c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	200000e8 	.word	0x200000e8

08009a60 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08a      	sub	sp, #40	; 0x28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a68:	f107 0314 	add.w	r3, r7, #20
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	605a      	str	r2, [r3, #4]
 8009a72:	609a      	str	r2, [r3, #8]
 8009a74:	60da      	str	r2, [r3, #12]
 8009a76:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a80:	d147      	bne.n	8009b12 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a82:	2300      	movs	r3, #0
 8009a84:	613b      	str	r3, [r7, #16]
 8009a86:	4b25      	ldr	r3, [pc, #148]	; (8009b1c <HAL_HCD_MspInit+0xbc>)
 8009a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8a:	4a24      	ldr	r2, [pc, #144]	; (8009b1c <HAL_HCD_MspInit+0xbc>)
 8009a8c:	f043 0301 	orr.w	r3, r3, #1
 8009a90:	6313      	str	r3, [r2, #48]	; 0x30
 8009a92:	4b22      	ldr	r3, [pc, #136]	; (8009b1c <HAL_HCD_MspInit+0xbc>)
 8009a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	613b      	str	r3, [r7, #16]
 8009a9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009aac:	f107 0314 	add.w	r3, r7, #20
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	481b      	ldr	r0, [pc, #108]	; (8009b20 <HAL_HCD_MspInit+0xc0>)
 8009ab4:	f7f7 f98c 	bl	8000dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ab8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009abe:	2302      	movs	r3, #2
 8009ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009aca:	230a      	movs	r3, #10
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ace:	f107 0314 	add.w	r3, r7, #20
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4812      	ldr	r0, [pc, #72]	; (8009b20 <HAL_HCD_MspInit+0xc0>)
 8009ad6:	f7f7 f97b 	bl	8000dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ada:	4b10      	ldr	r3, [pc, #64]	; (8009b1c <HAL_HCD_MspInit+0xbc>)
 8009adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ade:	4a0f      	ldr	r2, [pc, #60]	; (8009b1c <HAL_HCD_MspInit+0xbc>)
 8009ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae4:	6353      	str	r3, [r2, #52]	; 0x34
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60fb      	str	r3, [r7, #12]
 8009aea:	4b0c      	ldr	r3, [pc, #48]	; (8009b1c <HAL_HCD_MspInit+0xbc>)
 8009aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aee:	4a0b      	ldr	r2, [pc, #44]	; (8009b1c <HAL_HCD_MspInit+0xbc>)
 8009af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009af4:	6453      	str	r3, [r2, #68]	; 0x44
 8009af6:	4b09      	ldr	r3, [pc, #36]	; (8009b1c <HAL_HCD_MspInit+0xbc>)
 8009af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b02:	2200      	movs	r2, #0
 8009b04:	2100      	movs	r1, #0
 8009b06:	2043      	movs	r0, #67	; 0x43
 8009b08:	f7f7 f92b 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b0c:	2043      	movs	r0, #67	; 0x43
 8009b0e:	f7f7 f944 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b12:	bf00      	nop
 8009b14:	3728      	adds	r7, #40	; 0x28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	40023800 	.word	0x40023800
 8009b20:	40020000 	.word	0x40020000

08009b24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fc fe37 	bl	80067a6 <USBH_LL_IncTimer>
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fc fe6f 	bl	8006832 <USBH_LL_Connect>
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fc fe78 	bl	8006860 <USBH_LL_Disconnect>
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
 8009b84:	4613      	mov	r3, r2
 8009b86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fc fe29 	bl	80067fa <USBH_LL_PortEnabled>
}
 8009ba8:	bf00      	nop
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fc fe29 	bl	8006816 <USBH_LL_PortDisabled>
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d12a      	bne.n	8009c34 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009bde:	4a18      	ldr	r2, [pc, #96]	; (8009c40 <USBH_LL_Init+0x74>)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a15      	ldr	r2, [pc, #84]	; (8009c40 <USBH_LL_Init+0x74>)
 8009bea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009bee:	4b14      	ldr	r3, [pc, #80]	; (8009c40 <USBH_LL_Init+0x74>)
 8009bf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009bf4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009bf6:	4b12      	ldr	r3, [pc, #72]	; (8009c40 <USBH_LL_Init+0x74>)
 8009bf8:	2208      	movs	r2, #8
 8009bfa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009bfc:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <USBH_LL_Init+0x74>)
 8009bfe:	2201      	movs	r2, #1
 8009c00:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c02:	4b0f      	ldr	r3, [pc, #60]	; (8009c40 <USBH_LL_Init+0x74>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009c08:	4b0d      	ldr	r3, [pc, #52]	; (8009c40 <USBH_LL_Init+0x74>)
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <USBH_LL_Init+0x74>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009c14:	480a      	ldr	r0, [pc, #40]	; (8009c40 <USBH_LL_Init+0x74>)
 8009c16:	f7f7 faaa 	bl	800116e <HAL_HCD_Init>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009c20:	f7f6 fe5a 	bl	80008d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009c24:	4806      	ldr	r0, [pc, #24]	; (8009c40 <USBH_LL_Init+0x74>)
 8009c26:	f7f7 fe8e 	bl	8001946 <HAL_HCD_GetCurrentFrame>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7fc fdaa 	bl	8006788 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20004610 	.word	0x20004610

08009c44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7f7 fdfd 	bl	800185a <HAL_HCD_Start>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f98c 	bl	8009f84 <USBH_Get_USB_Status>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7f7 fe05 	bl	80018a0 <HAL_HCD_Stop>
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 f971 	bl	8009f84 <USBH_Get_USB_Status>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7f7 fe4d 	bl	8001962 <HAL_HCD_GetCurrentSpeed>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d00c      	beq.n	8009ce8 <USBH_LL_GetSpeed+0x38>
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d80d      	bhi.n	8009cee <USBH_LL_GetSpeed+0x3e>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <USBH_LL_GetSpeed+0x2c>
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d003      	beq.n	8009ce2 <USBH_LL_GetSpeed+0x32>
 8009cda:	e008      	b.n	8009cee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce0:	e008      	b.n	8009cf4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce6:	e005      	b.n	8009cf4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009ce8:	2302      	movs	r3, #2
 8009cea:	73fb      	strb	r3, [r7, #15]
    break;
 8009cec:	e002      	b.n	8009cf4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8009cf2:	bf00      	nop
  }
  return  speed;
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7f7 fde0 	bl	80018da <HAL_HCD_ResetPort>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 f92f 	bl	8009f84 <USBH_Get_USB_Status>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7f7 fde7 	bl	800191e <HAL_HCD_HC_GetXferCount>
 8009d50:	4603      	mov	r3, r0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d5a:	b590      	push	{r4, r7, lr}
 8009d5c:	b089      	sub	sp, #36	; 0x24
 8009d5e:	af04      	add	r7, sp, #16
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	4608      	mov	r0, r1
 8009d64:	4611      	mov	r1, r2
 8009d66:	461a      	mov	r2, r3
 8009d68:	4603      	mov	r3, r0
 8009d6a:	70fb      	strb	r3, [r7, #3]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70bb      	strb	r3, [r7, #2]
 8009d70:	4613      	mov	r3, r2
 8009d72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009d82:	787c      	ldrb	r4, [r7, #1]
 8009d84:	78ba      	ldrb	r2, [r7, #2]
 8009d86:	78f9      	ldrb	r1, [r7, #3]
 8009d88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009d8a:	9302      	str	r3, [sp, #8]
 8009d8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	4623      	mov	r3, r4
 8009d9a:	f7f7 fa4a 	bl	8001232 <HAL_HCD_HC_Init>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	4618      	mov	r0, r3
 8009da6:	f000 f8ed 	bl	8009f84 <USBH_Get_USB_Status>
 8009daa:	4603      	mov	r3, r0
 8009dac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd90      	pop	{r4, r7, pc}

08009db8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009dd2:	78fa      	ldrb	r2, [r7, #3]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7f7 faba 	bl	8001350 <HAL_HCD_HC_Halt>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 f8ce 	bl	8009f84 <USBH_Get_USB_Status>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009df6:	b590      	push	{r4, r7, lr}
 8009df8:	b089      	sub	sp, #36	; 0x24
 8009dfa:	af04      	add	r7, sp, #16
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	4608      	mov	r0, r1
 8009e00:	4611      	mov	r1, r2
 8009e02:	461a      	mov	r2, r3
 8009e04:	4603      	mov	r3, r0
 8009e06:	70fb      	strb	r3, [r7, #3]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70bb      	strb	r3, [r7, #2]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009e1e:	787c      	ldrb	r4, [r7, #1]
 8009e20:	78ba      	ldrb	r2, [r7, #2]
 8009e22:	78f9      	ldrb	r1, [r7, #3]
 8009e24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009e28:	9303      	str	r3, [sp, #12]
 8009e2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e2c:	9302      	str	r3, [sp, #8]
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4623      	mov	r3, r4
 8009e3a:	f7f7 faad 	bl	8001398 <HAL_HCD_HC_SubmitRequest>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 f89d 	bl	8009f84 <USBH_Get_USB_Status>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd90      	pop	{r4, r7, pc}

08009e58 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e6a:	78fa      	ldrb	r2, [r7, #3]
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7f7 fd41 	bl	80018f6 <HAL_HCD_HC_GetURBState>
 8009e74:	4603      	mov	r3, r0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d103      	bne.n	8009e9c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009e94:	78fb      	ldrb	r3, [r7, #3]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 f8a0 	bl	8009fdc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009e9c:	20c8      	movs	r0, #200	; 0xc8
 8009e9e:	f7f6 fe61 	bl	8000b64 <HAL_Delay>
  return USBH_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ec2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	212c      	movs	r1, #44	; 0x2c
 8009eca:	fb01 f303 	mul.w	r3, r1, r3
 8009ece:	4413      	add	r3, r2
 8009ed0:	333b      	adds	r3, #59	; 0x3b
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d009      	beq.n	8009eec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	212c      	movs	r1, #44	; 0x2c
 8009ede:	fb01 f303 	mul.w	r3, r1, r3
 8009ee2:	4413      	add	r3, r2
 8009ee4:	3354      	adds	r3, #84	; 0x54
 8009ee6:	78ba      	ldrb	r2, [r7, #2]
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	e008      	b.n	8009efe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	212c      	movs	r1, #44	; 0x2c
 8009ef2:	fb01 f303 	mul.w	r3, r1, r3
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3355      	adds	r3, #85	; 0x55
 8009efa:	78ba      	ldrb	r2, [r7, #2]
 8009efc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f22:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8009f24:	78fb      	ldrb	r3, [r7, #3]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	212c      	movs	r1, #44	; 0x2c
 8009f2a:	fb01 f303 	mul.w	r3, r1, r3
 8009f2e:	4413      	add	r3, r2
 8009f30:	333b      	adds	r3, #59	; 0x3b
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d009      	beq.n	8009f4c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	212c      	movs	r1, #44	; 0x2c
 8009f3e:	fb01 f303 	mul.w	r3, r1, r3
 8009f42:	4413      	add	r3, r2
 8009f44:	3354      	adds	r3, #84	; 0x54
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	73fb      	strb	r3, [r7, #15]
 8009f4a:	e008      	b.n	8009f5e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8009f4c:	78fb      	ldrb	r3, [r7, #3]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	212c      	movs	r1, #44	; 0x2c
 8009f52:	fb01 f303 	mul.w	r3, r1, r3
 8009f56:	4413      	add	r3, r2
 8009f58:	3355      	adds	r3, #85	; 0x55
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7f6 fdf5 	bl	8000b64 <HAL_Delay>
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f92:	79fb      	ldrb	r3, [r7, #7]
 8009f94:	2b03      	cmp	r3, #3
 8009f96:	d817      	bhi.n	8009fc8 <USBH_Get_USB_Status+0x44>
 8009f98:	a201      	add	r2, pc, #4	; (adr r2, 8009fa0 <USBH_Get_USB_Status+0x1c>)
 8009f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9e:	bf00      	nop
 8009fa0:	08009fb1 	.word	0x08009fb1
 8009fa4:	08009fb7 	.word	0x08009fb7
 8009fa8:	08009fbd 	.word	0x08009fbd
 8009fac:	08009fc3 	.word	0x08009fc3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb4:	e00b      	b.n	8009fce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fba:	e008      	b.n	8009fce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc0:	e005      	b.n	8009fce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc6:	e002      	b.n	8009fce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009fc8:	2302      	movs	r3, #2
 8009fca:	73fb      	strb	r3, [r7, #15]
    break;
 8009fcc:	bf00      	nop
  }
  return usb_status;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d102      	bne.n	8009ff6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]
 8009ff4:	e001      	b.n	8009ffa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	2101      	movs	r1, #1
 800a000:	4803      	ldr	r0, [pc, #12]	; (800a010 <MX_DriverVbusFS+0x34>)
 800a002:	f7f7 f881 	bl	8001108 <HAL_GPIO_WritePin>
}
 800a006:	bf00      	nop
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	40020800 	.word	0x40020800

0800a014 <__errno>:
 800a014:	4b01      	ldr	r3, [pc, #4]	; (800a01c <__errno+0x8>)
 800a016:	6818      	ldr	r0, [r3, #0]
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	2000002c 	.word	0x2000002c

0800a020 <__libc_init_array>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	4d0d      	ldr	r5, [pc, #52]	; (800a058 <__libc_init_array+0x38>)
 800a024:	4c0d      	ldr	r4, [pc, #52]	; (800a05c <__libc_init_array+0x3c>)
 800a026:	1b64      	subs	r4, r4, r5
 800a028:	10a4      	asrs	r4, r4, #2
 800a02a:	2600      	movs	r6, #0
 800a02c:	42a6      	cmp	r6, r4
 800a02e:	d109      	bne.n	800a044 <__libc_init_array+0x24>
 800a030:	4d0b      	ldr	r5, [pc, #44]	; (800a060 <__libc_init_array+0x40>)
 800a032:	4c0c      	ldr	r4, [pc, #48]	; (800a064 <__libc_init_array+0x44>)
 800a034:	f000 fc5e 	bl	800a8f4 <_init>
 800a038:	1b64      	subs	r4, r4, r5
 800a03a:	10a4      	asrs	r4, r4, #2
 800a03c:	2600      	movs	r6, #0
 800a03e:	42a6      	cmp	r6, r4
 800a040:	d105      	bne.n	800a04e <__libc_init_array+0x2e>
 800a042:	bd70      	pop	{r4, r5, r6, pc}
 800a044:	f855 3b04 	ldr.w	r3, [r5], #4
 800a048:	4798      	blx	r3
 800a04a:	3601      	adds	r6, #1
 800a04c:	e7ee      	b.n	800a02c <__libc_init_array+0xc>
 800a04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a052:	4798      	blx	r3
 800a054:	3601      	adds	r6, #1
 800a056:	e7f2      	b.n	800a03e <__libc_init_array+0x1e>
 800a058:	0800aa64 	.word	0x0800aa64
 800a05c:	0800aa64 	.word	0x0800aa64
 800a060:	0800aa64 	.word	0x0800aa64
 800a064:	0800aa68 	.word	0x0800aa68

0800a068 <malloc>:
 800a068:	4b02      	ldr	r3, [pc, #8]	; (800a074 <malloc+0xc>)
 800a06a:	4601      	mov	r1, r0
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f000 b871 	b.w	800a154 <_malloc_r>
 800a072:	bf00      	nop
 800a074:	2000002c 	.word	0x2000002c

0800a078 <free>:
 800a078:	4b02      	ldr	r3, [pc, #8]	; (800a084 <free+0xc>)
 800a07a:	4601      	mov	r1, r0
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	f000 b819 	b.w	800a0b4 <_free_r>
 800a082:	bf00      	nop
 800a084:	2000002c 	.word	0x2000002c

0800a088 <memcpy>:
 800a088:	440a      	add	r2, r1
 800a08a:	4291      	cmp	r1, r2
 800a08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a090:	d100      	bne.n	800a094 <memcpy+0xc>
 800a092:	4770      	bx	lr
 800a094:	b510      	push	{r4, lr}
 800a096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a09e:	4291      	cmp	r1, r2
 800a0a0:	d1f9      	bne.n	800a096 <memcpy+0xe>
 800a0a2:	bd10      	pop	{r4, pc}

0800a0a4 <memset>:
 800a0a4:	4402      	add	r2, r0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d100      	bne.n	800a0ae <memset+0xa>
 800a0ac:	4770      	bx	lr
 800a0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a0b2:	e7f9      	b.n	800a0a8 <memset+0x4>

0800a0b4 <_free_r>:
 800a0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b6:	2900      	cmp	r1, #0
 800a0b8:	d048      	beq.n	800a14c <_free_r+0x98>
 800a0ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0be:	9001      	str	r0, [sp, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a0c6:	bfb8      	it	lt
 800a0c8:	18e4      	addlt	r4, r4, r3
 800a0ca:	f000 f8cd 	bl	800a268 <__malloc_lock>
 800a0ce:	4a20      	ldr	r2, [pc, #128]	; (800a150 <_free_r+0x9c>)
 800a0d0:	9801      	ldr	r0, [sp, #4]
 800a0d2:	6813      	ldr	r3, [r2, #0]
 800a0d4:	4615      	mov	r5, r2
 800a0d6:	b933      	cbnz	r3, 800a0e6 <_free_r+0x32>
 800a0d8:	6063      	str	r3, [r4, #4]
 800a0da:	6014      	str	r4, [r2, #0]
 800a0dc:	b003      	add	sp, #12
 800a0de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0e2:	f000 b8c7 	b.w	800a274 <__malloc_unlock>
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	d90b      	bls.n	800a102 <_free_r+0x4e>
 800a0ea:	6821      	ldr	r1, [r4, #0]
 800a0ec:	1862      	adds	r2, r4, r1
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	bf04      	itt	eq
 800a0f2:	681a      	ldreq	r2, [r3, #0]
 800a0f4:	685b      	ldreq	r3, [r3, #4]
 800a0f6:	6063      	str	r3, [r4, #4]
 800a0f8:	bf04      	itt	eq
 800a0fa:	1852      	addeq	r2, r2, r1
 800a0fc:	6022      	streq	r2, [r4, #0]
 800a0fe:	602c      	str	r4, [r5, #0]
 800a100:	e7ec      	b.n	800a0dc <_free_r+0x28>
 800a102:	461a      	mov	r2, r3
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	b10b      	cbz	r3, 800a10c <_free_r+0x58>
 800a108:	42a3      	cmp	r3, r4
 800a10a:	d9fa      	bls.n	800a102 <_free_r+0x4e>
 800a10c:	6811      	ldr	r1, [r2, #0]
 800a10e:	1855      	adds	r5, r2, r1
 800a110:	42a5      	cmp	r5, r4
 800a112:	d10b      	bne.n	800a12c <_free_r+0x78>
 800a114:	6824      	ldr	r4, [r4, #0]
 800a116:	4421      	add	r1, r4
 800a118:	1854      	adds	r4, r2, r1
 800a11a:	42a3      	cmp	r3, r4
 800a11c:	6011      	str	r1, [r2, #0]
 800a11e:	d1dd      	bne.n	800a0dc <_free_r+0x28>
 800a120:	681c      	ldr	r4, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	6053      	str	r3, [r2, #4]
 800a126:	4421      	add	r1, r4
 800a128:	6011      	str	r1, [r2, #0]
 800a12a:	e7d7      	b.n	800a0dc <_free_r+0x28>
 800a12c:	d902      	bls.n	800a134 <_free_r+0x80>
 800a12e:	230c      	movs	r3, #12
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	e7d3      	b.n	800a0dc <_free_r+0x28>
 800a134:	6825      	ldr	r5, [r4, #0]
 800a136:	1961      	adds	r1, r4, r5
 800a138:	428b      	cmp	r3, r1
 800a13a:	bf04      	itt	eq
 800a13c:	6819      	ldreq	r1, [r3, #0]
 800a13e:	685b      	ldreq	r3, [r3, #4]
 800a140:	6063      	str	r3, [r4, #4]
 800a142:	bf04      	itt	eq
 800a144:	1949      	addeq	r1, r1, r5
 800a146:	6021      	streq	r1, [r4, #0]
 800a148:	6054      	str	r4, [r2, #4]
 800a14a:	e7c7      	b.n	800a0dc <_free_r+0x28>
 800a14c:	b003      	add	sp, #12
 800a14e:	bd30      	pop	{r4, r5, pc}
 800a150:	200000ec 	.word	0x200000ec

0800a154 <_malloc_r>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	1ccd      	adds	r5, r1, #3
 800a158:	f025 0503 	bic.w	r5, r5, #3
 800a15c:	3508      	adds	r5, #8
 800a15e:	2d0c      	cmp	r5, #12
 800a160:	bf38      	it	cc
 800a162:	250c      	movcc	r5, #12
 800a164:	2d00      	cmp	r5, #0
 800a166:	4606      	mov	r6, r0
 800a168:	db01      	blt.n	800a16e <_malloc_r+0x1a>
 800a16a:	42a9      	cmp	r1, r5
 800a16c:	d903      	bls.n	800a176 <_malloc_r+0x22>
 800a16e:	230c      	movs	r3, #12
 800a170:	6033      	str	r3, [r6, #0]
 800a172:	2000      	movs	r0, #0
 800a174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a176:	f000 f877 	bl	800a268 <__malloc_lock>
 800a17a:	4921      	ldr	r1, [pc, #132]	; (800a200 <_malloc_r+0xac>)
 800a17c:	680a      	ldr	r2, [r1, #0]
 800a17e:	4614      	mov	r4, r2
 800a180:	b99c      	cbnz	r4, 800a1aa <_malloc_r+0x56>
 800a182:	4f20      	ldr	r7, [pc, #128]	; (800a204 <_malloc_r+0xb0>)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	b923      	cbnz	r3, 800a192 <_malloc_r+0x3e>
 800a188:	4621      	mov	r1, r4
 800a18a:	4630      	mov	r0, r6
 800a18c:	f000 f83c 	bl	800a208 <_sbrk_r>
 800a190:	6038      	str	r0, [r7, #0]
 800a192:	4629      	mov	r1, r5
 800a194:	4630      	mov	r0, r6
 800a196:	f000 f837 	bl	800a208 <_sbrk_r>
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	d123      	bne.n	800a1e6 <_malloc_r+0x92>
 800a19e:	230c      	movs	r3, #12
 800a1a0:	6033      	str	r3, [r6, #0]
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f000 f866 	bl	800a274 <__malloc_unlock>
 800a1a8:	e7e3      	b.n	800a172 <_malloc_r+0x1e>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	1b5b      	subs	r3, r3, r5
 800a1ae:	d417      	bmi.n	800a1e0 <_malloc_r+0x8c>
 800a1b0:	2b0b      	cmp	r3, #11
 800a1b2:	d903      	bls.n	800a1bc <_malloc_r+0x68>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	441c      	add	r4, r3
 800a1b8:	6025      	str	r5, [r4, #0]
 800a1ba:	e004      	b.n	800a1c6 <_malloc_r+0x72>
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	42a2      	cmp	r2, r4
 800a1c0:	bf0c      	ite	eq
 800a1c2:	600b      	streq	r3, [r1, #0]
 800a1c4:	6053      	strne	r3, [r2, #4]
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f000 f854 	bl	800a274 <__malloc_unlock>
 800a1cc:	f104 000b 	add.w	r0, r4, #11
 800a1d0:	1d23      	adds	r3, r4, #4
 800a1d2:	f020 0007 	bic.w	r0, r0, #7
 800a1d6:	1ac2      	subs	r2, r0, r3
 800a1d8:	d0cc      	beq.n	800a174 <_malloc_r+0x20>
 800a1da:	1a1b      	subs	r3, r3, r0
 800a1dc:	50a3      	str	r3, [r4, r2]
 800a1de:	e7c9      	b.n	800a174 <_malloc_r+0x20>
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	6864      	ldr	r4, [r4, #4]
 800a1e4:	e7cc      	b.n	800a180 <_malloc_r+0x2c>
 800a1e6:	1cc4      	adds	r4, r0, #3
 800a1e8:	f024 0403 	bic.w	r4, r4, #3
 800a1ec:	42a0      	cmp	r0, r4
 800a1ee:	d0e3      	beq.n	800a1b8 <_malloc_r+0x64>
 800a1f0:	1a21      	subs	r1, r4, r0
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f000 f808 	bl	800a208 <_sbrk_r>
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d1dd      	bne.n	800a1b8 <_malloc_r+0x64>
 800a1fc:	e7cf      	b.n	800a19e <_malloc_r+0x4a>
 800a1fe:	bf00      	nop
 800a200:	200000ec 	.word	0x200000ec
 800a204:	200000f0 	.word	0x200000f0

0800a208 <_sbrk_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4d06      	ldr	r5, [pc, #24]	; (800a224 <_sbrk_r+0x1c>)
 800a20c:	2300      	movs	r3, #0
 800a20e:	4604      	mov	r4, r0
 800a210:	4608      	mov	r0, r1
 800a212:	602b      	str	r3, [r5, #0]
 800a214:	f7f6 fbc2 	bl	800099c <_sbrk>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d102      	bne.n	800a222 <_sbrk_r+0x1a>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	b103      	cbz	r3, 800a222 <_sbrk_r+0x1a>
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	20004914 	.word	0x20004914

0800a228 <siprintf>:
 800a228:	b40e      	push	{r1, r2, r3}
 800a22a:	b500      	push	{lr}
 800a22c:	b09c      	sub	sp, #112	; 0x70
 800a22e:	ab1d      	add	r3, sp, #116	; 0x74
 800a230:	9002      	str	r0, [sp, #8]
 800a232:	9006      	str	r0, [sp, #24]
 800a234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a238:	4809      	ldr	r0, [pc, #36]	; (800a260 <siprintf+0x38>)
 800a23a:	9107      	str	r1, [sp, #28]
 800a23c:	9104      	str	r1, [sp, #16]
 800a23e:	4909      	ldr	r1, [pc, #36]	; (800a264 <siprintf+0x3c>)
 800a240:	f853 2b04 	ldr.w	r2, [r3], #4
 800a244:	9105      	str	r1, [sp, #20]
 800a246:	6800      	ldr	r0, [r0, #0]
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	a902      	add	r1, sp, #8
 800a24c:	f000 f874 	bl	800a338 <_svfiprintf_r>
 800a250:	9b02      	ldr	r3, [sp, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	701a      	strb	r2, [r3, #0]
 800a256:	b01c      	add	sp, #112	; 0x70
 800a258:	f85d eb04 	ldr.w	lr, [sp], #4
 800a25c:	b003      	add	sp, #12
 800a25e:	4770      	bx	lr
 800a260:	2000002c 	.word	0x2000002c
 800a264:	ffff0208 	.word	0xffff0208

0800a268 <__malloc_lock>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__malloc_lock+0x8>)
 800a26a:	f000 baf9 	b.w	800a860 <__retarget_lock_acquire_recursive>
 800a26e:	bf00      	nop
 800a270:	2000491c 	.word	0x2000491c

0800a274 <__malloc_unlock>:
 800a274:	4801      	ldr	r0, [pc, #4]	; (800a27c <__malloc_unlock+0x8>)
 800a276:	f000 baf4 	b.w	800a862 <__retarget_lock_release_recursive>
 800a27a:	bf00      	nop
 800a27c:	2000491c 	.word	0x2000491c

0800a280 <__ssputs_r>:
 800a280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a284:	688e      	ldr	r6, [r1, #8]
 800a286:	429e      	cmp	r6, r3
 800a288:	4682      	mov	sl, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	4690      	mov	r8, r2
 800a28e:	461f      	mov	r7, r3
 800a290:	d838      	bhi.n	800a304 <__ssputs_r+0x84>
 800a292:	898a      	ldrh	r2, [r1, #12]
 800a294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a298:	d032      	beq.n	800a300 <__ssputs_r+0x80>
 800a29a:	6825      	ldr	r5, [r4, #0]
 800a29c:	6909      	ldr	r1, [r1, #16]
 800a29e:	eba5 0901 	sub.w	r9, r5, r1
 800a2a2:	6965      	ldr	r5, [r4, #20]
 800a2a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	444b      	add	r3, r9
 800a2b0:	106d      	asrs	r5, r5, #1
 800a2b2:	429d      	cmp	r5, r3
 800a2b4:	bf38      	it	cc
 800a2b6:	461d      	movcc	r5, r3
 800a2b8:	0553      	lsls	r3, r2, #21
 800a2ba:	d531      	bpl.n	800a320 <__ssputs_r+0xa0>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7ff ff49 	bl	800a154 <_malloc_r>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	b950      	cbnz	r0, 800a2dc <__ssputs_r+0x5c>
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	f8ca 3000 	str.w	r3, [sl]
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d2:	81a3      	strh	r3, [r4, #12]
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2dc:	6921      	ldr	r1, [r4, #16]
 800a2de:	464a      	mov	r2, r9
 800a2e0:	f7ff fed2 	bl	800a088 <memcpy>
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	6126      	str	r6, [r4, #16]
 800a2f2:	6165      	str	r5, [r4, #20]
 800a2f4:	444e      	add	r6, r9
 800a2f6:	eba5 0509 	sub.w	r5, r5, r9
 800a2fa:	6026      	str	r6, [r4, #0]
 800a2fc:	60a5      	str	r5, [r4, #8]
 800a2fe:	463e      	mov	r6, r7
 800a300:	42be      	cmp	r6, r7
 800a302:	d900      	bls.n	800a306 <__ssputs_r+0x86>
 800a304:	463e      	mov	r6, r7
 800a306:	4632      	mov	r2, r6
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	4641      	mov	r1, r8
 800a30c:	f000 faaa 	bl	800a864 <memmove>
 800a310:	68a3      	ldr	r3, [r4, #8]
 800a312:	6822      	ldr	r2, [r4, #0]
 800a314:	1b9b      	subs	r3, r3, r6
 800a316:	4432      	add	r2, r6
 800a318:	60a3      	str	r3, [r4, #8]
 800a31a:	6022      	str	r2, [r4, #0]
 800a31c:	2000      	movs	r0, #0
 800a31e:	e7db      	b.n	800a2d8 <__ssputs_r+0x58>
 800a320:	462a      	mov	r2, r5
 800a322:	f000 fab9 	bl	800a898 <_realloc_r>
 800a326:	4606      	mov	r6, r0
 800a328:	2800      	cmp	r0, #0
 800a32a:	d1e1      	bne.n	800a2f0 <__ssputs_r+0x70>
 800a32c:	6921      	ldr	r1, [r4, #16]
 800a32e:	4650      	mov	r0, sl
 800a330:	f7ff fec0 	bl	800a0b4 <_free_r>
 800a334:	e7c7      	b.n	800a2c6 <__ssputs_r+0x46>
	...

0800a338 <_svfiprintf_r>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	4698      	mov	r8, r3
 800a33e:	898b      	ldrh	r3, [r1, #12]
 800a340:	061b      	lsls	r3, r3, #24
 800a342:	b09d      	sub	sp, #116	; 0x74
 800a344:	4607      	mov	r7, r0
 800a346:	460d      	mov	r5, r1
 800a348:	4614      	mov	r4, r2
 800a34a:	d50e      	bpl.n	800a36a <_svfiprintf_r+0x32>
 800a34c:	690b      	ldr	r3, [r1, #16]
 800a34e:	b963      	cbnz	r3, 800a36a <_svfiprintf_r+0x32>
 800a350:	2140      	movs	r1, #64	; 0x40
 800a352:	f7ff feff 	bl	800a154 <_malloc_r>
 800a356:	6028      	str	r0, [r5, #0]
 800a358:	6128      	str	r0, [r5, #16]
 800a35a:	b920      	cbnz	r0, 800a366 <_svfiprintf_r+0x2e>
 800a35c:	230c      	movs	r3, #12
 800a35e:	603b      	str	r3, [r7, #0]
 800a360:	f04f 30ff 	mov.w	r0, #4294967295
 800a364:	e0d1      	b.n	800a50a <_svfiprintf_r+0x1d2>
 800a366:	2340      	movs	r3, #64	; 0x40
 800a368:	616b      	str	r3, [r5, #20]
 800a36a:	2300      	movs	r3, #0
 800a36c:	9309      	str	r3, [sp, #36]	; 0x24
 800a36e:	2320      	movs	r3, #32
 800a370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a374:	f8cd 800c 	str.w	r8, [sp, #12]
 800a378:	2330      	movs	r3, #48	; 0x30
 800a37a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a524 <_svfiprintf_r+0x1ec>
 800a37e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a382:	f04f 0901 	mov.w	r9, #1
 800a386:	4623      	mov	r3, r4
 800a388:	469a      	mov	sl, r3
 800a38a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a38e:	b10a      	cbz	r2, 800a394 <_svfiprintf_r+0x5c>
 800a390:	2a25      	cmp	r2, #37	; 0x25
 800a392:	d1f9      	bne.n	800a388 <_svfiprintf_r+0x50>
 800a394:	ebba 0b04 	subs.w	fp, sl, r4
 800a398:	d00b      	beq.n	800a3b2 <_svfiprintf_r+0x7a>
 800a39a:	465b      	mov	r3, fp
 800a39c:	4622      	mov	r2, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f7ff ff6d 	bl	800a280 <__ssputs_r>
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	f000 80aa 	beq.w	800a500 <_svfiprintf_r+0x1c8>
 800a3ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ae:	445a      	add	r2, fp
 800a3b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	f000 80a2 	beq.w	800a500 <_svfiprintf_r+0x1c8>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3c6:	f10a 0a01 	add.w	sl, sl, #1
 800a3ca:	9304      	str	r3, [sp, #16]
 800a3cc:	9307      	str	r3, [sp, #28]
 800a3ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a3d4:	4654      	mov	r4, sl
 800a3d6:	2205      	movs	r2, #5
 800a3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3dc:	4851      	ldr	r0, [pc, #324]	; (800a524 <_svfiprintf_r+0x1ec>)
 800a3de:	f7f5 feff 	bl	80001e0 <memchr>
 800a3e2:	9a04      	ldr	r2, [sp, #16]
 800a3e4:	b9d8      	cbnz	r0, 800a41e <_svfiprintf_r+0xe6>
 800a3e6:	06d0      	lsls	r0, r2, #27
 800a3e8:	bf44      	itt	mi
 800a3ea:	2320      	movmi	r3, #32
 800a3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f0:	0711      	lsls	r1, r2, #28
 800a3f2:	bf44      	itt	mi
 800a3f4:	232b      	movmi	r3, #43	; 0x2b
 800a3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a400:	d015      	beq.n	800a42e <_svfiprintf_r+0xf6>
 800a402:	9a07      	ldr	r2, [sp, #28]
 800a404:	4654      	mov	r4, sl
 800a406:	2000      	movs	r0, #0
 800a408:	f04f 0c0a 	mov.w	ip, #10
 800a40c:	4621      	mov	r1, r4
 800a40e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a412:	3b30      	subs	r3, #48	; 0x30
 800a414:	2b09      	cmp	r3, #9
 800a416:	d94e      	bls.n	800a4b6 <_svfiprintf_r+0x17e>
 800a418:	b1b0      	cbz	r0, 800a448 <_svfiprintf_r+0x110>
 800a41a:	9207      	str	r2, [sp, #28]
 800a41c:	e014      	b.n	800a448 <_svfiprintf_r+0x110>
 800a41e:	eba0 0308 	sub.w	r3, r0, r8
 800a422:	fa09 f303 	lsl.w	r3, r9, r3
 800a426:	4313      	orrs	r3, r2
 800a428:	9304      	str	r3, [sp, #16]
 800a42a:	46a2      	mov	sl, r4
 800a42c:	e7d2      	b.n	800a3d4 <_svfiprintf_r+0x9c>
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	1d19      	adds	r1, r3, #4
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	9103      	str	r1, [sp, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	bfbb      	ittet	lt
 800a43a:	425b      	neglt	r3, r3
 800a43c:	f042 0202 	orrlt.w	r2, r2, #2
 800a440:	9307      	strge	r3, [sp, #28]
 800a442:	9307      	strlt	r3, [sp, #28]
 800a444:	bfb8      	it	lt
 800a446:	9204      	strlt	r2, [sp, #16]
 800a448:	7823      	ldrb	r3, [r4, #0]
 800a44a:	2b2e      	cmp	r3, #46	; 0x2e
 800a44c:	d10c      	bne.n	800a468 <_svfiprintf_r+0x130>
 800a44e:	7863      	ldrb	r3, [r4, #1]
 800a450:	2b2a      	cmp	r3, #42	; 0x2a
 800a452:	d135      	bne.n	800a4c0 <_svfiprintf_r+0x188>
 800a454:	9b03      	ldr	r3, [sp, #12]
 800a456:	1d1a      	adds	r2, r3, #4
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	9203      	str	r2, [sp, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	bfb8      	it	lt
 800a460:	f04f 33ff 	movlt.w	r3, #4294967295
 800a464:	3402      	adds	r4, #2
 800a466:	9305      	str	r3, [sp, #20]
 800a468:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a534 <_svfiprintf_r+0x1fc>
 800a46c:	7821      	ldrb	r1, [r4, #0]
 800a46e:	2203      	movs	r2, #3
 800a470:	4650      	mov	r0, sl
 800a472:	f7f5 feb5 	bl	80001e0 <memchr>
 800a476:	b140      	cbz	r0, 800a48a <_svfiprintf_r+0x152>
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	eba0 000a 	sub.w	r0, r0, sl
 800a47e:	fa03 f000 	lsl.w	r0, r3, r0
 800a482:	9b04      	ldr	r3, [sp, #16]
 800a484:	4303      	orrs	r3, r0
 800a486:	3401      	adds	r4, #1
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48e:	4826      	ldr	r0, [pc, #152]	; (800a528 <_svfiprintf_r+0x1f0>)
 800a490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a494:	2206      	movs	r2, #6
 800a496:	f7f5 fea3 	bl	80001e0 <memchr>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d038      	beq.n	800a510 <_svfiprintf_r+0x1d8>
 800a49e:	4b23      	ldr	r3, [pc, #140]	; (800a52c <_svfiprintf_r+0x1f4>)
 800a4a0:	bb1b      	cbnz	r3, 800a4ea <_svfiprintf_r+0x1b2>
 800a4a2:	9b03      	ldr	r3, [sp, #12]
 800a4a4:	3307      	adds	r3, #7
 800a4a6:	f023 0307 	bic.w	r3, r3, #7
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	4433      	add	r3, r6
 800a4b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4b4:	e767      	b.n	800a386 <_svfiprintf_r+0x4e>
 800a4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	2001      	movs	r0, #1
 800a4be:	e7a5      	b.n	800a40c <_svfiprintf_r+0xd4>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	3401      	adds	r4, #1
 800a4c4:	9305      	str	r3, [sp, #20]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	f04f 0c0a 	mov.w	ip, #10
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4d2:	3a30      	subs	r2, #48	; 0x30
 800a4d4:	2a09      	cmp	r2, #9
 800a4d6:	d903      	bls.n	800a4e0 <_svfiprintf_r+0x1a8>
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d0c5      	beq.n	800a468 <_svfiprintf_r+0x130>
 800a4dc:	9105      	str	r1, [sp, #20]
 800a4de:	e7c3      	b.n	800a468 <_svfiprintf_r+0x130>
 800a4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e7f0      	b.n	800a4cc <_svfiprintf_r+0x194>
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	462a      	mov	r2, r5
 800a4f0:	4b0f      	ldr	r3, [pc, #60]	; (800a530 <_svfiprintf_r+0x1f8>)
 800a4f2:	a904      	add	r1, sp, #16
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	f3af 8000 	nop.w
 800a4fa:	1c42      	adds	r2, r0, #1
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	d1d6      	bne.n	800a4ae <_svfiprintf_r+0x176>
 800a500:	89ab      	ldrh	r3, [r5, #12]
 800a502:	065b      	lsls	r3, r3, #25
 800a504:	f53f af2c 	bmi.w	800a360 <_svfiprintf_r+0x28>
 800a508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a50a:	b01d      	add	sp, #116	; 0x74
 800a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a510:	ab03      	add	r3, sp, #12
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	462a      	mov	r2, r5
 800a516:	4b06      	ldr	r3, [pc, #24]	; (800a530 <_svfiprintf_r+0x1f8>)
 800a518:	a904      	add	r1, sp, #16
 800a51a:	4638      	mov	r0, r7
 800a51c:	f000 f87a 	bl	800a614 <_printf_i>
 800a520:	e7eb      	b.n	800a4fa <_svfiprintf_r+0x1c2>
 800a522:	bf00      	nop
 800a524:	0800aa28 	.word	0x0800aa28
 800a528:	0800aa32 	.word	0x0800aa32
 800a52c:	00000000 	.word	0x00000000
 800a530:	0800a281 	.word	0x0800a281
 800a534:	0800aa2e 	.word	0x0800aa2e

0800a538 <_printf_common>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	4616      	mov	r6, r2
 800a53e:	4699      	mov	r9, r3
 800a540:	688a      	ldr	r2, [r1, #8]
 800a542:	690b      	ldr	r3, [r1, #16]
 800a544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a548:	4293      	cmp	r3, r2
 800a54a:	bfb8      	it	lt
 800a54c:	4613      	movlt	r3, r2
 800a54e:	6033      	str	r3, [r6, #0]
 800a550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a554:	4607      	mov	r7, r0
 800a556:	460c      	mov	r4, r1
 800a558:	b10a      	cbz	r2, 800a55e <_printf_common+0x26>
 800a55a:	3301      	adds	r3, #1
 800a55c:	6033      	str	r3, [r6, #0]
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	0699      	lsls	r1, r3, #26
 800a562:	bf42      	ittt	mi
 800a564:	6833      	ldrmi	r3, [r6, #0]
 800a566:	3302      	addmi	r3, #2
 800a568:	6033      	strmi	r3, [r6, #0]
 800a56a:	6825      	ldr	r5, [r4, #0]
 800a56c:	f015 0506 	ands.w	r5, r5, #6
 800a570:	d106      	bne.n	800a580 <_printf_common+0x48>
 800a572:	f104 0a19 	add.w	sl, r4, #25
 800a576:	68e3      	ldr	r3, [r4, #12]
 800a578:	6832      	ldr	r2, [r6, #0]
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	42ab      	cmp	r3, r5
 800a57e:	dc26      	bgt.n	800a5ce <_printf_common+0x96>
 800a580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a584:	1e13      	subs	r3, r2, #0
 800a586:	6822      	ldr	r2, [r4, #0]
 800a588:	bf18      	it	ne
 800a58a:	2301      	movne	r3, #1
 800a58c:	0692      	lsls	r2, r2, #26
 800a58e:	d42b      	bmi.n	800a5e8 <_printf_common+0xb0>
 800a590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a594:	4649      	mov	r1, r9
 800a596:	4638      	mov	r0, r7
 800a598:	47c0      	blx	r8
 800a59a:	3001      	adds	r0, #1
 800a59c:	d01e      	beq.n	800a5dc <_printf_common+0xa4>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	68e5      	ldr	r5, [r4, #12]
 800a5a2:	6832      	ldr	r2, [r6, #0]
 800a5a4:	f003 0306 	and.w	r3, r3, #6
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	bf08      	it	eq
 800a5ac:	1aad      	subeq	r5, r5, r2
 800a5ae:	68a3      	ldr	r3, [r4, #8]
 800a5b0:	6922      	ldr	r2, [r4, #16]
 800a5b2:	bf0c      	ite	eq
 800a5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5b8:	2500      	movne	r5, #0
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	bfc4      	itt	gt
 800a5be:	1a9b      	subgt	r3, r3, r2
 800a5c0:	18ed      	addgt	r5, r5, r3
 800a5c2:	2600      	movs	r6, #0
 800a5c4:	341a      	adds	r4, #26
 800a5c6:	42b5      	cmp	r5, r6
 800a5c8:	d11a      	bne.n	800a600 <_printf_common+0xc8>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e008      	b.n	800a5e0 <_printf_common+0xa8>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	4652      	mov	r2, sl
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	47c0      	blx	r8
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d103      	bne.n	800a5e4 <_printf_common+0xac>
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	e7c6      	b.n	800a576 <_printf_common+0x3e>
 800a5e8:	18e1      	adds	r1, r4, r3
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	2030      	movs	r0, #48	; 0x30
 800a5ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5f2:	4422      	add	r2, r4
 800a5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	e7c7      	b.n	800a590 <_printf_common+0x58>
 800a600:	2301      	movs	r3, #1
 800a602:	4622      	mov	r2, r4
 800a604:	4649      	mov	r1, r9
 800a606:	4638      	mov	r0, r7
 800a608:	47c0      	blx	r8
 800a60a:	3001      	adds	r0, #1
 800a60c:	d0e6      	beq.n	800a5dc <_printf_common+0xa4>
 800a60e:	3601      	adds	r6, #1
 800a610:	e7d9      	b.n	800a5c6 <_printf_common+0x8e>
	...

0800a614 <_printf_i>:
 800a614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a618:	460c      	mov	r4, r1
 800a61a:	4691      	mov	r9, r2
 800a61c:	7e27      	ldrb	r7, [r4, #24]
 800a61e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a620:	2f78      	cmp	r7, #120	; 0x78
 800a622:	4680      	mov	r8, r0
 800a624:	469a      	mov	sl, r3
 800a626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a62a:	d807      	bhi.n	800a63c <_printf_i+0x28>
 800a62c:	2f62      	cmp	r7, #98	; 0x62
 800a62e:	d80a      	bhi.n	800a646 <_printf_i+0x32>
 800a630:	2f00      	cmp	r7, #0
 800a632:	f000 80d8 	beq.w	800a7e6 <_printf_i+0x1d2>
 800a636:	2f58      	cmp	r7, #88	; 0x58
 800a638:	f000 80a3 	beq.w	800a782 <_printf_i+0x16e>
 800a63c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a644:	e03a      	b.n	800a6bc <_printf_i+0xa8>
 800a646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a64a:	2b15      	cmp	r3, #21
 800a64c:	d8f6      	bhi.n	800a63c <_printf_i+0x28>
 800a64e:	a001      	add	r0, pc, #4	; (adr r0, 800a654 <_printf_i+0x40>)
 800a650:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a654:	0800a6ad 	.word	0x0800a6ad
 800a658:	0800a6c1 	.word	0x0800a6c1
 800a65c:	0800a63d 	.word	0x0800a63d
 800a660:	0800a63d 	.word	0x0800a63d
 800a664:	0800a63d 	.word	0x0800a63d
 800a668:	0800a63d 	.word	0x0800a63d
 800a66c:	0800a6c1 	.word	0x0800a6c1
 800a670:	0800a63d 	.word	0x0800a63d
 800a674:	0800a63d 	.word	0x0800a63d
 800a678:	0800a63d 	.word	0x0800a63d
 800a67c:	0800a63d 	.word	0x0800a63d
 800a680:	0800a7cd 	.word	0x0800a7cd
 800a684:	0800a6f1 	.word	0x0800a6f1
 800a688:	0800a7af 	.word	0x0800a7af
 800a68c:	0800a63d 	.word	0x0800a63d
 800a690:	0800a63d 	.word	0x0800a63d
 800a694:	0800a7ef 	.word	0x0800a7ef
 800a698:	0800a63d 	.word	0x0800a63d
 800a69c:	0800a6f1 	.word	0x0800a6f1
 800a6a0:	0800a63d 	.word	0x0800a63d
 800a6a4:	0800a63d 	.word	0x0800a63d
 800a6a8:	0800a7b7 	.word	0x0800a7b7
 800a6ac:	680b      	ldr	r3, [r1, #0]
 800a6ae:	1d1a      	adds	r2, r3, #4
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	600a      	str	r2, [r1, #0]
 800a6b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e0a3      	b.n	800a808 <_printf_i+0x1f4>
 800a6c0:	6825      	ldr	r5, [r4, #0]
 800a6c2:	6808      	ldr	r0, [r1, #0]
 800a6c4:	062e      	lsls	r6, r5, #24
 800a6c6:	f100 0304 	add.w	r3, r0, #4
 800a6ca:	d50a      	bpl.n	800a6e2 <_printf_i+0xce>
 800a6cc:	6805      	ldr	r5, [r0, #0]
 800a6ce:	600b      	str	r3, [r1, #0]
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	da03      	bge.n	800a6dc <_printf_i+0xc8>
 800a6d4:	232d      	movs	r3, #45	; 0x2d
 800a6d6:	426d      	negs	r5, r5
 800a6d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6dc:	485e      	ldr	r0, [pc, #376]	; (800a858 <_printf_i+0x244>)
 800a6de:	230a      	movs	r3, #10
 800a6e0:	e019      	b.n	800a716 <_printf_i+0x102>
 800a6e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a6e6:	6805      	ldr	r5, [r0, #0]
 800a6e8:	600b      	str	r3, [r1, #0]
 800a6ea:	bf18      	it	ne
 800a6ec:	b22d      	sxthne	r5, r5
 800a6ee:	e7ef      	b.n	800a6d0 <_printf_i+0xbc>
 800a6f0:	680b      	ldr	r3, [r1, #0]
 800a6f2:	6825      	ldr	r5, [r4, #0]
 800a6f4:	1d18      	adds	r0, r3, #4
 800a6f6:	6008      	str	r0, [r1, #0]
 800a6f8:	0628      	lsls	r0, r5, #24
 800a6fa:	d501      	bpl.n	800a700 <_printf_i+0xec>
 800a6fc:	681d      	ldr	r5, [r3, #0]
 800a6fe:	e002      	b.n	800a706 <_printf_i+0xf2>
 800a700:	0669      	lsls	r1, r5, #25
 800a702:	d5fb      	bpl.n	800a6fc <_printf_i+0xe8>
 800a704:	881d      	ldrh	r5, [r3, #0]
 800a706:	4854      	ldr	r0, [pc, #336]	; (800a858 <_printf_i+0x244>)
 800a708:	2f6f      	cmp	r7, #111	; 0x6f
 800a70a:	bf0c      	ite	eq
 800a70c:	2308      	moveq	r3, #8
 800a70e:	230a      	movne	r3, #10
 800a710:	2100      	movs	r1, #0
 800a712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a716:	6866      	ldr	r6, [r4, #4]
 800a718:	60a6      	str	r6, [r4, #8]
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	bfa2      	ittt	ge
 800a71e:	6821      	ldrge	r1, [r4, #0]
 800a720:	f021 0104 	bicge.w	r1, r1, #4
 800a724:	6021      	strge	r1, [r4, #0]
 800a726:	b90d      	cbnz	r5, 800a72c <_printf_i+0x118>
 800a728:	2e00      	cmp	r6, #0
 800a72a:	d04d      	beq.n	800a7c8 <_printf_i+0x1b4>
 800a72c:	4616      	mov	r6, r2
 800a72e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a732:	fb03 5711 	mls	r7, r3, r1, r5
 800a736:	5dc7      	ldrb	r7, [r0, r7]
 800a738:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a73c:	462f      	mov	r7, r5
 800a73e:	42bb      	cmp	r3, r7
 800a740:	460d      	mov	r5, r1
 800a742:	d9f4      	bls.n	800a72e <_printf_i+0x11a>
 800a744:	2b08      	cmp	r3, #8
 800a746:	d10b      	bne.n	800a760 <_printf_i+0x14c>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	07df      	lsls	r7, r3, #31
 800a74c:	d508      	bpl.n	800a760 <_printf_i+0x14c>
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	4299      	cmp	r1, r3
 800a754:	bfde      	ittt	le
 800a756:	2330      	movle	r3, #48	; 0x30
 800a758:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a75c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a760:	1b92      	subs	r2, r2, r6
 800a762:	6122      	str	r2, [r4, #16]
 800a764:	f8cd a000 	str.w	sl, [sp]
 800a768:	464b      	mov	r3, r9
 800a76a:	aa03      	add	r2, sp, #12
 800a76c:	4621      	mov	r1, r4
 800a76e:	4640      	mov	r0, r8
 800a770:	f7ff fee2 	bl	800a538 <_printf_common>
 800a774:	3001      	adds	r0, #1
 800a776:	d14c      	bne.n	800a812 <_printf_i+0x1fe>
 800a778:	f04f 30ff 	mov.w	r0, #4294967295
 800a77c:	b004      	add	sp, #16
 800a77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a782:	4835      	ldr	r0, [pc, #212]	; (800a858 <_printf_i+0x244>)
 800a784:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	680e      	ldr	r6, [r1, #0]
 800a78c:	061f      	lsls	r7, r3, #24
 800a78e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a792:	600e      	str	r6, [r1, #0]
 800a794:	d514      	bpl.n	800a7c0 <_printf_i+0x1ac>
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	bf44      	itt	mi
 800a79a:	f043 0320 	orrmi.w	r3, r3, #32
 800a79e:	6023      	strmi	r3, [r4, #0]
 800a7a0:	b91d      	cbnz	r5, 800a7aa <_printf_i+0x196>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	f023 0320 	bic.w	r3, r3, #32
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	2310      	movs	r3, #16
 800a7ac:	e7b0      	b.n	800a710 <_printf_i+0xfc>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	f043 0320 	orr.w	r3, r3, #32
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	2378      	movs	r3, #120	; 0x78
 800a7b8:	4828      	ldr	r0, [pc, #160]	; (800a85c <_printf_i+0x248>)
 800a7ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7be:	e7e3      	b.n	800a788 <_printf_i+0x174>
 800a7c0:	065e      	lsls	r6, r3, #25
 800a7c2:	bf48      	it	mi
 800a7c4:	b2ad      	uxthmi	r5, r5
 800a7c6:	e7e6      	b.n	800a796 <_printf_i+0x182>
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	e7bb      	b.n	800a744 <_printf_i+0x130>
 800a7cc:	680b      	ldr	r3, [r1, #0]
 800a7ce:	6826      	ldr	r6, [r4, #0]
 800a7d0:	6960      	ldr	r0, [r4, #20]
 800a7d2:	1d1d      	adds	r5, r3, #4
 800a7d4:	600d      	str	r5, [r1, #0]
 800a7d6:	0635      	lsls	r5, r6, #24
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	d501      	bpl.n	800a7e0 <_printf_i+0x1cc>
 800a7dc:	6018      	str	r0, [r3, #0]
 800a7de:	e002      	b.n	800a7e6 <_printf_i+0x1d2>
 800a7e0:	0671      	lsls	r1, r6, #25
 800a7e2:	d5fb      	bpl.n	800a7dc <_printf_i+0x1c8>
 800a7e4:	8018      	strh	r0, [r3, #0]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6123      	str	r3, [r4, #16]
 800a7ea:	4616      	mov	r6, r2
 800a7ec:	e7ba      	b.n	800a764 <_printf_i+0x150>
 800a7ee:	680b      	ldr	r3, [r1, #0]
 800a7f0:	1d1a      	adds	r2, r3, #4
 800a7f2:	600a      	str	r2, [r1, #0]
 800a7f4:	681e      	ldr	r6, [r3, #0]
 800a7f6:	6862      	ldr	r2, [r4, #4]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f7f5 fcf0 	bl	80001e0 <memchr>
 800a800:	b108      	cbz	r0, 800a806 <_printf_i+0x1f2>
 800a802:	1b80      	subs	r0, r0, r6
 800a804:	6060      	str	r0, [r4, #4]
 800a806:	6863      	ldr	r3, [r4, #4]
 800a808:	6123      	str	r3, [r4, #16]
 800a80a:	2300      	movs	r3, #0
 800a80c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a810:	e7a8      	b.n	800a764 <_printf_i+0x150>
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	4632      	mov	r2, r6
 800a816:	4649      	mov	r1, r9
 800a818:	4640      	mov	r0, r8
 800a81a:	47d0      	blx	sl
 800a81c:	3001      	adds	r0, #1
 800a81e:	d0ab      	beq.n	800a778 <_printf_i+0x164>
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	079b      	lsls	r3, r3, #30
 800a824:	d413      	bmi.n	800a84e <_printf_i+0x23a>
 800a826:	68e0      	ldr	r0, [r4, #12]
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	4298      	cmp	r0, r3
 800a82c:	bfb8      	it	lt
 800a82e:	4618      	movlt	r0, r3
 800a830:	e7a4      	b.n	800a77c <_printf_i+0x168>
 800a832:	2301      	movs	r3, #1
 800a834:	4632      	mov	r2, r6
 800a836:	4649      	mov	r1, r9
 800a838:	4640      	mov	r0, r8
 800a83a:	47d0      	blx	sl
 800a83c:	3001      	adds	r0, #1
 800a83e:	d09b      	beq.n	800a778 <_printf_i+0x164>
 800a840:	3501      	adds	r5, #1
 800a842:	68e3      	ldr	r3, [r4, #12]
 800a844:	9903      	ldr	r1, [sp, #12]
 800a846:	1a5b      	subs	r3, r3, r1
 800a848:	42ab      	cmp	r3, r5
 800a84a:	dcf2      	bgt.n	800a832 <_printf_i+0x21e>
 800a84c:	e7eb      	b.n	800a826 <_printf_i+0x212>
 800a84e:	2500      	movs	r5, #0
 800a850:	f104 0619 	add.w	r6, r4, #25
 800a854:	e7f5      	b.n	800a842 <_printf_i+0x22e>
 800a856:	bf00      	nop
 800a858:	0800aa39 	.word	0x0800aa39
 800a85c:	0800aa4a 	.word	0x0800aa4a

0800a860 <__retarget_lock_acquire_recursive>:
 800a860:	4770      	bx	lr

0800a862 <__retarget_lock_release_recursive>:
 800a862:	4770      	bx	lr

0800a864 <memmove>:
 800a864:	4288      	cmp	r0, r1
 800a866:	b510      	push	{r4, lr}
 800a868:	eb01 0402 	add.w	r4, r1, r2
 800a86c:	d902      	bls.n	800a874 <memmove+0x10>
 800a86e:	4284      	cmp	r4, r0
 800a870:	4623      	mov	r3, r4
 800a872:	d807      	bhi.n	800a884 <memmove+0x20>
 800a874:	1e43      	subs	r3, r0, #1
 800a876:	42a1      	cmp	r1, r4
 800a878:	d008      	beq.n	800a88c <memmove+0x28>
 800a87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a882:	e7f8      	b.n	800a876 <memmove+0x12>
 800a884:	4402      	add	r2, r0
 800a886:	4601      	mov	r1, r0
 800a888:	428a      	cmp	r2, r1
 800a88a:	d100      	bne.n	800a88e <memmove+0x2a>
 800a88c:	bd10      	pop	{r4, pc}
 800a88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a896:	e7f7      	b.n	800a888 <memmove+0x24>

0800a898 <_realloc_r>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	4607      	mov	r7, r0
 800a89c:	4614      	mov	r4, r2
 800a89e:	460e      	mov	r6, r1
 800a8a0:	b921      	cbnz	r1, 800a8ac <_realloc_r+0x14>
 800a8a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	f7ff bc54 	b.w	800a154 <_malloc_r>
 800a8ac:	b922      	cbnz	r2, 800a8b8 <_realloc_r+0x20>
 800a8ae:	f7ff fc01 	bl	800a0b4 <_free_r>
 800a8b2:	4625      	mov	r5, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b8:	f000 f814 	bl	800a8e4 <_malloc_usable_size_r>
 800a8bc:	42a0      	cmp	r0, r4
 800a8be:	d20f      	bcs.n	800a8e0 <_realloc_r+0x48>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	f7ff fc46 	bl	800a154 <_malloc_r>
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d0f2      	beq.n	800a8b4 <_realloc_r+0x1c>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	f7ff fbd9 	bl	800a088 <memcpy>
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f7ff fbeb 	bl	800a0b4 <_free_r>
 800a8de:	e7e9      	b.n	800a8b4 <_realloc_r+0x1c>
 800a8e0:	4635      	mov	r5, r6
 800a8e2:	e7e7      	b.n	800a8b4 <_realloc_r+0x1c>

0800a8e4 <_malloc_usable_size_r>:
 800a8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e8:	1f18      	subs	r0, r3, #4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	bfbc      	itt	lt
 800a8ee:	580b      	ldrlt	r3, [r1, r0]
 800a8f0:	18c0      	addlt	r0, r0, r3
 800a8f2:	4770      	bx	lr

0800a8f4 <_init>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	bf00      	nop
 800a8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fa:	bc08      	pop	{r3}
 800a8fc:	469e      	mov	lr, r3
 800a8fe:	4770      	bx	lr

0800a900 <_fini>:
 800a900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a902:	bf00      	nop
 800a904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a906:	bc08      	pop	{r3}
 800a908:	469e      	mov	lr, r3
 800a90a:	4770      	bx	lr
