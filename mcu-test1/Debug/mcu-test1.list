
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7a4  0800d7a4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7a4  0800d7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7ac  0800d7ac  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7ac  0800d7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7b0  0800d7b0  0001d7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d7b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00003ee0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003f74  20003f74  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021951  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000474e  00000000  00000000  00041a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00046168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  00046fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258ba  00000000  00000000  00047cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000168b8  00000000  00000000  0006d56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c76b0  00000000  00000000  00083e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b4d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000436c  00000000  00000000  0014b528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbe8 	.word	0x0800cbe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800cbe8 	.word	0x0800cbe8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	f5ad 5d28 	sub.w	sp, sp, #10752	; 0x2a00
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bee:	f001 f969 	bl	8001ec4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bf2:	f000 f999 	bl	8000f28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bf6:	f000 fa01 	bl	8000ffc <MX_GPIO_Init>
	MX_FATFS_Init();
 8000bfa:	f004 fe41 	bl	8005880 <MX_FATFS_Init>
	MX_USB_HOST_Init();
 8000bfe:	f00a fa51 	bl	800b0a4 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 2 */
	pedalboard_t pedalboard;
	pedalboard_append(&pedalboard, BITCRUSHER_RS);
 8000c02:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000c06:	f103 031c 	add.w	r3, r3, #28
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fdef 	bl	80017f0 <pedalboard_append>
	pedalboard_append(&pedalboard, LPF);
 8000c12:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000c16:	f103 031c 	add.w	r3, r3, #28
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fde7 	bl	80017f0 <pedalboard_append>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000c22:	f00a fa65 	bl	800b0f0 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2101      	movs	r1, #1
 8000c2a:	48b5      	ldr	r0, [pc, #724]	; (8000f00 <main+0x31c>)
 8000c2c:	f001 fca6 	bl	800257c <HAL_GPIO_WritePin>

		if (Appli_state == APPLICATION_READY)
 8000c30:	4bb4      	ldr	r3, [pc, #720]	; (8000f04 <main+0x320>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	f040 8126 	bne.w	8000e86 <main+0x2a2>
		{
			//HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
			if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin) == GPIO_PIN_SET) {
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	48b2      	ldr	r0, [pc, #712]	; (8000f08 <main+0x324>)
 8000c3e:	f001 fc85 	bl	800254c <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d1ec      	bne.n	8000c22 <main+0x3e>

				FIL inFile, outFile;
				FRESULT resRead, resWrite;
				int32_t bytesRead, bytesWritten;
				int32_t inSample, outSample, tmp;
				int32_t count = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000c4e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000c52:	6013      	str	r3, [r2, #0]
				char readBuffer[16], writeBuffer[16];
				char sampleBuffer[16];

				resRead = f_open(&inFile, "in1.txt", FA_READ);
 8000c54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c58:	3b30      	subs	r3, #48	; 0x30
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	49ab      	ldr	r1, [pc, #684]	; (8000f0c <main+0x328>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f009 fc5c 	bl	800a51c <f_open>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000c6a:	f102 022b 	add.w	r2, r2, #43	; 0x2b
 8000c6e:	7013      	strb	r3, [r2, #0]
				resWrite = f_open(&outFile, "out1.txt", FA_CREATE_ALWAYS);
 8000c70:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000c74:	f103 0310 	add.w	r3, r3, #16
 8000c78:	2208      	movs	r2, #8
 8000c7a:	49a5      	ldr	r1, [pc, #660]	; (8000f10 <main+0x32c>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f009 fc4d 	bl	800a51c <f_open>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000c88:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 8000c8c:	7013      	strb	r3, [r2, #0]
				f_close(&outFile);
 8000c8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000c92:	f103 0310 	add.w	r3, r3, #16
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00a f97d 	bl	800af96 <f_close>
				resWrite = f_open(&outFile, "out1.txt", FA_WRITE);
 8000c9c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000ca0:	f103 0310 	add.w	r3, r3, #16
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	499a      	ldr	r1, [pc, #616]	; (8000f10 <main+0x32c>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f009 fc37 	bl	800a51c <f_open>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000cb4:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 8000cb8:	7013      	strb	r3, [r2, #0]
				if(resRead == FR_OK && resWrite == FR_OK)
 8000cba:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000cbe:	f103 032b 	add.w	r3, r3, #43	; 0x2b
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f040 80c0 	bne.w	8000e4a <main+0x266>
 8000cca:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000cce:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f040 80b8 	bne.w	8000e4a <main+0x266>
				{
					// succ
					HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce0:	488c      	ldr	r0, [pc, #560]	; (8000f14 <main+0x330>)
 8000ce2:	f001 fc4b 	bl	800257c <HAL_GPIO_WritePin>
					do {

						resRead = f_read(&inFile, &readBuffer, 1, &bytesRead);
 8000ce6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000cea:	f103 0318 	add.w	r3, r3, #24
 8000cee:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8000cf2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000cf6:	3830      	subs	r0, #48	; 0x30
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f009 fddb 	bl	800a8b4 <f_read>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000d04:	f102 022b 	add.w	r2, r2, #43	; 0x2b
 8000d08:	7013      	strb	r3, [r2, #0]
						if (bytesRead) {
 8000d0a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000d0e:	f103 0318 	add.w	r3, r3, #24
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f000 8085 	beq.w	8000e24 <main+0x240>
							sampleBuffer[count] = readBuffer[0];
 8000d1a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000d1e:	7819      	ldrb	r1, [r3, #0]
 8000d20:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000d2c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	460a      	mov	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
							if (sampleBuffer[count] == '\n') {
 8000d38:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000d3c:	f102 0220 	add.w	r2, r2, #32
 8000d40:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000d44:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b0a      	cmp	r3, #10
 8000d50:	d15d      	bne.n	8000e0e <main+0x22a>
								sampleBuffer[count] == '\0';
								tmp = sscanf(sampleBuffer, "%d", &inSample);
 8000d52:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000d56:	f102 0210 	add.w	r2, r2, #16
 8000d5a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000d5e:	f103 0320 	add.w	r3, r3, #32
 8000d62:	496d      	ldr	r1, [pc, #436]	; (8000f18 <main+0x334>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00a fdff 	bl	800b968 <siscanf>
 8000d6a:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000d6e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000d72:	6018      	str	r0, [r3, #0]
								outSample = (int32_t)pedalboard_process(&pedalboard, (float)inSample);
 8000d74:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000d78:	f103 0310 	add.w	r3, r3, #16
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d86:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000d8a:	f103 031c 	add.w	r3, r3, #28
 8000d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fe2a 	bl	80019ec <pedalboard_process>
 8000d98:	eef0 7a40 	vmov.f32	s15, s0
 8000d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da0:	ee17 3a90 	vmov	r3, s15
 8000da4:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	6013      	str	r3, [r2, #0]
								sprintf(writeBuffer, "%d\n", outSample);
 8000dae:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000db2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000db6:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000dba:	f102 0220 	add.w	r2, r2, #32
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	4956      	ldr	r1, [pc, #344]	; (8000f1c <main+0x338>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00a fdb0 	bl	800b928 <siprintf>
								resWrite = f_write(&outFile, (uint8_t *)writeBuffer, strlen(writeBuffer), &bytesWritten);
 8000dc8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000dcc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff f9fd 	bl	80001d0 <strlen>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000ddc:	f103 0314 	add.w	r3, r3, #20
 8000de0:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 8000de4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000de8:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8000dec:	f100 0010 	add.w	r0, r0, #16
 8000df0:	f009 febf 	bl	800ab72 <f_write>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000dfa:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 8000dfe:	7013      	strb	r3, [r2, #0]
								count = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000e06:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e00a      	b.n	8000e24 <main+0x240>
							} else {
								count++;
 8000e0e:	f507 5328 	add.w	r3, r7, #10752	; 0x2a00
 8000e12:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f507 5228 	add.w	r2, r7, #10752	; 0x2a00
 8000e1e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000e22:	6013      	str	r3, [r2, #0]
							}
						}

					} while(bytesRead > 0);
 8000e24:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000e28:	f103 0318 	add.w	r3, r3, #24
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f73f af59 	bgt.w	8000ce6 <main+0x102>
					HAL_Delay(1000);
 8000e34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e38:	f001 f8b6 	bl	8001fa8 <HAL_Delay>
					HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e42:	4834      	ldr	r0, [pc, #208]	; (8000f14 <main+0x330>)
 8000e44:	f001 fb9a 	bl	800257c <HAL_GPIO_WritePin>
 8000e48:	e00f      	b.n	8000e6a <main+0x286>
				} else {
					// wtf
					HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e50:	4830      	ldr	r0, [pc, #192]	; (8000f14 <main+0x330>)
 8000e52:	f001 fb93 	bl	800257c <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8000e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5a:	f001 f8a5 	bl	8001fa8 <HAL_Delay>
					HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e64:	482b      	ldr	r0, [pc, #172]	; (8000f14 <main+0x330>)
 8000e66:	f001 fb89 	bl	800257c <HAL_GPIO_WritePin>
				}
				f_close(&inFile);
 8000e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e6e:	3b30      	subs	r3, #48	; 0x30
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00a f890 	bl	800af96 <f_close>
				f_close(&outFile);
 8000e76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e7a:	f103 0310 	add.w	r3, r3, #16
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00a f889 	bl	800af96 <f_close>
 8000e84:	e6cd      	b.n	8000c22 <main+0x3e>
			}
		}
		else if (Appli_state == APPLICATION_DISCONNECT || Appli_state == APPLICATION_IDLE)
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <main+0x320>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d003      	beq.n	8000e96 <main+0x2b2>
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <main+0x320>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d118      	bne.n	8000ec8 <main+0x2e4>
		{
			HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9c:	481d      	ldr	r0, [pc, #116]	; (8000f14 <main+0x330>)
 8000e9e:	f001 fb6d 	bl	800257c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea8:	481a      	ldr	r0, [pc, #104]	; (8000f14 <main+0x330>)
 8000eaa:	f001 fb67 	bl	800257c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <main+0x330>)
 8000eb6:	f001 fb61 	bl	800257c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <main+0x330>)
 8000ec2:	f001 fb5b 	bl	800257c <HAL_GPIO_WritePin>
 8000ec6:	e019      	b.n	8000efc <main+0x318>
		}
		else if (Appli_state == APPLICATION_START)
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <main+0x320>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	f47f aea8 	bne.w	8000c22 <main+0x3e>
		{
			if (f_mount(&myUsbFatFS, (TCHAR const*)USBHPath, 0) == FR_OK)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4912      	ldr	r1, [pc, #72]	; (8000f20 <main+0x33c>)
 8000ed6:	4813      	ldr	r0, [pc, #76]	; (8000f24 <main+0x340>)
 8000ed8:	f009 fada 	bl	800a490 <f_mount>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d106      	bne.n	8000ef0 <main+0x30c>
			{
				HAL_GPIO_WritePin(Led4_GPIO_Port, Led4_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <main+0x330>)
 8000eea:	f001 fb47 	bl	800257c <HAL_GPIO_WritePin>
 8000eee:	e698      	b.n	8000c22 <main+0x3e>
			}
			else
			{
				HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <main+0x330>)
 8000ef8:	f001 fb40 	bl	800257c <HAL_GPIO_WritePin>
		MX_USB_HOST_Process();
 8000efc:	e691      	b.n	8000c22 <main+0x3e>
 8000efe:	bf00      	nop
 8000f00:	40020800 	.word	0x40020800
 8000f04:	200007d8 	.word	0x200007d8
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	0800cc00 	.word	0x0800cc00
 8000f10:	0800cc08 	.word	0x0800cc08
 8000f14:	40020c00 	.word	0x40020c00
 8000f18:	0800cc14 	.word	0x0800cc14
 8000f1c:	0800cc18 	.word	0x0800cc18
 8000f20:	2000181c 	.word	0x2000181c
 8000f24:	200007e4 	.word	0x200007e4

08000f28 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00a fc34 	bl	800b7a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000f9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 f86e 	bl	8004090 <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000fba:	f000 f8a3 	bl	8001104 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2105      	movs	r1, #5
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 facf 	bl	8004580 <HAL_RCC_ClockConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000fe8:	f000 f88c 	bl	8001104 <Error_Handler>
	}
}
 8000fec:	bf00      	nop
 8000fee:	3750      	adds	r7, #80	; 0x50
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a36      	ldr	r2, [pc, #216]	; (80010f4 <MX_GPIO_Init+0xf8>)
 800101c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <MX_GPIO_Init+0xf8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_GPIO_Init+0xf8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_GPIO_Init+0xf8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	481c      	ldr	r0, [pc, #112]	; (80010f8 <MX_GPIO_Init+0xfc>)
 8001088:	f001 fa78 	bl	800257c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001092:	481a      	ldr	r0, [pc, #104]	; (80010fc <MX_GPIO_Init+0x100>)
 8001094:	f001 fa72 	bl	800257c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OtgPower_Pin */
	GPIO_InitStruct.Pin = OtgPower_Pin;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <MX_GPIO_Init+0xfc>)
 80010b0:	f001 f8b0 	bl	8002214 <HAL_GPIO_Init>

	/*Configure GPIO pin : Btn1_Pin */
	GPIO_InitStruct.Pin = Btn1_Pin;
 80010b4:	2301      	movs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_GPIO_Init+0x104>)
 80010c8:	f001 f8a4 	bl	8002214 <HAL_GPIO_Init>

	/*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin */
	GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin;
 80010cc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_GPIO_Init+0x100>)
 80010e6:	f001 f895 	bl	8002214 <HAL_GPIO_Init>

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40020000 	.word	0x40020000

08001104 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>
	...

08001110 <overdrive_log_pedal_init>:
#include "pedalboard_min.h"


// OVERDRIVE_LOG

void overdrive_log_pedal_init(pedal_config_t *conf) {
 8001110:	b490      	push	{r4, r7}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 500, 2000, 100};
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <overdrive_log_pedal_init+0x44>)
 800111c:	f103 0410 	add.w	r4, r3, #16
 8001120:	4613      	mov	r3, r2
 8001122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <overdrive_log_pedal_init+0x48>)
 800112c:	f103 0420 	add.w	r4, r3, #32
 8001130:	4613      	mov	r3, r2
 8001132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){0.2, 0, 1, 0.1};
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <overdrive_log_pedal_init+0x4c>)
 800113c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001140:	4613      	mov	r3, r2
 8001142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001148:	bf00      	nop
 800114a:	3738      	adds	r7, #56	; 0x38
 800114c:	46bd      	mov	sp, r7
 800114e:	bc90      	pop	{r4, r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	0800cc1c 	.word	0x0800cc1c
 8001158:	0800cc2c 	.word	0x0800cc2c
 800115c:	0800cc3c 	.word	0x0800cc3c

08001160 <overdrive_log_process>:

float overdrive_log_process(float in, pedal_config_t *conf) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	ed87 0a01 	vstr	s0, [r7, #4]
 800116a:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 1) out = log2f(in);
 800116c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	dd06      	ble.n	800118c <overdrive_log_process+0x2c>
 800117e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001182:	f00b fbfb 	bl	800c97c <log2f>
 8001186:	ed87 0a03 	vstr	s0, [r7, #12]
 800118a:	e01a      	b.n	80011c2 <overdrive_log_process+0x62>
    else if (in < -1) out = -log2f(-in);
 800118c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001190:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	d50e      	bpl.n	80011bc <overdrive_log_process+0x5c>
 800119e:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a2:	eef1 7a67 	vneg.f32	s15, s15
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	f00b fbe7 	bl	800c97c <log2f>
 80011ae:	eef0 7a40 	vmov.f32	s15, s0
 80011b2:	eef1 7a67 	vneg.f32	s15, s15
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]
 80011ba:	e002      	b.n	80011c2 <overdrive_log_process+0x62>
    else out = 0;
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
    out = gain(out, conf->float_params[GAIN_INTENSITY].value);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80011c8:	eef0 0a67 	vmov.f32	s1, s15
 80011cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80011d0:	f000 fc3c 	bl	8001a4c <gain>
 80011d4:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	edd3 7a08 	vldr	s15, [r3, #32]
 80011de:	eef0 0a67 	vmov.f32	s1, s15
 80011e2:	ed97 0a03 	vldr	s0, [r7, #12]
 80011e6:	f000 fc87 	bl	8001af8 <hard_clip>
 80011ea:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE].value);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80011f4:	eeb0 1a67 	vmov.f32	s2, s15
 80011f8:	edd7 0a01 	vldr	s1, [r7, #4]
 80011fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001200:	f000 fc38 	bl	8001a74 <mix>
 8001204:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	ee07 3a90 	vmov	s15, r3
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 8001218:	b490      	push	{r4, r7}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    conf->float_params[GAIN_INTENSITY] = (float_parameter_t){0.5, 0.1, 10, 0.1};
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <amplifier_pedal_init+0x34>)
 8001224:	f103 0410 	add.w	r4, r3, #16
 8001228:	4613      	mov	r3, r2
 800122a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800122c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <amplifier_pedal_init+0x38>)
 8001234:	f103 0420 	add.w	r4, r3, #32
 8001238:	4613      	mov	r3, r2
 800123a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bc90      	pop	{r4, r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	0800cc4c 	.word	0x0800cc4c
 8001250:	0800cc2c 	.word	0x0800cc2c

08001254 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	ed87 0a01 	vstr	s0, [r7, #4]
 800125e:	6038      	str	r0, [r7, #0]
    float out = gain(in, conf->float_params[GAIN_INTENSITY].value);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	edd3 7a04 	vldr	s15, [r3, #16]
 8001266:	eef0 0a67 	vmov.f32	s1, s15
 800126a:	ed97 0a01 	vldr	s0, [r7, #4]
 800126e:	f000 fbed 	bl	8001a4c <gain>
 8001272:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	edd3 7a08 	vldr	s15, [r3, #32]
 800127c:	eef0 0a67 	vmov.f32	s1, s15
 8001280:	ed97 0a03 	vldr	s0, [r7, #12]
 8001284:	f000 fc38 	bl	8001af8 <hard_clip>
 8001288:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	ee07 3a90 	vmov	s15, r3
}
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    return;
 80012a4:	bf00      	nop
}
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ba:	6038      	str	r0, [r7, #0]
    return in;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	ee07 3a90 	vmov	s15, r3
}
 80012c2:	eeb0 0a67 	vmov.f32	s0, s15
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 80012d0:	b490      	push	{r4, r7}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    conf->float_params[SPEED] = (float_parameter_t){32, 2, 64, 2};
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <tremolo_pedal_init+0x34>)
 80012dc:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80012e0:	4613      	mov	r3, r2
 80012e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){0.1, 0, 1, 0.1};
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <tremolo_pedal_init+0x38>)
 80012ec:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80012f0:	4613      	mov	r3, r2
 80012f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc90      	pop	{r4, r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	0800cc5c 	.word	0x0800cc5c
 8001308:	0800cc6c 	.word	0x0800cc6c

0800130c <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	ed87 0a01 	vstr	s0, [r7, #4]
 8001316:	6038      	str	r0, [r7, #0]
    static uint32_t i = 0;
    float out = in * wave_gen('s', i++, 1, conf->float_params[SPEED].value);
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <tremolo_process+0x68>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	4915      	ldr	r1, [pc, #84]	; (8001374 <tremolo_process+0x68>)
 8001320:	600a      	str	r2, [r1, #0]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	edd2 7a20 	vldr	s15, [r2, #128]	; 0x80
 8001328:	eef0 0a67 	vmov.f32	s1, s15
 800132c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001330:	4619      	mov	r1, r3
 8001332:	2073      	movs	r0, #115	; 0x73
 8001334:	f000 fc5c 	bl	8001bf0 <wave_gen>
 8001338:	eeb0 7a40 	vmov.f32	s14, s0
 800133c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001344:	edc7 7a03 	vstr	s15, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE].value);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800134e:	eeb0 1a67 	vmov.f32	s2, s15
 8001352:	edd7 0a01 	vldr	s1, [r7, #4]
 8001356:	ed97 0a03 	vldr	s0, [r7, #12]
 800135a:	f000 fb8b 	bl	8001a74 <mix>
 800135e:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	ee07 3a90 	vmov	s15, r3
}
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000b0 	.word	0x200000b0

08001378 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 8001378:	b490      	push	{r4, r7}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    conf->float_params[REDUCT_INTENSITY] = (float_parameter_t){2000, 10, 2000, 10};
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <bitcrusher_rs_pedal_init+0x34>)
 8001384:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001388:	4613      	mov	r3, r2
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <bitcrusher_rs_pedal_init+0x38>)
 8001394:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001398:	4613      	mov	r3, r2
 800139a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc90      	pop	{r4, r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	0800cc7c 	.word	0x0800cc7c
 80013b0:	0800cc8c 	.word	0x0800cc8c

080013b4 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80013be:	6038      	str	r0, [r7, #0]
    int16_t _out = (float)in / conf->float_params[REDUCT_INTENSITY].value;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80013c6:	edd7 6a01 	vldr	s13, [r7, #4]
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d2:	ee17 3a90 	vmov	r3, s15
 80013d6:	81fb      	strh	r3, [r7, #14]
    float out = (float)_out * conf->float_params[REDUCT_INTENSITY].value;
 80013d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE].value);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80013f8:	eeb0 1a67 	vmov.f32	s2, s15
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	f000 fb36 	bl	8001a74 <mix>
 8001408:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a67 	vmov.f32	s0, s15
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <low_pass_filter_pedal_init>:

// LOW PASS FILTER

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 800141c:	b490      	push	{r4, r7}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    conf->u_int_params[WIDTH] = (u_int_parameter_t){4, 2, 32, 2};
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <low_pass_filter_pedal_init+0x30>)
 8001428:	461c      	mov	r4, r3
 800142a:	4613      	mov	r3, r2
 800142c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){1, 0, 1, 0.1};
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <low_pass_filter_pedal_init+0x34>)
 8001436:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800143a:	4613      	mov	r3, r2
 800143c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bc90      	pop	{r4, r7}
 800144a:	4770      	bx	lr
 800144c:	0800cc9c 	.word	0x0800cc9c
 8001450:	0800ccac 	.word	0x0800ccac

08001454 <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	ed87 0a01 	vstr	s0, [r7, #4]
 800145e:	6038      	str	r0, [r7, #0]
    static float history[441];
    static uint16_t i = 0;
    uint32_t width = conf->u_int_params[WIDTH].value;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	617b      	str	r3, [r7, #20]
    float out = 0;
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
    if (width > 441) width = 441;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f5b3 7fdd 	cmp.w	r3, #442	; 0x1ba
 8001472:	d302      	bcc.n	800147a <low_pass_filter_process+0x26>
 8001474:	f240 13b9 	movw	r3, #441	; 0x1b9
 8001478:	617b      	str	r3, [r7, #20]
    history[i % width] = in;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <low_pass_filter_process+0xd4>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	fbb3 f2f2 	udiv	r2, r3, r2
 8001484:	6979      	ldr	r1, [r7, #20]
 8001486:	fb01 f202 	mul.w	r2, r1, r2
 800148a:	1a9b      	subs	r3, r3, r2
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <low_pass_filter_process+0xd8>)
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]
    for (uint16_t j = i-width; j < i; j++) {
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <low_pass_filter_process+0xd4>)
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	b29b      	uxth	r3, r3
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	81fb      	strh	r3, [r7, #14]
 80014a2:	e015      	b.n	80014d0 <low_pass_filter_process+0x7c>
        out += history[j % width];
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80014ac:	6979      	ldr	r1, [r7, #20]
 80014ae:	fb01 f202 	mul.w	r2, r1, r2
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	4a1d      	ldr	r2, [pc, #116]	; (800152c <low_pass_filter_process+0xd8>)
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ed97 7a04 	vldr	s14, [r7, #16]
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	edc7 7a04 	vstr	s15, [r7, #16]
    for (uint16_t j = i-width; j < i; j++) {
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	3301      	adds	r3, #1
 80014ce:	81fb      	strh	r3, [r7, #14]
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <low_pass_filter_process+0xd4>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	89fa      	ldrh	r2, [r7, #14]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d3e4      	bcc.n	80014a4 <low_pass_filter_process+0x50>
    }
    i++;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <low_pass_filter_process+0xd4>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <low_pass_filter_process+0xd4>)
 80014e4:	801a      	strh	r2, [r3, #0]
    out /= width;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014f0:	edd7 6a04 	vldr	s13, [r7, #16]
 80014f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f8:	edc7 7a04 	vstr	s15, [r7, #16]
    out = mix(out, in, conf->float_params[BALANCE].value);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001502:	eeb0 1a67 	vmov.f32	s2, s15
 8001506:	edd7 0a01 	vldr	s1, [r7, #4]
 800150a:	ed97 0a04 	vldr	s0, [r7, #16]
 800150e:	f000 fab1 	bl	8001a74 <mix>
 8001512:	ed87 0a04 	vstr	s0, [r7, #16]
    return out;
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	ee07 3a90 	vmov	s15, r3
}
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000b4 	.word	0x200000b4
 800152c:	200000b8 	.word	0x200000b8

08001530 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	ed87 0a01 	vstr	s0, [r7, #4]
 800154e:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	ee07 3a90 	vmov	s15, r3
}
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <overdrive_pedal_init>:

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 8001564:	b490      	push	{r4, r7}
 8001566:	b096      	sub	sp, #88	; 0x58
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    conf->float_params[GAIN_INTENSITY] = (float_parameter_t){4, 1, 10, 0.5};
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <overdrive_pedal_init+0x64>)
 8001570:	f103 0410 	add.w	r4, r3, #16
 8001574:	4613      	mov	r3, r2
 8001576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a13      	ldr	r2, [pc, #76]	; (80015cc <overdrive_pedal_init+0x68>)
 8001580:	f103 0420 	add.w	r4, r3, #32
 8001584:	4613      	mov	r3, r2
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <overdrive_pedal_init+0x6c>)
 8001590:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001594:	4613      	mov	r3, r2
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4, 1, 10, 0.5};
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <overdrive_pedal_init+0x64>)
 80015a0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80015a4:	4613      	mov	r3, r2
 80015a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){1, 0, 1, 0.1};
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <overdrive_pedal_init+0x70>)
 80015b0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80015b4:	4613      	mov	r3, r2
 80015b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80015bc:	bf00      	nop
 80015be:	3758      	adds	r7, #88	; 0x58
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc90      	pop	{r4, r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	0800ccbc 	.word	0x0800ccbc
 80015cc:	0800cc2c 	.word	0x0800cc2c
 80015d0:	0800cccc 	.word	0x0800cccc
 80015d4:	0800ccac 	.word	0x0800ccac

080015d8 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0a01 	vstr	s0, [r7, #4]
 80015e2:	6038      	str	r0, [r7, #0]
    float out = gain(in, conf->float_params[GAIN_INTENSITY].value);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80015ea:	eef0 0a67 	vmov.f32	s1, s15
 80015ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80015f2:	f000 fa2b 	bl	8001a4c <gain>
 80015f6:	ed87 0a03 	vstr	s0, [r7, #12]
    out = soft_clip(out, conf->float_params[SOFT_THRESHOLD].value, conf->float_params[SOFTENER].value);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001606:	eeb0 1a47 	vmov.f32	s2, s14
 800160a:	eef0 0a67 	vmov.f32	s1, s15
 800160e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001612:	f000 faa1 	bl	8001b58 <soft_clip>
 8001616:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001620:	eef0 0a67 	vmov.f32	s1, s15
 8001624:	ed97 0a03 	vldr	s0, [r7, #12]
 8001628:	f000 fa66 	bl	8001af8 <hard_clip>
 800162c:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE].value);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001636:	eeb0 1a67 	vmov.f32	s2, s15
 800163a:	edd7 0a01 	vldr	s1, [r7, #4]
 800163e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001642:	f000 fa17 	bl	8001a74 <mix>
 8001646:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	ee07 3a90 	vmov	s15, r3
}
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 800165c:	b490      	push	{r4, r7}
 800165e:	b096      	sub	sp, #88	; 0x58
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    conf->float_params[GAIN_INTENSITY] = (float_parameter_t){4, 1, 10, 0.5};
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <fuzz_pedal_init+0x64>)
 8001668:	f103 0410 	add.w	r4, r3, #16
 800166c:	4613      	mov	r3, r2
 800166e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <fuzz_pedal_init+0x68>)
 8001678:	f103 0420 	add.w	r4, r3, #32
 800167c:	4613      	mov	r3, r2
 800167e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048, 0, 8192, 32};
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <fuzz_pedal_init+0x6c>)
 8001688:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800168c:	4613      	mov	r3, r2
 800168e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){20, 2, 64, 2};
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <fuzz_pedal_init+0x70>)
 8001698:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800169c:	4613      	mov	r3, r2
 800169e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE] = (float_parameter_t){1, 0, 1, 0.1};
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <fuzz_pedal_init+0x74>)
 80016a8:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80016ac:	4613      	mov	r3, r2
 80016ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016b4:	bf00      	nop
 80016b6:	3758      	adds	r7, #88	; 0x58
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc90      	pop	{r4, r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	0800ccbc 	.word	0x0800ccbc
 80016c4:	0800cc2c 	.word	0x0800cc2c
 80016c8:	0800ccdc 	.word	0x0800ccdc
 80016cc:	0800ccec 	.word	0x0800ccec
 80016d0:	0800ccac 	.word	0x0800ccac

080016d4 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	ed87 0a01 	vstr	s0, [r7, #4]
 80016de:	6038      	str	r0, [r7, #0]
    static uint32_t i = 0;
    float out = gain(in, conf->float_params[GAIN_INTENSITY].value);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80016e6:	eef0 0a67 	vmov.f32	s1, s15
 80016ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80016ee:	f000 f9ad 	bl	8001a4c <gain>
 80016f2:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80016fc:	eef0 0a67 	vmov.f32	s1, s15
 8001700:	ed97 0a03 	vldr	s0, [r7, #12]
 8001704:	f000 f9f8 	bl	8001af8 <hard_clip>
 8001708:	ed87 0a03 	vstr	s0, [r7, #12]
    if (out == conf->float_params[CLIP_THRESHOLD].value) {
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001712:	ed97 7a03 	vldr	s14, [r7, #12]
 8001716:	eeb4 7a67 	vcmp.f32	s14, s15
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d120      	bne.n	8001762 <fuzz_process+0x8e>
        out = out + wave_gen('s', i++, conf->float_params[HEIGHT].value, conf->float_params[SPEED].value) - conf->float_params[HEIGHT].value;
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <fuzz_process+0x118>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	4931      	ldr	r1, [pc, #196]	; (80017ec <fuzz_process+0x118>)
 8001728:	600a      	str	r2, [r1, #0]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	edd2 7a1c 	vldr	s15, [r2, #112]	; 0x70
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	ed92 7a20 	vldr	s14, [r2, #128]	; 0x80
 8001736:	eef0 0a47 	vmov.f32	s1, s14
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	4619      	mov	r1, r3
 8001740:	2073      	movs	r0, #115	; 0x73
 8001742:	f000 fa55 	bl	8001bf0 <wave_gen>
 8001746:	eeb0 7a40 	vmov.f32	s14, s0
 800174a:	edd7 7a03 	vldr	s15, [r7, #12]
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175c:	edc7 7a03 	vstr	s15, [r7, #12]
 8001760:	e02f      	b.n	80017c2 <fuzz_process+0xee>
    } else if (out == -(conf->float_params[CLIP_THRESHOLD].value)-1) {
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	edd3 7a08 	vldr	s15, [r3, #32]
 8001768:	eef1 7a67 	vneg.f32	s15, s15
 800176c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001774:	ed97 7a03 	vldr	s14, [r7, #12]
 8001778:	eeb4 7a67 	vcmp.f32	s14, s15
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	d11f      	bne.n	80017c2 <fuzz_process+0xee>
        out = out - wave_gen('s', i++, conf->float_params[HEIGHT].value, conf->float_params[SPEED].value) + conf->float_params[HEIGHT].value;
 8001782:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <fuzz_process+0x118>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	4918      	ldr	r1, [pc, #96]	; (80017ec <fuzz_process+0x118>)
 800178a:	600a      	str	r2, [r1, #0]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	edd2 7a1c 	vldr	s15, [r2, #112]	; 0x70
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	ed92 7a20 	vldr	s14, [r2, #128]	; 0x80
 8001798:	eef0 0a47 	vmov.f32	s1, s14
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	4619      	mov	r1, r3
 80017a2:	2073      	movs	r0, #115	; 0x73
 80017a4:	f000 fa24 	bl	8001bf0 <wave_gen>
 80017a8:	eeb0 7a40 	vmov.f32	s14, s0
 80017ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = mix(out, in, conf->float_params[BALANCE].value);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80017c8:	eeb0 1a67 	vmov.f32	s2, s15
 80017cc:	edd7 0a01 	vldr	s1, [r7, #4]
 80017d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80017d4:	f000 f94e 	bl	8001a74 <mix>
 80017d8:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	ee07 3a90 	vmov	s15, r3
}
 80017e2:	eeb0 0a67 	vmov.f32	s0, s15
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000079c 	.word	0x2000079c

080017f0 <pedalboard_append>:
    return type;
}*/

// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	f200 80dd 	bhi.w	80019c0 <pedalboard_append+0x1d0>
        uint8_t i = p_pb->active_pedals;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	73fb      	strb	r3, [r7, #15]
        p_pb->pedals[i].type = type;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	2198      	movs	r1, #152	; 0x98
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3394      	adds	r3, #148	; 0x94
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	701a      	strb	r2, [r3, #0]

       if (type == AMPLIFIER) {
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d113      	bne.n	800184c <pedalboard_append+0x5c>
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2298      	movs	r2, #152	; 0x98
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	3304      	adds	r3, #4
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fcf0 	bl	8001218 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	2198      	movs	r1, #152	; 0x98
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	4413      	add	r3, r2
 8001844:	3398      	adds	r3, #152	; 0x98
 8001846:	4a60      	ldr	r2, [pc, #384]	; (80019c8 <pedalboard_append+0x1d8>)
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e0b3      	b.n	80019b4 <pedalboard_append+0x1c4>
        } else if (type == BITCRUSHER_RS) {
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d113      	bne.n	800187a <pedalboard_append+0x8a>
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2298      	movs	r2, #152	; 0x98
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	3304      	adds	r3, #4
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fd89 	bl	8001378 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	2198      	movs	r1, #152	; 0x98
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3398      	adds	r3, #152	; 0x98
 8001874:	4a55      	ldr	r2, [pc, #340]	; (80019cc <pedalboard_append+0x1dc>)
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e09c      	b.n	80019b4 <pedalboard_append+0x1c4>
        } else if (type == DYN_AMPLIFIER) {
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d113      	bne.n	80018a8 <pedalboard_append+0xb8>
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2298      	movs	r2, #152	; 0x98
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	3304      	adds	r3, #4
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe4e 	bl	8001530 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	2198      	movs	r1, #152	; 0x98
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	3398      	adds	r3, #152	; 0x98
 80018a2:	4a4b      	ldr	r2, [pc, #300]	; (80019d0 <pedalboard_append+0x1e0>)
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e085      	b.n	80019b4 <pedalboard_append+0x1c4>
        } else if (type == FUZZ) {
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d113      	bne.n	80018d6 <pedalboard_append+0xe6>
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	2298      	movs	r2, #152	; 0x98
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fecd 	bl	800165c <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	2198      	movs	r1, #152	; 0x98
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3398      	adds	r3, #152	; 0x98
 80018d0:	4a40      	ldr	r2, [pc, #256]	; (80019d4 <pedalboard_append+0x1e4>)
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e06e      	b.n	80019b4 <pedalboard_append+0x1c4>
        } else if (type == LPF) {
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b05      	cmp	r3, #5
 80018da:	d113      	bne.n	8001904 <pedalboard_append+0x114>
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2298      	movs	r2, #152	; 0x98
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	3304      	adds	r3, #4
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fd96 	bl	800141c <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	2198      	movs	r1, #152	; 0x98
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3398      	adds	r3, #152	; 0x98
 80018fe:	4a36      	ldr	r2, [pc, #216]	; (80019d8 <pedalboard_append+0x1e8>)
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e057      	b.n	80019b4 <pedalboard_append+0x1c4>
        } else if (type == OVERDRIVE) {
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	2b06      	cmp	r3, #6
 8001908:	d113      	bne.n	8001932 <pedalboard_append+0x142>
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	2298      	movs	r2, #152	; 0x98
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	3304      	adds	r3, #4
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fe23 	bl	8001564 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	2198      	movs	r1, #152	; 0x98
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	3398      	adds	r3, #152	; 0x98
 800192c:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <pedalboard_append+0x1ec>)
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e040      	b.n	80019b4 <pedalboard_append+0x1c4>
        } else if (type == OVERDRIVE_LOG) {
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	2b07      	cmp	r3, #7
 8001936:	d113      	bne.n	8001960 <pedalboard_append+0x170>
            overdrive_log_pedal_init(&(p_pb->pedals[i].config));
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2298      	movs	r2, #152	; 0x98
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	3304      	adds	r3, #4
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fbe2 	bl	8001110 <overdrive_log_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_log_process;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	2198      	movs	r1, #152	; 0x98
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3398      	adds	r3, #152	; 0x98
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <pedalboard_append+0x1f0>)
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e029      	b.n	80019b4 <pedalboard_append+0x1c4>
        }  else if (type == TREMOLO) {
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	2b08      	cmp	r3, #8
 8001964:	d113      	bne.n	800198e <pedalboard_append+0x19e>
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2298      	movs	r2, #152	; 0x98
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	3304      	adds	r3, #4
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fcab 	bl	80012d0 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	2198      	movs	r1, #152	; 0x98
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3398      	adds	r3, #152	; 0x98
 8001988:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <pedalboard_append+0x1f4>)
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e012      	b.n	80019b4 <pedalboard_append+0x1c4>
        } else {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2298      	movs	r2, #152	; 0x98
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fc7d 	bl	800129c <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	2198      	movs	r1, #152	; 0x98
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3398      	adds	r3, #152	; 0x98
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <pedalboard_append+0x1f8>)
 80019b2:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	701a      	strb	r2, [r3, #0]
    }
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	08001255 	.word	0x08001255
 80019cc:	080013b5 	.word	0x080013b5
 80019d0:	08001545 	.word	0x08001545
 80019d4:	080016d5 	.word	0x080016d5
 80019d8:	08001455 	.word	0x08001455
 80019dc:	080015d9 	.word	0x080015d9
 80019e0:	08001161 	.word	0x08001161
 80019e4:	0800130d 	.word	0x0800130d
 80019e8:	080012b1 	.word	0x080012b1

080019ec <pedalboard_process>:

float pedalboard_process(pedalboard_t *p_pb, float in) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	ed87 0a00 	vstr	s0, [r7]
    float out = in;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < p_pb->active_pedals; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	72fb      	strb	r3, [r7, #11]
 8001a00:	e017      	b.n	8001a32 <pedalboard_process+0x46>
        out = p_pb->pedals[i].pedal_process(out, &(p_pb->pedals[i].config));
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	2198      	movs	r1, #152	; 0x98
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3398      	adds	r3, #152	; 0x98
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	7afa      	ldrb	r2, [r7, #11]
 8001a14:	2198      	movs	r1, #152	; 0x98
 8001a16:	fb01 f202 	mul.w	r2, r1, r2
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	440a      	add	r2, r1
 8001a1e:	3204      	adds	r2, #4
 8001a20:	4610      	mov	r0, r2
 8001a22:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a26:	4798      	blx	r3
 8001a28:	ed87 0a03 	vstr	s0, [r7, #12]
    for (uint8_t i = 0; i < p_pb->active_pedals; i++) {
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	72fb      	strb	r3, [r7, #11]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	7afa      	ldrb	r2, [r7, #11]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d3e2      	bcc.n	8001a02 <pedalboard_process+0x16>
    }
    return out;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	ee07 3a90 	vmov	s15, r3
}
 8001a42:	eeb0 0a67 	vmov.f32	s0, s15
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <gain>:

// PROCESSING

float gain(float in, float gain_intensity) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a56:	edc7 0a00 	vstr	s1, [r7]
    return in * gain_intensity;
 8001a5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5e:	edd7 7a00 	vldr	s15, [r7]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001a66:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <mix>:

float mix(float in_1, float in_2, float balance) {
 8001a74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a80:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a84:	ed87 1a01 	vstr	s2, [r7, #4]
    return in_1 * balance + in_2 * (1. - balance);
 8001a88:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a94:	ee17 0a90 	vmov	r0, s15
 8001a98:	f7fe fe80 	bl	800079c <__aeabi_f2d>
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	460d      	mov	r5, r1
 8001aa0:	68b8      	ldr	r0, [r7, #8]
 8001aa2:	f7fe fe7b 	bl	800079c <__aeabi_f2d>
 8001aa6:	4680      	mov	r8, r0
 8001aa8:	4689      	mov	r9, r1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fe76 	bl	800079c <__aeabi_f2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	490e      	ldr	r1, [pc, #56]	; (8001af4 <mix+0x80>)
 8001aba:	f7fe fd0f 	bl	80004dc <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4640      	mov	r0, r8
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	f7fe fbdb 	bl	8000280 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fd05 	bl	80004e0 <__adddf3>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7fe feb5 	bl	800084c <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	ee07 3a90 	vmov	s15, r3
}
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001af4:	3ff00000 	.word	0x3ff00000

08001af8 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b02:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 8001b06:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b0a:	edd7 7a00 	vldr	s15, [r7]
 8001b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	dd02      	ble.n	8001b1e <hard_clip+0x26>
        return clip_threshold;
 8001b18:	edd7 7a00 	vldr	s15, [r7]
 8001b1c:	e015      	b.n	8001b4a <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8001b1e:	edd7 7a00 	vldr	s15, [r7]
 8001b22:	eef1 7a67 	vneg.f32	s15, s15
 8001b26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d508      	bpl.n	8001b46 <hard_clip+0x4e>
        return -clip_threshold - 1;
 8001b34:	edd7 7a00 	vldr	s15, [r7]
 8001b38:	eef1 7a67 	vneg.f32	s15, s15
 8001b3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b44:	e001      	b.n	8001b4a <hard_clip+0x52>
    }
    return in;
 8001b46:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b62:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b66:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 8001b6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	dd10      	ble.n	8001b9e <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 8001b7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b80:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b84:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b88:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b90:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	edc7 7a05 	vstr	s15, [r7, #20]
 8001b9c:	e01d      	b.n	8001bda <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 8001b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ba2:	eef1 7a67 	vneg.f32	s15, s15
 8001ba6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d510      	bpl.n	8001bd6 <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 8001bb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bbc:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd0:	edc7 7a05 	vstr	s15, [r7, #20]
 8001bd4:	e001      	b.n	8001bda <soft_clip+0x82>
    } else {
        out = in;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	617b      	str	r3, [r7, #20]
    }
    return out;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	ee07 3a90 	vmov	s15, r3
}
 8001be0:	eeb0 0a67 	vmov.f32	s0, s15
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <wave_gen>:
    int16_t out = (float)(in / reduction_intensity);
    out *= reduction_intensity;
    return (float)out;
}

float wave_gen(char t, uint32_t i, float height, float speed) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	6019      	str	r1, [r3, #0]
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	ed83 0a00 	vstr	s0, [r3]
 8001c06:	463b      	mov	r3, r7
 8001c08:	edc3 0a00 	vstr	s1, [r3]
 8001c0c:	f107 030f 	add.w	r3, r7, #15
 8001c10:	701a      	strb	r2, [r3, #0]
    float sin_table[512] = { 0, 0.00307396, 0.00614789, 0.00922176, 0.0122955, 0.0153692, 0.0184427, 0.0215161, 0.0245892, 0.0276621, 0.0307348, 0.0338071, 0.0368792, 0.0399509, 0.0430222, 0.0460931, 0.0491636, 0.0522336, 0.0553031, 0.0583721, 0.0614405, 0.0645084, 0.0675756, 0.0706423, 0.0737082, 0.0767734, 0.079838, 0.0829017, 0.0859647, 0.0890269, 0.0920882, 0.0951487, 0.0982083, 0.101267, 0.104325, 0.107381, 0.110437, 0.113492, 0.116545, 0.119598, 0.122649, 0.125699, 0.128748, 0.131796, 0.134842, 0.137888, 0.140932, 0.143974, 0.147015, 0.150055, 0.153094, 0.156131, 0.159166, 0.1622, 0.165233, 0.168264, 0.171293, 0.174321, 0.177347, 0.180371, 0.183394, 0.186415, 0.189434, 0.192451, 0.195467, 0.198481, 0.201493, 0.204503, 0.207511, 0.210517, 0.213521, 0.216523, 0.219523, 0.222521, 0.225517, 0.22851, 0.231502, 0.234491, 0.237478, 0.240463, 0.243446, 0.246426, 0.249404, 0.25238, 0.255353, 0.258324, 0.261292, 0.264258, 0.267222, 0.270183, 0.273141, 0.276097, 0.27905, 0.282, 0.284948, 0.287893, 0.290836, 0.293776, 0.296713, 0.299647, 0.302578, 0.305506, 0.308432, 0.311355, 0.314274, 0.317191, 0.320105, 0.323015, 0.325923, 0.328828, 0.331729, 0.334627, 0.337523, 0.340415, 0.343303, 0.346189, 0.349071, 0.35195, 0.354826, 0.357698, 0.360567, 0.363432, 0.366294, 0.369153, 0.372008, 0.37486, 0.377708, 0.380552, 0.383393, 0.38623, 0.389064, 0.391894, 0.39472, 0.397542, 0.400361, 0.403176, 0.405987, 0.408795, 0.411598, 0.414398, 0.417193, 0.419985, 0.422773, 0.425556, 0.428336, 0.431112, 0.433883, 0.436651, 0.439414, 0.442173, 0.444929, 0.447679, 0.450426, 0.453168, 0.455906, 0.45864, 0.46137, 0.464095, 0.466815, 0.469532, 0.472243, 0.474951, 0.477654, 0.480352, 0.483046, 0.485735, 0.48842, 0.4911, 0.493775, 0.496446, 0.499112, 0.501773, 0.50443, 0.507082, 0.509729, 0.512371, 0.515008, 0.517641, 0.520269, 0.522891, 0.525509, 0.528122, 0.53073, 0.533332, 0.53593, 0.538523, 0.541111, 0.543693, 0.54627, 0.548843, 0.55141, 0.553971, 0.556528, 0.559079, 0.561625, 0.564166, 0.566701, 0.569231, 0.571756, 0.574275, 0.576789, 0.579297, 0.5818, 0.584298, 0.58679, 0.589276, 0.591757, 0.594232, 0.596701, 0.599165, 0.601624, 0.604076, 0.606523, 0.608964, 0.6114, 0.613829, 0.616253, 0.618671, 0.621083, 0.623489, 0.62589, 0.628284, 0.630673, 0.633055, 0.635432, 0.637802, 0.640167, 0.642525, 0.644878, 0.647224, 0.649564, 0.651899, 0.654226, 0.656548, 0.658864, 0.661173, 0.663476, 0.665773, 0.668063, 0.670348, 0.672625, 0.674897, 0.677162, 0.679421, 0.681673, 0.683919, 0.686158, 0.688391, 0.690618, 0.692838, 0.695051, 0.697258, 0.699458, 0.701651, 0.703838, 0.706019, 0.708192, 0.710359, 0.712519, 0.714673, 0.71682, 0.71896, 0.721093, 0.723219, 0.725339, 0.727451, 0.729557, 0.731656, 0.733748, 0.735833, 0.737911, 0.739982, 0.742046, 0.744103, 0.746154, 0.748197, 0.750233, 0.752261, 0.754283, 0.756298, 0.758305, 0.760306, 0.762299, 0.764285, 0.766263, 0.768235, 0.770199, 0.772156, 0.774106, 0.776048, 0.777983, 0.779911, 0.781831, 0.783744, 0.785649, 0.787547, 0.789438, 0.791321, 0.793197, 0.795065, 0.796926, 0.798779, 0.800625, 0.802463, 0.804293, 0.806116, 0.807931, 0.809739, 0.811539, 0.813331, 0.815115, 0.816892, 0.818662, 0.820423, 0.822177, 0.823923, 0.825661, 0.827391, 0.829114, 0.830828, 0.832535, 0.834234, 0.835925, 0.837608, 0.839283, 0.840951, 0.84261, 0.844262, 0.845905, 0.84754, 0.849168, 0.850787, 0.852399, 0.854002, 0.855597, 0.857184, 0.858764, 0.860334, 0.861897, 0.863452, 0.864999, 0.866537, 0.868067, 0.869589, 0.871103, 0.872608, 0.874105, 0.875594, 0.877075, 0.878548, 0.880012, 0.881468, 0.882915, 0.884354, 0.885785, 0.887207, 0.888622, 0.890027, 0.891424, 0.892813, 0.894194, 0.895565, 0.896929, 0.898284, 0.89963, 0.900968, 0.902298, 0.903619, 0.904931, 0.906235, 0.90753, 0.908817, 0.910095, 0.911365, 0.912626, 0.913878, 0.915122, 0.916357, 0.917583, 0.918801, 0.92001, 0.92121, 0.922402, 0.923585, 0.924759, 0.925924, 0.927081, 0.928229, 0.929368, 0.930499, 0.93162, 0.932733, 0.933837, 0.934932, 0.936018, 0.937096, 0.938164, 0.939224, 0.940275, 0.941317, 0.94235, 0.943374, 0.944389, 0.945396, 0.946393, 0.947382, 0.948361, 0.949332, 0.950293, 0.951246, 0.95219, 0.953124, 0.95405, 0.954966, 0.955874, 0.956773, 0.957662, 0.958542, 0.959414, 0.960276, 0.961129, 0.961974, 0.962809, 0.963635, 0.964452, 0.965259, 0.966058, 0.966848, 0.967628, 0.968399, 0.969161, 0.969914, 0.970658, 0.971393, 0.972118, 0.972834, 0.973541, 0.974239, 0.974928, 0.975607, 0.976277, 0.976938, 0.97759, 0.978232, 0.978866, 0.97949, 0.980105, 0.98071, 0.981306, 0.981893, 0.982471, 0.983039, 0.983598, 0.984148, 0.984689, 0.98522, 0.985742, 0.986254, 0.986758, 0.987252, 0.987736, 0.988211, 0.988677, 0.989134, 0.989581, 0.990019, 0.990448, 0.990867, 0.991277, 0.991677, 0.992068, 0.99245, 0.992822, 0.993185, 0.993539, 0.993883, 0.994218, 0.994543, 0.994859, 0.995166, 0.995463, 0.995751, 0.996029, 0.996298, 0.996558, 0.996808, 0.997048, 0.99728, 0.997502, 0.997714, 0.997917, 0.998111, 0.998295, 0.99847, 0.998635, 0.998791, 0.998937, 0.999074, 0.999202, 0.99932, 0.999428, 0.999528, 0.999617, 0.999698, 0.999768, 0.99983, 0.999882, 0.999924, 0.999957, 0.999981, 0.999995, 1 };
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	4a42      	ldr	r2, [pc, #264]	; (8001d20 <wave_gen+0x130>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c20:	461a      	mov	r2, r3
 8001c22:	f009 fdb1 	bl	800b788 <memcpy>
    if (t == 's') {
 8001c26:	f107 030f 	add.w	r3, r7, #15
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b73      	cmp	r3, #115	; 0x73
 8001c2e:	d16f      	bne.n	8001d10 <wave_gen+0x120>
        i = (float)i * speed;
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c3e:	463b      	mov	r3, r7
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c50:	ee17 2a90 	vmov	r2, s15
 8001c54:	601a      	str	r2, [r3, #0]
        uint32_t x = i % 512;
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
        uint32_t quadrant = (i % 2048) / 512;
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
        if (quadrant == 0) return sin_table[x] * height;
 8001c74:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <wave_gen+0xa8>
 8001c7c:	f107 0210 	add.w	r2, r7, #16
 8001c80:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c96:	e03d      	b.n	8001d14 <wave_gen+0x124>
        else if (quadrant == 1) return sin_table[511 - x] * height;
 8001c98:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d110      	bne.n	8001cc2 <wave_gen+0xd2>
 8001ca0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001ca4:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f107 0210 	add.w	r2, r7, #16
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc0:	e028      	b.n	8001d14 <wave_gen+0x124>
        else if (quadrant == 2) return -sin_table[x] * height;
 8001cc2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d10f      	bne.n	8001cea <wave_gen+0xfa>
 8001cca:	f107 0210 	add.w	r2, r7, #16
 8001cce:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eeb1 7a67 	vneg.f32	s14, s15
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce8:	e014      	b.n	8001d14 <wave_gen+0x124>
        else /*if (quadrant == 3)*/ return -sin_table[511 - x] * height;
 8001cea:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001cee:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f107 0210 	add.w	r2, r7, #16
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	eeb1 7a67 	vneg.f32	s14, s15
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0e:	e001      	b.n	8001d14 <wave_gen+0x124>
    } else {
        return 0;
 8001d10:	eddf 7a04 	vldr	s15, [pc, #16]	; 8001d24 <wave_gen+0x134>
    }
}
 8001d14:	eeb0 0a67 	vmov.f32	s0, s15
 8001d18:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	0800ccfc 	.word	0x0800ccfc
 8001d24:	00000000 	.word	0x00000000

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>

08001d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc4:	f000 f8d0 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <OTG_FS_IRQHandler+0x10>)
 8001dd2:	f000 fe57 	bl	8002a84 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20003c60 	.word	0x20003c60

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f009 fc80 	bl	800b714 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20020000 	.word	0x20020000
 8001e40:	00000400 	.word	0x00000400
 8001e44:	200007a0 	.word	0x200007a0
 8001e48:	20003f78 	.word	0x20003f78

08001e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <SystemInit+0x20>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <SystemInit+0x20>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e76:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e8c:	4c0b      	ldr	r4, [pc, #44]	; (8001ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e9a:	f7ff ffd7 	bl	8001e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f009 fc3f 	bl	800b720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea2:	f7fe fe9f 	bl	8000be4 <main>
  bx  lr    
 8001ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001eb4:	0800d7b4 	.word	0x0800d7b4
  ldr r2, =_sbss
 8001eb8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001ebc:	20003f74 	.word	0x20003f74

08001ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC_IRQHandler>
	...

08001ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_Init+0x40>)
 8001ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_Init+0x40>)
 8001eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_Init+0x40>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f94f 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff ff16 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f967 	bl	80021fa <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f000 f92f 	bl	80021a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20001818 	.word	0x20001818

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20001818 	.word	0x20001818

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff8e 	bl	8002090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff29 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff3e 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff8e 	bl	80020e4 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5d 	bl	8002090 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff31 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffa2 	bl	800214c <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e16b      	b.n	8002508 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 815a 	bne.w	8002502 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d005      	beq.n	8002266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	2b02      	cmp	r3, #2
 8002264:	d130      	bne.n	80022c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d017      	beq.n	8002304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80b4 	beq.w	8002502 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b60      	ldr	r3, [pc, #384]	; (8002520 <HAL_GPIO_Init+0x30c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a5f      	ldr	r2, [pc, #380]	; (8002520 <HAL_GPIO_Init+0x30c>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_GPIO_Init+0x30c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b6:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_GPIO_Init+0x310>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a52      	ldr	r2, [pc, #328]	; (8002528 <HAL_GPIO_Init+0x314>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02b      	beq.n	800243a <HAL_GPIO_Init+0x226>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a51      	ldr	r2, [pc, #324]	; (800252c <HAL_GPIO_Init+0x318>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d025      	beq.n	8002436 <HAL_GPIO_Init+0x222>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a50      	ldr	r2, [pc, #320]	; (8002530 <HAL_GPIO_Init+0x31c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x21e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4f      	ldr	r2, [pc, #316]	; (8002534 <HAL_GPIO_Init+0x320>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x21a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4e      	ldr	r2, [pc, #312]	; (8002538 <HAL_GPIO_Init+0x324>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x216>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4d      	ldr	r2, [pc, #308]	; (800253c <HAL_GPIO_Init+0x328>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x212>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4c      	ldr	r2, [pc, #304]	; (8002540 <HAL_GPIO_Init+0x32c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x20e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4b      	ldr	r2, [pc, #300]	; (8002544 <HAL_GPIO_Init+0x330>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x20a>
 800241a:	2307      	movs	r3, #7
 800241c:	e00e      	b.n	800243c <HAL_GPIO_Init+0x228>
 800241e:	2308      	movs	r3, #8
 8002420:	e00c      	b.n	800243c <HAL_GPIO_Init+0x228>
 8002422:	2306      	movs	r3, #6
 8002424:	e00a      	b.n	800243c <HAL_GPIO_Init+0x228>
 8002426:	2305      	movs	r3, #5
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x228>
 800242a:	2304      	movs	r3, #4
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x228>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x228>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x228>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x228>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_GPIO_Init+0x310>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_GPIO_Init+0x334>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247e:	4a32      	ldr	r2, [pc, #200]	; (8002548 <HAL_GPIO_Init+0x334>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_GPIO_Init+0x334>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a8:	4a27      	ldr	r2, [pc, #156]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d2:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_GPIO_Init+0x334>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f ae90 	bls.w	8002230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40013800 	.word	0x40013800
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
 8002530:	40020800 	.word	0x40020800
 8002534:	40020c00 	.word	0x40020c00
 8002538:	40021000 	.word	0x40021000
 800253c:	40021400 	.word	0x40021400
 8002540:	40021800 	.word	0x40021800
 8002544:	40021c00 	.word	0x40021c00
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e001      	b.n	800256e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80025ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b0:	b08f      	sub	sp, #60	; 0x3c
 80025b2:	af0a      	add	r7, sp, #40	; 0x28
 80025b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e054      	b.n	800266a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f008 fdc0 	bl	800b160 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2203      	movs	r2, #3
 80025e4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 f9f8 	bl	80049f4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	687e      	ldr	r6, [r7, #4]
 800260c:	466d      	mov	r5, sp
 800260e:	f106 0410 	add.w	r4, r6, #16
 8002612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800261e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002622:	1d33      	adds	r3, r6, #4
 8002624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002626:	6838      	ldr	r0, [r7, #0]
 8002628:	f002 f972 	bl	8004910 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f002 f9ef 	bl	8004a16 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	687e      	ldr	r6, [r7, #4]
 8002640:	466d      	mov	r5, sp
 8002642:	f106 0410 	add.w	r4, r6, #16
 8002646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800264c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002652:	e885 0003 	stmia.w	r5, {r0, r1}
 8002656:	1d33      	adds	r3, r6, #4
 8002658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f002 fb56 	bl	8004d0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002672 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002672:	b590      	push	{r4, r7, lr}
 8002674:	b089      	sub	sp, #36	; 0x24
 8002676:	af04      	add	r7, sp, #16
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	4608      	mov	r0, r1
 800267c:	4611      	mov	r1, r2
 800267e:	461a      	mov	r2, r3
 8002680:	4603      	mov	r3, r0
 8002682:	70fb      	strb	r3, [r7, #3]
 8002684:	460b      	mov	r3, r1
 8002686:	70bb      	strb	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_HCD_HC_Init+0x28>
 8002696:	2302      	movs	r3, #2
 8002698:	e076      	b.n	8002788 <HAL_HCD_HC_Init+0x116>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	333d      	adds	r3, #61	; 0x3d
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3338      	adds	r3, #56	; 0x38
 80026c2:	787a      	ldrb	r2, [r7, #1]
 80026c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3340      	adds	r3, #64	; 0x40
 80026d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026d6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3339      	adds	r3, #57	; 0x39
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	333f      	adds	r3, #63	; 0x3f
 80026f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80026fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	78ba      	ldrb	r2, [r7, #2]
 8002702:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002706:	b2d0      	uxtb	r0, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	333a      	adds	r3, #58	; 0x3a
 8002714:	4602      	mov	r2, r0
 8002716:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002718:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da09      	bge.n	8002734 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	333b      	adds	r3, #59	; 0x3b
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e008      	b.n	8002746 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	333b      	adds	r3, #59	; 0x3b
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	333c      	adds	r3, #60	; 0x3c
 8002754:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002758:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	787c      	ldrb	r4, [r7, #1]
 8002760:	78ba      	ldrb	r2, [r7, #2]
 8002762:	78f9      	ldrb	r1, [r7, #3]
 8002764:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4623      	mov	r3, r4
 8002776:	f002 fc43 	bl	8005000 <USB_HC_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bd90      	pop	{r4, r7, pc}

08002790 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_HCD_HC_Halt+0x1e>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e00f      	b.n	80027ce <HAL_HCD_HC_Halt+0x3e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fe7f 	bl	80054c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	70fb      	strb	r3, [r7, #3]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70bb      	strb	r3, [r7, #2]
 80027ee:	4613      	mov	r3, r2
 80027f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333b      	adds	r3, #59	; 0x3b
 8002800:	78ba      	ldrb	r2, [r7, #2]
 8002802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	333f      	adds	r3, #63	; 0x3f
 8002812:	787a      	ldrb	r2, [r7, #1]
 8002814:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002816:	7c3b      	ldrb	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d112      	bne.n	8002842 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3342      	adds	r3, #66	; 0x42
 800282a:	2203      	movs	r2, #3
 800282c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	333d      	adds	r3, #61	; 0x3d
 800283c:	7f3a      	ldrb	r2, [r7, #28]
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e008      	b.n	8002854 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3342      	adds	r3, #66	; 0x42
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b03      	cmp	r3, #3
 8002858:	f200 80c6 	bhi.w	80029e8 <HAL_HCD_HC_SubmitRequest+0x210>
 800285c:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	08002875 	.word	0x08002875
 8002868:	080029d5 	.word	0x080029d5
 800286c:	080028d9 	.word	0x080028d9
 8002870:	08002957 	.word	0x08002957
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002874:	7c3b      	ldrb	r3, [r7, #16]
 8002876:	2b01      	cmp	r3, #1
 8002878:	f040 80b8 	bne.w	80029ec <HAL_HCD_HC_SubmitRequest+0x214>
 800287c:	78bb      	ldrb	r3, [r7, #2]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 80b4 	bne.w	80029ec <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002884:	8b3b      	ldrh	r3, [r7, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d108      	bne.n	800289c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3355      	adds	r3, #85	; 0x55
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3355      	adds	r3, #85	; 0x55
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3342      	adds	r3, #66	; 0x42
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028c2:	e093      	b.n	80029ec <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3342      	adds	r3, #66	; 0x42
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
      break;
 80028d6:	e089      	b.n	80029ec <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80028d8:	78bb      	ldrb	r3, [r7, #2]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d11d      	bne.n	800291a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3355      	adds	r3, #85	; 0x55
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3342      	adds	r3, #66	; 0x42
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002904:	e073      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	3342      	adds	r3, #66	; 0x42
 8002914:	2202      	movs	r2, #2
 8002916:	701a      	strb	r2, [r3, #0]
      break;
 8002918:	e069      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3354      	adds	r3, #84	; 0x54
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3342      	adds	r3, #66	; 0x42
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
      break;
 8002940:	e055      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3342      	adds	r3, #66	; 0x42
 8002950:	2202      	movs	r2, #2
 8002952:	701a      	strb	r2, [r3, #0]
      break;
 8002954:	e04b      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002956:	78bb      	ldrb	r3, [r7, #2]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11d      	bne.n	8002998 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3355      	adds	r3, #85	; 0x55
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3342      	adds	r3, #66	; 0x42
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002982:	e034      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3342      	adds	r3, #66	; 0x42
 8002992:	2202      	movs	r2, #2
 8002994:	701a      	strb	r2, [r3, #0]
      break;
 8002996:	e02a      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3354      	adds	r3, #84	; 0x54
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3342      	adds	r3, #66	; 0x42
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
      break;
 80029be:	e016      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3342      	adds	r3, #66	; 0x42
 80029ce:	2202      	movs	r2, #2
 80029d0:	701a      	strb	r2, [r3, #0]
      break;
 80029d2:	e00c      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3342      	adds	r3, #66	; 0x42
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80029e8:	bf00      	nop
 80029ea:	e000      	b.n	80029ee <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80029ec:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	3344      	adds	r3, #68	; 0x44
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	8b3a      	ldrh	r2, [r7, #24]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	202c      	movs	r0, #44	; 0x2c
 8002a08:	fb00 f303 	mul.w	r3, r0, r3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	334c      	adds	r3, #76	; 0x4c
 8002a10:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3360      	adds	r3, #96	; 0x60
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3350      	adds	r3, #80	; 0x50
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	212c      	movs	r1, #44	; 0x2c
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	3339      	adds	r3, #57	; 0x39
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3361      	adds	r3, #97	; 0x61
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	222c      	movs	r2, #44	; 0x2c
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	3338      	adds	r3, #56	; 0x38
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	18d1      	adds	r1, r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	f002 fbd2 	bl	800521c <USB_HC_StartXfer>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop

08002a84 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f002 f8f5 	bl	8004c8a <USB_GetMode>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	f040 80f6 	bne.w	8002c94 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 f8d9 	bl	8004c64 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80ec 	beq.w	8002c92 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 f8d0 	bl	8004c64 <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ace:	d104      	bne.n	8002ada <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ad8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 f8c0 	bl	8004c64 <USB_ReadInterrupts>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aee:	d104      	bne.n	8002afa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 f8b0 	bl	8004c64 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0e:	d104      	bne.n	8002b1a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 f8a0 	bl	8004c64 <USB_ReadInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d103      	bne.n	8002b36 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2202      	movs	r2, #2
 8002b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 f892 	bl	8004c64 <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4a:	d11c      	bne.n	8002b86 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b54:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b66:	2110      	movs	r1, #16
 8002b68:	6938      	ldr	r0, [r7, #16]
 8002b6a:	f001 ffa1 	bl	8004ab0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b6e:	6938      	ldr	r0, [r7, #16]
 8002b70:	f001 ffc2 	bl	8004af8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 f97a 	bl	8004e74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f008 fb6b 	bl	800b25c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 f86a 	bl	8004c64 <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9a:	d102      	bne.n	8002ba2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f001 fa03 	bl	8003fa8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 f85c 	bl	8004c64 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d106      	bne.n	8002bc4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f008 fb34 	bl	800b224 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f002 f84b 	bl	8004c64 <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d101      	bne.n	8002bdc <HAL_HCD_IRQHandler+0x158>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_HCD_IRQHandler+0x15a>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d012      	beq.n	8002c08 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f001 f906 	bl	8003e04 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0210 	orr.w	r2, r2, #16
 8002c06:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 f829 	bl	8004c64 <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c1c:	d13a      	bne.n	8002c94 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fc3c 	bl	80054a0 <USB_HC_ReadInterrupt>
 8002c28:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e025      	b.n	8002c7c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d018      	beq.n	8002c76 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5a:	d106      	bne.n	8002c6a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8ab 	bl	8002dbe <HCD_HC_IN_IRQHandler>
 8002c68:	e005      	b.n	8002c76 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fcc6 	bl	8003602 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d3d4      	bcc.n	8002c30 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8e:	615a      	str	r2, [r3, #20]
 8002c90:	e000      	b.n	8002c94 <HAL_HCD_IRQHandler+0x210>
      return;
 8002c92:	bf00      	nop
    }
  }
}
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_HCD_Start+0x16>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e013      	b.n	8002cd8 <HAL_HCD_Start+0x3e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 f93c 	bl	8004f3c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fe82 	bl	80049d2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_HCD_Stop+0x16>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e00d      	b.n	8002d12 <HAL_HCD_Stop+0x32>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fd36 	bl	8005774 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 f8de 	bl	8004ee8 <USB_ResetPort>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	781b      	ldrb	r3, [r3, #0]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3350      	adds	r3, #80	; 0x50
 8002d78:	681b      	ldr	r3, [r3, #0]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 f922 	bl	8004fdc <USB_GetCurrentFrame>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 f8fd 	bl	8004fae <USB_GetHostSpeed>
 8002db4:	4603      	mov	r3, r0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d119      	bne.n	8002e22 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	0151      	lsls	r1, r2, #5
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	440a      	add	r2, r1
 8002e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	60d3      	str	r3, [r2, #12]
 8002e20:	e101      	b.n	8003026 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e38:	d12b      	bne.n	8002e92 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3361      	adds	r3, #97	; 0x61
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	0151      	lsls	r1, r2, #5
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	440a      	add	r2, r1
 8002e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f002 fb19 	bl	80054c2 <USB_HC_Halt>
 8002e90:	e0c9      	b.n	8003026 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d109      	bne.n	8002ebc <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	6093      	str	r3, [r2, #8]
 8002eba:	e0b4      	b.n	8003026 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d133      	bne.n	8002f3a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	0151      	lsls	r1, r2, #5
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	440a      	add	r2, r1
 8002ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3361      	adds	r3, #97	; 0x61
 8002f00:	2205      	movs	r2, #5
 8002f02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	2310      	movs	r3, #16
 8002f14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	2308      	movs	r3, #8
 8002f26:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 fac5 	bl	80054c2 <USB_HC_Halt>
 8002f38:	e075      	b.n	8003026 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f50:	d134      	bne.n	8002fbc <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	0151      	lsls	r1, r2, #5
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	440a      	add	r2, r1
 8002f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3361      	adds	r3, #97	; 0x61
 8002f80:	2208      	movs	r2, #8
 8002f82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f90:	461a      	mov	r2, r3
 8002f92:	2310      	movs	r3, #16
 8002f94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f002 fa84 	bl	80054c2 <USB_HC_Halt>
 8002fba:	e034      	b.n	8003026 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d129      	bne.n	8003026 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	0151      	lsls	r1, r2, #5
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	440a      	add	r2, r1
 8002fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3361      	adds	r3, #97	; 0x61
 8003000:	2206      	movs	r2, #6
 8003002:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f002 fa57 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303c:	d122      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	0151      	lsls	r1, r2, #5
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	440a      	add	r2, r1
 8003054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f002 fa2a 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307a:	461a      	mov	r2, r3
 800307c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003080:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003082:	e2ba      	b.n	80035fa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 811b 	bne.w	80032d2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d019      	beq.n	80030d8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3348      	adds	r3, #72	; 0x48
 80030b2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	0159      	lsls	r1, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030c6:	1ad2      	subs	r2, r2, r3
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	202c      	movs	r0, #44	; 0x2c
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	440b      	add	r3, r1
 80030d4:	3350      	adds	r3, #80	; 0x50
 80030d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3361      	adds	r3, #97	; 0x61
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	335c      	adds	r3, #92	; 0x5c
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	461a      	mov	r2, r3
 800310a:	2301      	movs	r3, #1
 800310c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	333f      	adds	r3, #63	; 0x3f
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	333f      	adds	r3, #63	; 0x3f
 8003130:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003132:	2b02      	cmp	r3, #2
 8003134:	d121      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	0151      	lsls	r1, r2, #5
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	440a      	add	r2, r1
 800314c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f002 f9ae 	bl	80054c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	461a      	mov	r2, r3
 8003174:	2310      	movs	r3, #16
 8003176:	6093      	str	r3, [r2, #8]
 8003178:	e066      	b.n	8003248 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	333f      	adds	r3, #63	; 0x3f
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b03      	cmp	r3, #3
 800318c:	d127      	bne.n	80031de <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4413      	add	r3, r2
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	0151      	lsls	r1, r2, #5
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	440a      	add	r2, r1
 80031a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031ac:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3360      	adds	r3, #96	; 0x60
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	b2d9      	uxtb	r1, r3
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	202c      	movs	r0, #44	; 0x2c
 80031ca:	fb00 f303 	mul.w	r3, r0, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3360      	adds	r3, #96	; 0x60
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f008 f84e 	bl	800b278 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031dc:	e034      	b.n	8003248 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	333f      	adds	r3, #63	; 0x3f
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d12a      	bne.n	8003248 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3360      	adds	r3, #96	; 0x60
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3354      	adds	r3, #84	; 0x54
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	f083 0301 	eor.w	r3, r3, #1
 8003218:	b2d8      	uxtb	r0, r3
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3354      	adds	r3, #84	; 0x54
 8003228:	4602      	mov	r2, r0
 800322a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	b2d9      	uxtb	r1, r3
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	202c      	movs	r0, #44	; 0x2c
 8003236:	fb00 f303 	mul.w	r3, r0, r3
 800323a:	4413      	add	r3, r2
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f008 f818 	bl	800b278 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d12b      	bne.n	80032a8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	3348      	adds	r3, #72	; 0x48
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	202c      	movs	r0, #44	; 0x2c
 8003266:	fb00 f202 	mul.w	r2, r0, r2
 800326a:	440a      	add	r2, r1
 800326c:	3240      	adds	r2, #64	; 0x40
 800326e:	8812      	ldrh	r2, [r2, #0]
 8003270:	fbb3 f3f2 	udiv	r3, r3, r2
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 81be 	beq.w	80035fa <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3354      	adds	r3, #84	; 0x54
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	f083 0301 	eor.w	r3, r3, #1
 8003292:	b2d8      	uxtb	r0, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3354      	adds	r3, #84	; 0x54
 80032a2:	4602      	mov	r2, r0
 80032a4:	701a      	strb	r2, [r3, #0]
}
 80032a6:	e1a8      	b.n	80035fa <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3354      	adds	r3, #84	; 0x54
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2d8      	uxtb	r0, r3
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3354      	adds	r3, #84	; 0x54
 80032cc:	4602      	mov	r2, r0
 80032ce:	701a      	strb	r2, [r3, #0]
}
 80032d0:	e193      	b.n	80035fa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	f040 8106 	bne.w	80034f6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	0151      	lsls	r1, r2, #5
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	440a      	add	r2, r1
 8003300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003304:	f023 0302 	bic.w	r3, r3, #2
 8003308:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3361      	adds	r3, #97	; 0x61
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d109      	bne.n	8003332 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	3360      	adds	r3, #96	; 0x60
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e0c9      	b.n	80034c6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	3361      	adds	r3, #97	; 0x61
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b05      	cmp	r3, #5
 8003344:	d109      	bne.n	800335a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3360      	adds	r3, #96	; 0x60
 8003354:	2205      	movs	r2, #5
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e0b5      	b.n	80034c6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	3361      	adds	r3, #97	; 0x61
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b06      	cmp	r3, #6
 800336c:	d009      	beq.n	8003382 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3361      	adds	r3, #97	; 0x61
 800337c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800337e:	2b08      	cmp	r3, #8
 8003380:	d150      	bne.n	8003424 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	335c      	adds	r3, #92	; 0x5c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	202c      	movs	r0, #44	; 0x2c
 800339a:	fb00 f303 	mul.w	r3, r0, r3
 800339e:	440b      	add	r3, r1
 80033a0:	335c      	adds	r3, #92	; 0x5c
 80033a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	335c      	adds	r3, #92	; 0x5c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d912      	bls.n	80033de <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	335c      	adds	r3, #92	; 0x5c
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3360      	adds	r3, #96	; 0x60
 80033d8:	2204      	movs	r2, #4
 80033da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033dc:	e073      	b.n	80034c6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3360      	adds	r3, #96	; 0x60
 80033ec:	2202      	movs	r2, #2
 80033ee:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003406:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800340e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003422:	e050      	b.n	80034c6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	3361      	adds	r3, #97	; 0x61
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d122      	bne.n	800347e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	3360      	adds	r3, #96	; 0x60
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003460:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003468:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	461a      	mov	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e023      	b.n	80034c6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3361      	adds	r3, #97	; 0x61
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b07      	cmp	r3, #7
 8003490:	d119      	bne.n	80034c6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	335c      	adds	r3, #92	; 0x5c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	202c      	movs	r0, #44	; 0x2c
 80034aa:	fb00 f303 	mul.w	r3, r0, r3
 80034ae:	440b      	add	r3, r1
 80034b0:	335c      	adds	r3, #92	; 0x5c
 80034b2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3360      	adds	r3, #96	; 0x60
 80034c2:	2204      	movs	r2, #4
 80034c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d2:	461a      	mov	r2, r3
 80034d4:	2302      	movs	r3, #2
 80034d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	b2d9      	uxtb	r1, r3
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	202c      	movs	r0, #44	; 0x2c
 80034e2:	fb00 f303 	mul.w	r3, r0, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	3360      	adds	r3, #96	; 0x60
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f007 fec2 	bl	800b278 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034f4:	e081      	b.n	80035fa <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b10      	cmp	r3, #16
 800350a:	d176      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	333f      	adds	r3, #63	; 0x3f
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d121      	bne.n	8003564 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	335c      	adds	r3, #92	; 0x5c
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	0151      	lsls	r1, r2, #5
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	440a      	add	r2, r1
 8003548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f001 ffb0 	bl	80054c2 <USB_HC_Halt>
 8003562:	e041      	b.n	80035e8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	333f      	adds	r3, #63	; 0x3f
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	333f      	adds	r3, #63	; 0x3f
 8003586:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003588:	2b02      	cmp	r3, #2
 800358a:	d12d      	bne.n	80035e8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	335c      	adds	r3, #92	; 0x5c
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d120      	bne.n	80035e8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3361      	adds	r3, #97	; 0x61
 80035b4:	2203      	movs	r2, #3
 80035b6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 ff6d 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	461a      	mov	r2, r3
 80035f6:	2310      	movs	r3, #16
 80035f8:	6093      	str	r3, [r2, #8]
}
 80035fa:	bf00      	nop
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b088      	sub	sp, #32
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d119      	bne.n	8003666 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	461a      	mov	r2, r3
 8003640:	2304      	movs	r3, #4
 8003642:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	440a      	add	r2, r1
 800365a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800365e:	f043 0302 	orr.w	r3, r3, #2
 8003662:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003664:	e3ca      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b20      	cmp	r3, #32
 800367a:	d13e      	bne.n	80036fa <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	2320      	movs	r3, #32
 800368c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	333d      	adds	r3, #61	; 0x3d
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	f040 83ac 	bne.w	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	333d      	adds	r3, #61	; 0x3d
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	3360      	adds	r3, #96	; 0x60
 80036c4:	2202      	movs	r2, #2
 80036c6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	0151      	lsls	r1, r2, #5
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	440a      	add	r2, r1
 80036de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fee5 	bl	80054c2 <USB_HC_Halt>
}
 80036f8:	e380      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003710:	d122      	bne.n	8003758 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4413      	add	r3, r2
 800371a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	0151      	lsls	r1, r2, #5
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	440a      	add	r2, r1
 8003728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800372c:	f043 0302 	orr.w	r3, r3, #2
 8003730:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fec0 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374e:	461a      	mov	r2, r3
 8003750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003754:	6093      	str	r3, [r2, #8]
}
 8003756:	e351      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d150      	bne.n	8003810 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	335c      	adds	r3, #92	; 0x5c
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d111      	bne.n	80037ba <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	333d      	adds	r3, #61	; 0x3d
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	461a      	mov	r2, r3
 80037b6:	2340      	movs	r3, #64	; 0x40
 80037b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	0151      	lsls	r1, r2, #5
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	440a      	add	r2, r1
 80037d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fe6c 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	2301      	movs	r3, #1
 80037fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3361      	adds	r3, #97	; 0x61
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
}
 800380e:	e2f5      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d13c      	bne.n	80038a0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	3361      	adds	r3, #97	; 0x61
 8003834:	2204      	movs	r2, #4
 8003836:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	333d      	adds	r3, #61	; 0x3d
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	335c      	adds	r3, #92	; 0x5c
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	0151      	lsls	r1, r2, #5
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	440a      	add	r2, r1
 8003872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003876:	f043 0302 	orr.w	r3, r3, #2
 800387a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f001 fe1b 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003898:	461a      	mov	r2, r3
 800389a:	2340      	movs	r3, #64	; 0x40
 800389c:	6093      	str	r3, [r2, #8]
}
 800389e:	e2ad      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d12a      	bne.n	800390c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	461a      	mov	r2, r3
 80038c4:	2308      	movs	r3, #8
 80038c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fde5 	bl	80054c2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	212c      	movs	r1, #44	; 0x2c
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	3361      	adds	r3, #97	; 0x61
 8003906:	2205      	movs	r2, #5
 8003908:	701a      	strb	r2, [r3, #0]
}
 800390a:	e277      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b10      	cmp	r3, #16
 8003920:	d150      	bne.n	80039c4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	335c      	adds	r3, #92	; 0x5c
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3361      	adds	r3, #97	; 0x61
 8003942:	2203      	movs	r2, #3
 8003944:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	333d      	adds	r3, #61	; 0x3d
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d112      	bne.n	8003980 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	212c      	movs	r1, #44	; 0x2c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	333c      	adds	r3, #60	; 0x3c
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	212c      	movs	r1, #44	; 0x2c
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	333d      	adds	r3, #61	; 0x3d
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	0151      	lsls	r1, r2, #5
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	440a      	add	r2, r1
 8003996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800399a:	f043 0302 	orr.w	r3, r3, #2
 800399e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 fd89 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039bc:	461a      	mov	r2, r3
 80039be:	2310      	movs	r3, #16
 80039c0:	6093      	str	r3, [r2, #8]
}
 80039c2:	e21b      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b80      	cmp	r3, #128	; 0x80
 80039d8:	d174      	bne.n	8003ac4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d121      	bne.n	8003a26 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	3361      	adds	r3, #97	; 0x61
 80039f0:	2206      	movs	r2, #6
 80039f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fd4f 	bl	80054c2 <USB_HC_Halt>
 8003a24:	e044      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	335c      	adds	r3, #92	; 0x5c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	202c      	movs	r0, #44	; 0x2c
 8003a3e:	fb00 f303 	mul.w	r3, r0, r3
 8003a42:	440b      	add	r3, r1
 8003a44:	335c      	adds	r3, #92	; 0x5c
 8003a46:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	212c      	movs	r1, #44	; 0x2c
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	335c      	adds	r3, #92	; 0x5c
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d920      	bls.n	8003a9e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	335c      	adds	r3, #92	; 0x5c
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	3360      	adds	r3, #96	; 0x60
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	b2d9      	uxtb	r1, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	202c      	movs	r0, #44	; 0x2c
 8003a8a:	fb00 f303 	mul.w	r3, r0, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3360      	adds	r3, #96	; 0x60
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f007 fbee 	bl	800b278 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a9c:	e008      	b.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	212c      	movs	r1, #44	; 0x2c
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3360      	adds	r3, #96	; 0x60
 8003aac:	2202      	movs	r2, #2
 8003aae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	461a      	mov	r2, r3
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	6093      	str	r3, [r2, #8]
}
 8003ac2:	e19b      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d134      	bne.n	8003b46 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 fcdb 	bl	80054c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3361      	adds	r3, #97	; 0x61
 8003b40:	2208      	movs	r2, #8
 8003b42:	701a      	strb	r2, [r3, #0]
}
 8003b44:	e15a      	b.n	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	f040 814f 	bne.w	8003dfc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	0151      	lsls	r1, r2, #5
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	440a      	add	r2, r1
 8003b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b78:	f023 0302 	bic.w	r3, r3, #2
 8003b7c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3361      	adds	r3, #97	; 0x61
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d17d      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3360      	adds	r3, #96	; 0x60
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	333f      	adds	r3, #63	; 0x3f
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d00a      	beq.n	8003bce <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	333f      	adds	r3, #63	; 0x3f
 8003bc6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	f040 8100 	bne.w	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d113      	bne.n	8003bfe <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	212c      	movs	r1, #44	; 0x2c
 8003bdc:	fb01 f303 	mul.w	r3, r1, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	3355      	adds	r3, #85	; 0x55
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2d8      	uxtb	r0, r3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3355      	adds	r3, #85	; 0x55
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	f040 80e3 	bne.w	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	334c      	adds	r3, #76	; 0x4c
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80d8 	beq.w	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	334c      	adds	r3, #76	; 0x4c
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	202c      	movs	r0, #44	; 0x2c
 8003c34:	fb00 f202 	mul.w	r2, r0, r2
 8003c38:	440a      	add	r2, r1
 8003c3a:	3240      	adds	r2, #64	; 0x40
 8003c3c:	8812      	ldrh	r2, [r2, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	3b01      	subs	r3, #1
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	202c      	movs	r0, #44	; 0x2c
 8003c48:	fb00 f202 	mul.w	r2, r0, r2
 8003c4c:	440a      	add	r2, r1
 8003c4e:	3240      	adds	r2, #64	; 0x40
 8003c50:	8812      	ldrh	r2, [r2, #0]
 8003c52:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80b5 	beq.w	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3355      	adds	r3, #85	; 0x55
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f083 0301 	eor.w	r3, r3, #1
 8003c78:	b2d8      	uxtb	r0, r3
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	3355      	adds	r3, #85	; 0x55
 8003c88:	4602      	mov	r2, r0
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e09f      	b.n	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	212c      	movs	r1, #44	; 0x2c
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3361      	adds	r3, #97	; 0x61
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d109      	bne.n	8003cb6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	3360      	adds	r3, #96	; 0x60
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	e08b      	b.n	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3361      	adds	r3, #97	; 0x61
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d109      	bne.n	8003cde <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3360      	adds	r3, #96	; 0x60
 8003cd8:	2202      	movs	r2, #2
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e077      	b.n	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	3361      	adds	r3, #97	; 0x61
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b05      	cmp	r3, #5
 8003cf0:	d109      	bne.n	8003d06 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3360      	adds	r3, #96	; 0x60
 8003d00:	2205      	movs	r2, #5
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e063      	b.n	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	3361      	adds	r3, #97	; 0x61
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d009      	beq.n	8003d2e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3361      	adds	r3, #97	; 0x61
 8003d28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d14f      	bne.n	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	335c      	adds	r3, #92	; 0x5c
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	202c      	movs	r0, #44	; 0x2c
 8003d46:	fb00 f303 	mul.w	r3, r0, r3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	335c      	adds	r3, #92	; 0x5c
 8003d4e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	335c      	adds	r3, #92	; 0x5c
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d912      	bls.n	8003d8a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	335c      	adds	r3, #92	; 0x5c
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3360      	adds	r3, #96	; 0x60
 8003d84:	2204      	movs	r2, #4
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e021      	b.n	8003dce <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3360      	adds	r3, #96	; 0x60
 8003d98:	2202      	movs	r2, #2
 8003d9a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003db2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dba:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc8:	461a      	mov	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2302      	movs	r3, #2
 8003dde:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	b2d9      	uxtb	r1, r3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	202c      	movs	r0, #44	; 0x2c
 8003dea:	fb00 f303 	mul.w	r3, r0, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	3360      	adds	r3, #96	; 0x60
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f007 fa3e 	bl	800b278 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003dfc:	bf00      	nop
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	0c5b      	lsrs	r3, r3, #17
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e38:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d004      	beq.n	8003e4a <HCD_RXQLVL_IRQHandler+0x46>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	f000 80a9 	beq.w	8003f9a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e48:	e0aa      	b.n	8003fa0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a6 	beq.w	8003f9e <HCD_RXQLVL_IRQHandler+0x19a>
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3344      	adds	r3, #68	; 0x44
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 809b 	beq.w	8003f9e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	3350      	adds	r3, #80	; 0x50
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	441a      	add	r2, r3
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	202c      	movs	r0, #44	; 0x2c
 8003e82:	fb00 f303 	mul.w	r3, r0, r3
 8003e86:	440b      	add	r3, r1
 8003e88:	334c      	adds	r3, #76	; 0x4c
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d87a      	bhi.n	8003f86 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3344      	adds	r3, #68	; 0x44
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f000 fe83 	bl	8004bb4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3344      	adds	r3, #68	; 0x44
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	441a      	add	r2, r3
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	202c      	movs	r0, #44	; 0x2c
 8003ec8:	fb00 f303 	mul.w	r3, r0, r3
 8003ecc:	440b      	add	r3, r1
 8003ece:	3344      	adds	r3, #68	; 0x44
 8003ed0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	3350      	adds	r3, #80	; 0x50
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	202c      	movs	r0, #44	; 0x2c
 8003eec:	fb00 f303 	mul.w	r3, r0, r3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3350      	adds	r3, #80	; 0x50
 8003ef4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	0cdb      	lsrs	r3, r3, #19
 8003f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3340      	adds	r3, #64	; 0x40
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d13c      	bne.n	8003f9e <HCD_RXQLVL_IRQHandler+0x19a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d039      	beq.n	8003f9e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f40:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f48:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f56:	461a      	mov	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	3354      	adds	r3, #84	; 0x54
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f083 0301 	eor.w	r3, r3, #1
 8003f70:	b2d8      	uxtb	r0, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	212c      	movs	r1, #44	; 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3354      	adds	r3, #84	; 0x54
 8003f80:	4602      	mov	r2, r0
 8003f82:	701a      	strb	r2, [r3, #0]
      break;
 8003f84:	e00b      	b.n	8003f9e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	212c      	movs	r1, #44	; 0x2c
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	3360      	adds	r3, #96	; 0x60
 8003f94:	2204      	movs	r2, #4
 8003f96:	701a      	strb	r2, [r3, #0]
      break;
 8003f98:	e001      	b.n	8003f9e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f9e:	bf00      	nop
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	3728      	adds	r7, #40	; 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fd4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d10b      	bne.n	8003ff8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f007 f928 	bl	800b240 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d132      	bne.n	8004068 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d126      	bne.n	8004062 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d113      	bne.n	8004044 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004026:	d106      	bne.n	8004036 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 ff20 	bl	8004e74 <USB_InitFSLSPClkSel>
 8004034:	e011      	b.n	800405a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f000 ff19 	bl	8004e74 <USB_InitFSLSPClkSel>
 8004042:	e00a      	b.n	800405a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d106      	bne.n	800405a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004052:	461a      	mov	r2, r3
 8004054:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004058:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f007 f91a 	bl	800b294 <HAL_HCD_PortEnabled_Callback>
 8004060:	e002      	b.n	8004068 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f007 f924 	bl	800b2b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b20      	cmp	r3, #32
 8004070:	d103      	bne.n	800407a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f043 0320 	orr.w	r3, r3, #32
 8004078:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6013      	str	r3, [r2, #0]
}
 8004086:	bf00      	nop
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e264      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d075      	beq.n	800419a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ae:	4ba3      	ldr	r3, [pc, #652]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d00c      	beq.n	80040d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ba:	4ba0      	ldr	r3, [pc, #640]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d112      	bne.n	80040ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c6:	4b9d      	ldr	r3, [pc, #628]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d2:	d10b      	bne.n	80040ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	4b99      	ldr	r3, [pc, #612]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05b      	beq.n	8004198 <HAL_RCC_OscConfig+0x108>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d157      	bne.n	8004198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e23f      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d106      	bne.n	8004104 <HAL_RCC_OscConfig+0x74>
 80040f6:	4b91      	ldr	r3, [pc, #580]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a90      	ldr	r2, [pc, #576]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e01d      	b.n	8004140 <HAL_RCC_OscConfig+0xb0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x98>
 800410e:	4b8b      	ldr	r3, [pc, #556]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a8a      	ldr	r2, [pc, #552]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4b88      	ldr	r3, [pc, #544]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a87      	ldr	r2, [pc, #540]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0xb0>
 8004128:	4b84      	ldr	r3, [pc, #528]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a83      	ldr	r2, [pc, #524]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b81      	ldr	r3, [pc, #516]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a80      	ldr	r2, [pc, #512]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800413a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fd ff22 	bl	8001f90 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004150:	f7fd ff1e 	bl	8001f90 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e204      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b76      	ldr	r3, [pc, #472]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0xc0>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fd ff0e 	bl	8001f90 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004178:	f7fd ff0a 	bl	8001f90 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1f0      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	4b6c      	ldr	r3, [pc, #432]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0xe8>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d063      	beq.n	800426e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a6:	4b65      	ldr	r3, [pc, #404]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b2:	4b62      	ldr	r3, [pc, #392]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d11c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041be:	4b5f      	ldr	r3, [pc, #380]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d116      	bne.n	80041f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ca:	4b5c      	ldr	r3, [pc, #368]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_RCC_OscConfig+0x152>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e1c4      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b56      	ldr	r3, [pc, #344]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4952      	ldr	r1, [pc, #328]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f6:	e03a      	b.n	800426e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004200:	4b4f      	ldr	r3, [pc, #316]	; (8004340 <HAL_RCC_OscConfig+0x2b0>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fd fec3 	bl	8001f90 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800420e:	f7fd febf 	bl	8001f90 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e1a5      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	4b46      	ldr	r3, [pc, #280]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b43      	ldr	r3, [pc, #268]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4940      	ldr	r1, [pc, #256]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004242:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <HAL_RCC_OscConfig+0x2b0>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd fea2 	bl	8001f90 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004250:	f7fd fe9e 	bl	8001f90 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e184      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	4b36      	ldr	r3, [pc, #216]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d030      	beq.n	80042dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004282:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_RCC_OscConfig+0x2b4>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd fe82 	bl	8001f90 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004290:	f7fd fe7e 	bl	8001f90 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e164      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	4b26      	ldr	r3, [pc, #152]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x200>
 80042ae:	e015      	b.n	80042dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b0:	4b24      	ldr	r3, [pc, #144]	; (8004344 <HAL_RCC_OscConfig+0x2b4>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b6:	f7fd fe6b 	bl	8001f90 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042be:	f7fd fe67 	bl	8001f90 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e14d      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80042d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f0      	bne.n	80042be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a0 	beq.w	800442a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a0e      	ldr	r2, [pc, #56]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <HAL_RCC_OscConfig+0x2ac>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_OscConfig+0x2b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d121      	bne.n	800436a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <HAL_RCC_OscConfig+0x2b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a07      	ldr	r2, [pc, #28]	; (8004348 <HAL_RCC_OscConfig+0x2b8>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004332:	f7fd fe2d 	bl	8001f90 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	e011      	b.n	800435e <HAL_RCC_OscConfig+0x2ce>
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800
 8004340:	42470000 	.word	0x42470000
 8004344:	42470e80 	.word	0x42470e80
 8004348:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434c:	f7fd fe20 	bl	8001f90 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e106      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	4b85      	ldr	r3, [pc, #532]	; (8004574 <HAL_RCC_OscConfig+0x4e4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d106      	bne.n	8004380 <HAL_RCC_OscConfig+0x2f0>
 8004372:	4b81      	ldr	r3, [pc, #516]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4a80      	ldr	r2, [pc, #512]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6713      	str	r3, [r2, #112]	; 0x70
 800437e:	e01c      	b.n	80043ba <HAL_RCC_OscConfig+0x32a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b05      	cmp	r3, #5
 8004386:	d10c      	bne.n	80043a2 <HAL_RCC_OscConfig+0x312>
 8004388:	4b7b      	ldr	r3, [pc, #492]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a7a      	ldr	r2, [pc, #488]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 800438e:	f043 0304 	orr.w	r3, r3, #4
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
 8004394:	4b78      	ldr	r3, [pc, #480]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	4a77      	ldr	r2, [pc, #476]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6713      	str	r3, [r2, #112]	; 0x70
 80043a0:	e00b      	b.n	80043ba <HAL_RCC_OscConfig+0x32a>
 80043a2:	4b75      	ldr	r3, [pc, #468]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a74      	ldr	r2, [pc, #464]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	4b72      	ldr	r3, [pc, #456]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a71      	ldr	r2, [pc, #452]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	f023 0304 	bic.w	r3, r3, #4
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d015      	beq.n	80043ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c2:	f7fd fde5 	bl	8001f90 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd fde1 	bl	8001f90 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0c5      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	4b65      	ldr	r3, [pc, #404]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ee      	beq.n	80043ca <HAL_RCC_OscConfig+0x33a>
 80043ec:	e014      	b.n	8004418 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ee:	f7fd fdcf 	bl	8001f90 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f4:	e00a      	b.n	800440c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f6:	f7fd fdcb 	bl	8001f90 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f241 3288 	movw	r2, #5000	; 0x1388
 8004404:	4293      	cmp	r3, r2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e0af      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440c:	4b5a      	ldr	r3, [pc, #360]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ee      	bne.n	80043f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d105      	bne.n	800442a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800441e:	4b56      	ldr	r3, [pc, #344]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4a55      	ldr	r2, [pc, #340]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 8004424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 809b 	beq.w	800456a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004434:	4b50      	ldr	r3, [pc, #320]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d05c      	beq.n	80044fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d141      	bne.n	80044cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004448:	4b4c      	ldr	r3, [pc, #304]	; (800457c <HAL_RCC_OscConfig+0x4ec>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fd fd9f 	bl	8001f90 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004456:	f7fd fd9b 	bl	8001f90 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e081      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004468:	4b43      	ldr	r3, [pc, #268]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	019b      	lsls	r3, r3, #6
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	3b01      	subs	r3, #1
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	061b      	lsls	r3, r3, #24
 8004498:	4937      	ldr	r1, [pc, #220]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800449e:	4b37      	ldr	r3, [pc, #220]	; (800457c <HAL_RCC_OscConfig+0x4ec>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fd fd74 	bl	8001f90 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fd fd70 	bl	8001f90 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e056      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	4b2e      	ldr	r3, [pc, #184]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x41c>
 80044ca:	e04e      	b.n	800456a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044cc:	4b2b      	ldr	r3, [pc, #172]	; (800457c <HAL_RCC_OscConfig+0x4ec>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d2:	f7fd fd5d 	bl	8001f90 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044da:	f7fd fd59 	bl	8001f90 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e03f      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ec:	4b22      	ldr	r3, [pc, #136]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x44a>
 80044f8:	e037      	b.n	800456a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e032      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <HAL_RCC_OscConfig+0x4e8>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d028      	beq.n	8004566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d121      	bne.n	8004566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d11a      	bne.n	8004566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004536:	4013      	ands	r3, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800453c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800453e:	4293      	cmp	r3, r2
 8004540:	d111      	bne.n	8004566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	3b01      	subs	r3, #1
 8004550:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d107      	bne.n	8004566 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40007000 	.word	0x40007000
 8004578:	40023800 	.word	0x40023800
 800457c:	42470060 	.word	0x42470060

08004580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0cc      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b68      	ldr	r3, [pc, #416]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d90c      	bls.n	80045bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b65      	ldr	r3, [pc, #404]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b63      	ldr	r3, [pc, #396]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0b8      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d020      	beq.n	800460a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d4:	4b59      	ldr	r3, [pc, #356]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a58      	ldr	r2, [pc, #352]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ec:	4b53      	ldr	r3, [pc, #332]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	4a52      	ldr	r2, [pc, #328]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f8:	4b50      	ldr	r3, [pc, #320]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	494d      	ldr	r1, [pc, #308]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d044      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	4b47      	ldr	r3, [pc, #284]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d119      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e07f      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d003      	beq.n	800463e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463a:	2b03      	cmp	r3, #3
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463e:	4b3f      	ldr	r3, [pc, #252]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e06f      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	4b3b      	ldr	r3, [pc, #236]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e067      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465e:	4b37      	ldr	r3, [pc, #220]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4934      	ldr	r1, [pc, #208]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	4313      	orrs	r3, r2
 800466e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004670:	f7fd fc8e 	bl	8001f90 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fd fc8a 	bl	8001f90 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e04f      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b2b      	ldr	r3, [pc, #172]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 020c 	and.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1eb      	bne.n	8004678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a0:	4b25      	ldr	r3, [pc, #148]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d20c      	bcs.n	80046c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b22      	ldr	r3, [pc, #136]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e032      	b.n	800472e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d4:	4b19      	ldr	r3, [pc, #100]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4916      	ldr	r1, [pc, #88]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	490e      	ldr	r1, [pc, #56]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004706:	f000 f821 	bl	800474c <HAL_RCC_GetSysClockFreq>
 800470a:	4602      	mov	r2, r0
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	490a      	ldr	r1, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 8004718:	5ccb      	ldrb	r3, [r1, r3]
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a09      	ldr	r2, [pc, #36]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd fbee 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023c00 	.word	0x40023c00
 800473c:	40023800 	.word	0x40023800
 8004740:	0800d550 	.word	0x0800d550
 8004744:	20000000 	.word	0x20000000
 8004748:	20000004 	.word	0x20000004

0800474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	2300      	movs	r3, #0
 800475e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004764:	4b67      	ldr	r3, [pc, #412]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d00d      	beq.n	800478c <HAL_RCC_GetSysClockFreq+0x40>
 8004770:	2b08      	cmp	r3, #8
 8004772:	f200 80bd 	bhi.w	80048f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x34>
 800477a:	2b04      	cmp	r3, #4
 800477c:	d003      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x3a>
 800477e:	e0b7      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004780:	4b61      	ldr	r3, [pc, #388]	; (8004908 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004782:	60bb      	str	r3, [r7, #8]
       break;
 8004784:	e0b7      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004786:	4b61      	ldr	r3, [pc, #388]	; (800490c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004788:	60bb      	str	r3, [r7, #8]
      break;
 800478a:	e0b4      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800478c:	4b5d      	ldr	r3, [pc, #372]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004794:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004796:	4b5b      	ldr	r3, [pc, #364]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d04d      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a2:	4b58      	ldr	r3, [pc, #352]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	099b      	lsrs	r3, r3, #6
 80047a8:	461a      	mov	r2, r3
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	ea02 0800 	and.w	r8, r2, r0
 80047ba:	ea03 0901 	and.w	r9, r3, r1
 80047be:	4640      	mov	r0, r8
 80047c0:	4649      	mov	r1, r9
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	014b      	lsls	r3, r1, #5
 80047cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047d0:	0142      	lsls	r2, r0, #5
 80047d2:	4610      	mov	r0, r2
 80047d4:	4619      	mov	r1, r3
 80047d6:	ebb0 0008 	subs.w	r0, r0, r8
 80047da:	eb61 0109 	sbc.w	r1, r1, r9
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	018b      	lsls	r3, r1, #6
 80047e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047ec:	0182      	lsls	r2, r0, #6
 80047ee:	1a12      	subs	r2, r2, r0
 80047f0:	eb63 0301 	sbc.w	r3, r3, r1
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	00d9      	lsls	r1, r3, #3
 80047fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004802:	00d0      	lsls	r0, r2, #3
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	eb12 0208 	adds.w	r2, r2, r8
 800480c:	eb43 0309 	adc.w	r3, r3, r9
 8004810:	f04f 0000 	mov.w	r0, #0
 8004814:	f04f 0100 	mov.w	r1, #0
 8004818:	0259      	lsls	r1, r3, #9
 800481a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800481e:	0250      	lsls	r0, r2, #9
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	461a      	mov	r2, r3
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	f7fc f85c 	bl	80008ec <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e04a      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483e:	4b31      	ldr	r3, [pc, #196]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	461a      	mov	r2, r3
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	ea02 0400 	and.w	r4, r2, r0
 8004856:	ea03 0501 	and.w	r5, r3, r1
 800485a:	4620      	mov	r0, r4
 800485c:	4629      	mov	r1, r5
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	014b      	lsls	r3, r1, #5
 8004868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800486c:	0142      	lsls	r2, r0, #5
 800486e:	4610      	mov	r0, r2
 8004870:	4619      	mov	r1, r3
 8004872:	1b00      	subs	r0, r0, r4
 8004874:	eb61 0105 	sbc.w	r1, r1, r5
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	018b      	lsls	r3, r1, #6
 8004882:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004886:	0182      	lsls	r2, r0, #6
 8004888:	1a12      	subs	r2, r2, r0
 800488a:	eb63 0301 	sbc.w	r3, r3, r1
 800488e:	f04f 0000 	mov.w	r0, #0
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	00d9      	lsls	r1, r3, #3
 8004898:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800489c:	00d0      	lsls	r0, r2, #3
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	1912      	adds	r2, r2, r4
 80048a4:	eb45 0303 	adc.w	r3, r5, r3
 80048a8:	f04f 0000 	mov.w	r0, #0
 80048ac:	f04f 0100 	mov.w	r1, #0
 80048b0:	0299      	lsls	r1, r3, #10
 80048b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048b6:	0290      	lsls	r0, r2, #10
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	f7fc f810 	bl	80008ec <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	3301      	adds	r3, #1
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	60bb      	str	r3, [r7, #8]
      break;
 80048ee:	e002      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048f2:	60bb      	str	r3, [r7, #8]
      break;
 80048f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f6:	68bb      	ldr	r3, [r7, #8]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	00f42400 	.word	0x00f42400
 800490c:	007a1200 	.word	0x007a1200

08004910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004910:	b084      	sub	sp, #16
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	f107 001c 	add.w	r0, r7, #28
 800491e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	2b01      	cmp	r3, #1
 8004926:	d122      	bne.n	800496e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800493c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d105      	bne.n	8004962 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9a0 	bl	8004ca8 <USB_CoreReset>
 8004968:	4603      	mov	r3, r0
 800496a:	73fb      	strb	r3, [r7, #15]
 800496c:	e01a      	b.n	80049a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f994 	bl	8004ca8 <USB_CoreReset>
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
 8004996:	e005      	b.n	80049a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10b      	bne.n	80049c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f043 0206 	orr.w	r2, r3, #6
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049ce:	b004      	add	sp, #16
 80049d0:	4770      	bx	lr

080049d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f043 0201 	orr.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 0201 	bic.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d115      	bne.n	8004a64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a44:	2001      	movs	r0, #1
 8004a46:	f7fd faaf 	bl	8001fa8 <HAL_Delay>
      ms++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f91a 	bl	8004c8a <USB_GetMode>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d01e      	beq.n	8004a9a <USB_SetCurrentMode+0x84>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b31      	cmp	r3, #49	; 0x31
 8004a60:	d9f0      	bls.n	8004a44 <USB_SetCurrentMode+0x2e>
 8004a62:	e01a      	b.n	8004a9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d115      	bne.n	8004a96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a76:	2001      	movs	r0, #1
 8004a78:	f7fd fa96 	bl	8001fa8 <HAL_Delay>
      ms++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f901 	bl	8004c8a <USB_GetMode>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <USB_SetCurrentMode+0x84>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b31      	cmp	r3, #49	; 0x31
 8004a92:	d9f0      	bls.n	8004a76 <USB_SetCurrentMode+0x60>
 8004a94:	e001      	b.n	8004a9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e005      	b.n	8004aa6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b32      	cmp	r3, #50	; 0x32
 8004a9e:	d101      	bne.n	8004aa4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	019b      	lsls	r3, r3, #6
 8004ac2:	f043 0220 	orr.w	r2, r3, #32
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3301      	adds	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <USB_FlushTxFifo+0x44>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e006      	b.n	8004ae8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d0f1      	beq.n	8004aca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	00030d40 	.word	0x00030d40

08004af8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2210      	movs	r2, #16
 8004b08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <USB_FlushRxFifo+0x3c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e006      	b.n	8004b28 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b10      	cmp	r3, #16
 8004b24:	d0f1      	beq.n	8004b0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	00030d40 	.word	0x00030d40

08004b38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	; 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4611      	mov	r1, r2
 8004b44:	461a      	mov	r2, r3
 8004b46:	460b      	mov	r3, r1
 8004b48:	71fb      	strb	r3, [r7, #7]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004b56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d123      	bne.n	8004ba6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b5e:	88bb      	ldrh	r3, [r7, #4]
 8004b60:	3303      	adds	r3, #3
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e018      	b.n	8004b9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	031a      	lsls	r2, r3, #12
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b78:	461a      	mov	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	3301      	adds	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3301      	adds	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d3e2      	bcc.n	8004b6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3724      	adds	r7, #36	; 0x24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b08b      	sub	sp, #44	; 0x2c
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004bda:	2300      	movs	r3, #0
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	e014      	b.n	8004c0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	601a      	str	r2, [r3, #0]
    pDest++;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	3301      	adds	r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	3301      	adds	r3, #1
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	3301      	adds	r3, #1
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	6a3a      	ldr	r2, [r7, #32]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d3e6      	bcc.n	8004be0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c12:	8bfb      	ldrh	r3, [r7, #30]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01e      	beq.n	8004c56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c22:	461a      	mov	r2, r3
 8004c24:	f107 0310 	add.w	r3, r7, #16
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	701a      	strb	r2, [r3, #0]
      i++;
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	3301      	adds	r3, #1
 8004c42:	623b      	str	r3, [r7, #32]
      pDest++;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	3301      	adds	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004c4a:	8bfb      	ldrh	r3, [r7, #30]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004c50:	8bfb      	ldrh	r3, [r7, #30]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ea      	bne.n	8004c2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	372c      	adds	r7, #44	; 0x2c
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0301 	and.w	r3, r3, #1
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <USB_CoreReset+0x60>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e01a      	b.n	8004cfa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	daf3      	bge.n	8004cb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f043 0201 	orr.w	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	4a09      	ldr	r2, [pc, #36]	; (8004d08 <USB_CoreReset+0x60>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e006      	b.n	8004cfa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d0f1      	beq.n	8004cdc <USB_CoreReset+0x34>

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	00030d40 	.word	0x00030d40

08004d0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	f107 001c 	add.w	r0, r7, #28
 8004d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d10a      	bne.n	8004d7a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d72:	f043 0304 	orr.w	r3, r3, #4
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e014      	b.n	8004da4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e009      	b.n	8004da4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d9e:	f023 0304 	bic.w	r3, r3, #4
 8004da2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004da4:	2110      	movs	r1, #16
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff fe82 	bl	8004ab0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fea3 	bl	8004af8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	e015      	b.n	8004de4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3301      	adds	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d3e5      	bcc.n	8004db8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295
 8004df8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <USB_HostInit+0x154>)
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a13      	ldr	r2, [pc, #76]	; (8004e64 <USB_HostInit+0x158>)
 8004e18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004e1c:	e009      	b.n	8004e32 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <USB_HostInit+0x15c>)
 8004e28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <USB_HostInit+0x160>)
 8004e2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f043 0210 	orr.w	r2, r3, #16
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <USB_HostInit+0x164>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e5c:	b004      	add	sp, #16
 8004e5e:	4770      	bx	lr
 8004e60:	01000200 	.word	0x01000200
 8004e64:	00e00300 	.word	0x00e00300
 8004e68:	00600080 	.word	0x00600080
 8004e6c:	004000e0 	.word	0x004000e0
 8004e70:	a3200008 	.word	0xa3200008

08004e74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ec2:	6053      	str	r3, [r2, #4]
 8004ec4:	e009      	b.n	8004eda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d106      	bne.n	8004eda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ed8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004f18:	2064      	movs	r0, #100	; 0x64
 8004f1a:	f7fd f845 	bl	8001fa8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004f2c:	200a      	movs	r0, #10
 8004f2e:	f7fd f83b 	bl	8001fa8 <HAL_Delay>

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <USB_DriveVbus+0x44>
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d106      	bne.n	8004f80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8a:	d109      	bne.n	8004fa0 <USB_DriveVbus+0x64>
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	0c5b      	lsrs	r3, r3, #17
 8004fcc:	f003 0303 	and.w	r3, r3, #3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	b29b      	uxth	r3, r3
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	4608      	mov	r0, r1
 800500a:	4611      	mov	r1, r2
 800500c:	461a      	mov	r2, r3
 800500e:	4603      	mov	r3, r0
 8005010:	70fb      	strb	r3, [r7, #3]
 8005012:	460b      	mov	r3, r1
 8005014:	70bb      	strb	r3, [r7, #2]
 8005016:	4613      	mov	r3, r2
 8005018:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502e:	461a      	mov	r2, r3
 8005030:	f04f 33ff 	mov.w	r3, #4294967295
 8005034:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005036:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800503a:	2b03      	cmp	r3, #3
 800503c:	d87e      	bhi.n	800513c <USB_HC_Init+0x13c>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <USB_HC_Init+0x44>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005055 	.word	0x08005055
 8005048:	080050ff 	.word	0x080050ff
 800504c:	08005055 	.word	0x08005055
 8005050:	080050c1 	.word	0x080050c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005060:	461a      	mov	r2, r3
 8005062:	f240 439d 	movw	r3, #1181	; 0x49d
 8005066:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800506c:	2b00      	cmp	r3, #0
 800506e:	da10      	bge.n	8005092 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	440a      	add	r2, r1
 8005086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800508a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005090:	e057      	b.n	8005142 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d051      	beq.n	8005142 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050bc:	60d3      	str	r3, [r2, #12]
      break;
 80050be:	e040      	b.n	8005142 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050cc:	461a      	mov	r2, r3
 80050ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80050d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80050d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	da34      	bge.n	8005146 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80050fc:	e023      	b.n	8005146 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	461a      	mov	r2, r3
 800510c:	f240 2325 	movw	r3, #549	; 0x225
 8005110:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005112:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005116:	2b00      	cmp	r3, #0
 8005118:	da17      	bge.n	800514a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	440a      	add	r2, r1
 8005130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005134:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005138:	60d3      	str	r3, [r2, #12]
      }
      break;
 800513a:	e006      	b.n	800514a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	77fb      	strb	r3, [r7, #31]
      break;
 8005140:	e004      	b.n	800514c <USB_HC_Init+0x14c>
      break;
 8005142:	bf00      	nop
 8005144:	e002      	b.n	800514c <USB_HC_Init+0x14c>
      break;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <USB_HC_Init+0x14c>
      break;
 800514a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005152:	699a      	ldr	r2, [r3, #24]
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	2101      	movs	r1, #1
 800515c:	fa01 f303 	lsl.w	r3, r1, r3
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005166:	4313      	orrs	r3, r2
 8005168:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005176:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800517a:	2b00      	cmp	r3, #0
 800517c:	da03      	bge.n	8005186 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800517e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	e001      	b.n	800518a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff ff0f 	bl	8004fae <USB_GetHostSpeed>
 8005190:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005192:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005196:	2b02      	cmp	r3, #2
 8005198:	d106      	bne.n	80051a8 <USB_HC_Init+0x1a8>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d003      	beq.n	80051a8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80051a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e001      	b.n	80051ac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80051ac:	787b      	ldrb	r3, [r7, #1]
 80051ae:	059b      	lsls	r3, r3, #22
 80051b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80051b4:	78bb      	ldrb	r3, [r7, #2]
 80051b6:	02db      	lsls	r3, r3, #11
 80051b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80051bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80051be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051c2:	049b      	lsls	r3, r3, #18
 80051c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80051c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80051ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80051cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80051d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	0159      	lsls	r1, r3, #5
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	440b      	add	r3, r1
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80051e8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80051ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d10f      	bne.n	8005212 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	440a      	add	r2, r1
 8005208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005210:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005212:	7ffb      	ldrb	r3, [r7, #31]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3720      	adds	r7, #32
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	; 0x30
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005238:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d02d      	beq.n	80052a2 <USB_HC_StartXfer+0x86>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	791b      	ldrb	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d129      	bne.n	80052a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d117      	bne.n	8005284 <USB_HC_StartXfer+0x68>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	79db      	ldrb	r3, [r3, #7]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <USB_HC_StartXfer+0x48>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	79db      	ldrb	r3, [r3, #7]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d10f      	bne.n	8005284 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	6a3a      	ldr	r2, [r7, #32]
 8005278:	440a      	add	r2, r1
 800527a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <USB_HC_StartXfer+0x86>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	795b      	ldrb	r3, [r3, #5]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d107      	bne.n	80052a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	4619      	mov	r1, r3
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fa2f 	bl	80056fc <USB_DoPing>
      return HAL_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	e0f8      	b.n	8005494 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d018      	beq.n	80052dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	8912      	ldrh	r2, [r2, #8]
 80052b2:	4413      	add	r3, r2
 80052b4:	3b01      	subs	r3, #1
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	8912      	ldrh	r2, [r2, #8]
 80052ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80052be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80052c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80052c2:	8b7b      	ldrh	r3, [r7, #26]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d90b      	bls.n	80052e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80052c8:	8b7b      	ldrh	r3, [r7, #26]
 80052ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80052cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	8912      	ldrh	r2, [r2, #8]
 80052d2:	fb02 f203 	mul.w	r2, r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	611a      	str	r2, [r3, #16]
 80052da:	e001      	b.n	80052e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80052dc:	2301      	movs	r3, #1
 80052de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	78db      	ldrb	r3, [r3, #3]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80052e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	8912      	ldrh	r2, [r2, #8]
 80052ee:	fb02 f203 	mul.w	r2, r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	611a      	str	r2, [r3, #16]
 80052f6:	e003      	b.n	8005300 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800530a:	04d9      	lsls	r1, r3, #19
 800530c:	4b63      	ldr	r3, [pc, #396]	; (800549c <USB_HC_StartXfer+0x280>)
 800530e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005310:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	7a9b      	ldrb	r3, [r3, #10]
 8005316:	075b      	lsls	r3, r3, #29
 8005318:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800531c:	69f9      	ldr	r1, [r7, #28]
 800531e:	0148      	lsls	r0, r1, #5
 8005320:	6a39      	ldr	r1, [r7, #32]
 8005322:	4401      	add	r1, r0
 8005324:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005328:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800532a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	68d9      	ldr	r1, [r3, #12]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	4413      	add	r3, r2
 800533e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005342:	460a      	mov	r2, r1
 8005344:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	440a      	add	r2, r1
 8005374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005378:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800537c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	7e7b      	ldrb	r3, [r7, #25]
 800538e:	075b      	lsls	r3, r3, #29
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	0148      	lsls	r0, r1, #5
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	4401      	add	r1, r0
 8005398:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800539c:	4313      	orrs	r3, r2
 800539e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	78db      	ldrb	r3, [r3, #3]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	e003      	b.n	80053d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e6:	461a      	mov	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e04e      	b.n	8005494 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	78db      	ldrb	r3, [r3, #3]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d149      	bne.n	8005492 <USB_HC_StartXfer+0x276>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d045      	beq.n	8005492 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	79db      	ldrb	r3, [r3, #7]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d830      	bhi.n	8005470 <USB_HC_StartXfer+0x254>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <USB_HC_StartXfer+0x1f8>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005425 	.word	0x08005425
 8005418:	08005449 	.word	0x08005449
 800541c:	08005425 	.word	0x08005425
 8005420:	08005449 	.word	0x08005449
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	3303      	adds	r3, #3
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800542e:	8afa      	ldrh	r2, [r7, #22]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	b29b      	uxth	r3, r3
 8005436:	429a      	cmp	r2, r3
 8005438:	d91c      	bls.n	8005474 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	619a      	str	r2, [r3, #24]
        }
        break;
 8005446:	e015      	b.n	8005474 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	3303      	adds	r3, #3
 800544e:	089b      	lsrs	r3, r3, #2
 8005450:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005452:	8afa      	ldrh	r2, [r7, #22]
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	b29b      	uxth	r3, r3
 800545e:	429a      	cmp	r2, r3
 8005460:	d90a      	bls.n	8005478 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	619a      	str	r2, [r3, #24]
        }
        break;
 800546e:	e003      	b.n	8005478 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005470:	bf00      	nop
 8005472:	e002      	b.n	800547a <USB_HC_StartXfer+0x25e>
        break;
 8005474:	bf00      	nop
 8005476:	e000      	b.n	800547a <USB_HC_StartXfer+0x25e>
        break;
 8005478:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	785a      	ldrb	r2, [r3, #1]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	b29b      	uxth	r3, r3
 8005488:	2000      	movs	r0, #0
 800548a:	9000      	str	r0, [sp, #0]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7ff fb53 	bl	8004b38 <USB_WritePacket>
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3728      	adds	r7, #40	; 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	1ff80000 	.word	0x1ff80000

080054a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	b29b      	uxth	r3, r3
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b089      	sub	sp, #36	; 0x24
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	0c9b      	lsrs	r3, r3, #18
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	0fdb      	lsrs	r3, r3, #31
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b20      	cmp	r3, #32
 8005510:	d104      	bne.n	800551c <USB_HC_Halt+0x5a>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e0e8      	b.n	80056ee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <USB_HC_Halt+0x66>
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d173      	bne.n	8005610 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	440a      	add	r2, r1
 800553e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005546:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	f040 80cb 	bne.w	80056ec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d143      	bne.n	80055ea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	440a      	add	r2, r1
 8005578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800557c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005580:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	440a      	add	r2, r1
 8005598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800559c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ce:	d81d      	bhi.n	800560c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e6:	d0ec      	beq.n	80055c2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055e8:	e080      	b.n	80056ec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005608:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800560a:	e06f      	b.n	80056ec <USB_HC_Halt+0x22a>
            break;
 800560c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800560e:	e06d      	b.n	80056ec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	4413      	add	r3, r2
 8005618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	440a      	add	r2, r1
 8005626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d143      	bne.n	80056c8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	440a      	add	r2, r1
 8005656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800565e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	440a      	add	r2, r1
 8005676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800567a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800567e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800569e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ac:	d81d      	bhi.n	80056ea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c4:	d0ec      	beq.n	80056a0 <USB_HC_Halt+0x1de>
 80056c6:	e011      	b.n	80056ec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e000      	b.n	80056ec <USB_HC_Halt+0x22a>
          break;
 80056ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005710:	2301      	movs	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	04da      	lsls	r2, r3, #19
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <USB_DoPing+0x74>)
 800571a:	4013      	ands	r3, r2
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	440a      	add	r2, r1
 8005724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800572c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005744:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800574c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	461a      	mov	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	1ff80000 	.word	0x1ff80000

08005774 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff f935 	bl	80049f4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800578a:	2110      	movs	r1, #16
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff f98f 	bl	8004ab0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff f9b0 	bl	8004af8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	e01f      	b.n	80057de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d2:	461a      	mov	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	3301      	adds	r3, #1
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b0f      	cmp	r3, #15
 80057e2:	d9dc      	bls.n	800579e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	e034      	b.n	8005854 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005800:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005808:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005810:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581e:	461a      	mov	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	3301      	adds	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005830:	d80c      	bhi.n	800584c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005848:	d0ec      	beq.n	8005824 <USB_StopHost+0xb0>
 800584a:	e000      	b.n	800584e <USB_StopHost+0xda>
        break;
 800584c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3301      	adds	r3, #1
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	d9c7      	bls.n	80057ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005860:	461a      	mov	r2, r3
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
 8005866:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f04f 32ff 	mov.w	r2, #4294967295
 800586e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7ff f8ae 	bl	80049d2 <USB_EnableGlobalInt>

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005884:	4904      	ldr	r1, [pc, #16]	; (8005898 <MX_FATFS_Init+0x18>)
 8005886:	4805      	ldr	r0, [pc, #20]	; (800589c <MX_FATFS_Init+0x1c>)
 8005888:	f005 fbfc 	bl	800b084 <FATFS_LinkDriver>
 800588c:	4603      	mov	r3, r0
 800588e:	461a      	mov	r2, r3
 8005890:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <MX_FATFS_Init+0x20>)
 8005892:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005894:	bf00      	nop
 8005896:	bd80      	pop	{r7, pc}
 8005898:	2000181c 	.word	0x2000181c
 800589c:	0800d560 	.word	0x0800d560
 80058a0:	20003884 	.word	0x20003884

080058a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80058a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	4619      	mov	r1, r3
 80058de:	4808      	ldr	r0, [pc, #32]	; (8005900 <USBH_status+0x34>)
 80058e0:	f000 fe1a 	bl	8006518 <USBH_MSC_UnitIsReady>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <USBH_status+0x24>
  {
    res = RES_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	e001      	b.n	80058f4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20003888 	.word	0x20003888

08005904 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b094      	sub	sp, #80	; 0x50
 8005908:	af02      	add	r7, sp, #8
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800591a:	7bf9      	ldrb	r1, [r7, #15]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4813      	ldr	r0, [pc, #76]	; (8005974 <USBH_read+0x70>)
 8005926:	f000 fe41 	bl	80065ac <USBH_MSC_Read>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <USBH_read+0x34>
  {
    res = RES_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005936:	e017      	b.n	8005968 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005938:	f107 0210 	add.w	r2, r7, #16
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	4619      	mov	r1, r3
 8005940:	480c      	ldr	r0, [pc, #48]	; (8005974 <USBH_read+0x70>)
 8005942:	f000 fe0f 	bl	8006564 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005946:	7f7b      	ldrb	r3, [r7, #29]
 8005948:	2b3a      	cmp	r3, #58	; 0x3a
 800594a:	d005      	beq.n	8005958 <USBH_read+0x54>
 800594c:	2b3a      	cmp	r3, #58	; 0x3a
 800594e:	dc07      	bgt.n	8005960 <USBH_read+0x5c>
 8005950:	2b04      	cmp	r3, #4
 8005952:	d001      	beq.n	8005958 <USBH_read+0x54>
 8005954:	2b28      	cmp	r3, #40	; 0x28
 8005956:	d103      	bne.n	8005960 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005958:	2303      	movs	r3, #3
 800595a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800595e:	e003      	b.n	8005968 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005966:	bf00      	nop
    }
  }

  return res;
 8005968:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800596c:	4618      	mov	r0, r3
 800596e:	3748      	adds	r7, #72	; 0x48
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20003888 	.word	0x20003888

08005978 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b094      	sub	sp, #80	; 0x50
 800597c:	af02      	add	r7, sp, #8
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800598e:	7bf9      	ldrb	r1, [r7, #15]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4817      	ldr	r0, [pc, #92]	; (80059f8 <USBH_write+0x80>)
 800599a:	f000 fe70 	bl	800667e <USBH_MSC_Write>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d103      	bne.n	80059ac <USBH_write+0x34>
  {
    res = RES_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80059aa:	e01f      	b.n	80059ec <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80059ac:	f107 0210 	add.w	r2, r7, #16
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	4619      	mov	r1, r3
 80059b4:	4810      	ldr	r0, [pc, #64]	; (80059f8 <USBH_write+0x80>)
 80059b6:	f000 fdd5 	bl	8006564 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80059ba:	7f7b      	ldrb	r3, [r7, #29]
 80059bc:	2b3a      	cmp	r3, #58	; 0x3a
 80059be:	d00d      	beq.n	80059dc <USBH_write+0x64>
 80059c0:	2b3a      	cmp	r3, #58	; 0x3a
 80059c2:	dc0f      	bgt.n	80059e4 <USBH_write+0x6c>
 80059c4:	2b28      	cmp	r3, #40	; 0x28
 80059c6:	d009      	beq.n	80059dc <USBH_write+0x64>
 80059c8:	2b28      	cmp	r3, #40	; 0x28
 80059ca:	dc0b      	bgt.n	80059e4 <USBH_write+0x6c>
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d005      	beq.n	80059dc <USBH_write+0x64>
 80059d0:	2b27      	cmp	r3, #39	; 0x27
 80059d2:	d107      	bne.n	80059e4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80059d4:	2302      	movs	r3, #2
 80059d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80059da:	e007      	b.n	80059ec <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80059dc:	2303      	movs	r3, #3
 80059de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80059e2:	e003      	b.n	80059ec <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80059ea:	bf00      	nop
    }
  }

  return res;
 80059ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3748      	adds	r7, #72	; 0x48
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20003888 	.word	0x20003888

080059fc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b090      	sub	sp, #64	; 0x40
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	603a      	str	r2, [r7, #0]
 8005a06:	71fb      	strb	r3, [r7, #7]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005a12:	79bb      	ldrb	r3, [r7, #6]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d852      	bhi.n	8005abe <USBH_ioctl+0xc2>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <USBH_ioctl+0x24>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a39 	.word	0x08005a39
 8005a28:	08005a63 	.word	0x08005a63
 8005a2c:	08005a8f 	.word	0x08005a8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005a36:	e045      	b.n	8005ac4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005a38:	f107 0208 	add.w	r2, r7, #8
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4823      	ldr	r0, [pc, #140]	; (8005ad0 <USBH_ioctl+0xd4>)
 8005a42:	f000 fd8f 	bl	8006564 <USBH_MSC_GetLUNInfo>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005a58:	e034      	b.n	8005ac4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005a60:	e030      	b.n	8005ac4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005a62:	f107 0208 	add.w	r2, r7, #8
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4819      	ldr	r0, [pc, #100]	; (8005ad0 <USBH_ioctl+0xd4>)
 8005a6c:	f000 fd7a 	bl	8006564 <USBH_MSC_GetLUNInfo>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005a76:	8a3b      	ldrh	r3, [r7, #16]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005a84:	e01e      	b.n	8005ac4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005a8c:	e01a      	b.n	8005ac4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005a8e:	f107 0208 	add.w	r2, r7, #8
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	4619      	mov	r1, r3
 8005a96:	480e      	ldr	r0, [pc, #56]	; (8005ad0 <USBH_ioctl+0xd4>)
 8005a98:	f000 fd64 	bl	8006564 <USBH_MSC_GetLUNInfo>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005aa2:	8a3b      	ldrh	r3, [r7, #16]
 8005aa4:	0a5b      	lsrs	r3, r3, #9
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005ab4:	e006      	b.n	8005ac4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005abc:	e002      	b.n	8005ac4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005abe:	2304      	movs	r3, #4
 8005ac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005ac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3740      	adds	r7, #64	; 0x40
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20003888 	.word	0x20003888

08005ad4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b089      	sub	sp, #36	; 0x24
 8005ad8:	af04      	add	r7, sp, #16
 8005ada:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ae2:	7919      	ldrb	r1, [r3, #4]
 8005ae4:	2350      	movs	r3, #80	; 0x50
 8005ae6:	2206      	movs	r2, #6
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 fc53 	bl	8007394 <USBH_FindInterface>
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2bff      	cmp	r3, #255	; 0xff
 8005af6:	d002      	beq.n	8005afe <USBH_MSC_InterfaceInit+0x2a>
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d901      	bls.n	8005b02 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005afe:	2302      	movs	r3, #2
 8005b00:	e0ef      	b.n	8005ce2 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 fc28 	bl	800735c <USBH_SelectInterface>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e0e3      	b.n	8005ce2 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005b20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005b24:	f005 fe20 	bl	800b768 <malloc>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e0d0      	b.n	8005ce2 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b44:	2100      	movs	r1, #0
 8005b46:	68b8      	ldr	r0, [r7, #8]
 8005b48:	f005 fe2c 	bl	800b7a4 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	211a      	movs	r1, #26
 8005b52:	fb01 f303 	mul.w	r3, r1, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	b25b      	sxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da16      	bge.n	8005b92 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	211a      	movs	r1, #26
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	211a      	movs	r1, #26
 8005b80:	fb01 f303 	mul.w	r3, r1, r3
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b8a:	881a      	ldrh	r2, [r3, #0]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	815a      	strh	r2, [r3, #10]
 8005b90:	e015      	b.n	8005bbe <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	211a      	movs	r1, #26
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ba2:	781a      	ldrb	r2, [r3, #0]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	211a      	movs	r1, #26
 8005bae:	fb01 f303 	mul.w	r3, r1, r3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005bb8:	881a      	ldrh	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	211a      	movs	r1, #26
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	4413      	add	r3, r2
 8005bca:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da16      	bge.n	8005c04 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	211a      	movs	r1, #26
 8005bdc:	fb01 f303 	mul.w	r3, r1, r3
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	211a      	movs	r1, #26
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005bfc:	881a      	ldrh	r2, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	815a      	strh	r2, [r3, #10]
 8005c02:	e015      	b.n	8005c30 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	211a      	movs	r1, #26
 8005c0a:	fb01 f303 	mul.w	r3, r1, r3
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	211a      	movs	r1, #26
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005c2a:	881a      	ldrh	r2, [r3, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2200      	movs	r2, #0
 8005c34:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	799b      	ldrb	r3, [r3, #6]
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f002 fdc4 	bl	80087d6 <USBH_AllocPipe>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	79db      	ldrb	r3, [r3, #7]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f002 fdba 	bl	80087d6 <USBH_AllocPipe>
 8005c62:	4603      	mov	r3, r0
 8005c64:	461a      	mov	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fdac 	bl	80067c8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	7959      	ldrb	r1, [r3, #5]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	7998      	ldrb	r0, [r3, #6]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	8912      	ldrh	r2, [r2, #8]
 8005c88:	9202      	str	r2, [sp, #8]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	9201      	str	r2, [sp, #4]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	4623      	mov	r3, r4
 8005c92:	4602      	mov	r2, r0
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f002 fd6f 	bl	8008778 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	7919      	ldrb	r1, [r3, #4]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	79d8      	ldrb	r0, [r3, #7]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	8952      	ldrh	r2, [r2, #10]
 8005cb2:	9202      	str	r2, [sp, #8]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	9201      	str	r2, [sp, #4]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4623      	mov	r3, r4
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f002 fd5a 	bl	8008778 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	791b      	ldrb	r3, [r3, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f005 fc6d 	bl	800b5ac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	795b      	ldrb	r3, [r3, #5]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f005 fc66 	bl	800b5ac <USBH_LL_SetToggle>

  return USBH_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd90      	pop	{r4, r7, pc}

08005cea <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	795b      	ldrb	r3, [r3, #5]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00e      	beq.n	8005d22 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	795b      	ldrb	r3, [r3, #5]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f002 fd53 	bl	80087b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	795b      	ldrb	r3, [r3, #5]
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f002 fd7e 	bl	8008818 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	791b      	ldrb	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00e      	beq.n	8005d48 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	791b      	ldrb	r3, [r3, #4]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f002 fd40 	bl	80087b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	791b      	ldrb	r3, [r3, #4]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f002 fd6b 	bl	8008818 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f005 fd0b 	bl	800b778 <free>
    phost->pActiveClass->pData = 0U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d68:	2200      	movs	r2, #0
 8005d6a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	7b9b      	ldrb	r3, [r3, #14]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d041      	beq.n	8005e18 <USBH_MSC_ClassRequest+0xa2>
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	dc4b      	bgt.n	8005e30 <USBH_MSC_ClassRequest+0xba>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <USBH_MSC_ClassRequest+0x2a>
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d147      	bne.n	8005e30 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fcf0 	bl	800678a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005daa:	4603      	mov	r3, r0
 8005dac:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d104      	bne.n	8005dbe <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d137      	bne.n	8005e34 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d804      	bhi.n	8005dd6 <USBH_MSC_ClassRequest+0x60>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	e000      	b.n	8005dd8 <USBH_MSC_ClassRequest+0x62>
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73bb      	strb	r3, [r7, #14]
 8005de0:	e014      	b.n	8005e0c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005de2:	7bbb      	ldrb	r3, [r7, #14]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	2134      	movs	r1, #52	; 0x34
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	3392      	adds	r3, #146	; 0x92
 8005df0:	2202      	movs	r2, #2
 8005df2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005df4:	7bbb      	ldrb	r3, [r7, #14]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	2134      	movs	r1, #52	; 0x34
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	4413      	add	r3, r2
 8005e00:	33c1      	adds	r3, #193	; 0xc1
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	73bb      	strb	r3, [r7, #14]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	7bba      	ldrb	r2, [r7, #14]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d3e5      	bcc.n	8005de2 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8005e16:	e00d      	b.n	8005e34 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005e18:	2100      	movs	r1, #0
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f002 f87b 	bl	8007f16 <USBH_ClrFeature>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d108      	bne.n	8005e38 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	7bda      	ldrb	r2, [r3, #15]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005e2e:	e003      	b.n	8005e38 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005e30:	bf00      	nop
 8005e32:	e002      	b.n	8005e3a <USBH_MSC_ClassRequest+0xc4>
      break;
 8005e34:	bf00      	nop
 8005e36:	e000      	b.n	8005e3a <USBH_MSC_ClassRequest+0xc4>
      break;
 8005e38:	bf00      	nop
  }

  return status;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	7b1b      	ldrb	r3, [r3, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <USBH_MSC_Process+0x2e>
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	f000 8271 	beq.w	8006352 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005e70:	e272      	b.n	8006358 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	f080 824f 	bcs.w	8006322 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	2334      	movs	r3, #52	; 0x34
 8005e90:	fb03 f301 	mul.w	r3, r3, r1
 8005e94:	4413      	add	r3, r2
 8005e96:	3391      	adds	r3, #145	; 0x91
 8005e98:	2201      	movs	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	2334      	movs	r3, #52	; 0x34
 8005ea8:	fb03 f301 	mul.w	r3, r3, r1
 8005eac:	4413      	add	r3, r2
 8005eae:	3390      	adds	r3, #144	; 0x90
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	f200 8243 	bhi.w	800633e <USBH_MSC_Process+0x4fa>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <USBH_MSC_Process+0x7c>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	0800633f 	.word	0x0800633f
 8005ec8:	08005fad 	.word	0x08005fad
 8005ecc:	08006131 	.word	0x08006131
 8005ed0:	08005f0b 	.word	0x08005f0b
 8005ed4:	080061fd 	.word	0x080061fd
 8005ed8:	0800633f 	.word	0x0800633f
 8005edc:	0800633f 	.word	0x0800633f
 8005ee0:	08006311 	.word	0x08006311
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eea:	4619      	mov	r1, r3
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	2334      	movs	r3, #52	; 0x34
 8005ef0:	fb03 f301 	mul.w	r3, r3, r1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3390      	adds	r3, #144	; 0x90
 8005ef8:	2204      	movs	r2, #4
 8005efa:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005f08:	e222      	b.n	8006350 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f10:	b2d9      	uxtb	r1, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2334      	movs	r3, #52	; 0x34
 8005f1c:	fb03 f302 	mul.w	r3, r3, r2
 8005f20:	3398      	adds	r3, #152	; 0x98
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4413      	add	r3, r2
 8005f26:	3307      	adds	r3, #7
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 ff6a 	bl	8006e04 <USBH_MSC_SCSI_Inquiry>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f40:	4619      	mov	r1, r3
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	2334      	movs	r3, #52	; 0x34
 8005f46:	fb03 f301 	mul.w	r3, r3, r1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3390      	adds	r3, #144	; 0x90
 8005f4e:	2202      	movs	r2, #2
 8005f50:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d10c      	bne.n	8005f72 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f5e:	4619      	mov	r1, r3
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	2334      	movs	r3, #52	; 0x34
 8005f64:	fb03 f301 	mul.w	r3, r3, r1
 8005f68:	4413      	add	r3, r2
 8005f6a:	3390      	adds	r3, #144	; 0x90
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	701a      	strb	r2, [r3, #0]
            break;
 8005f70:	e1e7      	b.n	8006342 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	f040 81e4 	bne.w	8006342 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f80:	4619      	mov	r1, r3
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	2334      	movs	r3, #52	; 0x34
 8005f86:	fb03 f301 	mul.w	r3, r3, r1
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3390      	adds	r3, #144	; 0x90
 8005f8e:	2201      	movs	r2, #1
 8005f90:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f98:	4619      	mov	r1, r3
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	2334      	movs	r3, #52	; 0x34
 8005f9e:	fb03 f301 	mul.w	r3, r3, r1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3391      	adds	r3, #145	; 0x91
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	701a      	strb	r2, [r3, #0]
            break;
 8005faa:	e1ca      	b.n	8006342 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fe66 	bl	8006c88 <USBH_MSC_SCSI_TestUnitReady>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d149      	bne.n	800605a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fcc:	4619      	mov	r1, r3
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	2334      	movs	r3, #52	; 0x34
 8005fd2:	fb03 f301 	mul.w	r3, r3, r1
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3392      	adds	r3, #146	; 0x92
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00c      	beq.n	8005ffa <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	2334      	movs	r3, #52	; 0x34
 8005fec:	fb03 f301 	mul.w	r3, r3, r1
 8005ff0:	4413      	add	r3, r2
 8005ff2:	33c1      	adds	r3, #193	; 0xc1
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e00b      	b.n	8006012 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006000:	4619      	mov	r1, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	2334      	movs	r3, #52	; 0x34
 8006006:	fb03 f301 	mul.w	r3, r3, r1
 800600a:	4413      	add	r3, r2
 800600c:	33c1      	adds	r3, #193	; 0xc1
 800600e:	2200      	movs	r2, #0
 8006010:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006018:	4619      	mov	r1, r3
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	2334      	movs	r3, #52	; 0x34
 800601e:	fb03 f301 	mul.w	r3, r3, r1
 8006022:	4413      	add	r3, r2
 8006024:	3390      	adds	r3, #144	; 0x90
 8006026:	2203      	movs	r2, #3
 8006028:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006030:	4619      	mov	r1, r3
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	2334      	movs	r3, #52	; 0x34
 8006036:	fb03 f301 	mul.w	r3, r3, r1
 800603a:	4413      	add	r3, r2
 800603c:	3391      	adds	r3, #145	; 0x91
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006048:	4619      	mov	r1, r3
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	2334      	movs	r3, #52	; 0x34
 800604e:	fb03 f301 	mul.w	r3, r3, r1
 8006052:	4413      	add	r3, r2
 8006054:	3392      	adds	r3, #146	; 0x92
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d14a      	bne.n	80060f6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006066:	4619      	mov	r1, r3
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	2334      	movs	r3, #52	; 0x34
 800606c:	fb03 f301 	mul.w	r3, r3, r1
 8006070:	4413      	add	r3, r2
 8006072:	3392      	adds	r3, #146	; 0x92
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d00c      	beq.n	8006094 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006080:	4619      	mov	r1, r3
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	2334      	movs	r3, #52	; 0x34
 8006086:	fb03 f301 	mul.w	r3, r3, r1
 800608a:	4413      	add	r3, r2
 800608c:	33c1      	adds	r3, #193	; 0xc1
 800608e:	2201      	movs	r2, #1
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	e00b      	b.n	80060ac <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800609a:	4619      	mov	r1, r3
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	2334      	movs	r3, #52	; 0x34
 80060a0:	fb03 f301 	mul.w	r3, r3, r1
 80060a4:	4413      	add	r3, r2
 80060a6:	33c1      	adds	r3, #193	; 0xc1
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060b2:	4619      	mov	r1, r3
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	2334      	movs	r3, #52	; 0x34
 80060b8:	fb03 f301 	mul.w	r3, r3, r1
 80060bc:	4413      	add	r3, r2
 80060be:	3390      	adds	r3, #144	; 0x90
 80060c0:	2205      	movs	r2, #5
 80060c2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ca:	4619      	mov	r1, r3
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	2334      	movs	r3, #52	; 0x34
 80060d0:	fb03 f301 	mul.w	r3, r3, r1
 80060d4:	4413      	add	r3, r2
 80060d6:	3391      	adds	r3, #145	; 0x91
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060e2:	4619      	mov	r1, r3
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	2334      	movs	r3, #52	; 0x34
 80060e8:	fb03 f301 	mul.w	r3, r3, r1
 80060ec:	4413      	add	r3, r2
 80060ee:	3392      	adds	r3, #146	; 0x92
 80060f0:	2202      	movs	r2, #2
 80060f2:	701a      	strb	r2, [r3, #0]
            break;
 80060f4:	e127      	b.n	8006346 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80060f6:	7bbb      	ldrb	r3, [r7, #14]
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	f040 8124 	bne.w	8006346 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006104:	4619      	mov	r1, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	2334      	movs	r3, #52	; 0x34
 800610a:	fb03 f301 	mul.w	r3, r3, r1
 800610e:	4413      	add	r3, r2
 8006110:	3390      	adds	r3, #144	; 0x90
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800611c:	4619      	mov	r1, r3
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	2334      	movs	r3, #52	; 0x34
 8006122:	fb03 f301 	mul.w	r3, r3, r1
 8006126:	4413      	add	r3, r2
 8006128:	3391      	adds	r3, #145	; 0x91
 800612a:	2202      	movs	r2, #2
 800612c:	701a      	strb	r2, [r3, #0]
            break;
 800612e:	e10a      	b.n	8006346 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006136:	b2d9      	uxtb	r1, r3
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800613e:	461a      	mov	r2, r3
 8006140:	2334      	movs	r3, #52	; 0x34
 8006142:	fb03 f302 	mul.w	r3, r3, r2
 8006146:	3390      	adds	r3, #144	; 0x90
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	3304      	adds	r3, #4
 800614e:	461a      	mov	r2, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fddc 	bl	8006d0e <USBH_MSC_SCSI_ReadCapacity>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d120      	bne.n	80061a2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006166:	4619      	mov	r1, r3
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	2334      	movs	r3, #52	; 0x34
 800616c:	fb03 f301 	mul.w	r3, r3, r1
 8006170:	4413      	add	r3, r2
 8006172:	3390      	adds	r3, #144	; 0x90
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800617e:	4619      	mov	r1, r3
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	2334      	movs	r3, #52	; 0x34
 8006184:	fb03 f301 	mul.w	r3, r3, r1
 8006188:	4413      	add	r3, r2
 800618a:	3391      	adds	r3, #145	; 0x91
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006196:	3301      	adds	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80061a0:	e0d3      	b.n	800634a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d10c      	bne.n	80061c2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061ae:	4619      	mov	r1, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	2334      	movs	r3, #52	; 0x34
 80061b4:	fb03 f301 	mul.w	r3, r3, r1
 80061b8:	4413      	add	r3, r2
 80061ba:	3390      	adds	r3, #144	; 0x90
 80061bc:	2205      	movs	r2, #5
 80061be:	701a      	strb	r2, [r3, #0]
            break;
 80061c0:	e0c3      	b.n	800634a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	f040 80c0 	bne.w	800634a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061d0:	4619      	mov	r1, r3
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	2334      	movs	r3, #52	; 0x34
 80061d6:	fb03 f301 	mul.w	r3, r3, r1
 80061da:	4413      	add	r3, r2
 80061dc:	3390      	adds	r3, #144	; 0x90
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061e8:	4619      	mov	r1, r3
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	2334      	movs	r3, #52	; 0x34
 80061ee:	fb03 f301 	mul.w	r3, r3, r1
 80061f2:	4413      	add	r3, r2
 80061f4:	3391      	adds	r3, #145	; 0x91
 80061f6:	2202      	movs	r2, #2
 80061f8:	701a      	strb	r2, [r3, #0]
            break;
 80061fa:	e0a6      	b.n	800634a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006202:	b2d9      	uxtb	r1, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800620a:	461a      	mov	r2, r3
 800620c:	2334      	movs	r3, #52	; 0x34
 800620e:	fb03 f302 	mul.w	r3, r3, r2
 8006212:	3398      	adds	r3, #152	; 0x98
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	3304      	adds	r3, #4
 800621a:	461a      	mov	r2, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fe96 	bl	8006f4e <USBH_MSC_SCSI_RequestSense>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d145      	bne.n	80062b8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006232:	4619      	mov	r1, r3
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	2334      	movs	r3, #52	; 0x34
 8006238:	fb03 f301 	mul.w	r3, r3, r1
 800623c:	4413      	add	r3, r2
 800623e:	339c      	adds	r3, #156	; 0x9c
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b06      	cmp	r3, #6
 8006244:	d00c      	beq.n	8006260 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800624c:	4619      	mov	r1, r3
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	2334      	movs	r3, #52	; 0x34
 8006252:	fb03 f301 	mul.w	r3, r3, r1
 8006256:	4413      	add	r3, r2
 8006258:	339c      	adds	r3, #156	; 0x9c
 800625a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800625c:	2b02      	cmp	r3, #2
 800625e:	d117      	bne.n	8006290 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	f242 720f 	movw	r2, #9999	; 0x270f
 8006272:	4293      	cmp	r3, r2
 8006274:	d80c      	bhi.n	8006290 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800627c:	4619      	mov	r1, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	2334      	movs	r3, #52	; 0x34
 8006282:	fb03 f301 	mul.w	r3, r3, r1
 8006286:	4413      	add	r3, r2
 8006288:	3390      	adds	r3, #144	; 0x90
 800628a:	2202      	movs	r2, #2
 800628c:	701a      	strb	r2, [r3, #0]
                  break;
 800628e:	e05f      	b.n	8006350 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006296:	4619      	mov	r1, r3
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	2334      	movs	r3, #52	; 0x34
 800629c:	fb03 f301 	mul.w	r3, r3, r1
 80062a0:	4413      	add	r3, r2
 80062a2:	3390      	adds	r3, #144	; 0x90
 80062a4:	2201      	movs	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062ae:	3301      	adds	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d10c      	bne.n	80062d8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062c4:	4619      	mov	r1, r3
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	2334      	movs	r3, #52	; 0x34
 80062ca:	fb03 f301 	mul.w	r3, r3, r1
 80062ce:	4413      	add	r3, r2
 80062d0:	3390      	adds	r3, #144	; 0x90
 80062d2:	2208      	movs	r2, #8
 80062d4:	701a      	strb	r2, [r3, #0]
            break;
 80062d6:	e03a      	b.n	800634e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d137      	bne.n	800634e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062e4:	4619      	mov	r1, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	2334      	movs	r3, #52	; 0x34
 80062ea:	fb03 f301 	mul.w	r3, r3, r1
 80062ee:	4413      	add	r3, r2
 80062f0:	3390      	adds	r3, #144	; 0x90
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062fc:	4619      	mov	r1, r3
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	2334      	movs	r3, #52	; 0x34
 8006302:	fb03 f301 	mul.w	r3, r3, r1
 8006306:	4413      	add	r3, r2
 8006308:	3391      	adds	r3, #145	; 0x91
 800630a:	2202      	movs	r2, #2
 800630c:	701a      	strb	r2, [r3, #0]
            break;
 800630e:	e01e      	b.n	800634e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006316:	3301      	adds	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006320:	e016      	b.n	8006350 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2200      	movs	r2, #0
 8006326:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2201      	movs	r2, #1
 800632e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006336:	2102      	movs	r1, #2
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
      break;
 800633c:	e00c      	b.n	8006358 <USBH_MSC_Process+0x514>
            break;
 800633e:	bf00      	nop
 8006340:	e00a      	b.n	8006358 <USBH_MSC_Process+0x514>
            break;
 8006342:	bf00      	nop
 8006344:	e008      	b.n	8006358 <USBH_MSC_Process+0x514>
            break;
 8006346:	bf00      	nop
 8006348:	e006      	b.n	8006358 <USBH_MSC_Process+0x514>
            break;
 800634a:	bf00      	nop
 800634c:	e004      	b.n	8006358 <USBH_MSC_Process+0x514>
            break;
 800634e:	bf00      	nop
      break;
 8006350:	e002      	b.n	8006358 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	75fb      	strb	r3, [r7, #23]
      break;
 8006356:	bf00      	nop
  }
  return error;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b088      	sub	sp, #32
 800637e:	af02      	add	r7, sp, #8
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006390:	2301      	movs	r3, #1
 8006392:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	2134      	movs	r1, #52	; 0x34
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	3390      	adds	r3, #144	; 0x90
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b07      	cmp	r3, #7
 80063aa:	d03c      	beq.n	8006426 <USBH_MSC_RdWrProcess+0xac>
 80063ac:	2b07      	cmp	r3, #7
 80063ae:	f300 80a7 	bgt.w	8006500 <USBH_MSC_RdWrProcess+0x186>
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	d06c      	beq.n	8006490 <USBH_MSC_RdWrProcess+0x116>
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	f040 80a2 	bne.w	8006500 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80063bc:	78f9      	ldrb	r1, [r7, #3]
 80063be:	2300      	movs	r3, #0
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	2200      	movs	r2, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fea5 	bl	8007116 <USBH_MSC_SCSI_Read>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	2134      	movs	r1, #52	; 0x34
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	4413      	add	r3, r2
 80063e2:	3390      	adds	r3, #144	; 0x90
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063ec:	e08a      	b.n	8006504 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d109      	bne.n	8006408 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	2134      	movs	r1, #52	; 0x34
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	4413      	add	r3, r2
 8006400:	3390      	adds	r3, #144	; 0x90
 8006402:	2205      	movs	r2, #5
 8006404:	701a      	strb	r2, [r3, #0]
      break;
 8006406:	e07d      	b.n	8006504 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b04      	cmp	r3, #4
 800640c:	d17a      	bne.n	8006504 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	2134      	movs	r1, #52	; 0x34
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	3390      	adds	r3, #144	; 0x90
 800641c:	2208      	movs	r2, #8
 800641e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006420:	2302      	movs	r3, #2
 8006422:	75fb      	strb	r3, [r7, #23]
      break;
 8006424:	e06e      	b.n	8006504 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006426:	78f9      	ldrb	r1, [r7, #3]
 8006428:	2300      	movs	r3, #0
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2300      	movs	r3, #0
 800642e:	2200      	movs	r2, #0
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fe05 	bl	8007040 <USBH_MSC_SCSI_Write>
 8006436:	4603      	mov	r3, r0
 8006438:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	2134      	movs	r1, #52	; 0x34
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	3390      	adds	r3, #144	; 0x90
 800644e:	2201      	movs	r2, #1
 8006450:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006456:	e057      	b.n	8006508 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d109      	bne.n	8006472 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	2134      	movs	r1, #52	; 0x34
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	4413      	add	r3, r2
 800646a:	3390      	adds	r3, #144	; 0x90
 800646c:	2205      	movs	r2, #5
 800646e:	701a      	strb	r2, [r3, #0]
      break;
 8006470:	e04a      	b.n	8006508 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d147      	bne.n	8006508 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	2134      	movs	r1, #52	; 0x34
 800647e:	fb01 f303 	mul.w	r3, r1, r3
 8006482:	4413      	add	r3, r2
 8006484:	3390      	adds	r3, #144	; 0x90
 8006486:	2208      	movs	r2, #8
 8006488:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800648a:	2302      	movs	r3, #2
 800648c:	75fb      	strb	r3, [r7, #23]
      break;
 800648e:	e03b      	b.n	8006508 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	2234      	movs	r2, #52	; 0x34
 8006494:	fb02 f303 	mul.w	r3, r2, r3
 8006498:	3398      	adds	r3, #152	; 0x98
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	1d1a      	adds	r2, r3, #4
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fd52 	bl	8006f4e <USBH_MSC_SCSI_RequestSense>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d113      	bne.n	80064dc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	2134      	movs	r1, #52	; 0x34
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	4413      	add	r3, r2
 80064c0:	3390      	adds	r3, #144	; 0x90
 80064c2:	2201      	movs	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	2134      	movs	r1, #52	; 0x34
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	3391      	adds	r3, #145	; 0x91
 80064d4:	2202      	movs	r2, #2
 80064d6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80064d8:	2302      	movs	r3, #2
 80064da:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d014      	beq.n	800650c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d111      	bne.n	800650c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	2134      	movs	r1, #52	; 0x34
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	3390      	adds	r3, #144	; 0x90
 80064f6:	2208      	movs	r2, #8
 80064f8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80064fa:	2302      	movs	r3, #2
 80064fc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064fe:	e005      	b.n	800650c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8006500:	bf00      	nop
 8006502:	e004      	b.n	800650e <USBH_MSC_RdWrProcess+0x194>
      break;
 8006504:	bf00      	nop
 8006506:	e002      	b.n	800650e <USBH_MSC_RdWrProcess+0x194>
      break;
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <USBH_MSC_RdWrProcess+0x194>
      break;
 800650c:	bf00      	nop

  }
  return error;
 800650e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b0b      	cmp	r3, #11
 8006536:	d10c      	bne.n	8006552 <USBH_MSC_UnitIsReady+0x3a>
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	2134      	movs	r1, #52	; 0x34
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	3391      	adds	r3, #145	; 0x91
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
 8006550:	e001      	b.n	8006556 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	460b      	mov	r3, r1
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b0b      	cmp	r3, #11
 8006584:	d10d      	bne.n	80065a2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	2234      	movs	r2, #52	; 0x34
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	3390      	adds	r3, #144	; 0x90
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4413      	add	r3, r2
 8006594:	2234      	movs	r2, #52	; 0x34
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f005 f8f5 	bl	800b788 <memcpy>
    return USBH_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	460b      	mov	r3, r1
 80065ba:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80065d8:	2b0b      	cmp	r3, #11
 80065da:	d109      	bne.n	80065f0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80065dc:	7afb      	ldrb	r3, [r7, #11]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	2134      	movs	r1, #52	; 0x34
 80065e2:	fb01 f303 	mul.w	r3, r1, r3
 80065e6:	4413      	add	r3, r2
 80065e8:	3390      	adds	r3, #144	; 0x90
 80065ea:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d001      	beq.n	80065f4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80065f0:	2302      	movs	r3, #2
 80065f2:	e040      	b.n	8006676 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2206      	movs	r2, #6
 80065f8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80065fa:	7afb      	ldrb	r3, [r7, #11]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	2134      	movs	r1, #52	; 0x34
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	3390      	adds	r3, #144	; 0x90
 8006608:	2206      	movs	r2, #6
 800660a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800660c:	7afb      	ldrb	r3, [r7, #11]
 800660e:	b29a      	uxth	r2, r3
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006616:	7af9      	ldrb	r1, [r7, #11]
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fd78 	bl	8007116 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800662c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800662e:	e016      	b.n	800665e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad2      	subs	r2, r2, r3
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f242 7110 	movw	r1, #10000	; 0x2710
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	429a      	cmp	r2, r3
 8006646:	d805      	bhi.n	8006654 <USBH_MSC_Read+0xa8>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2201      	movs	r2, #1
 8006658:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800665a:	2302      	movs	r3, #2
 800665c:	e00b      	b.n	8006676 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800665e:	7afb      	ldrb	r3, [r7, #11]
 8006660:	4619      	mov	r1, r3
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fe89 	bl	800637a <USBH_MSC_RdWrProcess>
 8006668:	4603      	mov	r3, r0
 800666a:	2b01      	cmp	r3, #1
 800666c:	d0e0      	beq.n	8006630 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2201      	movs	r2, #1
 8006672:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b088      	sub	sp, #32
 8006682:	af02      	add	r7, sp, #8
 8006684:	60f8      	str	r0, [r7, #12]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
 800668a:	460b      	mov	r3, r1
 800668c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00e      	beq.n	80066c2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80066aa:	2b0b      	cmp	r3, #11
 80066ac:	d109      	bne.n	80066c2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80066ae:	7afb      	ldrb	r3, [r7, #11]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	2134      	movs	r1, #52	; 0x34
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	4413      	add	r3, r2
 80066ba:	3390      	adds	r3, #144	; 0x90
 80066bc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d001      	beq.n	80066c6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80066c2:	2302      	movs	r3, #2
 80066c4:	e040      	b.n	8006748 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2207      	movs	r2, #7
 80066ca:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	2134      	movs	r1, #52	; 0x34
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	3390      	adds	r3, #144	; 0x90
 80066da:	2207      	movs	r2, #7
 80066dc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80066de:	7afb      	ldrb	r3, [r7, #11]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80066e8:	7af9      	ldrb	r1, [r7, #11]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fca4 	bl	8007040 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066fe:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006700:	e016      	b.n	8006730 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	f242 7110 	movw	r1, #10000	; 0x2710
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	429a      	cmp	r2, r3
 8006718:	d805      	bhi.n	8006726 <USBH_MSC_Write+0xa8>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2201      	movs	r2, #1
 800672a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800672c:	2302      	movs	r3, #2
 800672e:	e00b      	b.n	8006748 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fe20 	bl	800637a <USBH_MSC_RdWrProcess>
 800673a:	4603      	mov	r3, r0
 800673c:	2b01      	cmp	r3, #1
 800673e:	d0e0      	beq.n	8006702 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2201      	movs	r2, #1
 8006744:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2221      	movs	r2, #33	; 0x21
 800675c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	22ff      	movs	r2, #255	; 0xff
 8006762:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fdab 	bl	80082d6 <USBH_CtlReq>
 8006780:	4603      	mov	r3, r0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	22a1      	movs	r2, #161	; 0xa1
 8006798:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	22fe      	movs	r2, #254	; 0xfe
 800679e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80067b2:	2201      	movs	r2, #1
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fd8d 	bl	80082d6 <USBH_CtlReq>
 80067bc:	4603      	mov	r3, r0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a09      	ldr	r2, [pc, #36]	; (8006804 <USBH_MSC_BOT_Init+0x3c>)
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a09      	ldr	r2, [pc, #36]	; (8006808 <USBH_MSC_BOT_Init+0x40>)
 80067e4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	43425355 	.word	0x43425355
 8006808:	20304050 	.word	0x20304050

0800680c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af02      	add	r7, sp, #8
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006818:	2301      	movs	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800681c:	2301      	movs	r3, #1
 800681e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006820:	2301      	movs	r3, #1
 8006822:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006824:	2300      	movs	r3, #0
 8006826:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800683c:	3b01      	subs	r3, #1
 800683e:	2b0a      	cmp	r3, #10
 8006840:	f200 819e 	bhi.w	8006b80 <USBH_MSC_BOT_Process+0x374>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <USBH_MSC_BOT_Process+0x40>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006879 	.word	0x08006879
 8006850:	080068a1 	.word	0x080068a1
 8006854:	0800690b 	.word	0x0800690b
 8006858:	08006929 	.word	0x08006929
 800685c:	080069ad 	.word	0x080069ad
 8006860:	080069cf 	.word	0x080069cf
 8006864:	08006a67 	.word	0x08006a67
 8006868:	08006a83 	.word	0x08006a83
 800686c:	08006ad5 	.word	0x08006ad5
 8006870:	08006b05 	.word	0x08006b05
 8006874:	08006b67 	.word	0x08006b67
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	78fa      	ldrb	r2, [r7, #3]
 800687c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	795b      	ldrb	r3, [r3, #5]
 8006892:	2201      	movs	r2, #1
 8006894:	9200      	str	r2, [sp, #0]
 8006896:	221f      	movs	r2, #31
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 ff2a 	bl	80086f2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800689e:	e17e      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	795b      	ldrb	r3, [r3, #5]
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f004 fe56 	bl	800b558 <USBH_LL_GetURBState>
 80068ac:	4603      	mov	r3, r0
 80068ae:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80068b0:	7d3b      	ldrb	r3, [r7, #20]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d118      	bne.n	80068e8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00f      	beq.n	80068de <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80068c4:	b25b      	sxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da04      	bge.n	80068d4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2203      	movs	r2, #3
 80068ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80068d2:	e157      	b.n	8006b84 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2205      	movs	r2, #5
 80068d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80068dc:	e152      	b.n	8006b84 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2207      	movs	r2, #7
 80068e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80068e6:	e14d      	b.n	8006b84 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80068e8:	7d3b      	ldrb	r3, [r7, #20]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d104      	bne.n	80068f8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80068f6:	e145      	b.n	8006b84 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80068f8:	7d3b      	ldrb	r3, [r7, #20]
 80068fa:	2b05      	cmp	r3, #5
 80068fc:	f040 8142 	bne.w	8006b84 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	220a      	movs	r2, #10
 8006904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006908:	e13c      	b.n	8006b84 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	895a      	ldrh	r2, [r3, #10]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	791b      	ldrb	r3, [r3, #4]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 ff0f 	bl	800873c <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2204      	movs	r2, #4
 8006922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006926:	e13a      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	791b      	ldrb	r3, [r3, #4]
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f004 fe12 	bl	800b558 <USBH_LL_GetURBState>
 8006934:	4603      	mov	r3, r0
 8006936:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006938:	7d3b      	ldrb	r3, [r7, #20]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d12d      	bne.n	800699a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	8952      	ldrh	r2, [r2, #10]
 8006946:	4293      	cmp	r3, r2
 8006948:	d910      	bls.n	800696c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	8952      	ldrh	r2, [r2, #10]
 8006954:	441a      	add	r2, r3
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	8952      	ldrh	r2, [r2, #10]
 8006964:	1a9a      	subs	r2, r3, r2
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	65da      	str	r2, [r3, #92]	; 0x5c
 800696a:	e002      	b.n	8006972 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2200      	movs	r2, #0
 8006970:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	895a      	ldrh	r2, [r3, #10]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	791b      	ldrb	r3, [r3, #4]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fed7 	bl	800873c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800698e:	e0fb      	b.n	8006b88 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2207      	movs	r2, #7
 8006994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006998:	e0f6      	b.n	8006b88 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800699a:	7d3b      	ldrb	r3, [r7, #20]
 800699c:	2b05      	cmp	r3, #5
 800699e:	f040 80f3 	bne.w	8006b88 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2209      	movs	r2, #9
 80069a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069aa:	e0ed      	b.n	8006b88 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	891a      	ldrh	r2, [r3, #8]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	795b      	ldrb	r3, [r3, #5]
 80069ba:	2001      	movs	r0, #1
 80069bc:	9000      	str	r0, [sp, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fe97 	bl	80086f2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2206      	movs	r2, #6
 80069c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069cc:	e0e7      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	795b      	ldrb	r3, [r3, #5]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f004 fdbf 	bl	800b558 <USBH_LL_GetURBState>
 80069da:	4603      	mov	r3, r0
 80069dc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80069de:	7d3b      	ldrb	r3, [r7, #20]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d12f      	bne.n	8006a44 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	8912      	ldrh	r2, [r2, #8]
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d910      	bls.n	8006a12 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	8912      	ldrh	r2, [r2, #8]
 80069fa:	441a      	add	r2, r3
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	8912      	ldrh	r2, [r2, #8]
 8006a0a:	1a9a      	subs	r2, r3, r2
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a10:	e002      	b.n	8006a18 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2200      	movs	r2, #0
 8006a16:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00c      	beq.n	8006a3a <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	891a      	ldrh	r2, [r3, #8]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	795b      	ldrb	r3, [r3, #5]
 8006a2e:	2001      	movs	r0, #1
 8006a30:	9000      	str	r0, [sp, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fe5d 	bl	80086f2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006a38:	e0a8      	b.n	8006b8c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2207      	movs	r2, #7
 8006a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a42:	e0a3      	b.n	8006b8c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a44:	7d3b      	ldrb	r3, [r7, #20]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d104      	bne.n	8006a54 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a52:	e09b      	b.n	8006b8c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006a54:	7d3b      	ldrb	r3, [r7, #20]
 8006a56:	2b05      	cmp	r3, #5
 8006a58:	f040 8098 	bne.w	8006b8c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	220a      	movs	r2, #10
 8006a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a64:	e092      	b.n	8006b8c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	791b      	ldrb	r3, [r3, #4]
 8006a70:	220d      	movs	r2, #13
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fe62 	bl	800873c <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a80:	e08d      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	791b      	ldrb	r3, [r3, #4]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f004 fd65 	bl	800b558 <USBH_LL_GetURBState>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006a92:	7d3b      	ldrb	r3, [r7, #20]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d115      	bne.n	8006ac4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8a9 	bl	8006c00 <USBH_MSC_DecodeCSW>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006ab2:	7d7b      	ldrb	r3, [r7, #21]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006abc:	e068      	b.n	8006b90 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006abe:	2302      	movs	r3, #2
 8006ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac2:	e065      	b.n	8006b90 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006ac4:	7d3b      	ldrb	r3, [r7, #20]
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	d162      	bne.n	8006b90 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2209      	movs	r2, #9
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006ad2:	e05d      	b.n	8006b90 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f864 	bl	8006ba8 <USBH_MSC_BOT_Abort>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006ae4:	7dbb      	ldrb	r3, [r7, #22]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2207      	movs	r2, #7
 8006aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006af2:	e04f      	b.n	8006b94 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006af4:	7dbb      	ldrb	r3, [r7, #22]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d14c      	bne.n	8006b94 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	220b      	movs	r2, #11
 8006afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b02:	e047      	b.n	8006b94 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	2201      	movs	r2, #1
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f84c 	bl	8006ba8 <USBH_MSC_BOT_Abort>
 8006b10:	4603      	mov	r3, r0
 8006b12:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006b14:	7dbb      	ldrb	r3, [r7, #22]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d11d      	bne.n	8006b56 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	795b      	ldrb	r3, [r3, #5]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f004 fd73 	bl	800b60c <USBH_LL_GetToggle>
 8006b26:	4603      	mov	r3, r0
 8006b28:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	7959      	ldrb	r1, [r3, #5]
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	f1c3 0301 	rsb	r3, r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	461a      	mov	r2, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f004 fd37 	bl	800b5ac <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	791b      	ldrb	r3, [r3, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	4619      	mov	r1, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f004 fd30 	bl	800b5ac <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2209      	movs	r2, #9
 8006b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006b54:	e020      	b.n	8006b98 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006b56:	7dbb      	ldrb	r3, [r7, #22]
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d11d      	bne.n	8006b98 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	220b      	movs	r2, #11
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b64:	e018      	b.n	8006b98 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff fdf2 	bl	8006750 <USBH_MSC_BOT_REQ_Reset>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d112      	bne.n	8006b9c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006b7e:	e00d      	b.n	8006b9c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006b80:	bf00      	nop
 8006b82:	e00c      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b84:	bf00      	nop
 8006b86:	e00a      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b88:	bf00      	nop
 8006b8a:	e008      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b8c:	bf00      	nop
 8006b8e:	e006      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b90:	bf00      	nop
 8006b92:	e004      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b94:	bf00      	nop
 8006b96:	e002      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b98:	bf00      	nop
 8006b9a:	e000      	b.n	8006b9e <USBH_MSC_BOT_Process+0x392>
      break;
 8006b9c:	bf00      	nop
  }
  return status;
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006bc6:	78bb      	ldrb	r3, [r7, #2]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <USBH_MSC_BOT_Abort+0x2a>
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d009      	beq.n	8006be4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006bd0:	e011      	b.n	8006bf6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	79db      	ldrb	r3, [r3, #7]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 f99c 	bl	8007f16 <USBH_ClrFeature>
 8006bde:	4603      	mov	r3, r0
 8006be0:	73fb      	strb	r3, [r7, #15]
      break;
 8006be2:	e008      	b.n	8006bf6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	799b      	ldrb	r3, [r3, #6]
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 f993 	bl	8007f16 <USBH_ClrFeature>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf4:	bf00      	nop
  }
  return status;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006c12:	2301      	movs	r3, #1
 8006c14:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	791b      	ldrb	r3, [r3, #4]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f004 fc09 	bl	800b434 <USBH_LL_GetLastXferSize>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b0d      	cmp	r3, #13
 8006c26:	d002      	beq.n	8006c2e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	73fb      	strb	r3, [r7, #15]
 8006c2c:	e024      	b.n	8006c78 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c32:	4a14      	ldr	r2, [pc, #80]	; (8006c84 <USBH_MSC_DecodeCSW+0x84>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d11d      	bne.n	8006c74 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d119      	bne.n	8006c78 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
 8006c52:	e011      	b.n	8006c78 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d102      	bne.n	8006c64 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	73fb      	strb	r3, [r7, #15]
 8006c62:	e009      	b.n	8006c78 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d104      	bne.n	8006c78 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	73fb      	strb	r3, [r7, #15]
 8006c72:	e001      	b.n	8006c78 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006c74:	2302      	movs	r3, #2
 8006c76:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	53425355 	.word	0x53425355

08006c88 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006c94:	2302      	movs	r3, #2
 8006c96:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d002      	beq.n	8006cb2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d021      	beq.n	8006cf4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006cb0:	e028      	b.n	8006d04 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	220a      	movs	r2, #10
 8006cc4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	3363      	adds	r3, #99	; 0x63
 8006ccc:	2210      	movs	r2, #16
 8006cce:	2100      	movs	r1, #0
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f004 fd67 	bl	800b7a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2202      	movs	r2, #2
 8006cea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf2:	e007      	b.n	8006d04 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fd87 	bl	800680c <USBH_MSC_BOT_Process>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	73fb      	strb	r3, [r7, #15]
      break;
 8006d02:	bf00      	nop
  }

  return error;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	460b      	mov	r3, r1
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d002      	beq.n	8006d3a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d027      	beq.n	8006d88 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006d38:	e05f      	b.n	8006dfa <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2280      	movs	r2, #128	; 0x80
 8006d44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	220a      	movs	r2, #10
 8006d4c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3363      	adds	r3, #99	; 0x63
 8006d54:	2210      	movs	r2, #16
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f004 fd23 	bl	800b7a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2225      	movs	r2, #37	; 0x25
 8006d62:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2202      	movs	r2, #2
 8006d72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f103 0210 	add.w	r2, r3, #16
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006d82:	2301      	movs	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
      break;
 8006d86:	e038      	b.n	8006dfa <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006d88:	7afb      	ldrb	r3, [r7, #11]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fd3d 	bl	800680c <USBH_MSC_BOT_Process>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d12d      	bne.n	8006df8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da2:	3303      	adds	r3, #3
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dae:	3302      	adds	r3, #2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006dc2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	061b      	lsls	r3, r3, #24
 8006dce:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dda:	3307      	adds	r3, #7
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de6:	3306      	adds	r3, #6
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	809a      	strh	r2, [r3, #4]
      break;
 8006df8:	bf00      	nop
  }

  return error;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006e12:	2302      	movs	r3, #2
 8006e14:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d002      	beq.n	8006e30 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d03d      	beq.n	8006eaa <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006e2e:	e089      	b.n	8006f44 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2224      	movs	r2, #36	; 0x24
 8006e34:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	220a      	movs	r2, #10
 8006e42:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3363      	adds	r3, #99	; 0x63
 8006e4a:	220a      	movs	r2, #10
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f004 fca8 	bl	800b7a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2212      	movs	r2, #18
 8006e58:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	015b      	lsls	r3, r3, #5
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2224      	movs	r2, #36	; 0x24
 8006e7c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f103 0210 	add.w	r2, r3, #16
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea8:	e04c      	b.n	8006f44 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006eaa:	7afb      	ldrb	r3, [r7, #11]
 8006eac:	4619      	mov	r1, r3
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff fcac 	bl	800680c <USBH_MSC_BOT_Process>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d141      	bne.n	8006f42 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006ebe:	2222      	movs	r2, #34	; 0x22
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f004 fc6e 	bl	800b7a4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 031f 	and.w	r3, r3, #31
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b25b      	sxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da03      	bge.n	8006f02 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	709a      	strb	r2, [r3, #2]
 8006f00:	e002      	b.n	8006f08 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	1cd8      	adds	r0, r3, #3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f12:	3308      	adds	r3, #8
 8006f14:	2208      	movs	r2, #8
 8006f16:	4619      	mov	r1, r3
 8006f18:	f004 fc36 	bl	800b788 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f103 000c 	add.w	r0, r3, #12
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f28:	3310      	adds	r3, #16
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f004 fc2b 	bl	800b788 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	331d      	adds	r3, #29
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006f3c:	3220      	adds	r2, #32
 8006f3e:	6812      	ldr	r2, [r2, #0]
 8006f40:	601a      	str	r2, [r3, #0]
      break;
 8006f42:	bf00      	nop
  }

  return error;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	460b      	mov	r3, r1
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d002      	beq.n	8006f7a <USBH_MSC_SCSI_RequestSense+0x2c>
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d03d      	beq.n	8006ff4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006f78:	e05d      	b.n	8007036 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	220e      	movs	r2, #14
 8006f7e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2280      	movs	r2, #128	; 0x80
 8006f84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	220a      	movs	r2, #10
 8006f8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	3363      	adds	r3, #99	; 0x63
 8006f94:	2210      	movs	r2, #16
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f004 fc03 	bl	800b7a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	015b      	lsls	r3, r3, #5
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	220e      	movs	r2, #14
 8006fc6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f103 0210 	add.w	r2, r3, #16
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff2:	e020      	b.n	8007036 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff fc07 	bl	800680c <USBH_MSC_BOT_Process>
 8006ffe:	4603      	mov	r3, r0
 8007000:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d115      	bne.n	8007034 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800700e:	3302      	adds	r3, #2
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	b2da      	uxtb	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007022:	7b1a      	ldrb	r2, [r3, #12]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800702e:	7b5a      	ldrb	r2, [r3, #13]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	709a      	strb	r2, [r3, #2]
      break;
 8007034:	bf00      	nop
  }

  return error;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	460b      	mov	r3, r1
 800704e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007050:	2302      	movs	r3, #2
 8007052:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007064:	2b01      	cmp	r3, #1
 8007066:	d002      	beq.n	800706e <USBH_MSC_SCSI_Write+0x2e>
 8007068:	2b02      	cmp	r3, #2
 800706a:	d047      	beq.n	80070fc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800706c:	e04e      	b.n	800710c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007074:	461a      	mov	r2, r3
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	fb03 f202 	mul.w	r2, r3, r2
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	220a      	movs	r2, #10
 800708c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	3363      	adds	r3, #99	; 0x63
 8007094:	2210      	movs	r2, #16
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f004 fb83 	bl	800b7a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	222a      	movs	r2, #42	; 0x2a
 80070a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80070a6:	79fa      	ldrb	r2, [r7, #7]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80070ae:	79ba      	ldrb	r2, [r7, #6]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80070b6:	797a      	ldrb	r2, [r7, #5]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80070be:	1d3b      	adds	r3, r7, #4
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80070c8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80070d2:	f107 0320 	add.w	r3, r7, #32
 80070d6:	781a      	ldrb	r2, [r3, #0]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
      break;
 80070fa:	e007      	b.n	800710c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	4619      	mov	r1, r3
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff fb83 	bl	800680c <USBH_MSC_BOT_Process>
 8007106:	4603      	mov	r3, r0
 8007108:	75fb      	strb	r3, [r7, #23]
      break;
 800710a:	bf00      	nop
  }

  return error;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b086      	sub	sp, #24
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
 8007122:	460b      	mov	r3, r1
 8007124:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007126:	2302      	movs	r3, #2
 8007128:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800713a:	2b01      	cmp	r3, #1
 800713c:	d002      	beq.n	8007144 <USBH_MSC_SCSI_Read+0x2e>
 800713e:	2b02      	cmp	r3, #2
 8007140:	d047      	beq.n	80071d2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007142:	e04e      	b.n	80071e2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800714a:	461a      	mov	r2, r3
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	fb03 f202 	mul.w	r2, r3, r2
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2280      	movs	r2, #128	; 0x80
 800715a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	220a      	movs	r2, #10
 8007162:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3363      	adds	r3, #99	; 0x63
 800716a:	2210      	movs	r2, #16
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f004 fb18 	bl	800b7a4 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2228      	movs	r2, #40	; 0x28
 8007178:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800717c:	79fa      	ldrb	r2, [r7, #7]
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007184:	79ba      	ldrb	r2, [r7, #6]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800718c:	797a      	ldrb	r2, [r7, #5]
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007194:	1d3b      	adds	r3, r7, #4
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800719e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80071a8:	f107 0320 	add.w	r3, r7, #32
 80071ac:	781a      	ldrb	r2, [r3, #0]
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
      break;
 80071d0:	e007      	b.n	80071e2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80071d2:	7afb      	ldrb	r3, [r7, #11]
 80071d4:	4619      	mov	r1, r3
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff fb18 	bl	800680c <USBH_MSC_BOT_Process>
 80071dc:	4603      	mov	r3, r0
 80071de:	75fb      	strb	r3, [r7, #23]
      break;
 80071e0:	bf00      	nop
  }

  return error;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007200:	2302      	movs	r3, #2
 8007202:	e029      	b.n	8007258 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	79fa      	ldrb	r2, [r7, #7]
 8007208:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f81f 	bl	8007260 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f004 f83b 	bl	800b2cc <USBH_LL_Init>

  return USBH_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	e009      	b.n	8007286 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	33e0      	adds	r3, #224	; 0xe0
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	2200      	movs	r2, #0
 800727e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3301      	adds	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b0e      	cmp	r3, #14
 800728a:	d9f2      	bls.n	8007272 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	e009      	b.n	80072a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ac:	d3f1      	bcc.n	8007292 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2240      	movs	r2, #64	; 0x40
 80072d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d016      	beq.n	800734a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10e      	bne.n	8007344 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800732c:	1c59      	adds	r1, r3, #1
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	33de      	adds	r3, #222	; 0xde
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
 8007342:	e004      	b.n	800734e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007344:	2302      	movs	r3, #2
 8007346:	73fb      	strb	r3, [r7, #15]
 8007348:	e001      	b.n	800734e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800734a:	2302      	movs	r3, #2
 800734c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007372:	78fa      	ldrb	r2, [r7, #3]
 8007374:	429a      	cmp	r2, r3
 8007376:	d204      	bcs.n	8007382 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007380:	e001      	b.n	8007386 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007382:	2302      	movs	r3, #2
 8007384:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	461a      	mov	r2, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	70fb      	strb	r3, [r7, #3]
 80073a6:	460b      	mov	r3, r1
 80073a8:	70bb      	strb	r3, [r7, #2]
 80073aa:	4613      	mov	r3, r2
 80073ac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073bc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073be:	e025      	b.n	800740c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	221a      	movs	r2, #26
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	3308      	adds	r3, #8
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	3302      	adds	r3, #2
 80073d0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	795b      	ldrb	r3, [r3, #5]
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d002      	beq.n	80073e2 <USBH_FindInterface+0x4e>
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	2bff      	cmp	r3, #255	; 0xff
 80073e0:	d111      	bne.n	8007406 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073e6:	78ba      	ldrb	r2, [r7, #2]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d002      	beq.n	80073f2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073ec:	78bb      	ldrb	r3, [r7, #2]
 80073ee:	2bff      	cmp	r3, #255	; 0xff
 80073f0:	d109      	bne.n	8007406 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80073f6:	787a      	ldrb	r2, [r7, #1]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d002      	beq.n	8007402 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073fc:	787b      	ldrb	r3, [r7, #1]
 80073fe:	2bff      	cmp	r3, #255	; 0xff
 8007400:	d101      	bne.n	8007406 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	e006      	b.n	8007414 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	3301      	adds	r3, #1
 800740a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d9d6      	bls.n	80073c0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007412:	23ff      	movs	r3, #255	; 0xff
}
 8007414:	4618      	mov	r0, r3
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f003 ff8b 	bl	800b344 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800742e:	2101      	movs	r1, #1
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f004 f8a4 	bl	800b57e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af04      	add	r7, sp, #16
 8007446:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007448:	2302      	movs	r3, #2
 800744a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	d102      	bne.n	8007462 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2203      	movs	r2, #3
 8007460:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b0b      	cmp	r3, #11
 800746a:	f200 81b3 	bhi.w	80077d4 <USBH_Process+0x394>
 800746e:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <USBH_Process+0x34>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	080074a5 	.word	0x080074a5
 8007478:	080074d7 	.word	0x080074d7
 800747c:	0800753f 	.word	0x0800753f
 8007480:	0800776f 	.word	0x0800776f
 8007484:	080077d5 	.word	0x080077d5
 8007488:	080075e3 	.word	0x080075e3
 800748c:	08007715 	.word	0x08007715
 8007490:	08007619 	.word	0x08007619
 8007494:	08007639 	.word	0x08007639
 8007498:	08007659 	.word	0x08007659
 800749c:	08007687 	.word	0x08007687
 80074a0:	08007757 	.word	0x08007757
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8193 	beq.w	80077d8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80074b8:	20c8      	movs	r0, #200	; 0xc8
 80074ba:	f004 f8d7 	bl	800b66c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f003 ff9d 	bl	800b3fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80074d4:	e180      	b.n	80077d8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d107      	bne.n	80074f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074ee:	e182      	b.n	80077f6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074fa:	d914      	bls.n	8007526 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007502:	3301      	adds	r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007512:	2b03      	cmp	r3, #3
 8007514:	d903      	bls.n	800751e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	220d      	movs	r2, #13
 800751a:	701a      	strb	r2, [r3, #0]
      break;
 800751c:	e16b      	b.n	80077f6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
      break;
 8007524:	e167      	b.n	80077f6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800752c:	f103 020a 	add.w	r2, r3, #10
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007536:	200a      	movs	r0, #10
 8007538:	f004 f898 	bl	800b66c <USBH_Delay>
      break;
 800753c:	e15b      	b.n	80077f6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800754e:	2104      	movs	r1, #4
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007554:	2064      	movs	r0, #100	; 0x64
 8007556:	f004 f889 	bl	800b66c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f003 ff28 	bl	800b3b0 <USBH_LL_GetSpeed>
 8007560:	4603      	mov	r3, r0
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2205      	movs	r2, #5
 800756e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007570:	2100      	movs	r1, #0
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 f92f 	bl	80087d6 <USBH_AllocPipe>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007580:	2180      	movs	r1, #128	; 0x80
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 f927 	bl	80087d6 <USBH_AllocPipe>
 8007588:	4603      	mov	r3, r0
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	7919      	ldrb	r1, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075a4:	b292      	uxth	r2, r2
 80075a6:	9202      	str	r2, [sp, #8]
 80075a8:	2200      	movs	r2, #0
 80075aa:	9201      	str	r2, [sp, #4]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	4603      	mov	r3, r0
 80075b0:	2280      	movs	r2, #128	; 0x80
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 f8e0 	bl	8008778 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	7959      	ldrb	r1, [r3, #5]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075cc:	b292      	uxth	r2, r2
 80075ce:	9202      	str	r2, [sp, #8]
 80075d0:	2200      	movs	r2, #0
 80075d2:	9201      	str	r2, [sp, #4]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	4603      	mov	r3, r0
 80075d8:	2200      	movs	r2, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 f8cc 	bl	8008778 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075e0:	e109      	b.n	80077f6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f90c 	bl	8007800 <USBH_HandleEnum>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f040 80f3 	bne.w	80077dc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007604:	2b01      	cmp	r3, #1
 8007606:	d103      	bne.n	8007610 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2208      	movs	r2, #8
 800760c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800760e:	e0e5      	b.n	80077dc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2207      	movs	r2, #7
 8007614:	701a      	strb	r2, [r3, #0]
      break;
 8007616:	e0e1      	b.n	80077dc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 80de 	beq.w	80077e0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800762a:	2101      	movs	r1, #1
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2208      	movs	r2, #8
 8007634:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007636:	e0d3      	b.n	80077e0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800763e:	b29b      	uxth	r3, r3
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fc20 	bl	8007e88 <USBH_SetCfg>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 80ca 	bne.w	80077e4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2209      	movs	r2, #9
 8007654:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007656:	e0c5      	b.n	80077e4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007666:	2101      	movs	r1, #1
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fc30 	bl	8007ece <USBH_SetFeature>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 80b9 	bne.w	80077e8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	220a      	movs	r2, #10
 800767a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800767c:	e0b4      	b.n	80077e8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	220a      	movs	r2, #10
 8007682:	701a      	strb	r2, [r3, #0]
      break;
 8007684:	e0b0      	b.n	80077e8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80ad 	beq.w	80077ec <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	e016      	b.n	80076ce <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80076a0:	7bfa      	ldrb	r2, [r7, #15]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32de      	adds	r2, #222	; 0xde
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	791a      	ldrb	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d108      	bne.n	80076c8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80076b6:	7bfa      	ldrb	r2, [r7, #15]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	32de      	adds	r2, #222	; 0xde
 80076bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80076c6:	e005      	b.n	80076d4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	3301      	adds	r3, #1
 80076cc:	73fb      	strb	r3, [r7, #15]
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0e5      	beq.n	80076a0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d109      	bne.n	8007704 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2206      	movs	r2, #6
 80076f4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076fc:	2103      	movs	r1, #3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007702:	e073      	b.n	80077ec <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	220d      	movs	r2, #13
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e06f      	b.n	80077ec <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	220d      	movs	r2, #13
 8007710:	701a      	strb	r2, [r3, #0]
      break;
 8007712:	e06b      	b.n	80077ec <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d017      	beq.n	800774e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d103      	bne.n	800773e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	220b      	movs	r2, #11
 800773a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800773c:	e058      	b.n	80077f0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d154      	bne.n	80077f0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	220d      	movs	r2, #13
 800774a:	701a      	strb	r2, [r3, #0]
      break;
 800774c:	e050      	b.n	80077f0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	220d      	movs	r2, #13
 8007752:	701a      	strb	r2, [r3, #0]
      break;
 8007754:	e04c      	b.n	80077f0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d049      	beq.n	80077f4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
      }
      break;
 800776c:	e042      	b.n	80077f4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff fd72 	bl	8007260 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077aa:	2105      	movs	r1, #5
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d107      	bne.n	80077cc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff fe2b 	bl	8007420 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077ca:	e014      	b.n	80077f6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f003 fdb9 	bl	800b344 <USBH_LL_Start>
      break;
 80077d2:	e010      	b.n	80077f6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80077d4:	bf00      	nop
 80077d6:	e00e      	b.n	80077f6 <USBH_Process+0x3b6>
      break;
 80077d8:	bf00      	nop
 80077da:	e00c      	b.n	80077f6 <USBH_Process+0x3b6>
      break;
 80077dc:	bf00      	nop
 80077de:	e00a      	b.n	80077f6 <USBH_Process+0x3b6>
    break;
 80077e0:	bf00      	nop
 80077e2:	e008      	b.n	80077f6 <USBH_Process+0x3b6>
      break;
 80077e4:	bf00      	nop
 80077e6:	e006      	b.n	80077f6 <USBH_Process+0x3b6>
      break;
 80077e8:	bf00      	nop
 80077ea:	e004      	b.n	80077f6 <USBH_Process+0x3b6>
      break;
 80077ec:	bf00      	nop
 80077ee:	e002      	b.n	80077f6 <USBH_Process+0x3b6>
      break;
 80077f0:	bf00      	nop
 80077f2:	e000      	b.n	80077f6 <USBH_Process+0x3b6>
      break;
 80077f4:	bf00      	nop
  }
  return USBH_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af04      	add	r7, sp, #16
 8007806:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800780c:	2301      	movs	r3, #1
 800780e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b07      	cmp	r3, #7
 8007816:	f200 81c1 	bhi.w	8007b9c <USBH_HandleEnum+0x39c>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USBH_HandleEnum+0x20>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007841 	.word	0x08007841
 8007824:	080078ff 	.word	0x080078ff
 8007828:	08007969 	.word	0x08007969
 800782c:	080079f7 	.word	0x080079f7
 8007830:	08007a61 	.word	0x08007a61
 8007834:	08007ad1 	.word	0x08007ad1
 8007838:	08007b17 	.word	0x08007b17
 800783c:	08007b5d 	.word	0x08007b5d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007840:	2108      	movs	r1, #8
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa50 	bl	8007ce8 <USBH_Get_DevDesc>
 8007848:	4603      	mov	r3, r0
 800784a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d130      	bne.n	80078b4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7919      	ldrb	r1, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007876:	b292      	uxth	r2, r2
 8007878:	9202      	str	r2, [sp, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	9201      	str	r2, [sp, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	4603      	mov	r3, r0
 8007882:	2280      	movs	r2, #128	; 0x80
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 ff77 	bl	8008778 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	7959      	ldrb	r1, [r3, #5]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800789e:	b292      	uxth	r2, r2
 80078a0:	9202      	str	r2, [sp, #8]
 80078a2:	2200      	movs	r2, #0
 80078a4:	9201      	str	r2, [sp, #4]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	4603      	mov	r3, r0
 80078aa:	2200      	movs	r2, #0
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 ff63 	bl	8008778 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078b2:	e175      	b.n	8007ba0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	f040 8172 	bne.w	8007ba0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078c2:	3301      	adds	r3, #1
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d903      	bls.n	80078de <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	220d      	movs	r2, #13
 80078da:	701a      	strb	r2, [r3, #0]
      break;
 80078dc:	e160      	b.n	8007ba0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	795b      	ldrb	r3, [r3, #5]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 ff97 	bl	8008818 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	791b      	ldrb	r3, [r3, #4]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 ff91 	bl	8008818 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
      break;
 80078fc:	e150      	b.n	8007ba0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80078fe:	2112      	movs	r1, #18
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f9f1 	bl	8007ce8 <USBH_Get_DevDesc>
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007916:	e145      	b.n	8007ba4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007918:	7bbb      	ldrb	r3, [r7, #14]
 800791a:	2b03      	cmp	r3, #3
 800791c:	f040 8142 	bne.w	8007ba4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007926:	3301      	adds	r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007936:	2b03      	cmp	r3, #3
 8007938:	d903      	bls.n	8007942 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	220d      	movs	r2, #13
 800793e:	701a      	strb	r2, [r3, #0]
      break;
 8007940:	e130      	b.n	8007ba4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	795b      	ldrb	r3, [r3, #5]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 ff65 	bl	8008818 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	791b      	ldrb	r3, [r3, #4]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 ff5f 	bl	8008818 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e11d      	b.n	8007ba4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007968:	2101      	movs	r1, #1
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa68 	bl	8007e40 <USBH_SetAddress>
 8007970:	4603      	mov	r3, r0
 8007972:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d132      	bne.n	80079e0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800797a:	2002      	movs	r0, #2
 800797c:	f003 fe76 	bl	800b66c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2203      	movs	r2, #3
 800798c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7919      	ldrb	r1, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079a2:	b292      	uxth	r2, r2
 80079a4:	9202      	str	r2, [sp, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	9201      	str	r2, [sp, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4603      	mov	r3, r0
 80079ae:	2280      	movs	r2, #128	; 0x80
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fee1 	bl	8008778 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7959      	ldrb	r1, [r3, #5]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079ca:	b292      	uxth	r2, r2
 80079cc:	9202      	str	r2, [sp, #8]
 80079ce:	2200      	movs	r2, #0
 80079d0:	9201      	str	r2, [sp, #4]
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	4603      	mov	r3, r0
 80079d6:	2200      	movs	r2, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fecd 	bl	8008778 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80079de:	e0e3      	b.n	8007ba8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	f040 80e0 	bne.w	8007ba8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	220d      	movs	r2, #13
 80079ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	705a      	strb	r2, [r3, #1]
      break;
 80079f4:	e0d8      	b.n	8007ba8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80079f6:	2109      	movs	r1, #9
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f99d 	bl	8007d38 <USBH_Get_CfgDesc>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d103      	bne.n	8007a10 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a0e:	e0cd      	b.n	8007bac <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	f040 80ca 	bne.w	8007bac <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a1e:	3301      	adds	r3, #1
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d903      	bls.n	8007a3a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	220d      	movs	r2, #13
 8007a36:	701a      	strb	r2, [r3, #0]
      break;
 8007a38:	e0b8      	b.n	8007bac <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	795b      	ldrb	r3, [r3, #5]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fee9 	bl	8008818 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	791b      	ldrb	r3, [r3, #4]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fee3 	bl	8008818 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
      break;
 8007a5e:	e0a5      	b.n	8007bac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f965 	bl	8007d38 <USBH_Get_CfgDesc>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d103      	bne.n	8007a80 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2205      	movs	r2, #5
 8007a7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a7e:	e097      	b.n	8007bb0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	f040 8094 	bne.w	8007bb0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a8e:	3301      	adds	r3, #1
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d903      	bls.n	8007aaa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	220d      	movs	r2, #13
 8007aa6:	701a      	strb	r2, [r3, #0]
      break;
 8007aa8:	e082      	b.n	8007bb0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	795b      	ldrb	r3, [r3, #5]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 feb1 	bl	8008818 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	791b      	ldrb	r3, [r3, #4]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 feab 	bl	8008818 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	701a      	strb	r2, [r3, #0]
      break;
 8007ace:	e06f      	b.n	8007bb0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d019      	beq.n	8007b0e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ae6:	23ff      	movs	r3, #255	; 0xff
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f949 	bl	8007d80 <USBH_Get_StringDesc>
 8007aee:	4603      	mov	r3, r0
 8007af0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2206      	movs	r2, #6
 8007afc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007afe:	e059      	b.n	8007bb4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d156      	bne.n	8007bb4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2206      	movs	r2, #6
 8007b0a:	705a      	strb	r2, [r3, #1]
      break;
 8007b0c:	e052      	b.n	8007bb4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2206      	movs	r2, #6
 8007b12:	705a      	strb	r2, [r3, #1]
      break;
 8007b14:	e04e      	b.n	8007bb4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d019      	beq.n	8007b54 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b2c:	23ff      	movs	r3, #255	; 0xff
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f926 	bl	8007d80 <USBH_Get_StringDesc>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d103      	bne.n	8007b46 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2207      	movs	r2, #7
 8007b42:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b44:	e038      	b.n	8007bb8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d135      	bne.n	8007bb8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2207      	movs	r2, #7
 8007b50:	705a      	strb	r2, [r3, #1]
      break;
 8007b52:	e031      	b.n	8007bb8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2207      	movs	r2, #7
 8007b58:	705a      	strb	r2, [r3, #1]
      break;
 8007b5a:	e02d      	b.n	8007bb8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d017      	beq.n	8007b96 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b72:	23ff      	movs	r3, #255	; 0xff
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f903 	bl	8007d80 <USBH_Get_StringDesc>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b88:	e018      	b.n	8007bbc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d115      	bne.n	8007bbc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
      break;
 8007b94:	e012      	b.n	8007bbc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9a:	e00f      	b.n	8007bbc <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e00e      	b.n	8007bbe <USBH_HandleEnum+0x3be>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e00c      	b.n	8007bbe <USBH_HandleEnum+0x3be>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e00a      	b.n	8007bbe <USBH_HandleEnum+0x3be>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e008      	b.n	8007bbe <USBH_HandleEnum+0x3be>
      break;
 8007bac:	bf00      	nop
 8007bae:	e006      	b.n	8007bbe <USBH_HandleEnum+0x3be>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e004      	b.n	8007bbe <USBH_HandleEnum+0x3be>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e002      	b.n	8007bbe <USBH_HandleEnum+0x3be>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e000      	b.n	8007bbe <USBH_HandleEnum+0x3be>
      break;
 8007bbc:	bf00      	nop
  }
  return Status;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f804 	bl	8007c0a <USBH_HandleSof>
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b0b      	cmp	r3, #11
 8007c1a:	d10a      	bne.n	8007c32 <USBH_HandleSof+0x28>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d005      	beq.n	8007c32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	4798      	blx	r3
  }
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007c4a:	bf00      	nop
}
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c66:	bf00      	nop
}
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f003 fb5a 	bl	800b37a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	791b      	ldrb	r3, [r3, #4]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fda3 	bl	8008818 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	795b      	ldrb	r3, [r3, #5]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fd9d 	bl	8008818 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	4613      	mov	r3, r2
 8007d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d06:	2100      	movs	r1, #0
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f864 	bl	8007dd6 <USBH_GetDescriptor>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d24:	78fa      	ldrb	r2, [r7, #3]
 8007d26:	b292      	uxth	r2, r2
 8007d28:	4619      	mov	r1, r3
 8007d2a:	f000 f918 	bl	8007f5e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	331c      	adds	r3, #28
 8007d48:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d4a:	887b      	ldrh	r3, [r7, #2]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d54:	2100      	movs	r1, #0
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f83d 	bl	8007dd6 <USBH_GetDescriptor>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	72fb      	strb	r3, [r7, #11]
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d107      	bne.n	8007d76 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d6c:	887a      	ldrh	r2, [r7, #2]
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f964 	bl	800803e <USBH_ParseCfgDesc>
  }

  return status;
 8007d76:	7afb      	ldrb	r3, [r7, #11]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b088      	sub	sp, #32
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	607a      	str	r2, [r7, #4]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	72fb      	strb	r3, [r7, #11]
 8007d90:	4613      	mov	r3, r2
 8007d92:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d9c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007da4:	893b      	ldrh	r3, [r7, #8]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	460b      	mov	r3, r1
 8007daa:	2100      	movs	r1, #0
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f812 	bl	8007dd6 <USBH_GetDescriptor>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d107      	bne.n	8007dcc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007dc2:	893a      	ldrh	r2, [r7, #8]
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fa37 	bl	800823a <USBH_ParseStringDesc>
  }

  return status;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	607b      	str	r3, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	72fb      	strb	r3, [r7, #11]
 8007de4:	4613      	mov	r3, r2
 8007de6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	789b      	ldrb	r3, [r3, #2]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d11c      	bne.n	8007e2a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2206      	movs	r2, #6
 8007e00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	893a      	ldrh	r2, [r7, #8]
 8007e06:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e08:	893b      	ldrh	r3, [r7, #8]
 8007e0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e12:	d104      	bne.n	8007e1e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f240 4209 	movw	r2, #1033	; 0x409
 8007e1a:	829a      	strh	r2, [r3, #20]
 8007e1c:	e002      	b.n	8007e24 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8b3a      	ldrh	r2, [r7, #24]
 8007e28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e2a:	8b3b      	ldrh	r3, [r7, #24]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 fa50 	bl	80082d6 <USBH_CtlReq>
 8007e36:	4603      	mov	r3, r0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d10f      	bne.n	8007e74 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2205      	movs	r2, #5
 8007e5e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e74:	2200      	movs	r2, #0
 8007e76:	2100      	movs	r1, #0
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa2c 	bl	80082d6 <USBH_CtlReq>
 8007e7e:	4603      	mov	r3, r0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	789b      	ldrb	r3, [r3, #2]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d10e      	bne.n	8007eba <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2209      	movs	r2, #9
 8007ea6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	887a      	ldrh	r2, [r7, #2]
 8007eac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa09 	bl	80082d6 <USBH_CtlReq>
 8007ec4:	4603      	mov	r3, r0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	789b      	ldrb	r3, [r3, #2]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d10f      	bne.n	8007f02 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2203      	movs	r2, #3
 8007eec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007f02:	2200      	movs	r2, #0
 8007f04:	2100      	movs	r1, #0
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f9e5 	bl	80082d6 <USBH_CtlReq>
 8007f0c:	4603      	mov	r3, r0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	789b      	ldrb	r3, [r3, #2]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d10f      	bne.n	8007f4a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f9c1 	bl	80082d6 <USBH_CtlReq>
 8007f54:	4603      	mov	r3, r0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b085      	sub	sp, #20
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	785a      	ldrb	r2, [r3, #1]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	3302      	adds	r3, #2
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	3303      	adds	r3, #3
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4313      	orrs	r3, r2
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	791a      	ldrb	r2, [r3, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	795a      	ldrb	r2, [r3, #5]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	799a      	ldrb	r2, [r3, #6]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	79da      	ldrb	r2, [r3, #7]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d939      	bls.n	8008032 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	3309      	adds	r3, #9
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	330a      	adds	r3, #10
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	330b      	adds	r3, #11
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	021b      	lsls	r3, r3, #8
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	330d      	adds	r3, #13
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	b29b      	uxth	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b29a      	uxth	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	7b9a      	ldrb	r2, [r3, #14]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	7bda      	ldrb	r2, [r3, #15]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	7c1a      	ldrb	r2, [r3, #16]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	7c5a      	ldrb	r2, [r3, #17]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	745a      	strb	r2, [r3, #17]
  }
}
 8008032:	bf00      	nop
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b08a      	sub	sp, #40	; 0x28
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	4613      	mov	r3, r2
 800804a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	785a      	ldrb	r2, [r3, #1]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	3302      	adds	r3, #2
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29a      	uxth	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	3303      	adds	r3, #3
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b29b      	uxth	r3, r3
 8008084:	4313      	orrs	r3, r2
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	791a      	ldrb	r2, [r3, #4]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	795a      	ldrb	r2, [r3, #5]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	799a      	ldrb	r2, [r3, #6]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	79da      	ldrb	r2, [r3, #7]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	7a1a      	ldrb	r2, [r3, #8]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	2b09      	cmp	r3, #9
 80080b8:	d95f      	bls.n	800817a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80080ba:	2309      	movs	r3, #9
 80080bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080c2:	e051      	b.n	8008168 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080c4:	f107 0316 	add.w	r3, r7, #22
 80080c8:	4619      	mov	r1, r3
 80080ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080cc:	f000 f8e8 	bl	80082a0 <USBH_GetNextDesc>
 80080d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d146      	bne.n	8008168 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80080da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080de:	221a      	movs	r2, #26
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	3308      	adds	r3, #8
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	3302      	adds	r3, #2
 80080ec:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80080ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080f0:	69f8      	ldr	r0, [r7, #28]
 80080f2:	f000 f846 	bl	8008182 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008100:	e022      	b.n	8008148 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008102:	f107 0316 	add.w	r3, r7, #22
 8008106:	4619      	mov	r1, r3
 8008108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800810a:	f000 f8c9 	bl	80082a0 <USBH_GetNextDesc>
 800810e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b05      	cmp	r3, #5
 8008116:	d117      	bne.n	8008148 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800811c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008120:	3201      	adds	r2, #1
 8008122:	00d2      	lsls	r2, r2, #3
 8008124:	211a      	movs	r1, #26
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	4413      	add	r3, r2
 800812c:	3308      	adds	r3, #8
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	3304      	adds	r3, #4
 8008134:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008138:	69b8      	ldr	r0, [r7, #24]
 800813a:	f000 f851 	bl	80081e0 <USBH_ParseEPDesc>
            ep_ix++;
 800813e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008142:	3301      	adds	r3, #1
 8008144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	791b      	ldrb	r3, [r3, #4]
 800814c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008150:	429a      	cmp	r2, r3
 8008152:	d204      	bcs.n	800815e <USBH_ParseCfgDesc+0x120>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	885a      	ldrh	r2, [r3, #2]
 8008158:	8afb      	ldrh	r3, [r7, #22]
 800815a:	429a      	cmp	r2, r3
 800815c:	d8d1      	bhi.n	8008102 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800815e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008162:	3301      	adds	r3, #1
 8008164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800816c:	2b01      	cmp	r3, #1
 800816e:	d804      	bhi.n	800817a <USBH_ParseCfgDesc+0x13c>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	885a      	ldrh	r2, [r3, #2]
 8008174:	8afb      	ldrh	r3, [r7, #22]
 8008176:	429a      	cmp	r2, r3
 8008178:	d8a4      	bhi.n	80080c4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800817a:	bf00      	nop
 800817c:	3728      	adds	r7, #40	; 0x28
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	785a      	ldrb	r2, [r3, #1]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	789a      	ldrb	r2, [r3, #2]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	78da      	ldrb	r2, [r3, #3]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	791a      	ldrb	r2, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	795a      	ldrb	r2, [r3, #5]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	799a      	ldrb	r2, [r3, #6]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	79da      	ldrb	r2, [r3, #7]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	7a1a      	ldrb	r2, [r3, #8]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	721a      	strb	r2, [r3, #8]
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	785a      	ldrb	r2, [r3, #1]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	789a      	ldrb	r2, [r3, #2]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	78da      	ldrb	r2, [r3, #3]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	3304      	adds	r3, #4
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	b29a      	uxth	r2, r3
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	3305      	adds	r3, #5
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	b29b      	uxth	r3, r3
 800821a:	021b      	lsls	r3, r3, #8
 800821c:	b29b      	uxth	r3, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	b29a      	uxth	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	799a      	ldrb	r2, [r3, #6]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	719a      	strb	r2, [r3, #6]
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800823a:	b480      	push	{r7}
 800823c:	b087      	sub	sp, #28
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	4613      	mov	r3, r2
 8008246:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3301      	adds	r3, #1
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b03      	cmp	r3, #3
 8008250:	d120      	bne.n	8008294 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	1e9a      	subs	r2, r3, #2
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	4293      	cmp	r3, r2
 800825c:	bf28      	it	cs
 800825e:	4613      	movcs	r3, r2
 8008260:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	3302      	adds	r3, #2
 8008266:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008268:	2300      	movs	r3, #0
 800826a:	82fb      	strh	r3, [r7, #22]
 800826c:	e00b      	b.n	8008286 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800826e:	8afb      	ldrh	r3, [r7, #22]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	781a      	ldrb	r2, [r3, #0]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	701a      	strb	r2, [r3, #0]
      pdest++;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	3301      	adds	r3, #1
 800827e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008280:	8afb      	ldrh	r3, [r7, #22]
 8008282:	3302      	adds	r3, #2
 8008284:	82fb      	strh	r3, [r7, #22]
 8008286:	8afa      	ldrh	r2, [r7, #22]
 8008288:	8abb      	ldrh	r3, [r7, #20]
 800828a:	429a      	cmp	r2, r3
 800828c:	d3ef      	bcc.n	800826e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	701a      	strb	r2, [r3, #0]
  }
}
 8008294:	bf00      	nop
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	881a      	ldrh	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4413      	add	r3, r2
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4413      	add	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082c8:	68fb      	ldr	r3, [r7, #12]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b086      	sub	sp, #24
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	4613      	mov	r3, r2
 80082e2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80082e4:	2301      	movs	r3, #1
 80082e6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	789b      	ldrb	r3, [r3, #2]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d002      	beq.n	80082f6 <USBH_CtlReq+0x20>
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d00f      	beq.n	8008314 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80082f4:	e027      	b.n	8008346 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	88fa      	ldrh	r2, [r7, #6]
 8008300:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2202      	movs	r2, #2
 800830c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800830e:	2301      	movs	r3, #1
 8008310:	75fb      	strb	r3, [r7, #23]
      break;
 8008312:	e018      	b.n	8008346 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 f81b 	bl	8008350 <USBH_HandleControl>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <USBH_CtlReq+0x54>
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	2b03      	cmp	r3, #3
 8008328:	d106      	bne.n	8008338 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	761a      	strb	r2, [r3, #24]
      break;
 8008336:	e005      	b.n	8008344 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008338:	7dfb      	ldrb	r3, [r7, #23]
 800833a:	2b02      	cmp	r3, #2
 800833c:	d102      	bne.n	8008344 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2201      	movs	r2, #1
 8008342:	709a      	strb	r2, [r3, #2]
      break;
 8008344:	bf00      	nop
  }
  return status;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af02      	add	r7, sp, #8
 8008356:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008358:	2301      	movs	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800835c:	2300      	movs	r3, #0
 800835e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7e1b      	ldrb	r3, [r3, #24]
 8008364:	3b01      	subs	r3, #1
 8008366:	2b0a      	cmp	r3, #10
 8008368:	f200 8156 	bhi.w	8008618 <USBH_HandleControl+0x2c8>
 800836c:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <USBH_HandleControl+0x24>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	080083a1 	.word	0x080083a1
 8008378:	080083bb 	.word	0x080083bb
 800837c:	08008425 	.word	0x08008425
 8008380:	0800844b 	.word	0x0800844b
 8008384:	08008483 	.word	0x08008483
 8008388:	080084ad 	.word	0x080084ad
 800838c:	080084ff 	.word	0x080084ff
 8008390:	08008521 	.word	0x08008521
 8008394:	0800855d 	.word	0x0800855d
 8008398:	08008583 	.word	0x08008583
 800839c:	080085c1 	.word	0x080085c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f103 0110 	add.w	r1, r3, #16
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	795b      	ldrb	r3, [r3, #5]
 80083aa:	461a      	mov	r2, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f943 	bl	8008638 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2202      	movs	r2, #2
 80083b6:	761a      	strb	r2, [r3, #24]
      break;
 80083b8:	e139      	b.n	800862e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	795b      	ldrb	r3, [r3, #5]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f003 f8c9 	bl	800b558 <USBH_LL_GetURBState>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d11e      	bne.n	800840e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	7c1b      	ldrb	r3, [r3, #16]
 80083d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	8adb      	ldrh	r3, [r3, #22]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80083e2:	7b7b      	ldrb	r3, [r7, #13]
 80083e4:	2b80      	cmp	r3, #128	; 0x80
 80083e6:	d103      	bne.n	80083f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2203      	movs	r2, #3
 80083ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083ee:	e115      	b.n	800861c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2205      	movs	r2, #5
 80083f4:	761a      	strb	r2, [r3, #24]
      break;
 80083f6:	e111      	b.n	800861c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80083f8:	7b7b      	ldrb	r3, [r7, #13]
 80083fa:	2b80      	cmp	r3, #128	; 0x80
 80083fc:	d103      	bne.n	8008406 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2209      	movs	r2, #9
 8008402:	761a      	strb	r2, [r3, #24]
      break;
 8008404:	e10a      	b.n	800861c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2207      	movs	r2, #7
 800840a:	761a      	strb	r2, [r3, #24]
      break;
 800840c:	e106      	b.n	800861c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b04      	cmp	r3, #4
 8008412:	d003      	beq.n	800841c <USBH_HandleControl+0xcc>
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b02      	cmp	r3, #2
 8008418:	f040 8100 	bne.w	800861c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	220b      	movs	r2, #11
 8008420:	761a      	strb	r2, [r3, #24]
      break;
 8008422:	e0fb      	b.n	800861c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800842a:	b29a      	uxth	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6899      	ldr	r1, [r3, #8]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	899a      	ldrh	r2, [r3, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	791b      	ldrb	r3, [r3, #4]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f93a 	bl	80086b6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2204      	movs	r2, #4
 8008446:	761a      	strb	r2, [r3, #24]
      break;
 8008448:	e0f1      	b.n	800862e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	791b      	ldrb	r3, [r3, #4]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f003 f881 	bl	800b558 <USBH_LL_GetURBState>
 8008456:	4603      	mov	r3, r0
 8008458:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d102      	bne.n	8008466 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2209      	movs	r2, #9
 8008464:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b05      	cmp	r3, #5
 800846a:	d102      	bne.n	8008472 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800846c:	2303      	movs	r3, #3
 800846e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008470:	e0d6      	b.n	8008620 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b04      	cmp	r3, #4
 8008476:	f040 80d3 	bne.w	8008620 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	220b      	movs	r2, #11
 800847e:	761a      	strb	r2, [r3, #24]
      break;
 8008480:	e0ce      	b.n	8008620 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6899      	ldr	r1, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	899a      	ldrh	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	795b      	ldrb	r3, [r3, #5]
 800848e:	2001      	movs	r0, #1
 8008490:	9000      	str	r0, [sp, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f8ea 	bl	800866c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2206      	movs	r2, #6
 80084a8:	761a      	strb	r2, [r3, #24]
      break;
 80084aa:	e0c0      	b.n	800862e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	795b      	ldrb	r3, [r3, #5]
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f003 f850 	bl	800b558 <USBH_LL_GetURBState>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d103      	bne.n	80084ca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2207      	movs	r2, #7
 80084c6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084c8:	e0ac      	b.n	8008624 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b05      	cmp	r3, #5
 80084ce:	d105      	bne.n	80084dc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	220c      	movs	r2, #12
 80084d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80084d6:	2303      	movs	r3, #3
 80084d8:	73fb      	strb	r3, [r7, #15]
      break;
 80084da:	e0a3      	b.n	8008624 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d103      	bne.n	80084ea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2205      	movs	r2, #5
 80084e6:	761a      	strb	r2, [r3, #24]
      break;
 80084e8:	e09c      	b.n	8008624 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	f040 8099 	bne.w	8008624 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	220b      	movs	r2, #11
 80084f6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80084f8:	2302      	movs	r3, #2
 80084fa:	73fb      	strb	r3, [r7, #15]
      break;
 80084fc:	e092      	b.n	8008624 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	791b      	ldrb	r3, [r3, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f8d5 	bl	80086b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2208      	movs	r2, #8
 800851c:	761a      	strb	r2, [r3, #24]

      break;
 800851e:	e086      	b.n	800862e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	791b      	ldrb	r3, [r3, #4]
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f003 f816 	bl	800b558 <USBH_LL_GetURBState>
 800852c:	4603      	mov	r3, r0
 800852e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d105      	bne.n	8008542 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	220d      	movs	r2, #13
 800853a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008540:	e072      	b.n	8008628 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	2b04      	cmp	r3, #4
 8008546:	d103      	bne.n	8008550 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	220b      	movs	r2, #11
 800854c:	761a      	strb	r2, [r3, #24]
      break;
 800854e:	e06b      	b.n	8008628 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	2b05      	cmp	r3, #5
 8008554:	d168      	bne.n	8008628 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008556:	2303      	movs	r3, #3
 8008558:	73fb      	strb	r3, [r7, #15]
      break;
 800855a:	e065      	b.n	8008628 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	795b      	ldrb	r3, [r3, #5]
 8008560:	2201      	movs	r2, #1
 8008562:	9200      	str	r2, [sp, #0]
 8008564:	2200      	movs	r2, #0
 8008566:	2100      	movs	r1, #0
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f87f 	bl	800866c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008574:	b29a      	uxth	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	220a      	movs	r2, #10
 800857e:	761a      	strb	r2, [r3, #24]
      break;
 8008580:	e055      	b.n	800862e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	795b      	ldrb	r3, [r3, #5]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f002 ffe5 	bl	800b558 <USBH_LL_GetURBState>
 800858e:	4603      	mov	r3, r0
 8008590:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d105      	bne.n	80085a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	220d      	movs	r2, #13
 80085a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085a2:	e043      	b.n	800862c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d103      	bne.n	80085b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2209      	movs	r2, #9
 80085ae:	761a      	strb	r2, [r3, #24]
      break;
 80085b0:	e03c      	b.n	800862c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d139      	bne.n	800862c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	220b      	movs	r2, #11
 80085bc:	761a      	strb	r2, [r3, #24]
      break;
 80085be:	e035      	b.n	800862c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	7e5b      	ldrb	r3, [r3, #25]
 80085c4:	3301      	adds	r3, #1
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	765a      	strb	r2, [r3, #25]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7e5b      	ldrb	r3, [r3, #25]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d806      	bhi.n	80085e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80085e0:	e025      	b.n	800862e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085e8:	2106      	movs	r1, #6
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	795b      	ldrb	r3, [r3, #5]
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f90c 	bl	8008818 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	791b      	ldrb	r3, [r3, #4]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f906 	bl	8008818 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008612:	2302      	movs	r3, #2
 8008614:	73fb      	strb	r3, [r7, #15]
      break;
 8008616:	e00a      	b.n	800862e <USBH_HandleControl+0x2de>

    default:
      break;
 8008618:	bf00      	nop
 800861a:	e008      	b.n	800862e <USBH_HandleControl+0x2de>
      break;
 800861c:	bf00      	nop
 800861e:	e006      	b.n	800862e <USBH_HandleControl+0x2de>
      break;
 8008620:	bf00      	nop
 8008622:	e004      	b.n	800862e <USBH_HandleControl+0x2de>
      break;
 8008624:	bf00      	nop
 8008626:	e002      	b.n	800862e <USBH_HandleControl+0x2de>
      break;
 8008628:	bf00      	nop
 800862a:	e000      	b.n	800862e <USBH_HandleControl+0x2de>
      break;
 800862c:	bf00      	nop
  }

  return status;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af04      	add	r7, sp, #16
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008646:	79f9      	ldrb	r1, [r7, #7]
 8008648:	2300      	movs	r3, #0
 800864a:	9303      	str	r3, [sp, #12]
 800864c:	2308      	movs	r3, #8
 800864e:	9302      	str	r3, [sp, #8]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	2300      	movs	r3, #0
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	2300      	movs	r3, #0
 800865a:	2200      	movs	r2, #0
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f002 ff4a 	bl	800b4f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af04      	add	r7, sp, #16
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4611      	mov	r1, r2
 8008678:	461a      	mov	r2, r3
 800867a:	460b      	mov	r3, r1
 800867c:	80fb      	strh	r3, [r7, #6]
 800867e:	4613      	mov	r3, r2
 8008680:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008690:	7979      	ldrb	r1, [r7, #5]
 8008692:	7e3b      	ldrb	r3, [r7, #24]
 8008694:	9303      	str	r3, [sp, #12]
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	9302      	str	r3, [sp, #8]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	2301      	movs	r3, #1
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	2200      	movs	r2, #0
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f002 ff25 	bl	800b4f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b088      	sub	sp, #32
 80086ba:	af04      	add	r7, sp, #16
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	4611      	mov	r1, r2
 80086c2:	461a      	mov	r2, r3
 80086c4:	460b      	mov	r3, r1
 80086c6:	80fb      	strh	r3, [r7, #6]
 80086c8:	4613      	mov	r3, r2
 80086ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086cc:	7979      	ldrb	r1, [r7, #5]
 80086ce:	2300      	movs	r3, #0
 80086d0:	9303      	str	r3, [sp, #12]
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	9302      	str	r3, [sp, #8]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	2301      	movs	r3, #1
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2300      	movs	r3, #0
 80086e0:	2201      	movs	r2, #1
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f002 ff07 	bl	800b4f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80086e8:	2300      	movs	r3, #0

}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b088      	sub	sp, #32
 80086f6:	af04      	add	r7, sp, #16
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	4611      	mov	r1, r2
 80086fe:	461a      	mov	r2, r3
 8008700:	460b      	mov	r3, r1
 8008702:	80fb      	strh	r3, [r7, #6]
 8008704:	4613      	mov	r3, r2
 8008706:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008716:	7979      	ldrb	r1, [r7, #5]
 8008718:	7e3b      	ldrb	r3, [r7, #24]
 800871a:	9303      	str	r3, [sp, #12]
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	2301      	movs	r3, #1
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	2302      	movs	r3, #2
 800872a:	2200      	movs	r2, #0
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f002 fee2 	bl	800b4f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af04      	add	r7, sp, #16
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4611      	mov	r1, r2
 8008748:	461a      	mov	r2, r3
 800874a:	460b      	mov	r3, r1
 800874c:	80fb      	strh	r3, [r7, #6]
 800874e:	4613      	mov	r3, r2
 8008750:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008752:	7979      	ldrb	r1, [r7, #5]
 8008754:	2300      	movs	r3, #0
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	88fb      	ldrh	r3, [r7, #6]
 800875a:	9302      	str	r3, [sp, #8]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	2301      	movs	r3, #1
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	2302      	movs	r3, #2
 8008766:	2201      	movs	r2, #1
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f002 fec4 	bl	800b4f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af04      	add	r7, sp, #16
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	4608      	mov	r0, r1
 8008782:	4611      	mov	r1, r2
 8008784:	461a      	mov	r2, r3
 8008786:	4603      	mov	r3, r0
 8008788:	70fb      	strb	r3, [r7, #3]
 800878a:	460b      	mov	r3, r1
 800878c:	70bb      	strb	r3, [r7, #2]
 800878e:	4613      	mov	r3, r2
 8008790:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008792:	7878      	ldrb	r0, [r7, #1]
 8008794:	78ba      	ldrb	r2, [r7, #2]
 8008796:	78f9      	ldrb	r1, [r7, #3]
 8008798:	8b3b      	ldrh	r3, [r7, #24]
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	7d3b      	ldrb	r3, [r7, #20]
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	7c3b      	ldrb	r3, [r7, #16]
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	4603      	mov	r3, r0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f002 fe57 	bl	800b45a <USBH_LL_OpenPipe>

  return USBH_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f002 fe76 	bl	800b4b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f836 	bl	8008854 <USBH_GetFreePipe>
 80087e8:	4603      	mov	r3, r0
 80087ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80087ec:	89fb      	ldrh	r3, [r7, #14]
 80087ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00a      	beq.n	800880c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	89fb      	ldrh	r3, [r7, #14]
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	33e0      	adds	r3, #224	; 0xe0
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	440b      	add	r3, r1
 800880a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800880c:	89fb      	ldrh	r3, [r7, #14]
 800880e:	b2db      	uxtb	r3, r3
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	2b0a      	cmp	r3, #10
 8008828:	d80d      	bhi.n	8008846 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	33e0      	adds	r3, #224	; 0xe0
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800883c:	6879      	ldr	r1, [r7, #4]
 800883e:	33e0      	adds	r3, #224	; 0xe0
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008860:	2300      	movs	r3, #0
 8008862:	73fb      	strb	r3, [r7, #15]
 8008864:	e00f      	b.n	8008886 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	33e0      	adds	r3, #224	; 0xe0
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	b29b      	uxth	r3, r3
 800887e:	e007      	b.n	8008890 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	3301      	adds	r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b0a      	cmp	r3, #10
 800888a:	d9ec      	bls.n	8008866 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800888c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	4a08      	ldr	r2, [pc, #32]	; (80088cc <disk_status+0x30>)
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	79fa      	ldrb	r2, [r7, #7]
 80088b4:	4905      	ldr	r1, [pc, #20]	; (80088cc <disk_status+0x30>)
 80088b6:	440a      	add	r2, r1
 80088b8:	7a12      	ldrb	r2, [r2, #8]
 80088ba:	4610      	mov	r0, r2
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	200007cc 	.word	0x200007cc

080088d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	4a0d      	ldr	r2, [pc, #52]	; (8008918 <disk_initialize+0x48>)
 80088e2:	5cd3      	ldrb	r3, [r2, r3]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d111      	bne.n	800890c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	4a0b      	ldr	r2, [pc, #44]	; (8008918 <disk_initialize+0x48>)
 80088ec:	2101      	movs	r1, #1
 80088ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	4a09      	ldr	r2, [pc, #36]	; (8008918 <disk_initialize+0x48>)
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	79fa      	ldrb	r2, [r7, #7]
 80088fe:	4906      	ldr	r1, [pc, #24]	; (8008918 <disk_initialize+0x48>)
 8008900:	440a      	add	r2, r1
 8008902:	7a12      	ldrb	r2, [r2, #8]
 8008904:	4610      	mov	r0, r2
 8008906:	4798      	blx	r3
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	200007cc 	.word	0x200007cc

0800891c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800891c:	b590      	push	{r4, r7, lr}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60b9      	str	r1, [r7, #8]
 8008924:	607a      	str	r2, [r7, #4]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	4a0a      	ldr	r2, [pc, #40]	; (8008958 <disk_read+0x3c>)
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	689c      	ldr	r4, [r3, #8]
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	4a07      	ldr	r2, [pc, #28]	; (8008958 <disk_read+0x3c>)
 800893c:	4413      	add	r3, r2
 800893e:	7a18      	ldrb	r0, [r3, #8]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	47a0      	blx	r4
 8008948:	4603      	mov	r3, r0
 800894a:	75fb      	strb	r3, [r7, #23]
  return res;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
}
 800894e:	4618      	mov	r0, r3
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	bd90      	pop	{r4, r7, pc}
 8008956:	bf00      	nop
 8008958:	200007cc 	.word	0x200007cc

0800895c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800895c:	b590      	push	{r4, r7, lr}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	4a0a      	ldr	r2, [pc, #40]	; (8008998 <disk_write+0x3c>)
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	68dc      	ldr	r4, [r3, #12]
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	4a07      	ldr	r2, [pc, #28]	; (8008998 <disk_write+0x3c>)
 800897c:	4413      	add	r3, r2
 800897e:	7a18      	ldrb	r0, [r3, #8]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	47a0      	blx	r4
 8008988:	4603      	mov	r3, r0
 800898a:	75fb      	strb	r3, [r7, #23]
  return res;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	bd90      	pop	{r4, r7, pc}
 8008996:	bf00      	nop
 8008998:	200007cc 	.word	0x200007cc

0800899c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	603a      	str	r2, [r7, #0]
 80089a6:	71fb      	strb	r3, [r7, #7]
 80089a8:	460b      	mov	r3, r1
 80089aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <disk_ioctl+0x38>)
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	79fa      	ldrb	r2, [r7, #7]
 80089ba:	4906      	ldr	r1, [pc, #24]	; (80089d4 <disk_ioctl+0x38>)
 80089bc:	440a      	add	r2, r1
 80089be:	7a10      	ldrb	r0, [r2, #8]
 80089c0:	79b9      	ldrb	r1, [r7, #6]
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	4798      	blx	r3
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	200007cc 	.word	0x200007cc

080089d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3301      	adds	r3, #1
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80089e8:	89fb      	ldrh	r3, [r7, #14]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	b21a      	sxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	b21b      	sxth	r3, r3
 80089f4:	4313      	orrs	r3, r2
 80089f6:	b21b      	sxth	r3, r3
 80089f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80089fa:	89fb      	ldrh	r3, [r7, #14]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3303      	adds	r3, #3
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	021b      	lsls	r3, r3, #8
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	3202      	adds	r2, #2
 8008a20:	7812      	ldrb	r2, [r2, #0]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	021b      	lsls	r3, r3, #8
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	3201      	adds	r2, #1
 8008a2e:	7812      	ldrb	r2, [r2, #0]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008a40:	68fb      	ldr	r3, [r7, #12]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	887a      	ldrh	r2, [r7, #2]
 8008a62:	b2d2      	uxtb	r2, r2
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	887b      	ldrh	r3, [r7, #2]
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	887a      	ldrh	r2, [r7, #2]
 8008a74:	b2d2      	uxtb	r2, r2
 8008a76:	701a      	strb	r2, [r3, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	b2d2      	uxtb	r2, r2
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	0a1b      	lsrs	r3, r3, #8
 8008a9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	607a      	str	r2, [r7, #4]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	b2d2      	uxtb	r2, r2
 8008aaa:	701a      	strb	r2, [r3, #0]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	0a1b      	lsrs	r3, r3, #8
 8008ab0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	1c5a      	adds	r2, r3, #1
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	0a1b      	lsrs	r3, r3, #8
 8008ac2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	607a      	str	r2, [r7, #4]
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	701a      	strb	r2, [r3, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00d      	beq.n	8008b12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	1c53      	adds	r3, r2, #1
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	1c59      	adds	r1, r3, #1
 8008b00:	6179      	str	r1, [r7, #20]
 8008b02:	7812      	ldrb	r2, [r2, #0]
 8008b04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	607b      	str	r3, [r7, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f1      	bne.n	8008af6 <mem_cpy+0x1a>
	}
}
 8008b12:	bf00      	nop
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008b1e:	b480      	push	{r7}
 8008b20:	b087      	sub	sp, #28
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	617a      	str	r2, [r7, #20]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	607b      	str	r3, [r7, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f3      	bne.n	8008b2e <mem_set+0x10>
}
 8008b46:	bf00      	nop
 8008b48:	bf00      	nop
 8008b4a:	371c      	adds	r7, #28
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008b54:	b480      	push	{r7}
 8008b56:	b089      	sub	sp, #36	; 0x24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	61fa      	str	r2, [r7, #28]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	61ba      	str	r2, [r7, #24]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	1acb      	subs	r3, r1, r3
 8008b80:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	607b      	str	r3, [r7, #4]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <mem_cmp+0x40>
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0eb      	beq.n	8008b6c <mem_cmp+0x18>

	return r;
 8008b94:	697b      	ldr	r3, [r7, #20]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3724      	adds	r7, #36	; 0x24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008bac:	e002      	b.n	8008bb4 <chk_chr+0x12>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	607b      	str	r3, [r7, #4]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d005      	beq.n	8008bc8 <chk_chr+0x26>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d1f2      	bne.n	8008bae <chk_chr+0xc>
	return *str;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	781b      	ldrb	r3, [r3, #0]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008be2:	2300      	movs	r3, #0
 8008be4:	60bb      	str	r3, [r7, #8]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	e029      	b.n	8008c40 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008bec:	4a27      	ldr	r2, [pc, #156]	; (8008c8c <chk_lock+0xb4>)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	011b      	lsls	r3, r3, #4
 8008bf2:	4413      	add	r3, r2
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01d      	beq.n	8008c36 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008bfa:	4a24      	ldr	r2, [pc, #144]	; (8008c8c <chk_lock+0xb4>)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	4413      	add	r3, r2
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d116      	bne.n	8008c3a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008c0c:	4a1f      	ldr	r2, [pc, #124]	; (8008c8c <chk_lock+0xb4>)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	4413      	add	r3, r2
 8008c14:	3304      	adds	r3, #4
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d10c      	bne.n	8008c3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c20:	4a1a      	ldr	r2, [pc, #104]	; (8008c8c <chk_lock+0xb4>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	4413      	add	r3, r2
 8008c28:	3308      	adds	r3, #8
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d102      	bne.n	8008c3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008c34:	e007      	b.n	8008c46 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008c36:	2301      	movs	r3, #1
 8008c38:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d9d2      	bls.n	8008bec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d109      	bne.n	8008c60 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d102      	bne.n	8008c58 <chk_lock+0x80>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d101      	bne.n	8008c5c <chk_lock+0x84>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e010      	b.n	8008c7e <chk_lock+0xa6>
 8008c5c:	2312      	movs	r3, #18
 8008c5e:	e00e      	b.n	8008c7e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d108      	bne.n	8008c78 <chk_lock+0xa0>
 8008c66:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <chk_lock+0xb4>)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	4413      	add	r3, r2
 8008c6e:	330c      	adds	r3, #12
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c76:	d101      	bne.n	8008c7c <chk_lock+0xa4>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	e000      	b.n	8008c7e <chk_lock+0xa6>
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	200007ac 	.word	0x200007ac

08008c90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c96:	2300      	movs	r3, #0
 8008c98:	607b      	str	r3, [r7, #4]
 8008c9a:	e002      	b.n	8008ca2 <enq_lock+0x12>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	607b      	str	r3, [r7, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d806      	bhi.n	8008cb6 <enq_lock+0x26>
 8008ca8:	4a09      	ldr	r2, [pc, #36]	; (8008cd0 <enq_lock+0x40>)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	4413      	add	r3, r2
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1f2      	bne.n	8008c9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	bf14      	ite	ne
 8008cbc:	2301      	movne	r3, #1
 8008cbe:	2300      	moveq	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	200007ac 	.word	0x200007ac

08008cd4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	e01f      	b.n	8008d24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008ce4:	4a41      	ldr	r2, [pc, #260]	; (8008dec <inc_lock+0x118>)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	4413      	add	r3, r2
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d113      	bne.n	8008d1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008cf6:	4a3d      	ldr	r2, [pc, #244]	; (8008dec <inc_lock+0x118>)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	4413      	add	r3, r2
 8008cfe:	3304      	adds	r3, #4
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d109      	bne.n	8008d1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008d0a:	4a38      	ldr	r2, [pc, #224]	; (8008dec <inc_lock+0x118>)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	011b      	lsls	r3, r3, #4
 8008d10:	4413      	add	r3, r2
 8008d12:	3308      	adds	r3, #8
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d006      	beq.n	8008d2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d9dc      	bls.n	8008ce4 <inc_lock+0x10>
 8008d2a:	e000      	b.n	8008d2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008d2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d132      	bne.n	8008d9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e002      	b.n	8008d40 <inc_lock+0x6c>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d806      	bhi.n	8008d54 <inc_lock+0x80>
 8008d46:	4a29      	ldr	r2, [pc, #164]	; (8008dec <inc_lock+0x118>)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	4413      	add	r3, r2
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1f2      	bne.n	8008d3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d101      	bne.n	8008d5e <inc_lock+0x8a>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e040      	b.n	8008de0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	4922      	ldr	r1, [pc, #136]	; (8008dec <inc_lock+0x118>)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	440b      	add	r3, r1
 8008d6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	491e      	ldr	r1, [pc, #120]	; (8008dec <inc_lock+0x118>)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	440b      	add	r3, r1
 8008d78:	3304      	adds	r3, #4
 8008d7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	695a      	ldr	r2, [r3, #20]
 8008d80:	491a      	ldr	r1, [pc, #104]	; (8008dec <inc_lock+0x118>)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	440b      	add	r3, r1
 8008d88:	3308      	adds	r3, #8
 8008d8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008d8c:	4a17      	ldr	r2, [pc, #92]	; (8008dec <inc_lock+0x118>)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	4413      	add	r3, r2
 8008d94:	330c      	adds	r3, #12
 8008d96:	2200      	movs	r2, #0
 8008d98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <inc_lock+0xe0>
 8008da0:	4a12      	ldr	r2, [pc, #72]	; (8008dec <inc_lock+0x118>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	011b      	lsls	r3, r3, #4
 8008da6:	4413      	add	r3, r2
 8008da8:	330c      	adds	r3, #12
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <inc_lock+0xe0>
 8008db0:	2300      	movs	r3, #0
 8008db2:	e015      	b.n	8008de0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d108      	bne.n	8008dcc <inc_lock+0xf8>
 8008dba:	4a0c      	ldr	r2, [pc, #48]	; (8008dec <inc_lock+0x118>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	4413      	add	r3, r2
 8008dc2:	330c      	adds	r3, #12
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	e001      	b.n	8008dd0 <inc_lock+0xfc>
 8008dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dd0:	4906      	ldr	r1, [pc, #24]	; (8008dec <inc_lock+0x118>)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	440b      	add	r3, r1
 8008dd8:	330c      	adds	r3, #12
 8008dda:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3301      	adds	r3, #1
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	200007ac 	.word	0x200007ac

08008df0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	607b      	str	r3, [r7, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d825      	bhi.n	8008e50 <dec_lock+0x60>
		n = Files[i].ctr;
 8008e04:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <dec_lock+0x74>)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	4413      	add	r3, r2
 8008e0c:	330c      	adds	r3, #12
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008e12:	89fb      	ldrh	r3, [r7, #14]
 8008e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e18:	d101      	bne.n	8008e1e <dec_lock+0x2e>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008e1e:	89fb      	ldrh	r3, [r7, #14]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <dec_lock+0x3a>
 8008e24:	89fb      	ldrh	r3, [r7, #14]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008e2a:	4a0e      	ldr	r2, [pc, #56]	; (8008e64 <dec_lock+0x74>)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	4413      	add	r3, r2
 8008e32:	330c      	adds	r3, #12
 8008e34:	89fa      	ldrh	r2, [r7, #14]
 8008e36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008e38:	89fb      	ldrh	r3, [r7, #14]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <dec_lock+0x5a>
 8008e3e:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <dec_lock+0x74>)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	4413      	add	r3, r2
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	737b      	strb	r3, [r7, #13]
 8008e4e:	e001      	b.n	8008e54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008e50:	2302      	movs	r3, #2
 8008e52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008e54:	7b7b      	ldrb	r3, [r7, #13]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	200007ac 	.word	0x200007ac

08008e68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	e010      	b.n	8008e98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e76:	4a0d      	ldr	r2, [pc, #52]	; (8008eac <clear_lock+0x44>)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	4413      	add	r3, r2
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d105      	bne.n	8008e92 <clear_lock+0x2a>
 8008e86:	4a09      	ldr	r2, [pc, #36]	; (8008eac <clear_lock+0x44>)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	011b      	lsls	r3, r3, #4
 8008e8c:	4413      	add	r3, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d9eb      	bls.n	8008e76 <clear_lock+0xe>
	}
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	200007ac 	.word	0x200007ac

08008eb0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	78db      	ldrb	r3, [r3, #3]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d034      	beq.n	8008f2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7858      	ldrb	r0, [r3, #1]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	f7ff fd40 	bl	800895c <disk_write>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	73fb      	strb	r3, [r7, #15]
 8008ee6:	e022      	b.n	8008f2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	1ad2      	subs	r2, r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d217      	bcs.n	8008f2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	789b      	ldrb	r3, [r3, #2]
 8008f02:	613b      	str	r3, [r7, #16]
 8008f04:	e010      	b.n	8008f28 <sync_window+0x78>
					wsect += fs->fsize;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	7858      	ldrb	r0, [r3, #1]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	f7ff fd1d 	bl	800895c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d8eb      	bhi.n	8008f06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d01b      	beq.n	8008f88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff ffad 	bl	8008eb0 <sync_window>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d113      	bne.n	8008f88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7858      	ldrb	r0, [r3, #1]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	f7ff fcd5 	bl	800891c <disk_read>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d004      	beq.n	8008f82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff ff87 	bl	8008eb0 <sync_window>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d159      	bne.n	8009060 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d149      	bne.n	8009048 <sync_fs+0xb4>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	791b      	ldrb	r3, [r3, #4]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d145      	bne.n	8009048 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	899b      	ldrh	r3, [r3, #12]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	2100      	movs	r1, #0
 8008fca:	f7ff fda8 	bl	8008b1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3334      	adds	r3, #52	; 0x34
 8008fd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fd6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fd37 	bl	8008a4e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3334      	adds	r3, #52	; 0x34
 8008fe4:	4921      	ldr	r1, [pc, #132]	; (800906c <sync_fs+0xd8>)
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7ff fd4c 	bl	8008a84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3334      	adds	r3, #52	; 0x34
 8008ff0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008ff4:	491e      	ldr	r1, [pc, #120]	; (8009070 <sync_fs+0xdc>)
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7ff fd44 	bl	8008a84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3334      	adds	r3, #52	; 0x34
 8009000:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f7ff fd3a 	bl	8008a84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3334      	adds	r3, #52	; 0x34
 8009014:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7ff fd30 	bl	8008a84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	7858      	ldrb	r0, [r3, #1]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800903c:	2301      	movs	r3, #1
 800903e:	f7ff fc8d 	bl	800895c <disk_write>
			fs->fsi_flag = 0;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2200      	movs	r2, #0
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fca3 	bl	800899c <disk_ioctl>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <sync_fs+0xcc>
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	41615252 	.word	0x41615252
 8009070:	61417272 	.word	0x61417272

08009074 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	3b02      	subs	r3, #2
 8009082:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	3b02      	subs	r3, #2
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d301      	bcc.n	8009094 <clust2sect+0x20>
 8009090:	2300      	movs	r3, #0
 8009092:	e008      	b.n	80090a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	895b      	ldrh	r3, [r3, #10]
 8009098:	461a      	mov	r2, r3
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	fb03 f202 	mul.w	r2, r3, r2
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	4413      	add	r3, r2
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d904      	bls.n	80090d2 <get_fat+0x20>
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d302      	bcc.n	80090d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80090d2:	2301      	movs	r3, #1
 80090d4:	617b      	str	r3, [r7, #20]
 80090d6:	e0bb      	b.n	8009250 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80090d8:	f04f 33ff 	mov.w	r3, #4294967295
 80090dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	f000 8083 	beq.w	80091ee <get_fat+0x13c>
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	f300 80a7 	bgt.w	800923c <get_fat+0x18a>
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d002      	beq.n	80090f8 <get_fat+0x46>
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d056      	beq.n	80091a4 <get_fat+0xf2>
 80090f6:	e0a1      	b.n	800923c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	085b      	lsrs	r3, r3, #1
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	899b      	ldrh	r3, [r3, #12]
 800910e:	4619      	mov	r1, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	fbb3 f3f1 	udiv	r3, r3, r1
 8009116:	4413      	add	r3, r2
 8009118:	4619      	mov	r1, r3
 800911a:	6938      	ldr	r0, [r7, #16]
 800911c:	f7ff ff0c 	bl	8008f38 <move_window>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	f040 808d 	bne.w	8009242 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	60fa      	str	r2, [r7, #12]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	8992      	ldrh	r2, [r2, #12]
 8009132:	fbb3 f1f2 	udiv	r1, r3, r2
 8009136:	fb02 f201 	mul.w	r2, r2, r1
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4413      	add	r3, r2
 8009140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009144:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	899b      	ldrh	r3, [r3, #12]
 800914e:	4619      	mov	r1, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	fbb3 f3f1 	udiv	r3, r3, r1
 8009156:	4413      	add	r3, r2
 8009158:	4619      	mov	r1, r3
 800915a:	6938      	ldr	r0, [r7, #16]
 800915c:	f7ff feec 	bl	8008f38 <move_window>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d16f      	bne.n	8009246 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	899b      	ldrh	r3, [r3, #12]
 800916a:	461a      	mov	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009172:	fb02 f201 	mul.w	r2, r2, r1
 8009176:	1a9b      	subs	r3, r3, r2
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4413      	add	r3, r2
 800917c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009180:	021b      	lsls	r3, r3, #8
 8009182:	461a      	mov	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	4313      	orrs	r3, r2
 8009188:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <get_fat+0xe8>
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	091b      	lsrs	r3, r3, #4
 8009198:	e002      	b.n	80091a0 <get_fat+0xee>
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091a0:	617b      	str	r3, [r7, #20]
			break;
 80091a2:	e055      	b.n	8009250 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	899b      	ldrh	r3, [r3, #12]
 80091ac:	085b      	lsrs	r3, r3, #1
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	4619      	mov	r1, r3
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80091b8:	4413      	add	r3, r2
 80091ba:	4619      	mov	r1, r3
 80091bc:	6938      	ldr	r0, [r7, #16]
 80091be:	f7ff febb 	bl	8008f38 <move_window>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d140      	bne.n	800924a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	005b      	lsls	r3, r3, #1
 80091d2:	693a      	ldr	r2, [r7, #16]
 80091d4:	8992      	ldrh	r2, [r2, #12]
 80091d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80091da:	fb02 f200 	mul.w	r2, r2, r0
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	440b      	add	r3, r1
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fbf8 	bl	80089d8 <ld_word>
 80091e8:	4603      	mov	r3, r0
 80091ea:	617b      	str	r3, [r7, #20]
			break;
 80091ec:	e030      	b.n	8009250 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	899b      	ldrh	r3, [r3, #12]
 80091f6:	089b      	lsrs	r3, r3, #2
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	4619      	mov	r1, r3
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009202:	4413      	add	r3, r2
 8009204:	4619      	mov	r1, r3
 8009206:	6938      	ldr	r0, [r7, #16]
 8009208:	f7ff fe96 	bl	8008f38 <move_window>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d11d      	bne.n	800924e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	8992      	ldrh	r2, [r2, #12]
 8009220:	fbb3 f0f2 	udiv	r0, r3, r2
 8009224:	fb02 f200 	mul.w	r2, r2, r0
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	440b      	add	r3, r1
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fbeb 	bl	8008a08 <ld_dword>
 8009232:	4603      	mov	r3, r0
 8009234:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009238:	617b      	str	r3, [r7, #20]
			break;
 800923a:	e009      	b.n	8009250 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800923c:	2301      	movs	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e006      	b.n	8009250 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009242:	bf00      	nop
 8009244:	e004      	b.n	8009250 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009246:	bf00      	nop
 8009248:	e002      	b.n	8009250 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800924a:	bf00      	nop
 800924c:	e000      	b.n	8009250 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800924e:	bf00      	nop
		}
	}

	return val;
 8009250:	697b      	ldr	r3, [r7, #20]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800925a:	b590      	push	{r4, r7, lr}
 800925c:	b089      	sub	sp, #36	; 0x24
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009266:	2302      	movs	r3, #2
 8009268:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b01      	cmp	r3, #1
 800926e:	f240 8102 	bls.w	8009476 <put_fat+0x21c>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	429a      	cmp	r2, r3
 800927a:	f080 80fc 	bcs.w	8009476 <put_fat+0x21c>
		switch (fs->fs_type) {
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	2b03      	cmp	r3, #3
 8009284:	f000 80b6 	beq.w	80093f4 <put_fat+0x19a>
 8009288:	2b03      	cmp	r3, #3
 800928a:	f300 80fd 	bgt.w	8009488 <put_fat+0x22e>
 800928e:	2b01      	cmp	r3, #1
 8009290:	d003      	beq.n	800929a <put_fat+0x40>
 8009292:	2b02      	cmp	r3, #2
 8009294:	f000 8083 	beq.w	800939e <put_fat+0x144>
 8009298:	e0f6      	b.n	8009488 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	085b      	lsrs	r3, r3, #1
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	4413      	add	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	899b      	ldrh	r3, [r3, #12]
 80092b0:	4619      	mov	r1, r3
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80092b8:	4413      	add	r3, r2
 80092ba:	4619      	mov	r1, r3
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff fe3b 	bl	8008f38 <move_window>
 80092c2:	4603      	mov	r3, r0
 80092c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092c6:	7ffb      	ldrb	r3, [r7, #31]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f040 80d6 	bne.w	800947a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	1c5a      	adds	r2, r3, #1
 80092d8:	61ba      	str	r2, [r7, #24]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	8992      	ldrh	r2, [r2, #12]
 80092de:	fbb3 f0f2 	udiv	r0, r3, r2
 80092e2:	fb02 f200 	mul.w	r2, r2, r0
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	440b      	add	r3, r1
 80092ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00d      	beq.n	8009312 <put_fat+0xb8>
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b25b      	sxtb	r3, r3
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	b25a      	sxtb	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	011b      	lsls	r3, r3, #4
 8009308:	b25b      	sxtb	r3, r3
 800930a:	4313      	orrs	r3, r2
 800930c:	b25b      	sxtb	r3, r3
 800930e:	b2db      	uxtb	r3, r3
 8009310:	e001      	b.n	8009316 <put_fat+0xbc>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	899b      	ldrh	r3, [r3, #12]
 8009328:	4619      	mov	r1, r3
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009330:	4413      	add	r3, r2
 8009332:	4619      	mov	r1, r3
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff fdff 	bl	8008f38 <move_window>
 800933a:	4603      	mov	r3, r0
 800933c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800933e:	7ffb      	ldrb	r3, [r7, #31]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f040 809c 	bne.w	800947e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	899b      	ldrh	r3, [r3, #12]
 8009350:	461a      	mov	r2, r3
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	fbb3 f0f2 	udiv	r0, r3, r2
 8009358:	fb02 f200 	mul.w	r2, r2, r0
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	440b      	add	r3, r1
 8009360:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <put_fat+0x11a>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	091b      	lsrs	r3, r3, #4
 8009370:	b2db      	uxtb	r3, r3
 8009372:	e00e      	b.n	8009392 <put_fat+0x138>
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	b25b      	sxtb	r3, r3
 800937a:	f023 030f 	bic.w	r3, r3, #15
 800937e:	b25a      	sxtb	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	b25b      	sxtb	r3, r3
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	b25b      	sxtb	r3, r3
 800938c:	4313      	orrs	r3, r2
 800938e:	b25b      	sxtb	r3, r3
 8009390:	b2db      	uxtb	r3, r3
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	70da      	strb	r2, [r3, #3]
			break;
 800939c:	e074      	b.n	8009488 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	899b      	ldrh	r3, [r3, #12]
 80093a6:	085b      	lsrs	r3, r3, #1
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	4619      	mov	r1, r3
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80093b2:	4413      	add	r3, r2
 80093b4:	4619      	mov	r1, r3
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff fdbe 	bl	8008f38 <move_window>
 80093bc:	4603      	mov	r3, r0
 80093be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093c0:	7ffb      	ldrb	r3, [r7, #31]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d15d      	bne.n	8009482 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	005b      	lsls	r3, r3, #1
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	8992      	ldrh	r2, [r2, #12]
 80093d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80093d8:	fb02 f200 	mul.w	r2, r2, r0
 80093dc:	1a9b      	subs	r3, r3, r2
 80093de:	440b      	add	r3, r1
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	b292      	uxth	r2, r2
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff fb31 	bl	8008a4e <st_word>
			fs->wflag = 1;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2201      	movs	r2, #1
 80093f0:	70da      	strb	r2, [r3, #3]
			break;
 80093f2:	e049      	b.n	8009488 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	899b      	ldrh	r3, [r3, #12]
 80093fc:	089b      	lsrs	r3, r3, #2
 80093fe:	b29b      	uxth	r3, r3
 8009400:	4619      	mov	r1, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	fbb3 f3f1 	udiv	r3, r3, r1
 8009408:	4413      	add	r3, r2
 800940a:	4619      	mov	r1, r3
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff fd93 	bl	8008f38 <move_window>
 8009412:	4603      	mov	r3, r0
 8009414:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009416:	7ffb      	ldrb	r3, [r7, #31]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d134      	bne.n	8009486 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	8992      	ldrh	r2, [r2, #12]
 8009430:	fbb3 f0f2 	udiv	r0, r3, r2
 8009434:	fb02 f200 	mul.w	r2, r2, r0
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	440b      	add	r3, r1
 800943c:	4618      	mov	r0, r3
 800943e:	f7ff fae3 	bl	8008a08 <ld_dword>
 8009442:	4603      	mov	r3, r0
 8009444:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009448:	4323      	orrs	r3, r4
 800944a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	8992      	ldrh	r2, [r2, #12]
 800945a:	fbb3 f0f2 	udiv	r0, r3, r2
 800945e:	fb02 f200 	mul.w	r2, r2, r0
 8009462:	1a9b      	subs	r3, r3, r2
 8009464:	440b      	add	r3, r1
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff fb0b 	bl	8008a84 <st_dword>
			fs->wflag = 1;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2201      	movs	r2, #1
 8009472:	70da      	strb	r2, [r3, #3]
			break;
 8009474:	e008      	b.n	8009488 <put_fat+0x22e>
		}
	}
 8009476:	bf00      	nop
 8009478:	e006      	b.n	8009488 <put_fat+0x22e>
			if (res != FR_OK) break;
 800947a:	bf00      	nop
 800947c:	e004      	b.n	8009488 <put_fat+0x22e>
			if (res != FR_OK) break;
 800947e:	bf00      	nop
 8009480:	e002      	b.n	8009488 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009482:	bf00      	nop
 8009484:	e000      	b.n	8009488 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009486:	bf00      	nop
	return res;
 8009488:	7ffb      	ldrb	r3, [r7, #31]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3724      	adds	r7, #36	; 0x24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd90      	pop	{r4, r7, pc}

08009492 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b088      	sub	sp, #32
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d904      	bls.n	80094b8 <remove_chain+0x26>
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d301      	bcc.n	80094bc <remove_chain+0x2a>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e04b      	b.n	8009554 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00c      	beq.n	80094dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	69b8      	ldr	r0, [r7, #24]
 80094ca:	f7ff fec6 	bl	800925a <put_fat>
 80094ce:	4603      	mov	r3, r0
 80094d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80094d2:	7ffb      	ldrb	r3, [r7, #31]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <remove_chain+0x4a>
 80094d8:	7ffb      	ldrb	r3, [r7, #31]
 80094da:	e03b      	b.n	8009554 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80094dc:	68b9      	ldr	r1, [r7, #8]
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7ff fde7 	bl	80090b2 <get_fat>
 80094e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d031      	beq.n	8009550 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <remove_chain+0x64>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e02e      	b.n	8009554 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fc:	d101      	bne.n	8009502 <remove_chain+0x70>
 80094fe:	2301      	movs	r3, #1
 8009500:	e028      	b.n	8009554 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009502:	2200      	movs	r2, #0
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	69b8      	ldr	r0, [r7, #24]
 8009508:	f7ff fea7 	bl	800925a <put_fat>
 800950c:	4603      	mov	r3, r0
 800950e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009510:	7ffb      	ldrb	r3, [r7, #31]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <remove_chain+0x88>
 8009516:	7ffb      	ldrb	r3, [r7, #31]
 8009518:	e01c      	b.n	8009554 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	695a      	ldr	r2, [r3, #20]
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	3b02      	subs	r3, #2
 8009524:	429a      	cmp	r2, r3
 8009526:	d20b      	bcs.n	8009540 <remove_chain+0xae>
			fs->free_clst++;
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	791b      	ldrb	r3, [r3, #4]
 8009536:	f043 0301 	orr.w	r3, r3, #1
 800953a:	b2da      	uxtb	r2, r3
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	429a      	cmp	r2, r3
 800954c:	d3c6      	bcc.n	80094dc <remove_chain+0x4a>
 800954e:	e000      	b.n	8009552 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009550:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3720      	adds	r7, #32
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10d      	bne.n	800958e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d004      	beq.n	8009588 <create_chain+0x2c>
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	429a      	cmp	r2, r3
 8009586:	d31b      	bcc.n	80095c0 <create_chain+0x64>
 8009588:	2301      	movs	r3, #1
 800958a:	61bb      	str	r3, [r7, #24]
 800958c:	e018      	b.n	80095c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff fd8e 	bl	80090b2 <get_fat>
 8009596:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d801      	bhi.n	80095a2 <create_chain+0x46>
 800959e:	2301      	movs	r3, #1
 80095a0:	e070      	b.n	8009684 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a8:	d101      	bne.n	80095ae <create_chain+0x52>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	e06a      	b.n	8009684 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d201      	bcs.n	80095bc <create_chain+0x60>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	e063      	b.n	8009684 <create_chain+0x128>
		scl = clst;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	3301      	adds	r3, #1
 80095c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d307      	bcc.n	80095e4 <create_chain+0x88>
				ncl = 2;
 80095d4:	2302      	movs	r3, #2
 80095d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d901      	bls.n	80095e4 <create_chain+0x88>
 80095e0:	2300      	movs	r3, #0
 80095e2:	e04f      	b.n	8009684 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80095e4:	69f9      	ldr	r1, [r7, #28]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff fd63 	bl	80090b2 <get_fat>
 80095ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00e      	beq.n	8009612 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d003      	beq.n	8009602 <create_chain+0xa6>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009600:	d101      	bne.n	8009606 <create_chain+0xaa>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	e03e      	b.n	8009684 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009606:	69fa      	ldr	r2, [r7, #28]
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	429a      	cmp	r2, r3
 800960c:	d1da      	bne.n	80095c4 <create_chain+0x68>
 800960e:	2300      	movs	r3, #0
 8009610:	e038      	b.n	8009684 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009612:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009614:	f04f 32ff 	mov.w	r2, #4294967295
 8009618:	69f9      	ldr	r1, [r7, #28]
 800961a:	6938      	ldr	r0, [r7, #16]
 800961c:	f7ff fe1d 	bl	800925a <put_fat>
 8009620:	4603      	mov	r3, r0
 8009622:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009624:	7dfb      	ldrb	r3, [r7, #23]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d109      	bne.n	800963e <create_chain+0xe2>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d006      	beq.n	800963e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009630:	69fa      	ldr	r2, [r7, #28]
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6938      	ldr	r0, [r7, #16]
 8009636:	f7ff fe10 	bl	800925a <put_fat>
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d116      	bne.n	8009672 <create_chain+0x116>
		fs->last_clst = ncl;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	69fa      	ldr	r2, [r7, #28]
 8009648:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	695a      	ldr	r2, [r3, #20]
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	3b02      	subs	r3, #2
 8009654:	429a      	cmp	r2, r3
 8009656:	d804      	bhi.n	8009662 <create_chain+0x106>
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	1e5a      	subs	r2, r3, #1
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	791b      	ldrb	r3, [r3, #4]
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	b2da      	uxtb	r2, r3
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	711a      	strb	r2, [r3, #4]
 8009670:	e007      	b.n	8009682 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d102      	bne.n	800967e <create_chain+0x122>
 8009678:	f04f 33ff 	mov.w	r3, #4294967295
 800967c:	e000      	b.n	8009680 <create_chain+0x124>
 800967e:	2301      	movs	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009682:	69fb      	ldr	r3, [r7, #28]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3720      	adds	r7, #32
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	3304      	adds	r3, #4
 80096a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	899b      	ldrh	r3, [r3, #12]
 80096a8:	461a      	mov	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	8952      	ldrh	r2, [r2, #10]
 80096b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80096b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	1d1a      	adds	r2, r3, #4
 80096be:	613a      	str	r2, [r7, #16]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <clmt_clust+0x42>
 80096ca:	2300      	movs	r3, #0
 80096cc:	e010      	b.n	80096f0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d307      	bcc.n	80096e6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	617b      	str	r3, [r7, #20]
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	3304      	adds	r3, #4
 80096e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80096e4:	e7e9      	b.n	80096ba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80096e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	4413      	add	r3, r2
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009712:	d204      	bcs.n	800971e <dir_sdi+0x22>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	f003 031f 	and.w	r3, r3, #31
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <dir_sdi+0x26>
		return FR_INT_ERR;
 800971e:	2302      	movs	r3, #2
 8009720:	e071      	b.n	8009806 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d106      	bne.n	8009742 <dir_sdi+0x46>
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d902      	bls.n	8009742 <dir_sdi+0x46>
		clst = fs->dirbase;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10c      	bne.n	8009762 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	095b      	lsrs	r3, r3, #5
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	8912      	ldrh	r2, [r2, #8]
 8009750:	4293      	cmp	r3, r2
 8009752:	d301      	bcc.n	8009758 <dir_sdi+0x5c>
 8009754:	2302      	movs	r3, #2
 8009756:	e056      	b.n	8009806 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	61da      	str	r2, [r3, #28]
 8009760:	e02d      	b.n	80097be <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	895b      	ldrh	r3, [r3, #10]
 8009766:	461a      	mov	r2, r3
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	899b      	ldrh	r3, [r3, #12]
 800976c:	fb03 f302 	mul.w	r3, r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009772:	e019      	b.n	80097a8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6979      	ldr	r1, [r7, #20]
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fc9a 	bl	80090b2 <get_fat>
 800977e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d101      	bne.n	800978c <dir_sdi+0x90>
 8009788:	2301      	movs	r3, #1
 800978a:	e03c      	b.n	8009806 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d904      	bls.n	800979c <dir_sdi+0xa0>
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	429a      	cmp	r2, r3
 800979a:	d301      	bcc.n	80097a0 <dir_sdi+0xa4>
 800979c:	2302      	movs	r3, #2
 800979e:	e032      	b.n	8009806 <dir_sdi+0x10a>
			ofs -= csz;
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d2e1      	bcs.n	8009774 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80097b0:	6979      	ldr	r1, [r7, #20]
 80097b2:	6938      	ldr	r0, [r7, #16]
 80097b4:	f7ff fc5e 	bl	8009074 <clust2sect>
 80097b8:	4602      	mov	r2, r0
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <dir_sdi+0xd4>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e01a      	b.n	8009806 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	69da      	ldr	r2, [r3, #28]
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	899b      	ldrh	r3, [r3, #12]
 80097d8:	4619      	mov	r1, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80097e0:	441a      	add	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	899b      	ldrh	r3, [r3, #12]
 80097f0:	461a      	mov	r2, r3
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80097f8:	fb02 f200 	mul.w	r2, r2, r0
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	18ca      	adds	r2, r1, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	3320      	adds	r3, #32
 8009824:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <dir_next+0x28>
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009834:	d301      	bcc.n	800983a <dir_next+0x2c>
 8009836:	2304      	movs	r3, #4
 8009838:	e0bb      	b.n	80099b2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	899b      	ldrh	r3, [r3, #12]
 800983e:	461a      	mov	r2, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	fbb3 f1f2 	udiv	r1, r3, r2
 8009846:	fb02 f201 	mul.w	r2, r2, r1
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	f040 809d 	bne.w	800998c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10b      	bne.n	800987c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	095b      	lsrs	r3, r3, #5
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	8912      	ldrh	r2, [r2, #8]
 800986c:	4293      	cmp	r3, r2
 800986e:	f0c0 808d 	bcc.w	800998c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	61da      	str	r2, [r3, #28]
 8009878:	2304      	movs	r3, #4
 800987a:	e09a      	b.n	80099b2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	899b      	ldrh	r3, [r3, #12]
 8009880:	461a      	mov	r2, r3
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	fbb3 f3f2 	udiv	r3, r3, r2
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	8952      	ldrh	r2, [r2, #10]
 800988c:	3a01      	subs	r2, #1
 800988e:	4013      	ands	r3, r2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d17b      	bne.n	800998c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	4619      	mov	r1, r3
 800989c:	4610      	mov	r0, r2
 800989e:	f7ff fc08 	bl	80090b2 <get_fat>
 80098a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d801      	bhi.n	80098ae <dir_next+0xa0>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e081      	b.n	80099b2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b4:	d101      	bne.n	80098ba <dir_next+0xac>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e07b      	b.n	80099b2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d359      	bcc.n	8009978 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d104      	bne.n	80098d4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	61da      	str	r2, [r3, #28]
 80098d0:	2304      	movs	r3, #4
 80098d2:	e06e      	b.n	80099b2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	4619      	mov	r1, r3
 80098dc:	4610      	mov	r0, r2
 80098de:	f7ff fe3d 	bl	800955c <create_chain>
 80098e2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <dir_next+0xe0>
 80098ea:	2307      	movs	r3, #7
 80098ec:	e061      	b.n	80099b2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d101      	bne.n	80098f8 <dir_next+0xea>
 80098f4:	2302      	movs	r3, #2
 80098f6:	e05c      	b.n	80099b2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d101      	bne.n	8009904 <dir_next+0xf6>
 8009900:	2301      	movs	r3, #1
 8009902:	e056      	b.n	80099b2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f7ff fad3 	bl	8008eb0 <sync_window>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <dir_next+0x106>
 8009910:	2301      	movs	r3, #1
 8009912:	e04e      	b.n	80099b2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	899b      	ldrh	r3, [r3, #12]
 800991e:	461a      	mov	r2, r3
 8009920:	2100      	movs	r1, #0
 8009922:	f7ff f8fc 	bl	8008b1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009926:	2300      	movs	r3, #0
 8009928:	613b      	str	r3, [r7, #16]
 800992a:	6979      	ldr	r1, [r7, #20]
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f7ff fba1 	bl	8009074 <clust2sect>
 8009932:	4602      	mov	r2, r0
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	631a      	str	r2, [r3, #48]	; 0x30
 8009938:	e012      	b.n	8009960 <dir_next+0x152>
						fs->wflag = 1;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f7ff fab5 	bl	8008eb0 <sync_window>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <dir_next+0x142>
 800994c:	2301      	movs	r3, #1
 800994e:	e030      	b.n	80099b2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	3301      	adds	r3, #1
 8009954:	613b      	str	r3, [r7, #16]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	631a      	str	r2, [r3, #48]	; 0x30
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	895b      	ldrh	r3, [r3, #10]
 8009964:	461a      	mov	r2, r3
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	4293      	cmp	r3, r2
 800996a:	d3e6      	bcc.n	800993a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800997e:	6979      	ldr	r1, [r7, #20]
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f7ff fb77 	bl	8009074 <clust2sect>
 8009986:	4602      	mov	r2, r0
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	899b      	ldrh	r3, [r3, #12]
 800999c:	461a      	mov	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80099a4:	fb02 f200 	mul.w	r2, r2, r0
 80099a8:	1a9b      	subs	r3, r3, r2
 80099aa:	18ca      	adds	r2, r1, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b086      	sub	sp, #24
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80099ca:	2100      	movs	r1, #0
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff fe95 	bl	80096fc <dir_sdi>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d12b      	bne.n	8009a34 <dir_alloc+0x7a>
		n = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	4619      	mov	r1, r3
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff faa6 	bl	8008f38 <move_window>
 80099ec:	4603      	mov	r3, r0
 80099ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d11d      	bne.n	8009a32 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2be5      	cmp	r3, #229	; 0xe5
 80099fe:	d004      	beq.n	8009a0a <dir_alloc+0x50>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d107      	bne.n	8009a1a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	613b      	str	r3, [r7, #16]
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d102      	bne.n	8009a1e <dir_alloc+0x64>
 8009a18:	e00c      	b.n	8009a34 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009a1e:	2101      	movs	r1, #1
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7ff fef4 	bl	800980e <dir_next>
 8009a26:	4603      	mov	r3, r0
 8009a28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0d7      	beq.n	80099e0 <dir_alloc+0x26>
 8009a30:	e000      	b.n	8009a34 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009a32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d101      	bne.n	8009a3e <dir_alloc+0x84>
 8009a3a:	2307      	movs	r3, #7
 8009a3c:	75fb      	strb	r3, [r7, #23]
	return res;
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	331a      	adds	r3, #26
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe ffbe 	bl	80089d8 <ld_word>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d109      	bne.n	8009a7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	3314      	adds	r3, #20
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe ffb3 	bl	80089d8 <ld_word>
 8009a72:	4603      	mov	r3, r0
 8009a74:	041b      	lsls	r3, r3, #16
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	60b9      	str	r1, [r7, #8]
 8009a90:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	331a      	adds	r3, #26
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	b292      	uxth	r2, r2
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe ffd6 	bl	8008a4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d109      	bne.n	8009abe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	f103 0214 	add.w	r2, r3, #20
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	0c1b      	lsrs	r3, r3, #16
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4610      	mov	r0, r2
 8009aba:	f7fe ffc8 	bl	8008a4e <st_word>
	}
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b086      	sub	sp, #24
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff fe10 	bl	80096fc <dir_sdi>
 8009adc:	4603      	mov	r3, r0
 8009ade:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d001      	beq.n	8009aea <dir_find+0x24>
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	e03e      	b.n	8009b68 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6938      	ldr	r0, [r7, #16]
 8009af2:	f7ff fa21 	bl	8008f38 <move_window>
 8009af6:	4603      	mov	r3, r0
 8009af8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d12f      	bne.n	8009b60 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <dir_find+0x4e>
 8009b0e:	2304      	movs	r3, #4
 8009b10:	75fb      	strb	r3, [r7, #23]
 8009b12:	e028      	b.n	8009b66 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	330b      	adds	r3, #11
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	330b      	adds	r3, #11
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	f003 0308 	and.w	r3, r3, #8
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10a      	bne.n	8009b4c <dir_find+0x86>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a18      	ldr	r0, [r3, #32]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	3324      	adds	r3, #36	; 0x24
 8009b3e:	220b      	movs	r2, #11
 8009b40:	4619      	mov	r1, r3
 8009b42:	f7ff f807 	bl	8008b54 <mem_cmp>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff fe5d 	bl	800980e <dir_next>
 8009b54:	4603      	mov	r3, r0
 8009b56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d0c5      	beq.n	8009aea <dir_find+0x24>
 8009b5e:	e002      	b.n	8009b66 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009b60:	bf00      	nop
 8009b62:	e000      	b.n	8009b66 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009b64:	bf00      	nop

	return res;
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3718      	adds	r7, #24
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009b7e:	2101      	movs	r1, #1
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ff1a 	bl	80099ba <dir_alloc>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d11c      	bne.n	8009bca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	4619      	mov	r1, r3
 8009b96:	68b8      	ldr	r0, [r7, #8]
 8009b98:	f7ff f9ce 	bl	8008f38 <move_window>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d111      	bne.n	8009bca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	2220      	movs	r2, #32
 8009bac:	2100      	movs	r1, #0
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe ffb5 	bl	8008b1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a18      	ldr	r0, [r3, #32]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3324      	adds	r3, #36	; 0x24
 8009bbc:	220b      	movs	r2, #11
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	f7fe ff8c 	bl	8008adc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	60fb      	str	r3, [r7, #12]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3324      	adds	r3, #36	; 0x24
 8009be8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009bea:	220b      	movs	r2, #11
 8009bec:	2120      	movs	r1, #32
 8009bee:	68b8      	ldr	r0, [r7, #8]
 8009bf0:	f7fe ff95 	bl	8008b1e <mem_set>
	si = i = 0; ni = 8;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	61fb      	str	r3, [r7, #28]
 8009bfc:	2308      	movs	r3, #8
 8009bfe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	61fa      	str	r2, [r7, #28]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	4413      	add	r3, r2
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009c0e:	7efb      	ldrb	r3, [r7, #27]
 8009c10:	2b20      	cmp	r3, #32
 8009c12:	d94e      	bls.n	8009cb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009c14:	7efb      	ldrb	r3, [r7, #27]
 8009c16:	2b2f      	cmp	r3, #47	; 0x2f
 8009c18:	d006      	beq.n	8009c28 <create_name+0x54>
 8009c1a:	7efb      	ldrb	r3, [r7, #27]
 8009c1c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c1e:	d110      	bne.n	8009c42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009c20:	e002      	b.n	8009c28 <create_name+0x54>
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	3301      	adds	r3, #1
 8009c26:	61fb      	str	r3, [r7, #28]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b2f      	cmp	r3, #47	; 0x2f
 8009c32:	d0f6      	beq.n	8009c22 <create_name+0x4e>
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	4413      	add	r3, r2
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c3e:	d0f0      	beq.n	8009c22 <create_name+0x4e>
			break;
 8009c40:	e038      	b.n	8009cb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009c42:	7efb      	ldrb	r3, [r7, #27]
 8009c44:	2b2e      	cmp	r3, #46	; 0x2e
 8009c46:	d003      	beq.n	8009c50 <create_name+0x7c>
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d30c      	bcc.n	8009c6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b0b      	cmp	r3, #11
 8009c54:	d002      	beq.n	8009c5c <create_name+0x88>
 8009c56:	7efb      	ldrb	r3, [r7, #27]
 8009c58:	2b2e      	cmp	r3, #46	; 0x2e
 8009c5a:	d001      	beq.n	8009c60 <create_name+0x8c>
 8009c5c:	2306      	movs	r3, #6
 8009c5e:	e044      	b.n	8009cea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009c60:	2308      	movs	r3, #8
 8009c62:	613b      	str	r3, [r7, #16]
 8009c64:	230b      	movs	r3, #11
 8009c66:	617b      	str	r3, [r7, #20]
			continue;
 8009c68:	e022      	b.n	8009cb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009c6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	da04      	bge.n	8009c7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009c72:	7efb      	ldrb	r3, [r7, #27]
 8009c74:	3b80      	subs	r3, #128	; 0x80
 8009c76:	4a1f      	ldr	r2, [pc, #124]	; (8009cf4 <create_name+0x120>)
 8009c78:	5cd3      	ldrb	r3, [r2, r3]
 8009c7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009c7c:	7efb      	ldrb	r3, [r7, #27]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	481d      	ldr	r0, [pc, #116]	; (8009cf8 <create_name+0x124>)
 8009c82:	f7fe ff8e 	bl	8008ba2 <chk_chr>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <create_name+0xbc>
 8009c8c:	2306      	movs	r3, #6
 8009c8e:	e02c      	b.n	8009cea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009c90:	7efb      	ldrb	r3, [r7, #27]
 8009c92:	2b60      	cmp	r3, #96	; 0x60
 8009c94:	d905      	bls.n	8009ca2 <create_name+0xce>
 8009c96:	7efb      	ldrb	r3, [r7, #27]
 8009c98:	2b7a      	cmp	r3, #122	; 0x7a
 8009c9a:	d802      	bhi.n	8009ca2 <create_name+0xce>
 8009c9c:	7efb      	ldrb	r3, [r7, #27]
 8009c9e:	3b20      	subs	r3, #32
 8009ca0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	613a      	str	r2, [r7, #16]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	4413      	add	r3, r2
 8009cac:	7efa      	ldrb	r2, [r7, #27]
 8009cae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009cb0:	e7a6      	b.n	8009c00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009cb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	441a      	add	r2, r3
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d101      	bne.n	8009cc8 <create_name+0xf4>
 8009cc4:	2306      	movs	r3, #6
 8009cc6:	e010      	b.n	8009cea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	2be5      	cmp	r3, #229	; 0xe5
 8009cce:	d102      	bne.n	8009cd6 <create_name+0x102>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2205      	movs	r2, #5
 8009cd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009cd6:	7efb      	ldrb	r3, [r7, #27]
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d801      	bhi.n	8009ce0 <create_name+0x10c>
 8009cdc:	2204      	movs	r2, #4
 8009cde:	e000      	b.n	8009ce2 <create_name+0x10e>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	330b      	adds	r3, #11
 8009ce6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009ce8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	0800d574 	.word	0x0800d574
 8009cf8:	0800d500 	.word	0x0800d500

08009cfc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009d10:	e002      	b.n	8009d18 <follow_path+0x1c>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	3301      	adds	r3, #1
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b2f      	cmp	r3, #47	; 0x2f
 8009d1e:	d0f8      	beq.n	8009d12 <follow_path+0x16>
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b5c      	cmp	r3, #92	; 0x5c
 8009d26:	d0f4      	beq.n	8009d12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b1f      	cmp	r3, #31
 8009d34:	d80a      	bhi.n	8009d4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2280      	movs	r2, #128	; 0x80
 8009d3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009d3e:	2100      	movs	r1, #0
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff fcdb 	bl	80096fc <dir_sdi>
 8009d46:	4603      	mov	r3, r0
 8009d48:	75fb      	strb	r3, [r7, #23]
 8009d4a:	e048      	b.n	8009dde <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d4c:	463b      	mov	r3, r7
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff ff3f 	bl	8009bd4 <create_name>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d139      	bne.n	8009dd4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff feb0 	bl	8009ac6 <dir_find>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00a      	beq.n	8009d8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	d12c      	bne.n	8009dd8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009d7e:	7afb      	ldrb	r3, [r7, #11]
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d127      	bne.n	8009dd8 <follow_path+0xdc>
 8009d88:	2305      	movs	r3, #5
 8009d8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009d8c:	e024      	b.n	8009dd8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d8e:	7afb      	ldrb	r3, [r7, #11]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d121      	bne.n	8009ddc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	799b      	ldrb	r3, [r3, #6]
 8009d9c:	f003 0310 	and.w	r3, r3, #16
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d102      	bne.n	8009daa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009da4:	2305      	movs	r3, #5
 8009da6:	75fb      	strb	r3, [r7, #23]
 8009da8:	e019      	b.n	8009dde <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	8992      	ldrh	r2, [r2, #12]
 8009db8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009dbc:	fb02 f200 	mul.w	r2, r2, r0
 8009dc0:	1a9b      	subs	r3, r3, r2
 8009dc2:	440b      	add	r3, r1
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff fe3e 	bl	8009a48 <ld_clust>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009dd2:	e7bb      	b.n	8009d4c <follow_path+0x50>
			if (res != FR_OK) break;
 8009dd4:	bf00      	nop
 8009dd6:	e002      	b.n	8009dde <follow_path+0xe2>
				break;
 8009dd8:	bf00      	nop
 8009dda:	e000      	b.n	8009dde <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ddc:	bf00      	nop
			}
		}
	}

	return res;
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295
 8009df4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d031      	beq.n	8009e62 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	e002      	b.n	8009e0c <get_ldnumber+0x24>
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	d903      	bls.n	8009e1c <get_ldnumber+0x34>
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	2b3a      	cmp	r3, #58	; 0x3a
 8009e1a:	d1f4      	bne.n	8009e06 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b3a      	cmp	r3, #58	; 0x3a
 8009e22:	d11c      	bne.n	8009e5e <get_ldnumber+0x76>
			tp = *path;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	60fa      	str	r2, [r7, #12]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	3b30      	subs	r3, #48	; 0x30
 8009e34:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b09      	cmp	r3, #9
 8009e3a:	d80e      	bhi.n	8009e5a <get_ldnumber+0x72>
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d10a      	bne.n	8009e5a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d107      	bne.n	8009e5a <get_ldnumber+0x72>
					vol = (int)i;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	3301      	adds	r3, #1
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	e002      	b.n	8009e64 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009e5e:	2300      	movs	r3, #0
 8009e60:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009e62:	693b      	ldr	r3, [r7, #16]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	371c      	adds	r7, #28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	70da      	strb	r2, [r3, #3]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f04f 32ff 	mov.w	r2, #4294967295
 8009e86:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f7ff f854 	bl	8008f38 <move_window>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <check_fs+0x2a>
 8009e96:	2304      	movs	r3, #4
 8009e98:	e038      	b.n	8009f0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3334      	adds	r3, #52	; 0x34
 8009e9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe fd98 	bl	80089d8 <ld_word>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d001      	beq.n	8009eb8 <check_fs+0x48>
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e029      	b.n	8009f0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ebe:	2be9      	cmp	r3, #233	; 0xe9
 8009ec0:	d009      	beq.n	8009ed6 <check_fs+0x66>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ec8:	2beb      	cmp	r3, #235	; 0xeb
 8009eca:	d11e      	bne.n	8009f0a <check_fs+0x9a>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009ed2:	2b90      	cmp	r3, #144	; 0x90
 8009ed4:	d119      	bne.n	8009f0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3334      	adds	r3, #52	; 0x34
 8009eda:	3336      	adds	r3, #54	; 0x36
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe fd93 	bl	8008a08 <ld_dword>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ee8:	4a0a      	ldr	r2, [pc, #40]	; (8009f14 <check_fs+0xa4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d101      	bne.n	8009ef2 <check_fs+0x82>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e00c      	b.n	8009f0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3334      	adds	r3, #52	; 0x34
 8009ef6:	3352      	adds	r3, #82	; 0x52
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe fd85 	bl	8008a08 <ld_dword>
 8009efe:	4603      	mov	r3, r0
 8009f00:	4a05      	ldr	r2, [pc, #20]	; (8009f18 <check_fs+0xa8>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d101      	bne.n	8009f0a <check_fs+0x9a>
 8009f06:	2300      	movs	r3, #0
 8009f08:	e000      	b.n	8009f0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009f0a:	2302      	movs	r3, #2
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	00544146 	.word	0x00544146
 8009f18:	33544146 	.word	0x33544146

08009f1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b096      	sub	sp, #88	; 0x58
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	4613      	mov	r3, r2
 8009f28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff ff59 	bl	8009de8 <get_ldnumber>
 8009f36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	da01      	bge.n	8009f42 <find_volume+0x26>
 8009f3e:	230b      	movs	r3, #11
 8009f40:	e265      	b.n	800a40e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009f42:	4ab0      	ldr	r2, [pc, #704]	; (800a204 <find_volume+0x2e8>)
 8009f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <find_volume+0x3a>
 8009f52:	230c      	movs	r3, #12
 8009f54:	e25b      	b.n	800a40e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009f5c:	79fb      	ldrb	r3, [r7, #7]
 8009f5e:	f023 0301 	bic.w	r3, r3, #1
 8009f62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01a      	beq.n	8009fa2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	785b      	ldrb	r3, [r3, #1]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe fc93 	bl	800889c <disk_status>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10c      	bne.n	8009fa2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009f88:	79fb      	ldrb	r3, [r7, #7]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <find_volume+0x82>
 8009f8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009f9a:	230a      	movs	r3, #10
 8009f9c:	e237      	b.n	800a40e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	e235      	b.n	800a40e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fe fc8b 	bl	80088d0 <disk_initialize>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009fc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e21e      	b.n	800a40e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d007      	beq.n	8009fe6 <find_volume+0xca>
 8009fd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fda:	f003 0304 	and.w	r3, r3, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009fe2:	230a      	movs	r3, #10
 8009fe4:	e213      	b.n	800a40e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	7858      	ldrb	r0, [r3, #1]
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	330c      	adds	r3, #12
 8009fee:	461a      	mov	r2, r3
 8009ff0:	2102      	movs	r1, #2
 8009ff2:	f7fe fcd3 	bl	800899c <disk_ioctl>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <find_volume+0xe4>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e206      	b.n	800a40e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	899b      	ldrh	r3, [r3, #12]
 800a004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a008:	d80d      	bhi.n	800a026 <find_volume+0x10a>
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	899b      	ldrh	r3, [r3, #12]
 800a00e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a012:	d308      	bcc.n	800a026 <find_volume+0x10a>
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	899b      	ldrh	r3, [r3, #12]
 800a018:	461a      	mov	r2, r3
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	899b      	ldrh	r3, [r3, #12]
 800a01e:	3b01      	subs	r3, #1
 800a020:	4013      	ands	r3, r2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <find_volume+0x10e>
 800a026:	2301      	movs	r3, #1
 800a028:	e1f1      	b.n	800a40e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a02a:	2300      	movs	r3, #0
 800a02c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a02e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a032:	f7ff ff1d 	bl	8009e70 <check_fs>
 800a036:	4603      	mov	r3, r0
 800a038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a040:	2b02      	cmp	r3, #2
 800a042:	d14b      	bne.n	800a0dc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a044:	2300      	movs	r3, #0
 800a046:	643b      	str	r3, [r7, #64]	; 0x40
 800a048:	e01f      	b.n	800a08a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a058:	4413      	add	r3, r2
 800a05a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05e:	3304      	adds	r3, #4
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d006      	beq.n	800a074 <find_volume+0x158>
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	3308      	adds	r3, #8
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fccc 	bl	8008a08 <ld_dword>
 800a070:	4602      	mov	r2, r0
 800a072:	e000      	b.n	800a076 <find_volume+0x15a>
 800a074:	2200      	movs	r2, #0
 800a076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a07e:	440b      	add	r3, r1
 800a080:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a086:	3301      	adds	r3, #1
 800a088:	643b      	str	r3, [r7, #64]	; 0x40
 800a08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d9dc      	bls.n	800a04a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a090:	2300      	movs	r3, #0
 800a092:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <find_volume+0x184>
 800a09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a09c:	3b01      	subs	r3, #1
 800a09e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a0ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d005      	beq.n	800a0c2 <find_volume+0x1a6>
 800a0b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0ba:	f7ff fed9 	bl	8009e70 <check_fs>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	e000      	b.n	800a0c4 <find_volume+0x1a8>
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d905      	bls.n	800a0dc <find_volume+0x1c0>
 800a0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d9e1      	bls.n	800a0a0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a0dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d101      	bne.n	800a0e8 <find_volume+0x1cc>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e192      	b.n	800a40e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a0e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d901      	bls.n	800a0f4 <find_volume+0x1d8>
 800a0f0:	230d      	movs	r3, #13
 800a0f2:	e18c      	b.n	800a40e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	3334      	adds	r3, #52	; 0x34
 800a0f8:	330b      	adds	r3, #11
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe fc6c 	bl	80089d8 <ld_word>
 800a100:	4603      	mov	r3, r0
 800a102:	461a      	mov	r2, r3
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	899b      	ldrh	r3, [r3, #12]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d001      	beq.n	800a110 <find_volume+0x1f4>
 800a10c:	230d      	movs	r3, #13
 800a10e:	e17e      	b.n	800a40e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	3334      	adds	r3, #52	; 0x34
 800a114:	3316      	adds	r3, #22
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe fc5e 	bl	80089d8 <ld_word>
 800a11c:	4603      	mov	r3, r0
 800a11e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a122:	2b00      	cmp	r3, #0
 800a124:	d106      	bne.n	800a134 <find_volume+0x218>
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	3334      	adds	r3, #52	; 0x34
 800a12a:	3324      	adds	r3, #36	; 0x24
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fc6b 	bl	8008a08 <ld_dword>
 800a132:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a138:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a146:	789b      	ldrb	r3, [r3, #2]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d005      	beq.n	800a158 <find_volume+0x23c>
 800a14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14e:	789b      	ldrb	r3, [r3, #2]
 800a150:	2b02      	cmp	r3, #2
 800a152:	d001      	beq.n	800a158 <find_volume+0x23c>
 800a154:	230d      	movs	r3, #13
 800a156:	e15a      	b.n	800a40e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	789b      	ldrb	r3, [r3, #2]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a160:	fb02 f303 	mul.w	r3, r2, r3
 800a164:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	895b      	ldrh	r3, [r3, #10]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d008      	beq.n	800a18c <find_volume+0x270>
 800a17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17c:	895b      	ldrh	r3, [r3, #10]
 800a17e:	461a      	mov	r2, r3
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	895b      	ldrh	r3, [r3, #10]
 800a184:	3b01      	subs	r3, #1
 800a186:	4013      	ands	r3, r2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <find_volume+0x274>
 800a18c:	230d      	movs	r3, #13
 800a18e:	e13e      	b.n	800a40e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	3334      	adds	r3, #52	; 0x34
 800a194:	3311      	adds	r3, #17
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fc1e 	bl	80089d8 <ld_word>
 800a19c:	4603      	mov	r3, r0
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	891b      	ldrh	r3, [r3, #8]
 800a1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1aa:	8992      	ldrh	r2, [r2, #12]
 800a1ac:	0952      	lsrs	r2, r2, #5
 800a1ae:	b292      	uxth	r2, r2
 800a1b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1b4:	fb02 f201 	mul.w	r2, r2, r1
 800a1b8:	1a9b      	subs	r3, r3, r2
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <find_volume+0x2a8>
 800a1c0:	230d      	movs	r3, #13
 800a1c2:	e124      	b.n	800a40e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	3334      	adds	r3, #52	; 0x34
 800a1c8:	3313      	adds	r3, #19
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fc04 	bl	80089d8 <ld_word>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d106      	bne.n	800a1e8 <find_volume+0x2cc>
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	3334      	adds	r3, #52	; 0x34
 800a1de:	3320      	adds	r3, #32
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fe fc11 	bl	8008a08 <ld_dword>
 800a1e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	3334      	adds	r3, #52	; 0x34
 800a1ec:	330e      	adds	r3, #14
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fbf2 	bl	80089d8 <ld_word>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a1f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d104      	bne.n	800a208 <find_volume+0x2ec>
 800a1fe:	230d      	movs	r3, #13
 800a200:	e105      	b.n	800a40e <find_volume+0x4f2>
 800a202:	bf00      	nop
 800a204:	200007a4 	.word	0x200007a4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a208:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a20c:	4413      	add	r3, r2
 800a20e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a210:	8911      	ldrh	r1, [r2, #8]
 800a212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a214:	8992      	ldrh	r2, [r2, #12]
 800a216:	0952      	lsrs	r2, r2, #5
 800a218:	b292      	uxth	r2, r2
 800a21a:	fbb1 f2f2 	udiv	r2, r1, r2
 800a21e:	b292      	uxth	r2, r2
 800a220:	4413      	add	r3, r2
 800a222:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	429a      	cmp	r2, r3
 800a22a:	d201      	bcs.n	800a230 <find_volume+0x314>
 800a22c:	230d      	movs	r3, #13
 800a22e:	e0ee      	b.n	800a40e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a238:	8952      	ldrh	r2, [r2, #10]
 800a23a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a23e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <find_volume+0x32e>
 800a246:	230d      	movs	r3, #13
 800a248:	e0e1      	b.n	800a40e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a24a:	2303      	movs	r3, #3
 800a24c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a256:	4293      	cmp	r3, r2
 800a258:	d802      	bhi.n	800a260 <find_volume+0x344>
 800a25a:	2302      	movs	r3, #2
 800a25c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a266:	4293      	cmp	r3, r2
 800a268:	d802      	bhi.n	800a270 <find_volume+0x354>
 800a26a:	2301      	movs	r3, #1
 800a26c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	1c9a      	adds	r2, r3, #2
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a27c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a27e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a282:	441a      	add	r2, r3
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28c:	441a      	add	r2, r3
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a292:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a296:	2b03      	cmp	r3, #3
 800a298:	d11e      	bne.n	800a2d8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	3334      	adds	r3, #52	; 0x34
 800a29e:	332a      	adds	r3, #42	; 0x2a
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe fb99 	bl	80089d8 <ld_word>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <find_volume+0x394>
 800a2ac:	230d      	movs	r3, #13
 800a2ae:	e0ae      	b.n	800a40e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	891b      	ldrh	r3, [r3, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <find_volume+0x3a0>
 800a2b8:	230d      	movs	r3, #13
 800a2ba:	e0a8      	b.n	800a40e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	3334      	adds	r3, #52	; 0x34
 800a2c0:	332c      	adds	r3, #44	; 0x2c
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fba0 	bl	8008a08 <ld_dword>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2cc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a2d6:	e01f      	b.n	800a318 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	891b      	ldrh	r3, [r3, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <find_volume+0x3c8>
 800a2e0:	230d      	movs	r3, #13
 800a2e2:	e094      	b.n	800a40e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ea:	441a      	add	r2, r3
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d103      	bne.n	800a300 <find_volume+0x3e4>
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	e00a      	b.n	800a316 <find_volume+0x3fa>
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	699a      	ldr	r2, [r3, #24]
 800a304:	4613      	mov	r3, r2
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	4413      	add	r3, r2
 800a30a:	085a      	lsrs	r2, r3, #1
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a316:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	69da      	ldr	r2, [r3, #28]
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	899b      	ldrh	r3, [r3, #12]
 800a320:	4619      	mov	r1, r3
 800a322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a324:	440b      	add	r3, r1
 800a326:	3b01      	subs	r3, #1
 800a328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a32a:	8989      	ldrh	r1, [r1, #12]
 800a32c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a330:	429a      	cmp	r2, r3
 800a332:	d201      	bcs.n	800a338 <find_volume+0x41c>
 800a334:	230d      	movs	r3, #13
 800a336:	e06a      	b.n	800a40e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	f04f 32ff 	mov.w	r2, #4294967295
 800a33e:	615a      	str	r2, [r3, #20]
 800a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a342:	695a      	ldr	r2, [r3, #20]
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	2280      	movs	r2, #128	; 0x80
 800a34c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a34e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a352:	2b03      	cmp	r3, #3
 800a354:	d149      	bne.n	800a3ea <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	3334      	adds	r3, #52	; 0x34
 800a35a:	3330      	adds	r3, #48	; 0x30
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fe fb3b 	bl	80089d8 <ld_word>
 800a362:	4603      	mov	r3, r0
 800a364:	2b01      	cmp	r3, #1
 800a366:	d140      	bne.n	800a3ea <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a36a:	3301      	adds	r3, #1
 800a36c:	4619      	mov	r1, r3
 800a36e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a370:	f7fe fde2 	bl	8008f38 <move_window>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d137      	bne.n	800a3ea <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	2200      	movs	r2, #0
 800a37e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	3334      	adds	r3, #52	; 0x34
 800a384:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe fb25 	bl	80089d8 <ld_word>
 800a38e:	4603      	mov	r3, r0
 800a390:	461a      	mov	r2, r3
 800a392:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a396:	429a      	cmp	r2, r3
 800a398:	d127      	bne.n	800a3ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	3334      	adds	r3, #52	; 0x34
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe fb32 	bl	8008a08 <ld_dword>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	4a1c      	ldr	r2, [pc, #112]	; (800a418 <find_volume+0x4fc>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d11e      	bne.n	800a3ea <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	3334      	adds	r3, #52	; 0x34
 800a3b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe fb27 	bl	8008a08 <ld_dword>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	4a17      	ldr	r2, [pc, #92]	; (800a41c <find_volume+0x500>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d113      	bne.n	800a3ea <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	3334      	adds	r3, #52	; 0x34
 800a3c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fb1c 	bl	8008a08 <ld_dword>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	3334      	adds	r3, #52	; 0x34
 800a3da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe fb12 	bl	8008a08 <ld_dword>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a3f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a3f2:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <find_volume+0x504>)
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	4b09      	ldr	r3, [pc, #36]	; (800a420 <find_volume+0x504>)
 800a3fc:	801a      	strh	r2, [r3, #0]
 800a3fe:	4b08      	ldr	r3, [pc, #32]	; (800a420 <find_volume+0x504>)
 800a400:	881a      	ldrh	r2, [r3, #0]
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a406:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a408:	f7fe fd2e 	bl	8008e68 <clear_lock>
#endif
	return FR_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3758      	adds	r7, #88	; 0x58
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	41615252 	.word	0x41615252
 800a41c:	61417272 	.word	0x61417272
 800a420:	200007a8 	.word	0x200007a8

0800a424 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a42e:	2309      	movs	r3, #9
 800a430:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01c      	beq.n	800a472 <validate+0x4e>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d018      	beq.n	800a472 <validate+0x4e>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d013      	beq.n	800a472 <validate+0x4e>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	889a      	ldrh	r2, [r3, #4]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	88db      	ldrh	r3, [r3, #6]
 800a454:	429a      	cmp	r2, r3
 800a456:	d10c      	bne.n	800a472 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	785b      	ldrb	r3, [r3, #1]
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe fa1c 	bl	800889c <disk_status>
 800a464:	4603      	mov	r3, r0
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <validate+0x4e>
			res = FR_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <validate+0x5a>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	e000      	b.n	800a480 <validate+0x5c>
 800a47e:	2300      	movs	r3, #0
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	6013      	str	r3, [r2, #0]
	return res;
 800a484:	7bfb      	ldrb	r3, [r7, #15]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
	...

0800a490 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b088      	sub	sp, #32
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4613      	mov	r3, r2
 800a49c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a4a2:	f107 0310 	add.w	r3, r7, #16
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff fc9e 	bl	8009de8 <get_ldnumber>
 800a4ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	da01      	bge.n	800a4b8 <f_mount+0x28>
 800a4b4:	230b      	movs	r3, #11
 800a4b6:	e02b      	b.n	800a510 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a4b8:	4a17      	ldr	r2, [pc, #92]	; (800a518 <f_mount+0x88>)
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a4c8:	69b8      	ldr	r0, [r7, #24]
 800a4ca:	f7fe fccd 	bl	8008e68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	490d      	ldr	r1, [pc, #52]	; (800a518 <f_mount+0x88>)
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <f_mount+0x66>
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d001      	beq.n	800a4fa <f_mount+0x6a>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e00a      	b.n	800a510 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a4fa:	f107 010c 	add.w	r1, r7, #12
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	2200      	movs	r2, #0
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff fd09 	bl	8009f1c <find_volume>
 800a50a:	4603      	mov	r3, r0
 800a50c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3720      	adds	r7, #32
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	200007a4 	.word	0x200007a4

0800a51c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b098      	sub	sp, #96	; 0x60
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	4613      	mov	r3, r2
 800a528:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <f_open+0x18>
 800a530:	2309      	movs	r3, #9
 800a532:	e1bb      	b.n	800a8ac <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a53a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a53c:	79fa      	ldrb	r2, [r7, #7]
 800a53e:	f107 0110 	add.w	r1, r7, #16
 800a542:	f107 0308 	add.w	r3, r7, #8
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff fce8 	bl	8009f1c <find_volume>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a556:	2b00      	cmp	r3, #0
 800a558:	f040 819f 	bne.w	800a89a <f_open+0x37e>
		dj.obj.fs = fs;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	f107 0314 	add.w	r3, r7, #20
 800a566:	4611      	mov	r1, r2
 800a568:	4618      	mov	r0, r3
 800a56a:	f7ff fbc7 	bl	8009cfc <follow_path>
 800a56e:	4603      	mov	r3, r0
 800a570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d11a      	bne.n	800a5b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a57c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a580:	b25b      	sxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	da03      	bge.n	800a58e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a586:	2306      	movs	r3, #6
 800a588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a58c:	e011      	b.n	800a5b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	f023 0301 	bic.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	bf14      	ite	ne
 800a598:	2301      	movne	r3, #1
 800a59a:	2300      	moveq	r3, #0
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f107 0314 	add.w	r3, r7, #20
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fb16 	bl	8008bd8 <chk_lock>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	f003 031c 	and.w	r3, r3, #28
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d07f      	beq.n	800a6bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d017      	beq.n	800a5f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d10e      	bne.n	800a5ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a5cc:	f7fe fb60 	bl	8008c90 <enq_lock>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d006      	beq.n	800a5e4 <f_open+0xc8>
 800a5d6:	f107 0314 	add.w	r3, r7, #20
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fac8 	bl	8009b70 <dir_register>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	e000      	b.n	800a5e6 <f_open+0xca>
 800a5e4:	2312      	movs	r3, #18
 800a5e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a5ea:	79fb      	ldrb	r3, [r7, #7]
 800a5ec:	f043 0308 	orr.w	r3, r3, #8
 800a5f0:	71fb      	strb	r3, [r7, #7]
 800a5f2:	e010      	b.n	800a616 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a5f4:	7ebb      	ldrb	r3, [r7, #26]
 800a5f6:	f003 0311 	and.w	r3, r3, #17
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <f_open+0xea>
					res = FR_DENIED;
 800a5fe:	2307      	movs	r3, #7
 800a600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a604:	e007      	b.n	800a616 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <f_open+0xfa>
 800a610:	2308      	movs	r3, #8
 800a612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d168      	bne.n	800a6f0 <f_open+0x1d4>
 800a61e:	79fb      	ldrb	r3, [r7, #7]
 800a620:	f003 0308 	and.w	r3, r3, #8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d063      	beq.n	800a6f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a628:	f7fb f93c 	bl	80058a4 <get_fattime>
 800a62c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	330e      	adds	r3, #14
 800a632:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe fa25 	bl	8008a84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63c:	3316      	adds	r3, #22
 800a63e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fa1f 	bl	8008a84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	330b      	adds	r3, #11
 800a64a:	2220      	movs	r2, #32
 800a64c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f7ff f9f7 	bl	8009a48 <ld_clust>
 800a65a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a660:	2200      	movs	r2, #0
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff fa0f 	bl	8009a86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66a:	331c      	adds	r3, #28
 800a66c:	2100      	movs	r1, #0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fa08 	bl	8008a84 <st_dword>
					fs->wflag = 1;
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	2201      	movs	r2, #1
 800a678:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d037      	beq.n	800a6f0 <f_open+0x1d4>
						dw = fs->winsect;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a684:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a686:	f107 0314 	add.w	r3, r7, #20
 800a68a:	2200      	movs	r2, #0
 800a68c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe feff 	bl	8009492 <remove_chain>
 800a694:	4603      	mov	r3, r0
 800a696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a69a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d126      	bne.n	800a6f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fc46 	bl	8008f38 <move_window>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6b6:	3a01      	subs	r2, #1
 800a6b8:	611a      	str	r2, [r3, #16]
 800a6ba:	e019      	b.n	800a6f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d115      	bne.n	800a6f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a6c4:	7ebb      	ldrb	r3, [r7, #26]
 800a6c6:	f003 0310 	and.w	r3, r3, #16
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a6ce:	2304      	movs	r3, #4
 800a6d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a6d4:	e00c      	b.n	800a6f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d007      	beq.n	800a6f0 <f_open+0x1d4>
 800a6e0:	7ebb      	ldrb	r3, [r7, #26]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <f_open+0x1d4>
						res = FR_DENIED;
 800a6ea:	2307      	movs	r3, #7
 800a6ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d128      	bne.n	800a74a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	f003 0308 	and.w	r3, r3, #8
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a702:	79fb      	ldrb	r3, [r7, #7]
 800a704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a708:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bf14      	ite	ne
 800a722:	2301      	movne	r3, #1
 800a724:	2300      	moveq	r3, #0
 800a726:	b2db      	uxtb	r3, r3
 800a728:	461a      	mov	r2, r3
 800a72a:	f107 0314 	add.w	r3, r7, #20
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f7fe facf 	bl	8008cd4 <inc_lock>
 800a736:	4602      	mov	r2, r0
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d102      	bne.n	800a74a <f_open+0x22e>
 800a744:	2302      	movs	r3, #2
 800a746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a74a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f040 80a3 	bne.w	800a89a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff f974 	bl	8009a48 <ld_clust>
 800a760:	4602      	mov	r2, r0
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a768:	331c      	adds	r3, #28
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe f94c 	bl	8008a08 <ld_dword>
 800a770:	4602      	mov	r2, r0
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	88da      	ldrh	r2, [r3, #6]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	79fa      	ldrb	r2, [r7, #7]
 800a78e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3330      	adds	r3, #48	; 0x30
 800a7a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fe f9b6 	bl	8008b1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d06e      	beq.n	800a89a <f_open+0x37e>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d06a      	beq.n	800a89a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	68da      	ldr	r2, [r3, #12]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	895b      	ldrh	r3, [r3, #10]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	899b      	ldrh	r3, [r3, #12]
 800a7d6:	fb03 f302 	mul.w	r3, r3, r2
 800a7da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	657b      	str	r3, [r7, #84]	; 0x54
 800a7e8:	e016      	b.n	800a818 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe fc5f 	bl	80090b2 <get_fat>
 800a7f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a7f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d802      	bhi.n	800a802 <f_open+0x2e6>
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a808:	d102      	bne.n	800a810 <f_open+0x2f4>
 800a80a:	2301      	movs	r3, #1
 800a80c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	657b      	str	r3, [r7, #84]	; 0x54
 800a818:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d103      	bne.n	800a828 <f_open+0x30c>
 800a820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a824:	429a      	cmp	r2, r3
 800a826:	d8e0      	bhi.n	800a7ea <f_open+0x2ce>
				}
				fp->clust = clst;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a82c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a832:	2b00      	cmp	r3, #0
 800a834:	d131      	bne.n	800a89a <f_open+0x37e>
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	899b      	ldrh	r3, [r3, #12]
 800a83a:	461a      	mov	r2, r3
 800a83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a83e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a842:	fb02 f201 	mul.w	r2, r2, r1
 800a846:	1a9b      	subs	r3, r3, r2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d026      	beq.n	800a89a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fc0f 	bl	8009074 <clust2sect>
 800a856:	6478      	str	r0, [r7, #68]	; 0x44
 800a858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d103      	bne.n	800a866 <f_open+0x34a>
						res = FR_INT_ERR;
 800a85e:	2302      	movs	r3, #2
 800a860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a864:	e019      	b.n	800a89a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	899b      	ldrh	r3, [r3, #12]
 800a86a:	461a      	mov	r2, r3
 800a86c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a86e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a874:	441a      	add	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	7858      	ldrb	r0, [r3, #1]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6a1a      	ldr	r2, [r3, #32]
 800a888:	2301      	movs	r3, #1
 800a88a:	f7fe f847 	bl	800891c <disk_read>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <f_open+0x37e>
 800a894:	2301      	movs	r3, #1
 800a896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a89a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d002      	beq.n	800a8a8 <f_open+0x38c>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a8a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3760      	adds	r7, #96	; 0x60
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08e      	sub	sp, #56	; 0x38
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f107 0214 	add.w	r2, r7, #20
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fda5 	bl	800a424 <validate>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a8e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d107      	bne.n	800a8f8 <f_read+0x44>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	7d5b      	ldrb	r3, [r3, #21]
 800a8ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a8f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <f_read+0x4a>
 800a8f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8fc:	e135      	b.n	800ab6a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	7d1b      	ldrb	r3, [r3, #20]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <f_read+0x5a>
 800a90a:	2307      	movs	r3, #7
 800a90c:	e12d      	b.n	800ab6a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	68da      	ldr	r2, [r3, #12]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	429a      	cmp	r2, r3
 800a920:	f240 811e 	bls.w	800ab60 <f_read+0x2ac>
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a928:	e11a      	b.n	800ab60 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	8992      	ldrh	r2, [r2, #12]
 800a932:	fbb3 f1f2 	udiv	r1, r3, r2
 800a936:	fb02 f201 	mul.w	r2, r2, r1
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f040 80d5 	bne.w	800aaec <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	8992      	ldrh	r2, [r2, #12]
 800a94a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	8952      	ldrh	r2, [r2, #10]
 800a952:	3a01      	subs	r2, #1
 800a954:	4013      	ands	r3, r2
 800a956:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d12f      	bne.n	800a9be <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d103      	bne.n	800a96e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	633b      	str	r3, [r7, #48]	; 0x30
 800a96c:	e013      	b.n	800a996 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d007      	beq.n	800a986 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	4619      	mov	r1, r3
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7fe fe85 	bl	800968c <clmt_clust>
 800a982:	6338      	str	r0, [r7, #48]	; 0x30
 800a984:	e007      	b.n	800a996 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	4619      	mov	r1, r3
 800a98e:	4610      	mov	r0, r2
 800a990:	f7fe fb8f 	bl	80090b2 <get_fat>
 800a994:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d804      	bhi.n	800a9a6 <f_read+0xf2>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	755a      	strb	r2, [r3, #21]
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	e0e1      	b.n	800ab6a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ac:	d104      	bne.n	800a9b8 <f_read+0x104>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	755a      	strb	r2, [r3, #21]
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e0d8      	b.n	800ab6a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	f7fe fb54 	bl	8009074 <clust2sect>
 800a9cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d104      	bne.n	800a9de <f_read+0x12a>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	755a      	strb	r2, [r3, #21]
 800a9da:	2302      	movs	r3, #2
 800a9dc:	e0c5      	b.n	800ab6a <f_read+0x2b6>
			sect += csect;
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	899b      	ldrh	r3, [r3, #12]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d041      	beq.n	800aa7e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	4413      	add	r3, r2
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	8952      	ldrh	r2, [r2, #10]
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d905      	bls.n	800aa14 <f_read+0x160>
					cc = fs->csize - csect;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	895b      	ldrh	r3, [r3, #10]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	7858      	ldrb	r0, [r3, #1]
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa1e:	f7fd ff7d 	bl	800891c <disk_read>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <f_read+0x17e>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	755a      	strb	r2, [r3, #21]
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e09b      	b.n	800ab6a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	7d1b      	ldrb	r3, [r3, #20]
 800aa36:	b25b      	sxtb	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	da18      	bge.n	800aa6e <f_read+0x1ba>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a1a      	ldr	r2, [r3, #32]
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d911      	bls.n	800aa6e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a1a      	ldr	r2, [r3, #32]
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	8992      	ldrh	r2, [r2, #12]
 800aa56:	fb02 f303 	mul.w	r3, r2, r3
 800aa5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa5c:	18d0      	adds	r0, r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	899b      	ldrh	r3, [r3, #12]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	f7fe f837 	bl	8008adc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	899b      	ldrh	r3, [r3, #12]
 800aa72:	461a      	mov	r2, r3
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	fb02 f303 	mul.w	r3, r2, r3
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800aa7c:	e05c      	b.n	800ab38 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	69ba      	ldr	r2, [r7, #24]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d02e      	beq.n	800aae6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	7d1b      	ldrb	r3, [r3, #20]
 800aa8c:	b25b      	sxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	da18      	bge.n	800aac4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	7858      	ldrb	r0, [r3, #1]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a1a      	ldr	r2, [r3, #32]
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	f7fd ff5b 	bl	800895c <disk_write>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d004      	beq.n	800aab6 <f_read+0x202>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2201      	movs	r2, #1
 800aab0:	755a      	strb	r2, [r3, #21]
 800aab2:	2301      	movs	r3, #1
 800aab4:	e059      	b.n	800ab6a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	7d1b      	ldrb	r3, [r3, #20]
 800aaba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	7858      	ldrb	r0, [r3, #1]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aace:	2301      	movs	r3, #1
 800aad0:	69ba      	ldr	r2, [r7, #24]
 800aad2:	f7fd ff23 	bl	800891c <disk_read>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d004      	beq.n	800aae6 <f_read+0x232>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2201      	movs	r2, #1
 800aae0:	755a      	strb	r2, [r3, #21]
 800aae2:	2301      	movs	r3, #1
 800aae4:	e041      	b.n	800ab6a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	899b      	ldrh	r3, [r3, #12]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	8992      	ldrh	r2, [r2, #12]
 800aafa:	fbb3 f1f2 	udiv	r1, r3, r2
 800aafe:	fb02 f201 	mul.w	r2, r2, r1
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	1ac3      	subs	r3, r0, r3
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ab08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d901      	bls.n	800ab14 <f_read+0x260>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	8992      	ldrh	r2, [r2, #12]
 800ab22:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab26:	fb02 f200 	mul.w	r2, r2, r0
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab30:	4619      	mov	r1, r3
 800ab32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab34:	f7fd ffd2 	bl	8008adc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ab38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3c:	4413      	add	r3, r2
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	699a      	ldr	r2, [r3, #24]
 800ab44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab46:	441a      	add	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	619a      	str	r2, [r3, #24]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	441a      	add	r2, r3
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f47f aee1 	bne.w	800a92a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3738      	adds	r7, #56	; 0x38
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b08c      	sub	sp, #48	; 0x30
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f107 0210 	add.w	r2, r7, #16
 800ab90:	4611      	mov	r1, r2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7ff fc46 	bl	800a424 <validate>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d107      	bne.n	800abb6 <f_write+0x44>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	7d5b      	ldrb	r3, [r3, #21]
 800abaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800abae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <f_write+0x4a>
 800abb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abba:	e16a      	b.n	800ae92 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	7d1b      	ldrb	r3, [r3, #20]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <f_write+0x5a>
 800abc8:	2307      	movs	r3, #7
 800abca:	e162      	b.n	800ae92 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	699a      	ldr	r2, [r3, #24]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	441a      	add	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	429a      	cmp	r2, r3
 800abda:	f080 814c 	bcs.w	800ae76 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	43db      	mvns	r3, r3
 800abe4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800abe6:	e146      	b.n	800ae76 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	8992      	ldrh	r2, [r2, #12]
 800abf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800abf4:	fb02 f201 	mul.w	r2, r2, r1
 800abf8:	1a9b      	subs	r3, r3, r2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f040 80f1 	bne.w	800ade2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	8992      	ldrh	r2, [r2, #12]
 800ac08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	8952      	ldrh	r2, [r2, #10]
 800ac10:	3a01      	subs	r2, #1
 800ac12:	4013      	ands	r3, r2
 800ac14:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d143      	bne.n	800aca4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10c      	bne.n	800ac3e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d11a      	bne.n	800ac66 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2100      	movs	r1, #0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fe fc91 	bl	800955c <create_chain>
 800ac3a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ac3c:	e013      	b.n	800ac66 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d007      	beq.n	800ac56 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7fe fd1d 	bl	800968c <clmt_clust>
 800ac52:	62b8      	str	r0, [r7, #40]	; 0x28
 800ac54:	e007      	b.n	800ac66 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	f7fe fc7c 	bl	800955c <create_chain>
 800ac64:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 8109 	beq.w	800ae80 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d104      	bne.n	800ac7e <f_write+0x10c>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2202      	movs	r2, #2
 800ac78:	755a      	strb	r2, [r3, #21]
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	e109      	b.n	800ae92 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac84:	d104      	bne.n	800ac90 <f_write+0x11e>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	755a      	strb	r2, [r3, #21]
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e100      	b.n	800ae92 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac94:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <f_write+0x132>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aca2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	7d1b      	ldrb	r3, [r3, #20]
 800aca8:	b25b      	sxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	da18      	bge.n	800ace0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	7858      	ldrb	r0, [r3, #1]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a1a      	ldr	r2, [r3, #32]
 800acbc:	2301      	movs	r3, #1
 800acbe:	f7fd fe4d 	bl	800895c <disk_write>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d004      	beq.n	800acd2 <f_write+0x160>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2201      	movs	r2, #1
 800accc:	755a      	strb	r2, [r3, #21]
 800acce:	2301      	movs	r3, #1
 800acd0:	e0df      	b.n	800ae92 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	7d1b      	ldrb	r3, [r3, #20]
 800acd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7fe f9c3 	bl	8009074 <clust2sect>
 800acee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d104      	bne.n	800ad00 <f_write+0x18e>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2202      	movs	r2, #2
 800acfa:	755a      	strb	r2, [r3, #21]
 800acfc:	2302      	movs	r3, #2
 800acfe:	e0c8      	b.n	800ae92 <f_write+0x320>
			sect += csect;
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	4413      	add	r3, r2
 800ad06:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	899b      	ldrh	r3, [r3, #12]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d043      	beq.n	800ada4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad1c:	69ba      	ldr	r2, [r7, #24]
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	4413      	add	r3, r2
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	8952      	ldrh	r2, [r2, #10]
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d905      	bls.n	800ad36 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	895b      	ldrh	r3, [r3, #10]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	7858      	ldrb	r0, [r3, #1]
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	69f9      	ldr	r1, [r7, #28]
 800ad40:	f7fd fe0c 	bl	800895c <disk_write>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d004      	beq.n	800ad54 <f_write+0x1e2>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	755a      	strb	r2, [r3, #21]
 800ad50:	2301      	movs	r3, #1
 800ad52:	e09e      	b.n	800ae92 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a1a      	ldr	r2, [r3, #32]
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	6a3a      	ldr	r2, [r7, #32]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d918      	bls.n	800ad94 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a1a      	ldr	r2, [r3, #32]
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	8992      	ldrh	r2, [r2, #12]
 800ad74:	fb02 f303 	mul.w	r3, r2, r3
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	18d1      	adds	r1, r2, r3
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	899b      	ldrh	r3, [r3, #12]
 800ad80:	461a      	mov	r2, r3
 800ad82:	f7fd feab 	bl	8008adc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	7d1b      	ldrb	r3, [r3, #20]
 800ad8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	899b      	ldrh	r3, [r3, #12]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	fb02 f303 	mul.w	r3, r2, r3
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ada2:	e04b      	b.n	800ae3c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6a1b      	ldr	r3, [r3, #32]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d016      	beq.n	800addc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	699a      	ldr	r2, [r3, #24]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d210      	bcs.n	800addc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	7858      	ldrb	r0, [r3, #1]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800adc4:	2301      	movs	r3, #1
 800adc6:	697a      	ldr	r2, [r7, #20]
 800adc8:	f7fd fda8 	bl	800891c <disk_read>
 800adcc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800adce:	2b00      	cmp	r3, #0
 800add0:	d004      	beq.n	800addc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2201      	movs	r2, #1
 800add6:	755a      	strb	r2, [r3, #21]
 800add8:	2301      	movs	r3, #1
 800adda:	e05a      	b.n	800ae92 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	899b      	ldrh	r3, [r3, #12]
 800ade6:	4618      	mov	r0, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	8992      	ldrh	r2, [r2, #12]
 800adf0:	fbb3 f1f2 	udiv	r1, r3, r2
 800adf4:	fb02 f201 	mul.w	r2, r2, r1
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	1ac3      	subs	r3, r0, r3
 800adfc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800adfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d901      	bls.n	800ae0a <f_write+0x298>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	8992      	ldrh	r2, [r2, #12]
 800ae18:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae1c:	fb02 f200 	mul.w	r2, r2, r0
 800ae20:	1a9b      	subs	r3, r3, r2
 800ae22:	440b      	add	r3, r1
 800ae24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae26:	69f9      	ldr	r1, [r7, #28]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fd fe57 	bl	8008adc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	7d1b      	ldrb	r3, [r3, #20]
 800ae32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ae3c:	69fa      	ldr	r2, [r7, #28]
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae40:	4413      	add	r3, r2
 800ae42:	61fb      	str	r3, [r7, #28]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	699a      	ldr	r2, [r3, #24]
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	441a      	add	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	619a      	str	r2, [r3, #24]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	bf38      	it	cc
 800ae5c:	461a      	movcc	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	60da      	str	r2, [r3, #12]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	441a      	add	r2, r3
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f47f aeb5 	bne.w	800abe8 <f_write+0x76>
 800ae7e:	e000      	b.n	800ae82 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	7d1b      	ldrb	r3, [r3, #20]
 800ae86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3730      	adds	r7, #48	; 0x30
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b086      	sub	sp, #24
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f107 0208 	add.w	r2, r7, #8
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff faba 	bl	800a424 <validate>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d168      	bne.n	800af8c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	7d1b      	ldrb	r3, [r3, #20]
 800aebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d062      	beq.n	800af8c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	7d1b      	ldrb	r3, [r3, #20]
 800aeca:	b25b      	sxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	da15      	bge.n	800aefc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	7858      	ldrb	r0, [r3, #1]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1a      	ldr	r2, [r3, #32]
 800aede:	2301      	movs	r3, #1
 800aee0:	f7fd fd3c 	bl	800895c <disk_write>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <f_sync+0x54>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e04f      	b.n	800af8e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	7d1b      	ldrb	r3, [r3, #20]
 800aef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aefc:	f7fa fcd2 	bl	80058a4 <get_fattime>
 800af00:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	4619      	mov	r1, r3
 800af0a:	4610      	mov	r0, r2
 800af0c:	f7fe f814 	bl	8008f38 <move_window>
 800af10:	4603      	mov	r3, r0
 800af12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af14:	7dfb      	ldrb	r3, [r7, #23]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d138      	bne.n	800af8c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	330b      	adds	r3, #11
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	330b      	adds	r3, #11
 800af2a:	f042 0220 	orr.w	r2, r2, #32
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	461a      	mov	r2, r3
 800af3c:	68f9      	ldr	r1, [r7, #12]
 800af3e:	f7fe fda2 	bl	8009a86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f103 021c 	add.w	r2, r3, #28
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	4619      	mov	r1, r3
 800af4e:	4610      	mov	r0, r2
 800af50:	f7fd fd98 	bl	8008a84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3316      	adds	r3, #22
 800af58:	6939      	ldr	r1, [r7, #16]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fd fd92 	bl	8008a84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3312      	adds	r3, #18
 800af64:	2100      	movs	r1, #0
 800af66:	4618      	mov	r0, r3
 800af68:	f7fd fd71 	bl	8008a4e <st_word>
					fs->wflag = 1;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2201      	movs	r2, #1
 800af70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe f80d 	bl	8008f94 <sync_fs>
 800af7a:	4603      	mov	r3, r0
 800af7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	7d1b      	ldrb	r3, [r3, #20]
 800af82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af86:	b2da      	uxtb	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800af8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff ff7b 	bl	800ae9a <f_sync>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d118      	bne.n	800afe0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f107 0208 	add.w	r2, r7, #8
 800afb4:	4611      	mov	r1, r2
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7ff fa34 	bl	800a424 <validate>
 800afbc:	4603      	mov	r3, r0
 800afbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10c      	bne.n	800afe0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fd ff10 	bl	8008df0 <dec_lock>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d102      	bne.n	800afe0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800affa:	2301      	movs	r3, #1
 800affc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b002:	4b1f      	ldr	r3, [pc, #124]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b004:	7a5b      	ldrb	r3, [r3, #9]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d131      	bne.n	800b070 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b00c:	4b1c      	ldr	r3, [pc, #112]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b00e:	7a5b      	ldrb	r3, [r3, #9]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	461a      	mov	r2, r3
 800b014:	4b1a      	ldr	r3, [pc, #104]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b016:	2100      	movs	r1, #0
 800b018:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b01a:	4b19      	ldr	r3, [pc, #100]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b01c:	7a5b      	ldrb	r3, [r3, #9]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	4a17      	ldr	r2, [pc, #92]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b02a:	4b15      	ldr	r3, [pc, #84]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b02c:	7a5b      	ldrb	r3, [r3, #9]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	4b13      	ldr	r3, [pc, #76]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b034:	4413      	add	r3, r2
 800b036:	79fa      	ldrb	r2, [r7, #7]
 800b038:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b03a:	4b11      	ldr	r3, [pc, #68]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b03c:	7a5b      	ldrb	r3, [r3, #9]
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	b2d1      	uxtb	r1, r2
 800b044:	4a0e      	ldr	r2, [pc, #56]	; (800b080 <FATFS_LinkDriverEx+0x94>)
 800b046:	7251      	strb	r1, [r2, #9]
 800b048:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b04a:	7dbb      	ldrb	r3, [r7, #22]
 800b04c:	3330      	adds	r3, #48	; 0x30
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	3301      	adds	r3, #1
 800b058:	223a      	movs	r2, #58	; 0x3a
 800b05a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	3302      	adds	r3, #2
 800b060:	222f      	movs	r2, #47	; 0x2f
 800b062:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	3303      	adds	r3, #3
 800b068:	2200      	movs	r2, #0
 800b06a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
}
 800b072:	4618      	mov	r0, r3
 800b074:	371c      	adds	r7, #28
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	200007cc 	.word	0x200007cc

0800b084 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b08e:	2200      	movs	r2, #0
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff ffaa 	bl	800afec <FATFS_LinkDriverEx>
 800b098:	4603      	mov	r3, r0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
	...

0800b0a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	490e      	ldr	r1, [pc, #56]	; (800b0e4 <MX_USB_HOST_Init+0x40>)
 800b0ac:	480e      	ldr	r0, [pc, #56]	; (800b0e8 <MX_USB_HOST_Init+0x44>)
 800b0ae:	f7fc f89d 	bl	80071ec <USBH_Init>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b0b8:	f7f6 f824 	bl	8001104 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b0bc:	490b      	ldr	r1, [pc, #44]	; (800b0ec <MX_USB_HOST_Init+0x48>)
 800b0be:	480a      	ldr	r0, [pc, #40]	; (800b0e8 <MX_USB_HOST_Init+0x44>)
 800b0c0:	f7fc f922 	bl	8007308 <USBH_RegisterClass>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b0ca:	f7f6 f81b 	bl	8001104 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b0ce:	4806      	ldr	r0, [pc, #24]	; (800b0e8 <MX_USB_HOST_Init+0x44>)
 800b0d0:	f7fc f9a6 	bl	8007420 <USBH_Start>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b0da:	f7f6 f813 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b0de:	bf00      	nop
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	0800b105 	.word	0x0800b105
 800b0e8:	20003888 	.word	0x20003888
 800b0ec:	2000000c 	.word	0x2000000c

0800b0f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b0f4:	4802      	ldr	r0, [pc, #8]	; (800b100 <MX_USB_HOST_Process+0x10>)
 800b0f6:	f7fc f9a3 	bl	8007440 <USBH_Process>
}
 800b0fa:	bf00      	nop
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20003888 	.word	0x20003888

0800b104 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	460b      	mov	r3, r1
 800b10e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	3b01      	subs	r3, #1
 800b114:	2b04      	cmp	r3, #4
 800b116:	d819      	bhi.n	800b14c <USBH_UserProcess+0x48>
 800b118:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <USBH_UserProcess+0x1c>)
 800b11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11e:	bf00      	nop
 800b120:	0800b14d 	.word	0x0800b14d
 800b124:	0800b13d 	.word	0x0800b13d
 800b128:	0800b14d 	.word	0x0800b14d
 800b12c:	0800b145 	.word	0x0800b145
 800b130:	0800b135 	.word	0x0800b135
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b134:	4b09      	ldr	r3, [pc, #36]	; (800b15c <USBH_UserProcess+0x58>)
 800b136:	2203      	movs	r2, #3
 800b138:	701a      	strb	r2, [r3, #0]
  break;
 800b13a:	e008      	b.n	800b14e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b13c:	4b07      	ldr	r3, [pc, #28]	; (800b15c <USBH_UserProcess+0x58>)
 800b13e:	2202      	movs	r2, #2
 800b140:	701a      	strb	r2, [r3, #0]
  break;
 800b142:	e004      	b.n	800b14e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b144:	4b05      	ldr	r3, [pc, #20]	; (800b15c <USBH_UserProcess+0x58>)
 800b146:	2201      	movs	r2, #1
 800b148:	701a      	strb	r2, [r3, #0]
  break;
 800b14a:	e000      	b.n	800b14e <USBH_UserProcess+0x4a>

  default:
  break;
 800b14c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	200007d8 	.word	0x200007d8

0800b160 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08a      	sub	sp, #40	; 0x28
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b168:	f107 0314 	add.w	r3, r7, #20
 800b16c:	2200      	movs	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]
 800b170:	605a      	str	r2, [r3, #4]
 800b172:	609a      	str	r2, [r3, #8]
 800b174:	60da      	str	r2, [r3, #12]
 800b176:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b180:	d147      	bne.n	800b212 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b182:	2300      	movs	r3, #0
 800b184:	613b      	str	r3, [r7, #16]
 800b186:	4b25      	ldr	r3, [pc, #148]	; (800b21c <HAL_HCD_MspInit+0xbc>)
 800b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18a:	4a24      	ldr	r2, [pc, #144]	; (800b21c <HAL_HCD_MspInit+0xbc>)
 800b18c:	f043 0301 	orr.w	r3, r3, #1
 800b190:	6313      	str	r3, [r2, #48]	; 0x30
 800b192:	4b22      	ldr	r3, [pc, #136]	; (800b21c <HAL_HCD_MspInit+0xbc>)
 800b194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b19e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1ac:	f107 0314 	add.w	r3, r7, #20
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	481b      	ldr	r0, [pc, #108]	; (800b220 <HAL_HCD_MspInit+0xc0>)
 800b1b4:	f7f7 f82e 	bl	8002214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b1b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b1bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1be:	2302      	movs	r3, #2
 800b1c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b1ca:	230a      	movs	r3, #10
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1ce:	f107 0314 	add.w	r3, r7, #20
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4812      	ldr	r0, [pc, #72]	; (800b220 <HAL_HCD_MspInit+0xc0>)
 800b1d6:	f7f7 f81d 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b1da:	4b10      	ldr	r3, [pc, #64]	; (800b21c <HAL_HCD_MspInit+0xbc>)
 800b1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1de:	4a0f      	ldr	r2, [pc, #60]	; (800b21c <HAL_HCD_MspInit+0xbc>)
 800b1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e4:	6353      	str	r3, [r2, #52]	; 0x34
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <HAL_HCD_MspInit+0xbc>)
 800b1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ee:	4a0b      	ldr	r2, [pc, #44]	; (800b21c <HAL_HCD_MspInit+0xbc>)
 800b1f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1f4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1f6:	4b09      	ldr	r3, [pc, #36]	; (800b21c <HAL_HCD_MspInit+0xbc>)
 800b1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1fe:	60fb      	str	r3, [r7, #12]
 800b200:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b202:	2200      	movs	r2, #0
 800b204:	2100      	movs	r1, #0
 800b206:	2043      	movs	r0, #67	; 0x43
 800b208:	f7f6 ffcd 	bl	80021a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b20c:	2043      	movs	r0, #67	; 0x43
 800b20e:	f7f6 ffe6 	bl	80021de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b212:	bf00      	nop
 800b214:	3728      	adds	r7, #40	; 0x28
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	40023800 	.word	0x40023800
 800b220:	40020000 	.word	0x40020000

0800b224 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b232:	4618      	mov	r0, r3
 800b234:	f7fc fcd7 	bl	8007be6 <USBH_LL_IncTimer>
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fc fd0f 	bl	8007c72 <USBH_LL_Connect>
}
 800b254:	bf00      	nop
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fc fd18 	bl	8007ca0 <USBH_LL_Disconnect>
}
 800b270:	bf00      	nop
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	70fb      	strb	r3, [r7, #3]
 800b284:	4613      	mov	r3, r2
 800b286:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fc fcc9 	bl	8007c3a <USBH_LL_PortEnabled>
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fc fcc9 	bl	8007c56 <USBH_LL_PortDisabled>
}
 800b2c4:	bf00      	nop
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d12a      	bne.n	800b334 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b2de:	4a18      	ldr	r2, [pc, #96]	; (800b340 <USBH_LL_Init+0x74>)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a15      	ldr	r2, [pc, #84]	; (800b340 <USBH_LL_Init+0x74>)
 800b2ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2ee:	4b14      	ldr	r3, [pc, #80]	; (800b340 <USBH_LL_Init+0x74>)
 800b2f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b2f6:	4b12      	ldr	r3, [pc, #72]	; (800b340 <USBH_LL_Init+0x74>)
 800b2f8:	2208      	movs	r2, #8
 800b2fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b2fc:	4b10      	ldr	r3, [pc, #64]	; (800b340 <USBH_LL_Init+0x74>)
 800b2fe:	2201      	movs	r2, #1
 800b300:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b302:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <USBH_LL_Init+0x74>)
 800b304:	2200      	movs	r2, #0
 800b306:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b308:	4b0d      	ldr	r3, [pc, #52]	; (800b340 <USBH_LL_Init+0x74>)
 800b30a:	2202      	movs	r2, #2
 800b30c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b30e:	4b0c      	ldr	r3, [pc, #48]	; (800b340 <USBH_LL_Init+0x74>)
 800b310:	2200      	movs	r2, #0
 800b312:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b314:	480a      	ldr	r0, [pc, #40]	; (800b340 <USBH_LL_Init+0x74>)
 800b316:	f7f7 f94a 	bl	80025ae <HAL_HCD_Init>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d001      	beq.n	800b324 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b320:	f7f5 fef0 	bl	8001104 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b324:	4806      	ldr	r0, [pc, #24]	; (800b340 <USBH_LL_Init+0x74>)
 800b326:	f7f7 fd2e 	bl	8002d86 <HAL_HCD_GetCurrentFrame>
 800b32a:	4603      	mov	r3, r0
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7fc fc4a 	bl	8007bc8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20003c60 	.word	0x20003c60

0800b344 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f7 fc9d 	bl	8002c9a <HAL_HCD_Start>
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f98c 	bl	800b684 <USBH_Get_USB_Status>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b370:	7bbb      	ldrb	r3, [r7, #14]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b390:	4618      	mov	r0, r3
 800b392:	f7f7 fca5 	bl	8002ce0 <HAL_HCD_Stop>
 800b396:	4603      	mov	r3, r0
 800b398:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 f971 	bl	800b684 <USBH_Get_USB_Status>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7f7 fced 	bl	8002da2 <HAL_HCD_GetCurrentSpeed>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d00c      	beq.n	800b3e8 <USBH_LL_GetSpeed+0x38>
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d80d      	bhi.n	800b3ee <USBH_LL_GetSpeed+0x3e>
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <USBH_LL_GetSpeed+0x2c>
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d003      	beq.n	800b3e2 <USBH_LL_GetSpeed+0x32>
 800b3da:	e008      	b.n	800b3ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e0:	e008      	b.n	800b3f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e6:	e005      	b.n	800b3f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ec:	e002      	b.n	800b3f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f2:	bf00      	nop
  }
  return  speed;
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b414:	4618      	mov	r0, r3
 800b416:	f7f7 fc80 	bl	8002d1a <HAL_HCD_ResetPort>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	4618      	mov	r0, r3
 800b422:	f000 f92f 	bl	800b684 <USBH_Get_USB_Status>
 800b426:	4603      	mov	r3, r0
 800b428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b446:	78fa      	ldrb	r2, [r7, #3]
 800b448:	4611      	mov	r1, r2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7f7 fc87 	bl	8002d5e <HAL_HCD_HC_GetXferCount>
 800b450:	4603      	mov	r3, r0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b45a:	b590      	push	{r4, r7, lr}
 800b45c:	b089      	sub	sp, #36	; 0x24
 800b45e:	af04      	add	r7, sp, #16
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	4608      	mov	r0, r1
 800b464:	4611      	mov	r1, r2
 800b466:	461a      	mov	r2, r3
 800b468:	4603      	mov	r3, r0
 800b46a:	70fb      	strb	r3, [r7, #3]
 800b46c:	460b      	mov	r3, r1
 800b46e:	70bb      	strb	r3, [r7, #2]
 800b470:	4613      	mov	r3, r2
 800b472:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b482:	787c      	ldrb	r4, [r7, #1]
 800b484:	78ba      	ldrb	r2, [r7, #2]
 800b486:	78f9      	ldrb	r1, [r7, #3]
 800b488:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b48a:	9302      	str	r3, [sp, #8]
 800b48c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	4623      	mov	r3, r4
 800b49a:	f7f7 f8ea 	bl	8002672 <HAL_HCD_HC_Init>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 f8ed 	bl	800b684 <USBH_Get_USB_Status>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd90      	pop	{r4, r7, pc}

0800b4b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4d2:	78fa      	ldrb	r2, [r7, #3]
 800b4d4:	4611      	mov	r1, r2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7f7 f95a 	bl	8002790 <HAL_HCD_HC_Halt>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 f8ce 	bl	800b684 <USBH_Get_USB_Status>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b4f6:	b590      	push	{r4, r7, lr}
 800b4f8:	b089      	sub	sp, #36	; 0x24
 800b4fa:	af04      	add	r7, sp, #16
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	4608      	mov	r0, r1
 800b500:	4611      	mov	r1, r2
 800b502:	461a      	mov	r2, r3
 800b504:	4603      	mov	r3, r0
 800b506:	70fb      	strb	r3, [r7, #3]
 800b508:	460b      	mov	r3, r1
 800b50a:	70bb      	strb	r3, [r7, #2]
 800b50c:	4613      	mov	r3, r2
 800b50e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b51e:	787c      	ldrb	r4, [r7, #1]
 800b520:	78ba      	ldrb	r2, [r7, #2]
 800b522:	78f9      	ldrb	r1, [r7, #3]
 800b524:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b528:	9303      	str	r3, [sp, #12]
 800b52a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b52c:	9302      	str	r3, [sp, #8]
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	4623      	mov	r3, r4
 800b53a:	f7f7 f94d 	bl	80027d8 <HAL_HCD_HC_SubmitRequest>
 800b53e:	4603      	mov	r3, r0
 800b540:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	4618      	mov	r0, r3
 800b546:	f000 f89d 	bl	800b684 <USBH_Get_USB_Status>
 800b54a:	4603      	mov	r3, r0
 800b54c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b54e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	bd90      	pop	{r4, r7, pc}

0800b558 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	460b      	mov	r3, r1
 800b562:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b56a:	78fa      	ldrb	r2, [r7, #3]
 800b56c:	4611      	mov	r1, r2
 800b56e:	4618      	mov	r0, r3
 800b570:	f7f7 fbe1 	bl	8002d36 <HAL_HCD_HC_GetURBState>
 800b574:	4603      	mov	r3, r0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	460b      	mov	r3, r1
 800b588:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b590:	2b01      	cmp	r3, #1
 800b592:	d103      	bne.n	800b59c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b594:	78fb      	ldrb	r3, [r7, #3]
 800b596:	4618      	mov	r0, r3
 800b598:	f000 f8a0 	bl	800b6dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b59c:	20c8      	movs	r0, #200	; 0xc8
 800b59e:	f7f6 fd03 	bl	8001fa8 <HAL_Delay>
  return USBH_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	212c      	movs	r1, #44	; 0x2c
 800b5ca:	fb01 f303 	mul.w	r3, r1, r3
 800b5ce:	4413      	add	r3, r2
 800b5d0:	333b      	adds	r3, #59	; 0x3b
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d009      	beq.n	800b5ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b5d8:	78fb      	ldrb	r3, [r7, #3]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	212c      	movs	r1, #44	; 0x2c
 800b5de:	fb01 f303 	mul.w	r3, r1, r3
 800b5e2:	4413      	add	r3, r2
 800b5e4:	3354      	adds	r3, #84	; 0x54
 800b5e6:	78ba      	ldrb	r2, [r7, #2]
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	e008      	b.n	800b5fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	212c      	movs	r1, #44	; 0x2c
 800b5f2:	fb01 f303 	mul.w	r3, r1, r3
 800b5f6:	4413      	add	r3, r2
 800b5f8:	3355      	adds	r3, #85	; 0x55
 800b5fa:	78ba      	ldrb	r2, [r7, #2]
 800b5fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b622:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b624:	78fb      	ldrb	r3, [r7, #3]
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	212c      	movs	r1, #44	; 0x2c
 800b62a:	fb01 f303 	mul.w	r3, r1, r3
 800b62e:	4413      	add	r3, r2
 800b630:	333b      	adds	r3, #59	; 0x3b
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d009      	beq.n	800b64c <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b638:	78fb      	ldrb	r3, [r7, #3]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	212c      	movs	r1, #44	; 0x2c
 800b63e:	fb01 f303 	mul.w	r3, r1, r3
 800b642:	4413      	add	r3, r2
 800b644:	3354      	adds	r3, #84	; 0x54
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	73fb      	strb	r3, [r7, #15]
 800b64a:	e008      	b.n	800b65e <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b64c:	78fb      	ldrb	r3, [r7, #3]
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	212c      	movs	r1, #44	; 0x2c
 800b652:	fb01 f303 	mul.w	r3, r1, r3
 800b656:	4413      	add	r3, r2
 800b658:	3355      	adds	r3, #85	; 0x55
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7f6 fc97 	bl	8001fa8 <HAL_Delay>
}
 800b67a:	bf00      	nop
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b68e:	2300      	movs	r3, #0
 800b690:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	2b03      	cmp	r3, #3
 800b696:	d817      	bhi.n	800b6c8 <USBH_Get_USB_Status+0x44>
 800b698:	a201      	add	r2, pc, #4	; (adr r2, 800b6a0 <USBH_Get_USB_Status+0x1c>)
 800b69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69e:	bf00      	nop
 800b6a0:	0800b6b1 	.word	0x0800b6b1
 800b6a4:	0800b6b7 	.word	0x0800b6b7
 800b6a8:	0800b6bd 	.word	0x0800b6bd
 800b6ac:	0800b6c3 	.word	0x0800b6c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b4:	e00b      	b.n	800b6ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ba:	e008      	b.n	800b6ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	73fb      	strb	r3, [r7, #15]
    break;
 800b6c0:	e005      	b.n	800b6ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b6c2:	2302      	movs	r3, #2
 800b6c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b6c6:	e002      	b.n	800b6ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b6cc:	bf00      	nop
  }
  return usb_status;
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d102      	bne.n	800b6f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	73fb      	strb	r3, [r7, #15]
 800b6f4:	e001      	b.n	800b6fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	2101      	movs	r1, #1
 800b700:	4803      	ldr	r0, [pc, #12]	; (800b710 <MX_DriverVbusFS+0x34>)
 800b702:	f7f6 ff3b 	bl	800257c <HAL_GPIO_WritePin>
}
 800b706:	bf00      	nop
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	40020800 	.word	0x40020800

0800b714 <__errno>:
 800b714:	4b01      	ldr	r3, [pc, #4]	; (800b71c <__errno+0x8>)
 800b716:	6818      	ldr	r0, [r3, #0]
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	2000002c 	.word	0x2000002c

0800b720 <__libc_init_array>:
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	4d0d      	ldr	r5, [pc, #52]	; (800b758 <__libc_init_array+0x38>)
 800b724:	4c0d      	ldr	r4, [pc, #52]	; (800b75c <__libc_init_array+0x3c>)
 800b726:	1b64      	subs	r4, r4, r5
 800b728:	10a4      	asrs	r4, r4, #2
 800b72a:	2600      	movs	r6, #0
 800b72c:	42a6      	cmp	r6, r4
 800b72e:	d109      	bne.n	800b744 <__libc_init_array+0x24>
 800b730:	4d0b      	ldr	r5, [pc, #44]	; (800b760 <__libc_init_array+0x40>)
 800b732:	4c0c      	ldr	r4, [pc, #48]	; (800b764 <__libc_init_array+0x44>)
 800b734:	f001 fa58 	bl	800cbe8 <_init>
 800b738:	1b64      	subs	r4, r4, r5
 800b73a:	10a4      	asrs	r4, r4, #2
 800b73c:	2600      	movs	r6, #0
 800b73e:	42a6      	cmp	r6, r4
 800b740:	d105      	bne.n	800b74e <__libc_init_array+0x2e>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	f855 3b04 	ldr.w	r3, [r5], #4
 800b748:	4798      	blx	r3
 800b74a:	3601      	adds	r6, #1
 800b74c:	e7ee      	b.n	800b72c <__libc_init_array+0xc>
 800b74e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b752:	4798      	blx	r3
 800b754:	3601      	adds	r6, #1
 800b756:	e7f2      	b.n	800b73e <__libc_init_array+0x1e>
 800b758:	0800d7ac 	.word	0x0800d7ac
 800b75c:	0800d7ac 	.word	0x0800d7ac
 800b760:	0800d7ac 	.word	0x0800d7ac
 800b764:	0800d7b0 	.word	0x0800d7b0

0800b768 <malloc>:
 800b768:	4b02      	ldr	r3, [pc, #8]	; (800b774 <malloc+0xc>)
 800b76a:	4601      	mov	r1, r0
 800b76c:	6818      	ldr	r0, [r3, #0]
 800b76e:	f000 b871 	b.w	800b854 <_malloc_r>
 800b772:	bf00      	nop
 800b774:	2000002c 	.word	0x2000002c

0800b778 <free>:
 800b778:	4b02      	ldr	r3, [pc, #8]	; (800b784 <free+0xc>)
 800b77a:	4601      	mov	r1, r0
 800b77c:	6818      	ldr	r0, [r3, #0]
 800b77e:	f000 b819 	b.w	800b7b4 <_free_r>
 800b782:	bf00      	nop
 800b784:	2000002c 	.word	0x2000002c

0800b788 <memcpy>:
 800b788:	440a      	add	r2, r1
 800b78a:	4291      	cmp	r1, r2
 800b78c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b790:	d100      	bne.n	800b794 <memcpy+0xc>
 800b792:	4770      	bx	lr
 800b794:	b510      	push	{r4, lr}
 800b796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b79a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b79e:	4291      	cmp	r1, r2
 800b7a0:	d1f9      	bne.n	800b796 <memcpy+0xe>
 800b7a2:	bd10      	pop	{r4, pc}

0800b7a4 <memset>:
 800b7a4:	4402      	add	r2, r0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d100      	bne.n	800b7ae <memset+0xa>
 800b7ac:	4770      	bx	lr
 800b7ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b7b2:	e7f9      	b.n	800b7a8 <memset+0x4>

0800b7b4 <_free_r>:
 800b7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7b6:	2900      	cmp	r1, #0
 800b7b8:	d048      	beq.n	800b84c <_free_r+0x98>
 800b7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7be:	9001      	str	r0, [sp, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b7c6:	bfb8      	it	lt
 800b7c8:	18e4      	addlt	r4, r4, r3
 800b7ca:	f000 f8fb 	bl	800b9c4 <__malloc_lock>
 800b7ce:	4a20      	ldr	r2, [pc, #128]	; (800b850 <_free_r+0x9c>)
 800b7d0:	9801      	ldr	r0, [sp, #4]
 800b7d2:	6813      	ldr	r3, [r2, #0]
 800b7d4:	4615      	mov	r5, r2
 800b7d6:	b933      	cbnz	r3, 800b7e6 <_free_r+0x32>
 800b7d8:	6063      	str	r3, [r4, #4]
 800b7da:	6014      	str	r4, [r2, #0]
 800b7dc:	b003      	add	sp, #12
 800b7de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7e2:	f000 b8f5 	b.w	800b9d0 <__malloc_unlock>
 800b7e6:	42a3      	cmp	r3, r4
 800b7e8:	d90b      	bls.n	800b802 <_free_r+0x4e>
 800b7ea:	6821      	ldr	r1, [r4, #0]
 800b7ec:	1862      	adds	r2, r4, r1
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	bf04      	itt	eq
 800b7f2:	681a      	ldreq	r2, [r3, #0]
 800b7f4:	685b      	ldreq	r3, [r3, #4]
 800b7f6:	6063      	str	r3, [r4, #4]
 800b7f8:	bf04      	itt	eq
 800b7fa:	1852      	addeq	r2, r2, r1
 800b7fc:	6022      	streq	r2, [r4, #0]
 800b7fe:	602c      	str	r4, [r5, #0]
 800b800:	e7ec      	b.n	800b7dc <_free_r+0x28>
 800b802:	461a      	mov	r2, r3
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	b10b      	cbz	r3, 800b80c <_free_r+0x58>
 800b808:	42a3      	cmp	r3, r4
 800b80a:	d9fa      	bls.n	800b802 <_free_r+0x4e>
 800b80c:	6811      	ldr	r1, [r2, #0]
 800b80e:	1855      	adds	r5, r2, r1
 800b810:	42a5      	cmp	r5, r4
 800b812:	d10b      	bne.n	800b82c <_free_r+0x78>
 800b814:	6824      	ldr	r4, [r4, #0]
 800b816:	4421      	add	r1, r4
 800b818:	1854      	adds	r4, r2, r1
 800b81a:	42a3      	cmp	r3, r4
 800b81c:	6011      	str	r1, [r2, #0]
 800b81e:	d1dd      	bne.n	800b7dc <_free_r+0x28>
 800b820:	681c      	ldr	r4, [r3, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	6053      	str	r3, [r2, #4]
 800b826:	4421      	add	r1, r4
 800b828:	6011      	str	r1, [r2, #0]
 800b82a:	e7d7      	b.n	800b7dc <_free_r+0x28>
 800b82c:	d902      	bls.n	800b834 <_free_r+0x80>
 800b82e:	230c      	movs	r3, #12
 800b830:	6003      	str	r3, [r0, #0]
 800b832:	e7d3      	b.n	800b7dc <_free_r+0x28>
 800b834:	6825      	ldr	r5, [r4, #0]
 800b836:	1961      	adds	r1, r4, r5
 800b838:	428b      	cmp	r3, r1
 800b83a:	bf04      	itt	eq
 800b83c:	6819      	ldreq	r1, [r3, #0]
 800b83e:	685b      	ldreq	r3, [r3, #4]
 800b840:	6063      	str	r3, [r4, #4]
 800b842:	bf04      	itt	eq
 800b844:	1949      	addeq	r1, r1, r5
 800b846:	6021      	streq	r1, [r4, #0]
 800b848:	6054      	str	r4, [r2, #4]
 800b84a:	e7c7      	b.n	800b7dc <_free_r+0x28>
 800b84c:	b003      	add	sp, #12
 800b84e:	bd30      	pop	{r4, r5, pc}
 800b850:	200007dc 	.word	0x200007dc

0800b854 <_malloc_r>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	1ccd      	adds	r5, r1, #3
 800b858:	f025 0503 	bic.w	r5, r5, #3
 800b85c:	3508      	adds	r5, #8
 800b85e:	2d0c      	cmp	r5, #12
 800b860:	bf38      	it	cc
 800b862:	250c      	movcc	r5, #12
 800b864:	2d00      	cmp	r5, #0
 800b866:	4606      	mov	r6, r0
 800b868:	db01      	blt.n	800b86e <_malloc_r+0x1a>
 800b86a:	42a9      	cmp	r1, r5
 800b86c:	d903      	bls.n	800b876 <_malloc_r+0x22>
 800b86e:	230c      	movs	r3, #12
 800b870:	6033      	str	r3, [r6, #0]
 800b872:	2000      	movs	r0, #0
 800b874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b876:	f000 f8a5 	bl	800b9c4 <__malloc_lock>
 800b87a:	4921      	ldr	r1, [pc, #132]	; (800b900 <_malloc_r+0xac>)
 800b87c:	680a      	ldr	r2, [r1, #0]
 800b87e:	4614      	mov	r4, r2
 800b880:	b99c      	cbnz	r4, 800b8aa <_malloc_r+0x56>
 800b882:	4f20      	ldr	r7, [pc, #128]	; (800b904 <_malloc_r+0xb0>)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	b923      	cbnz	r3, 800b892 <_malloc_r+0x3e>
 800b888:	4621      	mov	r1, r4
 800b88a:	4630      	mov	r0, r6
 800b88c:	f000 f83c 	bl	800b908 <_sbrk_r>
 800b890:	6038      	str	r0, [r7, #0]
 800b892:	4629      	mov	r1, r5
 800b894:	4630      	mov	r0, r6
 800b896:	f000 f837 	bl	800b908 <_sbrk_r>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d123      	bne.n	800b8e6 <_malloc_r+0x92>
 800b89e:	230c      	movs	r3, #12
 800b8a0:	6033      	str	r3, [r6, #0]
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f000 f894 	bl	800b9d0 <__malloc_unlock>
 800b8a8:	e7e3      	b.n	800b872 <_malloc_r+0x1e>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	1b5b      	subs	r3, r3, r5
 800b8ae:	d417      	bmi.n	800b8e0 <_malloc_r+0x8c>
 800b8b0:	2b0b      	cmp	r3, #11
 800b8b2:	d903      	bls.n	800b8bc <_malloc_r+0x68>
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	441c      	add	r4, r3
 800b8b8:	6025      	str	r5, [r4, #0]
 800b8ba:	e004      	b.n	800b8c6 <_malloc_r+0x72>
 800b8bc:	6863      	ldr	r3, [r4, #4]
 800b8be:	42a2      	cmp	r2, r4
 800b8c0:	bf0c      	ite	eq
 800b8c2:	600b      	streq	r3, [r1, #0]
 800b8c4:	6053      	strne	r3, [r2, #4]
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	f000 f882 	bl	800b9d0 <__malloc_unlock>
 800b8cc:	f104 000b 	add.w	r0, r4, #11
 800b8d0:	1d23      	adds	r3, r4, #4
 800b8d2:	f020 0007 	bic.w	r0, r0, #7
 800b8d6:	1ac2      	subs	r2, r0, r3
 800b8d8:	d0cc      	beq.n	800b874 <_malloc_r+0x20>
 800b8da:	1a1b      	subs	r3, r3, r0
 800b8dc:	50a3      	str	r3, [r4, r2]
 800b8de:	e7c9      	b.n	800b874 <_malloc_r+0x20>
 800b8e0:	4622      	mov	r2, r4
 800b8e2:	6864      	ldr	r4, [r4, #4]
 800b8e4:	e7cc      	b.n	800b880 <_malloc_r+0x2c>
 800b8e6:	1cc4      	adds	r4, r0, #3
 800b8e8:	f024 0403 	bic.w	r4, r4, #3
 800b8ec:	42a0      	cmp	r0, r4
 800b8ee:	d0e3      	beq.n	800b8b8 <_malloc_r+0x64>
 800b8f0:	1a21      	subs	r1, r4, r0
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f000 f808 	bl	800b908 <_sbrk_r>
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d1dd      	bne.n	800b8b8 <_malloc_r+0x64>
 800b8fc:	e7cf      	b.n	800b89e <_malloc_r+0x4a>
 800b8fe:	bf00      	nop
 800b900:	200007dc 	.word	0x200007dc
 800b904:	200007e0 	.word	0x200007e0

0800b908 <_sbrk_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4d06      	ldr	r5, [pc, #24]	; (800b924 <_sbrk_r+0x1c>)
 800b90c:	2300      	movs	r3, #0
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	602b      	str	r3, [r5, #0]
 800b914:	f7f6 fa64 	bl	8001de0 <_sbrk>
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	d102      	bne.n	800b922 <_sbrk_r+0x1a>
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b103      	cbz	r3, 800b922 <_sbrk_r+0x1a>
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	20003f64 	.word	0x20003f64

0800b928 <siprintf>:
 800b928:	b40e      	push	{r1, r2, r3}
 800b92a:	b500      	push	{lr}
 800b92c:	b09c      	sub	sp, #112	; 0x70
 800b92e:	ab1d      	add	r3, sp, #116	; 0x74
 800b930:	9002      	str	r0, [sp, #8]
 800b932:	9006      	str	r0, [sp, #24]
 800b934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b938:	4809      	ldr	r0, [pc, #36]	; (800b960 <siprintf+0x38>)
 800b93a:	9107      	str	r1, [sp, #28]
 800b93c:	9104      	str	r1, [sp, #16]
 800b93e:	4909      	ldr	r1, [pc, #36]	; (800b964 <siprintf+0x3c>)
 800b940:	f853 2b04 	ldr.w	r2, [r3], #4
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	6800      	ldr	r0, [r0, #0]
 800b948:	9301      	str	r3, [sp, #4]
 800b94a:	a902      	add	r1, sp, #8
 800b94c:	f000 f8a2 	bl	800ba94 <_svfiprintf_r>
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	2200      	movs	r2, #0
 800b954:	701a      	strb	r2, [r3, #0]
 800b956:	b01c      	add	sp, #112	; 0x70
 800b958:	f85d eb04 	ldr.w	lr, [sp], #4
 800b95c:	b003      	add	sp, #12
 800b95e:	4770      	bx	lr
 800b960:	2000002c 	.word	0x2000002c
 800b964:	ffff0208 	.word	0xffff0208

0800b968 <siscanf>:
 800b968:	b40e      	push	{r1, r2, r3}
 800b96a:	b510      	push	{r4, lr}
 800b96c:	b09f      	sub	sp, #124	; 0x7c
 800b96e:	ac21      	add	r4, sp, #132	; 0x84
 800b970:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b974:	f854 2b04 	ldr.w	r2, [r4], #4
 800b978:	9201      	str	r2, [sp, #4]
 800b97a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b97e:	9004      	str	r0, [sp, #16]
 800b980:	9008      	str	r0, [sp, #32]
 800b982:	f7f4 fc25 	bl	80001d0 <strlen>
 800b986:	4b0c      	ldr	r3, [pc, #48]	; (800b9b8 <siscanf+0x50>)
 800b988:	9005      	str	r0, [sp, #20]
 800b98a:	9009      	str	r0, [sp, #36]	; 0x24
 800b98c:	930d      	str	r3, [sp, #52]	; 0x34
 800b98e:	480b      	ldr	r0, [pc, #44]	; (800b9bc <siscanf+0x54>)
 800b990:	9a01      	ldr	r2, [sp, #4]
 800b992:	6800      	ldr	r0, [r0, #0]
 800b994:	9403      	str	r4, [sp, #12]
 800b996:	2300      	movs	r3, #0
 800b998:	9311      	str	r3, [sp, #68]	; 0x44
 800b99a:	9316      	str	r3, [sp, #88]	; 0x58
 800b99c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b9a4:	a904      	add	r1, sp, #16
 800b9a6:	4623      	mov	r3, r4
 800b9a8:	f000 f9ce 	bl	800bd48 <__ssvfiscanf_r>
 800b9ac:	b01f      	add	sp, #124	; 0x7c
 800b9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b2:	b003      	add	sp, #12
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	0800b9c1 	.word	0x0800b9c1
 800b9bc:	2000002c 	.word	0x2000002c

0800b9c0 <__seofread>:
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	4770      	bx	lr

0800b9c4 <__malloc_lock>:
 800b9c4:	4801      	ldr	r0, [pc, #4]	; (800b9cc <__malloc_lock+0x8>)
 800b9c6:	f000 bf8f 	b.w	800c8e8 <__retarget_lock_acquire_recursive>
 800b9ca:	bf00      	nop
 800b9cc:	20003f6c 	.word	0x20003f6c

0800b9d0 <__malloc_unlock>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <__malloc_unlock+0x8>)
 800b9d2:	f000 bf8a 	b.w	800c8ea <__retarget_lock_release_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	20003f6c 	.word	0x20003f6c

0800b9dc <__ssputs_r>:
 800b9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e0:	688e      	ldr	r6, [r1, #8]
 800b9e2:	429e      	cmp	r6, r3
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	4690      	mov	r8, r2
 800b9ea:	461f      	mov	r7, r3
 800b9ec:	d838      	bhi.n	800ba60 <__ssputs_r+0x84>
 800b9ee:	898a      	ldrh	r2, [r1, #12]
 800b9f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9f4:	d032      	beq.n	800ba5c <__ssputs_r+0x80>
 800b9f6:	6825      	ldr	r5, [r4, #0]
 800b9f8:	6909      	ldr	r1, [r1, #16]
 800b9fa:	eba5 0901 	sub.w	r9, r5, r1
 800b9fe:	6965      	ldr	r5, [r4, #20]
 800ba00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba08:	3301      	adds	r3, #1
 800ba0a:	444b      	add	r3, r9
 800ba0c:	106d      	asrs	r5, r5, #1
 800ba0e:	429d      	cmp	r5, r3
 800ba10:	bf38      	it	cc
 800ba12:	461d      	movcc	r5, r3
 800ba14:	0553      	lsls	r3, r2, #21
 800ba16:	d531      	bpl.n	800ba7c <__ssputs_r+0xa0>
 800ba18:	4629      	mov	r1, r5
 800ba1a:	f7ff ff1b 	bl	800b854 <_malloc_r>
 800ba1e:	4606      	mov	r6, r0
 800ba20:	b950      	cbnz	r0, 800ba38 <__ssputs_r+0x5c>
 800ba22:	230c      	movs	r3, #12
 800ba24:	f8ca 3000 	str.w	r3, [sl]
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba2e:	81a3      	strh	r3, [r4, #12]
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295
 800ba34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba38:	6921      	ldr	r1, [r4, #16]
 800ba3a:	464a      	mov	r2, r9
 800ba3c:	f7ff fea4 	bl	800b788 <memcpy>
 800ba40:	89a3      	ldrh	r3, [r4, #12]
 800ba42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba4a:	81a3      	strh	r3, [r4, #12]
 800ba4c:	6126      	str	r6, [r4, #16]
 800ba4e:	6165      	str	r5, [r4, #20]
 800ba50:	444e      	add	r6, r9
 800ba52:	eba5 0509 	sub.w	r5, r5, r9
 800ba56:	6026      	str	r6, [r4, #0]
 800ba58:	60a5      	str	r5, [r4, #8]
 800ba5a:	463e      	mov	r6, r7
 800ba5c:	42be      	cmp	r6, r7
 800ba5e:	d900      	bls.n	800ba62 <__ssputs_r+0x86>
 800ba60:	463e      	mov	r6, r7
 800ba62:	4632      	mov	r2, r6
 800ba64:	6820      	ldr	r0, [r4, #0]
 800ba66:	4641      	mov	r1, r8
 800ba68:	f000 ff40 	bl	800c8ec <memmove>
 800ba6c:	68a3      	ldr	r3, [r4, #8]
 800ba6e:	6822      	ldr	r2, [r4, #0]
 800ba70:	1b9b      	subs	r3, r3, r6
 800ba72:	4432      	add	r2, r6
 800ba74:	60a3      	str	r3, [r4, #8]
 800ba76:	6022      	str	r2, [r4, #0]
 800ba78:	2000      	movs	r0, #0
 800ba7a:	e7db      	b.n	800ba34 <__ssputs_r+0x58>
 800ba7c:	462a      	mov	r2, r5
 800ba7e:	f000 ff4f 	bl	800c920 <_realloc_r>
 800ba82:	4606      	mov	r6, r0
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d1e1      	bne.n	800ba4c <__ssputs_r+0x70>
 800ba88:	6921      	ldr	r1, [r4, #16]
 800ba8a:	4650      	mov	r0, sl
 800ba8c:	f7ff fe92 	bl	800b7b4 <_free_r>
 800ba90:	e7c7      	b.n	800ba22 <__ssputs_r+0x46>
	...

0800ba94 <_svfiprintf_r>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	4698      	mov	r8, r3
 800ba9a:	898b      	ldrh	r3, [r1, #12]
 800ba9c:	061b      	lsls	r3, r3, #24
 800ba9e:	b09d      	sub	sp, #116	; 0x74
 800baa0:	4607      	mov	r7, r0
 800baa2:	460d      	mov	r5, r1
 800baa4:	4614      	mov	r4, r2
 800baa6:	d50e      	bpl.n	800bac6 <_svfiprintf_r+0x32>
 800baa8:	690b      	ldr	r3, [r1, #16]
 800baaa:	b963      	cbnz	r3, 800bac6 <_svfiprintf_r+0x32>
 800baac:	2140      	movs	r1, #64	; 0x40
 800baae:	f7ff fed1 	bl	800b854 <_malloc_r>
 800bab2:	6028      	str	r0, [r5, #0]
 800bab4:	6128      	str	r0, [r5, #16]
 800bab6:	b920      	cbnz	r0, 800bac2 <_svfiprintf_r+0x2e>
 800bab8:	230c      	movs	r3, #12
 800baba:	603b      	str	r3, [r7, #0]
 800babc:	f04f 30ff 	mov.w	r0, #4294967295
 800bac0:	e0d1      	b.n	800bc66 <_svfiprintf_r+0x1d2>
 800bac2:	2340      	movs	r3, #64	; 0x40
 800bac4:	616b      	str	r3, [r5, #20]
 800bac6:	2300      	movs	r3, #0
 800bac8:	9309      	str	r3, [sp, #36]	; 0x24
 800baca:	2320      	movs	r3, #32
 800bacc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bad0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bad4:	2330      	movs	r3, #48	; 0x30
 800bad6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc80 <_svfiprintf_r+0x1ec>
 800bada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bade:	f04f 0901 	mov.w	r9, #1
 800bae2:	4623      	mov	r3, r4
 800bae4:	469a      	mov	sl, r3
 800bae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baea:	b10a      	cbz	r2, 800baf0 <_svfiprintf_r+0x5c>
 800baec:	2a25      	cmp	r2, #37	; 0x25
 800baee:	d1f9      	bne.n	800bae4 <_svfiprintf_r+0x50>
 800baf0:	ebba 0b04 	subs.w	fp, sl, r4
 800baf4:	d00b      	beq.n	800bb0e <_svfiprintf_r+0x7a>
 800baf6:	465b      	mov	r3, fp
 800baf8:	4622      	mov	r2, r4
 800bafa:	4629      	mov	r1, r5
 800bafc:	4638      	mov	r0, r7
 800bafe:	f7ff ff6d 	bl	800b9dc <__ssputs_r>
 800bb02:	3001      	adds	r0, #1
 800bb04:	f000 80aa 	beq.w	800bc5c <_svfiprintf_r+0x1c8>
 800bb08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb0a:	445a      	add	r2, fp
 800bb0c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 80a2 	beq.w	800bc5c <_svfiprintf_r+0x1c8>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb22:	f10a 0a01 	add.w	sl, sl, #1
 800bb26:	9304      	str	r3, [sp, #16]
 800bb28:	9307      	str	r3, [sp, #28]
 800bb2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb2e:	931a      	str	r3, [sp, #104]	; 0x68
 800bb30:	4654      	mov	r4, sl
 800bb32:	2205      	movs	r2, #5
 800bb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb38:	4851      	ldr	r0, [pc, #324]	; (800bc80 <_svfiprintf_r+0x1ec>)
 800bb3a:	f7f4 fb51 	bl	80001e0 <memchr>
 800bb3e:	9a04      	ldr	r2, [sp, #16]
 800bb40:	b9d8      	cbnz	r0, 800bb7a <_svfiprintf_r+0xe6>
 800bb42:	06d0      	lsls	r0, r2, #27
 800bb44:	bf44      	itt	mi
 800bb46:	2320      	movmi	r3, #32
 800bb48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb4c:	0711      	lsls	r1, r2, #28
 800bb4e:	bf44      	itt	mi
 800bb50:	232b      	movmi	r3, #43	; 0x2b
 800bb52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb56:	f89a 3000 	ldrb.w	r3, [sl]
 800bb5a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb5c:	d015      	beq.n	800bb8a <_svfiprintf_r+0xf6>
 800bb5e:	9a07      	ldr	r2, [sp, #28]
 800bb60:	4654      	mov	r4, sl
 800bb62:	2000      	movs	r0, #0
 800bb64:	f04f 0c0a 	mov.w	ip, #10
 800bb68:	4621      	mov	r1, r4
 800bb6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb6e:	3b30      	subs	r3, #48	; 0x30
 800bb70:	2b09      	cmp	r3, #9
 800bb72:	d94e      	bls.n	800bc12 <_svfiprintf_r+0x17e>
 800bb74:	b1b0      	cbz	r0, 800bba4 <_svfiprintf_r+0x110>
 800bb76:	9207      	str	r2, [sp, #28]
 800bb78:	e014      	b.n	800bba4 <_svfiprintf_r+0x110>
 800bb7a:	eba0 0308 	sub.w	r3, r0, r8
 800bb7e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb82:	4313      	orrs	r3, r2
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	46a2      	mov	sl, r4
 800bb88:	e7d2      	b.n	800bb30 <_svfiprintf_r+0x9c>
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	1d19      	adds	r1, r3, #4
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	9103      	str	r1, [sp, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bfbb      	ittet	lt
 800bb96:	425b      	neglt	r3, r3
 800bb98:	f042 0202 	orrlt.w	r2, r2, #2
 800bb9c:	9307      	strge	r3, [sp, #28]
 800bb9e:	9307      	strlt	r3, [sp, #28]
 800bba0:	bfb8      	it	lt
 800bba2:	9204      	strlt	r2, [sp, #16]
 800bba4:	7823      	ldrb	r3, [r4, #0]
 800bba6:	2b2e      	cmp	r3, #46	; 0x2e
 800bba8:	d10c      	bne.n	800bbc4 <_svfiprintf_r+0x130>
 800bbaa:	7863      	ldrb	r3, [r4, #1]
 800bbac:	2b2a      	cmp	r3, #42	; 0x2a
 800bbae:	d135      	bne.n	800bc1c <_svfiprintf_r+0x188>
 800bbb0:	9b03      	ldr	r3, [sp, #12]
 800bbb2:	1d1a      	adds	r2, r3, #4
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	9203      	str	r2, [sp, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bfb8      	it	lt
 800bbbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbc0:	3402      	adds	r4, #2
 800bbc2:	9305      	str	r3, [sp, #20]
 800bbc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc90 <_svfiprintf_r+0x1fc>
 800bbc8:	7821      	ldrb	r1, [r4, #0]
 800bbca:	2203      	movs	r2, #3
 800bbcc:	4650      	mov	r0, sl
 800bbce:	f7f4 fb07 	bl	80001e0 <memchr>
 800bbd2:	b140      	cbz	r0, 800bbe6 <_svfiprintf_r+0x152>
 800bbd4:	2340      	movs	r3, #64	; 0x40
 800bbd6:	eba0 000a 	sub.w	r0, r0, sl
 800bbda:	fa03 f000 	lsl.w	r0, r3, r0
 800bbde:	9b04      	ldr	r3, [sp, #16]
 800bbe0:	4303      	orrs	r3, r0
 800bbe2:	3401      	adds	r4, #1
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbea:	4826      	ldr	r0, [pc, #152]	; (800bc84 <_svfiprintf_r+0x1f0>)
 800bbec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbf0:	2206      	movs	r2, #6
 800bbf2:	f7f4 faf5 	bl	80001e0 <memchr>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d038      	beq.n	800bc6c <_svfiprintf_r+0x1d8>
 800bbfa:	4b23      	ldr	r3, [pc, #140]	; (800bc88 <_svfiprintf_r+0x1f4>)
 800bbfc:	bb1b      	cbnz	r3, 800bc46 <_svfiprintf_r+0x1b2>
 800bbfe:	9b03      	ldr	r3, [sp, #12]
 800bc00:	3307      	adds	r3, #7
 800bc02:	f023 0307 	bic.w	r3, r3, #7
 800bc06:	3308      	adds	r3, #8
 800bc08:	9303      	str	r3, [sp, #12]
 800bc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc0c:	4433      	add	r3, r6
 800bc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc10:	e767      	b.n	800bae2 <_svfiprintf_r+0x4e>
 800bc12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc16:	460c      	mov	r4, r1
 800bc18:	2001      	movs	r0, #1
 800bc1a:	e7a5      	b.n	800bb68 <_svfiprintf_r+0xd4>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	3401      	adds	r4, #1
 800bc20:	9305      	str	r3, [sp, #20]
 800bc22:	4619      	mov	r1, r3
 800bc24:	f04f 0c0a 	mov.w	ip, #10
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc2e:	3a30      	subs	r2, #48	; 0x30
 800bc30:	2a09      	cmp	r2, #9
 800bc32:	d903      	bls.n	800bc3c <_svfiprintf_r+0x1a8>
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d0c5      	beq.n	800bbc4 <_svfiprintf_r+0x130>
 800bc38:	9105      	str	r1, [sp, #20]
 800bc3a:	e7c3      	b.n	800bbc4 <_svfiprintf_r+0x130>
 800bc3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc40:	4604      	mov	r4, r0
 800bc42:	2301      	movs	r3, #1
 800bc44:	e7f0      	b.n	800bc28 <_svfiprintf_r+0x194>
 800bc46:	ab03      	add	r3, sp, #12
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <_svfiprintf_r+0x1f8>)
 800bc4e:	a904      	add	r1, sp, #16
 800bc50:	4638      	mov	r0, r7
 800bc52:	f3af 8000 	nop.w
 800bc56:	1c42      	adds	r2, r0, #1
 800bc58:	4606      	mov	r6, r0
 800bc5a:	d1d6      	bne.n	800bc0a <_svfiprintf_r+0x176>
 800bc5c:	89ab      	ldrh	r3, [r5, #12]
 800bc5e:	065b      	lsls	r3, r3, #25
 800bc60:	f53f af2c 	bmi.w	800babc <_svfiprintf_r+0x28>
 800bc64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc66:	b01d      	add	sp, #116	; 0x74
 800bc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6c:	ab03      	add	r3, sp, #12
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	462a      	mov	r2, r5
 800bc72:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <_svfiprintf_r+0x1f8>)
 800bc74:	a904      	add	r1, sp, #16
 800bc76:	4638      	mov	r0, r7
 800bc78:	f000 fa4c 	bl	800c114 <_printf_i>
 800bc7c:	e7eb      	b.n	800bc56 <_svfiprintf_r+0x1c2>
 800bc7e:	bf00      	nop
 800bc80:	0800d5f4 	.word	0x0800d5f4
 800bc84:	0800d5fe 	.word	0x0800d5fe
 800bc88:	00000000 	.word	0x00000000
 800bc8c:	0800b9dd 	.word	0x0800b9dd
 800bc90:	0800d5fa 	.word	0x0800d5fa

0800bc94 <_sungetc_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	1c4b      	adds	r3, r1, #1
 800bc98:	4614      	mov	r4, r2
 800bc9a:	d103      	bne.n	800bca4 <_sungetc_r+0x10>
 800bc9c:	f04f 35ff 	mov.w	r5, #4294967295
 800bca0:	4628      	mov	r0, r5
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	8993      	ldrh	r3, [r2, #12]
 800bca6:	f023 0320 	bic.w	r3, r3, #32
 800bcaa:	8193      	strh	r3, [r2, #12]
 800bcac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcae:	6852      	ldr	r2, [r2, #4]
 800bcb0:	b2cd      	uxtb	r5, r1
 800bcb2:	b18b      	cbz	r3, 800bcd8 <_sungetc_r+0x44>
 800bcb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	dd08      	ble.n	800bccc <_sungetc_r+0x38>
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	1e5a      	subs	r2, r3, #1
 800bcbe:	6022      	str	r2, [r4, #0]
 800bcc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bcc4:	6863      	ldr	r3, [r4, #4]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	6063      	str	r3, [r4, #4]
 800bcca:	e7e9      	b.n	800bca0 <_sungetc_r+0xc>
 800bccc:	4621      	mov	r1, r4
 800bcce:	f000 fdd1 	bl	800c874 <__submore>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d0f1      	beq.n	800bcba <_sungetc_r+0x26>
 800bcd6:	e7e1      	b.n	800bc9c <_sungetc_r+0x8>
 800bcd8:	6921      	ldr	r1, [r4, #16]
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	b151      	cbz	r1, 800bcf4 <_sungetc_r+0x60>
 800bcde:	4299      	cmp	r1, r3
 800bce0:	d208      	bcs.n	800bcf4 <_sungetc_r+0x60>
 800bce2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bce6:	42a9      	cmp	r1, r5
 800bce8:	d104      	bne.n	800bcf4 <_sungetc_r+0x60>
 800bcea:	3b01      	subs	r3, #1
 800bcec:	3201      	adds	r2, #1
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	6062      	str	r2, [r4, #4]
 800bcf2:	e7d5      	b.n	800bca0 <_sungetc_r+0xc>
 800bcf4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bcf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcfc:	6363      	str	r3, [r4, #52]	; 0x34
 800bcfe:	2303      	movs	r3, #3
 800bd00:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd02:	4623      	mov	r3, r4
 800bd04:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e7dc      	b.n	800bcc8 <_sungetc_r+0x34>

0800bd0e <__ssrefill_r>:
 800bd0e:	b510      	push	{r4, lr}
 800bd10:	460c      	mov	r4, r1
 800bd12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bd14:	b169      	cbz	r1, 800bd32 <__ssrefill_r+0x24>
 800bd16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd1a:	4299      	cmp	r1, r3
 800bd1c:	d001      	beq.n	800bd22 <__ssrefill_r+0x14>
 800bd1e:	f7ff fd49 	bl	800b7b4 <_free_r>
 800bd22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd24:	6063      	str	r3, [r4, #4]
 800bd26:	2000      	movs	r0, #0
 800bd28:	6360      	str	r0, [r4, #52]	; 0x34
 800bd2a:	b113      	cbz	r3, 800bd32 <__ssrefill_r+0x24>
 800bd2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bd2e:	6023      	str	r3, [r4, #0]
 800bd30:	bd10      	pop	{r4, pc}
 800bd32:	6923      	ldr	r3, [r4, #16]
 800bd34:	6023      	str	r3, [r4, #0]
 800bd36:	2300      	movs	r3, #0
 800bd38:	6063      	str	r3, [r4, #4]
 800bd3a:	89a3      	ldrh	r3, [r4, #12]
 800bd3c:	f043 0320 	orr.w	r3, r3, #32
 800bd40:	81a3      	strh	r3, [r4, #12]
 800bd42:	f04f 30ff 	mov.w	r0, #4294967295
 800bd46:	e7f3      	b.n	800bd30 <__ssrefill_r+0x22>

0800bd48 <__ssvfiscanf_r>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bd52:	2100      	movs	r1, #0
 800bd54:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bd58:	49b2      	ldr	r1, [pc, #712]	; (800c024 <__ssvfiscanf_r+0x2dc>)
 800bd5a:	91a0      	str	r1, [sp, #640]	; 0x280
 800bd5c:	f10d 0804 	add.w	r8, sp, #4
 800bd60:	49b1      	ldr	r1, [pc, #708]	; (800c028 <__ssvfiscanf_r+0x2e0>)
 800bd62:	4fb2      	ldr	r7, [pc, #712]	; (800c02c <__ssvfiscanf_r+0x2e4>)
 800bd64:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c030 <__ssvfiscanf_r+0x2e8>
 800bd68:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	91a1      	str	r1, [sp, #644]	; 0x284
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	f892 a000 	ldrb.w	sl, [r2]
 800bd76:	f1ba 0f00 	cmp.w	sl, #0
 800bd7a:	f000 8151 	beq.w	800c020 <__ssvfiscanf_r+0x2d8>
 800bd7e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bd82:	f013 0308 	ands.w	r3, r3, #8
 800bd86:	f102 0501 	add.w	r5, r2, #1
 800bd8a:	d019      	beq.n	800bdc0 <__ssvfiscanf_r+0x78>
 800bd8c:	6863      	ldr	r3, [r4, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dd0f      	ble.n	800bdb2 <__ssvfiscanf_r+0x6a>
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	781a      	ldrb	r2, [r3, #0]
 800bd96:	5cba      	ldrb	r2, [r7, r2]
 800bd98:	0712      	lsls	r2, r2, #28
 800bd9a:	d401      	bmi.n	800bda0 <__ssvfiscanf_r+0x58>
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	e7e8      	b.n	800bd72 <__ssvfiscanf_r+0x2a>
 800bda0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bda2:	3201      	adds	r2, #1
 800bda4:	9245      	str	r2, [sp, #276]	; 0x114
 800bda6:	6862      	ldr	r2, [r4, #4]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	3a01      	subs	r2, #1
 800bdac:	6062      	str	r2, [r4, #4]
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	e7ec      	b.n	800bd8c <__ssvfiscanf_r+0x44>
 800bdb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	4798      	blx	r3
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d0e9      	beq.n	800bd92 <__ssvfiscanf_r+0x4a>
 800bdbe:	e7ed      	b.n	800bd9c <__ssvfiscanf_r+0x54>
 800bdc0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bdc4:	f040 8083 	bne.w	800bece <__ssvfiscanf_r+0x186>
 800bdc8:	9341      	str	r3, [sp, #260]	; 0x104
 800bdca:	9343      	str	r3, [sp, #268]	; 0x10c
 800bdcc:	7853      	ldrb	r3, [r2, #1]
 800bdce:	2b2a      	cmp	r3, #42	; 0x2a
 800bdd0:	bf02      	ittt	eq
 800bdd2:	2310      	moveq	r3, #16
 800bdd4:	1c95      	addeq	r5, r2, #2
 800bdd6:	9341      	streq	r3, [sp, #260]	; 0x104
 800bdd8:	220a      	movs	r2, #10
 800bdda:	46ab      	mov	fp, r5
 800bddc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bde0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bde4:	2b09      	cmp	r3, #9
 800bde6:	d91d      	bls.n	800be24 <__ssvfiscanf_r+0xdc>
 800bde8:	4891      	ldr	r0, [pc, #580]	; (800c030 <__ssvfiscanf_r+0x2e8>)
 800bdea:	2203      	movs	r2, #3
 800bdec:	f7f4 f9f8 	bl	80001e0 <memchr>
 800bdf0:	b140      	cbz	r0, 800be04 <__ssvfiscanf_r+0xbc>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	eba0 0009 	sub.w	r0, r0, r9
 800bdf8:	fa03 f000 	lsl.w	r0, r3, r0
 800bdfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bdfe:	4318      	orrs	r0, r3
 800be00:	9041      	str	r0, [sp, #260]	; 0x104
 800be02:	465d      	mov	r5, fp
 800be04:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be08:	2b78      	cmp	r3, #120	; 0x78
 800be0a:	d806      	bhi.n	800be1a <__ssvfiscanf_r+0xd2>
 800be0c:	2b57      	cmp	r3, #87	; 0x57
 800be0e:	d810      	bhi.n	800be32 <__ssvfiscanf_r+0xea>
 800be10:	2b25      	cmp	r3, #37	; 0x25
 800be12:	d05c      	beq.n	800bece <__ssvfiscanf_r+0x186>
 800be14:	d856      	bhi.n	800bec4 <__ssvfiscanf_r+0x17c>
 800be16:	2b00      	cmp	r3, #0
 800be18:	d074      	beq.n	800bf04 <__ssvfiscanf_r+0x1bc>
 800be1a:	2303      	movs	r3, #3
 800be1c:	9347      	str	r3, [sp, #284]	; 0x11c
 800be1e:	230a      	movs	r3, #10
 800be20:	9342      	str	r3, [sp, #264]	; 0x108
 800be22:	e081      	b.n	800bf28 <__ssvfiscanf_r+0x1e0>
 800be24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800be26:	fb02 1303 	mla	r3, r2, r3, r1
 800be2a:	3b30      	subs	r3, #48	; 0x30
 800be2c:	9343      	str	r3, [sp, #268]	; 0x10c
 800be2e:	465d      	mov	r5, fp
 800be30:	e7d3      	b.n	800bdda <__ssvfiscanf_r+0x92>
 800be32:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800be36:	2a20      	cmp	r2, #32
 800be38:	d8ef      	bhi.n	800be1a <__ssvfiscanf_r+0xd2>
 800be3a:	a101      	add	r1, pc, #4	; (adr r1, 800be40 <__ssvfiscanf_r+0xf8>)
 800be3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be40:	0800bf13 	.word	0x0800bf13
 800be44:	0800be1b 	.word	0x0800be1b
 800be48:	0800be1b 	.word	0x0800be1b
 800be4c:	0800bf71 	.word	0x0800bf71
 800be50:	0800be1b 	.word	0x0800be1b
 800be54:	0800be1b 	.word	0x0800be1b
 800be58:	0800be1b 	.word	0x0800be1b
 800be5c:	0800be1b 	.word	0x0800be1b
 800be60:	0800be1b 	.word	0x0800be1b
 800be64:	0800be1b 	.word	0x0800be1b
 800be68:	0800be1b 	.word	0x0800be1b
 800be6c:	0800bf87 	.word	0x0800bf87
 800be70:	0800bf5d 	.word	0x0800bf5d
 800be74:	0800becb 	.word	0x0800becb
 800be78:	0800becb 	.word	0x0800becb
 800be7c:	0800becb 	.word	0x0800becb
 800be80:	0800be1b 	.word	0x0800be1b
 800be84:	0800bf61 	.word	0x0800bf61
 800be88:	0800be1b 	.word	0x0800be1b
 800be8c:	0800be1b 	.word	0x0800be1b
 800be90:	0800be1b 	.word	0x0800be1b
 800be94:	0800be1b 	.word	0x0800be1b
 800be98:	0800bf97 	.word	0x0800bf97
 800be9c:	0800bf69 	.word	0x0800bf69
 800bea0:	0800bf0b 	.word	0x0800bf0b
 800bea4:	0800be1b 	.word	0x0800be1b
 800bea8:	0800be1b 	.word	0x0800be1b
 800beac:	0800bf93 	.word	0x0800bf93
 800beb0:	0800be1b 	.word	0x0800be1b
 800beb4:	0800bf5d 	.word	0x0800bf5d
 800beb8:	0800be1b 	.word	0x0800be1b
 800bebc:	0800be1b 	.word	0x0800be1b
 800bec0:	0800bf13 	.word	0x0800bf13
 800bec4:	3b45      	subs	r3, #69	; 0x45
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d8a7      	bhi.n	800be1a <__ssvfiscanf_r+0xd2>
 800beca:	2305      	movs	r3, #5
 800becc:	e02b      	b.n	800bf26 <__ssvfiscanf_r+0x1de>
 800bece:	6863      	ldr	r3, [r4, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	dd0d      	ble.n	800bef0 <__ssvfiscanf_r+0x1a8>
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	781a      	ldrb	r2, [r3, #0]
 800bed8:	4552      	cmp	r2, sl
 800beda:	f040 80a1 	bne.w	800c020 <__ssvfiscanf_r+0x2d8>
 800bede:	3301      	adds	r3, #1
 800bee0:	6862      	ldr	r2, [r4, #4]
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bee6:	3a01      	subs	r2, #1
 800bee8:	3301      	adds	r3, #1
 800beea:	6062      	str	r2, [r4, #4]
 800beec:	9345      	str	r3, [sp, #276]	; 0x114
 800beee:	e755      	b.n	800bd9c <__ssvfiscanf_r+0x54>
 800bef0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bef2:	4621      	mov	r1, r4
 800bef4:	4630      	mov	r0, r6
 800bef6:	4798      	blx	r3
 800bef8:	2800      	cmp	r0, #0
 800befa:	d0eb      	beq.n	800bed4 <__ssvfiscanf_r+0x18c>
 800befc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800befe:	2800      	cmp	r0, #0
 800bf00:	f040 8084 	bne.w	800c00c <__ssvfiscanf_r+0x2c4>
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295
 800bf08:	e086      	b.n	800c018 <__ssvfiscanf_r+0x2d0>
 800bf0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bf0c:	f042 0220 	orr.w	r2, r2, #32
 800bf10:	9241      	str	r2, [sp, #260]	; 0x104
 800bf12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bf14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf18:	9241      	str	r2, [sp, #260]	; 0x104
 800bf1a:	2210      	movs	r2, #16
 800bf1c:	2b6f      	cmp	r3, #111	; 0x6f
 800bf1e:	9242      	str	r2, [sp, #264]	; 0x108
 800bf20:	bf34      	ite	cc
 800bf22:	2303      	movcc	r3, #3
 800bf24:	2304      	movcs	r3, #4
 800bf26:	9347      	str	r3, [sp, #284]	; 0x11c
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	dd41      	ble.n	800bfb2 <__ssvfiscanf_r+0x26a>
 800bf2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bf30:	0659      	lsls	r1, r3, #25
 800bf32:	d404      	bmi.n	800bf3e <__ssvfiscanf_r+0x1f6>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	781a      	ldrb	r2, [r3, #0]
 800bf38:	5cba      	ldrb	r2, [r7, r2]
 800bf3a:	0712      	lsls	r2, r2, #28
 800bf3c:	d440      	bmi.n	800bfc0 <__ssvfiscanf_r+0x278>
 800bf3e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	dc4f      	bgt.n	800bfe4 <__ssvfiscanf_r+0x29c>
 800bf44:	466b      	mov	r3, sp
 800bf46:	4622      	mov	r2, r4
 800bf48:	a941      	add	r1, sp, #260	; 0x104
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f000 fa08 	bl	800c360 <_scanf_chars>
 800bf50:	2801      	cmp	r0, #1
 800bf52:	d065      	beq.n	800c020 <__ssvfiscanf_r+0x2d8>
 800bf54:	2802      	cmp	r0, #2
 800bf56:	f47f af21 	bne.w	800bd9c <__ssvfiscanf_r+0x54>
 800bf5a:	e7cf      	b.n	800befc <__ssvfiscanf_r+0x1b4>
 800bf5c:	220a      	movs	r2, #10
 800bf5e:	e7dd      	b.n	800bf1c <__ssvfiscanf_r+0x1d4>
 800bf60:	2300      	movs	r3, #0
 800bf62:	9342      	str	r3, [sp, #264]	; 0x108
 800bf64:	2303      	movs	r3, #3
 800bf66:	e7de      	b.n	800bf26 <__ssvfiscanf_r+0x1de>
 800bf68:	2308      	movs	r3, #8
 800bf6a:	9342      	str	r3, [sp, #264]	; 0x108
 800bf6c:	2304      	movs	r3, #4
 800bf6e:	e7da      	b.n	800bf26 <__ssvfiscanf_r+0x1de>
 800bf70:	4629      	mov	r1, r5
 800bf72:	4640      	mov	r0, r8
 800bf74:	f000 fb40 	bl	800c5f8 <__sccl>
 800bf78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bf7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf7e:	9341      	str	r3, [sp, #260]	; 0x104
 800bf80:	4605      	mov	r5, r0
 800bf82:	2301      	movs	r3, #1
 800bf84:	e7cf      	b.n	800bf26 <__ssvfiscanf_r+0x1de>
 800bf86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bf88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf8c:	9341      	str	r3, [sp, #260]	; 0x104
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e7c9      	b.n	800bf26 <__ssvfiscanf_r+0x1de>
 800bf92:	2302      	movs	r3, #2
 800bf94:	e7c7      	b.n	800bf26 <__ssvfiscanf_r+0x1de>
 800bf96:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bf98:	06c3      	lsls	r3, r0, #27
 800bf9a:	f53f aeff 	bmi.w	800bd9c <__ssvfiscanf_r+0x54>
 800bf9e:	9b00      	ldr	r3, [sp, #0]
 800bfa0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bfa2:	1d19      	adds	r1, r3, #4
 800bfa4:	9100      	str	r1, [sp, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	07c0      	lsls	r0, r0, #31
 800bfaa:	bf4c      	ite	mi
 800bfac:	801a      	strhmi	r2, [r3, #0]
 800bfae:	601a      	strpl	r2, [r3, #0]
 800bfb0:	e6f4      	b.n	800bd9c <__ssvfiscanf_r+0x54>
 800bfb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4798      	blx	r3
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0b7      	beq.n	800bf2e <__ssvfiscanf_r+0x1e6>
 800bfbe:	e79d      	b.n	800befc <__ssvfiscanf_r+0x1b4>
 800bfc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bfc2:	3201      	adds	r2, #1
 800bfc4:	9245      	str	r2, [sp, #276]	; 0x114
 800bfc6:	6862      	ldr	r2, [r4, #4]
 800bfc8:	3a01      	subs	r2, #1
 800bfca:	2a00      	cmp	r2, #0
 800bfcc:	6062      	str	r2, [r4, #4]
 800bfce:	dd02      	ble.n	800bfd6 <__ssvfiscanf_r+0x28e>
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	e7ae      	b.n	800bf34 <__ssvfiscanf_r+0x1ec>
 800bfd6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4630      	mov	r0, r6
 800bfdc:	4798      	blx	r3
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d0a8      	beq.n	800bf34 <__ssvfiscanf_r+0x1ec>
 800bfe2:	e78b      	b.n	800befc <__ssvfiscanf_r+0x1b4>
 800bfe4:	2b04      	cmp	r3, #4
 800bfe6:	dc06      	bgt.n	800bff6 <__ssvfiscanf_r+0x2ae>
 800bfe8:	466b      	mov	r3, sp
 800bfea:	4622      	mov	r2, r4
 800bfec:	a941      	add	r1, sp, #260	; 0x104
 800bfee:	4630      	mov	r0, r6
 800bff0:	f000 fa0e 	bl	800c410 <_scanf_i>
 800bff4:	e7ac      	b.n	800bf50 <__ssvfiscanf_r+0x208>
 800bff6:	4b0f      	ldr	r3, [pc, #60]	; (800c034 <__ssvfiscanf_r+0x2ec>)
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f43f aecf 	beq.w	800bd9c <__ssvfiscanf_r+0x54>
 800bffe:	466b      	mov	r3, sp
 800c000:	4622      	mov	r2, r4
 800c002:	a941      	add	r1, sp, #260	; 0x104
 800c004:	4630      	mov	r0, r6
 800c006:	f3af 8000 	nop.w
 800c00a:	e7a1      	b.n	800bf50 <__ssvfiscanf_r+0x208>
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c012:	bf18      	it	ne
 800c014:	f04f 30ff 	movne.w	r0, #4294967295
 800c018:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c020:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c022:	e7f9      	b.n	800c018 <__ssvfiscanf_r+0x2d0>
 800c024:	0800bc95 	.word	0x0800bc95
 800c028:	0800bd0f 	.word	0x0800bd0f
 800c02c:	0800d643 	.word	0x0800d643
 800c030:	0800d5fa 	.word	0x0800d5fa
 800c034:	00000000 	.word	0x00000000

0800c038 <_printf_common>:
 800c038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c03c:	4616      	mov	r6, r2
 800c03e:	4699      	mov	r9, r3
 800c040:	688a      	ldr	r2, [r1, #8]
 800c042:	690b      	ldr	r3, [r1, #16]
 800c044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c048:	4293      	cmp	r3, r2
 800c04a:	bfb8      	it	lt
 800c04c:	4613      	movlt	r3, r2
 800c04e:	6033      	str	r3, [r6, #0]
 800c050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c054:	4607      	mov	r7, r0
 800c056:	460c      	mov	r4, r1
 800c058:	b10a      	cbz	r2, 800c05e <_printf_common+0x26>
 800c05a:	3301      	adds	r3, #1
 800c05c:	6033      	str	r3, [r6, #0]
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	0699      	lsls	r1, r3, #26
 800c062:	bf42      	ittt	mi
 800c064:	6833      	ldrmi	r3, [r6, #0]
 800c066:	3302      	addmi	r3, #2
 800c068:	6033      	strmi	r3, [r6, #0]
 800c06a:	6825      	ldr	r5, [r4, #0]
 800c06c:	f015 0506 	ands.w	r5, r5, #6
 800c070:	d106      	bne.n	800c080 <_printf_common+0x48>
 800c072:	f104 0a19 	add.w	sl, r4, #25
 800c076:	68e3      	ldr	r3, [r4, #12]
 800c078:	6832      	ldr	r2, [r6, #0]
 800c07a:	1a9b      	subs	r3, r3, r2
 800c07c:	42ab      	cmp	r3, r5
 800c07e:	dc26      	bgt.n	800c0ce <_printf_common+0x96>
 800c080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c084:	1e13      	subs	r3, r2, #0
 800c086:	6822      	ldr	r2, [r4, #0]
 800c088:	bf18      	it	ne
 800c08a:	2301      	movne	r3, #1
 800c08c:	0692      	lsls	r2, r2, #26
 800c08e:	d42b      	bmi.n	800c0e8 <_printf_common+0xb0>
 800c090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c094:	4649      	mov	r1, r9
 800c096:	4638      	mov	r0, r7
 800c098:	47c0      	blx	r8
 800c09a:	3001      	adds	r0, #1
 800c09c:	d01e      	beq.n	800c0dc <_printf_common+0xa4>
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	68e5      	ldr	r5, [r4, #12]
 800c0a2:	6832      	ldr	r2, [r6, #0]
 800c0a4:	f003 0306 	and.w	r3, r3, #6
 800c0a8:	2b04      	cmp	r3, #4
 800c0aa:	bf08      	it	eq
 800c0ac:	1aad      	subeq	r5, r5, r2
 800c0ae:	68a3      	ldr	r3, [r4, #8]
 800c0b0:	6922      	ldr	r2, [r4, #16]
 800c0b2:	bf0c      	ite	eq
 800c0b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0b8:	2500      	movne	r5, #0
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	bfc4      	itt	gt
 800c0be:	1a9b      	subgt	r3, r3, r2
 800c0c0:	18ed      	addgt	r5, r5, r3
 800c0c2:	2600      	movs	r6, #0
 800c0c4:	341a      	adds	r4, #26
 800c0c6:	42b5      	cmp	r5, r6
 800c0c8:	d11a      	bne.n	800c100 <_printf_common+0xc8>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	e008      	b.n	800c0e0 <_printf_common+0xa8>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	4652      	mov	r2, sl
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	47c0      	blx	r8
 800c0d8:	3001      	adds	r0, #1
 800c0da:	d103      	bne.n	800c0e4 <_printf_common+0xac>
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e4:	3501      	adds	r5, #1
 800c0e6:	e7c6      	b.n	800c076 <_printf_common+0x3e>
 800c0e8:	18e1      	adds	r1, r4, r3
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	2030      	movs	r0, #48	; 0x30
 800c0ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0f2:	4422      	add	r2, r4
 800c0f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0fc:	3302      	adds	r3, #2
 800c0fe:	e7c7      	b.n	800c090 <_printf_common+0x58>
 800c100:	2301      	movs	r3, #1
 800c102:	4622      	mov	r2, r4
 800c104:	4649      	mov	r1, r9
 800c106:	4638      	mov	r0, r7
 800c108:	47c0      	blx	r8
 800c10a:	3001      	adds	r0, #1
 800c10c:	d0e6      	beq.n	800c0dc <_printf_common+0xa4>
 800c10e:	3601      	adds	r6, #1
 800c110:	e7d9      	b.n	800c0c6 <_printf_common+0x8e>
	...

0800c114 <_printf_i>:
 800c114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c118:	460c      	mov	r4, r1
 800c11a:	4691      	mov	r9, r2
 800c11c:	7e27      	ldrb	r7, [r4, #24]
 800c11e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c120:	2f78      	cmp	r7, #120	; 0x78
 800c122:	4680      	mov	r8, r0
 800c124:	469a      	mov	sl, r3
 800c126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c12a:	d807      	bhi.n	800c13c <_printf_i+0x28>
 800c12c:	2f62      	cmp	r7, #98	; 0x62
 800c12e:	d80a      	bhi.n	800c146 <_printf_i+0x32>
 800c130:	2f00      	cmp	r7, #0
 800c132:	f000 80d8 	beq.w	800c2e6 <_printf_i+0x1d2>
 800c136:	2f58      	cmp	r7, #88	; 0x58
 800c138:	f000 80a3 	beq.w	800c282 <_printf_i+0x16e>
 800c13c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c144:	e03a      	b.n	800c1bc <_printf_i+0xa8>
 800c146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c14a:	2b15      	cmp	r3, #21
 800c14c:	d8f6      	bhi.n	800c13c <_printf_i+0x28>
 800c14e:	a001      	add	r0, pc, #4	; (adr r0, 800c154 <_printf_i+0x40>)
 800c150:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c154:	0800c1ad 	.word	0x0800c1ad
 800c158:	0800c1c1 	.word	0x0800c1c1
 800c15c:	0800c13d 	.word	0x0800c13d
 800c160:	0800c13d 	.word	0x0800c13d
 800c164:	0800c13d 	.word	0x0800c13d
 800c168:	0800c13d 	.word	0x0800c13d
 800c16c:	0800c1c1 	.word	0x0800c1c1
 800c170:	0800c13d 	.word	0x0800c13d
 800c174:	0800c13d 	.word	0x0800c13d
 800c178:	0800c13d 	.word	0x0800c13d
 800c17c:	0800c13d 	.word	0x0800c13d
 800c180:	0800c2cd 	.word	0x0800c2cd
 800c184:	0800c1f1 	.word	0x0800c1f1
 800c188:	0800c2af 	.word	0x0800c2af
 800c18c:	0800c13d 	.word	0x0800c13d
 800c190:	0800c13d 	.word	0x0800c13d
 800c194:	0800c2ef 	.word	0x0800c2ef
 800c198:	0800c13d 	.word	0x0800c13d
 800c19c:	0800c1f1 	.word	0x0800c1f1
 800c1a0:	0800c13d 	.word	0x0800c13d
 800c1a4:	0800c13d 	.word	0x0800c13d
 800c1a8:	0800c2b7 	.word	0x0800c2b7
 800c1ac:	680b      	ldr	r3, [r1, #0]
 800c1ae:	1d1a      	adds	r2, r3, #4
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	600a      	str	r2, [r1, #0]
 800c1b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c1b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e0a3      	b.n	800c308 <_printf_i+0x1f4>
 800c1c0:	6825      	ldr	r5, [r4, #0]
 800c1c2:	6808      	ldr	r0, [r1, #0]
 800c1c4:	062e      	lsls	r6, r5, #24
 800c1c6:	f100 0304 	add.w	r3, r0, #4
 800c1ca:	d50a      	bpl.n	800c1e2 <_printf_i+0xce>
 800c1cc:	6805      	ldr	r5, [r0, #0]
 800c1ce:	600b      	str	r3, [r1, #0]
 800c1d0:	2d00      	cmp	r5, #0
 800c1d2:	da03      	bge.n	800c1dc <_printf_i+0xc8>
 800c1d4:	232d      	movs	r3, #45	; 0x2d
 800c1d6:	426d      	negs	r5, r5
 800c1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1dc:	485e      	ldr	r0, [pc, #376]	; (800c358 <_printf_i+0x244>)
 800c1de:	230a      	movs	r3, #10
 800c1e0:	e019      	b.n	800c216 <_printf_i+0x102>
 800c1e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c1e6:	6805      	ldr	r5, [r0, #0]
 800c1e8:	600b      	str	r3, [r1, #0]
 800c1ea:	bf18      	it	ne
 800c1ec:	b22d      	sxthne	r5, r5
 800c1ee:	e7ef      	b.n	800c1d0 <_printf_i+0xbc>
 800c1f0:	680b      	ldr	r3, [r1, #0]
 800c1f2:	6825      	ldr	r5, [r4, #0]
 800c1f4:	1d18      	adds	r0, r3, #4
 800c1f6:	6008      	str	r0, [r1, #0]
 800c1f8:	0628      	lsls	r0, r5, #24
 800c1fa:	d501      	bpl.n	800c200 <_printf_i+0xec>
 800c1fc:	681d      	ldr	r5, [r3, #0]
 800c1fe:	e002      	b.n	800c206 <_printf_i+0xf2>
 800c200:	0669      	lsls	r1, r5, #25
 800c202:	d5fb      	bpl.n	800c1fc <_printf_i+0xe8>
 800c204:	881d      	ldrh	r5, [r3, #0]
 800c206:	4854      	ldr	r0, [pc, #336]	; (800c358 <_printf_i+0x244>)
 800c208:	2f6f      	cmp	r7, #111	; 0x6f
 800c20a:	bf0c      	ite	eq
 800c20c:	2308      	moveq	r3, #8
 800c20e:	230a      	movne	r3, #10
 800c210:	2100      	movs	r1, #0
 800c212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c216:	6866      	ldr	r6, [r4, #4]
 800c218:	60a6      	str	r6, [r4, #8]
 800c21a:	2e00      	cmp	r6, #0
 800c21c:	bfa2      	ittt	ge
 800c21e:	6821      	ldrge	r1, [r4, #0]
 800c220:	f021 0104 	bicge.w	r1, r1, #4
 800c224:	6021      	strge	r1, [r4, #0]
 800c226:	b90d      	cbnz	r5, 800c22c <_printf_i+0x118>
 800c228:	2e00      	cmp	r6, #0
 800c22a:	d04d      	beq.n	800c2c8 <_printf_i+0x1b4>
 800c22c:	4616      	mov	r6, r2
 800c22e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c232:	fb03 5711 	mls	r7, r3, r1, r5
 800c236:	5dc7      	ldrb	r7, [r0, r7]
 800c238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c23c:	462f      	mov	r7, r5
 800c23e:	42bb      	cmp	r3, r7
 800c240:	460d      	mov	r5, r1
 800c242:	d9f4      	bls.n	800c22e <_printf_i+0x11a>
 800c244:	2b08      	cmp	r3, #8
 800c246:	d10b      	bne.n	800c260 <_printf_i+0x14c>
 800c248:	6823      	ldr	r3, [r4, #0]
 800c24a:	07df      	lsls	r7, r3, #31
 800c24c:	d508      	bpl.n	800c260 <_printf_i+0x14c>
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	6861      	ldr	r1, [r4, #4]
 800c252:	4299      	cmp	r1, r3
 800c254:	bfde      	ittt	le
 800c256:	2330      	movle	r3, #48	; 0x30
 800c258:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c25c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c260:	1b92      	subs	r2, r2, r6
 800c262:	6122      	str	r2, [r4, #16]
 800c264:	f8cd a000 	str.w	sl, [sp]
 800c268:	464b      	mov	r3, r9
 800c26a:	aa03      	add	r2, sp, #12
 800c26c:	4621      	mov	r1, r4
 800c26e:	4640      	mov	r0, r8
 800c270:	f7ff fee2 	bl	800c038 <_printf_common>
 800c274:	3001      	adds	r0, #1
 800c276:	d14c      	bne.n	800c312 <_printf_i+0x1fe>
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	b004      	add	sp, #16
 800c27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c282:	4835      	ldr	r0, [pc, #212]	; (800c358 <_printf_i+0x244>)
 800c284:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	680e      	ldr	r6, [r1, #0]
 800c28c:	061f      	lsls	r7, r3, #24
 800c28e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c292:	600e      	str	r6, [r1, #0]
 800c294:	d514      	bpl.n	800c2c0 <_printf_i+0x1ac>
 800c296:	07d9      	lsls	r1, r3, #31
 800c298:	bf44      	itt	mi
 800c29a:	f043 0320 	orrmi.w	r3, r3, #32
 800c29e:	6023      	strmi	r3, [r4, #0]
 800c2a0:	b91d      	cbnz	r5, 800c2aa <_printf_i+0x196>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	f023 0320 	bic.w	r3, r3, #32
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	2310      	movs	r3, #16
 800c2ac:	e7b0      	b.n	800c210 <_printf_i+0xfc>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	f043 0320 	orr.w	r3, r3, #32
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	2378      	movs	r3, #120	; 0x78
 800c2b8:	4828      	ldr	r0, [pc, #160]	; (800c35c <_printf_i+0x248>)
 800c2ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2be:	e7e3      	b.n	800c288 <_printf_i+0x174>
 800c2c0:	065e      	lsls	r6, r3, #25
 800c2c2:	bf48      	it	mi
 800c2c4:	b2ad      	uxthmi	r5, r5
 800c2c6:	e7e6      	b.n	800c296 <_printf_i+0x182>
 800c2c8:	4616      	mov	r6, r2
 800c2ca:	e7bb      	b.n	800c244 <_printf_i+0x130>
 800c2cc:	680b      	ldr	r3, [r1, #0]
 800c2ce:	6826      	ldr	r6, [r4, #0]
 800c2d0:	6960      	ldr	r0, [r4, #20]
 800c2d2:	1d1d      	adds	r5, r3, #4
 800c2d4:	600d      	str	r5, [r1, #0]
 800c2d6:	0635      	lsls	r5, r6, #24
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	d501      	bpl.n	800c2e0 <_printf_i+0x1cc>
 800c2dc:	6018      	str	r0, [r3, #0]
 800c2de:	e002      	b.n	800c2e6 <_printf_i+0x1d2>
 800c2e0:	0671      	lsls	r1, r6, #25
 800c2e2:	d5fb      	bpl.n	800c2dc <_printf_i+0x1c8>
 800c2e4:	8018      	strh	r0, [r3, #0]
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	4616      	mov	r6, r2
 800c2ec:	e7ba      	b.n	800c264 <_printf_i+0x150>
 800c2ee:	680b      	ldr	r3, [r1, #0]
 800c2f0:	1d1a      	adds	r2, r3, #4
 800c2f2:	600a      	str	r2, [r1, #0]
 800c2f4:	681e      	ldr	r6, [r3, #0]
 800c2f6:	6862      	ldr	r2, [r4, #4]
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7f3 ff70 	bl	80001e0 <memchr>
 800c300:	b108      	cbz	r0, 800c306 <_printf_i+0x1f2>
 800c302:	1b80      	subs	r0, r0, r6
 800c304:	6060      	str	r0, [r4, #4]
 800c306:	6863      	ldr	r3, [r4, #4]
 800c308:	6123      	str	r3, [r4, #16]
 800c30a:	2300      	movs	r3, #0
 800c30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c310:	e7a8      	b.n	800c264 <_printf_i+0x150>
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	4632      	mov	r2, r6
 800c316:	4649      	mov	r1, r9
 800c318:	4640      	mov	r0, r8
 800c31a:	47d0      	blx	sl
 800c31c:	3001      	adds	r0, #1
 800c31e:	d0ab      	beq.n	800c278 <_printf_i+0x164>
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	079b      	lsls	r3, r3, #30
 800c324:	d413      	bmi.n	800c34e <_printf_i+0x23a>
 800c326:	68e0      	ldr	r0, [r4, #12]
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	4298      	cmp	r0, r3
 800c32c:	bfb8      	it	lt
 800c32e:	4618      	movlt	r0, r3
 800c330:	e7a4      	b.n	800c27c <_printf_i+0x168>
 800c332:	2301      	movs	r3, #1
 800c334:	4632      	mov	r2, r6
 800c336:	4649      	mov	r1, r9
 800c338:	4640      	mov	r0, r8
 800c33a:	47d0      	blx	sl
 800c33c:	3001      	adds	r0, #1
 800c33e:	d09b      	beq.n	800c278 <_printf_i+0x164>
 800c340:	3501      	adds	r5, #1
 800c342:	68e3      	ldr	r3, [r4, #12]
 800c344:	9903      	ldr	r1, [sp, #12]
 800c346:	1a5b      	subs	r3, r3, r1
 800c348:	42ab      	cmp	r3, r5
 800c34a:	dcf2      	bgt.n	800c332 <_printf_i+0x21e>
 800c34c:	e7eb      	b.n	800c326 <_printf_i+0x212>
 800c34e:	2500      	movs	r5, #0
 800c350:	f104 0619 	add.w	r6, r4, #25
 800c354:	e7f5      	b.n	800c342 <_printf_i+0x22e>
 800c356:	bf00      	nop
 800c358:	0800d605 	.word	0x0800d605
 800c35c:	0800d616 	.word	0x0800d616

0800c360 <_scanf_chars>:
 800c360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c364:	4615      	mov	r5, r2
 800c366:	688a      	ldr	r2, [r1, #8]
 800c368:	4680      	mov	r8, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	b932      	cbnz	r2, 800c37c <_scanf_chars+0x1c>
 800c36e:	698a      	ldr	r2, [r1, #24]
 800c370:	2a00      	cmp	r2, #0
 800c372:	bf0c      	ite	eq
 800c374:	2201      	moveq	r2, #1
 800c376:	f04f 32ff 	movne.w	r2, #4294967295
 800c37a:	608a      	str	r2, [r1, #8]
 800c37c:	6822      	ldr	r2, [r4, #0]
 800c37e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c40c <_scanf_chars+0xac>
 800c382:	06d1      	lsls	r1, r2, #27
 800c384:	bf5f      	itttt	pl
 800c386:	681a      	ldrpl	r2, [r3, #0]
 800c388:	1d11      	addpl	r1, r2, #4
 800c38a:	6019      	strpl	r1, [r3, #0]
 800c38c:	6816      	ldrpl	r6, [r2, #0]
 800c38e:	2700      	movs	r7, #0
 800c390:	69a0      	ldr	r0, [r4, #24]
 800c392:	b188      	cbz	r0, 800c3b8 <_scanf_chars+0x58>
 800c394:	2801      	cmp	r0, #1
 800c396:	d107      	bne.n	800c3a8 <_scanf_chars+0x48>
 800c398:	682b      	ldr	r3, [r5, #0]
 800c39a:	781a      	ldrb	r2, [r3, #0]
 800c39c:	6963      	ldr	r3, [r4, #20]
 800c39e:	5c9b      	ldrb	r3, [r3, r2]
 800c3a0:	b953      	cbnz	r3, 800c3b8 <_scanf_chars+0x58>
 800c3a2:	bb27      	cbnz	r7, 800c3ee <_scanf_chars+0x8e>
 800c3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3a8:	2802      	cmp	r0, #2
 800c3aa:	d120      	bne.n	800c3ee <_scanf_chars+0x8e>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c3b4:	071b      	lsls	r3, r3, #28
 800c3b6:	d41a      	bmi.n	800c3ee <_scanf_chars+0x8e>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	06da      	lsls	r2, r3, #27
 800c3bc:	bf5e      	ittt	pl
 800c3be:	682b      	ldrpl	r3, [r5, #0]
 800c3c0:	781b      	ldrbpl	r3, [r3, #0]
 800c3c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c3c6:	682a      	ldr	r2, [r5, #0]
 800c3c8:	686b      	ldr	r3, [r5, #4]
 800c3ca:	3201      	adds	r2, #1
 800c3cc:	602a      	str	r2, [r5, #0]
 800c3ce:	68a2      	ldr	r2, [r4, #8]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	3a01      	subs	r2, #1
 800c3d4:	606b      	str	r3, [r5, #4]
 800c3d6:	3701      	adds	r7, #1
 800c3d8:	60a2      	str	r2, [r4, #8]
 800c3da:	b142      	cbz	r2, 800c3ee <_scanf_chars+0x8e>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dcd7      	bgt.n	800c390 <_scanf_chars+0x30>
 800c3e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	4798      	blx	r3
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d0d0      	beq.n	800c390 <_scanf_chars+0x30>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	f013 0310 	ands.w	r3, r3, #16
 800c3f4:	d105      	bne.n	800c402 <_scanf_chars+0xa2>
 800c3f6:	68e2      	ldr	r2, [r4, #12]
 800c3f8:	3201      	adds	r2, #1
 800c3fa:	60e2      	str	r2, [r4, #12]
 800c3fc:	69a2      	ldr	r2, [r4, #24]
 800c3fe:	b102      	cbz	r2, 800c402 <_scanf_chars+0xa2>
 800c400:	7033      	strb	r3, [r6, #0]
 800c402:	6923      	ldr	r3, [r4, #16]
 800c404:	441f      	add	r7, r3
 800c406:	6127      	str	r7, [r4, #16]
 800c408:	2000      	movs	r0, #0
 800c40a:	e7cb      	b.n	800c3a4 <_scanf_chars+0x44>
 800c40c:	0800d643 	.word	0x0800d643

0800c410 <_scanf_i>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	4698      	mov	r8, r3
 800c416:	4b74      	ldr	r3, [pc, #464]	; (800c5e8 <_scanf_i+0x1d8>)
 800c418:	460c      	mov	r4, r1
 800c41a:	4682      	mov	sl, r0
 800c41c:	4616      	mov	r6, r2
 800c41e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c422:	b087      	sub	sp, #28
 800c424:	ab03      	add	r3, sp, #12
 800c426:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c42a:	4b70      	ldr	r3, [pc, #448]	; (800c5ec <_scanf_i+0x1dc>)
 800c42c:	69a1      	ldr	r1, [r4, #24]
 800c42e:	4a70      	ldr	r2, [pc, #448]	; (800c5f0 <_scanf_i+0x1e0>)
 800c430:	2903      	cmp	r1, #3
 800c432:	bf18      	it	ne
 800c434:	461a      	movne	r2, r3
 800c436:	68a3      	ldr	r3, [r4, #8]
 800c438:	9201      	str	r2, [sp, #4]
 800c43a:	1e5a      	subs	r2, r3, #1
 800c43c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c440:	bf88      	it	hi
 800c442:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c446:	4627      	mov	r7, r4
 800c448:	bf82      	ittt	hi
 800c44a:	eb03 0905 	addhi.w	r9, r3, r5
 800c44e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c452:	60a3      	strhi	r3, [r4, #8]
 800c454:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c458:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c45c:	bf98      	it	ls
 800c45e:	f04f 0900 	movls.w	r9, #0
 800c462:	6023      	str	r3, [r4, #0]
 800c464:	463d      	mov	r5, r7
 800c466:	f04f 0b00 	mov.w	fp, #0
 800c46a:	6831      	ldr	r1, [r6, #0]
 800c46c:	ab03      	add	r3, sp, #12
 800c46e:	7809      	ldrb	r1, [r1, #0]
 800c470:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c474:	2202      	movs	r2, #2
 800c476:	f7f3 feb3 	bl	80001e0 <memchr>
 800c47a:	b328      	cbz	r0, 800c4c8 <_scanf_i+0xb8>
 800c47c:	f1bb 0f01 	cmp.w	fp, #1
 800c480:	d159      	bne.n	800c536 <_scanf_i+0x126>
 800c482:	6862      	ldr	r2, [r4, #4]
 800c484:	b92a      	cbnz	r2, 800c492 <_scanf_i+0x82>
 800c486:	6822      	ldr	r2, [r4, #0]
 800c488:	2308      	movs	r3, #8
 800c48a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c48e:	6063      	str	r3, [r4, #4]
 800c490:	6022      	str	r2, [r4, #0]
 800c492:	6822      	ldr	r2, [r4, #0]
 800c494:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c498:	6022      	str	r2, [r4, #0]
 800c49a:	68a2      	ldr	r2, [r4, #8]
 800c49c:	1e51      	subs	r1, r2, #1
 800c49e:	60a1      	str	r1, [r4, #8]
 800c4a0:	b192      	cbz	r2, 800c4c8 <_scanf_i+0xb8>
 800c4a2:	6832      	ldr	r2, [r6, #0]
 800c4a4:	1c51      	adds	r1, r2, #1
 800c4a6:	6031      	str	r1, [r6, #0]
 800c4a8:	7812      	ldrb	r2, [r2, #0]
 800c4aa:	f805 2b01 	strb.w	r2, [r5], #1
 800c4ae:	6872      	ldr	r2, [r6, #4]
 800c4b0:	3a01      	subs	r2, #1
 800c4b2:	2a00      	cmp	r2, #0
 800c4b4:	6072      	str	r2, [r6, #4]
 800c4b6:	dc07      	bgt.n	800c4c8 <_scanf_i+0xb8>
 800c4b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c4bc:	4631      	mov	r1, r6
 800c4be:	4650      	mov	r0, sl
 800c4c0:	4790      	blx	r2
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	f040 8085 	bne.w	800c5d2 <_scanf_i+0x1c2>
 800c4c8:	f10b 0b01 	add.w	fp, fp, #1
 800c4cc:	f1bb 0f03 	cmp.w	fp, #3
 800c4d0:	d1cb      	bne.n	800c46a <_scanf_i+0x5a>
 800c4d2:	6863      	ldr	r3, [r4, #4]
 800c4d4:	b90b      	cbnz	r3, 800c4da <_scanf_i+0xca>
 800c4d6:	230a      	movs	r3, #10
 800c4d8:	6063      	str	r3, [r4, #4]
 800c4da:	6863      	ldr	r3, [r4, #4]
 800c4dc:	4945      	ldr	r1, [pc, #276]	; (800c5f4 <_scanf_i+0x1e4>)
 800c4de:	6960      	ldr	r0, [r4, #20]
 800c4e0:	1ac9      	subs	r1, r1, r3
 800c4e2:	f000 f889 	bl	800c5f8 <__sccl>
 800c4e6:	f04f 0b00 	mov.w	fp, #0
 800c4ea:	68a3      	ldr	r3, [r4, #8]
 800c4ec:	6822      	ldr	r2, [r4, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d03d      	beq.n	800c56e <_scanf_i+0x15e>
 800c4f2:	6831      	ldr	r1, [r6, #0]
 800c4f4:	6960      	ldr	r0, [r4, #20]
 800c4f6:	f891 c000 	ldrb.w	ip, [r1]
 800c4fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d035      	beq.n	800c56e <_scanf_i+0x15e>
 800c502:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c506:	d124      	bne.n	800c552 <_scanf_i+0x142>
 800c508:	0510      	lsls	r0, r2, #20
 800c50a:	d522      	bpl.n	800c552 <_scanf_i+0x142>
 800c50c:	f10b 0b01 	add.w	fp, fp, #1
 800c510:	f1b9 0f00 	cmp.w	r9, #0
 800c514:	d003      	beq.n	800c51e <_scanf_i+0x10e>
 800c516:	3301      	adds	r3, #1
 800c518:	f109 39ff 	add.w	r9, r9, #4294967295
 800c51c:	60a3      	str	r3, [r4, #8]
 800c51e:	6873      	ldr	r3, [r6, #4]
 800c520:	3b01      	subs	r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	6073      	str	r3, [r6, #4]
 800c526:	dd1b      	ble.n	800c560 <_scanf_i+0x150>
 800c528:	6833      	ldr	r3, [r6, #0]
 800c52a:	3301      	adds	r3, #1
 800c52c:	6033      	str	r3, [r6, #0]
 800c52e:	68a3      	ldr	r3, [r4, #8]
 800c530:	3b01      	subs	r3, #1
 800c532:	60a3      	str	r3, [r4, #8]
 800c534:	e7d9      	b.n	800c4ea <_scanf_i+0xda>
 800c536:	f1bb 0f02 	cmp.w	fp, #2
 800c53a:	d1ae      	bne.n	800c49a <_scanf_i+0x8a>
 800c53c:	6822      	ldr	r2, [r4, #0]
 800c53e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c542:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c546:	d1bf      	bne.n	800c4c8 <_scanf_i+0xb8>
 800c548:	2310      	movs	r3, #16
 800c54a:	6063      	str	r3, [r4, #4]
 800c54c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c550:	e7a2      	b.n	800c498 <_scanf_i+0x88>
 800c552:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c556:	6022      	str	r2, [r4, #0]
 800c558:	780b      	ldrb	r3, [r1, #0]
 800c55a:	f805 3b01 	strb.w	r3, [r5], #1
 800c55e:	e7de      	b.n	800c51e <_scanf_i+0x10e>
 800c560:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c564:	4631      	mov	r1, r6
 800c566:	4650      	mov	r0, sl
 800c568:	4798      	blx	r3
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d0df      	beq.n	800c52e <_scanf_i+0x11e>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	05d9      	lsls	r1, r3, #23
 800c572:	d50d      	bpl.n	800c590 <_scanf_i+0x180>
 800c574:	42bd      	cmp	r5, r7
 800c576:	d909      	bls.n	800c58c <_scanf_i+0x17c>
 800c578:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c57c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c580:	4632      	mov	r2, r6
 800c582:	4650      	mov	r0, sl
 800c584:	4798      	blx	r3
 800c586:	f105 39ff 	add.w	r9, r5, #4294967295
 800c58a:	464d      	mov	r5, r9
 800c58c:	42bd      	cmp	r5, r7
 800c58e:	d028      	beq.n	800c5e2 <_scanf_i+0x1d2>
 800c590:	6822      	ldr	r2, [r4, #0]
 800c592:	f012 0210 	ands.w	r2, r2, #16
 800c596:	d113      	bne.n	800c5c0 <_scanf_i+0x1b0>
 800c598:	702a      	strb	r2, [r5, #0]
 800c59a:	6863      	ldr	r3, [r4, #4]
 800c59c:	9e01      	ldr	r6, [sp, #4]
 800c59e:	4639      	mov	r1, r7
 800c5a0:	4650      	mov	r0, sl
 800c5a2:	47b0      	blx	r6
 800c5a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c5a8:	6821      	ldr	r1, [r4, #0]
 800c5aa:	1d1a      	adds	r2, r3, #4
 800c5ac:	f8c8 2000 	str.w	r2, [r8]
 800c5b0:	f011 0f20 	tst.w	r1, #32
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	d00f      	beq.n	800c5d8 <_scanf_i+0x1c8>
 800c5b8:	6018      	str	r0, [r3, #0]
 800c5ba:	68e3      	ldr	r3, [r4, #12]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	60e3      	str	r3, [r4, #12]
 800c5c0:	1bed      	subs	r5, r5, r7
 800c5c2:	44ab      	add	fp, r5
 800c5c4:	6925      	ldr	r5, [r4, #16]
 800c5c6:	445d      	add	r5, fp
 800c5c8:	6125      	str	r5, [r4, #16]
 800c5ca:	2000      	movs	r0, #0
 800c5cc:	b007      	add	sp, #28
 800c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d2:	f04f 0b00 	mov.w	fp, #0
 800c5d6:	e7ca      	b.n	800c56e <_scanf_i+0x15e>
 800c5d8:	07ca      	lsls	r2, r1, #31
 800c5da:	bf4c      	ite	mi
 800c5dc:	8018      	strhmi	r0, [r3, #0]
 800c5de:	6018      	strpl	r0, [r3, #0]
 800c5e0:	e7eb      	b.n	800c5ba <_scanf_i+0x1aa>
 800c5e2:	2001      	movs	r0, #1
 800c5e4:	e7f2      	b.n	800c5cc <_scanf_i+0x1bc>
 800c5e6:	bf00      	nop
 800c5e8:	0800d544 	.word	0x0800d544
 800c5ec:	0800c871 	.word	0x0800c871
 800c5f0:	0800c775 	.word	0x0800c775
 800c5f4:	0800d640 	.word	0x0800d640

0800c5f8 <__sccl>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	780b      	ldrb	r3, [r1, #0]
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	2b5e      	cmp	r3, #94	; 0x5e
 800c600:	bf0b      	itete	eq
 800c602:	784b      	ldrbeq	r3, [r1, #1]
 800c604:	1c48      	addne	r0, r1, #1
 800c606:	1c88      	addeq	r0, r1, #2
 800c608:	2200      	movne	r2, #0
 800c60a:	bf08      	it	eq
 800c60c:	2201      	moveq	r2, #1
 800c60e:	1e61      	subs	r1, r4, #1
 800c610:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c614:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c618:	42a9      	cmp	r1, r5
 800c61a:	d1fb      	bne.n	800c614 <__sccl+0x1c>
 800c61c:	b90b      	cbnz	r3, 800c622 <__sccl+0x2a>
 800c61e:	3801      	subs	r0, #1
 800c620:	bd70      	pop	{r4, r5, r6, pc}
 800c622:	f082 0101 	eor.w	r1, r2, #1
 800c626:	54e1      	strb	r1, [r4, r3]
 800c628:	1c42      	adds	r2, r0, #1
 800c62a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c62e:	2d2d      	cmp	r5, #45	; 0x2d
 800c630:	f102 36ff 	add.w	r6, r2, #4294967295
 800c634:	4610      	mov	r0, r2
 800c636:	d006      	beq.n	800c646 <__sccl+0x4e>
 800c638:	2d5d      	cmp	r5, #93	; 0x5d
 800c63a:	d0f1      	beq.n	800c620 <__sccl+0x28>
 800c63c:	b90d      	cbnz	r5, 800c642 <__sccl+0x4a>
 800c63e:	4630      	mov	r0, r6
 800c640:	e7ee      	b.n	800c620 <__sccl+0x28>
 800c642:	462b      	mov	r3, r5
 800c644:	e7ef      	b.n	800c626 <__sccl+0x2e>
 800c646:	7816      	ldrb	r6, [r2, #0]
 800c648:	2e5d      	cmp	r6, #93	; 0x5d
 800c64a:	d0fa      	beq.n	800c642 <__sccl+0x4a>
 800c64c:	42b3      	cmp	r3, r6
 800c64e:	dcf8      	bgt.n	800c642 <__sccl+0x4a>
 800c650:	4618      	mov	r0, r3
 800c652:	3001      	adds	r0, #1
 800c654:	4286      	cmp	r6, r0
 800c656:	5421      	strb	r1, [r4, r0]
 800c658:	dcfb      	bgt.n	800c652 <__sccl+0x5a>
 800c65a:	43d8      	mvns	r0, r3
 800c65c:	4430      	add	r0, r6
 800c65e:	1c5d      	adds	r5, r3, #1
 800c660:	42b3      	cmp	r3, r6
 800c662:	bfa8      	it	ge
 800c664:	2000      	movge	r0, #0
 800c666:	182b      	adds	r3, r5, r0
 800c668:	3202      	adds	r2, #2
 800c66a:	e7de      	b.n	800c62a <__sccl+0x32>

0800c66c <_strtol_l.isra.0>:
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c672:	d001      	beq.n	800c678 <_strtol_l.isra.0+0xc>
 800c674:	2b24      	cmp	r3, #36	; 0x24
 800c676:	d906      	bls.n	800c686 <_strtol_l.isra.0+0x1a>
 800c678:	f7ff f84c 	bl	800b714 <__errno>
 800c67c:	2316      	movs	r3, #22
 800c67e:	6003      	str	r3, [r0, #0]
 800c680:	2000      	movs	r0, #0
 800c682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c686:	4f3a      	ldr	r7, [pc, #232]	; (800c770 <_strtol_l.isra.0+0x104>)
 800c688:	468e      	mov	lr, r1
 800c68a:	4676      	mov	r6, lr
 800c68c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c690:	5de5      	ldrb	r5, [r4, r7]
 800c692:	f015 0508 	ands.w	r5, r5, #8
 800c696:	d1f8      	bne.n	800c68a <_strtol_l.isra.0+0x1e>
 800c698:	2c2d      	cmp	r4, #45	; 0x2d
 800c69a:	d134      	bne.n	800c706 <_strtol_l.isra.0+0x9a>
 800c69c:	f89e 4000 	ldrb.w	r4, [lr]
 800c6a0:	f04f 0801 	mov.w	r8, #1
 800c6a4:	f106 0e02 	add.w	lr, r6, #2
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d05c      	beq.n	800c766 <_strtol_l.isra.0+0xfa>
 800c6ac:	2b10      	cmp	r3, #16
 800c6ae:	d10c      	bne.n	800c6ca <_strtol_l.isra.0+0x5e>
 800c6b0:	2c30      	cmp	r4, #48	; 0x30
 800c6b2:	d10a      	bne.n	800c6ca <_strtol_l.isra.0+0x5e>
 800c6b4:	f89e 4000 	ldrb.w	r4, [lr]
 800c6b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c6bc:	2c58      	cmp	r4, #88	; 0x58
 800c6be:	d14d      	bne.n	800c75c <_strtol_l.isra.0+0xf0>
 800c6c0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c6c4:	2310      	movs	r3, #16
 800c6c6:	f10e 0e02 	add.w	lr, lr, #2
 800c6ca:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c6ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c6d2:	2600      	movs	r6, #0
 800c6d4:	fbbc f9f3 	udiv	r9, ip, r3
 800c6d8:	4635      	mov	r5, r6
 800c6da:	fb03 ca19 	mls	sl, r3, r9, ip
 800c6de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c6e2:	2f09      	cmp	r7, #9
 800c6e4:	d818      	bhi.n	800c718 <_strtol_l.isra.0+0xac>
 800c6e6:	463c      	mov	r4, r7
 800c6e8:	42a3      	cmp	r3, r4
 800c6ea:	dd24      	ble.n	800c736 <_strtol_l.isra.0+0xca>
 800c6ec:	2e00      	cmp	r6, #0
 800c6ee:	db1f      	blt.n	800c730 <_strtol_l.isra.0+0xc4>
 800c6f0:	45a9      	cmp	r9, r5
 800c6f2:	d31d      	bcc.n	800c730 <_strtol_l.isra.0+0xc4>
 800c6f4:	d101      	bne.n	800c6fa <_strtol_l.isra.0+0x8e>
 800c6f6:	45a2      	cmp	sl, r4
 800c6f8:	db1a      	blt.n	800c730 <_strtol_l.isra.0+0xc4>
 800c6fa:	fb05 4503 	mla	r5, r5, r3, r4
 800c6fe:	2601      	movs	r6, #1
 800c700:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c704:	e7eb      	b.n	800c6de <_strtol_l.isra.0+0x72>
 800c706:	2c2b      	cmp	r4, #43	; 0x2b
 800c708:	bf08      	it	eq
 800c70a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c70e:	46a8      	mov	r8, r5
 800c710:	bf08      	it	eq
 800c712:	f106 0e02 	addeq.w	lr, r6, #2
 800c716:	e7c7      	b.n	800c6a8 <_strtol_l.isra.0+0x3c>
 800c718:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c71c:	2f19      	cmp	r7, #25
 800c71e:	d801      	bhi.n	800c724 <_strtol_l.isra.0+0xb8>
 800c720:	3c37      	subs	r4, #55	; 0x37
 800c722:	e7e1      	b.n	800c6e8 <_strtol_l.isra.0+0x7c>
 800c724:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c728:	2f19      	cmp	r7, #25
 800c72a:	d804      	bhi.n	800c736 <_strtol_l.isra.0+0xca>
 800c72c:	3c57      	subs	r4, #87	; 0x57
 800c72e:	e7db      	b.n	800c6e8 <_strtol_l.isra.0+0x7c>
 800c730:	f04f 36ff 	mov.w	r6, #4294967295
 800c734:	e7e4      	b.n	800c700 <_strtol_l.isra.0+0x94>
 800c736:	2e00      	cmp	r6, #0
 800c738:	da05      	bge.n	800c746 <_strtol_l.isra.0+0xda>
 800c73a:	2322      	movs	r3, #34	; 0x22
 800c73c:	6003      	str	r3, [r0, #0]
 800c73e:	4665      	mov	r5, ip
 800c740:	b942      	cbnz	r2, 800c754 <_strtol_l.isra.0+0xe8>
 800c742:	4628      	mov	r0, r5
 800c744:	e79d      	b.n	800c682 <_strtol_l.isra.0+0x16>
 800c746:	f1b8 0f00 	cmp.w	r8, #0
 800c74a:	d000      	beq.n	800c74e <_strtol_l.isra.0+0xe2>
 800c74c:	426d      	negs	r5, r5
 800c74e:	2a00      	cmp	r2, #0
 800c750:	d0f7      	beq.n	800c742 <_strtol_l.isra.0+0xd6>
 800c752:	b10e      	cbz	r6, 800c758 <_strtol_l.isra.0+0xec>
 800c754:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c758:	6011      	str	r1, [r2, #0]
 800c75a:	e7f2      	b.n	800c742 <_strtol_l.isra.0+0xd6>
 800c75c:	2430      	movs	r4, #48	; 0x30
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1b3      	bne.n	800c6ca <_strtol_l.isra.0+0x5e>
 800c762:	2308      	movs	r3, #8
 800c764:	e7b1      	b.n	800c6ca <_strtol_l.isra.0+0x5e>
 800c766:	2c30      	cmp	r4, #48	; 0x30
 800c768:	d0a4      	beq.n	800c6b4 <_strtol_l.isra.0+0x48>
 800c76a:	230a      	movs	r3, #10
 800c76c:	e7ad      	b.n	800c6ca <_strtol_l.isra.0+0x5e>
 800c76e:	bf00      	nop
 800c770:	0800d643 	.word	0x0800d643

0800c774 <_strtol_r>:
 800c774:	f7ff bf7a 	b.w	800c66c <_strtol_l.isra.0>

0800c778 <_strtoul_l.isra.0>:
 800c778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c77c:	4e3b      	ldr	r6, [pc, #236]	; (800c86c <_strtoul_l.isra.0+0xf4>)
 800c77e:	4686      	mov	lr, r0
 800c780:	468c      	mov	ip, r1
 800c782:	4660      	mov	r0, ip
 800c784:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c788:	5da5      	ldrb	r5, [r4, r6]
 800c78a:	f015 0508 	ands.w	r5, r5, #8
 800c78e:	d1f8      	bne.n	800c782 <_strtoul_l.isra.0+0xa>
 800c790:	2c2d      	cmp	r4, #45	; 0x2d
 800c792:	d134      	bne.n	800c7fe <_strtoul_l.isra.0+0x86>
 800c794:	f89c 4000 	ldrb.w	r4, [ip]
 800c798:	f04f 0801 	mov.w	r8, #1
 800c79c:	f100 0c02 	add.w	ip, r0, #2
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d05e      	beq.n	800c862 <_strtoul_l.isra.0+0xea>
 800c7a4:	2b10      	cmp	r3, #16
 800c7a6:	d10c      	bne.n	800c7c2 <_strtoul_l.isra.0+0x4a>
 800c7a8:	2c30      	cmp	r4, #48	; 0x30
 800c7aa:	d10a      	bne.n	800c7c2 <_strtoul_l.isra.0+0x4a>
 800c7ac:	f89c 0000 	ldrb.w	r0, [ip]
 800c7b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c7b4:	2858      	cmp	r0, #88	; 0x58
 800c7b6:	d14f      	bne.n	800c858 <_strtoul_l.isra.0+0xe0>
 800c7b8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c7bc:	2310      	movs	r3, #16
 800c7be:	f10c 0c02 	add.w	ip, ip, #2
 800c7c2:	f04f 37ff 	mov.w	r7, #4294967295
 800c7c6:	2500      	movs	r5, #0
 800c7c8:	fbb7 f7f3 	udiv	r7, r7, r3
 800c7cc:	fb03 f907 	mul.w	r9, r3, r7
 800c7d0:	ea6f 0909 	mvn.w	r9, r9
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c7da:	2e09      	cmp	r6, #9
 800c7dc:	d818      	bhi.n	800c810 <_strtoul_l.isra.0+0x98>
 800c7de:	4634      	mov	r4, r6
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	dd24      	ble.n	800c82e <_strtoul_l.isra.0+0xb6>
 800c7e4:	2d00      	cmp	r5, #0
 800c7e6:	db1f      	blt.n	800c828 <_strtoul_l.isra.0+0xb0>
 800c7e8:	4287      	cmp	r7, r0
 800c7ea:	d31d      	bcc.n	800c828 <_strtoul_l.isra.0+0xb0>
 800c7ec:	d101      	bne.n	800c7f2 <_strtoul_l.isra.0+0x7a>
 800c7ee:	45a1      	cmp	r9, r4
 800c7f0:	db1a      	blt.n	800c828 <_strtoul_l.isra.0+0xb0>
 800c7f2:	fb00 4003 	mla	r0, r0, r3, r4
 800c7f6:	2501      	movs	r5, #1
 800c7f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c7fc:	e7eb      	b.n	800c7d6 <_strtoul_l.isra.0+0x5e>
 800c7fe:	2c2b      	cmp	r4, #43	; 0x2b
 800c800:	bf08      	it	eq
 800c802:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c806:	46a8      	mov	r8, r5
 800c808:	bf08      	it	eq
 800c80a:	f100 0c02 	addeq.w	ip, r0, #2
 800c80e:	e7c7      	b.n	800c7a0 <_strtoul_l.isra.0+0x28>
 800c810:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c814:	2e19      	cmp	r6, #25
 800c816:	d801      	bhi.n	800c81c <_strtoul_l.isra.0+0xa4>
 800c818:	3c37      	subs	r4, #55	; 0x37
 800c81a:	e7e1      	b.n	800c7e0 <_strtoul_l.isra.0+0x68>
 800c81c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c820:	2e19      	cmp	r6, #25
 800c822:	d804      	bhi.n	800c82e <_strtoul_l.isra.0+0xb6>
 800c824:	3c57      	subs	r4, #87	; 0x57
 800c826:	e7db      	b.n	800c7e0 <_strtoul_l.isra.0+0x68>
 800c828:	f04f 35ff 	mov.w	r5, #4294967295
 800c82c:	e7e4      	b.n	800c7f8 <_strtoul_l.isra.0+0x80>
 800c82e:	2d00      	cmp	r5, #0
 800c830:	da07      	bge.n	800c842 <_strtoul_l.isra.0+0xca>
 800c832:	2322      	movs	r3, #34	; 0x22
 800c834:	f8ce 3000 	str.w	r3, [lr]
 800c838:	f04f 30ff 	mov.w	r0, #4294967295
 800c83c:	b942      	cbnz	r2, 800c850 <_strtoul_l.isra.0+0xd8>
 800c83e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c842:	f1b8 0f00 	cmp.w	r8, #0
 800c846:	d000      	beq.n	800c84a <_strtoul_l.isra.0+0xd2>
 800c848:	4240      	negs	r0, r0
 800c84a:	2a00      	cmp	r2, #0
 800c84c:	d0f7      	beq.n	800c83e <_strtoul_l.isra.0+0xc6>
 800c84e:	b10d      	cbz	r5, 800c854 <_strtoul_l.isra.0+0xdc>
 800c850:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c854:	6011      	str	r1, [r2, #0]
 800c856:	e7f2      	b.n	800c83e <_strtoul_l.isra.0+0xc6>
 800c858:	2430      	movs	r4, #48	; 0x30
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1b1      	bne.n	800c7c2 <_strtoul_l.isra.0+0x4a>
 800c85e:	2308      	movs	r3, #8
 800c860:	e7af      	b.n	800c7c2 <_strtoul_l.isra.0+0x4a>
 800c862:	2c30      	cmp	r4, #48	; 0x30
 800c864:	d0a2      	beq.n	800c7ac <_strtoul_l.isra.0+0x34>
 800c866:	230a      	movs	r3, #10
 800c868:	e7ab      	b.n	800c7c2 <_strtoul_l.isra.0+0x4a>
 800c86a:	bf00      	nop
 800c86c:	0800d643 	.word	0x0800d643

0800c870 <_strtoul_r>:
 800c870:	f7ff bf82 	b.w	800c778 <_strtoul_l.isra.0>

0800c874 <__submore>:
 800c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c878:	460c      	mov	r4, r1
 800c87a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c880:	4299      	cmp	r1, r3
 800c882:	d11d      	bne.n	800c8c0 <__submore+0x4c>
 800c884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c888:	f7fe ffe4 	bl	800b854 <_malloc_r>
 800c88c:	b918      	cbnz	r0, 800c896 <__submore+0x22>
 800c88e:	f04f 30ff 	mov.w	r0, #4294967295
 800c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c89a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c89c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c8a0:	6360      	str	r0, [r4, #52]	; 0x34
 800c8a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c8a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c8aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c8ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c8b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c8b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c8ba:	6020      	str	r0, [r4, #0]
 800c8bc:	2000      	movs	r0, #0
 800c8be:	e7e8      	b.n	800c892 <__submore+0x1e>
 800c8c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c8c2:	0077      	lsls	r7, r6, #1
 800c8c4:	463a      	mov	r2, r7
 800c8c6:	f000 f82b 	bl	800c920 <_realloc_r>
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d0de      	beq.n	800c88e <__submore+0x1a>
 800c8d0:	eb00 0806 	add.w	r8, r0, r6
 800c8d4:	4601      	mov	r1, r0
 800c8d6:	4632      	mov	r2, r6
 800c8d8:	4640      	mov	r0, r8
 800c8da:	f7fe ff55 	bl	800b788 <memcpy>
 800c8de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c8e2:	f8c4 8000 	str.w	r8, [r4]
 800c8e6:	e7e9      	b.n	800c8bc <__submore+0x48>

0800c8e8 <__retarget_lock_acquire_recursive>:
 800c8e8:	4770      	bx	lr

0800c8ea <__retarget_lock_release_recursive>:
 800c8ea:	4770      	bx	lr

0800c8ec <memmove>:
 800c8ec:	4288      	cmp	r0, r1
 800c8ee:	b510      	push	{r4, lr}
 800c8f0:	eb01 0402 	add.w	r4, r1, r2
 800c8f4:	d902      	bls.n	800c8fc <memmove+0x10>
 800c8f6:	4284      	cmp	r4, r0
 800c8f8:	4623      	mov	r3, r4
 800c8fa:	d807      	bhi.n	800c90c <memmove+0x20>
 800c8fc:	1e43      	subs	r3, r0, #1
 800c8fe:	42a1      	cmp	r1, r4
 800c900:	d008      	beq.n	800c914 <memmove+0x28>
 800c902:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c90a:	e7f8      	b.n	800c8fe <memmove+0x12>
 800c90c:	4402      	add	r2, r0
 800c90e:	4601      	mov	r1, r0
 800c910:	428a      	cmp	r2, r1
 800c912:	d100      	bne.n	800c916 <memmove+0x2a>
 800c914:	bd10      	pop	{r4, pc}
 800c916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c91a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c91e:	e7f7      	b.n	800c910 <memmove+0x24>

0800c920 <_realloc_r>:
 800c920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c922:	4607      	mov	r7, r0
 800c924:	4614      	mov	r4, r2
 800c926:	460e      	mov	r6, r1
 800c928:	b921      	cbnz	r1, 800c934 <_realloc_r+0x14>
 800c92a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c92e:	4611      	mov	r1, r2
 800c930:	f7fe bf90 	b.w	800b854 <_malloc_r>
 800c934:	b922      	cbnz	r2, 800c940 <_realloc_r+0x20>
 800c936:	f7fe ff3d 	bl	800b7b4 <_free_r>
 800c93a:	4625      	mov	r5, r4
 800c93c:	4628      	mov	r0, r5
 800c93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c940:	f000 f814 	bl	800c96c <_malloc_usable_size_r>
 800c944:	42a0      	cmp	r0, r4
 800c946:	d20f      	bcs.n	800c968 <_realloc_r+0x48>
 800c948:	4621      	mov	r1, r4
 800c94a:	4638      	mov	r0, r7
 800c94c:	f7fe ff82 	bl	800b854 <_malloc_r>
 800c950:	4605      	mov	r5, r0
 800c952:	2800      	cmp	r0, #0
 800c954:	d0f2      	beq.n	800c93c <_realloc_r+0x1c>
 800c956:	4631      	mov	r1, r6
 800c958:	4622      	mov	r2, r4
 800c95a:	f7fe ff15 	bl	800b788 <memcpy>
 800c95e:	4631      	mov	r1, r6
 800c960:	4638      	mov	r0, r7
 800c962:	f7fe ff27 	bl	800b7b4 <_free_r>
 800c966:	e7e9      	b.n	800c93c <_realloc_r+0x1c>
 800c968:	4635      	mov	r5, r6
 800c96a:	e7e7      	b.n	800c93c <_realloc_r+0x1c>

0800c96c <_malloc_usable_size_r>:
 800c96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c970:	1f18      	subs	r0, r3, #4
 800c972:	2b00      	cmp	r3, #0
 800c974:	bfbc      	itt	lt
 800c976:	580b      	ldrlt	r3, [r1, r0]
 800c978:	18c0      	addlt	r0, r0, r3
 800c97a:	4770      	bx	lr

0800c97c <log2f>:
 800c97c:	b508      	push	{r3, lr}
 800c97e:	f000 f807 	bl	800c990 <logf>
 800c982:	eddf 7a02 	vldr	s15, [pc, #8]	; 800c98c <log2f+0x10>
 800c986:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800c98a:	bd08      	pop	{r3, pc}
 800c98c:	3f317218 	.word	0x3f317218

0800c990 <logf>:
 800c990:	b508      	push	{r3, lr}
 800c992:	ed2d 8b02 	vpush	{d8}
 800c996:	eeb0 8a40 	vmov.f32	s16, s0
 800c99a:	f000 f82f 	bl	800c9fc <__ieee754_logf>
 800c99e:	4b14      	ldr	r3, [pc, #80]	; (800c9f0 <logf+0x60>)
 800c9a0:	f993 3000 	ldrsb.w	r3, [r3]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	d014      	beq.n	800c9d2 <logf+0x42>
 800c9a8:	eeb4 8a48 	vcmp.f32	s16, s16
 800c9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b0:	d60f      	bvs.n	800c9d2 <logf+0x42>
 800c9b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ba:	dc0a      	bgt.n	800c9d2 <logf+0x42>
 800c9bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c4:	d108      	bne.n	800c9d8 <logf+0x48>
 800c9c6:	f7fe fea5 	bl	800b714 <__errno>
 800c9ca:	2322      	movs	r3, #34	; 0x22
 800c9cc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800c9f4 <logf+0x64>
 800c9d0:	6003      	str	r3, [r0, #0]
 800c9d2:	ecbd 8b02 	vpop	{d8}
 800c9d6:	bd08      	pop	{r3, pc}
 800c9d8:	f7fe fe9c 	bl	800b714 <__errno>
 800c9dc:	ecbd 8b02 	vpop	{d8}
 800c9e0:	2321      	movs	r3, #33	; 0x21
 800c9e2:	6003      	str	r3, [r0, #0]
 800c9e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c9e8:	4803      	ldr	r0, [pc, #12]	; (800c9f8 <logf+0x68>)
 800c9ea:	f000 b8f7 	b.w	800cbdc <nanf>
 800c9ee:	bf00      	nop
 800c9f0:	20000090 	.word	0x20000090
 800c9f4:	ff800000 	.word	0xff800000
 800c9f8:	0800d5f9 	.word	0x0800d5f9

0800c9fc <__ieee754_logf>:
 800c9fc:	ee10 3a10 	vmov	r3, s0
 800ca00:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ca04:	d106      	bne.n	800ca14 <__ieee754_logf+0x18>
 800ca06:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800cb9c <__ieee754_logf+0x1a0>
 800ca0a:	eddf 7a65 	vldr	s15, [pc, #404]	; 800cba0 <__ieee754_logf+0x1a4>
 800ca0e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ca12:	4770      	bx	lr
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	da02      	bge.n	800ca1e <__ieee754_logf+0x22>
 800ca18:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ca1c:	e7f5      	b.n	800ca0a <__ieee754_logf+0xe>
 800ca1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca22:	db02      	blt.n	800ca2a <__ieee754_logf+0x2e>
 800ca24:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ca28:	4770      	bx	lr
 800ca2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca2e:	bfb8      	it	lt
 800ca30:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800cba4 <__ieee754_logf+0x1a8>
 800ca34:	485c      	ldr	r0, [pc, #368]	; (800cba8 <__ieee754_logf+0x1ac>)
 800ca36:	bfbe      	ittt	lt
 800ca38:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ca3c:	f06f 0118 	mvnlt.w	r1, #24
 800ca40:	ee17 3a90 	vmovlt	r3, s15
 800ca44:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800ca48:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ca4c:	4418      	add	r0, r3
 800ca4e:	bfa8      	it	ge
 800ca50:	2100      	movge	r1, #0
 800ca52:	3a7f      	subs	r2, #127	; 0x7f
 800ca54:	440a      	add	r2, r1
 800ca56:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800ca5a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800ca5e:	4319      	orrs	r1, r3
 800ca60:	ee00 1a10 	vmov	s0, r1
 800ca64:	4951      	ldr	r1, [pc, #324]	; (800cbac <__ieee754_logf+0x1b0>)
 800ca66:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800ca6a:	f103 000f 	add.w	r0, r3, #15
 800ca6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca72:	4001      	ands	r1, r0
 800ca74:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca78:	bb89      	cbnz	r1, 800cade <__ieee754_logf+0xe2>
 800ca7a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ca7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca82:	d10f      	bne.n	800caa4 <__ieee754_logf+0xa8>
 800ca84:	2a00      	cmp	r2, #0
 800ca86:	f000 8085 	beq.w	800cb94 <__ieee754_logf+0x198>
 800ca8a:	ee07 2a90 	vmov	s15, r2
 800ca8e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800cbb0 <__ieee754_logf+0x1b4>
 800ca92:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800cbb4 <__ieee754_logf+0x1b8>
 800ca96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ca9e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800caa2:	4770      	bx	lr
 800caa4:	eddf 6a44 	vldr	s13, [pc, #272]	; 800cbb8 <__ieee754_logf+0x1bc>
 800caa8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800caac:	eee0 7a66 	vfms.f32	s15, s0, s13
 800cab0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cab8:	b912      	cbnz	r2, 800cac0 <__ieee754_logf+0xc4>
 800caba:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cabe:	4770      	bx	lr
 800cac0:	ee07 2a90 	vmov	s15, r2
 800cac4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800cbb0 <__ieee754_logf+0x1b4>
 800cac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cacc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cad0:	ee37 0a40 	vsub.f32	s0, s14, s0
 800cad4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800cbb4 <__ieee754_logf+0x1b8>
 800cad8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800cadc:	4770      	bx	lr
 800cade:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cae2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cae6:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cbbc <__ieee754_logf+0x1c0>
 800caea:	eddf 4a35 	vldr	s9, [pc, #212]	; 800cbc0 <__ieee754_logf+0x1c4>
 800caee:	4935      	ldr	r1, [pc, #212]	; (800cbc4 <__ieee754_logf+0x1c8>)
 800caf0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800caf4:	4419      	add	r1, r3
 800caf6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800cafa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cafe:	430b      	orrs	r3, r1
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	ee07 2a90 	vmov	s15, r2
 800cb06:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cb0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cb0e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800cb12:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800cbc8 <__ieee754_logf+0x1cc>
 800cb16:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cb1a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800cbcc <__ieee754_logf+0x1d0>
 800cb1e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cb22:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cbd0 <__ieee754_logf+0x1d4>
 800cb26:	eee7 7a24 	vfma.f32	s15, s14, s9
 800cb2a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800cbd4 <__ieee754_logf+0x1d8>
 800cb2e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800cb32:	eddf 7a29 	vldr	s15, [pc, #164]	; 800cbd8 <__ieee754_logf+0x1dc>
 800cb36:	eee4 7a87 	vfma.f32	s15, s9, s14
 800cb3a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cb3e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800cb42:	dd1c      	ble.n	800cb7e <__ieee754_logf+0x182>
 800cb44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cb48:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cb4c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800cb50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb54:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cb58:	b922      	cbnz	r2, 800cb64 <__ieee754_logf+0x168>
 800cb5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb62:	4770      	bx	lr
 800cb64:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800cbb0 <__ieee754_logf+0x1b4>
 800cb68:	eee6 7a86 	vfma.f32	s15, s13, s12
 800cb6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb70:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cb74:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cbb4 <__ieee754_logf+0x1b8>
 800cb78:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800cb7c:	4770      	bx	lr
 800cb7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cb82:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	d0e9      	beq.n	800cb5e <__ieee754_logf+0x162>
 800cb8a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800cbb0 <__ieee754_logf+0x1b4>
 800cb8e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cb92:	e7ed      	b.n	800cb70 <__ieee754_logf+0x174>
 800cb94:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800cba0 <__ieee754_logf+0x1a4>
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	cc000000 	.word	0xcc000000
 800cba0:	00000000 	.word	0x00000000
 800cba4:	4c000000 	.word	0x4c000000
 800cba8:	004afb20 	.word	0x004afb20
 800cbac:	007ffff0 	.word	0x007ffff0
 800cbb0:	3717f7d1 	.word	0x3717f7d1
 800cbb4:	3f317180 	.word	0x3f317180
 800cbb8:	3eaaaaab 	.word	0x3eaaaaab
 800cbbc:	3e1cd04f 	.word	0x3e1cd04f
 800cbc0:	3e178897 	.word	0x3e178897
 800cbc4:	ffcf5c30 	.word	0xffcf5c30
 800cbc8:	3e638e29 	.word	0x3e638e29
 800cbcc:	3ecccccd 	.word	0x3ecccccd
 800cbd0:	3e3a3325 	.word	0x3e3a3325
 800cbd4:	3e924925 	.word	0x3e924925
 800cbd8:	3f2aaaab 	.word	0x3f2aaaab

0800cbdc <nanf>:
 800cbdc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cbe4 <nanf+0x8>
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	7fc00000 	.word	0x7fc00000

0800cbe8 <_init>:
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbea:	bf00      	nop
 800cbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbee:	bc08      	pop	{r3}
 800cbf0:	469e      	mov	lr, r3
 800cbf2:	4770      	bx	lr

0800cbf4 <_fini>:
 800cbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf6:	bf00      	nop
 800cbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbfa:	bc08      	pop	{r3}
 800cbfc:	469e      	mov	lr, r3
 800cbfe:	4770      	bx	lr
