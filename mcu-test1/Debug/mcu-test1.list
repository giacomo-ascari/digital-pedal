
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c044  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800c1cc  0800c1cc  0001c1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c514  0800c514  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c514  0800c514  0001c514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c51c  0800c51c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c51c  0800c51c  0001c51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c520  0800c520  0001c520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00003984  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003a14  20003a14  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a222  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055f5  00000000  00000000  0004a2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  0004f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001630  00000000  00000000  00051108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027854  00000000  00000000  00052738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021a37  00000000  00000000  00079f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5067  00000000  00000000  0009b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00170a2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066b4  00000000  00000000  00170a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c1b4 	.word	0x0800c1b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800c1b4 	.word	0x0800c1b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f004 fbe1 	bl	8004cac <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000ac 	.word	0x200000ac
 80004f8:	200000b0 	.word	0x200000b0

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f004 fbc7 	bl	8004cac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f004 fcbd 	bl	8004ea8 <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000b0 	.word	0x200000b0

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b81      	ldr	r3, [pc, #516]	; (8000754 <CS43_Init+0x214>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <CS43_Init+0x214>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7d      	ldr	r3, [pc, #500]	; (8000754 <CS43_Init+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487b      	ldr	r0, [pc, #492]	; (8000758 <CS43_Init+0x218>)
 800056c:	f002 fcd0 	bl	8002f10 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b7a      	ldr	r3, [pc, #488]	; (800075c <CS43_Init+0x21c>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f00b fd3c 	bl	800bff8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b77      	ldr	r3, [pc, #476]	; (8000760 <CS43_Init+0x220>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4976      	ldr	r1, [pc, #472]	; (8000760 <CS43_Init+0x220>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b74      	ldr	r3, [pc, #464]	; (8000760 <CS43_Init+0x220>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b72      	ldr	r3, [pc, #456]	; (8000760 <CS43_Init+0x220>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <CS43_Init+0x220>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <CS43_Init+0x220>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <CS43_Init+0x220>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <CS43_Init+0x220>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <CS43_Init+0x220>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4969      	ldr	r1, [pc, #420]	; (8000764 <CS43_Init+0x224>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <CS43_Init+0x220>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4965      	ldr	r1, [pc, #404]	; (8000764 <CS43_Init+0x224>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4962      	ldr	r1, [pc, #392]	; (8000760 <CS43_Init+0x220>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <CS43_Init+0x220>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <CS43_Init+0x220>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <CS43_Init+0x220>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <CS43_Init+0x220>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <CS43_Init+0x220>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b57      	ldr	r3, [pc, #348]	; (8000760 <CS43_Init+0x220>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <CS43_Init+0x220>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b53      	ldr	r3, [pc, #332]	; (8000760 <CS43_Init+0x220>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <CS43_Init+0x220>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <CS43_Init+0x220>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <CS43_Init+0x220>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <CS43_Init+0x220>)
 800062e:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <CS43_Init+0x220>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f043 0303 	orr.w	r3, r3, #3
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063c:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <CS43_Init+0x224>)
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff ff3d 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000646:	4947      	ldr	r1, [pc, #284]	; (8000764 <CS43_Init+0x224>)
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff57 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <CS43_Init+0x220>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <CS43_Init+0x220>)
 800065a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <CS43_Init+0x220>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000668:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800066a:	493e      	ldr	r1, [pc, #248]	; (8000764 <CS43_Init+0x224>)
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff27 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000672:	493c      	ldr	r1, [pc, #240]	; (8000764 <CS43_Init+0x224>)
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff41 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <CS43_Init+0x220>)
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <CS43_Init+0x220>)
 8000686:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <CS43_Init+0x220>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000694:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000696:	4933      	ldr	r1, [pc, #204]	; (8000764 <CS43_Init+0x224>)
 8000698:	2009      	movs	r0, #9
 800069a:	f7ff ff11 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800069e:	4931      	ldr	r1, [pc, #196]	; (8000764 <CS43_Init+0x224>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f7ff ff2b 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d123      	bne.n	80006f6 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <CS43_Init+0x220>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <CS43_Init+0x220>)
 80006ba:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <CS43_Init+0x220>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <CS43_Init+0x220>)
 80006c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <CS43_Init+0x220>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	f023 0320 	bic.w	r3, r3, #32
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <CS43_Init+0x220>)
 80006d6:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <CS43_Init+0x220>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	f023 0310 	bic.w	r3, r3, #16
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <CS43_Init+0x220>)
 80006e4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <CS43_Init+0x220>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <CS43_Init+0x220>)
 80006f2:	705a      	strb	r2, [r3, #1]
 80006f4:	e006      	b.n	8000704 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006f6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	2202      	movs	r2, #2
 8000702:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000704:	4917      	ldr	r1, [pc, #92]	; (8000764 <CS43_Init+0x224>)
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff feda 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <CS43_Init+0x224>)
 800070e:	200f      	movs	r0, #15
 8000710:	f7ff fef4 	bl	80004fc <read_register>
	iData[1] = 0x00;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800071a:	4912      	ldr	r1, [pc, #72]	; (8000764 <CS43_Init+0x224>)
 800071c:	200f      	movs	r0, #15
 800071e:	f7ff fecf 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2200      	movs	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000728:	490e      	ldr	r1, [pc, #56]	; (8000764 <CS43_Init+0x224>)
 800072a:	2014      	movs	r0, #20
 800072c:	f7ff fec8 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <CS43_Init+0x224>)
 8000732:	2015      	movs	r0, #21
 8000734:	f7ff fec4 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000738:	490a      	ldr	r1, [pc, #40]	; (8000764 <CS43_Init+0x224>)
 800073a:	201a      	movs	r0, #26
 800073c:	f7ff fec0 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <CS43_Init+0x224>)
 8000742:	201b      	movs	r0, #27
 8000744:	f7ff febc 	bl	80004c0 <write_register>
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	20001270 	.word	0x20001270
 8000758:	40020c00 	.word	0x40020c00
 800075c:	200000b0 	.word	0x200000b0
 8000760:	200000ac 	.word	0x200000ac
 8000764:	200000ad 	.word	0x200000ad

08000768 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d837      	bhi.n	80007e8 <CS43_Enable_RightLeft+0x80>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <CS43_Enable_RightLeft+0x18>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	080007a7 	.word	0x080007a7
 8000788:	080007bd 	.word	0x080007bd
 800078c:	080007d3 	.word	0x080007d3
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a2:	705a      	strb	r2, [r3, #1]
			break;
 80007a4:	e021      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007b8:	705a      	strb	r2, [r3, #1]
			break;
 80007ba:	e016      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ce:	705a      	strb	r2, [r3, #1]
			break;
 80007d0:	e00b      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007e4:	705a      	strb	r2, [r3, #1]
			break;
 80007e6:	e000      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	f043 0303 	orr.w	r3, r3, #3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000804:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <CS43_Enable_RightLeft+0xb4>)
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff fe59 	bl	80004c0 <write_register>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000ac 	.word	0x200000ac
 800081c:	200000ad 	.word	0x200000ad

08000820 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b32      	subs	r3, #50	; 0x32
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <CS43_SetVolume+0x78>)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000844:	4915      	ldr	r1, [pc, #84]	; (800089c <CS43_SetVolume+0x7c>)
 8000846:	2014      	movs	r0, #20
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <CS43_SetVolume+0x7c>)
 800084e:	2015      	movs	r0, #21
 8000850:	f7ff fe36 	bl	80004c0 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d80e      	bhi.n	8000878 <CS43_SetVolume+0x58>
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <CS43_SetVolume+0x80>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1152      	asrs	r2, r2, #5
 800086c:	17db      	asrs	r3, r3, #31
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b18      	subs	r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	e000      	b.n	800087a <CS43_SetVolume+0x5a>
 8000878:	2318      	movs	r3, #24
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <CS43_SetVolume+0x78>)
 800087c:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <CS43_SetVolume+0x7c>)
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff fe1d 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <CS43_SetVolume+0x7c>)
 8000888:	2021      	movs	r0, #33	; 0x21
 800088a:	f7ff fe19 	bl	80004c0 <write_register>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000ac 	.word	0x200000ac
 800089c:	200000ad 	.word	0x200000ad
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <CS43_Start+0x7c>)
 80008aa:	2299      	movs	r2, #153	; 0x99
 80008ac:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ae:	491d      	ldr	r1, [pc, #116]	; (8000924 <CS43_Start+0x80>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe05 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <CS43_Start+0x7c>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <CS43_Start+0x80>)
 80008be:	2047      	movs	r0, #71	; 0x47
 80008c0:	f7ff fdfe 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c4:	4917      	ldr	r1, [pc, #92]	; (8000924 <CS43_Start+0x80>)
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe18 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <CS43_Start+0x7c>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <CS43_Start+0x7c>)
 80008d8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <CS43_Start+0x80>)
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdef 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <CS43_Start+0x7c>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <CS43_Start+0x7c>)
 80008f6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	490a      	ldr	r1, [pc, #40]	; (8000924 <CS43_Start+0x80>)
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde0 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <CS43_Start+0x7c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000906:	4907      	ldr	r1, [pc, #28]	; (8000924 <CS43_Start+0x80>)
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdd9 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <CS43_Start+0x7c>)
 8000910:	229e      	movs	r2, #158	; 0x9e
 8000912:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	4903      	ldr	r1, [pc, #12]	; (8000924 <CS43_Start+0x80>)
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd2 	bl	80004c0 <write_register>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000ac 	.word	0x200000ac
 8000924:	200000ad 	.word	0x200000ad

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	f2ad 6d94 	subw	sp, sp, #1684	; 0x694
 800092e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f001 fb3a 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f8a0 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f9fa 	bl	8000d30 <MX_GPIO_Init>
  MX_FATFS_Init();
 800093c:	f007 ff88 	bl	8008850 <MX_FATFS_Init>
  MX_DMA_Init();
 8000940:	f000 f9d6 	bl	8000cf0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000944:	f000 f92c 	bl	8000ba0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000948:	f000 f958 	bl	8000bfc <MX_I2S3_Init>
  MX_TIM2_Init();
 800094c:	f000 f984 	bl	8000c58 <MX_TIM2_Init>
  MX_USB_HOST_Init();
 8000950:	f00a ffe0 	bl	800b914 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000954:	f000 f8fa 	bl	8000b4c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
	pedalboard_t pedalboard;
	pedalboard.active_pedals = 0;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	pedalboard_append(&pedalboard, OVERDRIVE_SQRT);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2107      	movs	r1, #7
 8000962:	4618      	mov	r0, r3
 8000964:	f000 ffcc 	bl	8001900 <pedalboard_append>

	CS43_Init(hi2c1, MODE_ANAL);
 8000968:	4c3a      	ldr	r4, [pc, #232]	; (8000a54 <main+0x12c>)
 800096a:	2301      	movs	r3, #1
 800096c:	9311      	str	r3, [sp, #68]	; 0x44
 800096e:	4668      	mov	r0, sp
 8000970:	f104 0310 	add.w	r3, r4, #16
 8000974:	2244      	movs	r2, #68	; 0x44
 8000976:	4619      	mov	r1, r3
 8000978:	f00b fb3e 	bl	800bff8 <memcpy>
 800097c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000980:	f7ff fdde 	bl	8000540 <CS43_Init>
	CS43_SetVolume(127);
 8000984:	207f      	movs	r0, #127	; 0x7f
 8000986:	f7ff ff4b 	bl	8000820 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 800098a:	2003      	movs	r0, #3
 800098c:	f7ff feec 	bl	8000768 <CS43_Enable_RightLeft>
	CS43_Start();
 8000990:	f7ff ff88 	bl	80008a4 <CS43_Start>

	HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)I2S_dummy, 4);
 8000994:	2204      	movs	r2, #4
 8000996:	4930      	ldr	r1, [pc, #192]	; (8000a58 <main+0x130>)
 8000998:	4830      	ldr	r0, [pc, #192]	; (8000a5c <main+0x134>)
 800099a:	f005 f919 	bl	8005bd0 <HAL_I2S_Transmit_DMA>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800099e:	2100      	movs	r1, #0
 80009a0:	482f      	ldr	r0, [pc, #188]	; (8000a60 <main+0x138>)
 80009a2:	f001 fcca 	bl	800233a <HAL_DAC_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80009a6:	482f      	ldr	r0, [pc, #188]	; (8000a64 <main+0x13c>)
 80009a8:	f006 fb68 	bl	800707c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009ac:	f00a ffd8 	bl	800b960 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	482c      	ldr	r0, [pc, #176]	; (8000a68 <main+0x140>)
 80009b6:	f002 faab 	bl	8002f10 <HAL_GPIO_WritePin>

		GPIO_PinState btn_states[4];
		btn_states[0] = HAL_GPIO_ReadPin(Btn0_GPIO_Port, Btn0_Pin);
 80009ba:	2101      	movs	r1, #1
 80009bc:	482b      	ldr	r0, [pc, #172]	; (8000a6c <main+0x144>)
 80009be:	f002 fa8f 	bl	8002ee0 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	463b      	mov	r3, r7
 80009c8:	701a      	strb	r2, [r3, #0]
		btn_states[1] = !HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin);
 80009ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ce:	4828      	ldr	r0, [pc, #160]	; (8000a70 <main+0x148>)
 80009d0:	f002 fa86 	bl	8002ee0 <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf0c      	ite	eq
 80009da:	2301      	moveq	r3, #1
 80009dc:	2300      	movne	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	463b      	mov	r3, r7
 80009e4:	705a      	strb	r2, [r3, #1]
		btn_states[2] = !HAL_GPIO_ReadPin(Btn2_GPIO_Port, Btn2_Pin);
 80009e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ea:	4822      	ldr	r0, [pc, #136]	; (8000a74 <main+0x14c>)
 80009ec:	f002 fa78 	bl	8002ee0 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	bf0c      	ite	eq
 80009f6:	2301      	moveq	r3, #1
 80009f8:	2300      	movne	r3, #0
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	463b      	mov	r3, r7
 8000a00:	709a      	strb	r2, [r3, #2]
		btn_states[3] = !HAL_GPIO_ReadPin(Btn3_GPIO_Port, Btn3_Pin);
 8000a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <main+0x14c>)
 8000a08:	f002 fa6a 	bl	8002ee0 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf0c      	ite	eq
 8000a12:	2301      	moveq	r3, #1
 8000a14:	2300      	movne	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, btn_states[0] || btn_states[1] || btn_states[2] || btn_states[3]);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10b      	bne.n	8000a3e <main+0x116>
 8000a26:	463b      	mov	r3, r7
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d107      	bne.n	8000a3e <main+0x116>
 8000a2e:	463b      	mov	r3, r7
 8000a30:	789b      	ldrb	r3, [r3, #2]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <main+0x116>
 8000a36:	463b      	mov	r3, r7
 8000a38:	78db      	ldrb	r3, [r3, #3]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <main+0x11a>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <main+0x11c>
 8000a42:	2300      	movs	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <main+0x148>)
 8000a4e:	f002 fa5f 	bl	8002f10 <HAL_GPIO_WritePin>
	{
 8000a52:	e7ab      	b.n	80009ac <main+0x84>
 8000a54:	20000124 	.word	0x20000124
 8000a58:	200001d8 	.word	0x200001d8
 8000a5c:	20001270 	.word	0x20001270
 8000a60:	20001214 	.word	0x20001214
 8000a64:	20001228 	.word	0x20001228
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	40020400 	.word	0x40020400

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00b fac4 	bl	800c014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <SystemClock_Config+0xcc>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a27      	ldr	r2, [pc, #156]	; (8000b44 <SystemClock_Config+0xcc>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <SystemClock_Config+0xcc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <SystemClock_Config+0xd0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <SystemClock_Config+0xd0>)
 8000ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <SystemClock_Config+0xd0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af6:	2307      	movs	r3, #7
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4618      	mov	r0, r3
 8000b00:	f005 fccc 	bl	800649c <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b0a:	f000 f9fb 	bl	8000f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	2302      	movs	r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2105      	movs	r1, #5
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f005 ff2d 	bl	800698c <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b38:	f000 f9e4 	bl	8000f04 <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3750      	adds	r7, #80	; 0x50
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_DAC_Init+0x4c>)
 8000b5c:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <MX_DAC_Init+0x50>)
 8000b5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_DAC_Init+0x4c>)
 8000b62:	f001 fbc8 	bl	80022f6 <HAL_DAC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b6c:	f000 f9ca 	bl	8000f04 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_DAC_Init+0x4c>)
 8000b80:	f001 fc52 	bl	8002428 <HAL_DAC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b8a:	f000 f9bb 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20001214 	.word	0x20001214
 8000b9c:	40007400 	.word	0x40007400

08000ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MX_I2C1_Init+0x54>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_I2C1_Init+0x58>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_I2C1_Init+0x50>)
 8000bde:	f003 ff21 	bl	8004a24 <HAL_I2C_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be8:	f000 f98c 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000124 	.word	0x20000124
 8000bf4:	40005400 	.word	0x40005400
 8000bf8:	000186a0 	.word	0x000186a0

08000bfc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <MX_I2S3_Init+0x58>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c20:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c24:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c28:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_I2S3_Init+0x54>)
 8000c3e:	f004 fe87 	bl	8005950 <HAL_I2S_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000c48:	f000 f95c 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20001270 	.word	0x20001270
 8000c54:	40003c00 	.word	0x40003c00

08000c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 70-1;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c7e:	2245      	movs	r2, #69	; 0x45
 8000c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c8a:	2219      	movs	r2, #25
 8000c8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_TIM2_Init+0x94>)
 8000c9c:	f006 f99e 	bl	8006fdc <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000ca6:	f000 f92d 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_TIM2_Init+0x94>)
 8000cb8:	f006 fb58 	bl	800736c <HAL_TIM_ConfigClockSource>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000cc2:	f000 f91f 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc6:	2320      	movs	r3, #32
 8000cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_TIM2_Init+0x94>)
 8000cd4:	f006 fd74 	bl	80077c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000cde:	f000 f911 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20001228 	.word	0x20001228

08000cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_DMA_Init+0x3c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2010      	movs	r0, #16
 8000d18:	f001 fab7 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d1c:	2010      	movs	r0, #16
 8000d1e:	f001 fad0 	bl	80022c2 <HAL_NVIC_EnableIRQ>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b4a      	ldr	r3, [pc, #296]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a45      	ldr	r2, [pc, #276]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a3e      	ldr	r2, [pc, #248]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a37      	ldr	r2, [pc, #220]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a30      	ldr	r2, [pc, #192]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <MX_GPIO_Init+0x150>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	482b      	ldr	r0, [pc, #172]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000dd8:	f002 f89a 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000de2:	4829      	ldr	r0, [pc, #164]	; (8000e88 <MX_GPIO_Init+0x158>)
 8000de4:	f002 f894 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2110      	movs	r1, #16
 8000dec:	4826      	ldr	r0, [pc, #152]	; (8000e88 <MX_GPIO_Init+0x158>)
 8000dee:	f002 f88f 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 8000df2:	2301      	movs	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <MX_GPIO_Init+0x154>)
 8000e0a:	f001 fecd 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn0_Pin */
  GPIO_InitStruct.Pin = Btn0_Pin;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn0_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481a      	ldr	r0, [pc, #104]	; (8000e8c <MX_GPIO_Init+0x15c>)
 8000e22:	f001 fec1 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn3_Pin Btn2_Pin */
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 8000e26:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <MX_GPIO_Init+0x160>)
 8000e3c:	f001 feb4 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn1_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin;
 8000e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_GPIO_Init+0x158>)
 8000e56:	f001 fea7 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin
                           AudioPower_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 8000e5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e5e:	617b      	str	r3, [r7, #20]
                          |AudioPower_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_GPIO_Init+0x158>)
 8000e74:	f001 fe98 	bl	8002ba8 <HAL_GPIO_Init>

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400

08000e94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
	 */
	if (htim->Instance == TIM2) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea4:	d122      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x58>
		uint16_t dataI2S[2];
		float val_f = wave_gen('s', counter, 440.0F) * 8000.F;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8000ef8 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000eae:	4619      	mov	r1, r3
 8000eb0:	2073      	movs	r0, #115	; 0x73
 8000eb2:	f000 fcb5 	bl	8001820 <wave_gen>
 8000eb6:	eef0 7a40 	vmov.f32	s15, s0
 8000eba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000efc <HAL_TIM_PeriodElapsedCallback+0x68>
 8000ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec2:	edc7 7a05 	vstr	s15, [r7, #20]
		int16_t val_i = (int16_t)val_f;
 8000ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ece:	ee17 3a90 	vmov	r3, s15
 8000ed2:	827b      	strh	r3, [r7, #18]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, val_i);
 8000ed4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ede:	f001 fa7e 	bl	80023de <HAL_DAC_SetValue>
		counter++;
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a02      	ldr	r2, [pc, #8]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000eea:	6013      	str	r3, [r2, #0]
	}
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000104 	.word	0x20000104
 8000ef8:	43dc0000 	.word	0x43dc0000
 8000efc:	45fa0000 	.word	0x45fa0000
 8000f00:	20001214 	.word	0x20001214

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <overdrive_pedal_init>:
#include <stdlib.h>
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 8000f10:	b490      	push	{r4, r7}
 8000f12:	b09a      	sub	sp, #104	; 0x68
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <overdrive_pedal_init+0x74>)
 8000f1c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000f20:	4613      	mov	r3, r2
 8000f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <overdrive_pedal_init+0x78>)
 8000f2c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000f30:	4613      	mov	r3, r2
 8000f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <overdrive_pedal_init+0x7c>)
 8000f3c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000f40:	4613      	mov	r3, r2
 8000f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <overdrive_pedal_init+0x74>)
 8000f4c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000f50:	4613      	mov	r3, r2
 8000f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <overdrive_pedal_init+0x80>)
 8000f5c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8000f60:	4613      	mov	r3, r2
 8000f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <overdrive_pedal_init+0x84>)
 8000f6c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8000f70:	4613      	mov	r3, r2
 8000f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000f78:	bf00      	nop
 8000f7a:	3768      	adds	r7, #104	; 0x68
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc90      	pop	{r4, r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	0800c1cc 	.word	0x0800c1cc
 8000f88:	0800c1dc 	.word	0x0800c1dc
 8000f8c:	0800c1ec 	.word	0x0800c1ec
 8000f90:	0800c1fc 	.word	0x0800c1fc
 8000f94:	0800c20c 	.word	0x0800c20c

08000f98 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fa2:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000faa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000fc2:	eeb0 1a47 	vmov.f32	s2, s14
 8000fc6:	eef0 0a67 	vmov.f32	s1, s15
 8000fca:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fce:	f000 fbab 	bl	8001728 <soft_clip>
 8000fd2:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000fdc:	eef0 0a67 	vmov.f32	s1, s15
 8000fe0:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fe4:	f000 fb70 	bl	80016c8 <hard_clip>
 8000fe8:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8000ff8:	eef0 1a47 	vmov.f32	s3, s14
 8000ffc:	eeb0 1a67 	vmov.f32	s2, s15
 8001000:	edd7 0a01 	vldr	s1, [r7, #4]
 8001004:	ed97 0a03 	vldr	s0, [r7, #12]
 8001008:	f000 fb3e 	bl	8001688 <mix>
 800100c:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	ee07 3a90 	vmov	s15, r3
}
 8001016:	eeb0 0a67 	vmov.f32	s0, s15
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 8001020:	b490      	push	{r4, r7}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <bitcrusher_rs_pedal_init+0x44>)
 800102c:	f103 0420 	add.w	r4, r3, #32
 8001030:	4613      	mov	r3, r2
 8001032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <bitcrusher_rs_pedal_init+0x48>)
 800103c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001040:	4613      	mov	r3, r2
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <bitcrusher_rs_pedal_init+0x48>)
 800104c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001050:	4613      	mov	r3, r2
 8001052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001058:	bf00      	nop
 800105a:	3738      	adds	r7, #56	; 0x38
 800105c:	46bd      	mov	sp, r7
 800105e:	bc90      	pop	{r4, r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	0800c21c 	.word	0x0800c21c
 8001068:	0800c22c 	.word	0x0800c22c

0800106c <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	ed87 0a01 	vstr	s0, [r7, #4]
 8001076:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 800107e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001086:	ee17 3a90 	vmov	r3, s15
 800108a:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 800108c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001094:	fa42 f303 	asr.w	r3, r2, r3
 8001098:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 800109a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800109e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 80010a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ac:	3b02      	subs	r3, #2
 80010ae:	2202      	movs	r2, #2
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 80010be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80010da:	eef0 1a47 	vmov.f32	s3, s14
 80010de:	eeb0 1a67 	vmov.f32	s2, s15
 80010e2:	edd7 0a01 	vldr	s1, [r7, #4]
 80010e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ea:	f000 facd 	bl	8001688 <mix>
 80010ee:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	ee07 3a90 	vmov	s15, r3
}
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 8001104:	b490      	push	{r4, r7}
 8001106:	b092      	sub	sp, #72	; 0x48
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	615a      	str	r2, [r3, #20]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <tremolo_pedal_init+0x5c>)
 8001128:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800112c:	4613      	mov	r3, r2
 800112e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <tremolo_pedal_init+0x60>)
 8001138:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800113c:	4613      	mov	r3, r2
 800113e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <tremolo_pedal_init+0x64>)
 8001148:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800114c:	4613      	mov	r3, r2
 800114e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001150:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001154:	bf00      	nop
 8001156:	3748      	adds	r7, #72	; 0x48
 8001158:	46bd      	mov	sp, r7
 800115a:	bc90      	pop	{r4, r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	0800c23c 	.word	0x0800c23c
 8001164:	0800c24c 	.word	0x0800c24c
 8001168:	0800c25c 	.word	0x0800c25c

0800116c <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	ed87 0a01 	vstr	s0, [r7, #4]
 8001176:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <tremolo_process+0x80>)
 800117a:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	461a      	mov	r2, r3
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001188:	edd7 7a03 	vldr	s15, [r7, #12]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	eeb0 0a67 	vmov.f32	s0, s15
 8001194:	4611      	mov	r1, r2
 8001196:	2073      	movs	r0, #115	; 0x73
 8001198:	f000 fb42 	bl	8001820 <wave_gen>
 800119c:	eeb0 7a40 	vmov.f32	s14, s0
 80011a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a8:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80011c2:	eef0 1a47 	vmov.f32	s3, s14
 80011c6:	eeb0 1a67 	vmov.f32	s2, s15
 80011ca:	edd7 0a01 	vldr	s1, [r7, #4]
 80011ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80011d2:	f000 fa59 	bl	8001688 <mix>
 80011d6:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	ee07 3a90 	vmov	s15, r3
}
 80011e0:	eeb0 0a67 	vmov.f32	s0, s15
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	43dc0000 	.word	0x43dc0000

080011f0 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 80011f0:	b490      	push	{r4, r7}
 80011f2:	b092      	sub	sp, #72	; 0x48
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <overdrive_sqrt_pedal_init+0x54>)
 80011fc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001200:	4613      	mov	r3, r2
 8001202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <overdrive_sqrt_pedal_init+0x58>)
 800120c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001210:	4613      	mov	r3, r2
 8001212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <overdrive_sqrt_pedal_init+0x5c>)
 800121c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001220:	4613      	mov	r3, r2
 8001222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <overdrive_sqrt_pedal_init+0x60>)
 800122c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001230:	4613      	mov	r3, r2
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001238:	bf00      	nop
 800123a:	3748      	adds	r7, #72	; 0x48
 800123c:	46bd      	mov	sp, r7
 800123e:	bc90      	pop	{r4, r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	0800c26c 	.word	0x0800c26c
 8001248:	0800c1dc 	.word	0x0800c1dc
 800124c:	0800c27c 	.word	0x0800c27c
 8001250:	0800c28c 	.word	0x0800c28c

08001254 <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	ed87 0a01 	vstr	s0, [r7, #4]
 800125e:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 8001260:	edd7 7a01 	vldr	s15, [r7, #4]
 8001264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	dd06      	ble.n	800127c <overdrive_sqrt_process+0x28>
        out = square_root(in);
 800126e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001272:	f000 faa4 	bl	80017be <square_root>
 8001276:	ed87 0a03 	vstr	s0, [r7, #12]
 800127a:	e00d      	b.n	8001298 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	eef1 7a67 	vneg.f32	s15, s15
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	f000 fa99 	bl	80017be <square_root>
 800128c:	eef0 7a40 	vmov.f32	s15, s0
 8001290:	eef1 7a67 	vneg.f32	s15, s15
 8001294:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800129e:	ed97 7a03 	vldr	s14, [r7, #12]
 80012a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a6:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80012b0:	eef0 0a67 	vmov.f32	s1, s15
 80012b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80012b8:	f000 fa06 	bl	80016c8 <hard_clip>
 80012bc:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80012cc:	eef0 1a47 	vmov.f32	s3, s14
 80012d0:	eeb0 1a67 	vmov.f32	s2, s15
 80012d4:	edd7 0a01 	vldr	s1, [r7, #4]
 80012d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80012dc:	f000 f9d4 	bl	8001688 <mix>
 80012e0:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	ee07 3a90 	vmov	s15, r3
}
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 80012f4:	b490      	push	{r4, r7}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <amplifier_pedal_init+0x34>)
 8001300:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001304:	4613      	mov	r3, r2
 8001306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <amplifier_pedal_init+0x38>)
 8001310:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001314:	4613      	mov	r3, r2
 8001316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bc90      	pop	{r4, r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	0800c29c 	.word	0x0800c29c
 800132c:	0800c1dc 	.word	0x0800c1dc

08001330 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	ed87 0a01 	vstr	s0, [r7, #4]
 800133a:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001342:	ed97 7a01 	vldr	s14, [r7, #4]
 8001346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134a:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001354:	eef0 0a67 	vmov.f32	s1, s15
 8001358:	ed97 0a03 	vldr	s0, [r7, #12]
 800135c:	f000 f9b4 	bl	80016c8 <hard_clip>
 8001360:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	ee07 3a90 	vmov	s15, r3
}
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001392:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ee07 3a90 	vmov	s15, r3
}
 800139a:	eeb0 0a67 	vmov.f32	s0, s15
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 80013a8:	b490      	push	{r4, r7}
 80013aa:	b092      	sub	sp, #72	; 0x48
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <low_pass_filter_pedal_init+0x50>)
 80013b4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80013b8:	4613      	mov	r3, r2
 80013ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <low_pass_filter_pedal_init+0x54>)
 80013c4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80013c8:	4613      	mov	r3, r2
 80013ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <low_pass_filter_pedal_init+0x58>)
 80013d4:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80013d8:	4613      	mov	r3, r2
 80013da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	33b0      	adds	r3, #176	; 0xb0
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
}
 80013ee:	bf00      	nop
 80013f0:	3748      	adds	r7, #72	; 0x48
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc90      	pop	{r4, r7}
 80013f6:	4770      	bx	lr
 80013f8:	0800c2ac 	.word	0x0800c2ac
 80013fc:	0800c1fc 	.word	0x0800c1fc
 8001400:	0800c20c 	.word	0x0800c20c

08001404 <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	ed87 0a01 	vstr	s0, [r7, #4]
 800140e:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001428:	edd7 7a03 	vldr	s15, [r7, #12]
 800142c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001430:	edd7 7a01 	vldr	s15, [r7, #4]
 8001434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001454:	eef0 1a47 	vmov.f32	s3, s14
 8001458:	eeb0 1a67 	vmov.f32	s2, s15
 800145c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001460:	ed97 0a02 	vldr	s0, [r7, #8]
 8001464:	f000 f910 	bl	8001688 <mix>
 8001468:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	ee07 3a90 	vmov	s15, r3
}
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 800147c:	b490      	push	{r4, r7}
 800147e:	b09e      	sub	sp, #120	; 0x78
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <fuzz_pedal_init+0x8c>)
 80014a0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80014a4:	4613      	mov	r3, r2
 80014a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <fuzz_pedal_init+0x90>)
 80014b0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80014b4:	4613      	mov	r3, r2
 80014b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <fuzz_pedal_init+0x94>)
 80014c0:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80014c4:	4613      	mov	r3, r2
 80014c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a11      	ldr	r2, [pc, #68]	; (8001514 <fuzz_pedal_init+0x98>)
 80014d0:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80014d4:	4613      	mov	r3, r2
 80014d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <fuzz_pedal_init+0x9c>)
 80014e0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80014e4:	4613      	mov	r3, r2
 80014e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <fuzz_pedal_init+0xa0>)
 80014f0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80014f4:	4613      	mov	r3, r2
 80014f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80014fc:	bf00      	nop
 80014fe:	3778      	adds	r7, #120	; 0x78
 8001500:	46bd      	mov	sp, r7
 8001502:	bc90      	pop	{r4, r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	0800c1cc 	.word	0x0800c1cc
 800150c:	0800c1dc 	.word	0x0800c1dc
 8001510:	0800c2bc 	.word	0x0800c2bc
 8001514:	0800c2cc 	.word	0x0800c2cc
 8001518:	0800c1fc 	.word	0x0800c1fc
 800151c:	0800c20c 	.word	0x0800c20c

08001520 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	ed87 0a01 	vstr	s0, [r7, #4]
 800152a:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001532:	ed97 7a01 	vldr	s14, [r7, #4]
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154a:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001552:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 8001554:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <fuzz_process+0x130>)
 8001556:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 8001558:	edd7 0a06 	vldr	s1, [r7, #24]
 800155c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001560:	f000 f8b2 	bl	80016c8 <hard_clip>
 8001564:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 8001568:	ed97 7a07 	vldr	s14, [r7, #28]
 800156c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001570:	eeb4 7a67 	vcmp.f32	s14, s15
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	d11e      	bne.n	80015b8 <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001582:	edd7 7a04 	vldr	s15, [r7, #16]
 8001586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	4619      	mov	r1, r3
 8001590:	2073      	movs	r0, #115	; 0x73
 8001592:	f000 f945 	bl	8001820 <wave_gen>
 8001596:	eef0 7a40 	vmov.f32	s15, s0
 800159a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800159e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80015ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b2:	edc7 7a07 	vstr	s15, [r7, #28]
 80015b6:	e02c      	b.n	8001612 <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 80015b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015bc:	eef1 7a67 	vneg.f32	s15, s15
 80015c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80015cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	d11d      	bne.n	8001612 <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	ed97 7a03 	vldr	s14, [r7, #12]
 80015de:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	4619      	mov	r1, r3
 80015ec:	2073      	movs	r0, #115	; 0x73
 80015ee:	f000 f917 	bl	8001820 <wave_gen>
 80015f2:	eef0 7a40 	vmov.f32	s15, s0
 80015f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001606:	ed97 7a07 	vldr	s14, [r7, #28]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001628:	eef0 1a47 	vmov.f32	s3, s14
 800162c:	eeb0 1a67 	vmov.f32	s2, s15
 8001630:	edd7 0a01 	vldr	s1, [r7, #4]
 8001634:	ed97 0a07 	vldr	s0, [r7, #28]
 8001638:	f000 f826 	bl	8001688 <mix>
 800163c:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	ee07 3a90 	vmov	s15, r3
}
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	43dc0000 	.word	0x43dc0000

08001654 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
    return;
 800165c:	bf00      	nop
}
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001672:	6038      	str	r0, [r7, #0]
    return in;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	ee07 3a90 	vmov	s15, r3
}
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001692:	edc7 0a02 	vstr	s1, [r7, #8]
 8001696:	ed87 1a01 	vstr	s2, [r7, #4]
 800169a:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 800169e:	ed97 7a03 	vldr	s14, [r7, #12]
 80016a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016aa:	edd7 6a02 	vldr	s13, [r7, #8]
 80016ae:	edd7 7a00 	vldr	s15, [r7]
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80016d2:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 80016d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016da:	edd7 7a00 	vldr	s15, [r7]
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd02      	ble.n	80016ee <hard_clip+0x26>
        return clip_threshold;
 80016e8:	edd7 7a00 	vldr	s15, [r7]
 80016ec:	e015      	b.n	800171a <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 80016ee:	edd7 7a00 	vldr	s15, [r7]
 80016f2:	eef1 7a67 	vneg.f32	s15, s15
 80016f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d508      	bpl.n	8001716 <hard_clip+0x4e>
        return -clip_threshold - 1;
 8001704:	edd7 7a00 	vldr	s15, [r7]
 8001708:	eef1 7a67 	vneg.f32	s15, s15
 800170c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001714:	e001      	b.n	800171a <hard_clip+0x52>
    }
    return in;
 8001716:	edd7 7a01 	vldr	s15, [r7, #4]
}
 800171a:	eeb0 0a67 	vmov.f32	s0, s15
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001732:	edc7 0a02 	vstr	s1, [r7, #8]
 8001736:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 800173a:	ed97 7a03 	vldr	s14, [r7, #12]
 800173e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	dd10      	ble.n	800176e <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 800174c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001750:	edd7 7a02 	vldr	s15, [r7, #8]
 8001754:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001758:	ed97 7a01 	vldr	s14, [r7, #4]
 800175c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001760:	ed97 7a02 	vldr	s14, [r7, #8]
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	edc7 7a05 	vstr	s15, [r7, #20]
 800176c:	e01d      	b.n	80017aa <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 800176e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001772:	eef1 7a67 	vneg.f32	s15, s15
 8001776:	ed97 7a03 	vldr	s14, [r7, #12]
 800177a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	d510      	bpl.n	80017a6 <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 8001784:	ed97 7a03 	vldr	s14, [r7, #12]
 8001788:	edd7 7a02 	vldr	s15, [r7, #8]
 800178c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001790:	edd7 7a01 	vldr	s15, [r7, #4]
 8001794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001798:	edd7 7a02 	vldr	s15, [r7, #8]
 800179c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a0:	edc7 7a05 	vstr	s15, [r7, #20]
 80017a4:	e001      	b.n	80017aa <soft_clip+0x82>
    } else {
        out = in;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	617b      	str	r3, [r7, #20]
    }
    return out;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	ee07 3a90 	vmov	s15, r3
}
 80017b0:	eeb0 0a67 	vmov.f32	s0, s15
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <square_root>:

float square_root(float in) {
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 80017c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d4:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	72fb      	strb	r3, [r7, #11]
 80017dc:	e012      	b.n	8001804 <square_root+0x46>
        out = 0.5F * (out + (in / out));
 80017de:	edd7 6a01 	vldr	s13, [r7, #4]
 80017e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017fa:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 80017fe:	7afb      	ldrb	r3, [r7, #11]
 8001800:	3301      	adds	r3, #1
 8001802:	72fb      	strb	r3, [r7, #11]
 8001804:	7afb      	ldrb	r3, [r7, #11]
 8001806:	2b07      	cmp	r3, #7
 8001808:	d9e9      	bls.n	80017de <square_root+0x20>
    }
    return out;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	ee07 3a90 	vmov	s15, r3
}
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 8001820:	b580      	push	{r7, lr}
 8001822:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001826:	af00      	add	r7, sp, #0
 8001828:	4602      	mov	r2, r0
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	6019      	str	r1, [r3, #0]
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	ed83 0a00 	vstr	s0, [r3]
 8001836:	f107 030f 	add.w	r3, r7, #15
 800183a:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4a2c      	ldr	r2, [pc, #176]	; (80018f4 <wave_gen+0xd4>)
 8001842:	4618      	mov	r0, r3
 8001844:	4611      	mov	r1, r2
 8001846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184a:	461a      	mov	r2, r3
 800184c:	f00a fbd4 	bl	800bff8 <memcpy>
    float period_f = 48000.F / tone;
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	eddf 6a29 	vldr	s13, [pc, #164]	; 80018f8 <wave_gen+0xd8>
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185e:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 8001862:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8001866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186a:	ee17 3a90 	vmov	r3, s15
 800186e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 8001888:	f107 030f 	add.w	r3, r7, #15
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b73      	cmp	r3, #115	; 0x73
 8001890:	d118      	bne.n	80018c4 <wave_gen+0xa4>
        if (table_index <= 127) {
 8001892:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001896:	2b7f      	cmp	r3, #127	; 0x7f
 8001898:	d808      	bhi.n	80018ac <wave_gen+0x8c>
            return sin_table[table_index];
 800189a:	f107 0214 	add.w	r2, r7, #20
 800189e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	e01c      	b.n	80018e6 <wave_gen+0xc6>
        } else {
            return -sin_table[table_index - 128];
 80018ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80018b0:	3b80      	subs	r3, #128	; 0x80
 80018b2:	f107 0214 	add.w	r2, r7, #20
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	eef1 7a67 	vneg.f32	s15, s15
 80018c2:	e010      	b.n	80018e6 <wave_gen+0xc6>
        }
    } else if (t == 'q') {
 80018c4:	f107 030f 	add.w	r3, r7, #15
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b71      	cmp	r3, #113	; 0x71
 80018cc:	d109      	bne.n	80018e2 <wave_gen+0xc2>
        if (table_index <= 127) {
 80018ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80018d2:	2b7f      	cmp	r3, #127	; 0x7f
 80018d4:	d802      	bhi.n	80018dc <wave_gen+0xbc>
            return -1.F;
 80018d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80018da:	e004      	b.n	80018e6 <wave_gen+0xc6>
        } else {
            return 1.F;
 80018dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80018e0:	e001      	b.n	80018e6 <wave_gen+0xc6>
        }
    } else {
        return 0;
 80018e2:	eddf 7a06 	vldr	s15, [pc, #24]	; 80018fc <wave_gen+0xdc>
    }
}
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	0800c2dc 	.word	0x0800c2dc
 80018f8:	473b8000 	.word	0x473b8000
 80018fc:	00000000 	.word	0x00000000

08001900 <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b07      	cmp	r3, #7
 8001918:	f200 80dd 	bhi.w	8001ad6 <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	21c8      	movs	r1, #200	; 0xc8
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	33c4      	adds	r3, #196	; 0xc4
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d113      	bne.n	8001962 <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 800193a:	7bbb      	ldrb	r3, [r7, #14]
 800193c:	22c8      	movs	r2, #200	; 0xc8
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	3304      	adds	r3, #4
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fcd3 	bl	80012f4 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	21c8      	movs	r1, #200	; 0xc8
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	33c8      	adds	r3, #200	; 0xc8
 800195c:	4a60      	ldr	r2, [pc, #384]	; (8001ae0 <pedalboard_append+0x1e0>)
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e0b3      	b.n	8001aca <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d113      	bne.n	8001990 <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	22c8      	movs	r2, #200	; 0xc8
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	3304      	adds	r3, #4
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fb52 	bl	8001020 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	21c8      	movs	r1, #200	; 0xc8
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	33c8      	adds	r3, #200	; 0xc8
 800198a:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <pedalboard_append+0x1e4>)
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e09c      	b.n	8001aca <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d113      	bne.n	80019be <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	22c8      	movs	r2, #200	; 0xc8
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	3304      	adds	r3, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fce5 	bl	8001374 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	21c8      	movs	r1, #200	; 0xc8
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	33c8      	adds	r3, #200	; 0xc8
 80019b8:	4a4b      	ldr	r2, [pc, #300]	; (8001ae8 <pedalboard_append+0x1e8>)
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e085      	b.n	8001aca <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d113      	bne.n	80019ec <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	22c8      	movs	r2, #200	; 0xc8
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd52 	bl	800147c <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	21c8      	movs	r1, #200	; 0xc8
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	33c8      	adds	r3, #200	; 0xc8
 80019e6:	4a41      	ldr	r2, [pc, #260]	; (8001aec <pedalboard_append+0x1ec>)
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e06e      	b.n	8001aca <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d113      	bne.n	8001a1a <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	22c8      	movs	r2, #200	; 0xc8
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	3304      	adds	r3, #4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fcd1 	bl	80013a8 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	21c8      	movs	r1, #200	; 0xc8
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	33c8      	adds	r3, #200	; 0xc8
 8001a14:	4a36      	ldr	r2, [pc, #216]	; (8001af0 <pedalboard_append+0x1f0>)
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e057      	b.n	8001aca <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d113      	bne.n	8001a48 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	22c8      	movs	r2, #200	; 0xc8
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fa6e 	bl	8000f10 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8001a34:	7bbb      	ldrb	r3, [r7, #14]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	21c8      	movs	r1, #200	; 0xc8
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	33c8      	adds	r3, #200	; 0xc8
 8001a42:	4a2c      	ldr	r2, [pc, #176]	; (8001af4 <pedalboard_append+0x1f4>)
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e040      	b.n	8001aca <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d113      	bne.n	8001a76 <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 8001a4e:	7bbb      	ldrb	r3, [r7, #14]
 8001a50:	22c8      	movs	r2, #200	; 0xc8
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fbc7 	bl	80011f0 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	21c8      	movs	r1, #200	; 0xc8
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	33c8      	adds	r3, #200	; 0xc8
 8001a70:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <pedalboard_append+0x1f8>)
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e029      	b.n	8001aca <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d113      	bne.n	8001aa4 <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001a7c:	7bbb      	ldrb	r3, [r7, #14]
 8001a7e:	22c8      	movs	r2, #200	; 0xc8
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	3304      	adds	r3, #4
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fb3a 	bl	8001104 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8001a90:	7bbb      	ldrb	r3, [r7, #14]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	21c8      	movs	r1, #200	; 0xc8
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	33c8      	adds	r3, #200	; 0xc8
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <pedalboard_append+0x1fc>)
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e012      	b.n	8001aca <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	22c8      	movs	r2, #200	; 0xc8
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fdce 	bl	8001654 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	21c8      	movs	r1, #200	; 0xc8
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	33c8      	adds	r3, #200	; 0xc8
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <pedalboard_append+0x200>)
 8001ac8:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	701a      	strb	r2, [r3, #0]
    }
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	08001331 	.word	0x08001331
 8001ae4:	0800106d 	.word	0x0800106d
 8001ae8:	08001389 	.word	0x08001389
 8001aec:	08001521 	.word	0x08001521
 8001af0:	08001405 	.word	0x08001405
 8001af4:	08000f99 	.word	0x08000f99
 8001af8:	08001255 	.word	0x08001255
 8001afc:	0800116d 	.word	0x0800116d
 8001b00:	08001669 	.word	0x08001669

08001b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800

08001b54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <HAL_DAC_MspInit+0x7c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d127      	bne.n	8001bc6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_DAC_MspInit+0x80>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <HAL_DAC_MspInit+0x80>)
 8001b80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_DAC_MspInit+0x80>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_DAC_MspInit+0x80>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_DAC_MspInit+0x80>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_DAC_MspInit+0x80>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bae:	2310      	movs	r3, #16
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <HAL_DAC_MspInit+0x84>)
 8001bc2:	f000 fff1 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40007400 	.word	0x40007400
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_I2C_MspInit+0x84>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12c      	bne.n	8001c58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001c1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c20:	2312      	movs	r3, #18
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	480c      	ldr	r0, [pc, #48]	; (8001c68 <HAL_I2C_MspInit+0x8c>)
 8001c38:	f000 ffb6 	bl	8002ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_I2C_MspInit+0x88>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40005400 	.word	0x40005400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <HAL_I2S_MspInit+0x164>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f040 8095 	bne.w	8001dc8 <HAL_I2S_MspInit+0x15c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001ca2:	23c0      	movs	r3, #192	; 0xc0
 8001ca4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f005 f854 	bl	8006d5c <HAL_RCCEx_PeriphCLKConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001cba:	f7ff f923 	bl	8000f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a43      	ldr	r2, [pc, #268]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a3c      	ldr	r2, [pc, #240]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a35      	ldr	r2, [pc, #212]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_I2S_MspInit+0x168>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001d12:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d24:	2306      	movs	r3, #6
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	482a      	ldr	r0, [pc, #168]	; (8001dd8 <HAL_I2S_MspInit+0x16c>)
 8001d30:	f000 ff3a 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d46:	2306      	movs	r3, #6
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4822      	ldr	r0, [pc, #136]	; (8001ddc <HAL_I2S_MspInit+0x170>)
 8001d52:	f000 ff29 	bl	8002ba8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d58:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <HAL_I2S_MspInit+0x178>)
 8001d5a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d64:	2240      	movs	r2, #64	; 0x40
 8001d66:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d74:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d7c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d84:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d96:	2204      	movs	r2, #4
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001dae:	f000 fb8b 	bl	80024c8 <HAL_DMA_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001db8:	f7ff f8a4 	bl	8000f04 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_I2S_MspInit+0x174>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3738      	adds	r7, #56	; 0x38
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40003c00 	.word	0x40003c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	20000178 	.word	0x20000178
 8001de4:	40026088 	.word	0x40026088

08001de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d115      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_TIM_Base_MspInit+0x48>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_TIM_Base_MspInit+0x48>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_TIM_Base_MspInit+0x48>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	201c      	movs	r0, #28
 8001e1c:	f000 fa35 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e20:	201c      	movs	r0, #28
 8001e22:	f000 fa4e 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <NMI_Handler+0x4>

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 f8e4 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <DMA1_Stream5_IRQHandler+0x10>)
 8001e8e:	f000 fc21 	bl	80026d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000178 	.word	0x20000178

08001e9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM2_IRQHandler+0x10>)
 8001ea2:	f005 f95b 	bl	800715c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20001228 	.word	0x20001228

08001eb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <OTG_FS_IRQHandler+0x10>)
 8001eb6:	f001 faaf 	bl	8003418 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20003700 	.word	0x20003700

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f00a f846 	bl	800bf84 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20020000 	.word	0x20020000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	20000108 	.word	0x20000108
 8001f2c:	20003a18 	.word	0x20003a18

08001f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f5a:	490e      	ldr	r1, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f70:	4c0b      	ldr	r4, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f7e:	f7ff ffd7 	bl	8001f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f00a f805 	bl	800bf90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7fe fccf 	bl	8000928 <main>
  bx  lr    
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001f98:	0800c524 	.word	0x0800c524
  ldr r2, =_sbss
 8001f9c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001fa0:	20003a14 	.word	0x20003a14

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_Init+0x40>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_Init+0x40>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_Init+0x40>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 f94f 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	200f      	movs	r0, #15
 8001fd8:	f000 f808 	bl	8001fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff fd92 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f967 	bl	80022de <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002028:	f000 f92f 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_InitTick+0x5c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000000 	.word	0x20000000
 8002044:	20000008 	.word	0x20000008
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000008 	.word	0x20000008
 8002070:	200012b8 	.word	0x200012b8

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	200012b8 	.word	0x200012b8

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_Delay+0x44>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000008 	.word	0x20000008

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff29 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff3e 	bl	800211c <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff31 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e014      	b.n	8002332 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	791b      	ldrb	r3, [r3, #4]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fc1b 	bl	8001b54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	795b      	ldrb	r3, [r3, #5]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_DAC_Start+0x16>
 800234c:	2302      	movs	r3, #2
 800234e:	e040      	b.n	80023d2 <HAL_DAC_Start+0x98>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2202      	movs	r2, #2
 800235a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2201      	movs	r2, #1
 800236a:	409a      	lsls	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002384:	2b3c      	cmp	r3, #60	; 0x3c
 8002386:	d11d      	bne.n	80023c4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	e014      	b.n	80023c4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	213c      	movs	r1, #60	; 0x3c
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d107      	bne.n	80023c4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0202 	orr.w	r2, r2, #2
 80023c2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	3308      	adds	r3, #8
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e004      	b.n	8002412 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	3314      	adds	r3, #20
 8002410:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	461a      	mov	r2, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	795b      	ldrb	r3, [r3, #5]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_DAC_ConfigChannel+0x18>
 800243c:	2302      	movs	r3, #2
 800243e:	e03c      	b.n	80024ba <HAL_DAC_ConfigChannel+0x92>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2202      	movs	r2, #2
 800244a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4013      	ands	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	22c0      	movs	r2, #192	; 0xc0
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff fdce 	bl	8002074 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e099      	b.n	8002618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002504:	e00f      	b.n	8002526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002506:	f7ff fdb5 	bl	8002074 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b05      	cmp	r3, #5
 8002512:	d908      	bls.n	8002526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2203      	movs	r2, #3
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e078      	b.n	8002618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e8      	bne.n	8002506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_DMA_Init+0x158>)
 8002540:	4013      	ands	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4313      	orrs	r3, r2
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f023 0307 	bic.w	r3, r3, #7
 80025a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d117      	bne.n	80025ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fa6f 	bl	8002ab0 <DMA_CheckFifoParam>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025e6:	2301      	movs	r3, #1
 80025e8:	e016      	b.n	8002618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa26 	bl	8002a44 <DMA_CalcBaseAndBitshift>
 80025f8:	4603      	mov	r3, r0
 80025fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	223f      	movs	r2, #63	; 0x3f
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	f010803f 	.word	0xf010803f

08002624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_DMA_Start_IT+0x26>
 8002646:	2302      	movs	r3, #2
 8002648:	e040      	b.n	80026cc <HAL_DMA_Start_IT+0xa8>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d12f      	bne.n	80026be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f9b8 	bl	80029e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	223f      	movs	r2, #63	; 0x3f
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0216 	orr.w	r2, r2, #22
 8002692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e005      	b.n	80026ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e0:	4b92      	ldr	r3, [pc, #584]	; (800292c <HAL_DMA_IRQHandler+0x258>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a92      	ldr	r2, [pc, #584]	; (8002930 <HAL_DMA_IRQHandler+0x25c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2208      	movs	r2, #8
 8002700:	409a      	lsls	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2208      	movs	r2, #8
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d012      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2204      	movs	r2, #4
 800277c:	409a      	lsls	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2204      	movs	r2, #4
 800279a:	409a      	lsls	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2210      	movs	r2, #16
 80027b2:	409a      	lsls	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d043      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03c      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2210      	movs	r2, #16
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d018      	beq.n	8002816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
 8002802:	e01f      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e016      	b.n	8002844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0208 	bic.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2220      	movs	r2, #32
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 808e 	beq.w	8002972 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8086 	beq.w	8002972 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2220      	movs	r2, #32
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b05      	cmp	r3, #5
 800287c:	d136      	bne.n	80028ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0216 	bic.w	r2, r2, #22
 800288c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_DMA_IRQHandler+0x1da>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0208 	bic.w	r2, r2, #8
 80028bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	223f      	movs	r2, #63	; 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07d      	beq.n	80029de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
        }
        return;
 80028ea:	e078      	b.n	80029de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01c      	beq.n	8002934 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	2b00      	cmp	r3, #0
 800290e:	d030      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	4798      	blx	r3
 8002918:	e02b      	b.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d027      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e022      	b.n	8002972 <HAL_DMA_IRQHandler+0x29e>
 800292c:	20000000 	.word	0x20000000
 8002930:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0210 	bic.w	r2, r2, #16
 8002950:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	2b00      	cmp	r3, #0
 8002978:	d032      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d022      	beq.n	80029cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2205      	movs	r2, #5
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d307      	bcc.n	80029ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f2      	bne.n	800299e <HAL_DMA_IRQHandler+0x2ca>
 80029b8:	e000      	b.n	80029bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029de:	bf00      	nop
    }
  }
}
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	d108      	bne.n	8002a28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a26:	e007      	b.n	8002a38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3b10      	subs	r3, #16
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <DMA_CalcBaseAndBitshift+0x68>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d909      	bls.n	8002a86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	1d1a      	adds	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	659a      	str	r2, [r3, #88]	; 0x58
 8002a84:	e007      	b.n	8002a96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	aaaaaaab 	.word	0xaaaaaaab
 8002aac:	0800c4f8 	.word	0x0800c4f8

08002ab0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11f      	bne.n	8002b0a <DMA_CheckFifoParam+0x5a>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d856      	bhi.n	8002b7e <DMA_CheckFifoParam+0xce>
 8002ad0:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <DMA_CheckFifoParam+0x28>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002afb 	.word	0x08002afb
 8002ae0:	08002ae9 	.word	0x08002ae9
 8002ae4:	08002b7f 	.word	0x08002b7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d046      	beq.n	8002b82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e043      	b.n	8002b82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b02:	d140      	bne.n	8002b86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b08:	e03d      	b.n	8002b86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b12:	d121      	bne.n	8002b58 <DMA_CheckFifoParam+0xa8>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d837      	bhi.n	8002b8a <DMA_CheckFifoParam+0xda>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <DMA_CheckFifoParam+0x70>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b37 	.word	0x08002b37
 8002b28:	08002b31 	.word	0x08002b31
 8002b2c:	08002b49 	.word	0x08002b49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e030      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d025      	beq.n	8002b8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b46:	e022      	b.n	8002b8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b50:	d11f      	bne.n	8002b92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b56:	e01c      	b.n	8002b92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d903      	bls.n	8002b66 <DMA_CheckFifoParam+0xb6>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d003      	beq.n	8002b6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b64:	e018      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6a:	e015      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7c:	e00b      	b.n	8002b96 <DMA_CheckFifoParam+0xe6>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e00a      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e008      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e006      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e004      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e002      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b92:	bf00      	nop
 8002b94:	e000      	b.n	8002b98 <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
    }
  } 
  
  return status; 
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e16b      	b.n	8002e9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 815a 	bne.w	8002e96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d130      	bne.n	8002c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0201 	and.w	r2, r3, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d017      	beq.n	8002c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d123      	bne.n	8002cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80b4 	beq.w	8002e96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b60      	ldr	r3, [pc, #384]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a5f      	ldr	r2, [pc, #380]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4a:	4a5b      	ldr	r2, [pc, #364]	; (8002eb8 <HAL_GPIO_Init+0x310>)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <HAL_GPIO_Init+0x314>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d02b      	beq.n	8002dce <HAL_GPIO_Init+0x226>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a51      	ldr	r2, [pc, #324]	; (8002ec0 <HAL_GPIO_Init+0x318>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d025      	beq.n	8002dca <HAL_GPIO_Init+0x222>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a50      	ldr	r2, [pc, #320]	; (8002ec4 <HAL_GPIO_Init+0x31c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01f      	beq.n	8002dc6 <HAL_GPIO_Init+0x21e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4f      	ldr	r2, [pc, #316]	; (8002ec8 <HAL_GPIO_Init+0x320>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x21a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4e      	ldr	r2, [pc, #312]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x216>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4d      	ldr	r2, [pc, #308]	; (8002ed0 <HAL_GPIO_Init+0x328>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x212>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4c      	ldr	r2, [pc, #304]	; (8002ed4 <HAL_GPIO_Init+0x32c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x20e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4b      	ldr	r2, [pc, #300]	; (8002ed8 <HAL_GPIO_Init+0x330>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x20a>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00e      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002db2:	2308      	movs	r3, #8
 8002db4:	e00c      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002db6:	2306      	movs	r3, #6
 8002db8:	e00a      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x310>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e12:	4a32      	ldr	r2, [pc, #200]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e18:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e90:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f ae90 	bls.w	8002bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40013c00 	.word	0x40013c00

08002ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e001      	b.n	8002f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f44:	b08f      	sub	sp, #60	; 0x3c
 8002f46:	af0a      	add	r7, sp, #40	; 0x28
 8002f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e054      	b.n	8002ffe <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f008 fd2e 	bl	800b9d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2203      	movs	r2, #3
 8002f78:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 fd16 	bl	80079c4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	687e      	ldr	r6, [r7, #4]
 8002fa0:	466d      	mov	r5, sp
 8002fa2:	f106 0410 	add.w	r4, r6, #16
 8002fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fb6:	1d33      	adds	r3, r6, #4
 8002fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fba:	6838      	ldr	r0, [r7, #0]
 8002fbc:	f004 fc90 	bl	80078e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f004 fd0d 	bl	80079e6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	687e      	ldr	r6, [r7, #4]
 8002fd4:	466d      	mov	r5, sp
 8002fd6:	f106 0410 	add.w	r4, r6, #16
 8002fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fea:	1d33      	adds	r3, r6, #4
 8002fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fee:	6838      	ldr	r0, [r7, #0]
 8002ff0:	f004 fe74 	bl	8007cdc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003006 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003006:	b590      	push	{r4, r7, lr}
 8003008:	b089      	sub	sp, #36	; 0x24
 800300a:	af04      	add	r7, sp, #16
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	4608      	mov	r0, r1
 8003010:	4611      	mov	r1, r2
 8003012:	461a      	mov	r2, r3
 8003014:	4603      	mov	r3, r0
 8003016:	70fb      	strb	r3, [r7, #3]
 8003018:	460b      	mov	r3, r1
 800301a:	70bb      	strb	r3, [r7, #2]
 800301c:	4613      	mov	r3, r2
 800301e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_HCD_HC_Init+0x28>
 800302a:	2302      	movs	r3, #2
 800302c:	e076      	b.n	800311c <HAL_HCD_HC_Init+0x116>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	333d      	adds	r3, #61	; 0x3d
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3338      	adds	r3, #56	; 0x38
 8003056:	787a      	ldrb	r2, [r7, #1]
 8003058:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3340      	adds	r3, #64	; 0x40
 8003068:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800306a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	3339      	adds	r3, #57	; 0x39
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	333f      	adds	r3, #63	; 0x3f
 800308c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003090:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	78ba      	ldrb	r2, [r7, #2]
 8003096:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800309a:	b2d0      	uxtb	r0, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	333a      	adds	r3, #58	; 0x3a
 80030a8:	4602      	mov	r2, r0
 80030aa:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80030ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da09      	bge.n	80030c8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	333b      	adds	r3, #59	; 0x3b
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e008      	b.n	80030da <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	333b      	adds	r3, #59	; 0x3b
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	333c      	adds	r3, #60	; 0x3c
 80030e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030ec:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	787c      	ldrb	r4, [r7, #1]
 80030f4:	78ba      	ldrb	r2, [r7, #2]
 80030f6:	78f9      	ldrb	r1, [r7, #3]
 80030f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030fa:	9302      	str	r3, [sp, #8]
 80030fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	4623      	mov	r3, r4
 800310a:	f004 ff61 	bl	8007fd0 <USB_HC_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bd90      	pop	{r4, r7, pc}

08003124 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_HCD_HC_Halt+0x1e>
 800313e:	2302      	movs	r3, #2
 8003140:	e00f      	b.n	8003162 <HAL_HCD_HC_Halt+0x3e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f005 f99d 	bl	8008492 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	4608      	mov	r0, r1
 8003176:	4611      	mov	r1, r2
 8003178:	461a      	mov	r2, r3
 800317a:	4603      	mov	r3, r0
 800317c:	70fb      	strb	r3, [r7, #3]
 800317e:	460b      	mov	r3, r1
 8003180:	70bb      	strb	r3, [r7, #2]
 8003182:	4613      	mov	r3, r2
 8003184:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	333b      	adds	r3, #59	; 0x3b
 8003194:	78ba      	ldrb	r2, [r7, #2]
 8003196:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	333f      	adds	r3, #63	; 0x3f
 80031a6:	787a      	ldrb	r2, [r7, #1]
 80031a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80031aa:	7c3b      	ldrb	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d112      	bne.n	80031d6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3342      	adds	r3, #66	; 0x42
 80031be:	2203      	movs	r2, #3
 80031c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	333d      	adds	r3, #61	; 0x3d
 80031d0:	7f3a      	ldrb	r2, [r7, #28]
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e008      	b.n	80031e8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3342      	adds	r3, #66	; 0x42
 80031e4:	2202      	movs	r2, #2
 80031e6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	f200 80c6 	bhi.w	800337c <HAL_HCD_HC_SubmitRequest+0x210>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	08003209 	.word	0x08003209
 80031fc:	08003369 	.word	0x08003369
 8003200:	0800326d 	.word	0x0800326d
 8003204:	080032eb 	.word	0x080032eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003208:	7c3b      	ldrb	r3, [r7, #16]
 800320a:	2b01      	cmp	r3, #1
 800320c:	f040 80b8 	bne.w	8003380 <HAL_HCD_HC_SubmitRequest+0x214>
 8003210:	78bb      	ldrb	r3, [r7, #2]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 80b4 	bne.w	8003380 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003218:	8b3b      	ldrh	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d108      	bne.n	8003230 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	3355      	adds	r3, #85	; 0x55
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3355      	adds	r3, #85	; 0x55
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3342      	adds	r3, #66	; 0x42
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003256:	e093      	b.n	8003380 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3342      	adds	r3, #66	; 0x42
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]
      break;
 800326a:	e089      	b.n	8003380 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800326c:	78bb      	ldrb	r3, [r7, #2]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d11d      	bne.n	80032ae <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3355      	adds	r3, #85	; 0x55
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3342      	adds	r3, #66	; 0x42
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003298:	e073      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3342      	adds	r3, #66	; 0x42
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]
      break;
 80032ac:	e069      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3354      	adds	r3, #84	; 0x54
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	212c      	movs	r1, #44	; 0x2c
 80032c8:	fb01 f303 	mul.w	r3, r1, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	3342      	adds	r3, #66	; 0x42
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
      break;
 80032d4:	e055      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	212c      	movs	r1, #44	; 0x2c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	3342      	adds	r3, #66	; 0x42
 80032e4:	2202      	movs	r2, #2
 80032e6:	701a      	strb	r2, [r3, #0]
      break;
 80032e8:	e04b      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80032ea:	78bb      	ldrb	r3, [r7, #2]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11d      	bne.n	800332c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3355      	adds	r3, #85	; 0x55
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3342      	adds	r3, #66	; 0x42
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003316:	e034      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3342      	adds	r3, #66	; 0x42
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
      break;
 800332a:	e02a      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3354      	adds	r3, #84	; 0x54
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3342      	adds	r3, #66	; 0x42
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
      break;
 8003352:	e016      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3342      	adds	r3, #66	; 0x42
 8003362:	2202      	movs	r2, #2
 8003364:	701a      	strb	r2, [r3, #0]
      break;
 8003366:	e00c      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	3342      	adds	r3, #66	; 0x42
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
      break;
 800337a:	e002      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800337c:	bf00      	nop
 800337e:	e000      	b.n	8003382 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003380:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3344      	adds	r3, #68	; 0x44
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	8b3a      	ldrh	r2, [r7, #24]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	202c      	movs	r0, #44	; 0x2c
 800339c:	fb00 f303 	mul.w	r3, r0, r3
 80033a0:	440b      	add	r3, r1
 80033a2:	334c      	adds	r3, #76	; 0x4c
 80033a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	3360      	adds	r3, #96	; 0x60
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3350      	adds	r3, #80	; 0x50
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3339      	adds	r3, #57	; 0x39
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3361      	adds	r3, #97	; 0x61
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	222c      	movs	r2, #44	; 0x2c
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	3338      	adds	r3, #56	; 0x38
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	18d1      	adds	r1, r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	f004 fef0 	bl	80081ec <USB_HC_StartXfer>
 800340c:	4603      	mov	r3, r0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop

08003418 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fc13 	bl	8007c5a <USB_GetMode>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	f040 80f6 	bne.w	8003628 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fbf7 	bl	8007c34 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80ec 	beq.w	8003626 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f004 fbee 	bl	8007c34 <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003462:	d104      	bne.n	800346e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800346c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f004 fbde 	bl	8007c34 <USB_ReadInterrupts>
 8003478:	4603      	mov	r3, r0
 800347a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003482:	d104      	bne.n	800348e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800348c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f004 fbce 	bl	8007c34 <USB_ReadInterrupts>
 8003498:	4603      	mov	r3, r0
 800349a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800349e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a2:	d104      	bne.n	80034ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fbbe 	bl	8007c34 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d103      	bne.n	80034ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2202      	movs	r2, #2
 80034c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 fbb0 	bl	8007c34 <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034de:	d11c      	bne.n	800351a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80034fa:	2110      	movs	r1, #16
 80034fc:	6938      	ldr	r0, [r7, #16]
 80034fe:	f004 fabf 	bl	8007a80 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003502:	6938      	ldr	r0, [r7, #16]
 8003504:	f004 fae0 	bl	8007ac8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f004 fc98 	bl	8007e44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f008 fad9 	bl	800bacc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f004 fb88 	bl	8007c34 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352e:	d102      	bne.n	8003536 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f001 fa03 	bl	800493c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fb7a 	bl	8007c34 <USB_ReadInterrupts>
 8003540:	4603      	mov	r3, r0
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	d106      	bne.n	8003558 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f008 faa2 	bl	800ba94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2208      	movs	r2, #8
 8003556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f004 fb69 	bl	8007c34 <USB_ReadInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b10      	cmp	r3, #16
 800356a:	d101      	bne.n	8003570 <HAL_HCD_IRQHandler+0x158>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_HCD_IRQHandler+0x15a>
 8003570:	2300      	movs	r3, #0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0210 	bic.w	r2, r2, #16
 8003584:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f001 f906 	bl	8004798 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0210 	orr.w	r2, r2, #16
 800359a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 fb47 	bl	8007c34 <USB_ReadInterrupts>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b0:	d13a      	bne.n	8003628 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 ff5a 	bl	8008470 <USB_HC_ReadInterrupt>
 80035bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	e025      	b.n	8003610 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d018      	beq.n	800360a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ee:	d106      	bne.n	80035fe <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8ab 	bl	8003752 <HCD_HC_IN_IRQHandler>
 80035fc:	e005      	b.n	800360a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fcc6 	bl	8003f96 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3301      	adds	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d3d4      	bcc.n	80035c4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003622:	615a      	str	r2, [r3, #20]
 8003624:	e000      	b.n	8003628 <HAL_HCD_IRQHandler+0x210>
      return;
 8003626:	bf00      	nop
    }
  }
}
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_HCD_Start+0x16>
 8003640:	2302      	movs	r3, #2
 8003642:	e013      	b.n	800366c <HAL_HCD_Start+0x3e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	4618      	mov	r0, r3
 8003654:	f004 fc5a 	bl	8007f0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f004 f9a0 	bl	80079a2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_HCD_Stop+0x16>
 8003686:	2302      	movs	r3, #2
 8003688:	e00d      	b.n	80036a6 <HAL_HCD_Stop+0x32>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f005 f854 	bl	8008744 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 fbfc 	bl	8007eb8 <USB_ResetPort>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	3360      	adds	r3, #96	; 0x60
 80036e4:	781b      	ldrb	r3, [r3, #0]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	3350      	adds	r3, #80	; 0x50
 800370c:	681b      	ldr	r3, [r3, #0]
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f004 fc40 	bl	8007fac <USB_GetCurrentFrame>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 fc1b 	bl	8007f7e <USB_GetHostSpeed>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b04      	cmp	r3, #4
 8003780:	d119      	bne.n	80037b6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378e:	461a      	mov	r2, r3
 8003790:	2304      	movs	r3, #4
 8003792:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	0151      	lsls	r1, r2, #5
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	440a      	add	r2, r1
 80037aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	60d3      	str	r3, [r2, #12]
 80037b4:	e101      	b.n	80039ba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037cc:	d12b      	bne.n	8003826 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	212c      	movs	r1, #44	; 0x2c
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	3361      	adds	r3, #97	; 0x61
 80037f0:	2207      	movs	r2, #7
 80037f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f004 fe37 	bl	8008492 <USB_HC_Halt>
 8003824:	e0c9      	b.n	80039ba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b20      	cmp	r3, #32
 800383a:	d109      	bne.n	8003850 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4413      	add	r3, r2
 8003844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003848:	461a      	mov	r2, r3
 800384a:	2320      	movs	r3, #32
 800384c:	6093      	str	r3, [r2, #8]
 800384e:	e0b4      	b.n	80039ba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b08      	cmp	r3, #8
 8003864:	d133      	bne.n	80038ce <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	440a      	add	r2, r1
 800387c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3361      	adds	r3, #97	; 0x61
 8003894:	2205      	movs	r2, #5
 8003896:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	461a      	mov	r2, r3
 80038a6:	2310      	movs	r3, #16
 80038a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b6:	461a      	mov	r2, r3
 80038b8:	2308      	movs	r3, #8
 80038ba:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 fde3 	bl	8008492 <USB_HC_Halt>
 80038cc:	e075      	b.n	80039ba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e4:	d134      	bne.n	8003950 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	3361      	adds	r3, #97	; 0x61
 8003914:	2208      	movs	r2, #8
 8003916:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	2310      	movs	r3, #16
 8003928:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	461a      	mov	r2, r3
 8003938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800393c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f004 fda2 	bl	8008492 <USB_HC_Halt>
 800394e:	e034      	b.n	80039ba <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d129      	bne.n	80039ba <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	440a      	add	r2, r1
 800397c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3361      	adds	r3, #97	; 0x61
 8003994:	2206      	movs	r2, #6
 8003996:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 fd75 	bl	8008492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b4:	461a      	mov	r2, r3
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d0:	d122      	bne.n	8003a18 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f004 fd48 	bl	8008492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a14:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a16:	e2ba      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	f040 811b 	bne.w	8003c66 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d019      	beq.n	8003a6c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3348      	adds	r3, #72	; 0x48
 8003a46:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	0159      	lsls	r1, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	440b      	add	r3, r1
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	202c      	movs	r0, #44	; 0x2c
 8003a62:	fb00 f303 	mul.w	r3, r0, r3
 8003a66:	440b      	add	r3, r1
 8003a68:	3350      	adds	r3, #80	; 0x50
 8003a6a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3361      	adds	r3, #97	; 0x61
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	335c      	adds	r3, #92	; 0x5c
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	333f      	adds	r3, #63	; 0x3f
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	333f      	adds	r3, #63	; 0x3f
 8003ac4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d121      	bne.n	8003b0e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	0151      	lsls	r1, r2, #5
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	440a      	add	r2, r1
 8003ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	4611      	mov	r1, r2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f004 fccc 	bl	8008492 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	461a      	mov	r2, r3
 8003b08:	2310      	movs	r3, #16
 8003b0a:	6093      	str	r3, [r2, #8]
 8003b0c:	e066      	b.n	8003bdc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	333f      	adds	r3, #63	; 0x3f
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d127      	bne.n	8003b72 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	0151      	lsls	r1, r2, #5
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	440a      	add	r2, r1
 8003b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b40:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3360      	adds	r3, #96	; 0x60
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	b2d9      	uxtb	r1, r3
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	202c      	movs	r0, #44	; 0x2c
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3360      	adds	r3, #96	; 0x60
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f007 ffbc 	bl	800bae8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b70:	e034      	b.n	8003bdc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	333f      	adds	r3, #63	; 0x3f
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d12a      	bne.n	8003bdc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3360      	adds	r3, #96	; 0x60
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3354      	adds	r3, #84	; 0x54
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2d8      	uxtb	r0, r3
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	3354      	adds	r3, #84	; 0x54
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	b2d9      	uxtb	r1, r3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	202c      	movs	r0, #44	; 0x2c
 8003bca:	fb00 f303 	mul.w	r3, r0, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	3360      	adds	r3, #96	; 0x60
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f007 ff86 	bl	800bae8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d12b      	bne.n	8003c3c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	212c      	movs	r1, #44	; 0x2c
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	3348      	adds	r3, #72	; 0x48
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	202c      	movs	r0, #44	; 0x2c
 8003bfa:	fb00 f202 	mul.w	r2, r0, r2
 8003bfe:	440a      	add	r2, r1
 8003c00:	3240      	adds	r2, #64	; 0x40
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 81be 	beq.w	8003f8e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3354      	adds	r3, #84	; 0x54
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	f083 0301 	eor.w	r3, r3, #1
 8003c26:	b2d8      	uxtb	r0, r3
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3354      	adds	r3, #84	; 0x54
 8003c36:	4602      	mov	r2, r0
 8003c38:	701a      	strb	r2, [r3, #0]
}
 8003c3a:	e1a8      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3354      	adds	r3, #84	; 0x54
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	f083 0301 	eor.w	r3, r3, #1
 8003c50:	b2d8      	uxtb	r0, r3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3354      	adds	r3, #84	; 0x54
 8003c60:	4602      	mov	r2, r0
 8003c62:	701a      	strb	r2, [r3, #0]
}
 8003c64:	e193      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	f040 8106 	bne.w	8003e8a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c98:	f023 0302 	bic.w	r3, r3, #2
 8003c9c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	212c      	movs	r1, #44	; 0x2c
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	3361      	adds	r3, #97	; 0x61
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d109      	bne.n	8003cc6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	212c      	movs	r1, #44	; 0x2c
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	3360      	adds	r3, #96	; 0x60
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e0c9      	b.n	8003e5a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	212c      	movs	r1, #44	; 0x2c
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3361      	adds	r3, #97	; 0x61
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d109      	bne.n	8003cee <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	212c      	movs	r1, #44	; 0x2c
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3360      	adds	r3, #96	; 0x60
 8003ce8:	2205      	movs	r2, #5
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e0b5      	b.n	8003e5a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3361      	adds	r3, #97	; 0x61
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d009      	beq.n	8003d16 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3361      	adds	r3, #97	; 0x61
 8003d10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d150      	bne.n	8003db8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	335c      	adds	r3, #92	; 0x5c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	202c      	movs	r0, #44	; 0x2c
 8003d2e:	fb00 f303 	mul.w	r3, r0, r3
 8003d32:	440b      	add	r3, r1
 8003d34:	335c      	adds	r3, #92	; 0x5c
 8003d36:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	212c      	movs	r1, #44	; 0x2c
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	335c      	adds	r3, #92	; 0x5c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d912      	bls.n	8003d72 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	335c      	adds	r3, #92	; 0x5c
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	212c      	movs	r1, #44	; 0x2c
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	3360      	adds	r3, #96	; 0x60
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d70:	e073      	b.n	8003e5a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3360      	adds	r3, #96	; 0x60
 8003d80:	2202      	movs	r2, #2
 8003d82:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d9a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003da2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	461a      	mov	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003db6:	e050      	b.n	8003e5a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	212c      	movs	r1, #44	; 0x2c
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3361      	adds	r3, #97	; 0x61
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d122      	bne.n	8003e12 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	212c      	movs	r1, #44	; 0x2c
 8003dd2:	fb01 f303 	mul.w	r3, r1, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3360      	adds	r3, #96	; 0x60
 8003dda:	2202      	movs	r2, #2
 8003ddc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003df4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dfc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e023      	b.n	8003e5a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	212c      	movs	r1, #44	; 0x2c
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3361      	adds	r3, #97	; 0x61
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b07      	cmp	r3, #7
 8003e24:	d119      	bne.n	8003e5a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	335c      	adds	r3, #92	; 0x5c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	202c      	movs	r0, #44	; 0x2c
 8003e3e:	fb00 f303 	mul.w	r3, r0, r3
 8003e42:	440b      	add	r3, r1
 8003e44:	335c      	adds	r3, #92	; 0x5c
 8003e46:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	212c      	movs	r1, #44	; 0x2c
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	3360      	adds	r3, #96	; 0x60
 8003e56:	2204      	movs	r2, #4
 8003e58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e66:	461a      	mov	r2, r3
 8003e68:	2302      	movs	r3, #2
 8003e6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	b2d9      	uxtb	r1, r3
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	202c      	movs	r0, #44	; 0x2c
 8003e76:	fb00 f303 	mul.w	r3, r0, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3360      	adds	r3, #96	; 0x60
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f007 fe30 	bl	800bae8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e88:	e081      	b.n	8003f8e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d176      	bne.n	8003f8e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	333f      	adds	r3, #63	; 0x3f
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d121      	bne.n	8003ef8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	212c      	movs	r1, #44	; 0x2c
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	335c      	adds	r3, #92	; 0x5c
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	0151      	lsls	r1, r2, #5
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	440a      	add	r2, r1
 8003edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f004 face 	bl	8008492 <USB_HC_Halt>
 8003ef6:	e041      	b.n	8003f7c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	333f      	adds	r3, #63	; 0x3f
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d009      	beq.n	8003f20 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	333f      	adds	r3, #63	; 0x3f
 8003f1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d12d      	bne.n	8003f7c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	335c      	adds	r3, #92	; 0x5c
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d120      	bne.n	8003f7c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	212c      	movs	r1, #44	; 0x2c
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	4413      	add	r3, r2
 8003f46:	3361      	adds	r3, #97	; 0x61
 8003f48:	2203      	movs	r2, #3
 8003f4a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	0151      	lsls	r1, r2, #5
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	440a      	add	r2, r1
 8003f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	4611      	mov	r1, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 fa8b 	bl	8008492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f88:	461a      	mov	r2, r3
 8003f8a:	2310      	movs	r3, #16
 8003f8c:	6093      	str	r3, [r2, #8]
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b088      	sub	sp, #32
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d119      	bne.n	8003ffa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003ff8:	e3ca      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b20      	cmp	r3, #32
 800400e:	d13e      	bne.n	800408e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401c:	461a      	mov	r2, r3
 800401e:	2320      	movs	r3, #32
 8004020:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	333d      	adds	r3, #61	; 0x3d
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b01      	cmp	r3, #1
 8004034:	f040 83ac 	bne.w	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	333d      	adds	r3, #61	; 0x3d
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	3360      	adds	r3, #96	; 0x60
 8004058:	2202      	movs	r2, #2
 800405a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	440a      	add	r2, r1
 8004072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004076:	f043 0302 	orr.w	r3, r3, #2
 800407a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f004 fa03 	bl	8008492 <USB_HC_Halt>
}
 800408c:	e380      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a4:	d122      	bne.n	80040ec <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f004 f9de 	bl	8008492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e2:	461a      	mov	r2, r3
 80040e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040e8:	6093      	str	r3, [r2, #8]
}
 80040ea:	e351      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d150      	bne.n	80041a4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	335c      	adds	r3, #92	; 0x5c
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b40      	cmp	r3, #64	; 0x40
 8004128:	d111      	bne.n	800414e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	333d      	adds	r3, #61	; 0x3d
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004148:	461a      	mov	r2, r3
 800414a:	2340      	movs	r3, #64	; 0x40
 800414c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	440a      	add	r2, r1
 8004164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f004 f98a 	bl	8008492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418a:	461a      	mov	r2, r3
 800418c:	2301      	movs	r3, #1
 800418e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3361      	adds	r3, #97	; 0x61
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
}
 80041a2:	e2f5      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d13c      	bne.n	8004234 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	3361      	adds	r3, #97	; 0x61
 80041c8:	2204      	movs	r2, #4
 80041ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	333d      	adds	r3, #61	; 0x3d
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	335c      	adds	r3, #92	; 0x5c
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	440a      	add	r2, r1
 8004206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800420a:	f043 0302 	orr.w	r3, r3, #2
 800420e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f004 f939 	bl	8008492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422c:	461a      	mov	r2, r3
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	6093      	str	r3, [r2, #8]
}
 8004232:	e2ad      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d12a      	bne.n	80042a0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	461a      	mov	r2, r3
 8004258:	2308      	movs	r3, #8
 800425a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	440a      	add	r2, r1
 8004272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004276:	f043 0302 	orr.w	r3, r3, #2
 800427a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f004 f903 	bl	8008492 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	3361      	adds	r3, #97	; 0x61
 800429a:	2205      	movs	r2, #5
 800429c:	701a      	strb	r2, [r3, #0]
}
 800429e:	e277      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d150      	bne.n	8004358 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	335c      	adds	r3, #92	; 0x5c
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	212c      	movs	r1, #44	; 0x2c
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	3361      	adds	r3, #97	; 0x61
 80042d6:	2203      	movs	r2, #3
 80042d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	212c      	movs	r1, #44	; 0x2c
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	333d      	adds	r3, #61	; 0x3d
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d112      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	333c      	adds	r3, #60	; 0x3c
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d108      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	333d      	adds	r3, #61	; 0x3d
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	440a      	add	r2, r1
 800432a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f004 f8a7 	bl	8008492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	4413      	add	r3, r2
 800434c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004350:	461a      	mov	r2, r3
 8004352:	2310      	movs	r3, #16
 8004354:	6093      	str	r3, [r2, #8]
}
 8004356:	e21b      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d174      	bne.n	8004458 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d121      	bne.n	80043ba <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	3361      	adds	r3, #97	; 0x61
 8004384:	2206      	movs	r2, #6
 8004386:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	440a      	add	r2, r1
 800439e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043a2:	f043 0302 	orr.w	r3, r3, #2
 80043a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 f86d 	bl	8008492 <USB_HC_Halt>
 80043b8:	e044      	b.n	8004444 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	335c      	adds	r3, #92	; 0x5c
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	202c      	movs	r0, #44	; 0x2c
 80043d2:	fb00 f303 	mul.w	r3, r0, r3
 80043d6:	440b      	add	r3, r1
 80043d8:	335c      	adds	r3, #92	; 0x5c
 80043da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	335c      	adds	r3, #92	; 0x5c
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d920      	bls.n	8004432 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	335c      	adds	r3, #92	; 0x5c
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	212c      	movs	r1, #44	; 0x2c
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	3360      	adds	r3, #96	; 0x60
 8004410:	2204      	movs	r2, #4
 8004412:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	b2d9      	uxtb	r1, r3
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	202c      	movs	r0, #44	; 0x2c
 800441e:	fb00 f303 	mul.w	r3, r0, r3
 8004422:	4413      	add	r3, r2
 8004424:	3360      	adds	r3, #96	; 0x60
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f007 fb5c 	bl	800bae8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004430:	e008      	b.n	8004444 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	3360      	adds	r3, #96	; 0x60
 8004440:	2202      	movs	r2, #2
 8004442:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004450:	461a      	mov	r2, r3
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	6093      	str	r3, [r2, #8]
}
 8004456:	e19b      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446e:	d134      	bne.n	80044da <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	440a      	add	r2, r1
 8004486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800448a:	f043 0302 	orr.w	r3, r3, #2
 800448e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f003 fff9 	bl	8008492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ac:	461a      	mov	r2, r3
 80044ae:	2310      	movs	r3, #16
 80044b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044be:	461a      	mov	r2, r3
 80044c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3361      	adds	r3, #97	; 0x61
 80044d4:	2208      	movs	r2, #8
 80044d6:	701a      	strb	r2, [r3, #0]
}
 80044d8:	e15a      	b.n	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	f040 814f 	bne.w	8004790 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	0151      	lsls	r1, r2, #5
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	440a      	add	r2, r1
 8004508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800450c:	f023 0302 	bic.w	r3, r3, #2
 8004510:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	212c      	movs	r1, #44	; 0x2c
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	4413      	add	r3, r2
 800451e:	3361      	adds	r3, #97	; 0x61
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d17d      	bne.n	8004622 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	212c      	movs	r1, #44	; 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	3360      	adds	r3, #96	; 0x60
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	333f      	adds	r3, #63	; 0x3f
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d00a      	beq.n	8004562 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	333f      	adds	r3, #63	; 0x3f
 800455a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800455c:	2b03      	cmp	r3, #3
 800455e:	f040 8100 	bne.w	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d113      	bne.n	8004592 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	212c      	movs	r1, #44	; 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	3355      	adds	r3, #85	; 0x55
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f083 0301 	eor.w	r3, r3, #1
 800457e:	b2d8      	uxtb	r0, r3
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	212c      	movs	r1, #44	; 0x2c
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	4413      	add	r3, r2
 800458c:	3355      	adds	r3, #85	; 0x55
 800458e:	4602      	mov	r2, r0
 8004590:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b01      	cmp	r3, #1
 8004598:	f040 80e3 	bne.w	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	334c      	adds	r3, #76	; 0x4c
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80d8 	beq.w	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	212c      	movs	r1, #44	; 0x2c
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	334c      	adds	r3, #76	; 0x4c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	202c      	movs	r0, #44	; 0x2c
 80045c8:	fb00 f202 	mul.w	r2, r0, r2
 80045cc:	440a      	add	r2, r1
 80045ce:	3240      	adds	r2, #64	; 0x40
 80045d0:	8812      	ldrh	r2, [r2, #0]
 80045d2:	4413      	add	r3, r2
 80045d4:	3b01      	subs	r3, #1
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	202c      	movs	r0, #44	; 0x2c
 80045dc:	fb00 f202 	mul.w	r2, r0, r2
 80045e0:	440a      	add	r2, r1
 80045e2:	3240      	adds	r2, #64	; 0x40
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80b5 	beq.w	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	212c      	movs	r1, #44	; 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3355      	adds	r3, #85	; 0x55
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2d8      	uxtb	r0, r3
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	212c      	movs	r1, #44	; 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	3355      	adds	r3, #85	; 0x55
 800461c:	4602      	mov	r2, r0
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	e09f      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	212c      	movs	r1, #44	; 0x2c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	3361      	adds	r3, #97	; 0x61
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b03      	cmp	r3, #3
 8004634:	d109      	bne.n	800464a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	212c      	movs	r1, #44	; 0x2c
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	4413      	add	r3, r2
 8004642:	3360      	adds	r3, #96	; 0x60
 8004644:	2202      	movs	r2, #2
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e08b      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	3361      	adds	r3, #97	; 0x61
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b04      	cmp	r3, #4
 800465c:	d109      	bne.n	8004672 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	3360      	adds	r3, #96	; 0x60
 800466c:	2202      	movs	r2, #2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e077      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3361      	adds	r3, #97	; 0x61
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d109      	bne.n	800469a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3360      	adds	r3, #96	; 0x60
 8004694:	2205      	movs	r2, #5
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	e063      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	212c      	movs	r1, #44	; 0x2c
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	3361      	adds	r3, #97	; 0x61
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d009      	beq.n	80046c2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	212c      	movs	r1, #44	; 0x2c
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	4413      	add	r3, r2
 80046ba:	3361      	adds	r3, #97	; 0x61
 80046bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d14f      	bne.n	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	212c      	movs	r1, #44	; 0x2c
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	335c      	adds	r3, #92	; 0x5c
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	202c      	movs	r0, #44	; 0x2c
 80046da:	fb00 f303 	mul.w	r3, r0, r3
 80046de:	440b      	add	r3, r1
 80046e0:	335c      	adds	r3, #92	; 0x5c
 80046e2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	212c      	movs	r1, #44	; 0x2c
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	4413      	add	r3, r2
 80046f0:	335c      	adds	r3, #92	; 0x5c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d912      	bls.n	800471e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	212c      	movs	r1, #44	; 0x2c
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	4413      	add	r3, r2
 8004704:	335c      	adds	r3, #92	; 0x5c
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	3360      	adds	r3, #96	; 0x60
 8004718:	2204      	movs	r2, #4
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e021      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	212c      	movs	r1, #44	; 0x2c
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	4413      	add	r3, r2
 800472a:	3360      	adds	r3, #96	; 0x60
 800472c:	2202      	movs	r2, #2
 800472e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004746:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800474e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475c:	461a      	mov	r2, r3
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	461a      	mov	r2, r3
 8004770:	2302      	movs	r3, #2
 8004772:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	b2d9      	uxtb	r1, r3
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	202c      	movs	r0, #44	; 0x2c
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	4413      	add	r3, r2
 8004784:	3360      	adds	r3, #96	; 0x60
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f007 f9ac 	bl	800bae8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004790:	bf00      	nop
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	0c5b      	lsrs	r3, r3, #17
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047cc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d004      	beq.n	80047de <HCD_RXQLVL_IRQHandler+0x46>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b05      	cmp	r3, #5
 80047d8:	f000 80a9 	beq.w	800492e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047dc:	e0aa      	b.n	8004934 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80a6 	beq.w	8004932 <HCD_RXQLVL_IRQHandler+0x19a>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	212c      	movs	r1, #44	; 0x2c
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	3344      	adds	r3, #68	; 0x44
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 809b 	beq.w	8004932 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3350      	adds	r3, #80	; 0x50
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	441a      	add	r2, r3
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	202c      	movs	r0, #44	; 0x2c
 8004816:	fb00 f303 	mul.w	r3, r0, r3
 800481a:	440b      	add	r3, r1
 800481c:	334c      	adds	r3, #76	; 0x4c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d87a      	bhi.n	800491a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	212c      	movs	r1, #44	; 0x2c
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	4413      	add	r3, r2
 8004834:	3344      	adds	r3, #68	; 0x44
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	b292      	uxth	r2, r2
 800483c:	4619      	mov	r1, r3
 800483e:	f003 f9a1 	bl	8007b84 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	212c      	movs	r1, #44	; 0x2c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	3344      	adds	r3, #68	; 0x44
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	441a      	add	r2, r3
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	202c      	movs	r0, #44	; 0x2c
 800485c:	fb00 f303 	mul.w	r3, r0, r3
 8004860:	440b      	add	r3, r1
 8004862:	3344      	adds	r3, #68	; 0x44
 8004864:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	3350      	adds	r3, #80	; 0x50
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	441a      	add	r2, r3
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	202c      	movs	r0, #44	; 0x2c
 8004880:	fb00 f303 	mul.w	r3, r0, r3
 8004884:	440b      	add	r3, r1
 8004886:	3350      	adds	r3, #80	; 0x50
 8004888:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	0cdb      	lsrs	r3, r3, #19
 800489a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800489e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	212c      	movs	r1, #44	; 0x2c
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	3340      	adds	r3, #64	; 0x40
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d13c      	bne.n	8004932 <HCD_RXQLVL_IRQHandler+0x19a>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d039      	beq.n	8004932 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048dc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	212c      	movs	r1, #44	; 0x2c
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	3354      	adds	r3, #84	; 0x54
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f083 0301 	eor.w	r3, r3, #1
 8004904:	b2d8      	uxtb	r0, r3
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	212c      	movs	r1, #44	; 0x2c
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	4413      	add	r3, r2
 8004912:	3354      	adds	r3, #84	; 0x54
 8004914:	4602      	mov	r2, r0
 8004916:	701a      	strb	r2, [r3, #0]
      break;
 8004918:	e00b      	b.n	8004932 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	212c      	movs	r1, #44	; 0x2c
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	4413      	add	r3, r2
 8004926:	3360      	adds	r3, #96	; 0x60
 8004928:	2204      	movs	r2, #4
 800492a:	701a      	strb	r2, [r3, #0]
      break;
 800492c:	e001      	b.n	8004932 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800492e:	bf00      	nop
 8004930:	e000      	b.n	8004934 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004932:	bf00      	nop
  }
}
 8004934:	bf00      	nop
 8004936:	3728      	adds	r7, #40	; 0x28
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004968:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b02      	cmp	r3, #2
 8004972:	d10b      	bne.n	800498c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d102      	bne.n	8004984 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f007 f896 	bl	800bab0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f043 0302 	orr.w	r3, r3, #2
 800498a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b08      	cmp	r3, #8
 8004994:	d132      	bne.n	80049fc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f043 0308 	orr.w	r3, r3, #8
 800499c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d126      	bne.n	80049f6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d113      	bne.n	80049d8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80049b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049ba:	d106      	bne.n	80049ca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2102      	movs	r1, #2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f003 fa3e 	bl	8007e44 <USB_InitFSLSPClkSel>
 80049c8:	e011      	b.n	80049ee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	4618      	mov	r0, r3
 80049d2:	f003 fa37 	bl	8007e44 <USB_InitFSLSPClkSel>
 80049d6:	e00a      	b.n	80049ee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d106      	bne.n	80049ee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049e6:	461a      	mov	r2, r3
 80049e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80049ec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f007 f888 	bl	800bb04 <HAL_HCD_PortEnabled_Callback>
 80049f4:	e002      	b.n	80049fc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f007 f892 	bl	800bb20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d103      	bne.n	8004a0e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f043 0320 	orr.w	r3, r3, #32
 8004a0c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a14:	461a      	mov	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6013      	str	r3, [r2, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e12b      	b.n	8004c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fd f8c6 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a88:	f002 f954 	bl	8006d34 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4a81      	ldr	r2, [pc, #516]	; (8004c98 <HAL_I2C_Init+0x274>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d807      	bhi.n	8004aa8 <HAL_I2C_Init+0x84>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a80      	ldr	r2, [pc, #512]	; (8004c9c <HAL_I2C_Init+0x278>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	bf94      	ite	ls
 8004aa0:	2301      	movls	r3, #1
 8004aa2:	2300      	movhi	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e006      	b.n	8004ab6 <HAL_I2C_Init+0x92>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a7d      	ldr	r2, [pc, #500]	; (8004ca0 <HAL_I2C_Init+0x27c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bf94      	ite	ls
 8004ab0:	2301      	movls	r3, #1
 8004ab2:	2300      	movhi	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e0e7      	b.n	8004c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a78      	ldr	r2, [pc, #480]	; (8004ca4 <HAL_I2C_Init+0x280>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0c9b      	lsrs	r3, r3, #18
 8004ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a6a      	ldr	r2, [pc, #424]	; (8004c98 <HAL_I2C_Init+0x274>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d802      	bhi.n	8004af8 <HAL_I2C_Init+0xd4>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	3301      	adds	r3, #1
 8004af6:	e009      	b.n	8004b0c <HAL_I2C_Init+0xe8>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	4a69      	ldr	r2, [pc, #420]	; (8004ca8 <HAL_I2C_Init+0x284>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	495c      	ldr	r1, [pc, #368]	; (8004c98 <HAL_I2C_Init+0x274>)
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	d819      	bhi.n	8004b60 <HAL_I2C_Init+0x13c>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e59      	subs	r1, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b40:	400b      	ands	r3, r1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_I2C_Init+0x138>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1e59      	subs	r1, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b54:	3301      	adds	r3, #1
 8004b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5a:	e051      	b.n	8004c00 <HAL_I2C_Init+0x1dc>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	e04f      	b.n	8004c00 <HAL_I2C_Init+0x1dc>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d111      	bne.n	8004b8c <HAL_I2C_Init+0x168>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e58      	subs	r0, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	440b      	add	r3, r1
 8004b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bf0c      	ite	eq
 8004b84:	2301      	moveq	r3, #1
 8004b86:	2300      	movne	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e012      	b.n	8004bb2 <HAL_I2C_Init+0x18e>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1e58      	subs	r0, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	0099      	lsls	r1, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_I2C_Init+0x196>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e022      	b.n	8004c00 <HAL_I2C_Init+0x1dc>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10e      	bne.n	8004be0 <HAL_I2C_Init+0x1bc>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1e58      	subs	r0, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	440b      	add	r3, r1
 8004bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bde:	e00f      	b.n	8004c00 <HAL_I2C_Init+0x1dc>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	1e58      	subs	r0, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	0099      	lsls	r1, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	6809      	ldr	r1, [r1, #0]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6911      	ldr	r1, [r2, #16]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68d2      	ldr	r2, [r2, #12]
 8004c3a:	4311      	orrs	r1, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	000186a0 	.word	0x000186a0
 8004c9c:	001e847f 	.word	0x001e847f
 8004ca0:	003d08ff 	.word	0x003d08ff
 8004ca4:	431bde83 	.word	0x431bde83
 8004ca8:	10624dd3 	.word	0x10624dd3

08004cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	460b      	mov	r3, r1
 8004cba:	817b      	strh	r3, [r7, #10]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cc0:	f7fd f9d8 	bl	8002074 <HAL_GetTick>
 8004cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	f040 80e0 	bne.w	8004e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2319      	movs	r3, #25
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4970      	ldr	r1, [pc, #448]	; (8004ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fc58 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
 8004cec:	e0d3      	b.n	8004e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_I2C_Master_Transmit+0x50>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e0cc      	b.n	8004e96 <HAL_I2C_Master_Transmit+0x1ea>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d007      	beq.n	8004d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2221      	movs	r2, #33	; 0x21
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	893a      	ldrh	r2, [r7, #8]
 8004d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a50      	ldr	r2, [pc, #320]	; (8004ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d64:	8979      	ldrh	r1, [r7, #10]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fac2 	bl	80052f4 <I2C_MasterRequestWrite>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e08d      	b.n	8004e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d90:	e066      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	6a39      	ldr	r1, [r7, #32]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fcd2 	bl	8005740 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00d      	beq.n	8004dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d107      	bne.n	8004dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e06b      	b.n	8004e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	781a      	ldrb	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d11b      	bne.n	8004e34 <HAL_I2C_Master_Transmit+0x188>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	6a39      	ldr	r1, [r7, #32]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fcc2 	bl	80057c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d107      	bne.n	8004e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e01a      	b.n	8004e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d194      	bne.n	8004d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	00100002 	.word	0x00100002
 8004ea4:	ffff0000 	.word	0xffff0000

08004ea8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08c      	sub	sp, #48	; 0x30
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	817b      	strh	r3, [r7, #10]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ebc:	f7fd f8da 	bl	8002074 <HAL_GetTick>
 8004ec0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	f040 820b 	bne.w	80052e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	2319      	movs	r3, #25
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	497c      	ldr	r1, [pc, #496]	; (80050cc <HAL_I2C_Master_Receive+0x224>)
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fb5a 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e1fe      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_I2C_Master_Receive+0x50>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e1f7      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d007      	beq.n	8004f1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0201 	orr.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2222      	movs	r2, #34	; 0x22
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2210      	movs	r2, #16
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	893a      	ldrh	r2, [r7, #8]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a5c      	ldr	r2, [pc, #368]	; (80050d0 <HAL_I2C_Master_Receive+0x228>)
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f60:	8979      	ldrh	r1, [r7, #10]
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fa46 	bl	80053f8 <I2C_MasterRequestRead>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e1b8      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d113      	bne.n	8004fa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e18c      	b.n	80052c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d11b      	bne.n	8004fe6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e16c      	b.n	80052c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d11b      	bne.n	8005026 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	e14c      	b.n	80052c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800504c:	e138      	b.n	80052c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b03      	cmp	r3, #3
 8005054:	f200 80f1 	bhi.w	800523a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	2b01      	cmp	r3, #1
 800505e:	d123      	bne.n	80050a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fbed 	bl	8005844 <I2C_WaitOnRXNEFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e139      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050a6:	e10b      	b.n	80052c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d14e      	bne.n	800514e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	2200      	movs	r2, #0
 80050b8:	4906      	ldr	r1, [pc, #24]	; (80050d4 <HAL_I2C_Master_Receive+0x22c>)
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fa6a 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e10e      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
 80050ca:	bf00      	nop
 80050cc:	00100002 	.word	0x00100002
 80050d0:	ffff0000 	.word	0xffff0000
 80050d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514c:	e0b8      	b.n	80052c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	2200      	movs	r2, #0
 8005156:	4966      	ldr	r1, [pc, #408]	; (80052f0 <HAL_I2C_Master_Receive+0x448>)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fa1b 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0bf      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	494f      	ldr	r1, [pc, #316]	; (80052f0 <HAL_I2C_Master_Receive+0x448>)
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f9ed 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e091      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005238:	e042      	b.n	80052c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fb00 	bl	8005844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e04c      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d118      	bne.n	80052c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f47f aec2 	bne.w	800504e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3728      	adds	r7, #40	; 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	00010004 	.word	0x00010004

080052f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	460b      	mov	r3, r1
 8005302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d006      	beq.n	800531e <I2C_MasterRequestWrite+0x2a>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d003      	beq.n	800531e <I2C_MasterRequestWrite+0x2a>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800531c:	d108      	bne.n	8005330 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e00b      	b.n	8005348 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	2b12      	cmp	r3, #18
 8005336:	d107      	bne.n	8005348 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f91d 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536e:	d103      	bne.n	8005378 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e035      	b.n	80053e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005384:	d108      	bne.n	8005398 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005386:	897b      	ldrh	r3, [r7, #10]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005394:	611a      	str	r2, [r3, #16]
 8005396:	e01b      	b.n	80053d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005398:	897b      	ldrh	r3, [r7, #10]
 800539a:	11db      	asrs	r3, r3, #7
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 0306 	and.w	r3, r3, #6
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f063 030f 	orn	r3, r3, #15
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	490e      	ldr	r1, [pc, #56]	; (80053f0 <I2C_MasterRequestWrite+0xfc>)
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f943 	bl	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e010      	b.n	80053e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053c6:	897b      	ldrh	r3, [r7, #10]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	4907      	ldr	r1, [pc, #28]	; (80053f4 <I2C_MasterRequestWrite+0x100>)
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f933 	bl	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	00010008 	.word	0x00010008
 80053f4:	00010002 	.word	0x00010002

080053f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	460b      	mov	r3, r1
 8005406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800541c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d006      	beq.n	8005432 <I2C_MasterRequestRead+0x3a>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d003      	beq.n	8005432 <I2C_MasterRequestRead+0x3a>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005430:	d108      	bne.n	8005444 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e00b      	b.n	800545c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	2b11      	cmp	r3, #17
 800544a:	d107      	bne.n	800545c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800545a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f893 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00d      	beq.n	8005490 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005482:	d103      	bne.n	800548c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800548a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e079      	b.n	8005584 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005498:	d108      	bne.n	80054ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800549a:	897b      	ldrh	r3, [r7, #10]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	611a      	str	r2, [r3, #16]
 80054aa:	e05f      	b.n	800556c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054ac:	897b      	ldrh	r3, [r7, #10]
 80054ae:	11db      	asrs	r3, r3, #7
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0306 	and.w	r3, r3, #6
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f063 030f 	orn	r3, r3, #15
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	4930      	ldr	r1, [pc, #192]	; (800558c <I2C_MasterRequestRead+0x194>)
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f8b9 	bl	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e054      	b.n	8005584 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054da:	897b      	ldrh	r3, [r7, #10]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4929      	ldr	r1, [pc, #164]	; (8005590 <I2C_MasterRequestRead+0x198>)
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f8a9 	bl	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e044      	b.n	8005584 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f831 	bl	8005594 <I2C_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d103      	bne.n	8005550 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e017      	b.n	8005584 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005554:	897b      	ldrh	r3, [r7, #10]
 8005556:	11db      	asrs	r3, r3, #7
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f003 0306 	and.w	r3, r3, #6
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f063 030e 	orn	r3, r3, #14
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <I2C_MasterRequestRead+0x198>)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f865 	bl	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	00010008 	.word	0x00010008
 8005590:	00010002 	.word	0x00010002

08005594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055a4:	e025      	b.n	80055f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ac:	d021      	beq.n	80055f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ae:	f7fc fd61 	bl	8002074 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d302      	bcc.n	80055c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d116      	bne.n	80055f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e023      	b.n	800563a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d10d      	bne.n	8005618 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	43da      	mvns	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4013      	ands	r3, r2
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	e00c      	b.n	8005632 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	43da      	mvns	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	bf0c      	ite	eq
 800562a:	2301      	moveq	r3, #1
 800562c:	2300      	movne	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	429a      	cmp	r2, r3
 8005636:	d0b6      	beq.n	80055a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005650:	e051      	b.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005660:	d123      	bne.n	80056aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005670:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800567a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f043 0204 	orr.w	r2, r3, #4
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e046      	b.n	8005738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b0:	d021      	beq.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b2:	f7fc fcdf 	bl	8002074 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d302      	bcc.n	80056c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d116      	bne.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f043 0220 	orr.w	r2, r3, #32
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e020      	b.n	8005738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	0c1b      	lsrs	r3, r3, #16
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10c      	bne.n	800571a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	43da      	mvns	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	bf14      	ite	ne
 8005712:	2301      	movne	r3, #1
 8005714:	2300      	moveq	r3, #0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	e00b      	b.n	8005732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	43da      	mvns	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4013      	ands	r3, r2
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	bf14      	ite	ne
 800572c:	2301      	movne	r3, #1
 800572e:	2300      	moveq	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d18d      	bne.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800574c:	e02d      	b.n	80057aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f8ce 	bl	80058f0 <I2C_IsAcknowledgeFailed>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e02d      	b.n	80057ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005764:	d021      	beq.n	80057aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fc fc85 	bl	8002074 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e007      	b.n	80057ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b4:	2b80      	cmp	r3, #128	; 0x80
 80057b6:	d1ca      	bne.n	800574e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057ce:	e02d      	b.n	800582c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f88d 	bl	80058f0 <I2C_IsAcknowledgeFailed>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e02d      	b.n	800583c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e6:	d021      	beq.n	800582c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e8:	f7fc fc44 	bl	8002074 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d302      	bcc.n	80057fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d116      	bne.n	800582c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f043 0220 	orr.w	r2, r3, #32
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e007      	b.n	800583c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b04      	cmp	r3, #4
 8005838:	d1ca      	bne.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005850:	e042      	b.n	80058d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b10      	cmp	r3, #16
 800585e:	d119      	bne.n	8005894 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0210 	mvn.w	r2, #16
 8005868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e029      	b.n	80058e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005894:	f7fc fbee 	bl	8002074 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d116      	bne.n	80058d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	f043 0220 	orr.w	r2, r3, #32
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e007      	b.n	80058e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d1b5      	bne.n	8005852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005906:	d11b      	bne.n	8005940 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005910:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	f043 0204 	orr.w	r2, r3, #4
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e000      	b.n	8005942 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
	...

08005950 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e128      	b.n	8005bb4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a90      	ldr	r2, [pc, #576]	; (8005bbc <HAL_I2S_Init+0x26c>)
 800597a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fc f975 	bl	8001c6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005998:	f023 030f 	bic.w	r3, r3, #15
 800599c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2202      	movs	r2, #2
 80059a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d060      	beq.n	8005a70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80059b6:	2310      	movs	r3, #16
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e001      	b.n	80059c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80059bc:	2320      	movs	r3, #32
 80059be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d802      	bhi.n	80059ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059ce:	2001      	movs	r0, #1
 80059d0:	f001 faa6 	bl	8006f20 <HAL_RCCEx_GetPeriphCLKFreq>
 80059d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059de:	d125      	bne.n	8005a2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d010      	beq.n	8005a0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	3305      	adds	r3, #5
 8005a06:	613b      	str	r3, [r7, #16]
 8005a08:	e01f      	b.n	8005a4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	3305      	adds	r3, #5
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e00e      	b.n	8005a4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	3305      	adds	r3, #5
 8005a48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4a5c      	ldr	r2, [pc, #368]	; (8005bc0 <HAL_I2S_Init+0x270>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	08db      	lsrs	r3, r3, #3
 8005a54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e003      	b.n	8005a78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a70:	2302      	movs	r3, #2
 8005a72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d902      	bls.n	8005a84 <HAL_I2S_Init+0x134>
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	2bff      	cmp	r3, #255	; 0xff
 8005a82:	d907      	bls.n	8005a94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a88:	f043 0210 	orr.w	r2, r3, #16
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e08f      	b.n	8005bb4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	ea42 0103 	orr.w	r1, r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ab2:	f023 030f 	bic.w	r3, r3, #15
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6851      	ldr	r1, [r2, #4]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6892      	ldr	r2, [r2, #8]
 8005abe:	4311      	orrs	r1, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	68d2      	ldr	r2, [r2, #12]
 8005ac4:	4311      	orrs	r1, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6992      	ldr	r2, [r2, #24]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ad6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d161      	bne.n	8005ba4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a38      	ldr	r2, [pc, #224]	; (8005bc4 <HAL_I2S_Init+0x274>)
 8005ae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a37      	ldr	r2, [pc, #220]	; (8005bc8 <HAL_I2S_Init+0x278>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d101      	bne.n	8005af4 <HAL_I2S_Init+0x1a4>
 8005af0:	4b36      	ldr	r3, [pc, #216]	; (8005bcc <HAL_I2S_Init+0x27c>)
 8005af2:	e001      	b.n	8005af8 <HAL_I2S_Init+0x1a8>
 8005af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	4932      	ldr	r1, [pc, #200]	; (8005bc8 <HAL_I2S_Init+0x278>)
 8005b00:	428a      	cmp	r2, r1
 8005b02:	d101      	bne.n	8005b08 <HAL_I2S_Init+0x1b8>
 8005b04:	4a31      	ldr	r2, [pc, #196]	; (8005bcc <HAL_I2S_Init+0x27c>)
 8005b06:	e001      	b.n	8005b0c <HAL_I2S_Init+0x1bc>
 8005b08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005b0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b10:	f023 030f 	bic.w	r3, r3, #15
 8005b14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2b      	ldr	r2, [pc, #172]	; (8005bc8 <HAL_I2S_Init+0x278>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d101      	bne.n	8005b24 <HAL_I2S_Init+0x1d4>
 8005b20:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <HAL_I2S_Init+0x27c>)
 8005b22:	e001      	b.n	8005b28 <HAL_I2S_Init+0x1d8>
 8005b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b28:	2202      	movs	r2, #2
 8005b2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a25      	ldr	r2, [pc, #148]	; (8005bc8 <HAL_I2S_Init+0x278>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <HAL_I2S_Init+0x1ea>
 8005b36:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <HAL_I2S_Init+0x27c>)
 8005b38:	e001      	b.n	8005b3e <HAL_I2S_Init+0x1ee>
 8005b3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4a:	d003      	beq.n	8005b54 <HAL_I2S_Init+0x204>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	e001      	b.n	8005b60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b74:	4313      	orrs	r3, r2
 8005b76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	897b      	ldrh	r3, [r7, #10]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a0d      	ldr	r2, [pc, #52]	; (8005bc8 <HAL_I2S_Init+0x278>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <HAL_I2S_Init+0x24c>
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <HAL_I2S_Init+0x27c>)
 8005b9a:	e001      	b.n	8005ba0 <HAL_I2S_Init+0x250>
 8005b9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ba0:	897a      	ldrh	r2, [r7, #10]
 8005ba2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	08005ed5 	.word	0x08005ed5
 8005bc0:	cccccccd 	.word	0xcccccccd
 8005bc4:	08005fe9 	.word	0x08005fe9
 8005bc8:	40003800 	.word	0x40003800
 8005bcc:	40003400 	.word	0x40003400

08005bd0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_I2S_Transmit_DMA+0x1a>
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e08e      	b.n	8005d0c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2S_Transmit_DMA+0x2e>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e086      	b.n	8005d0c <HAL_I2S_Transmit_DMA+0x13c>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d005      	beq.n	8005c1e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e076      	b.n	8005d0c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2203      	movs	r2, #3
 8005c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d002      	beq.n	8005c4a <HAL_I2S_Transmit_DMA+0x7a>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d10a      	bne.n	8005c60 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c5e:	e005      	b.n	8005c6c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c70:	4a28      	ldr	r2, [pc, #160]	; (8005d14 <HAL_I2S_Transmit_DMA+0x144>)
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <HAL_I2S_Transmit_DMA+0x148>)
 8005c7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <HAL_I2S_Transmit_DMA+0x14c>)
 8005c82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c8c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c94:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005c9c:	f7fc fcc2 	bl	8002624 <HAL_DMA_Start_IT>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00f      	beq.n	8005cc6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f043 0208 	orr.w	r2, r3, #8
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e022      	b.n	8005d0c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ce2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d107      	bne.n	8005d02 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0202 	orr.w	r2, r2, #2
 8005d00:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	08005db3 	.word	0x08005db3
 8005d18:	08005d71 	.word	0x08005d71
 8005d1c:	08005dcf 	.word	0x08005dcf

08005d20 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10e      	bne.n	8005da4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0202 	bic.w	r2, r2, #2
 8005d94:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff ffc5 	bl	8005d34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff ffad 	bl	8005d20 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0203 	bic.w	r2, r2, #3
 8005dea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e04:	f043 0208 	orr.w	r2, r3, #8
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff ffa5 	bl	8005d5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	881a      	ldrh	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	1c9a      	adds	r2, r3, #2
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10e      	bne.n	8005e6e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff63 	bl	8005d34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	b292      	uxth	r2, r2
 8005e8a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	1c9a      	adds	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10e      	bne.n	8005ecc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ebc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff ff3e 	bl	8005d48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d13a      	bne.n	8005f66 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d109      	bne.n	8005f0e <I2S_IRQHandler+0x3a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d102      	bne.n	8005f0e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ffb4 	bl	8005e76 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d126      	bne.n	8005f66 <I2S_IRQHandler+0x92>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d11f      	bne.n	8005f66 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f34:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f58:	f043 0202 	orr.w	r2, r3, #2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff fefb 	bl	8005d5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d136      	bne.n	8005fe0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d109      	bne.n	8005f90 <I2S_IRQHandler+0xbc>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b80      	cmp	r3, #128	; 0x80
 8005f88:	d102      	bne.n	8005f90 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ff45 	bl	8005e1a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d122      	bne.n	8005fe0 <I2S_IRQHandler+0x10c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d11b      	bne.n	8005fe0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fb6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f043 0204 	orr.w	r2, r3, #4
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff febe 	bl	8005d5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4aa2      	ldr	r2, [pc, #648]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d101      	bne.n	8006006 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006002:	4ba2      	ldr	r3, [pc, #648]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006004:	e001      	b.n	800600a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a9b      	ldr	r2, [pc, #620]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006020:	4b9a      	ldr	r3, [pc, #616]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006022:	e001      	b.n	8006028 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006034:	d004      	beq.n	8006040 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 8099 	bne.w	8006172 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b02      	cmp	r3, #2
 8006048:	d107      	bne.n	800605a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f925 	bl	80062a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d107      	bne.n	8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f9c8 	bl	8006404 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d13a      	bne.n	80060f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d035      	beq.n	80060f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a7e      	ldr	r2, [pc, #504]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d101      	bne.n	8006096 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006092:	4b7e      	ldr	r3, [pc, #504]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006094:	e001      	b.n	800609a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4979      	ldr	r1, [pc, #484]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80060a2:	428b      	cmp	r3, r1
 80060a4:	d101      	bne.n	80060aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80060a6:	4b79      	ldr	r3, [pc, #484]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80060a8:	e001      	b.n	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80060aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	f043 0202 	orr.w	r2, r3, #2
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fe34 	bl	8005d5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	f040 80be 	bne.w	800627c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80b8 	beq.w	800627c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800611a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a59      	ldr	r2, [pc, #356]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d101      	bne.n	800612a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006126:	4b59      	ldr	r3, [pc, #356]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006128:	e001      	b.n	800612e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800612a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4954      	ldr	r1, [pc, #336]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006136:	428b      	cmp	r3, r1
 8006138:	d101      	bne.n	800613e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800613a:	4b54      	ldr	r3, [pc, #336]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800613c:	e001      	b.n	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800613e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006146:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006148:	2300      	movs	r3, #0
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	f043 0204 	orr.w	r2, r3, #4
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fdf6 	bl	8005d5c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006170:	e084      	b.n	800627c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b02      	cmp	r3, #2
 800617a:	d107      	bne.n	800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f8be 	bl	8006308 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	d107      	bne.n	80061a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8fd 	bl	80063a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d12f      	bne.n	8006210 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02a      	beq.n	8006210 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a2e      	ldr	r2, [pc, #184]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d101      	bne.n	80061d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80061d4:	4b2d      	ldr	r3, [pc, #180]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061d6:	e001      	b.n	80061dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80061d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4929      	ldr	r1, [pc, #164]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061e4:	428b      	cmp	r3, r1
 80061e6:	d101      	bne.n	80061ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80061e8:	4b28      	ldr	r3, [pc, #160]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061ea:	e001      	b.n	80061f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80061ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006202:	f043 0202 	orr.w	r2, r3, #2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fda6 	bl	8005d5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b08      	cmp	r3, #8
 8006218:	d131      	bne.n	800627e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02c      	beq.n	800627e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a17      	ldr	r2, [pc, #92]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d101      	bne.n	8006232 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800622e:	4b17      	ldr	r3, [pc, #92]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006230:	e001      	b.n	8006236 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006232:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4912      	ldr	r1, [pc, #72]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800623e:	428b      	cmp	r3, r1
 8006240:	d101      	bne.n	8006246 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006242:	4b12      	ldr	r3, [pc, #72]	; (800628c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006244:	e001      	b.n	800624a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800624a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800624e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800625e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fd71 	bl	8005d5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800627a:	e000      	b.n	800627e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800627c:	bf00      	nop
}
 800627e:	bf00      	nop
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40003800 	.word	0x40003800
 800628c:	40003400 	.word	0x40003400

08006290 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	1c99      	adds	r1, r3, #2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6251      	str	r1, [r2, #36]	; 0x24
 80062b6:	881a      	ldrh	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d113      	bne.n	80062fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ffc9 	bl	8006290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	1c99      	adds	r1, r3, #2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6251      	str	r1, [r2, #36]	; 0x24
 800631a:	8819      	ldrh	r1, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <I2SEx_TxISR_I2SExt+0x90>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d101      	bne.n	800632a <I2SEx_TxISR_I2SExt+0x22>
 8006326:	4b1d      	ldr	r3, [pc, #116]	; (800639c <I2SEx_TxISR_I2SExt+0x94>)
 8006328:	e001      	b.n	800632e <I2SEx_TxISR_I2SExt+0x26>
 800632a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800632e:	460a      	mov	r2, r1
 8006330:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d121      	bne.n	800638e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a12      	ldr	r2, [pc, #72]	; (8006398 <I2SEx_TxISR_I2SExt+0x90>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d101      	bne.n	8006358 <I2SEx_TxISR_I2SExt+0x50>
 8006354:	4b11      	ldr	r3, [pc, #68]	; (800639c <I2SEx_TxISR_I2SExt+0x94>)
 8006356:	e001      	b.n	800635c <I2SEx_TxISR_I2SExt+0x54>
 8006358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	490d      	ldr	r1, [pc, #52]	; (8006398 <I2SEx_TxISR_I2SExt+0x90>)
 8006364:	428b      	cmp	r3, r1
 8006366:	d101      	bne.n	800636c <I2SEx_TxISR_I2SExt+0x64>
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <I2SEx_TxISR_I2SExt+0x94>)
 800636a:	e001      	b.n	8006370 <I2SEx_TxISR_I2SExt+0x68>
 800636c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006370:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006374:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff81 	bl	8006290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40003800 	.word	0x40003800
 800639c:	40003400 	.word	0x40003400

080063a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68d8      	ldr	r0, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	1c99      	adds	r1, r3, #2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80063b8:	b282      	uxth	r2, r0
 80063ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d113      	bne.n	80063fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff ff4a 	bl	8006290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a20      	ldr	r2, [pc, #128]	; (8006494 <I2SEx_RxISR_I2SExt+0x90>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d101      	bne.n	800641a <I2SEx_RxISR_I2SExt+0x16>
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <I2SEx_RxISR_I2SExt+0x94>)
 8006418:	e001      	b.n	800641e <I2SEx_RxISR_I2SExt+0x1a>
 800641a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800641e:	68d8      	ldr	r0, [r3, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	1c99      	adds	r1, r3, #2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	62d1      	str	r1, [r2, #44]	; 0x2c
 800642a:	b282      	uxth	r2, r0
 800642c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d121      	bne.n	800648a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a12      	ldr	r2, [pc, #72]	; (8006494 <I2SEx_RxISR_I2SExt+0x90>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d101      	bne.n	8006454 <I2SEx_RxISR_I2SExt+0x50>
 8006450:	4b11      	ldr	r3, [pc, #68]	; (8006498 <I2SEx_RxISR_I2SExt+0x94>)
 8006452:	e001      	b.n	8006458 <I2SEx_RxISR_I2SExt+0x54>
 8006454:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	490d      	ldr	r1, [pc, #52]	; (8006494 <I2SEx_RxISR_I2SExt+0x90>)
 8006460:	428b      	cmp	r3, r1
 8006462:	d101      	bne.n	8006468 <I2SEx_RxISR_I2SExt+0x64>
 8006464:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <I2SEx_RxISR_I2SExt+0x94>)
 8006466:	e001      	b.n	800646c <I2SEx_RxISR_I2SExt+0x68>
 8006468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800646c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006470:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff ff03 	bl	8006290 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40003800 	.word	0x40003800
 8006498:	40003400 	.word	0x40003400

0800649c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e264      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d075      	beq.n	80065a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064ba:	4ba3      	ldr	r3, [pc, #652]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d00c      	beq.n	80064e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064c6:	4ba0      	ldr	r3, [pc, #640]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d112      	bne.n	80064f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064d2:	4b9d      	ldr	r3, [pc, #628]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064de:	d10b      	bne.n	80064f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e0:	4b99      	ldr	r3, [pc, #612]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d05b      	beq.n	80065a4 <HAL_RCC_OscConfig+0x108>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d157      	bne.n	80065a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e23f      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006500:	d106      	bne.n	8006510 <HAL_RCC_OscConfig+0x74>
 8006502:	4b91      	ldr	r3, [pc, #580]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a90      	ldr	r2, [pc, #576]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e01d      	b.n	800654c <HAL_RCC_OscConfig+0xb0>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006518:	d10c      	bne.n	8006534 <HAL_RCC_OscConfig+0x98>
 800651a:	4b8b      	ldr	r3, [pc, #556]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a8a      	ldr	r2, [pc, #552]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4b88      	ldr	r3, [pc, #544]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a87      	ldr	r2, [pc, #540]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e00b      	b.n	800654c <HAL_RCC_OscConfig+0xb0>
 8006534:	4b84      	ldr	r3, [pc, #528]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a83      	ldr	r2, [pc, #524]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 800653a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4b81      	ldr	r3, [pc, #516]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a80      	ldr	r2, [pc, #512]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800654a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d013      	beq.n	800657c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006554:	f7fb fd8e 	bl	8002074 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800655c:	f7fb fd8a 	bl	8002074 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e204      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	4b76      	ldr	r3, [pc, #472]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0xc0>
 800657a:	e014      	b.n	80065a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657c:	f7fb fd7a 	bl	8002074 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006584:	f7fb fd76 	bl	8002074 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	; 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e1f0      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006596:	4b6c      	ldr	r3, [pc, #432]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <HAL_RCC_OscConfig+0xe8>
 80065a2:	e000      	b.n	80065a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d063      	beq.n	800667a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065b2:	4b65      	ldr	r3, [pc, #404]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 030c 	and.w	r3, r3, #12
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065be:	4b62      	ldr	r3, [pc, #392]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d11c      	bne.n	8006604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065ca:	4b5f      	ldr	r3, [pc, #380]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d116      	bne.n	8006604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065d6:	4b5c      	ldr	r3, [pc, #368]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <HAL_RCC_OscConfig+0x152>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d001      	beq.n	80065ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e1c4      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ee:	4b56      	ldr	r3, [pc, #344]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	4952      	ldr	r1, [pc, #328]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006602:	e03a      	b.n	800667a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d020      	beq.n	800664e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800660c:	4b4f      	ldr	r3, [pc, #316]	; (800674c <HAL_RCC_OscConfig+0x2b0>)
 800660e:	2201      	movs	r2, #1
 8006610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006612:	f7fb fd2f 	bl	8002074 <HAL_GetTick>
 8006616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800661a:	f7fb fd2b 	bl	8002074 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e1a5      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662c:	4b46      	ldr	r3, [pc, #280]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006638:	4b43      	ldr	r3, [pc, #268]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4940      	ldr	r1, [pc, #256]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	4313      	orrs	r3, r2
 800664a:	600b      	str	r3, [r1, #0]
 800664c:	e015      	b.n	800667a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800664e:	4b3f      	ldr	r3, [pc, #252]	; (800674c <HAL_RCC_OscConfig+0x2b0>)
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006654:	f7fb fd0e 	bl	8002074 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800665c:	f7fb fd0a 	bl	8002074 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e184      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f0      	bne.n	800665c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d030      	beq.n	80066e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800668e:	4b30      	ldr	r3, [pc, #192]	; (8006750 <HAL_RCC_OscConfig+0x2b4>)
 8006690:	2201      	movs	r2, #1
 8006692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fb fcee 	bl	8002074 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800669c:	f7fb fcea 	bl	8002074 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e164      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ae:	4b26      	ldr	r3, [pc, #152]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <HAL_RCC_OscConfig+0x200>
 80066ba:	e015      	b.n	80066e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066bc:	4b24      	ldr	r3, [pc, #144]	; (8006750 <HAL_RCC_OscConfig+0x2b4>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c2:	f7fb fcd7 	bl	8002074 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066ca:	f7fb fcd3 	bl	8002074 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e14d      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066dc:	4b1a      	ldr	r3, [pc, #104]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80066de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1f0      	bne.n	80066ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a0 	beq.w	8006836 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066f6:	2300      	movs	r3, #0
 80066f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10f      	bne.n	8006726 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	4a0e      	ldr	r2, [pc, #56]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006714:	6413      	str	r3, [r2, #64]	; 0x40
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <HAL_RCC_OscConfig+0x2ac>)
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671e:	60bb      	str	r3, [r7, #8]
 8006720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006722:	2301      	movs	r3, #1
 8006724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <HAL_RCC_OscConfig+0x2b8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d121      	bne.n	8006776 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006732:	4b08      	ldr	r3, [pc, #32]	; (8006754 <HAL_RCC_OscConfig+0x2b8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a07      	ldr	r2, [pc, #28]	; (8006754 <HAL_RCC_OscConfig+0x2b8>)
 8006738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800673e:	f7fb fc99 	bl	8002074 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006744:	e011      	b.n	800676a <HAL_RCC_OscConfig+0x2ce>
 8006746:	bf00      	nop
 8006748:	40023800 	.word	0x40023800
 800674c:	42470000 	.word	0x42470000
 8006750:	42470e80 	.word	0x42470e80
 8006754:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006758:	f7fb fc8c 	bl	8002074 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e106      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676a:	4b85      	ldr	r3, [pc, #532]	; (8006980 <HAL_RCC_OscConfig+0x4e4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0f0      	beq.n	8006758 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d106      	bne.n	800678c <HAL_RCC_OscConfig+0x2f0>
 800677e:	4b81      	ldr	r3, [pc, #516]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	4a80      	ldr	r2, [pc, #512]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 8006784:	f043 0301 	orr.w	r3, r3, #1
 8006788:	6713      	str	r3, [r2, #112]	; 0x70
 800678a:	e01c      	b.n	80067c6 <HAL_RCC_OscConfig+0x32a>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b05      	cmp	r3, #5
 8006792:	d10c      	bne.n	80067ae <HAL_RCC_OscConfig+0x312>
 8006794:	4b7b      	ldr	r3, [pc, #492]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 8006796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006798:	4a7a      	ldr	r2, [pc, #488]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 800679a:	f043 0304 	orr.w	r3, r3, #4
 800679e:	6713      	str	r3, [r2, #112]	; 0x70
 80067a0:	4b78      	ldr	r3, [pc, #480]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	4a77      	ldr	r2, [pc, #476]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	6713      	str	r3, [r2, #112]	; 0x70
 80067ac:	e00b      	b.n	80067c6 <HAL_RCC_OscConfig+0x32a>
 80067ae:	4b75      	ldr	r3, [pc, #468]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	4a74      	ldr	r2, [pc, #464]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ba:	4b72      	ldr	r3, [pc, #456]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	4a71      	ldr	r2, [pc, #452]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80067c0:	f023 0304 	bic.w	r3, r3, #4
 80067c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d015      	beq.n	80067fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ce:	f7fb fc51 	bl	8002074 <HAL_GetTick>
 80067d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d4:	e00a      	b.n	80067ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067d6:	f7fb fc4d 	bl	8002074 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e0c5      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ec:	4b65      	ldr	r3, [pc, #404]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0ee      	beq.n	80067d6 <HAL_RCC_OscConfig+0x33a>
 80067f8:	e014      	b.n	8006824 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067fa:	f7fb fc3b 	bl	8002074 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006800:	e00a      	b.n	8006818 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006802:	f7fb fc37 	bl	8002074 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006810:	4293      	cmp	r3, r2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e0af      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006818:	4b5a      	ldr	r3, [pc, #360]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 800681a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1ee      	bne.n	8006802 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d105      	bne.n	8006836 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800682a:	4b56      	ldr	r3, [pc, #344]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	4a55      	ldr	r2, [pc, #340]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 8006830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 809b 	beq.w	8006976 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006840:	4b50      	ldr	r3, [pc, #320]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 030c 	and.w	r3, r3, #12
 8006848:	2b08      	cmp	r3, #8
 800684a:	d05c      	beq.n	8006906 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d141      	bne.n	80068d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006854:	4b4c      	ldr	r3, [pc, #304]	; (8006988 <HAL_RCC_OscConfig+0x4ec>)
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685a:	f7fb fc0b 	bl	8002074 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006862:	f7fb fc07 	bl	8002074 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e081      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1f0      	bne.n	8006862 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	019b      	lsls	r3, r3, #6
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	3b01      	subs	r3, #1
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a2:	061b      	lsls	r3, r3, #24
 80068a4:	4937      	ldr	r1, [pc, #220]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068aa:	4b37      	ldr	r3, [pc, #220]	; (8006988 <HAL_RCC_OscConfig+0x4ec>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b0:	f7fb fbe0 	bl	8002074 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068b8:	f7fb fbdc 	bl	8002074 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e056      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ca:	4b2e      	ldr	r3, [pc, #184]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0x41c>
 80068d6:	e04e      	b.n	8006976 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068d8:	4b2b      	ldr	r3, [pc, #172]	; (8006988 <HAL_RCC_OscConfig+0x4ec>)
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068de:	f7fb fbc9 	bl	8002074 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e6:	f7fb fbc5 	bl	8002074 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e03f      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068f8:	4b22      	ldr	r3, [pc, #136]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1f0      	bne.n	80068e6 <HAL_RCC_OscConfig+0x44a>
 8006904:	e037      	b.n	8006976 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e032      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <HAL_RCC_OscConfig+0x4e8>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d028      	beq.n	8006972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d121      	bne.n	8006972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006938:	429a      	cmp	r2, r3
 800693a:	d11a      	bne.n	8006972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006942:	4013      	ands	r3, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006948:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800694a:	4293      	cmp	r3, r2
 800694c:	d111      	bne.n	8006972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	3b01      	subs	r3, #1
 800695c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800695e:	429a      	cmp	r2, r3
 8006960:	d107      	bne.n	8006972 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800696e:	429a      	cmp	r2, r3
 8006970:	d001      	beq.n	8006976 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40007000 	.word	0x40007000
 8006984:	40023800 	.word	0x40023800
 8006988:	42470060 	.word	0x42470060

0800698c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e0cc      	b.n	8006b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069a0:	4b68      	ldr	r3, [pc, #416]	; (8006b44 <HAL_RCC_ClockConfig+0x1b8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d90c      	bls.n	80069c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ae:	4b65      	ldr	r3, [pc, #404]	; (8006b44 <HAL_RCC_ClockConfig+0x1b8>)
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b6:	4b63      	ldr	r3, [pc, #396]	; (8006b44 <HAL_RCC_ClockConfig+0x1b8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0b8      	b.n	8006b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d020      	beq.n	8006a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069e0:	4b59      	ldr	r3, [pc, #356]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	4a58      	ldr	r2, [pc, #352]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069f8:	4b53      	ldr	r3, [pc, #332]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	4a52      	ldr	r2, [pc, #328]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a04:	4b50      	ldr	r3, [pc, #320]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	494d      	ldr	r1, [pc, #308]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d044      	beq.n	8006aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d107      	bne.n	8006a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2a:	4b47      	ldr	r3, [pc, #284]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d119      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e07f      	b.n	8006b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d003      	beq.n	8006a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d107      	bne.n	8006a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a4a:	4b3f      	ldr	r3, [pc, #252]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e06f      	b.n	8006b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a5a:	4b3b      	ldr	r3, [pc, #236]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e067      	b.n	8006b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a6a:	4b37      	ldr	r3, [pc, #220]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f023 0203 	bic.w	r2, r3, #3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	4934      	ldr	r1, [pc, #208]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a7c:	f7fb fafa 	bl	8002074 <HAL_GetTick>
 8006a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a82:	e00a      	b.n	8006a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a84:	f7fb faf6 	bl	8002074 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e04f      	b.n	8006b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9a:	4b2b      	ldr	r3, [pc, #172]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 020c 	and.w	r2, r3, #12
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d1eb      	bne.n	8006a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006aac:	4b25      	ldr	r3, [pc, #148]	; (8006b44 <HAL_RCC_ClockConfig+0x1b8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d20c      	bcs.n	8006ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aba:	4b22      	ldr	r3, [pc, #136]	; (8006b44 <HAL_RCC_ClockConfig+0x1b8>)
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac2:	4b20      	ldr	r3, [pc, #128]	; (8006b44 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d001      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e032      	b.n	8006b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d008      	beq.n	8006af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	4916      	ldr	r1, [pc, #88]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	490e      	ldr	r1, [pc, #56]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b12:	f000 f821 	bl	8006b58 <HAL_RCC_GetSysClockFreq>
 8006b16:	4602      	mov	r2, r0
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	490a      	ldr	r1, [pc, #40]	; (8006b4c <HAL_RCC_ClockConfig+0x1c0>)
 8006b24:	5ccb      	ldrb	r3, [r1, r3]
 8006b26:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2a:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b2e:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <HAL_RCC_ClockConfig+0x1c8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fb fa5a 	bl	8001fec <HAL_InitTick>

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	40023c00 	.word	0x40023c00
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	0800c4e0 	.word	0x0800c4e0
 8006b50:	20000000 	.word	0x20000000
 8006b54:	20000004 	.word	0x20000004

08006b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b70:	4b67      	ldr	r3, [pc, #412]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 030c 	and.w	r3, r3, #12
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d00d      	beq.n	8006b98 <HAL_RCC_GetSysClockFreq+0x40>
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	f200 80bd 	bhi.w	8006cfc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_RCC_GetSysClockFreq+0x34>
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d003      	beq.n	8006b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b8a:	e0b7      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b8c:	4b61      	ldr	r3, [pc, #388]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b8e:	60bb      	str	r3, [r7, #8]
       break;
 8006b90:	e0b7      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b92:	4b61      	ldr	r3, [pc, #388]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006b94:	60bb      	str	r3, [r7, #8]
      break;
 8006b96:	e0b4      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b98:	4b5d      	ldr	r3, [pc, #372]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ba2:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d04d      	beq.n	8006c4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bae:	4b58      	ldr	r3, [pc, #352]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	099b      	lsrs	r3, r3, #6
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bbe:	f04f 0100 	mov.w	r1, #0
 8006bc2:	ea02 0800 	and.w	r8, r2, r0
 8006bc6:	ea03 0901 	and.w	r9, r3, r1
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	014b      	lsls	r3, r1, #5
 8006bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006bdc:	0142      	lsls	r2, r0, #5
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	ebb0 0008 	subs.w	r0, r0, r8
 8006be6:	eb61 0109 	sbc.w	r1, r1, r9
 8006bea:	f04f 0200 	mov.w	r2, #0
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	018b      	lsls	r3, r1, #6
 8006bf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006bf8:	0182      	lsls	r2, r0, #6
 8006bfa:	1a12      	subs	r2, r2, r0
 8006bfc:	eb63 0301 	sbc.w	r3, r3, r1
 8006c00:	f04f 0000 	mov.w	r0, #0
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	00d9      	lsls	r1, r3, #3
 8006c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c0e:	00d0      	lsls	r0, r2, #3
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	eb12 0208 	adds.w	r2, r2, r8
 8006c18:	eb43 0309 	adc.w	r3, r3, r9
 8006c1c:	f04f 0000 	mov.w	r0, #0
 8006c20:	f04f 0100 	mov.w	r1, #0
 8006c24:	0259      	lsls	r1, r3, #9
 8006c26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006c2a:	0250      	lsls	r0, r2, #9
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4610      	mov	r0, r2
 8006c32:	4619      	mov	r1, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	f7f9 fac4 	bl	80001c8 <__aeabi_uldivmod>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4613      	mov	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	e04a      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c4a:	4b31      	ldr	r3, [pc, #196]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	099b      	lsrs	r3, r3, #6
 8006c50:	461a      	mov	r2, r3
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c5a:	f04f 0100 	mov.w	r1, #0
 8006c5e:	ea02 0400 	and.w	r4, r2, r0
 8006c62:	ea03 0501 	and.w	r5, r3, r1
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	014b      	lsls	r3, r1, #5
 8006c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c78:	0142      	lsls	r2, r0, #5
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	1b00      	subs	r0, r0, r4
 8006c80:	eb61 0105 	sbc.w	r1, r1, r5
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	018b      	lsls	r3, r1, #6
 8006c8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c92:	0182      	lsls	r2, r0, #6
 8006c94:	1a12      	subs	r2, r2, r0
 8006c96:	eb63 0301 	sbc.w	r3, r3, r1
 8006c9a:	f04f 0000 	mov.w	r0, #0
 8006c9e:	f04f 0100 	mov.w	r1, #0
 8006ca2:	00d9      	lsls	r1, r3, #3
 8006ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ca8:	00d0      	lsls	r0, r2, #3
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	1912      	adds	r2, r2, r4
 8006cb0:	eb45 0303 	adc.w	r3, r5, r3
 8006cb4:	f04f 0000 	mov.w	r0, #0
 8006cb8:	f04f 0100 	mov.w	r1, #0
 8006cbc:	0299      	lsls	r1, r3, #10
 8006cbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006cc2:	0290      	lsls	r0, r2, #10
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4619      	mov	r1, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	f7f9 fa78 	bl	80001c8 <__aeabi_uldivmod>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4613      	mov	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	3301      	adds	r3, #1
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf8:	60bb      	str	r3, [r7, #8]
      break;
 8006cfa:	e002      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006cfe:	60bb      	str	r3, [r7, #8]
      break;
 8006d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d02:	68bb      	ldr	r3, [r7, #8]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006d0e:	bf00      	nop
 8006d10:	40023800 	.word	0x40023800
 8006d14:	00f42400 	.word	0x00f42400
 8006d18:	007a1200 	.word	0x007a1200

08006d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000000 	.word	0x20000000

08006d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d38:	f7ff fff0 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	0a9b      	lsrs	r3, r3, #10
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4903      	ldr	r1, [pc, #12]	; (8006d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40023800 	.word	0x40023800
 8006d58:	0800c4f0 	.word	0x0800c4f0

08006d5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d105      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d035      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d84:	4b62      	ldr	r3, [pc, #392]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d8a:	f7fb f973 	bl	8002074 <HAL_GetTick>
 8006d8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d90:	e008      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d92:	f7fb f96f 	bl	8002074 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e0b0      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006da4:	4b5b      	ldr	r3, [pc, #364]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f0      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	019a      	lsls	r2, r3, #6
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	071b      	lsls	r3, r3, #28
 8006dbc:	4955      	ldr	r1, [pc, #340]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006dc4:	4b52      	ldr	r3, [pc, #328]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dca:	f7fb f953 	bl	8002074 <HAL_GetTick>
 8006dce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006dd2:	f7fb f94f 	bl	8002074 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e090      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006de4:	4b4b      	ldr	r3, [pc, #300]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8083 	beq.w	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	4b44      	ldr	r3, [pc, #272]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	4a43      	ldr	r2, [pc, #268]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e0e:	4b41      	ldr	r3, [pc, #260]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e1a:	4b3f      	ldr	r3, [pc, #252]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a3e      	ldr	r2, [pc, #248]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e26:	f7fb f925 	bl	8002074 <HAL_GetTick>
 8006e2a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e2c:	e008      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e2e:	f7fb f921 	bl	8002074 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e062      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e40:	4b35      	ldr	r3, [pc, #212]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0f0      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e4c:	4b31      	ldr	r3, [pc, #196]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e54:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d02f      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d028      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e74:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e7a:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e80:	4a24      	ldr	r2, [pc, #144]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e86:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d114      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e92:	f7fb f8ef 	bl	8002074 <HAL_GetTick>
 8006e96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e98:	e00a      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e9a:	f7fb f8eb 	bl	8002074 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d901      	bls.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e02a      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb0:	4b18      	ldr	r3, [pc, #96]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0ee      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec8:	d10d      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ede:	490d      	ldr	r1, [pc, #52]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	608b      	str	r3, [r1, #8]
 8006ee4:	e005      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	4a0a      	ldr	r2, [pc, #40]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006eec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ef0:	6093      	str	r3, [r2, #8]
 8006ef2:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006efe:	4905      	ldr	r1, [pc, #20]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	42470068 	.word	0x42470068
 8006f14:	40023800 	.word	0x40023800
 8006f18:	40007000 	.word	0x40007000
 8006f1c:	42470e40 	.word	0x42470e40

08006f20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d13e      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006f3e:	4b23      	ldr	r3, [pc, #140]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d005      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d12f      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f54:	4b1e      	ldr	r3, [pc, #120]	; (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f56:	617b      	str	r3, [r7, #20]
          break;
 8006f58:	e02f      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f5a:	4b1c      	ldr	r3, [pc, #112]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f66:	d108      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f68:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f70:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	e007      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f82:	4a15      	ldr	r2, [pc, #84]	; (8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f8a:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f90:	099b      	lsrs	r3, r3, #6
 8006f92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	fb02 f303 	mul.w	r3, r2, r3
 8006f9c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa4:	0f1b      	lsrs	r3, r3, #28
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]
          break;
 8006fb2:	e002      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
          break;
 8006fb8:	bf00      	nop
        }
      }
      break;
 8006fba:	bf00      	nop
    }
  }
  return frequency;
 8006fbc:	697b      	ldr	r3, [r7, #20]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	00bb8000 	.word	0x00bb8000
 8006fd4:	007a1200 	.word	0x007a1200
 8006fd8:	00f42400 	.word	0x00f42400

08006fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e041      	b.n	8007072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fa fef0 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f000 fa96 	bl	800754c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d001      	beq.n	8007094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e04e      	b.n	8007132 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a23      	ldr	r2, [pc, #140]	; (8007140 <HAL_TIM_Base_Start_IT+0xc4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d022      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070be:	d01d      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a1f      	ldr	r2, [pc, #124]	; (8007144 <HAL_TIM_Base_Start_IT+0xc8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d018      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <HAL_TIM_Base_Start_IT+0xcc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1c      	ldr	r2, [pc, #112]	; (800714c <HAL_TIM_Base_Start_IT+0xd0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00e      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1b      	ldr	r2, [pc, #108]	; (8007150 <HAL_TIM_Base_Start_IT+0xd4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d009      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a19      	ldr	r2, [pc, #100]	; (8007154 <HAL_TIM_Base_Start_IT+0xd8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a18      	ldr	r2, [pc, #96]	; (8007158 <HAL_TIM_Base_Start_IT+0xdc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d111      	bne.n	8007120 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b06      	cmp	r3, #6
 800710c:	d010      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0201 	orr.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711e:	e007      	b.n	8007130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40010400 	.word	0x40010400
 8007154:	40014000 	.word	0x40014000
 8007158:	40001800 	.word	0x40001800

0800715c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b02      	cmp	r3, #2
 8007170:	d122      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b02      	cmp	r3, #2
 800717e:	d11b      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0202 	mvn.w	r2, #2
 8007188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f9b5 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 80071a4:	e005      	b.n	80071b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9a7 	bl	80074fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f9b8 	bl	8007522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d122      	bne.n	800720c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d11b      	bne.n	800720c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0204 	mvn.w	r2, #4
 80071dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f98b 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 80071f8:	e005      	b.n	8007206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f97d 	bl	80074fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f98e 	bl	8007522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b08      	cmp	r3, #8
 8007218:	d122      	bne.n	8007260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b08      	cmp	r3, #8
 8007226:	d11b      	bne.n	8007260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0208 	mvn.w	r2, #8
 8007230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2204      	movs	r2, #4
 8007236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f961 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 800724c:	e005      	b.n	800725a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f953 	bl	80074fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f964 	bl	8007522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b10      	cmp	r3, #16
 800726c:	d122      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0310 	and.w	r3, r3, #16
 8007278:	2b10      	cmp	r3, #16
 800727a:	d11b      	bne.n	80072b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0210 	mvn.w	r2, #16
 8007284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2208      	movs	r2, #8
 800728a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f937 	bl	800750e <HAL_TIM_IC_CaptureCallback>
 80072a0:	e005      	b.n	80072ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f929 	bl	80074fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f93a 	bl	8007522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d10e      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d107      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0201 	mvn.w	r2, #1
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7f9 fdda 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d10e      	bne.n	800730c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f8:	2b80      	cmp	r3, #128	; 0x80
 80072fa:	d107      	bne.n	800730c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fae0 	bl	80078cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b40      	cmp	r3, #64	; 0x40
 8007318:	d10e      	bne.n	8007338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d107      	bne.n	8007338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f8ff 	bl	8007536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b20      	cmp	r3, #32
 8007344:	d10e      	bne.n	8007364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b20      	cmp	r3, #32
 8007352:	d107      	bne.n	8007364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0220 	mvn.w	r2, #32
 800735c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 faaa 	bl	80078b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_TIM_ConfigClockSource+0x1c>
 8007384:	2302      	movs	r3, #2
 8007386:	e0b4      	b.n	80074f2 <HAL_TIM_ConfigClockSource+0x186>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c0:	d03e      	beq.n	8007440 <HAL_TIM_ConfigClockSource+0xd4>
 80073c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c6:	f200 8087 	bhi.w	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
 80073ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ce:	f000 8086 	beq.w	80074de <HAL_TIM_ConfigClockSource+0x172>
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d6:	d87f      	bhi.n	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
 80073d8:	2b70      	cmp	r3, #112	; 0x70
 80073da:	d01a      	beq.n	8007412 <HAL_TIM_ConfigClockSource+0xa6>
 80073dc:	2b70      	cmp	r3, #112	; 0x70
 80073de:	d87b      	bhi.n	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
 80073e0:	2b60      	cmp	r3, #96	; 0x60
 80073e2:	d050      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x11a>
 80073e4:	2b60      	cmp	r3, #96	; 0x60
 80073e6:	d877      	bhi.n	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
 80073e8:	2b50      	cmp	r3, #80	; 0x50
 80073ea:	d03c      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0xfa>
 80073ec:	2b50      	cmp	r3, #80	; 0x50
 80073ee:	d873      	bhi.n	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	2b40      	cmp	r3, #64	; 0x40
 80073f2:	d058      	beq.n	80074a6 <HAL_TIM_ConfigClockSource+0x13a>
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d86f      	bhi.n	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	2b30      	cmp	r3, #48	; 0x30
 80073fa:	d064      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0x15a>
 80073fc:	2b30      	cmp	r3, #48	; 0x30
 80073fe:	d86b      	bhi.n	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007400:	2b20      	cmp	r3, #32
 8007402:	d060      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007404:	2b20      	cmp	r3, #32
 8007406:	d867      	bhi.n	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d05c      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0x15a>
 800740c:	2b10      	cmp	r3, #16
 800740e:	d05a      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007410:	e062      	b.n	80074d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6899      	ldr	r1, [r3, #8]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f000 f9ad 	bl	8007780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	609a      	str	r2, [r3, #8]
      break;
 800743e:	e04f      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6818      	ldr	r0, [r3, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6899      	ldr	r1, [r3, #8]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f000 f996 	bl	8007780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007462:	609a      	str	r2, [r3, #8]
      break;
 8007464:	e03c      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6859      	ldr	r1, [r3, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	461a      	mov	r2, r3
 8007474:	f000 f90a 	bl	800768c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2150      	movs	r1, #80	; 0x50
 800747e:	4618      	mov	r0, r3
 8007480:	f000 f963 	bl	800774a <TIM_ITRx_SetConfig>
      break;
 8007484:	e02c      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	6859      	ldr	r1, [r3, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	461a      	mov	r2, r3
 8007494:	f000 f929 	bl	80076ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2160      	movs	r1, #96	; 0x60
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f953 	bl	800774a <TIM_ITRx_SetConfig>
      break;
 80074a4:	e01c      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	6859      	ldr	r1, [r3, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f000 f8ea 	bl	800768c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2140      	movs	r1, #64	; 0x40
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f943 	bl	800774a <TIM_ITRx_SetConfig>
      break;
 80074c4:	e00c      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4619      	mov	r1, r3
 80074d0:	4610      	mov	r0, r2
 80074d2:	f000 f93a 	bl	800774a <TIM_ITRx_SetConfig>
      break;
 80074d6:	e003      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
      break;
 80074dc:	e000      	b.n	80074e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a40      	ldr	r2, [pc, #256]	; (8007660 <TIM_Base_SetConfig+0x114>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d013      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756a:	d00f      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a3d      	ldr	r2, [pc, #244]	; (8007664 <TIM_Base_SetConfig+0x118>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00b      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a3c      	ldr	r2, [pc, #240]	; (8007668 <TIM_Base_SetConfig+0x11c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d007      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3b      	ldr	r2, [pc, #236]	; (800766c <TIM_Base_SetConfig+0x120>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a3a      	ldr	r2, [pc, #232]	; (8007670 <TIM_Base_SetConfig+0x124>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d108      	bne.n	800759e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a2f      	ldr	r2, [pc, #188]	; (8007660 <TIM_Base_SetConfig+0x114>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d02b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ac:	d027      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2c      	ldr	r2, [pc, #176]	; (8007664 <TIM_Base_SetConfig+0x118>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d023      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2b      	ldr	r2, [pc, #172]	; (8007668 <TIM_Base_SetConfig+0x11c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01f      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a2a      	ldr	r2, [pc, #168]	; (800766c <TIM_Base_SetConfig+0x120>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a29      	ldr	r2, [pc, #164]	; (8007670 <TIM_Base_SetConfig+0x124>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d017      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a28      	ldr	r2, [pc, #160]	; (8007674 <TIM_Base_SetConfig+0x128>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a27      	ldr	r2, [pc, #156]	; (8007678 <TIM_Base_SetConfig+0x12c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00f      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a26      	ldr	r2, [pc, #152]	; (800767c <TIM_Base_SetConfig+0x130>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a25      	ldr	r2, [pc, #148]	; (8007680 <TIM_Base_SetConfig+0x134>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d007      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a24      	ldr	r2, [pc, #144]	; (8007684 <TIM_Base_SetConfig+0x138>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d003      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a23      	ldr	r2, [pc, #140]	; (8007688 <TIM_Base_SetConfig+0x13c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d108      	bne.n	8007610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <TIM_Base_SetConfig+0x114>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_Base_SetConfig+0xf8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a0c      	ldr	r2, [pc, #48]	; (8007670 <TIM_Base_SetConfig+0x124>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d103      	bne.n	800764c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	615a      	str	r2, [r3, #20]
}
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40010000 	.word	0x40010000
 8007664:	40000400 	.word	0x40000400
 8007668:	40000800 	.word	0x40000800
 800766c:	40000c00 	.word	0x40000c00
 8007670:	40010400 	.word	0x40010400
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800
 8007680:	40001800 	.word	0x40001800
 8007684:	40001c00 	.word	0x40001c00
 8007688:	40002000 	.word	0x40002000

0800768c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f023 0201 	bic.w	r2, r3, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f023 030a 	bic.w	r3, r3, #10
 80076c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	621a      	str	r2, [r3, #32]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b087      	sub	sp, #28
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 0210 	bic.w	r2, r3, #16
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	031b      	lsls	r3, r3, #12
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	4313      	orrs	r3, r2
 800771e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007726:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	f043 0307 	orr.w	r3, r3, #7
 800776c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	609a      	str	r2, [r3, #8]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800779a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	431a      	orrs	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	609a      	str	r2, [r3, #8]
}
 80077b4:	bf00      	nop
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e05a      	b.n	800788e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a21      	ldr	r2, [pc, #132]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d022      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007824:	d01d      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1d      	ldr	r2, [pc, #116]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d018      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1b      	ldr	r2, [pc, #108]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d013      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1a      	ldr	r2, [pc, #104]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00e      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a18      	ldr	r2, [pc, #96]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d009      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a17      	ldr	r2, [pc, #92]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d004      	beq.n	8007862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a15      	ldr	r2, [pc, #84]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d10c      	bne.n	800787c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	4313      	orrs	r3, r2
 8007872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40010000 	.word	0x40010000
 80078a0:	40000400 	.word	0x40000400
 80078a4:	40000800 	.word	0x40000800
 80078a8:	40000c00 	.word	0x40000c00
 80078ac:	40010400 	.word	0x40010400
 80078b0:	40014000 	.word	0x40014000
 80078b4:	40001800 	.word	0x40001800

080078b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078e0:	b084      	sub	sp, #16
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	f107 001c 	add.w	r0, r7, #28
 80078ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d122      	bne.n	800793e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800790c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007922:	2b01      	cmp	r3, #1
 8007924:	d105      	bne.n	8007932 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9a0 	bl	8007c78 <USB_CoreReset>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]
 800793c:	e01a      	b.n	8007974 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f994 	bl	8007c78 <USB_CoreReset>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
 8007966:	e005      	b.n	8007974 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	2b01      	cmp	r3, #1
 8007978:	d10b      	bne.n	8007992 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f043 0206 	orr.w	r2, r3, #6
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f043 0220 	orr.w	r2, r3, #32
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800799e:	b004      	add	sp, #16
 80079a0:	4770      	bx	lr

080079a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f043 0201 	orr.w	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f023 0201 	bic.w	r2, r3, #1
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a02:	78fb      	ldrb	r3, [r7, #3]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d115      	bne.n	8007a34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a14:	2001      	movs	r0, #1
 8007a16:	f7fa fb39 	bl	800208c <HAL_Delay>
      ms++;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f91a 	bl	8007c5a <USB_GetMode>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d01e      	beq.n	8007a6a <USB_SetCurrentMode+0x84>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b31      	cmp	r3, #49	; 0x31
 8007a30:	d9f0      	bls.n	8007a14 <USB_SetCurrentMode+0x2e>
 8007a32:	e01a      	b.n	8007a6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d115      	bne.n	8007a66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a46:	2001      	movs	r0, #1
 8007a48:	f7fa fb20 	bl	800208c <HAL_Delay>
      ms++;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f901 	bl	8007c5a <USB_GetMode>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <USB_SetCurrentMode+0x84>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b31      	cmp	r3, #49	; 0x31
 8007a62:	d9f0      	bls.n	8007a46 <USB_SetCurrentMode+0x60>
 8007a64:	e001      	b.n	8007a6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e005      	b.n	8007a76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b32      	cmp	r3, #50	; 0x32
 8007a6e:	d101      	bne.n	8007a74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e000      	b.n	8007a76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	019b      	lsls	r3, r3, #6
 8007a92:	f043 0220 	orr.w	r2, r3, #32
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <USB_FlushTxFifo+0x44>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d901      	bls.n	8007aaa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e006      	b.n	8007ab8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d0f1      	beq.n	8007a9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	00030d40 	.word	0x00030d40

08007ac8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2210      	movs	r2, #16
 8007ad8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3301      	adds	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	4a08      	ldr	r2, [pc, #32]	; (8007b04 <USB_FlushRxFifo+0x3c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d901      	bls.n	8007aea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e006      	b.n	8007af8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	d0f1      	beq.n	8007ada <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	00030d40 	.word	0x00030d40

08007b08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b089      	sub	sp, #36	; 0x24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4611      	mov	r1, r2
 8007b14:	461a      	mov	r2, r3
 8007b16:	460b      	mov	r3, r1
 8007b18:	71fb      	strb	r3, [r7, #7]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d123      	bne.n	8007b76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b2e:	88bb      	ldrh	r3, [r7, #4]
 8007b30:	3303      	adds	r3, #3
 8007b32:	089b      	lsrs	r3, r3, #2
 8007b34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b36:	2300      	movs	r3, #0
 8007b38:	61bb      	str	r3, [r7, #24]
 8007b3a:	e018      	b.n	8007b6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	031a      	lsls	r2, r3, #12
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b48:	461a      	mov	r2, r3
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	3301      	adds	r3, #1
 8007b54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	3301      	adds	r3, #1
 8007b66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d3e2      	bcc.n	8007b3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3724      	adds	r7, #36	; 0x24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b08b      	sub	sp, #44	; 0x2c
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	089b      	lsrs	r3, r3, #2
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007baa:	2300      	movs	r3, #0
 8007bac:	623b      	str	r3, [r7, #32]
 8007bae:	e014      	b.n	8007bda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	3301      	adds	r3, #1
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	623b      	str	r3, [r7, #32]
 8007bda:	6a3a      	ldr	r2, [r7, #32]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d3e6      	bcc.n	8007bb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007be2:	8bfb      	ldrh	r3, [r7, #30]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01e      	beq.n	8007c26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f107 0310 	add.w	r3, r7, #16
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	fa22 f303 	lsr.w	r3, r2, r3
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	701a      	strb	r2, [r3, #0]
      i++;
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	3301      	adds	r3, #1
 8007c12:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	3301      	adds	r3, #1
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c1a:	8bfb      	ldrh	r3, [r7, #30]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c20:	8bfb      	ldrh	r3, [r7, #30]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1ea      	bne.n	8007bfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	372c      	adds	r7, #44	; 0x2c
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f003 0301 	and.w	r3, r3, #1
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	4a13      	ldr	r2, [pc, #76]	; (8007cd8 <USB_CoreReset+0x60>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d901      	bls.n	8007c94 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e01a      	b.n	8007cca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	daf3      	bge.n	8007c84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f043 0201 	orr.w	r2, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	4a09      	ldr	r2, [pc, #36]	; (8007cd8 <USB_CoreReset+0x60>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d901      	bls.n	8007cbc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e006      	b.n	8007cca <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d0f1      	beq.n	8007cac <USB_CoreReset+0x34>

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	00030d40 	.word	0x00030d40

08007cdc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cdc:	b084      	sub	sp, #16
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	f107 001c 	add.w	r0, r7, #28
 8007cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d018      	beq.n	8007d60 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d10a      	bne.n	8007d4a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d42:	f043 0304 	orr.w	r3, r3, #4
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	e014      	b.n	8007d74 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d58:	f023 0304 	bic.w	r3, r3, #4
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	e009      	b.n	8007d74 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d6e:	f023 0304 	bic.w	r3, r3, #4
 8007d72:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007d74:	2110      	movs	r1, #16
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff fe82 	bl	8007a80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fea3 	bl	8007ac8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e015      	b.n	8007db4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d94:	461a      	mov	r2, r3
 8007d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da8:	461a      	mov	r2, r3
 8007daa:	2300      	movs	r3, #0
 8007dac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d3e5      	bcc.n	8007d88 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dc8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ddc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a13      	ldr	r2, [pc, #76]	; (8007e30 <USB_HostInit+0x154>)
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <USB_HostInit+0x158>)
 8007de8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007dec:	e009      	b.n	8007e02 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2280      	movs	r2, #128	; 0x80
 8007df2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a10      	ldr	r2, [pc, #64]	; (8007e38 <USB_HostInit+0x15c>)
 8007df8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a0f      	ldr	r2, [pc, #60]	; (8007e3c <USB_HostInit+0x160>)
 8007dfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d105      	bne.n	8007e14 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	f043 0210 	orr.w	r2, r3, #16
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <USB_HostInit+0x164>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e2c:	b004      	add	sp, #16
 8007e2e:	4770      	bx	lr
 8007e30:	01000200 	.word	0x01000200
 8007e34:	00e00300 	.word	0x00e00300
 8007e38:	00600080 	.word	0x00600080
 8007e3c:	004000e0 	.word	0x004000e0
 8007e40:	a3200008 	.word	0xa3200008

08007e44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e62:	f023 0303 	bic.w	r3, r3, #3
 8007e66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	68f9      	ldr	r1, [r7, #12]
 8007e78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d107      	bne.n	8007e96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007e92:	6053      	str	r3, [r2, #4]
 8007e94:	e009      	b.n	8007eaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d106      	bne.n	8007eaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007ea8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ed8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ee8:	2064      	movs	r0, #100	; 0x64
 8007eea:	f7fa f8cf 	bl	800208c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007efa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007efc:	200a      	movs	r0, #10
 8007efe:	f7fa f8c5 	bl	800208c <HAL_Delay>

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d109      	bne.n	8007f50 <USB_DriveVbus+0x44>
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d106      	bne.n	8007f50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5a:	d109      	bne.n	8007f70 <USB_DriveVbus+0x64>
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	0c5b      	lsrs	r3, r3, #17
 8007f9c:	f003 0303 	and.w	r3, r3, #3
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	b29b      	uxth	r3, r3
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
	...

08007fd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	4608      	mov	r0, r1
 8007fda:	4611      	mov	r1, r2
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4603      	mov	r3, r0
 8007fe0:	70fb      	strb	r3, [r7, #3]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	70bb      	strb	r3, [r7, #2]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffe:	461a      	mov	r2, r3
 8008000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008004:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800800a:	2b03      	cmp	r3, #3
 800800c:	d87e      	bhi.n	800810c <USB_HC_Init+0x13c>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USB_HC_Init+0x44>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008025 	.word	0x08008025
 8008018:	080080cf 	.word	0x080080cf
 800801c:	08008025 	.word	0x08008025
 8008020:	08008091 	.word	0x08008091
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4413      	add	r3, r2
 800802c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008030:	461a      	mov	r2, r3
 8008032:	f240 439d 	movw	r3, #1181	; 0x49d
 8008036:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008038:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da10      	bge.n	8008062 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	440a      	add	r2, r1
 8008056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800805a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800805e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008060:	e057      	b.n	8008112 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d051      	beq.n	8008112 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	4413      	add	r3, r2
 8008076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	0151      	lsls	r1, r2, #5
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	440a      	add	r2, r1
 8008084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008088:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800808c:	60d3      	str	r3, [r2, #12]
      break;
 800808e:	e040      	b.n	8008112 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	4413      	add	r3, r2
 8008098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809c:	461a      	mov	r2, r3
 800809e:	f240 639d 	movw	r3, #1693	; 0x69d
 80080a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	da34      	bge.n	8008116 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080cc:	e023      	b.n	8008116 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080da:	461a      	mov	r2, r3
 80080dc:	f240 2325 	movw	r3, #549	; 0x225
 80080e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da17      	bge.n	800811a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008104:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008108:	60d3      	str	r3, [r2, #12]
      }
      break;
 800810a:	e006      	b.n	800811a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	77fb      	strb	r3, [r7, #31]
      break;
 8008110:	e004      	b.n	800811c <USB_HC_Init+0x14c>
      break;
 8008112:	bf00      	nop
 8008114:	e002      	b.n	800811c <USB_HC_Init+0x14c>
      break;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <USB_HC_Init+0x14c>
      break;
 800811a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008122:	699a      	ldr	r2, [r3, #24]
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	2101      	movs	r1, #1
 800812c:	fa01 f303 	lsl.w	r3, r1, r3
 8008130:	6939      	ldr	r1, [r7, #16]
 8008132:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008136:	4313      	orrs	r3, r2
 8008138:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008146:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800814a:	2b00      	cmp	r3, #0
 800814c:	da03      	bge.n	8008156 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800814e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008152:	61bb      	str	r3, [r7, #24]
 8008154:	e001      	b.n	800815a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff ff0f 	bl	8007f7e <USB_GetHostSpeed>
 8008160:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008162:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008166:	2b02      	cmp	r3, #2
 8008168:	d106      	bne.n	8008178 <USB_HC_Init+0x1a8>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b02      	cmp	r3, #2
 800816e:	d003      	beq.n	8008178 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	e001      	b.n	800817c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800817c:	787b      	ldrb	r3, [r7, #1]
 800817e:	059b      	lsls	r3, r3, #22
 8008180:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008184:	78bb      	ldrb	r3, [r7, #2]
 8008186:	02db      	lsls	r3, r3, #11
 8008188:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800818c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800818e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008192:	049b      	lsls	r3, r3, #18
 8008194:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008198:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800819a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800819c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	0159      	lsls	r1, r3, #5
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	440b      	add	r3, r1
 80081ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081b8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80081ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d10f      	bne.n	80081e2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	78fa      	ldrb	r2, [r7, #3]
 80081d2:	0151      	lsls	r1, r2, #5
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	440a      	add	r2, r1
 80081d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80081e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08c      	sub	sp, #48	; 0x30
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	785b      	ldrb	r3, [r3, #1]
 8008202:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008208:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008212:	2b00      	cmp	r3, #0
 8008214:	d02d      	beq.n	8008272 <USB_HC_StartXfer+0x86>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	791b      	ldrb	r3, [r3, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d129      	bne.n	8008272 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d117      	bne.n	8008254 <USB_HC_StartXfer+0x68>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	79db      	ldrb	r3, [r3, #7]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <USB_HC_StartXfer+0x48>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	79db      	ldrb	r3, [r3, #7]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d10f      	bne.n	8008254 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	4413      	add	r3, r2
 800823c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	6a3a      	ldr	r2, [r7, #32]
 8008248:	440a      	add	r2, r1
 800824a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800824e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008252:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008254:	79fb      	ldrb	r3, [r7, #7]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10b      	bne.n	8008272 <USB_HC_StartXfer+0x86>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	795b      	ldrb	r3, [r3, #5]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d107      	bne.n	8008272 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	4619      	mov	r1, r3
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fa2f 	bl	80086cc <USB_DoPing>
      return HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	e0f8      	b.n	8008464 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d018      	beq.n	80082ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	8912      	ldrh	r2, [r2, #8]
 8008282:	4413      	add	r3, r2
 8008284:	3b01      	subs	r3, #1
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	8912      	ldrh	r2, [r2, #8]
 800828a:	fbb3 f3f2 	udiv	r3, r3, r2
 800828e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008290:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008292:	8b7b      	ldrh	r3, [r7, #26]
 8008294:	429a      	cmp	r2, r3
 8008296:	d90b      	bls.n	80082b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008298:	8b7b      	ldrh	r3, [r7, #26]
 800829a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800829c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	8912      	ldrh	r2, [r2, #8]
 80082a2:	fb02 f203 	mul.w	r2, r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	611a      	str	r2, [r3, #16]
 80082aa:	e001      	b.n	80082b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80082ac:	2301      	movs	r3, #1
 80082ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	78db      	ldrb	r3, [r3, #3]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d007      	beq.n	80082c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	8912      	ldrh	r2, [r2, #8]
 80082be:	fb02 f203 	mul.w	r2, r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	611a      	str	r2, [r3, #16]
 80082c6:	e003      	b.n	80082d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80082d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082da:	04d9      	lsls	r1, r3, #19
 80082dc:	4b63      	ldr	r3, [pc, #396]	; (800846c <USB_HC_StartXfer+0x280>)
 80082de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80082e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	7a9b      	ldrb	r3, [r3, #10]
 80082e6:	075b      	lsls	r3, r3, #29
 80082e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80082ec:	69f9      	ldr	r1, [r7, #28]
 80082ee:	0148      	lsls	r0, r1, #5
 80082f0:	6a39      	ldr	r1, [r7, #32]
 80082f2:	4401      	add	r1, r0
 80082f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80082f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80082fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	68d9      	ldr	r1, [r3, #12]
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	4413      	add	r3, r2
 800830e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008312:	460a      	mov	r2, r1
 8008314:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf0c      	ite	eq
 8008326:	2301      	moveq	r3, #1
 8008328:	2300      	movne	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	4413      	add	r3, r2
 8008336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	69fa      	ldr	r2, [r7, #28]
 800833e:	0151      	lsls	r1, r2, #5
 8008340:	6a3a      	ldr	r2, [r7, #32]
 8008342:	440a      	add	r2, r1
 8008344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008348:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800834c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	4413      	add	r3, r2
 8008356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	7e7b      	ldrb	r3, [r7, #25]
 800835e:	075b      	lsls	r3, r3, #29
 8008360:	69f9      	ldr	r1, [r7, #28]
 8008362:	0148      	lsls	r0, r1, #5
 8008364:	6a39      	ldr	r1, [r7, #32]
 8008366:	4401      	add	r1, r0
 8008368:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800836c:	4313      	orrs	r3, r2
 800836e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	4413      	add	r3, r2
 8008378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008386:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	78db      	ldrb	r3, [r3, #3]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	e003      	b.n	80083a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b6:	461a      	mov	r2, r3
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	e04e      	b.n	8008464 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	78db      	ldrb	r3, [r3, #3]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d149      	bne.n	8008462 <USB_HC_StartXfer+0x276>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d045      	beq.n	8008462 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	79db      	ldrb	r3, [r3, #7]
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d830      	bhi.n	8008440 <USB_HC_StartXfer+0x254>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <USB_HC_StartXfer+0x1f8>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	080083f5 	.word	0x080083f5
 80083e8:	08008419 	.word	0x08008419
 80083ec:	080083f5 	.word	0x080083f5
 80083f0:	08008419 	.word	0x08008419
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	3303      	adds	r3, #3
 80083fa:	089b      	lsrs	r3, r3, #2
 80083fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80083fe:	8afa      	ldrh	r2, [r7, #22]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	b29b      	uxth	r3, r3
 8008406:	429a      	cmp	r2, r3
 8008408:	d91c      	bls.n	8008444 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f043 0220 	orr.w	r2, r3, #32
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	619a      	str	r2, [r3, #24]
        }
        break;
 8008416:	e015      	b.n	8008444 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	3303      	adds	r3, #3
 800841e:	089b      	lsrs	r3, r3, #2
 8008420:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008422:	8afa      	ldrh	r2, [r7, #22]
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	b29b      	uxth	r3, r3
 800842e:	429a      	cmp	r2, r3
 8008430:	d90a      	bls.n	8008448 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	619a      	str	r2, [r3, #24]
        }
        break;
 800843e:	e003      	b.n	8008448 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008440:	bf00      	nop
 8008442:	e002      	b.n	800844a <USB_HC_StartXfer+0x25e>
        break;
 8008444:	bf00      	nop
 8008446:	e000      	b.n	800844a <USB_HC_StartXfer+0x25e>
        break;
 8008448:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	68d9      	ldr	r1, [r3, #12]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	785a      	ldrb	r2, [r3, #1]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	b29b      	uxth	r3, r3
 8008458:	2000      	movs	r0, #0
 800845a:	9000      	str	r0, [sp, #0]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff fb53 	bl	8007b08 <USB_WritePacket>
  }

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3728      	adds	r7, #40	; 0x28
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	1ff80000 	.word	0x1ff80000

08008470 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	b29b      	uxth	r3, r3
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008492:	b480      	push	{r7}
 8008494:	b089      	sub	sp, #36	; 0x24
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80084a2:	78fb      	ldrb	r3, [r7, #3]
 80084a4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	0c9b      	lsrs	r3, r3, #18
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	0fdb      	lsrs	r3, r3, #31
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f003 0320 	and.w	r3, r3, #32
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d104      	bne.n	80084ec <USB_HC_Halt+0x5a>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	e0e8      	b.n	80086be <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <USB_HC_Halt+0x66>
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d173      	bne.n	80085e0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	440a      	add	r2, r1
 800850e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008516:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 80cb 	bne.w	80086bc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d143      	bne.n	80085ba <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	440a      	add	r2, r1
 8008548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800854c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008550:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	440a      	add	r2, r1
 8008568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008570:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	4413      	add	r3, r2
 800857a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	440a      	add	r2, r1
 8008588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800858c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008590:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	3301      	adds	r3, #1
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800859e:	d81d      	bhi.n	80085dc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085b6:	d0ec      	beq.n	8008592 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085b8:	e080      	b.n	80086bc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085da:	e06f      	b.n	80086bc <USB_HC_Halt+0x22a>
            break;
 80085dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085de:	e06d      	b.n	80086bc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	0151      	lsls	r1, r2, #5
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	440a      	add	r2, r1
 80085f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d143      	bne.n	8008698 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	4413      	add	r3, r2
 8008618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	0151      	lsls	r1, r2, #5
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	440a      	add	r2, r1
 8008626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800862a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800862e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	4413      	add	r3, r2
 8008638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	440a      	add	r2, r1
 8008646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800864a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800864e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	4413      	add	r3, r2
 8008658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	440a      	add	r2, r1
 8008666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800866a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800866e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	3301      	adds	r3, #1
 8008674:	61fb      	str	r3, [r7, #28]
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800867c:	d81d      	bhi.n	80086ba <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008694:	d0ec      	beq.n	8008670 <USB_HC_Halt+0x1de>
 8008696:	e011      	b.n	80086bc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	e000      	b.n	80086bc <USB_HC_Halt+0x22a>
          break;
 80086ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3724      	adds	r7, #36	; 0x24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80086e0:	2301      	movs	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	04da      	lsls	r2, r3, #19
 80086e8:	4b15      	ldr	r3, [pc, #84]	; (8008740 <USB_DoPing+0x74>)
 80086ea:	4013      	ands	r3, r2
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008714:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800871c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	4413      	add	r3, r2
 8008726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872a:	461a      	mov	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	1ff80000 	.word	0x1ff80000

08008744 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff f935 	bl	80079c4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800875a:	2110      	movs	r1, #16
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff f98f 	bl	8007a80 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff f9b0 	bl	8007ac8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008768:	2300      	movs	r3, #0
 800876a:	613b      	str	r3, [r7, #16]
 800876c:	e01f      	b.n	80087ae <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4413      	add	r3, r2
 8008776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008784:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800878c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008794:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a2:	461a      	mov	r2, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	3301      	adds	r3, #1
 80087ac:	613b      	str	r3, [r7, #16]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b0f      	cmp	r3, #15
 80087b2:	d9dc      	bls.n	800876e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80087b4:	2300      	movs	r3, #0
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	e034      	b.n	8008824 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ee:	461a      	mov	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	3301      	adds	r3, #1
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008800:	d80c      	bhi.n	800881c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	015a      	lsls	r2, r3, #5
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4413      	add	r3, r2
 800880a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008818:	d0ec      	beq.n	80087f4 <USB_StopHost+0xb0>
 800881a:	e000      	b.n	800881e <USB_StopHost+0xda>
        break;
 800881c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	3301      	adds	r3, #1
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2b0f      	cmp	r3, #15
 8008828:	d9c7      	bls.n	80087ba <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008830:	461a      	mov	r2, r3
 8008832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008836:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800883e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff f8ae 	bl	80079a2 <USB_EnableGlobalInt>

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008854:	4904      	ldr	r1, [pc, #16]	; (8008868 <MX_FATFS_Init+0x18>)
 8008856:	4805      	ldr	r0, [pc, #20]	; (800886c <MX_FATFS_Init+0x1c>)
 8008858:	f003 f84c 	bl	800b8f4 <FATFS_LinkDriver>
 800885c:	4603      	mov	r3, r0
 800885e:	461a      	mov	r2, r3
 8008860:	4b03      	ldr	r3, [pc, #12]	; (8008870 <MX_FATFS_Init+0x20>)
 8008862:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008864:	bf00      	nop
 8008866:	bd80      	pop	{r7, pc}
 8008868:	200012bc 	.word	0x200012bc
 800886c:	0800c500 	.word	0x0800c500
 8008870:	20003324 	.word	0x20003324

08008874 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	4619      	mov	r1, r3
 800889e:	4808      	ldr	r0, [pc, #32]	; (80088c0 <USBH_status+0x34>)
 80088a0:	f000 fe1a 	bl	80094d8 <USBH_MSC_UnitIsReady>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <USBH_status+0x24>
  {
    res = RES_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
 80088ae:	e001      	b.n	80088b4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20003328 	.word	0x20003328

080088c4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b094      	sub	sp, #80	; 0x50
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80088da:	7bf9      	ldrb	r1, [r7, #15]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	4813      	ldr	r0, [pc, #76]	; (8008934 <USBH_read+0x70>)
 80088e6:	f000 fe41 	bl	800956c <USBH_MSC_Read>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d103      	bne.n	80088f8 <USBH_read+0x34>
  {
    res = RES_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80088f6:	e017      	b.n	8008928 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80088f8:	f107 0210 	add.w	r2, r7, #16
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	4619      	mov	r1, r3
 8008900:	480c      	ldr	r0, [pc, #48]	; (8008934 <USBH_read+0x70>)
 8008902:	f000 fe0f 	bl	8009524 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008906:	7f7b      	ldrb	r3, [r7, #29]
 8008908:	2b3a      	cmp	r3, #58	; 0x3a
 800890a:	d005      	beq.n	8008918 <USBH_read+0x54>
 800890c:	2b3a      	cmp	r3, #58	; 0x3a
 800890e:	dc07      	bgt.n	8008920 <USBH_read+0x5c>
 8008910:	2b04      	cmp	r3, #4
 8008912:	d001      	beq.n	8008918 <USBH_read+0x54>
 8008914:	2b28      	cmp	r3, #40	; 0x28
 8008916:	d103      	bne.n	8008920 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008918:	2303      	movs	r3, #3
 800891a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800891e:	e003      	b.n	8008928 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008926:	bf00      	nop
    }
  }

  return res;
 8008928:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800892c:	4618      	mov	r0, r3
 800892e:	3748      	adds	r7, #72	; 0x48
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20003328 	.word	0x20003328

08008938 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b094      	sub	sp, #80	; 0x50
 800893c:	af02      	add	r7, sp, #8
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800894e:	7bf9      	ldrb	r1, [r7, #15]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	4817      	ldr	r0, [pc, #92]	; (80089b8 <USBH_write+0x80>)
 800895a:	f000 fe70 	bl	800963e <USBH_MSC_Write>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d103      	bne.n	800896c <USBH_write+0x34>
  {
    res = RES_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800896a:	e01f      	b.n	80089ac <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800896c:	f107 0210 	add.w	r2, r7, #16
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4619      	mov	r1, r3
 8008974:	4810      	ldr	r0, [pc, #64]	; (80089b8 <USBH_write+0x80>)
 8008976:	f000 fdd5 	bl	8009524 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800897a:	7f7b      	ldrb	r3, [r7, #29]
 800897c:	2b3a      	cmp	r3, #58	; 0x3a
 800897e:	d00d      	beq.n	800899c <USBH_write+0x64>
 8008980:	2b3a      	cmp	r3, #58	; 0x3a
 8008982:	dc0f      	bgt.n	80089a4 <USBH_write+0x6c>
 8008984:	2b28      	cmp	r3, #40	; 0x28
 8008986:	d009      	beq.n	800899c <USBH_write+0x64>
 8008988:	2b28      	cmp	r3, #40	; 0x28
 800898a:	dc0b      	bgt.n	80089a4 <USBH_write+0x6c>
 800898c:	2b04      	cmp	r3, #4
 800898e:	d005      	beq.n	800899c <USBH_write+0x64>
 8008990:	2b27      	cmp	r3, #39	; 0x27
 8008992:	d107      	bne.n	80089a4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008994:	2302      	movs	r3, #2
 8008996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800899a:	e007      	b.n	80089ac <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800899c:	2303      	movs	r3, #3
 800899e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089a2:	e003      	b.n	80089ac <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089aa:	bf00      	nop
    }
  }

  return res;
 80089ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3748      	adds	r7, #72	; 0x48
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20003328 	.word	0x20003328

080089bc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b090      	sub	sp, #64	; 0x40
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	603a      	str	r2, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
 80089c8:	460b      	mov	r3, r1
 80089ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80089d2:	79bb      	ldrb	r3, [r7, #6]
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d852      	bhi.n	8008a7e <USBH_ioctl+0xc2>
 80089d8:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <USBH_ioctl+0x24>)
 80089da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089de:	bf00      	nop
 80089e0:	080089f1 	.word	0x080089f1
 80089e4:	080089f9 	.word	0x080089f9
 80089e8:	08008a23 	.word	0x08008a23
 80089ec:	08008a4f 	.word	0x08008a4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80089f6:	e045      	b.n	8008a84 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80089f8:	f107 0208 	add.w	r2, r7, #8
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	4619      	mov	r1, r3
 8008a00:	4823      	ldr	r0, [pc, #140]	; (8008a90 <USBH_ioctl+0xd4>)
 8008a02:	f000 fd8f 	bl	8009524 <USBH_MSC_GetLUNInfo>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a18:	e034      	b.n	8008a84 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a20:	e030      	b.n	8008a84 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a22:	f107 0208 	add.w	r2, r7, #8
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4819      	ldr	r0, [pc, #100]	; (8008a90 <USBH_ioctl+0xd4>)
 8008a2c:	f000 fd7a 	bl	8009524 <USBH_MSC_GetLUNInfo>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d107      	bne.n	8008a46 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008a36:	8a3b      	ldrh	r3, [r7, #16]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a44:	e01e      	b.n	8008a84 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a4c:	e01a      	b.n	8008a84 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a4e:	f107 0208 	add.w	r2, r7, #8
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	4619      	mov	r1, r3
 8008a56:	480e      	ldr	r0, [pc, #56]	; (8008a90 <USBH_ioctl+0xd4>)
 8008a58:	f000 fd64 	bl	8009524 <USBH_MSC_GetLUNInfo>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d109      	bne.n	8008a76 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008a62:	8a3b      	ldrh	r3, [r7, #16]
 8008a64:	0a5b      	lsrs	r3, r3, #9
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008a74:	e006      	b.n	8008a84 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a7c:	e002      	b.n	8008a84 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008a7e:	2304      	movs	r3, #4
 8008a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008a84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3740      	adds	r7, #64	; 0x40
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20003328 	.word	0x20003328

08008a94 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a94:	b590      	push	{r4, r7, lr}
 8008a96:	b089      	sub	sp, #36	; 0x24
 8008a98:	af04      	add	r7, sp, #16
 8008a9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aa2:	7919      	ldrb	r1, [r3, #4]
 8008aa4:	2350      	movs	r3, #80	; 0x50
 8008aa6:	2206      	movs	r2, #6
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 fc53 	bl	800a354 <USBH_FindInterface>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	2bff      	cmp	r3, #255	; 0xff
 8008ab6:	d002      	beq.n	8008abe <USBH_MSC_InterfaceInit+0x2a>
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d901      	bls.n	8008ac2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e0ef      	b.n	8008ca2 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 fc28 	bl	800a31c <USBH_SelectInterface>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	e0e3      	b.n	8008ca2 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008ae0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008ae4:	f003 fa78 	bl	800bfd8 <malloc>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008afc:	2302      	movs	r3, #2
 8008afe:	e0d0      	b.n	8008ca2 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b04:	2100      	movs	r1, #0
 8008b06:	68b8      	ldr	r0, [r7, #8]
 8008b08:	f003 fa84 	bl	800c014 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	211a      	movs	r1, #26
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b25b      	sxtb	r3, r3
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	da16      	bge.n	8008b52 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	211a      	movs	r1, #26
 8008b2a:	fb01 f303 	mul.w	r3, r1, r3
 8008b2e:	4413      	add	r3, r2
 8008b30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	211a      	movs	r1, #26
 8008b40:	fb01 f303 	mul.w	r3, r1, r3
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b4a:	881a      	ldrh	r2, [r3, #0]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	815a      	strh	r2, [r3, #10]
 8008b50:	e015      	b.n	8008b7e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	211a      	movs	r1, #26
 8008b58:	fb01 f303 	mul.w	r3, r1, r3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	211a      	movs	r1, #26
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b78:	881a      	ldrh	r2, [r3, #0]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	211a      	movs	r1, #26
 8008b84:	fb01 f303 	mul.w	r3, r1, r3
 8008b88:	4413      	add	r3, r2
 8008b8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	b25b      	sxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	da16      	bge.n	8008bc4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	211a      	movs	r1, #26
 8008b9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ba6:	781a      	ldrb	r2, [r3, #0]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	211a      	movs	r1, #26
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bbc:	881a      	ldrh	r2, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	815a      	strh	r2, [r3, #10]
 8008bc2:	e015      	b.n	8008bf0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	211a      	movs	r1, #26
 8008bca:	fb01 f303 	mul.w	r3, r1, r3
 8008bce:	4413      	add	r3, r2
 8008bd0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	211a      	movs	r1, #26
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bea:	881a      	ldrh	r2, [r3, #0]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	799b      	ldrb	r3, [r3, #6]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f002 fdc4 	bl	800b796 <USBH_AllocPipe>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	461a      	mov	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	79db      	ldrb	r3, [r3, #7]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f002 fdba 	bl	800b796 <USBH_AllocPipe>
 8008c22:	4603      	mov	r3, r0
 8008c24:	461a      	mov	r2, r3
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fdac 	bl	8009788 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	7959      	ldrb	r1, [r3, #5]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	7998      	ldrb	r0, [r3, #6]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	8912      	ldrh	r2, [r2, #8]
 8008c48:	9202      	str	r2, [sp, #8]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	9201      	str	r2, [sp, #4]
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	4623      	mov	r3, r4
 8008c52:	4602      	mov	r2, r0
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f002 fd6f 	bl	800b738 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	7919      	ldrb	r1, [r3, #4]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	79d8      	ldrb	r0, [r3, #7]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	8952      	ldrh	r2, [r2, #10]
 8008c72:	9202      	str	r2, [sp, #8]
 8008c74:	2202      	movs	r2, #2
 8008c76:	9201      	str	r2, [sp, #4]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	4623      	mov	r3, r4
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f002 fd5a 	bl	800b738 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	791b      	ldrb	r3, [r3, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f003 f8c5 	bl	800be1c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	795b      	ldrb	r3, [r3, #5]
 8008c96:	2200      	movs	r2, #0
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f003 f8be 	bl	800be1c <USBH_LL_SetToggle>

  return USBH_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd90      	pop	{r4, r7, pc}

08008caa <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	795b      	ldrb	r3, [r3, #5]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00e      	beq.n	8008ce2 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	795b      	ldrb	r3, [r3, #5]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f002 fd53 	bl	800b776 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	795b      	ldrb	r3, [r3, #5]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f002 fd7e 	bl	800b7d8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	791b      	ldrb	r3, [r3, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00e      	beq.n	8008d08 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	791b      	ldrb	r3, [r3, #4]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f002 fd40 	bl	800b776 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	791b      	ldrb	r3, [r3, #4]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f002 fd6b 	bl	800b7d8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d0e:	69db      	ldr	r3, [r3, #28]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f003 f963 	bl	800bfe8 <free>
    phost->pActiveClass->pData = 0U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d28:	2200      	movs	r2, #0
 8008d2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	7b9b      	ldrb	r3, [r3, #14]
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d041      	beq.n	8008dd8 <USBH_MSC_ClassRequest+0xa2>
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	dc4b      	bgt.n	8008df0 <USBH_MSC_ClassRequest+0xba>
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <USBH_MSC_ClassRequest+0x2a>
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d147      	bne.n	8008df0 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fcf0 	bl	800974a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d104      	bne.n	8008d7e <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2200      	movs	r2, #0
 8008d78:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d137      	bne.n	8008df4 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d804      	bhi.n	8008d96 <USBH_MSC_ClassRequest+0x60>
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	e000      	b.n	8008d98 <USBH_MSC_ClassRequest+0x62>
 8008d96:	2202      	movs	r2, #2
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73bb      	strb	r3, [r7, #14]
 8008da0:	e014      	b.n	8008dcc <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	2134      	movs	r1, #52	; 0x34
 8008da8:	fb01 f303 	mul.w	r3, r1, r3
 8008dac:	4413      	add	r3, r2
 8008dae:	3392      	adds	r3, #146	; 0x92
 8008db0:	2202      	movs	r2, #2
 8008db2:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	2134      	movs	r1, #52	; 0x34
 8008dba:	fb01 f303 	mul.w	r3, r1, r3
 8008dbe:	4413      	add	r3, r2
 8008dc0:	33c1      	adds	r3, #193	; 0xc1
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	73bb      	strb	r3, [r7, #14]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	7bba      	ldrb	r2, [r7, #14]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d3e5      	bcc.n	8008da2 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008dd6:	e00d      	b.n	8008df4 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f002 f87b 	bl	800aed6 <USBH_ClrFeature>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d108      	bne.n	8008df8 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	7bda      	ldrb	r2, [r3, #15]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008dee:	e003      	b.n	8008df8 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008df0:	bf00      	nop
 8008df2:	e002      	b.n	8008dfa <USBH_MSC_ClassRequest+0xc4>
      break;
 8008df4:	bf00      	nop
 8008df6:	e000      	b.n	8008dfa <USBH_MSC_ClassRequest+0xc4>
      break;
 8008df8:	bf00      	nop
  }

  return status;
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008e16:	2301      	movs	r3, #1
 8008e18:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	7b1b      	ldrb	r3, [r3, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <USBH_MSC_Process+0x2e>
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	f000 8271 	beq.w	8009312 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008e30:	e272      	b.n	8009318 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	f080 824f 	bcs.w	80092e2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	2334      	movs	r3, #52	; 0x34
 8008e50:	fb03 f301 	mul.w	r3, r3, r1
 8008e54:	4413      	add	r3, r2
 8008e56:	3391      	adds	r3, #145	; 0x91
 8008e58:	2201      	movs	r2, #1
 8008e5a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e62:	4619      	mov	r1, r3
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	2334      	movs	r3, #52	; 0x34
 8008e68:	fb03 f301 	mul.w	r3, r3, r1
 8008e6c:	4413      	add	r3, r2
 8008e6e:	3390      	adds	r3, #144	; 0x90
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b08      	cmp	r3, #8
 8008e74:	f200 8243 	bhi.w	80092fe <USBH_MSC_Process+0x4fa>
 8008e78:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <USBH_MSC_Process+0x7c>)
 8008e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7e:	bf00      	nop
 8008e80:	08008ea5 	.word	0x08008ea5
 8008e84:	080092ff 	.word	0x080092ff
 8008e88:	08008f6d 	.word	0x08008f6d
 8008e8c:	080090f1 	.word	0x080090f1
 8008e90:	08008ecb 	.word	0x08008ecb
 8008e94:	080091bd 	.word	0x080091bd
 8008e98:	080092ff 	.word	0x080092ff
 8008e9c:	080092ff 	.word	0x080092ff
 8008ea0:	080092d1 	.word	0x080092d1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eaa:	4619      	mov	r1, r3
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	2334      	movs	r3, #52	; 0x34
 8008eb0:	fb03 f301 	mul.w	r3, r3, r1
 8008eb4:	4413      	add	r3, r2
 8008eb6:	3390      	adds	r3, #144	; 0x90
 8008eb8:	2204      	movs	r2, #4
 8008eba:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008ec8:	e222      	b.n	8009310 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ed0:	b2d9      	uxtb	r1, r3
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ed8:	461a      	mov	r2, r3
 8008eda:	2334      	movs	r3, #52	; 0x34
 8008edc:	fb03 f302 	mul.w	r3, r3, r2
 8008ee0:	3398      	adds	r3, #152	; 0x98
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	3307      	adds	r3, #7
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 ff6a 	bl	8009dc4 <USBH_MSC_SCSI_Inquiry>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10b      	bne.n	8008f12 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f00:	4619      	mov	r1, r3
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	2334      	movs	r3, #52	; 0x34
 8008f06:	fb03 f301 	mul.w	r3, r3, r1
 8008f0a:	4413      	add	r3, r2
 8008f0c:	3390      	adds	r3, #144	; 0x90
 8008f0e:	2202      	movs	r2, #2
 8008f10:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d10c      	bne.n	8008f32 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f1e:	4619      	mov	r1, r3
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	2334      	movs	r3, #52	; 0x34
 8008f24:	fb03 f301 	mul.w	r3, r3, r1
 8008f28:	4413      	add	r3, r2
 8008f2a:	3390      	adds	r3, #144	; 0x90
 8008f2c:	2205      	movs	r2, #5
 8008f2e:	701a      	strb	r2, [r3, #0]
            break;
 8008f30:	e1e7      	b.n	8009302 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	f040 81e4 	bne.w	8009302 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f40:	4619      	mov	r1, r3
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	2334      	movs	r3, #52	; 0x34
 8008f46:	fb03 f301 	mul.w	r3, r3, r1
 8008f4a:	4413      	add	r3, r2
 8008f4c:	3390      	adds	r3, #144	; 0x90
 8008f4e:	2201      	movs	r2, #1
 8008f50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	2334      	movs	r3, #52	; 0x34
 8008f5e:	fb03 f301 	mul.w	r3, r3, r1
 8008f62:	4413      	add	r3, r2
 8008f64:	3391      	adds	r3, #145	; 0x91
 8008f66:	2202      	movs	r2, #2
 8008f68:	701a      	strb	r2, [r3, #0]
            break;
 8008f6a:	e1ca      	b.n	8009302 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fe66 	bl	8009c48 <USBH_MSC_SCSI_TestUnitReady>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d149      	bne.n	800901a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	2334      	movs	r3, #52	; 0x34
 8008f92:	fb03 f301 	mul.w	r3, r3, r1
 8008f96:	4413      	add	r3, r2
 8008f98:	3392      	adds	r3, #146	; 0x92
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00c      	beq.n	8008fba <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	2334      	movs	r3, #52	; 0x34
 8008fac:	fb03 f301 	mul.w	r3, r3, r1
 8008fb0:	4413      	add	r3, r2
 8008fb2:	33c1      	adds	r3, #193	; 0xc1
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	701a      	strb	r2, [r3, #0]
 8008fb8:	e00b      	b.n	8008fd2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	2334      	movs	r3, #52	; 0x34
 8008fc6:	fb03 f301 	mul.w	r3, r3, r1
 8008fca:	4413      	add	r3, r2
 8008fcc:	33c1      	adds	r3, #193	; 0xc1
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fd8:	4619      	mov	r1, r3
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	2334      	movs	r3, #52	; 0x34
 8008fde:	fb03 f301 	mul.w	r3, r3, r1
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3390      	adds	r3, #144	; 0x90
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	2334      	movs	r3, #52	; 0x34
 8008ff6:	fb03 f301 	mul.w	r3, r3, r1
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3391      	adds	r3, #145	; 0x91
 8008ffe:	2200      	movs	r2, #0
 8009000:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009008:	4619      	mov	r1, r3
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	2334      	movs	r3, #52	; 0x34
 800900e:	fb03 f301 	mul.w	r3, r3, r1
 8009012:	4413      	add	r3, r2
 8009014:	3392      	adds	r3, #146	; 0x92
 8009016:	2200      	movs	r2, #0
 8009018:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d14a      	bne.n	80090b6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009026:	4619      	mov	r1, r3
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	2334      	movs	r3, #52	; 0x34
 800902c:	fb03 f301 	mul.w	r3, r3, r1
 8009030:	4413      	add	r3, r2
 8009032:	3392      	adds	r3, #146	; 0x92
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d00c      	beq.n	8009054 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009040:	4619      	mov	r1, r3
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	2334      	movs	r3, #52	; 0x34
 8009046:	fb03 f301 	mul.w	r3, r3, r1
 800904a:	4413      	add	r3, r2
 800904c:	33c1      	adds	r3, #193	; 0xc1
 800904e:	2201      	movs	r2, #1
 8009050:	701a      	strb	r2, [r3, #0]
 8009052:	e00b      	b.n	800906c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800905a:	4619      	mov	r1, r3
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	2334      	movs	r3, #52	; 0x34
 8009060:	fb03 f301 	mul.w	r3, r3, r1
 8009064:	4413      	add	r3, r2
 8009066:	33c1      	adds	r3, #193	; 0xc1
 8009068:	2200      	movs	r2, #0
 800906a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009072:	4619      	mov	r1, r3
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	2334      	movs	r3, #52	; 0x34
 8009078:	fb03 f301 	mul.w	r3, r3, r1
 800907c:	4413      	add	r3, r2
 800907e:	3390      	adds	r3, #144	; 0x90
 8009080:	2205      	movs	r2, #5
 8009082:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800908a:	4619      	mov	r1, r3
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	2334      	movs	r3, #52	; 0x34
 8009090:	fb03 f301 	mul.w	r3, r3, r1
 8009094:	4413      	add	r3, r2
 8009096:	3391      	adds	r3, #145	; 0x91
 8009098:	2201      	movs	r2, #1
 800909a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090a2:	4619      	mov	r1, r3
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	2334      	movs	r3, #52	; 0x34
 80090a8:	fb03 f301 	mul.w	r3, r3, r1
 80090ac:	4413      	add	r3, r2
 80090ae:	3392      	adds	r3, #146	; 0x92
 80090b0:	2202      	movs	r2, #2
 80090b2:	701a      	strb	r2, [r3, #0]
            break;
 80090b4:	e127      	b.n	8009306 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	f040 8124 	bne.w	8009306 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c4:	4619      	mov	r1, r3
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	2334      	movs	r3, #52	; 0x34
 80090ca:	fb03 f301 	mul.w	r3, r3, r1
 80090ce:	4413      	add	r3, r2
 80090d0:	3390      	adds	r3, #144	; 0x90
 80090d2:	2201      	movs	r2, #1
 80090d4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090dc:	4619      	mov	r1, r3
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	2334      	movs	r3, #52	; 0x34
 80090e2:	fb03 f301 	mul.w	r3, r3, r1
 80090e6:	4413      	add	r3, r2
 80090e8:	3391      	adds	r3, #145	; 0x91
 80090ea:	2202      	movs	r2, #2
 80090ec:	701a      	strb	r2, [r3, #0]
            break;
 80090ee:	e10a      	b.n	8009306 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f6:	b2d9      	uxtb	r1, r3
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090fe:	461a      	mov	r2, r3
 8009100:	2334      	movs	r3, #52	; 0x34
 8009102:	fb03 f302 	mul.w	r3, r3, r2
 8009106:	3390      	adds	r3, #144	; 0x90
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	3304      	adds	r3, #4
 800910e:	461a      	mov	r2, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fddc 	bl	8009cce <USBH_MSC_SCSI_ReadCapacity>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d120      	bne.n	8009162 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009126:	4619      	mov	r1, r3
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	2334      	movs	r3, #52	; 0x34
 800912c:	fb03 f301 	mul.w	r3, r3, r1
 8009130:	4413      	add	r3, r2
 8009132:	3390      	adds	r3, #144	; 0x90
 8009134:	2201      	movs	r2, #1
 8009136:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800913e:	4619      	mov	r1, r3
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	2334      	movs	r3, #52	; 0x34
 8009144:	fb03 f301 	mul.w	r3, r3, r1
 8009148:	4413      	add	r3, r2
 800914a:	3391      	adds	r3, #145	; 0x91
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009156:	3301      	adds	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009160:	e0d3      	b.n	800930a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	2b02      	cmp	r3, #2
 8009166:	d10c      	bne.n	8009182 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800916e:	4619      	mov	r1, r3
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	2334      	movs	r3, #52	; 0x34
 8009174:	fb03 f301 	mul.w	r3, r3, r1
 8009178:	4413      	add	r3, r2
 800917a:	3390      	adds	r3, #144	; 0x90
 800917c:	2205      	movs	r2, #5
 800917e:	701a      	strb	r2, [r3, #0]
            break;
 8009180:	e0c3      	b.n	800930a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	2b04      	cmp	r3, #4
 8009186:	f040 80c0 	bne.w	800930a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009190:	4619      	mov	r1, r3
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	2334      	movs	r3, #52	; 0x34
 8009196:	fb03 f301 	mul.w	r3, r3, r1
 800919a:	4413      	add	r3, r2
 800919c:	3390      	adds	r3, #144	; 0x90
 800919e:	2201      	movs	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091a8:	4619      	mov	r1, r3
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	2334      	movs	r3, #52	; 0x34
 80091ae:	fb03 f301 	mul.w	r3, r3, r1
 80091b2:	4413      	add	r3, r2
 80091b4:	3391      	adds	r3, #145	; 0x91
 80091b6:	2202      	movs	r2, #2
 80091b8:	701a      	strb	r2, [r3, #0]
            break;
 80091ba:	e0a6      	b.n	800930a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c2:	b2d9      	uxtb	r1, r3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ca:	461a      	mov	r2, r3
 80091cc:	2334      	movs	r3, #52	; 0x34
 80091ce:	fb03 f302 	mul.w	r3, r3, r2
 80091d2:	3398      	adds	r3, #152	; 0x98
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4413      	add	r3, r2
 80091d8:	3304      	adds	r3, #4
 80091da:	461a      	mov	r2, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fe96 	bl	8009f0e <USBH_MSC_SCSI_RequestSense>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d145      	bne.n	8009278 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091f2:	4619      	mov	r1, r3
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	2334      	movs	r3, #52	; 0x34
 80091f8:	fb03 f301 	mul.w	r3, r3, r1
 80091fc:	4413      	add	r3, r2
 80091fe:	339c      	adds	r3, #156	; 0x9c
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b06      	cmp	r3, #6
 8009204:	d00c      	beq.n	8009220 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800920c:	4619      	mov	r1, r3
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	2334      	movs	r3, #52	; 0x34
 8009212:	fb03 f301 	mul.w	r3, r3, r1
 8009216:	4413      	add	r3, r2
 8009218:	339c      	adds	r3, #156	; 0x9c
 800921a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800921c:	2b02      	cmp	r3, #2
 800921e:	d117      	bne.n	8009250 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	f242 720f 	movw	r2, #9999	; 0x270f
 8009232:	4293      	cmp	r3, r2
 8009234:	d80c      	bhi.n	8009250 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800923c:	4619      	mov	r1, r3
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	2334      	movs	r3, #52	; 0x34
 8009242:	fb03 f301 	mul.w	r3, r3, r1
 8009246:	4413      	add	r3, r2
 8009248:	3390      	adds	r3, #144	; 0x90
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
                  break;
 800924e:	e05f      	b.n	8009310 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009256:	4619      	mov	r1, r3
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	2334      	movs	r3, #52	; 0x34
 800925c:	fb03 f301 	mul.w	r3, r3, r1
 8009260:	4413      	add	r3, r2
 8009262:	3390      	adds	r3, #144	; 0x90
 8009264:	2201      	movs	r2, #1
 8009266:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800926e:	3301      	adds	r3, #1
 8009270:	b29a      	uxth	r2, r3
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	2b02      	cmp	r3, #2
 800927c:	d10c      	bne.n	8009298 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009284:	4619      	mov	r1, r3
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	2334      	movs	r3, #52	; 0x34
 800928a:	fb03 f301 	mul.w	r3, r3, r1
 800928e:	4413      	add	r3, r2
 8009290:	3390      	adds	r3, #144	; 0x90
 8009292:	2208      	movs	r2, #8
 8009294:	701a      	strb	r2, [r3, #0]
            break;
 8009296:	e03a      	b.n	800930e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	2b04      	cmp	r3, #4
 800929c:	d137      	bne.n	800930e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a4:	4619      	mov	r1, r3
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	2334      	movs	r3, #52	; 0x34
 80092aa:	fb03 f301 	mul.w	r3, r3, r1
 80092ae:	4413      	add	r3, r2
 80092b0:	3390      	adds	r3, #144	; 0x90
 80092b2:	2201      	movs	r2, #1
 80092b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092bc:	4619      	mov	r1, r3
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	2334      	movs	r3, #52	; 0x34
 80092c2:	fb03 f301 	mul.w	r3, r3, r1
 80092c6:	4413      	add	r3, r2
 80092c8:	3391      	adds	r3, #145	; 0x91
 80092ca:	2202      	movs	r2, #2
 80092cc:	701a      	strb	r2, [r3, #0]
            break;
 80092ce:	e01e      	b.n	800930e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092d6:	3301      	adds	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80092e0:	e016      	b.n	8009310 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	2201      	movs	r2, #1
 80092ee:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092f6:	2102      	movs	r1, #2
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	4798      	blx	r3
      break;
 80092fc:	e00c      	b.n	8009318 <USBH_MSC_Process+0x514>
            break;
 80092fe:	bf00      	nop
 8009300:	e00a      	b.n	8009318 <USBH_MSC_Process+0x514>
            break;
 8009302:	bf00      	nop
 8009304:	e008      	b.n	8009318 <USBH_MSC_Process+0x514>
            break;
 8009306:	bf00      	nop
 8009308:	e006      	b.n	8009318 <USBH_MSC_Process+0x514>
            break;
 800930a:	bf00      	nop
 800930c:	e004      	b.n	8009318 <USBH_MSC_Process+0x514>
            break;
 800930e:	bf00      	nop
      break;
 8009310:	e002      	b.n	8009318 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	75fb      	strb	r3, [r7, #23]
      break;
 8009316:	bf00      	nop
  }
  return error;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop

08009324 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b088      	sub	sp, #32
 800933e:	af02      	add	r7, sp, #8
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009354:	2301      	movs	r3, #1
 8009356:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	2134      	movs	r1, #52	; 0x34
 800935e:	fb01 f303 	mul.w	r3, r1, r3
 8009362:	4413      	add	r3, r2
 8009364:	3390      	adds	r3, #144	; 0x90
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b07      	cmp	r3, #7
 800936a:	d03c      	beq.n	80093e6 <USBH_MSC_RdWrProcess+0xac>
 800936c:	2b07      	cmp	r3, #7
 800936e:	f300 80a7 	bgt.w	80094c0 <USBH_MSC_RdWrProcess+0x186>
 8009372:	2b05      	cmp	r3, #5
 8009374:	d06c      	beq.n	8009450 <USBH_MSC_RdWrProcess+0x116>
 8009376:	2b06      	cmp	r3, #6
 8009378:	f040 80a2 	bne.w	80094c0 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800937c:	78f9      	ldrb	r1, [r7, #3]
 800937e:	2300      	movs	r3, #0
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	2300      	movs	r3, #0
 8009384:	2200      	movs	r2, #0
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fea5 	bl	800a0d6 <USBH_MSC_SCSI_Read>
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10b      	bne.n	80093ae <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	2134      	movs	r1, #52	; 0x34
 800939c:	fb01 f303 	mul.w	r3, r1, r3
 80093a0:	4413      	add	r3, r2
 80093a2:	3390      	adds	r3, #144	; 0x90
 80093a4:	2201      	movs	r2, #1
 80093a6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093ac:	e08a      	b.n	80094c4 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d109      	bne.n	80093c8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	2134      	movs	r1, #52	; 0x34
 80093ba:	fb01 f303 	mul.w	r3, r1, r3
 80093be:	4413      	add	r3, r2
 80093c0:	3390      	adds	r3, #144	; 0x90
 80093c2:	2205      	movs	r2, #5
 80093c4:	701a      	strb	r2, [r3, #0]
      break;
 80093c6:	e07d      	b.n	80094c4 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d17a      	bne.n	80094c4 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	2134      	movs	r1, #52	; 0x34
 80093d4:	fb01 f303 	mul.w	r3, r1, r3
 80093d8:	4413      	add	r3, r2
 80093da:	3390      	adds	r3, #144	; 0x90
 80093dc:	2208      	movs	r2, #8
 80093de:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80093e0:	2302      	movs	r3, #2
 80093e2:	75fb      	strb	r3, [r7, #23]
      break;
 80093e4:	e06e      	b.n	80094c4 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80093e6:	78f9      	ldrb	r1, [r7, #3]
 80093e8:	2300      	movs	r3, #0
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2300      	movs	r3, #0
 80093ee:	2200      	movs	r2, #0
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fe05 	bl	800a000 <USBH_MSC_SCSI_Write>
 80093f6:	4603      	mov	r3, r0
 80093f8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	2134      	movs	r1, #52	; 0x34
 8009406:	fb01 f303 	mul.w	r3, r1, r3
 800940a:	4413      	add	r3, r2
 800940c:	3390      	adds	r3, #144	; 0x90
 800940e:	2201      	movs	r2, #1
 8009410:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009416:	e057      	b.n	80094c8 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d109      	bne.n	8009432 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800941e:	78fb      	ldrb	r3, [r7, #3]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	2134      	movs	r1, #52	; 0x34
 8009424:	fb01 f303 	mul.w	r3, r1, r3
 8009428:	4413      	add	r3, r2
 800942a:	3390      	adds	r3, #144	; 0x90
 800942c:	2205      	movs	r2, #5
 800942e:	701a      	strb	r2, [r3, #0]
      break;
 8009430:	e04a      	b.n	80094c8 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	2b04      	cmp	r3, #4
 8009436:	d147      	bne.n	80094c8 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	2134      	movs	r1, #52	; 0x34
 800943e:	fb01 f303 	mul.w	r3, r1, r3
 8009442:	4413      	add	r3, r2
 8009444:	3390      	adds	r3, #144	; 0x90
 8009446:	2208      	movs	r2, #8
 8009448:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800944a:	2302      	movs	r3, #2
 800944c:	75fb      	strb	r3, [r7, #23]
      break;
 800944e:	e03b      	b.n	80094c8 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	2234      	movs	r2, #52	; 0x34
 8009454:	fb02 f303 	mul.w	r3, r2, r3
 8009458:	3398      	adds	r3, #152	; 0x98
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4413      	add	r3, r2
 800945e:	1d1a      	adds	r2, r3, #4
 8009460:	78fb      	ldrb	r3, [r7, #3]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fd52 	bl	8009f0e <USBH_MSC_SCSI_RequestSense>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d113      	bne.n	800949c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	2134      	movs	r1, #52	; 0x34
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	3390      	adds	r3, #144	; 0x90
 8009482:	2201      	movs	r2, #1
 8009484:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	2134      	movs	r1, #52	; 0x34
 800948c:	fb01 f303 	mul.w	r3, r1, r3
 8009490:	4413      	add	r3, r2
 8009492:	3391      	adds	r3, #145	; 0x91
 8009494:	2202      	movs	r2, #2
 8009496:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009498:	2302      	movs	r3, #2
 800949a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d014      	beq.n	80094cc <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d111      	bne.n	80094cc <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	2134      	movs	r1, #52	; 0x34
 80094ae:	fb01 f303 	mul.w	r3, r1, r3
 80094b2:	4413      	add	r3, r2
 80094b4:	3390      	adds	r3, #144	; 0x90
 80094b6:	2208      	movs	r2, #8
 80094b8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80094ba:	2302      	movs	r3, #2
 80094bc:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094be:	e005      	b.n	80094cc <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80094c0:	bf00      	nop
 80094c2:	e004      	b.n	80094ce <USBH_MSC_RdWrProcess+0x194>
      break;
 80094c4:	bf00      	nop
 80094c6:	e002      	b.n	80094ce <USBH_MSC_RdWrProcess+0x194>
      break;
 80094c8:	bf00      	nop
 80094ca:	e000      	b.n	80094ce <USBH_MSC_RdWrProcess+0x194>
      break;
 80094cc:	bf00      	nop

  }
  return error;
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b0b      	cmp	r3, #11
 80094f6:	d10c      	bne.n	8009512 <USBH_MSC_UnitIsReady+0x3a>
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	2134      	movs	r1, #52	; 0x34
 80094fe:	fb01 f303 	mul.w	r3, r1, r3
 8009502:	4413      	add	r3, r2
 8009504:	3391      	adds	r3, #145	; 0x91
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800950c:	2301      	movs	r3, #1
 800950e:	73fb      	strb	r3, [r7, #15]
 8009510:	e001      	b.n	8009516 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	460b      	mov	r3, r1
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b0b      	cmp	r3, #11
 8009544:	d10d      	bne.n	8009562 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	2234      	movs	r2, #52	; 0x34
 800954a:	fb02 f303 	mul.w	r3, r2, r3
 800954e:	3390      	adds	r3, #144	; 0x90
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	4413      	add	r3, r2
 8009554:	2234      	movs	r2, #52	; 0x34
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f002 fd4d 	bl	800bff8 <memcpy>
    return USBH_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	e000      	b.n	8009564 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009562:	2302      	movs	r3, #2
  }
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	460b      	mov	r3, r1
 800957a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00e      	beq.n	80095b0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009598:	2b0b      	cmp	r3, #11
 800959a:	d109      	bne.n	80095b0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800959c:	7afb      	ldrb	r3, [r7, #11]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	2134      	movs	r1, #52	; 0x34
 80095a2:	fb01 f303 	mul.w	r3, r1, r3
 80095a6:	4413      	add	r3, r2
 80095a8:	3390      	adds	r3, #144	; 0x90
 80095aa:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d001      	beq.n	80095b4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80095b0:	2302      	movs	r3, #2
 80095b2:	e040      	b.n	8009636 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2206      	movs	r2, #6
 80095b8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80095ba:	7afb      	ldrb	r3, [r7, #11]
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	2134      	movs	r1, #52	; 0x34
 80095c0:	fb01 f303 	mul.w	r3, r1, r3
 80095c4:	4413      	add	r3, r2
 80095c6:	3390      	adds	r3, #144	; 0x90
 80095c8:	2206      	movs	r2, #6
 80095ca:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80095cc:	7afb      	ldrb	r3, [r7, #11]
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80095d6:	7af9      	ldrb	r1, [r7, #11]
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 fd78 	bl	800a0d6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095ec:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80095ee:	e016      	b.n	800961e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad2      	subs	r2, r2, r3
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8009600:	fb01 f303 	mul.w	r3, r1, r3
 8009604:	429a      	cmp	r2, r3
 8009606:	d805      	bhi.n	8009614 <USBH_MSC_Read+0xa8>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2201      	movs	r2, #1
 8009618:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800961a:	2302      	movs	r3, #2
 800961c:	e00b      	b.n	8009636 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	4619      	mov	r1, r3
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7ff fe89 	bl	800933a <USBH_MSC_RdWrProcess>
 8009628:	4603      	mov	r3, r0
 800962a:	2b01      	cmp	r3, #1
 800962c:	d0e0      	beq.n	80095f0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2201      	movs	r2, #1
 8009632:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b088      	sub	sp, #32
 8009642:	af02      	add	r7, sp, #8
 8009644:	60f8      	str	r0, [r7, #12]
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	603b      	str	r3, [r7, #0]
 800964a:	460b      	mov	r3, r1
 800964c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00e      	beq.n	8009682 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800966a:	2b0b      	cmp	r3, #11
 800966c:	d109      	bne.n	8009682 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800966e:	7afb      	ldrb	r3, [r7, #11]
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	2134      	movs	r1, #52	; 0x34
 8009674:	fb01 f303 	mul.w	r3, r1, r3
 8009678:	4413      	add	r3, r2
 800967a:	3390      	adds	r3, #144	; 0x90
 800967c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800967e:	2b01      	cmp	r3, #1
 8009680:	d001      	beq.n	8009686 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009682:	2302      	movs	r3, #2
 8009684:	e040      	b.n	8009708 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2207      	movs	r2, #7
 800968a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800968c:	7afb      	ldrb	r3, [r7, #11]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	2134      	movs	r1, #52	; 0x34
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	4413      	add	r3, r2
 8009698:	3390      	adds	r3, #144	; 0x90
 800969a:	2207      	movs	r2, #7
 800969c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80096a8:	7af9      	ldrb	r1, [r7, #11]
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 fca4 	bl	800a000 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096be:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80096c0:	e016      	b.n	80096f0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80096d2:	fb01 f303 	mul.w	r3, r1, r3
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d805      	bhi.n	80096e6 <USBH_MSC_Write+0xa8>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d104      	bne.n	80096f0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2201      	movs	r2, #1
 80096ea:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80096ec:	2302      	movs	r3, #2
 80096ee:	e00b      	b.n	8009708 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	4619      	mov	r1, r3
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7ff fe20 	bl	800933a <USBH_MSC_RdWrProcess>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d0e0      	beq.n	80096c2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2201      	movs	r2, #1
 8009704:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2221      	movs	r2, #33	; 0x21
 800971c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	22ff      	movs	r2, #255	; 0xff
 8009722:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009736:	2200      	movs	r2, #0
 8009738:	2100      	movs	r1, #0
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f001 fdab 	bl	800b296 <USBH_CtlReq>
 8009740:	4603      	mov	r3, r0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b082      	sub	sp, #8
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	22a1      	movs	r2, #161	; 0xa1
 8009758:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	22fe      	movs	r2, #254	; 0xfe
 800975e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009772:	2201      	movs	r2, #1
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 fd8d 	bl	800b296 <USBH_CtlReq>
 800977c:	4603      	mov	r3, r0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
	...

08009788 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4a09      	ldr	r2, [pc, #36]	; (80097c4 <USBH_MSC_BOT_Init+0x3c>)
 800979e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4a09      	ldr	r2, [pc, #36]	; (80097c8 <USBH_MSC_BOT_Init+0x40>)
 80097a4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	43425355 	.word	0x43425355
 80097c8:	20304050 	.word	0x20304050

080097cc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af02      	add	r7, sp, #8
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80097d8:	2301      	movs	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80097dc:	2301      	movs	r3, #1
 80097de:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80097e0:	2301      	movs	r3, #1
 80097e2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097e4:	2300      	movs	r3, #0
 80097e6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097fc:	3b01      	subs	r3, #1
 80097fe:	2b0a      	cmp	r3, #10
 8009800:	f200 819e 	bhi.w	8009b40 <USBH_MSC_BOT_Process+0x374>
 8009804:	a201      	add	r2, pc, #4	; (adr r2, 800980c <USBH_MSC_BOT_Process+0x40>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	08009839 	.word	0x08009839
 8009810:	08009861 	.word	0x08009861
 8009814:	080098cb 	.word	0x080098cb
 8009818:	080098e9 	.word	0x080098e9
 800981c:	0800996d 	.word	0x0800996d
 8009820:	0800998f 	.word	0x0800998f
 8009824:	08009a27 	.word	0x08009a27
 8009828:	08009a43 	.word	0x08009a43
 800982c:	08009a95 	.word	0x08009a95
 8009830:	08009ac5 	.word	0x08009ac5
 8009834:	08009b27 	.word	0x08009b27
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	2202      	movs	r2, #2
 8009844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	795b      	ldrb	r3, [r3, #5]
 8009852:	2201      	movs	r2, #1
 8009854:	9200      	str	r2, [sp, #0]
 8009856:	221f      	movs	r2, #31
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 ff2a 	bl	800b6b2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800985e:	e17e      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	795b      	ldrb	r3, [r3, #5]
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f002 faae 	bl	800bdc8 <USBH_LL_GetURBState>
 800986c:	4603      	mov	r3, r0
 800986e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009870:	7d3b      	ldrb	r3, [r7, #20]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d118      	bne.n	80098a8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00f      	beq.n	800989e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009884:	b25b      	sxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	da04      	bge.n	8009894 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2203      	movs	r2, #3
 800988e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009892:	e157      	b.n	8009b44 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	2205      	movs	r2, #5
 8009898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800989c:	e152      	b.n	8009b44 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2207      	movs	r2, #7
 80098a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098a6:	e14d      	b.n	8009b44 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80098a8:	7d3b      	ldrb	r3, [r7, #20]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d104      	bne.n	80098b8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098b6:	e145      	b.n	8009b44 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80098b8:	7d3b      	ldrb	r3, [r7, #20]
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	f040 8142 	bne.w	8009b44 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	220a      	movs	r2, #10
 80098c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80098c8:	e13c      	b.n	8009b44 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	895a      	ldrh	r2, [r3, #10]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	791b      	ldrb	r3, [r3, #4]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 ff0f 	bl	800b6fc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2204      	movs	r2, #4
 80098e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80098e6:	e13a      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	791b      	ldrb	r3, [r3, #4]
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f002 fa6a 	bl	800bdc8 <USBH_LL_GetURBState>
 80098f4:	4603      	mov	r3, r0
 80098f6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80098f8:	7d3b      	ldrb	r3, [r7, #20]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d12d      	bne.n	800995a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	8952      	ldrh	r2, [r2, #10]
 8009906:	4293      	cmp	r3, r2
 8009908:	d910      	bls.n	800992c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	8952      	ldrh	r2, [r2, #10]
 8009914:	441a      	add	r2, r3
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	8952      	ldrh	r2, [r2, #10]
 8009924:	1a9a      	subs	r2, r3, r2
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	65da      	str	r2, [r3, #92]	; 0x5c
 800992a:	e002      	b.n	8009932 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	2200      	movs	r2, #0
 8009930:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	895a      	ldrh	r2, [r3, #10]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	791b      	ldrb	r3, [r3, #4]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 fed7 	bl	800b6fc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800994e:	e0fb      	b.n	8009b48 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2207      	movs	r2, #7
 8009954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009958:	e0f6      	b.n	8009b48 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800995a:	7d3b      	ldrb	r3, [r7, #20]
 800995c:	2b05      	cmp	r3, #5
 800995e:	f040 80f3 	bne.w	8009b48 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2209      	movs	r2, #9
 8009966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800996a:	e0ed      	b.n	8009b48 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	891a      	ldrh	r2, [r3, #8]
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	795b      	ldrb	r3, [r3, #5]
 800997a:	2001      	movs	r0, #1
 800997c:	9000      	str	r0, [sp, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 fe97 	bl	800b6b2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	2206      	movs	r2, #6
 8009988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800998c:	e0e7      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	795b      	ldrb	r3, [r3, #5]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f002 fa17 	bl	800bdc8 <USBH_LL_GetURBState>
 800999a:	4603      	mov	r3, r0
 800999c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800999e:	7d3b      	ldrb	r3, [r7, #20]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d12f      	bne.n	8009a04 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	8912      	ldrh	r2, [r2, #8]
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d910      	bls.n	80099d2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	8912      	ldrh	r2, [r2, #8]
 80099ba:	441a      	add	r2, r3
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	8912      	ldrh	r2, [r2, #8]
 80099ca:	1a9a      	subs	r2, r3, r2
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80099d0:	e002      	b.n	80099d8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2200      	movs	r2, #0
 80099d6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00c      	beq.n	80099fa <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	891a      	ldrh	r2, [r3, #8]
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	795b      	ldrb	r3, [r3, #5]
 80099ee:	2001      	movs	r0, #1
 80099f0:	9000      	str	r0, [sp, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 fe5d 	bl	800b6b2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80099f8:	e0a8      	b.n	8009b4c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	2207      	movs	r2, #7
 80099fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a02:	e0a3      	b.n	8009b4c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a04:	7d3b      	ldrb	r3, [r7, #20]
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d104      	bne.n	8009a14 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2205      	movs	r2, #5
 8009a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a12:	e09b      	b.n	8009b4c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009a14:	7d3b      	ldrb	r3, [r7, #20]
 8009a16:	2b05      	cmp	r3, #5
 8009a18:	f040 8098 	bne.w	8009b4c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	220a      	movs	r2, #10
 8009a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a24:	e092      	b.n	8009b4c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	791b      	ldrb	r3, [r3, #4]
 8009a30:	220d      	movs	r2, #13
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 fe62 	bl	800b6fc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	2208      	movs	r2, #8
 8009a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a40:	e08d      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	791b      	ldrb	r3, [r3, #4]
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f002 f9bd 	bl	800bdc8 <USBH_LL_GetURBState>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009a52:	7d3b      	ldrb	r3, [r7, #20]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d115      	bne.n	8009a84 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f8a9 	bl	8009bc0 <USBH_MSC_DecodeCSW>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009a72:	7d7b      	ldrb	r3, [r7, #21]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009a7c:	e068      	b.n	8009b50 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009a7e:	2302      	movs	r3, #2
 8009a80:	75fb      	strb	r3, [r7, #23]
      break;
 8009a82:	e065      	b.n	8009b50 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009a84:	7d3b      	ldrb	r3, [r7, #20]
 8009a86:	2b05      	cmp	r3, #5
 8009a88:	d162      	bne.n	8009b50 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2209      	movs	r2, #9
 8009a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a92:	e05d      	b.n	8009b50 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	2200      	movs	r2, #0
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f864 	bl	8009b68 <USBH_MSC_BOT_Abort>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009aa4:	7dbb      	ldrb	r3, [r7, #22]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d104      	bne.n	8009ab4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2207      	movs	r2, #7
 8009aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009ab2:	e04f      	b.n	8009b54 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009ab4:	7dbb      	ldrb	r3, [r7, #22]
 8009ab6:	2b04      	cmp	r3, #4
 8009ab8:	d14c      	bne.n	8009b54 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	220b      	movs	r2, #11
 8009abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ac2:	e047      	b.n	8009b54 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009ac4:	78fb      	ldrb	r3, [r7, #3]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f84c 	bl	8009b68 <USBH_MSC_BOT_Abort>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009ad4:	7dbb      	ldrb	r3, [r7, #22]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d11d      	bne.n	8009b16 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	795b      	ldrb	r3, [r3, #5]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f002 f9cb 	bl	800be7c <USBH_LL_GetToggle>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	7959      	ldrb	r1, [r3, #5]
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	f1c3 0301 	rsb	r3, r3, #1
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	461a      	mov	r2, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f002 f98f 	bl	800be1c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	791b      	ldrb	r3, [r3, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f002 f988 	bl	800be1c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2209      	movs	r2, #9
 8009b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009b14:	e020      	b.n	8009b58 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009b16:	7dbb      	ldrb	r3, [r7, #22]
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	d11d      	bne.n	8009b58 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	220b      	movs	r2, #11
 8009b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b24:	e018      	b.n	8009b58 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff fdf2 	bl	8009710 <USBH_MSC_BOT_REQ_Reset>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d112      	bne.n	8009b5c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009b3e:	e00d      	b.n	8009b5c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009b40:	bf00      	nop
 8009b42:	e00c      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>
      break;
 8009b44:	bf00      	nop
 8009b46:	e00a      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>
      break;
 8009b48:	bf00      	nop
 8009b4a:	e008      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>
      break;
 8009b4c:	bf00      	nop
 8009b4e:	e006      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>
      break;
 8009b50:	bf00      	nop
 8009b52:	e004      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>
      break;
 8009b54:	bf00      	nop
 8009b56:	e002      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <USBH_MSC_BOT_Process+0x392>
      break;
 8009b5c:	bf00      	nop
  }
  return status;
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	70fb      	strb	r3, [r7, #3]
 8009b74:	4613      	mov	r3, r2
 8009b76:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009b78:	2302      	movs	r3, #2
 8009b7a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b82:	69db      	ldr	r3, [r3, #28]
 8009b84:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009b86:	78bb      	ldrb	r3, [r7, #2]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <USBH_MSC_BOT_Abort+0x2a>
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d009      	beq.n	8009ba4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009b90:	e011      	b.n	8009bb6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	79db      	ldrb	r3, [r3, #7]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f001 f99c 	bl	800aed6 <USBH_ClrFeature>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba2:	e008      	b.n	8009bb6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	799b      	ldrb	r3, [r3, #6]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 f993 	bl	800aed6 <USBH_ClrFeature>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb4:	bf00      	nop
  }
  return status;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	791b      	ldrb	r3, [r3, #4]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f002 f861 	bl	800bca4 <USBH_LL_GetLastXferSize>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b0d      	cmp	r3, #13
 8009be6:	d002      	beq.n	8009bee <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009be8:	2302      	movs	r3, #2
 8009bea:	73fb      	strb	r3, [r7, #15]
 8009bec:	e024      	b.n	8009c38 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bf2:	4a14      	ldr	r2, [pc, #80]	; (8009c44 <USBH_MSC_DecodeCSW+0x84>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d11d      	bne.n	8009c34 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d119      	bne.n	8009c38 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
 8009c12:	e011      	b.n	8009c38 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d102      	bne.n	8009c24 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	73fb      	strb	r3, [r7, #15]
 8009c22:	e009      	b.n	8009c38 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d104      	bne.n	8009c38 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	73fb      	strb	r3, [r7, #15]
 8009c32:	e001      	b.n	8009c38 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009c34:	2302      	movs	r3, #2
 8009c36:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	53425355 	.word	0x53425355

08009c48 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009c54:	2302      	movs	r3, #2
 8009c56:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d002      	beq.n	8009c72 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d021      	beq.n	8009cb4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009c70:	e028      	b.n	8009cc4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	220a      	movs	r2, #10
 8009c84:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	3363      	adds	r3, #99	; 0x63
 8009c8c:	2210      	movs	r2, #16
 8009c8e:	2100      	movs	r1, #0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f002 f9bf 	bl	800c014 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb2:	e007      	b.n	8009cc4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff fd87 	bl	80097cc <USBH_MSC_BOT_Process>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc2:	bf00      	nop
  }

  return error;
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	607a      	str	r2, [r7, #4]
 8009cda:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d002      	beq.n	8009cfa <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d027      	beq.n	8009d48 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009cf8:	e05f      	b.n	8009dba <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2280      	movs	r2, #128	; 0x80
 8009d04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	220a      	movs	r2, #10
 8009d0c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	3363      	adds	r3, #99	; 0x63
 8009d14:	2210      	movs	r2, #16
 8009d16:	2100      	movs	r1, #0
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f002 f97b 	bl	800c014 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2225      	movs	r2, #37	; 0x25
 8009d22:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	2202      	movs	r2, #2
 8009d32:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f103 0210 	add.w	r2, r3, #16
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009d42:	2301      	movs	r3, #1
 8009d44:	75fb      	strb	r3, [r7, #23]
      break;
 8009d46:	e038      	b.n	8009dba <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d48:	7afb      	ldrb	r3, [r7, #11]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff fd3d 	bl	80097cc <USBH_MSC_BOT_Process>
 8009d52:	4603      	mov	r3, r0
 8009d54:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d12d      	bne.n	8009db8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d62:	3303      	adds	r3, #3
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	461a      	mov	r2, r3
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d6e:	3302      	adds	r3, #2
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009d82:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	061b      	lsls	r3, r3, #24
 8009d8e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d9a:	3307      	adds	r3, #7
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009da6:	3306      	adds	r3, #6
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	4313      	orrs	r3, r2
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	809a      	strh	r2, [r3, #4]
      break;
 8009db8:	bf00      	nop
  }

  return error;
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d002      	beq.n	8009df0 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d03d      	beq.n	8009e6a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009dee:	e089      	b.n	8009f04 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	2224      	movs	r2, #36	; 0x24
 8009df4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2280      	movs	r2, #128	; 0x80
 8009dfa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	220a      	movs	r2, #10
 8009e02:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	3363      	adds	r3, #99	; 0x63
 8009e0a:	220a      	movs	r2, #10
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f002 f900 	bl	800c014 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	2212      	movs	r2, #18
 8009e18:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009e1c:	7afb      	ldrb	r3, [r7, #11]
 8009e1e:	015b      	lsls	r3, r3, #5
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	2224      	movs	r2, #36	; 0x24
 8009e3c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	2202      	movs	r2, #2
 8009e54:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f103 0210 	add.w	r2, r3, #16
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e64:	2301      	movs	r3, #1
 8009e66:	75fb      	strb	r3, [r7, #23]
      break;
 8009e68:	e04c      	b.n	8009f04 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fcac 	bl	80097cc <USBH_MSC_BOT_Process>
 8009e74:	4603      	mov	r3, r0
 8009e76:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d141      	bne.n	8009f02 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009e7e:	2222      	movs	r2, #34	; 0x22
 8009e80:	2100      	movs	r1, #0
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f002 f8c6 	bl	800c014 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	f003 031f 	and.w	r3, r3, #31
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	095b      	lsrs	r3, r3, #5
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b25b      	sxtb	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	da03      	bge.n	8009ec2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	709a      	strb	r2, [r3, #2]
 8009ec0:	e002      	b.n	8009ec8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	1cd8      	adds	r0, r3, #3
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ed2:	3308      	adds	r3, #8
 8009ed4:	2208      	movs	r2, #8
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	f002 f88e 	bl	800bff8 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f103 000c 	add.w	r0, r3, #12
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ee8:	3310      	adds	r3, #16
 8009eea:	2210      	movs	r2, #16
 8009eec:	4619      	mov	r1, r3
 8009eee:	f002 f883 	bl	800bff8 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	331d      	adds	r3, #29
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009efc:	3220      	adds	r2, #32
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	601a      	str	r2, [r3, #0]
      break;
 8009f02:	bf00      	nop
  }

  return error;
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}

08009f0e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b086      	sub	sp, #24
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	460b      	mov	r3, r1
 8009f18:	607a      	str	r2, [r7, #4]
 8009f1a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f26:	69db      	ldr	r3, [r3, #28]
 8009f28:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d002      	beq.n	8009f3a <USBH_MSC_SCSI_RequestSense+0x2c>
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d03d      	beq.n	8009fb4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009f38:	e05d      	b.n	8009ff6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	220e      	movs	r2, #14
 8009f3e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2280      	movs	r2, #128	; 0x80
 8009f44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	220a      	movs	r2, #10
 8009f4c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	3363      	adds	r3, #99	; 0x63
 8009f54:	2210      	movs	r2, #16
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f002 f85b 	bl	800c014 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	2203      	movs	r2, #3
 8009f62:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	015b      	lsls	r3, r3, #5
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	220e      	movs	r2, #14
 8009f86:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f103 0210 	add.w	r2, r3, #16
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb2:	e020      	b.n	8009ff6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009fb4:	7afb      	ldrb	r3, [r7, #11]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7ff fc07 	bl	80097cc <USBH_MSC_BOT_Process>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009fc2:	7dfb      	ldrb	r3, [r7, #23]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d115      	bne.n	8009ff4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fce:	3302      	adds	r3, #2
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	f003 030f 	and.w	r3, r3, #15
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fe2:	7b1a      	ldrb	r2, [r3, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fee:	7b5a      	ldrb	r2, [r3, #13]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	709a      	strb	r2, [r3, #2]
      break;
 8009ff4:	bf00      	nop
  }

  return error;
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	460b      	mov	r3, r1
 800a00e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a010:	2302      	movs	r3, #2
 800a012:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a024:	2b01      	cmp	r3, #1
 800a026:	d002      	beq.n	800a02e <USBH_MSC_SCSI_Write+0x2e>
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d047      	beq.n	800a0bc <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a02c:	e04e      	b.n	800a0cc <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a034:	461a      	mov	r2, r3
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	fb03 f202 	mul.w	r2, r3, r2
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	220a      	movs	r2, #10
 800a04c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	3363      	adds	r3, #99	; 0x63
 800a054:	2210      	movs	r2, #16
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 ffdb 	bl	800c014 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	222a      	movs	r2, #42	; 0x2a
 800a062:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a066:	79fa      	ldrb	r2, [r7, #7]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a06e:	79ba      	ldrb	r2, [r7, #6]
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a076:	797a      	ldrb	r2, [r7, #5]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a07e:	1d3b      	adds	r3, r7, #4
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a088:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a092:	f107 0320 	add.w	r3, r7, #32
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ba:	e007      	b.n	800a0cc <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a0bc:	7afb      	ldrb	r3, [r7, #11]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f7ff fb83 	bl	80097cc <USBH_MSC_BOT_Process>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ca:	bf00      	nop
  }

  return error;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b086      	sub	sp, #24
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d002      	beq.n	800a104 <USBH_MSC_SCSI_Read+0x2e>
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d047      	beq.n	800a192 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a102:	e04e      	b.n	800a1a2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a10a:	461a      	mov	r2, r3
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	fb03 f202 	mul.w	r2, r3, r2
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2280      	movs	r2, #128	; 0x80
 800a11a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	220a      	movs	r2, #10
 800a122:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	3363      	adds	r3, #99	; 0x63
 800a12a:	2210      	movs	r2, #16
 800a12c:	2100      	movs	r1, #0
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 ff70 	bl	800c014 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	2228      	movs	r2, #40	; 0x28
 800a138:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a13c:	79fa      	ldrb	r2, [r7, #7]
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a144:	79ba      	ldrb	r2, [r7, #6]
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a14c:	797a      	ldrb	r2, [r7, #5]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a154:	1d3b      	adds	r3, r7, #4
 800a156:	781a      	ldrb	r2, [r3, #0]
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a15e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a168:	f107 0320 	add.w	r3, r7, #32
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2202      	movs	r2, #2
 800a180:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a18c:	2301      	movs	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
      break;
 800a190:	e007      	b.n	800a1a2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a192:	7afb      	ldrb	r3, [r7, #11]
 800a194:	4619      	mov	r1, r3
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f7ff fb18 	bl	80097cc <USBH_MSC_BOT_Process>
 800a19c:	4603      	mov	r3, r0
 800a19e:	75fb      	strb	r3, [r7, #23]
      break;
 800a1a0:	bf00      	nop
  }

  return error;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	e029      	b.n	800a218 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	79fa      	ldrb	r2, [r7, #7]
 800a1c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f81f 	bl	800a220 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f001 fc93 	bl	800bb3c <USBH_LL_Init>

  return USBH_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	e009      	b.n	800a246 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	33e0      	adds	r3, #224	; 0xe0
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	2200      	movs	r2, #0
 800a23e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3301      	adds	r3, #1
 800a244:	60fb      	str	r3, [r7, #12]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b0e      	cmp	r3, #14
 800a24a:	d9f2      	bls.n	800a232 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e009      	b.n	800a266 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4413      	add	r3, r2
 800a258:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a25c:	2200      	movs	r2, #0
 800a25e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	3301      	adds	r3, #1
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a26c:	d3f1      	bcc.n	800a252 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2240      	movs	r2, #64	; 0x40
 800a292:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d016      	beq.n	800a30a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10e      	bne.n	800a304 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a2ec:	1c59      	adds	r1, r3, #1
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	33de      	adds	r3, #222	; 0xde
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
 800a302:	e004      	b.n	800a30e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a304:	2302      	movs	r3, #2
 800a306:	73fb      	strb	r3, [r7, #15]
 800a308:	e001      	b.n	800a30e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a30a:	2302      	movs	r3, #2
 800a30c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a332:	78fa      	ldrb	r2, [r7, #3]
 800a334:	429a      	cmp	r2, r3
 800a336:	d204      	bcs.n	800a342 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	78fa      	ldrb	r2, [r7, #3]
 800a33c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a340:	e001      	b.n	800a346 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a342:	2302      	movs	r3, #2
 800a344:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a354:	b480      	push	{r7}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	461a      	mov	r2, r3
 800a362:	4603      	mov	r3, r0
 800a364:	70fb      	strb	r3, [r7, #3]
 800a366:	460b      	mov	r3, r1
 800a368:	70bb      	strb	r3, [r7, #2]
 800a36a:	4613      	mov	r3, r2
 800a36c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a372:	2300      	movs	r3, #0
 800a374:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a37c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a37e:	e025      	b.n	800a3cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a380:	7dfb      	ldrb	r3, [r7, #23]
 800a382:	221a      	movs	r2, #26
 800a384:	fb02 f303 	mul.w	r3, r2, r3
 800a388:	3308      	adds	r3, #8
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	3302      	adds	r3, #2
 800a390:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	795b      	ldrb	r3, [r3, #5]
 800a396:	78fa      	ldrb	r2, [r7, #3]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d002      	beq.n	800a3a2 <USBH_FindInterface+0x4e>
 800a39c:	78fb      	ldrb	r3, [r7, #3]
 800a39e:	2bff      	cmp	r3, #255	; 0xff
 800a3a0:	d111      	bne.n	800a3c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a3a6:	78ba      	ldrb	r2, [r7, #2]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d002      	beq.n	800a3b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3ac:	78bb      	ldrb	r3, [r7, #2]
 800a3ae:	2bff      	cmp	r3, #255	; 0xff
 800a3b0:	d109      	bne.n	800a3c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a3b6:	787a      	ldrb	r2, [r7, #1]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d002      	beq.n	800a3c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a3bc:	787b      	ldrb	r3, [r7, #1]
 800a3be:	2bff      	cmp	r3, #255	; 0xff
 800a3c0:	d101      	bne.n	800a3c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	e006      	b.n	800a3d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d9d6      	bls.n	800a380 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a3d2:	23ff      	movs	r3, #255	; 0xff
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	371c      	adds	r7, #28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f001 fbe3 	bl	800bbb4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 fcfc 	bl	800bdee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b088      	sub	sp, #32
 800a404:	af04      	add	r7, sp, #16
 800a406:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a408:	2302      	movs	r3, #2
 800a40a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d102      	bne.n	800a422 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2203      	movs	r2, #3
 800a420:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b0b      	cmp	r3, #11
 800a42a:	f200 81b3 	bhi.w	800a794 <USBH_Process+0x394>
 800a42e:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <USBH_Process+0x34>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a465 	.word	0x0800a465
 800a438:	0800a497 	.word	0x0800a497
 800a43c:	0800a4ff 	.word	0x0800a4ff
 800a440:	0800a72f 	.word	0x0800a72f
 800a444:	0800a795 	.word	0x0800a795
 800a448:	0800a5a3 	.word	0x0800a5a3
 800a44c:	0800a6d5 	.word	0x0800a6d5
 800a450:	0800a5d9 	.word	0x0800a5d9
 800a454:	0800a5f9 	.word	0x0800a5f9
 800a458:	0800a619 	.word	0x0800a619
 800a45c:	0800a647 	.word	0x0800a647
 800a460:	0800a717 	.word	0x0800a717
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 8193 	beq.w	800a798 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a478:	20c8      	movs	r0, #200	; 0xc8
 800a47a:	f001 fd2f 	bl	800bedc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 fbf5 	bl	800bc6e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a494:	e180      	b.n	800a798 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d107      	bne.n	800a4b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a4ae:	e182      	b.n	800a7b6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a4b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4ba:	d914      	bls.n	800a4e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d903      	bls.n	800a4de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	220d      	movs	r2, #13
 800a4da:	701a      	strb	r2, [r3, #0]
      break;
 800a4dc:	e16b      	b.n	800a7b6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	701a      	strb	r2, [r3, #0]
      break;
 800a4e4:	e167      	b.n	800a7b6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a4ec:	f103 020a 	add.w	r2, r3, #10
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a4f6:	200a      	movs	r0, #10
 800a4f8:	f001 fcf0 	bl	800bedc <USBH_Delay>
      break;
 800a4fc:	e15b      	b.n	800a7b6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a504:	2b00      	cmp	r3, #0
 800a506:	d005      	beq.n	800a514 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a50e:	2104      	movs	r1, #4
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a514:	2064      	movs	r0, #100	; 0x64
 800a516:	f001 fce1 	bl	800bedc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f001 fb80 	bl	800bc20 <USBH_LL_GetSpeed>
 800a520:	4603      	mov	r3, r0
 800a522:	461a      	mov	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2205      	movs	r2, #5
 800a52e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a530:	2100      	movs	r1, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 f92f 	bl	800b796 <USBH_AllocPipe>
 800a538:	4603      	mov	r3, r0
 800a53a:	461a      	mov	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a540:	2180      	movs	r1, #128	; 0x80
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 f927 	bl	800b796 <USBH_AllocPipe>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	7919      	ldrb	r1, [r3, #4]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a564:	b292      	uxth	r2, r2
 800a566:	9202      	str	r2, [sp, #8]
 800a568:	2200      	movs	r2, #0
 800a56a:	9201      	str	r2, [sp, #4]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	4603      	mov	r3, r0
 800a570:	2280      	movs	r2, #128	; 0x80
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 f8e0 	bl	800b738 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	7959      	ldrb	r1, [r3, #5]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a58c:	b292      	uxth	r2, r2
 800a58e:	9202      	str	r2, [sp, #8]
 800a590:	2200      	movs	r2, #0
 800a592:	9201      	str	r2, [sp, #4]
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	4603      	mov	r3, r0
 800a598:	2200      	movs	r2, #0
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 f8cc 	bl	800b738 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a5a0:	e109      	b.n	800a7b6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f90c 	bl	800a7c0 <USBH_HandleEnum>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 80f3 	bne.w	800a79c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d103      	bne.n	800a5d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2208      	movs	r2, #8
 800a5cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a5ce:	e0e5      	b.n	800a79c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2207      	movs	r2, #7
 800a5d4:	701a      	strb	r2, [r3, #0]
      break;
 800a5d6:	e0e1      	b.n	800a79c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 80de 	beq.w	800a7a0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2208      	movs	r2, #8
 800a5f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a5f6:	e0d3      	b.n	800a7a0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fc20 	bl	800ae48 <USBH_SetCfg>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f040 80ca 	bne.w	800a7a4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2209      	movs	r2, #9
 800a614:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a616:	e0c5      	b.n	800a7a4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a626:	2101      	movs	r1, #1
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fc30 	bl	800ae8e <USBH_SetFeature>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	f040 80b9 	bne.w	800a7a8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	220a      	movs	r2, #10
 800a63a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a63c:	e0b4      	b.n	800a7a8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	220a      	movs	r2, #10
 800a642:	701a      	strb	r2, [r3, #0]
      break;
 800a644:	e0b0      	b.n	800a7a8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 80ad 	beq.w	800a7ac <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a65a:	2300      	movs	r3, #0
 800a65c:	73fb      	strb	r3, [r7, #15]
 800a65e:	e016      	b.n	800a68e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a660:	7bfa      	ldrb	r2, [r7, #15]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	32de      	adds	r2, #222	; 0xde
 800a666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66a:	791a      	ldrb	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a672:	429a      	cmp	r2, r3
 800a674:	d108      	bne.n	800a688 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a676:	7bfa      	ldrb	r2, [r7, #15]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	32de      	adds	r2, #222	; 0xde
 800a67c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a686:	e005      	b.n	800a694 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	3301      	adds	r3, #1
 800a68c:	73fb      	strb	r3, [r7, #15]
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d0e5      	beq.n	800a660 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d016      	beq.n	800a6cc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	4798      	blx	r3
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d109      	bne.n	800a6c4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2206      	movs	r2, #6
 800a6b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6bc:	2103      	movs	r1, #3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6c2:	e073      	b.n	800a7ac <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	220d      	movs	r2, #13
 800a6c8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ca:	e06f      	b.n	800a7ac <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	220d      	movs	r2, #13
 800a6d0:	701a      	strb	r2, [r3, #0]
      break;
 800a6d2:	e06b      	b.n	800a7ac <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d017      	beq.n	800a70e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	4798      	blx	r3
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d103      	bne.n	800a6fe <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	220b      	movs	r2, #11
 800a6fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6fc:	e058      	b.n	800a7b0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b02      	cmp	r3, #2
 800a704:	d154      	bne.n	800a7b0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	220d      	movs	r2, #13
 800a70a:	701a      	strb	r2, [r3, #0]
      break;
 800a70c:	e050      	b.n	800a7b0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	220d      	movs	r2, #13
 800a712:	701a      	strb	r2, [r3, #0]
      break;
 800a714:	e04c      	b.n	800a7b0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d049      	beq.n	800a7b4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
      }
      break;
 800a72c:	e042      	b.n	800a7b4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff fd72 	bl	800a220 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a742:	2b00      	cmp	r3, #0
 800a744:	d009      	beq.n	800a75a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a760:	2b00      	cmp	r3, #0
 800a762:	d005      	beq.n	800a770 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a76a:	2105      	movs	r1, #5
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d107      	bne.n	800a78c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff fe2b 	bl	800a3e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a78a:	e014      	b.n	800a7b6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 fa11 	bl	800bbb4 <USBH_LL_Start>
      break;
 800a792:	e010      	b.n	800a7b6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a794:	bf00      	nop
 800a796:	e00e      	b.n	800a7b6 <USBH_Process+0x3b6>
      break;
 800a798:	bf00      	nop
 800a79a:	e00c      	b.n	800a7b6 <USBH_Process+0x3b6>
      break;
 800a79c:	bf00      	nop
 800a79e:	e00a      	b.n	800a7b6 <USBH_Process+0x3b6>
    break;
 800a7a0:	bf00      	nop
 800a7a2:	e008      	b.n	800a7b6 <USBH_Process+0x3b6>
      break;
 800a7a4:	bf00      	nop
 800a7a6:	e006      	b.n	800a7b6 <USBH_Process+0x3b6>
      break;
 800a7a8:	bf00      	nop
 800a7aa:	e004      	b.n	800a7b6 <USBH_Process+0x3b6>
      break;
 800a7ac:	bf00      	nop
 800a7ae:	e002      	b.n	800a7b6 <USBH_Process+0x3b6>
      break;
 800a7b0:	bf00      	nop
 800a7b2:	e000      	b.n	800a7b6 <USBH_Process+0x3b6>
      break;
 800a7b4:	bf00      	nop
  }
  return USBH_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af04      	add	r7, sp, #16
 800a7c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	2b07      	cmp	r3, #7
 800a7d6:	f200 81c1 	bhi.w	800ab5c <USBH_HandleEnum+0x39c>
 800a7da:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <USBH_HandleEnum+0x20>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a801 	.word	0x0800a801
 800a7e4:	0800a8bf 	.word	0x0800a8bf
 800a7e8:	0800a929 	.word	0x0800a929
 800a7ec:	0800a9b7 	.word	0x0800a9b7
 800a7f0:	0800aa21 	.word	0x0800aa21
 800a7f4:	0800aa91 	.word	0x0800aa91
 800a7f8:	0800aad7 	.word	0x0800aad7
 800a7fc:	0800ab1d 	.word	0x0800ab1d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a800:	2108      	movs	r1, #8
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fa50 	bl	800aca8 <USBH_Get_DevDesc>
 800a808:	4603      	mov	r3, r0
 800a80a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d130      	bne.n	800a874 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	7919      	ldrb	r1, [r3, #4]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a836:	b292      	uxth	r2, r2
 800a838:	9202      	str	r2, [sp, #8]
 800a83a:	2200      	movs	r2, #0
 800a83c:	9201      	str	r2, [sp, #4]
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	4603      	mov	r3, r0
 800a842:	2280      	movs	r2, #128	; 0x80
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 ff77 	bl	800b738 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	7959      	ldrb	r1, [r3, #5]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a85e:	b292      	uxth	r2, r2
 800a860:	9202      	str	r2, [sp, #8]
 800a862:	2200      	movs	r2, #0
 800a864:	9201      	str	r2, [sp, #4]
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	4603      	mov	r3, r0
 800a86a:	2200      	movs	r2, #0
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 ff63 	bl	800b738 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a872:	e175      	b.n	800ab60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	2b03      	cmp	r3, #3
 800a878:	f040 8172 	bne.w	800ab60 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a882:	3301      	adds	r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a892:	2b03      	cmp	r3, #3
 800a894:	d903      	bls.n	800a89e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	220d      	movs	r2, #13
 800a89a:	701a      	strb	r2, [r3, #0]
      break;
 800a89c:	e160      	b.n	800ab60 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	795b      	ldrb	r3, [r3, #5]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 ff97 	bl	800b7d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	791b      	ldrb	r3, [r3, #4]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 ff91 	bl	800b7d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	701a      	strb	r2, [r3, #0]
      break;
 800a8bc:	e150      	b.n	800ab60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a8be:	2112      	movs	r1, #18
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f9f1 	bl	800aca8 <USBH_Get_DevDesc>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d103      	bne.n	800a8d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a8d6:	e145      	b.n	800ab64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	f040 8142 	bne.w	800ab64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d903      	bls.n	800a902 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	220d      	movs	r2, #13
 800a8fe:	701a      	strb	r2, [r3, #0]
      break;
 800a900:	e130      	b.n	800ab64 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	795b      	ldrb	r3, [r3, #5]
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 ff65 	bl	800b7d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	791b      	ldrb	r3, [r3, #4]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 ff5f 	bl	800b7d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	701a      	strb	r2, [r3, #0]
      break;
 800a926:	e11d      	b.n	800ab64 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a928:	2101      	movs	r1, #1
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa68 	bl	800ae00 <USBH_SetAddress>
 800a930:	4603      	mov	r3, r0
 800a932:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d132      	bne.n	800a9a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a93a:	2002      	movs	r0, #2
 800a93c:	f001 face 	bl	800bedc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2203      	movs	r2, #3
 800a94c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	7919      	ldrb	r1, [r3, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a962:	b292      	uxth	r2, r2
 800a964:	9202      	str	r2, [sp, #8]
 800a966:	2200      	movs	r2, #0
 800a968:	9201      	str	r2, [sp, #4]
 800a96a:	9300      	str	r3, [sp, #0]
 800a96c:	4603      	mov	r3, r0
 800a96e:	2280      	movs	r2, #128	; 0x80
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fee1 	bl	800b738 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	7959      	ldrb	r1, [r3, #5]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a98a:	b292      	uxth	r2, r2
 800a98c:	9202      	str	r2, [sp, #8]
 800a98e:	2200      	movs	r2, #0
 800a990:	9201      	str	r2, [sp, #4]
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	4603      	mov	r3, r0
 800a996:	2200      	movs	r2, #0
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fecd 	bl	800b738 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a99e:	e0e3      	b.n	800ab68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	f040 80e0 	bne.w	800ab68 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	220d      	movs	r2, #13
 800a9ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	705a      	strb	r2, [r3, #1]
      break;
 800a9b4:	e0d8      	b.n	800ab68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a9b6:	2109      	movs	r1, #9
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f99d 	bl	800acf8 <USBH_Get_CfgDesc>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d103      	bne.n	800a9d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2204      	movs	r2, #4
 800a9cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9ce:	e0cd      	b.n	800ab6c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9d0:	7bbb      	ldrb	r3, [r7, #14]
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	f040 80ca 	bne.w	800ab6c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9de:	3301      	adds	r3, #1
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a9ee:	2b03      	cmp	r3, #3
 800a9f0:	d903      	bls.n	800a9fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	220d      	movs	r2, #13
 800a9f6:	701a      	strb	r2, [r3, #0]
      break;
 800a9f8:	e0b8      	b.n	800ab6c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	795b      	ldrb	r3, [r3, #5]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fee9 	bl	800b7d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	791b      	ldrb	r3, [r3, #4]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fee3 	bl	800b7d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	701a      	strb	r2, [r3, #0]
      break;
 800aa1e:	e0a5      	b.n	800ab6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f965 	bl	800acf8 <USBH_Get_CfgDesc>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2205      	movs	r2, #5
 800aa3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa3e:	e097      	b.n	800ab70 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	f040 8094 	bne.w	800ab70 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa4e:	3301      	adds	r3, #1
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d903      	bls.n	800aa6a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	220d      	movs	r2, #13
 800aa66:	701a      	strb	r2, [r3, #0]
      break;
 800aa68:	e082      	b.n	800ab70 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	795b      	ldrb	r3, [r3, #5]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 feb1 	bl	800b7d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	791b      	ldrb	r3, [r3, #4]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 feab 	bl	800b7d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	701a      	strb	r2, [r3, #0]
      break;
 800aa8e:	e06f      	b.n	800ab70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d019      	beq.n	800aace <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aaa6:	23ff      	movs	r3, #255	; 0xff
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f949 	bl	800ad40 <USBH_Get_StringDesc>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d103      	bne.n	800aac0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2206      	movs	r2, #6
 800aabc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aabe:	e059      	b.n	800ab74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d156      	bne.n	800ab74 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2206      	movs	r2, #6
 800aaca:	705a      	strb	r2, [r3, #1]
      break;
 800aacc:	e052      	b.n	800ab74 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2206      	movs	r2, #6
 800aad2:	705a      	strb	r2, [r3, #1]
      break;
 800aad4:	e04e      	b.n	800ab74 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d019      	beq.n	800ab14 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aaec:	23ff      	movs	r3, #255	; 0xff
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f926 	bl	800ad40 <USBH_Get_StringDesc>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d103      	bne.n	800ab06 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2207      	movs	r2, #7
 800ab02:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab04:	e038      	b.n	800ab78 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d135      	bne.n	800ab78 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2207      	movs	r2, #7
 800ab10:	705a      	strb	r2, [r3, #1]
      break;
 800ab12:	e031      	b.n	800ab78 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2207      	movs	r2, #7
 800ab18:	705a      	strb	r2, [r3, #1]
      break;
 800ab1a:	e02d      	b.n	800ab78 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d017      	beq.n	800ab56 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab32:	23ff      	movs	r3, #255	; 0xff
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f903 	bl	800ad40 <USBH_Get_StringDesc>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab3e:	7bbb      	ldrb	r3, [r7, #14]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d102      	bne.n	800ab4a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ab48:	e018      	b.n	800ab7c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d115      	bne.n	800ab7c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73fb      	strb	r3, [r7, #15]
      break;
 800ab54:	e012      	b.n	800ab7c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73fb      	strb	r3, [r7, #15]
      break;
 800ab5a:	e00f      	b.n	800ab7c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ab5c:	bf00      	nop
 800ab5e:	e00e      	b.n	800ab7e <USBH_HandleEnum+0x3be>
      break;
 800ab60:	bf00      	nop
 800ab62:	e00c      	b.n	800ab7e <USBH_HandleEnum+0x3be>
      break;
 800ab64:	bf00      	nop
 800ab66:	e00a      	b.n	800ab7e <USBH_HandleEnum+0x3be>
      break;
 800ab68:	bf00      	nop
 800ab6a:	e008      	b.n	800ab7e <USBH_HandleEnum+0x3be>
      break;
 800ab6c:	bf00      	nop
 800ab6e:	e006      	b.n	800ab7e <USBH_HandleEnum+0x3be>
      break;
 800ab70:	bf00      	nop
 800ab72:	e004      	b.n	800ab7e <USBH_HandleEnum+0x3be>
      break;
 800ab74:	bf00      	nop
 800ab76:	e002      	b.n	800ab7e <USBH_HandleEnum+0x3be>
      break;
 800ab78:	bf00      	nop
 800ab7a:	e000      	b.n	800ab7e <USBH_HandleEnum+0x3be>
      break;
 800ab7c:	bf00      	nop
  }
  return Status;
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ab9a:	bf00      	nop
 800ab9c:	370c      	adds	r7, #12
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f804 	bl	800abca <USBH_HandleSof>
}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b0b      	cmp	r3, #11
 800abda:	d10a      	bne.n	800abf2 <USBH_HandleSof+0x28>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d005      	beq.n	800abf2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	4798      	blx	r3
  }
}
 800abf2:	bf00      	nop
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ac0a:	bf00      	nop
}
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b083      	sub	sp, #12
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ac26:	bf00      	nop
}
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 ffb2 	bl	800bbea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	791b      	ldrb	r3, [r3, #4]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fda3 	bl	800b7d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	795b      	ldrb	r3, [r3, #5]
 800ac96:	4619      	mov	r1, r3
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fd9d 	bl	800b7d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af02      	add	r7, sp, #8
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800acba:	78fb      	ldrb	r3, [r7, #3]
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	4613      	mov	r3, r2
 800acc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acc6:	2100      	movs	r1, #0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f864 	bl	800ad96 <USBH_GetDescriptor>
 800acce:	4603      	mov	r3, r0
 800acd0:	73fb      	strb	r3, [r7, #15]
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f203 3026 	addw	r0, r3, #806	; 0x326
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ace4:	78fa      	ldrb	r2, [r7, #3]
 800ace6:	b292      	uxth	r2, r2
 800ace8:	4619      	mov	r1, r3
 800acea:	f000 f918 	bl	800af1e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800acee:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af02      	add	r7, sp, #8
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	331c      	adds	r3, #28
 800ad08:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ad0a:	887b      	ldrh	r3, [r7, #2]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad14:	2100      	movs	r1, #0
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f83d 	bl	800ad96 <USBH_GetDescriptor>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	72fb      	strb	r3, [r7, #11]
 800ad20:	7afb      	ldrb	r3, [r7, #11]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d107      	bne.n	800ad36 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ad2c:	887a      	ldrh	r2, [r7, #2]
 800ad2e:	68f9      	ldr	r1, [r7, #12]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 f964 	bl	800affe <USBH_ParseCfgDesc>
  }

  return status;
 800ad36:	7afb      	ldrb	r3, [r7, #11]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b088      	sub	sp, #32
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	72fb      	strb	r3, [r7, #11]
 800ad50:	4613      	mov	r3, r2
 800ad52:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ad54:	7afb      	ldrb	r3, [r7, #11]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ad5c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ad64:	893b      	ldrh	r3, [r7, #8]
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 f812 	bl	800ad96 <USBH_GetDescriptor>
 800ad72:	4603      	mov	r3, r0
 800ad74:	75fb      	strb	r3, [r7, #23]
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d107      	bne.n	800ad8c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad82:	893a      	ldrh	r2, [r7, #8]
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 fa37 	bl	800b1fa <USBH_ParseStringDesc>
  }

  return status;
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	607b      	str	r3, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	72fb      	strb	r3, [r7, #11]
 800ada4:	4613      	mov	r3, r2
 800ada6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	789b      	ldrb	r3, [r3, #2]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d11c      	bne.n	800adea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adb6:	b2da      	uxtb	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2206      	movs	r2, #6
 800adc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	893a      	ldrh	r2, [r7, #8]
 800adc6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800adc8:	893b      	ldrh	r3, [r7, #8]
 800adca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800adce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800add2:	d104      	bne.n	800adde <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f240 4209 	movw	r2, #1033	; 0x409
 800adda:	829a      	strh	r2, [r3, #20]
 800addc:	e002      	b.n	800ade4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8b3a      	ldrh	r2, [r7, #24]
 800ade8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800adea:	8b3b      	ldrh	r3, [r7, #24]
 800adec:	461a      	mov	r2, r3
 800adee:	6879      	ldr	r1, [r7, #4]
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f000 fa50 	bl	800b296 <USBH_CtlReq>
 800adf6:	4603      	mov	r3, r0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	789b      	ldrb	r3, [r3, #2]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d10f      	bne.n	800ae34 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2205      	movs	r2, #5
 800ae1e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ae34:	2200      	movs	r2, #0
 800ae36:	2100      	movs	r1, #0
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fa2c 	bl	800b296 <USBH_CtlReq>
 800ae3e:	4603      	mov	r3, r0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	789b      	ldrb	r3, [r3, #2]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d10e      	bne.n	800ae7a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2209      	movs	r2, #9
 800ae66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	887a      	ldrh	r2, [r7, #2]
 800ae6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fa09 	bl	800b296 <USBH_CtlReq>
 800ae84:	4603      	mov	r3, r0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b082      	sub	sp, #8
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	460b      	mov	r3, r1
 800ae98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	789b      	ldrb	r3, [r3, #2]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d10f      	bne.n	800aec2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2203      	movs	r2, #3
 800aeac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aec2:	2200      	movs	r2, #0
 800aec4:	2100      	movs	r1, #0
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f9e5 	bl	800b296 <USBH_CtlReq>
 800aecc:	4603      	mov	r3, r0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	460b      	mov	r3, r1
 800aee0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	789b      	ldrb	r3, [r3, #2]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d10f      	bne.n	800af0a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2202      	movs	r2, #2
 800aeee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aefc:	78fb      	ldrb	r3, [r7, #3]
 800aefe:	b29a      	uxth	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800af0a:	2200      	movs	r2, #0
 800af0c:	2100      	movs	r1, #0
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f9c1 	bl	800b296 <USBH_CtlReq>
 800af14:	4603      	mov	r3, r0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800af1e:	b480      	push	{r7}
 800af20:	b085      	sub	sp, #20
 800af22:	af00      	add	r7, sp, #0
 800af24:	60f8      	str	r0, [r7, #12]
 800af26:	60b9      	str	r1, [r7, #8]
 800af28:	4613      	mov	r3, r2
 800af2a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	781a      	ldrb	r2, [r3, #0]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	785a      	ldrb	r2, [r3, #1]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	3302      	adds	r3, #2
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	b29a      	uxth	r2, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	3303      	adds	r3, #3
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	021b      	lsls	r3, r3, #8
 800af4e:	b29b      	uxth	r3, r3
 800af50:	4313      	orrs	r3, r2
 800af52:	b29a      	uxth	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	791a      	ldrb	r2, [r3, #4]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	795a      	ldrb	r2, [r3, #5]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	799a      	ldrb	r2, [r3, #6]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	79da      	ldrb	r2, [r3, #7]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800af78:	88fb      	ldrh	r3, [r7, #6]
 800af7a:	2b08      	cmp	r3, #8
 800af7c:	d939      	bls.n	800aff2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	3308      	adds	r3, #8
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	b29a      	uxth	r2, r3
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	3309      	adds	r3, #9
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	021b      	lsls	r3, r3, #8
 800af90:	b29b      	uxth	r3, r3
 800af92:	4313      	orrs	r3, r2
 800af94:	b29a      	uxth	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	330a      	adds	r3, #10
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	330b      	adds	r3, #11
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	021b      	lsls	r3, r3, #8
 800afac:	b29b      	uxth	r3, r3
 800afae:	4313      	orrs	r3, r2
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	330c      	adds	r3, #12
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	330d      	adds	r3, #13
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	021b      	lsls	r3, r3, #8
 800afc8:	b29b      	uxth	r3, r3
 800afca:	4313      	orrs	r3, r2
 800afcc:	b29a      	uxth	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	7b9a      	ldrb	r2, [r3, #14]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	7bda      	ldrb	r2, [r3, #15]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	7c1a      	ldrb	r2, [r3, #16]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	7c5a      	ldrb	r2, [r3, #17]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	745a      	strb	r2, [r3, #17]
  }
}
 800aff2:	bf00      	nop
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b08a      	sub	sp, #40	; 0x28
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	4613      	mov	r3, r2
 800b00a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	781a      	ldrb	r2, [r3, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	785a      	ldrb	r2, [r3, #1]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	3302      	adds	r3, #2
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	b29a      	uxth	r2, r3
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	3303      	adds	r3, #3
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	021b      	lsls	r3, r3, #8
 800b042:	b29b      	uxth	r3, r3
 800b044:	4313      	orrs	r3, r2
 800b046:	b29a      	uxth	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	791a      	ldrb	r2, [r3, #4]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	795a      	ldrb	r2, [r3, #5]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	799a      	ldrb	r2, [r3, #6]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	79da      	ldrb	r2, [r3, #7]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	7a1a      	ldrb	r2, [r3, #8]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b074:	88fb      	ldrh	r3, [r7, #6]
 800b076:	2b09      	cmp	r3, #9
 800b078:	d95f      	bls.n	800b13a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b07a:	2309      	movs	r3, #9
 800b07c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b07e:	2300      	movs	r3, #0
 800b080:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b082:	e051      	b.n	800b128 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b084:	f107 0316 	add.w	r3, r7, #22
 800b088:	4619      	mov	r1, r3
 800b08a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b08c:	f000 f8e8 	bl	800b260 <USBH_GetNextDesc>
 800b090:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	785b      	ldrb	r3, [r3, #1]
 800b096:	2b04      	cmp	r3, #4
 800b098:	d146      	bne.n	800b128 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b09a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b09e:	221a      	movs	r2, #26
 800b0a0:	fb02 f303 	mul.w	r3, r2, r3
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b0ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0b0:	69f8      	ldr	r0, [r7, #28]
 800b0b2:	f000 f846 	bl	800b142 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b0c0:	e022      	b.n	800b108 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b0c2:	f107 0316 	add.w	r3, r7, #22
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ca:	f000 f8c9 	bl	800b260 <USBH_GetNextDesc>
 800b0ce:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	785b      	ldrb	r3, [r3, #1]
 800b0d4:	2b05      	cmp	r3, #5
 800b0d6:	d117      	bne.n	800b108 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b0d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b0e0:	3201      	adds	r2, #1
 800b0e2:	00d2      	lsls	r2, r2, #3
 800b0e4:	211a      	movs	r1, #26
 800b0e6:	fb01 f303 	mul.w	r3, r1, r3
 800b0ea:	4413      	add	r3, r2
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b0f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0f8:	69b8      	ldr	r0, [r7, #24]
 800b0fa:	f000 f851 	bl	800b1a0 <USBH_ParseEPDesc>
            ep_ix++;
 800b0fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b102:	3301      	adds	r3, #1
 800b104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	791b      	ldrb	r3, [r3, #4]
 800b10c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b110:	429a      	cmp	r2, r3
 800b112:	d204      	bcs.n	800b11e <USBH_ParseCfgDesc+0x120>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	885a      	ldrh	r2, [r3, #2]
 800b118:	8afb      	ldrh	r3, [r7, #22]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d8d1      	bhi.n	800b0c2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b11e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b122:	3301      	adds	r3, #1
 800b124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d804      	bhi.n	800b13a <USBH_ParseCfgDesc+0x13c>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	885a      	ldrh	r2, [r3, #2]
 800b134:	8afb      	ldrh	r3, [r7, #22]
 800b136:	429a      	cmp	r2, r3
 800b138:	d8a4      	bhi.n	800b084 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b13a:	bf00      	nop
 800b13c:	3728      	adds	r7, #40	; 0x28
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b142:	b480      	push	{r7}
 800b144:	b083      	sub	sp, #12
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	781a      	ldrb	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	785a      	ldrb	r2, [r3, #1]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	789a      	ldrb	r2, [r3, #2]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	78da      	ldrb	r2, [r3, #3]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	791a      	ldrb	r2, [r3, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	795a      	ldrb	r2, [r3, #5]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	799a      	ldrb	r2, [r3, #6]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	79da      	ldrb	r2, [r3, #7]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	7a1a      	ldrb	r2, [r3, #8]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	721a      	strb	r2, [r3, #8]
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	781a      	ldrb	r2, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	785a      	ldrb	r2, [r3, #1]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	789a      	ldrb	r2, [r3, #2]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	78da      	ldrb	r2, [r3, #3]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	3305      	adds	r3, #5
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	799a      	ldrb	r2, [r3, #6]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	719a      	strb	r2, [r3, #6]
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b087      	sub	sp, #28
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	60f8      	str	r0, [r7, #12]
 800b202:	60b9      	str	r1, [r7, #8]
 800b204:	4613      	mov	r3, r2
 800b206:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d120      	bne.n	800b254 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	1e9a      	subs	r2, r3, #2
 800b218:	88fb      	ldrh	r3, [r7, #6]
 800b21a:	4293      	cmp	r3, r2
 800b21c:	bf28      	it	cs
 800b21e:	4613      	movcs	r3, r2
 800b220:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3302      	adds	r3, #2
 800b226:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b228:	2300      	movs	r3, #0
 800b22a:	82fb      	strh	r3, [r7, #22]
 800b22c:	e00b      	b.n	800b246 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b22e:	8afb      	ldrh	r3, [r7, #22]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	4413      	add	r3, r2
 800b234:	781a      	ldrb	r2, [r3, #0]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	3301      	adds	r3, #1
 800b23e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b240:	8afb      	ldrh	r3, [r7, #22]
 800b242:	3302      	adds	r3, #2
 800b244:	82fb      	strh	r3, [r7, #22]
 800b246:	8afa      	ldrh	r2, [r7, #22]
 800b248:	8abb      	ldrh	r3, [r7, #20]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d3ef      	bcc.n	800b22e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]
  }
}
 800b254:	bf00      	nop
 800b256:	371c      	adds	r7, #28
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	881a      	ldrh	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	b29b      	uxth	r3, r3
 800b274:	4413      	add	r3, r2
 800b276:	b29a      	uxth	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4413      	add	r3, r2
 800b286:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b288:	68fb      	ldr	r3, [r7, #12]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b086      	sub	sp, #24
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	60f8      	str	r0, [r7, #12]
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	789b      	ldrb	r3, [r3, #2]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d002      	beq.n	800b2b6 <USBH_CtlReq+0x20>
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d00f      	beq.n	800b2d4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b2b4:	e027      	b.n	800b306 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	88fa      	ldrh	r2, [r7, #6]
 800b2c0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2d2:	e018      	b.n	800b306 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 f81b 	bl	800b310 <USBH_HandleControl>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <USBH_CtlReq+0x54>
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d106      	bne.n	800b2f8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	761a      	strb	r2, [r3, #24]
      break;
 800b2f6:	e005      	b.n	800b304 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d102      	bne.n	800b304 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2201      	movs	r2, #1
 800b302:	709a      	strb	r2, [r3, #2]
      break;
 800b304:	bf00      	nop
  }
  return status;
 800b306:	7dfb      	ldrb	r3, [r7, #23]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af02      	add	r7, sp, #8
 800b316:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b318:	2301      	movs	r3, #1
 800b31a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b31c:	2300      	movs	r3, #0
 800b31e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	7e1b      	ldrb	r3, [r3, #24]
 800b324:	3b01      	subs	r3, #1
 800b326:	2b0a      	cmp	r3, #10
 800b328:	f200 8156 	bhi.w	800b5d8 <USBH_HandleControl+0x2c8>
 800b32c:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <USBH_HandleControl+0x24>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b361 	.word	0x0800b361
 800b338:	0800b37b 	.word	0x0800b37b
 800b33c:	0800b3e5 	.word	0x0800b3e5
 800b340:	0800b40b 	.word	0x0800b40b
 800b344:	0800b443 	.word	0x0800b443
 800b348:	0800b46d 	.word	0x0800b46d
 800b34c:	0800b4bf 	.word	0x0800b4bf
 800b350:	0800b4e1 	.word	0x0800b4e1
 800b354:	0800b51d 	.word	0x0800b51d
 800b358:	0800b543 	.word	0x0800b543
 800b35c:	0800b581 	.word	0x0800b581
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f103 0110 	add.w	r1, r3, #16
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	795b      	ldrb	r3, [r3, #5]
 800b36a:	461a      	mov	r2, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f943 	bl	800b5f8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2202      	movs	r2, #2
 800b376:	761a      	strb	r2, [r3, #24]
      break;
 800b378:	e139      	b.n	800b5ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	795b      	ldrb	r3, [r3, #5]
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fd21 	bl	800bdc8 <USBH_LL_GetURBState>
 800b386:	4603      	mov	r3, r0
 800b388:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d11e      	bne.n	800b3ce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	7c1b      	ldrb	r3, [r3, #16]
 800b394:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b398:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	8adb      	ldrh	r3, [r3, #22]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00a      	beq.n	800b3b8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b3a2:	7b7b      	ldrb	r3, [r7, #13]
 800b3a4:	2b80      	cmp	r3, #128	; 0x80
 800b3a6:	d103      	bne.n	800b3b0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2203      	movs	r2, #3
 800b3ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b3ae:	e115      	b.n	800b5dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2205      	movs	r2, #5
 800b3b4:	761a      	strb	r2, [r3, #24]
      break;
 800b3b6:	e111      	b.n	800b5dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b3b8:	7b7b      	ldrb	r3, [r7, #13]
 800b3ba:	2b80      	cmp	r3, #128	; 0x80
 800b3bc:	d103      	bne.n	800b3c6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2209      	movs	r2, #9
 800b3c2:	761a      	strb	r2, [r3, #24]
      break;
 800b3c4:	e10a      	b.n	800b5dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2207      	movs	r2, #7
 800b3ca:	761a      	strb	r2, [r3, #24]
      break;
 800b3cc:	e106      	b.n	800b5dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b3ce:	7bbb      	ldrb	r3, [r7, #14]
 800b3d0:	2b04      	cmp	r3, #4
 800b3d2:	d003      	beq.n	800b3dc <USBH_HandleControl+0xcc>
 800b3d4:	7bbb      	ldrb	r3, [r7, #14]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	f040 8100 	bne.w	800b5dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	220b      	movs	r2, #11
 800b3e0:	761a      	strb	r2, [r3, #24]
      break;
 800b3e2:	e0fb      	b.n	800b5dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6899      	ldr	r1, [r3, #8]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	899a      	ldrh	r2, [r3, #12]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	791b      	ldrb	r3, [r3, #4]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f93a 	bl	800b676 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2204      	movs	r2, #4
 800b406:	761a      	strb	r2, [r3, #24]
      break;
 800b408:	e0f1      	b.n	800b5ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	791b      	ldrb	r3, [r3, #4]
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fcd9 	bl	800bdc8 <USBH_LL_GetURBState>
 800b416:	4603      	mov	r3, r0
 800b418:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b41a:	7bbb      	ldrb	r3, [r7, #14]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d102      	bne.n	800b426 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2209      	movs	r2, #9
 800b424:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b426:	7bbb      	ldrb	r3, [r7, #14]
 800b428:	2b05      	cmp	r3, #5
 800b42a:	d102      	bne.n	800b432 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b42c:	2303      	movs	r3, #3
 800b42e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b430:	e0d6      	b.n	800b5e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	2b04      	cmp	r3, #4
 800b436:	f040 80d3 	bne.w	800b5e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	220b      	movs	r2, #11
 800b43e:	761a      	strb	r2, [r3, #24]
      break;
 800b440:	e0ce      	b.n	800b5e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6899      	ldr	r1, [r3, #8]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	899a      	ldrh	r2, [r3, #12]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	795b      	ldrb	r3, [r3, #5]
 800b44e:	2001      	movs	r0, #1
 800b450:	9000      	str	r0, [sp, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f8ea 	bl	800b62c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b45e:	b29a      	uxth	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2206      	movs	r2, #6
 800b468:	761a      	strb	r2, [r3, #24]
      break;
 800b46a:	e0c0      	b.n	800b5ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	795b      	ldrb	r3, [r3, #5]
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fca8 	bl	800bdc8 <USBH_LL_GetURBState>
 800b478:	4603      	mov	r3, r0
 800b47a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d103      	bne.n	800b48a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2207      	movs	r2, #7
 800b486:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b488:	e0ac      	b.n	800b5e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
 800b48c:	2b05      	cmp	r3, #5
 800b48e:	d105      	bne.n	800b49c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	220c      	movs	r2, #12
 800b494:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b496:	2303      	movs	r3, #3
 800b498:	73fb      	strb	r3, [r7, #15]
      break;
 800b49a:	e0a3      	b.n	800b5e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b49c:	7bbb      	ldrb	r3, [r7, #14]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d103      	bne.n	800b4aa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2205      	movs	r2, #5
 800b4a6:	761a      	strb	r2, [r3, #24]
      break;
 800b4a8:	e09c      	b.n	800b5e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
 800b4ac:	2b04      	cmp	r3, #4
 800b4ae:	f040 8099 	bne.w	800b5e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	220b      	movs	r2, #11
 800b4b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b4bc:	e092      	b.n	800b5e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	791b      	ldrb	r3, [r3, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f8d5 	bl	800b676 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2208      	movs	r2, #8
 800b4dc:	761a      	strb	r2, [r3, #24]

      break;
 800b4de:	e086      	b.n	800b5ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	791b      	ldrb	r3, [r3, #4]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fc6e 	bl	800bdc8 <USBH_LL_GetURBState>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d105      	bne.n	800b502 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	220d      	movs	r2, #13
 800b4fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b500:	e072      	b.n	800b5e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b502:	7bbb      	ldrb	r3, [r7, #14]
 800b504:	2b04      	cmp	r3, #4
 800b506:	d103      	bne.n	800b510 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	220b      	movs	r2, #11
 800b50c:	761a      	strb	r2, [r3, #24]
      break;
 800b50e:	e06b      	b.n	800b5e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b510:	7bbb      	ldrb	r3, [r7, #14]
 800b512:	2b05      	cmp	r3, #5
 800b514:	d168      	bne.n	800b5e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b516:	2303      	movs	r3, #3
 800b518:	73fb      	strb	r3, [r7, #15]
      break;
 800b51a:	e065      	b.n	800b5e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	795b      	ldrb	r3, [r3, #5]
 800b520:	2201      	movs	r2, #1
 800b522:	9200      	str	r2, [sp, #0]
 800b524:	2200      	movs	r2, #0
 800b526:	2100      	movs	r1, #0
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f87f 	bl	800b62c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b534:	b29a      	uxth	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	220a      	movs	r2, #10
 800b53e:	761a      	strb	r2, [r3, #24]
      break;
 800b540:	e055      	b.n	800b5ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	795b      	ldrb	r3, [r3, #5]
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fc3d 	bl	800bdc8 <USBH_LL_GetURBState>
 800b54e:	4603      	mov	r3, r0
 800b550:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b552:	7bbb      	ldrb	r3, [r7, #14]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d105      	bne.n	800b564 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	220d      	movs	r2, #13
 800b560:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b562:	e043      	b.n	800b5ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d103      	bne.n	800b572 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2209      	movs	r2, #9
 800b56e:	761a      	strb	r2, [r3, #24]
      break;
 800b570:	e03c      	b.n	800b5ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	2b04      	cmp	r3, #4
 800b576:	d139      	bne.n	800b5ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	220b      	movs	r2, #11
 800b57c:	761a      	strb	r2, [r3, #24]
      break;
 800b57e:	e035      	b.n	800b5ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	7e5b      	ldrb	r3, [r3, #25]
 800b584:	3301      	adds	r3, #1
 800b586:	b2da      	uxtb	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	765a      	strb	r2, [r3, #25]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	7e5b      	ldrb	r3, [r3, #25]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d806      	bhi.n	800b5a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b5a0:	e025      	b.n	800b5ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5a8:	2106      	movs	r1, #6
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	795b      	ldrb	r3, [r3, #5]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f90c 	bl	800b7d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	791b      	ldrb	r3, [r3, #4]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f906 	bl	800b7d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b5d6:	e00a      	b.n	800b5ee <USBH_HandleControl+0x2de>

    default:
      break;
 800b5d8:	bf00      	nop
 800b5da:	e008      	b.n	800b5ee <USBH_HandleControl+0x2de>
      break;
 800b5dc:	bf00      	nop
 800b5de:	e006      	b.n	800b5ee <USBH_HandleControl+0x2de>
      break;
 800b5e0:	bf00      	nop
 800b5e2:	e004      	b.n	800b5ee <USBH_HandleControl+0x2de>
      break;
 800b5e4:	bf00      	nop
 800b5e6:	e002      	b.n	800b5ee <USBH_HandleControl+0x2de>
      break;
 800b5e8:	bf00      	nop
 800b5ea:	e000      	b.n	800b5ee <USBH_HandleControl+0x2de>
      break;
 800b5ec:	bf00      	nop
  }

  return status;
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3710      	adds	r7, #16
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b088      	sub	sp, #32
 800b5fc:	af04      	add	r7, sp, #16
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	4613      	mov	r3, r2
 800b604:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b606:	79f9      	ldrb	r1, [r7, #7]
 800b608:	2300      	movs	r3, #0
 800b60a:	9303      	str	r3, [sp, #12]
 800b60c:	2308      	movs	r3, #8
 800b60e:	9302      	str	r3, [sp, #8]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	2300      	movs	r3, #0
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	2300      	movs	r3, #0
 800b61a:	2200      	movs	r2, #0
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 fba2 	bl	800bd66 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b088      	sub	sp, #32
 800b630:	af04      	add	r7, sp, #16
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	4611      	mov	r1, r2
 800b638:	461a      	mov	r2, r3
 800b63a:	460b      	mov	r3, r1
 800b63c:	80fb      	strh	r3, [r7, #6]
 800b63e:	4613      	mov	r3, r2
 800b640:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b64c:	2300      	movs	r3, #0
 800b64e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b650:	7979      	ldrb	r1, [r7, #5]
 800b652:	7e3b      	ldrb	r3, [r7, #24]
 800b654:	9303      	str	r3, [sp, #12]
 800b656:	88fb      	ldrh	r3, [r7, #6]
 800b658:	9302      	str	r3, [sp, #8]
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	2301      	movs	r3, #1
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	2300      	movs	r3, #0
 800b664:	2200      	movs	r2, #0
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 fb7d 	bl	800bd66 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b088      	sub	sp, #32
 800b67a:	af04      	add	r7, sp, #16
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	4611      	mov	r1, r2
 800b682:	461a      	mov	r2, r3
 800b684:	460b      	mov	r3, r1
 800b686:	80fb      	strh	r3, [r7, #6]
 800b688:	4613      	mov	r3, r2
 800b68a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b68c:	7979      	ldrb	r1, [r7, #5]
 800b68e:	2300      	movs	r3, #0
 800b690:	9303      	str	r3, [sp, #12]
 800b692:	88fb      	ldrh	r3, [r7, #6]
 800b694:	9302      	str	r3, [sp, #8]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	2301      	movs	r3, #1
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f000 fb5f 	bl	800bd66 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b6a8:	2300      	movs	r3, #0

}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b088      	sub	sp, #32
 800b6b6:	af04      	add	r7, sp, #16
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	4611      	mov	r1, r2
 800b6be:	461a      	mov	r2, r3
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	80fb      	strh	r3, [r7, #6]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6d6:	7979      	ldrb	r1, [r7, #5]
 800b6d8:	7e3b      	ldrb	r3, [r7, #24]
 800b6da:	9303      	str	r3, [sp, #12]
 800b6dc:	88fb      	ldrh	r3, [r7, #6]
 800b6de:	9302      	str	r3, [sp, #8]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f000 fb3a 	bl	800bd66 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af04      	add	r7, sp, #16
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	4611      	mov	r1, r2
 800b708:	461a      	mov	r2, r3
 800b70a:	460b      	mov	r3, r1
 800b70c:	80fb      	strh	r3, [r7, #6]
 800b70e:	4613      	mov	r3, r2
 800b710:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b712:	7979      	ldrb	r1, [r7, #5]
 800b714:	2300      	movs	r3, #0
 800b716:	9303      	str	r3, [sp, #12]
 800b718:	88fb      	ldrh	r3, [r7, #6]
 800b71a:	9302      	str	r3, [sp, #8]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	2301      	movs	r3, #1
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	2302      	movs	r3, #2
 800b726:	2201      	movs	r2, #1
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f000 fb1c 	bl	800bd66 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af04      	add	r7, sp, #16
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	4608      	mov	r0, r1
 800b742:	4611      	mov	r1, r2
 800b744:	461a      	mov	r2, r3
 800b746:	4603      	mov	r3, r0
 800b748:	70fb      	strb	r3, [r7, #3]
 800b74a:	460b      	mov	r3, r1
 800b74c:	70bb      	strb	r3, [r7, #2]
 800b74e:	4613      	mov	r3, r2
 800b750:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b752:	7878      	ldrb	r0, [r7, #1]
 800b754:	78ba      	ldrb	r2, [r7, #2]
 800b756:	78f9      	ldrb	r1, [r7, #3]
 800b758:	8b3b      	ldrh	r3, [r7, #24]
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	7d3b      	ldrb	r3, [r7, #20]
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	7c3b      	ldrb	r3, [r7, #16]
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	4603      	mov	r3, r0
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 faaf 	bl	800bcca <USBH_LL_OpenPipe>

  return USBH_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b082      	sub	sp, #8
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b782:	78fb      	ldrb	r3, [r7, #3]
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 face 	bl	800bd28 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b084      	sub	sp, #16
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	460b      	mov	r3, r1
 800b7a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f836 	bl	800b814 <USBH_GetFreePipe>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b7ac:	89fb      	ldrh	r3, [r7, #14]
 800b7ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d00a      	beq.n	800b7cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b7b6:	78fa      	ldrb	r2, [r7, #3]
 800b7b8:	89fb      	ldrh	r3, [r7, #14]
 800b7ba:	f003 030f 	and.w	r3, r3, #15
 800b7be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7c2:	6879      	ldr	r1, [r7, #4]
 800b7c4:	33e0      	adds	r3, #224	; 0xe0
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	440b      	add	r3, r1
 800b7ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b7cc:	89fb      	ldrh	r3, [r7, #14]
 800b7ce:	b2db      	uxtb	r3, r3
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	2b0a      	cmp	r3, #10
 800b7e8:	d80d      	bhi.n	800b806 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b7ea:	78fb      	ldrb	r3, [r7, #3]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	33e0      	adds	r3, #224	; 0xe0
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	78fb      	ldrb	r3, [r7, #3]
 800b7f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b7fc:	6879      	ldr	r1, [r7, #4]
 800b7fe:	33e0      	adds	r3, #224	; 0xe0
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	440b      	add	r3, r1
 800b804:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b820:	2300      	movs	r3, #0
 800b822:	73fb      	strb	r3, [r7, #15]
 800b824:	e00f      	b.n	800b846 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b826:	7bfb      	ldrb	r3, [r7, #15]
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	33e0      	adds	r3, #224	; 0xe0
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4413      	add	r3, r2
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b836:	2b00      	cmp	r3, #0
 800b838:	d102      	bne.n	800b840 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	e007      	b.n	800b850 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	3301      	adds	r3, #1
 800b844:	73fb      	strb	r3, [r7, #15]
 800b846:	7bfb      	ldrb	r3, [r7, #15]
 800b848:	2b0a      	cmp	r3, #10
 800b84a:	d9ec      	bls.n	800b826 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b84c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b850:	4618      	mov	r0, r3
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b86a:	2301      	movs	r3, #1
 800b86c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b872:	4b1f      	ldr	r3, [pc, #124]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b874:	7a5b      	ldrb	r3, [r3, #9]
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d131      	bne.n	800b8e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b87c:	4b1c      	ldr	r3, [pc, #112]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b87e:	7a5b      	ldrb	r3, [r3, #9]
 800b880:	b2db      	uxtb	r3, r3
 800b882:	461a      	mov	r2, r3
 800b884:	4b1a      	ldr	r3, [pc, #104]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b886:	2100      	movs	r1, #0
 800b888:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b88a:	4b19      	ldr	r3, [pc, #100]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b88c:	7a5b      	ldrb	r3, [r3, #9]
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	4a17      	ldr	r2, [pc, #92]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	4413      	add	r3, r2
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b89a:	4b15      	ldr	r3, [pc, #84]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b89c:	7a5b      	ldrb	r3, [r3, #9]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	4b13      	ldr	r3, [pc, #76]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b8a4:	4413      	add	r3, r2
 800b8a6:	79fa      	ldrb	r2, [r7, #7]
 800b8a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b8aa:	4b11      	ldr	r3, [pc, #68]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b8ac:	7a5b      	ldrb	r3, [r3, #9]
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	1c5a      	adds	r2, r3, #1
 800b8b2:	b2d1      	uxtb	r1, r2
 800b8b4:	4a0e      	ldr	r2, [pc, #56]	; (800b8f0 <FATFS_LinkDriverEx+0x94>)
 800b8b6:	7251      	strb	r1, [r2, #9]
 800b8b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b8ba:	7dbb      	ldrb	r3, [r7, #22]
 800b8bc:	3330      	adds	r3, #48	; 0x30
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	223a      	movs	r2, #58	; 0x3a
 800b8ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	3302      	adds	r3, #2
 800b8d0:	222f      	movs	r2, #47	; 0x2f
 800b8d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	3303      	adds	r3, #3
 800b8d8:	2200      	movs	r2, #0
 800b8da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	371c      	adds	r7, #28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	2000010c 	.word	0x2000010c

0800b8f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b8fe:	2200      	movs	r2, #0
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff ffaa 	bl	800b85c <FATFS_LinkDriverEx>
 800b908:	4603      	mov	r3, r0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b918:	2201      	movs	r2, #1
 800b91a:	490e      	ldr	r1, [pc, #56]	; (800b954 <MX_USB_HOST_Init+0x40>)
 800b91c:	480e      	ldr	r0, [pc, #56]	; (800b958 <MX_USB_HOST_Init+0x44>)
 800b91e:	f7fe fc45 	bl	800a1ac <USBH_Init>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b928:	f7f5 faec 	bl	8000f04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b92c:	490b      	ldr	r1, [pc, #44]	; (800b95c <MX_USB_HOST_Init+0x48>)
 800b92e:	480a      	ldr	r0, [pc, #40]	; (800b958 <MX_USB_HOST_Init+0x44>)
 800b930:	f7fe fcca 	bl	800a2c8 <USBH_RegisterClass>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b93a:	f7f5 fae3 	bl	8000f04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b93e:	4806      	ldr	r0, [pc, #24]	; (800b958 <MX_USB_HOST_Init+0x44>)
 800b940:	f7fe fd4e 	bl	800a3e0 <USBH_Start>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b94a:	f7f5 fadb 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b94e:	bf00      	nop
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	0800b975 	.word	0x0800b975
 800b958:	20003328 	.word	0x20003328
 800b95c:	2000000c 	.word	0x2000000c

0800b960 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b964:	4802      	ldr	r0, [pc, #8]	; (800b970 <MX_USB_HOST_Process+0x10>)
 800b966:	f7fe fd4b 	bl	800a400 <USBH_Process>
}
 800b96a:	bf00      	nop
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20003328 	.word	0x20003328

0800b974 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b980:	78fb      	ldrb	r3, [r7, #3]
 800b982:	3b01      	subs	r3, #1
 800b984:	2b04      	cmp	r3, #4
 800b986:	d819      	bhi.n	800b9bc <USBH_UserProcess+0x48>
 800b988:	a201      	add	r2, pc, #4	; (adr r2, 800b990 <USBH_UserProcess+0x1c>)
 800b98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98e:	bf00      	nop
 800b990:	0800b9bd 	.word	0x0800b9bd
 800b994:	0800b9ad 	.word	0x0800b9ad
 800b998:	0800b9bd 	.word	0x0800b9bd
 800b99c:	0800b9b5 	.word	0x0800b9b5
 800b9a0:	0800b9a5 	.word	0x0800b9a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b9a4:	4b09      	ldr	r3, [pc, #36]	; (800b9cc <USBH_UserProcess+0x58>)
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	701a      	strb	r2, [r3, #0]
  break;
 800b9aa:	e008      	b.n	800b9be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b9ac:	4b07      	ldr	r3, [pc, #28]	; (800b9cc <USBH_UserProcess+0x58>)
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	701a      	strb	r2, [r3, #0]
  break;
 800b9b2:	e004      	b.n	800b9be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b9b4:	4b05      	ldr	r3, [pc, #20]	; (800b9cc <USBH_UserProcess+0x58>)
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	701a      	strb	r2, [r3, #0]
  break;
 800b9ba:	e000      	b.n	800b9be <USBH_UserProcess+0x4a>

  default:
  break;
 800b9bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b9be:	bf00      	nop
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20000118 	.word	0x20000118

0800b9d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b08a      	sub	sp, #40	; 0x28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9d8:	f107 0314 	add.w	r3, r7, #20
 800b9dc:	2200      	movs	r2, #0
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	605a      	str	r2, [r3, #4]
 800b9e2:	609a      	str	r2, [r3, #8]
 800b9e4:	60da      	str	r2, [r3, #12]
 800b9e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9f0:	d147      	bne.n	800ba82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	613b      	str	r3, [r7, #16]
 800b9f6:	4b25      	ldr	r3, [pc, #148]	; (800ba8c <HAL_HCD_MspInit+0xbc>)
 800b9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fa:	4a24      	ldr	r2, [pc, #144]	; (800ba8c <HAL_HCD_MspInit+0xbc>)
 800b9fc:	f043 0301 	orr.w	r3, r3, #1
 800ba00:	6313      	str	r3, [r2, #48]	; 0x30
 800ba02:	4b22      	ldr	r3, [pc, #136]	; (800ba8c <HAL_HCD_MspInit+0xbc>)
 800ba04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba06:	f003 0301 	and.w	r3, r3, #1
 800ba0a:	613b      	str	r3, [r7, #16]
 800ba0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ba0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ba14:	2300      	movs	r3, #0
 800ba16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba1c:	f107 0314 	add.w	r3, r7, #20
 800ba20:	4619      	mov	r1, r3
 800ba22:	481b      	ldr	r0, [pc, #108]	; (800ba90 <HAL_HCD_MspInit+0xc0>)
 800ba24:	f7f7 f8c0 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ba2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba2e:	2302      	movs	r3, #2
 800ba30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba36:	2300      	movs	r3, #0
 800ba38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba3a:	230a      	movs	r3, #10
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba3e:	f107 0314 	add.w	r3, r7, #20
 800ba42:	4619      	mov	r1, r3
 800ba44:	4812      	ldr	r0, [pc, #72]	; (800ba90 <HAL_HCD_MspInit+0xc0>)
 800ba46:	f7f7 f8af 	bl	8002ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba4a:	4b10      	ldr	r3, [pc, #64]	; (800ba8c <HAL_HCD_MspInit+0xbc>)
 800ba4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4e:	4a0f      	ldr	r2, [pc, #60]	; (800ba8c <HAL_HCD_MspInit+0xbc>)
 800ba50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba54:	6353      	str	r3, [r2, #52]	; 0x34
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
 800ba5a:	4b0c      	ldr	r3, [pc, #48]	; (800ba8c <HAL_HCD_MspInit+0xbc>)
 800ba5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5e:	4a0b      	ldr	r2, [pc, #44]	; (800ba8c <HAL_HCD_MspInit+0xbc>)
 800ba60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba64:	6453      	str	r3, [r2, #68]	; 0x44
 800ba66:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <HAL_HCD_MspInit+0xbc>)
 800ba68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba72:	2200      	movs	r2, #0
 800ba74:	2100      	movs	r1, #0
 800ba76:	2043      	movs	r0, #67	; 0x43
 800ba78:	f7f6 fc07 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba7c:	2043      	movs	r0, #67	; 0x43
 800ba7e:	f7f6 fc20 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba82:	bf00      	nop
 800ba84:	3728      	adds	r7, #40	; 0x28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	40023800 	.word	0x40023800
 800ba90:	40020000 	.word	0x40020000

0800ba94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff f87f 	bl	800aba6 <USBH_LL_IncTimer>
}
 800baa8:	bf00      	nop
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff f8b7 	bl	800ac32 <USBH_LL_Connect>
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff f8c0 	bl	800ac60 <USBH_LL_Disconnect>
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
 800baf4:	4613      	mov	r3, r2
 800baf6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff f871 	bl	800abfa <USBH_LL_PortEnabled>
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7ff f871 	bl	800ac16 <USBH_LL_PortDisabled>
}
 800bb34:	bf00      	nop
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d12a      	bne.n	800bba4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bb4e:	4a18      	ldr	r2, [pc, #96]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a15      	ldr	r2, [pc, #84]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb5a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb5e:	4b14      	ldr	r3, [pc, #80]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bb66:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb68:	2208      	movs	r2, #8
 800bb6a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bb6c:	4b10      	ldr	r3, [pc, #64]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb6e:	2201      	movs	r2, #1
 800bb70:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb72:	4b0f      	ldr	r3, [pc, #60]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bb78:	4b0d      	ldr	r3, [pc, #52]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb7e:	4b0c      	ldr	r3, [pc, #48]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bb84:	480a      	ldr	r0, [pc, #40]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb86:	f7f7 f9dc 	bl	8002f42 <HAL_HCD_Init>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bb90:	f7f5 f9b8 	bl	8000f04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bb94:	4806      	ldr	r0, [pc, #24]	; (800bbb0 <USBH_LL_Init+0x74>)
 800bb96:	f7f7 fdc0 	bl	800371a <HAL_HCD_GetCurrentFrame>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7fe fff2 	bl	800ab88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20003700 	.word	0x20003700

0800bbb4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f7 fd2f 	bl	800362e <HAL_HCD_Start>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bbd4:	7bfb      	ldrb	r3, [r7, #15]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f000 f98c 	bl	800bef4 <USBH_Get_USB_Status>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7f7 fd37 	bl	8003674 <HAL_HCD_Stop>
 800bc06:	4603      	mov	r3, r0
 800bc08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc0a:	7bfb      	ldrb	r3, [r7, #15]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 f971 	bl	800bef4 <USBH_Get_USB_Status>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f7 fd7f 	bl	8003736 <HAL_HCD_GetCurrentSpeed>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d00c      	beq.n	800bc58 <USBH_LL_GetSpeed+0x38>
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d80d      	bhi.n	800bc5e <USBH_LL_GetSpeed+0x3e>
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <USBH_LL_GetSpeed+0x2c>
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d003      	beq.n	800bc52 <USBH_LL_GetSpeed+0x32>
 800bc4a:	e008      	b.n	800bc5e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc50:	e008      	b.n	800bc64 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bc52:	2301      	movs	r3, #1
 800bc54:	73fb      	strb	r3, [r7, #15]
    break;
 800bc56:	e005      	b.n	800bc64 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5c:	e002      	b.n	800bc64 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	73fb      	strb	r3, [r7, #15]
    break;
 800bc62:	bf00      	nop
  }
  return  speed;
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b084      	sub	sp, #16
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7f7 fd12 	bl	80036ae <HAL_HCD_ResetPort>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	4618      	mov	r0, r3
 800bc92:	f000 f92f 	bl	800bef4 <USBH_Get_USB_Status>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bcb6:	78fa      	ldrb	r2, [r7, #3]
 800bcb8:	4611      	mov	r1, r2
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7f7 fd19 	bl	80036f2 <HAL_HCD_HC_GetXferCount>
 800bcc0:	4603      	mov	r3, r0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bcca:	b590      	push	{r4, r7, lr}
 800bccc:	b089      	sub	sp, #36	; 0x24
 800bcce:	af04      	add	r7, sp, #16
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	4603      	mov	r3, r0
 800bcda:	70fb      	strb	r3, [r7, #3]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70bb      	strb	r3, [r7, #2]
 800bce0:	4613      	mov	r3, r2
 800bce2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bcf2:	787c      	ldrb	r4, [r7, #1]
 800bcf4:	78ba      	ldrb	r2, [r7, #2]
 800bcf6:	78f9      	ldrb	r1, [r7, #3]
 800bcf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bcfa:	9302      	str	r3, [sp, #8]
 800bcfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	4623      	mov	r3, r4
 800bd0a:	f7f7 f97c 	bl	8003006 <HAL_HCD_HC_Init>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 f8ed 	bl	800bef4 <USBH_Get_USB_Status>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd90      	pop	{r4, r7, pc}

0800bd28 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd42:	78fa      	ldrb	r2, [r7, #3]
 800bd44:	4611      	mov	r1, r2
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7f7 f9ec 	bl	8003124 <HAL_HCD_HC_Halt>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 f8ce 	bl	800bef4 <USBH_Get_USB_Status>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bd66:	b590      	push	{r4, r7, lr}
 800bd68:	b089      	sub	sp, #36	; 0x24
 800bd6a:	af04      	add	r7, sp, #16
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	4608      	mov	r0, r1
 800bd70:	4611      	mov	r1, r2
 800bd72:	461a      	mov	r2, r3
 800bd74:	4603      	mov	r3, r0
 800bd76:	70fb      	strb	r3, [r7, #3]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70bb      	strb	r3, [r7, #2]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bd8e:	787c      	ldrb	r4, [r7, #1]
 800bd90:	78ba      	ldrb	r2, [r7, #2]
 800bd92:	78f9      	ldrb	r1, [r7, #3]
 800bd94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bd98:	9303      	str	r3, [sp, #12]
 800bd9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd9c:	9302      	str	r3, [sp, #8]
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	4623      	mov	r3, r4
 800bdaa:	f7f7 f9df 	bl	800316c <HAL_HCD_HC_SubmitRequest>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bdb2:	7bfb      	ldrb	r3, [r7, #15]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 f89d 	bl	800bef4 <USBH_Get_USB_Status>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd90      	pop	{r4, r7, pc}

0800bdc8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bdda:	78fa      	ldrb	r2, [r7, #3]
 800bddc:	4611      	mov	r1, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7f7 fc73 	bl	80036ca <HAL_HCD_HC_GetURBState>
 800bde4:	4603      	mov	r3, r0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800be00:	2b01      	cmp	r3, #1
 800be02:	d103      	bne.n	800be0c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800be04:	78fb      	ldrb	r3, [r7, #3]
 800be06:	4618      	mov	r0, r3
 800be08:	f000 f8a0 	bl	800bf4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800be0c:	20c8      	movs	r0, #200	; 0xc8
 800be0e:	f7f6 f93d 	bl	800208c <HAL_Delay>
  return USBH_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
 800be28:	4613      	mov	r3, r2
 800be2a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be32:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800be34:	78fb      	ldrb	r3, [r7, #3]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	212c      	movs	r1, #44	; 0x2c
 800be3a:	fb01 f303 	mul.w	r3, r1, r3
 800be3e:	4413      	add	r3, r2
 800be40:	333b      	adds	r3, #59	; 0x3b
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d009      	beq.n	800be5c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800be48:	78fb      	ldrb	r3, [r7, #3]
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	212c      	movs	r1, #44	; 0x2c
 800be4e:	fb01 f303 	mul.w	r3, r1, r3
 800be52:	4413      	add	r3, r2
 800be54:	3354      	adds	r3, #84	; 0x54
 800be56:	78ba      	ldrb	r2, [r7, #2]
 800be58:	701a      	strb	r2, [r3, #0]
 800be5a:	e008      	b.n	800be6e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	212c      	movs	r1, #44	; 0x2c
 800be62:	fb01 f303 	mul.w	r3, r1, r3
 800be66:	4413      	add	r3, r2
 800be68:	3355      	adds	r3, #85	; 0x55
 800be6a:	78ba      	ldrb	r2, [r7, #2]
 800be6c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be92:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800be94:	78fb      	ldrb	r3, [r7, #3]
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	212c      	movs	r1, #44	; 0x2c
 800be9a:	fb01 f303 	mul.w	r3, r1, r3
 800be9e:	4413      	add	r3, r2
 800bea0:	333b      	adds	r3, #59	; 0x3b
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d009      	beq.n	800bebc <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800bea8:	78fb      	ldrb	r3, [r7, #3]
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	212c      	movs	r1, #44	; 0x2c
 800beae:	fb01 f303 	mul.w	r3, r1, r3
 800beb2:	4413      	add	r3, r2
 800beb4:	3354      	adds	r3, #84	; 0x54
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	73fb      	strb	r3, [r7, #15]
 800beba:	e008      	b.n	800bece <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	212c      	movs	r1, #44	; 0x2c
 800bec2:	fb01 f303 	mul.w	r3, r1, r3
 800bec6:	4413      	add	r3, r2
 800bec8:	3355      	adds	r3, #85	; 0x55
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800bece:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7f6 f8d1 	bl	800208c <HAL_Delay>
}
 800beea:	bf00      	nop
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
	...

0800bef4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	4603      	mov	r3, r0
 800befc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	d817      	bhi.n	800bf38 <USBH_Get_USB_Status+0x44>
 800bf08:	a201      	add	r2, pc, #4	; (adr r2, 800bf10 <USBH_Get_USB_Status+0x1c>)
 800bf0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf0e:	bf00      	nop
 800bf10:	0800bf21 	.word	0x0800bf21
 800bf14:	0800bf27 	.word	0x0800bf27
 800bf18:	0800bf2d 	.word	0x0800bf2d
 800bf1c:	0800bf33 	.word	0x0800bf33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
    break;
 800bf24:	e00b      	b.n	800bf3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bf26:	2302      	movs	r3, #2
 800bf28:	73fb      	strb	r3, [r7, #15]
    break;
 800bf2a:	e008      	b.n	800bf3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf30:	e005      	b.n	800bf3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bf32:	2302      	movs	r3, #2
 800bf34:	73fb      	strb	r3, [r7, #15]
    break;
 800bf36:	e002      	b.n	800bf3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bf38:	2302      	movs	r3, #2
 800bf3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf3c:	bf00      	nop
  }
  return usb_status;
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	4603      	mov	r3, r0
 800bf54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bf5a:	79fb      	ldrb	r3, [r7, #7]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d102      	bne.n	800bf66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bf60:	2300      	movs	r3, #0
 800bf62:	73fb      	strb	r3, [r7, #15]
 800bf64:	e001      	b.n	800bf6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bf66:	2301      	movs	r3, #1
 800bf68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	2101      	movs	r1, #1
 800bf70:	4803      	ldr	r0, [pc, #12]	; (800bf80 <MX_DriverVbusFS+0x34>)
 800bf72:	f7f6 ffcd 	bl	8002f10 <HAL_GPIO_WritePin>
}
 800bf76:	bf00      	nop
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	40020800 	.word	0x40020800

0800bf84 <__errno>:
 800bf84:	4b01      	ldr	r3, [pc, #4]	; (800bf8c <__errno+0x8>)
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	2000002c 	.word	0x2000002c

0800bf90 <__libc_init_array>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	4d0d      	ldr	r5, [pc, #52]	; (800bfc8 <__libc_init_array+0x38>)
 800bf94:	4c0d      	ldr	r4, [pc, #52]	; (800bfcc <__libc_init_array+0x3c>)
 800bf96:	1b64      	subs	r4, r4, r5
 800bf98:	10a4      	asrs	r4, r4, #2
 800bf9a:	2600      	movs	r6, #0
 800bf9c:	42a6      	cmp	r6, r4
 800bf9e:	d109      	bne.n	800bfb4 <__libc_init_array+0x24>
 800bfa0:	4d0b      	ldr	r5, [pc, #44]	; (800bfd0 <__libc_init_array+0x40>)
 800bfa2:	4c0c      	ldr	r4, [pc, #48]	; (800bfd4 <__libc_init_array+0x44>)
 800bfa4:	f000 f906 	bl	800c1b4 <_init>
 800bfa8:	1b64      	subs	r4, r4, r5
 800bfaa:	10a4      	asrs	r4, r4, #2
 800bfac:	2600      	movs	r6, #0
 800bfae:	42a6      	cmp	r6, r4
 800bfb0:	d105      	bne.n	800bfbe <__libc_init_array+0x2e>
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfb8:	4798      	blx	r3
 800bfba:	3601      	adds	r6, #1
 800bfbc:	e7ee      	b.n	800bf9c <__libc_init_array+0xc>
 800bfbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfc2:	4798      	blx	r3
 800bfc4:	3601      	adds	r6, #1
 800bfc6:	e7f2      	b.n	800bfae <__libc_init_array+0x1e>
 800bfc8:	0800c51c 	.word	0x0800c51c
 800bfcc:	0800c51c 	.word	0x0800c51c
 800bfd0:	0800c51c 	.word	0x0800c51c
 800bfd4:	0800c520 	.word	0x0800c520

0800bfd8 <malloc>:
 800bfd8:	4b02      	ldr	r3, [pc, #8]	; (800bfe4 <malloc+0xc>)
 800bfda:	4601      	mov	r1, r0
 800bfdc:	6818      	ldr	r0, [r3, #0]
 800bfde:	f000 b871 	b.w	800c0c4 <_malloc_r>
 800bfe2:	bf00      	nop
 800bfe4:	2000002c 	.word	0x2000002c

0800bfe8 <free>:
 800bfe8:	4b02      	ldr	r3, [pc, #8]	; (800bff4 <free+0xc>)
 800bfea:	4601      	mov	r1, r0
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	f000 b819 	b.w	800c024 <_free_r>
 800bff2:	bf00      	nop
 800bff4:	2000002c 	.word	0x2000002c

0800bff8 <memcpy>:
 800bff8:	440a      	add	r2, r1
 800bffa:	4291      	cmp	r1, r2
 800bffc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c000:	d100      	bne.n	800c004 <memcpy+0xc>
 800c002:	4770      	bx	lr
 800c004:	b510      	push	{r4, lr}
 800c006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c00a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c00e:	4291      	cmp	r1, r2
 800c010:	d1f9      	bne.n	800c006 <memcpy+0xe>
 800c012:	bd10      	pop	{r4, pc}

0800c014 <memset>:
 800c014:	4402      	add	r2, r0
 800c016:	4603      	mov	r3, r0
 800c018:	4293      	cmp	r3, r2
 800c01a:	d100      	bne.n	800c01e <memset+0xa>
 800c01c:	4770      	bx	lr
 800c01e:	f803 1b01 	strb.w	r1, [r3], #1
 800c022:	e7f9      	b.n	800c018 <memset+0x4>

0800c024 <_free_r>:
 800c024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c026:	2900      	cmp	r1, #0
 800c028:	d048      	beq.n	800c0bc <_free_r+0x98>
 800c02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c02e:	9001      	str	r0, [sp, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	f1a1 0404 	sub.w	r4, r1, #4
 800c036:	bfb8      	it	lt
 800c038:	18e4      	addlt	r4, r4, r3
 800c03a:	f000 f8ad 	bl	800c198 <__malloc_lock>
 800c03e:	4a20      	ldr	r2, [pc, #128]	; (800c0c0 <_free_r+0x9c>)
 800c040:	9801      	ldr	r0, [sp, #4]
 800c042:	6813      	ldr	r3, [r2, #0]
 800c044:	4615      	mov	r5, r2
 800c046:	b933      	cbnz	r3, 800c056 <_free_r+0x32>
 800c048:	6063      	str	r3, [r4, #4]
 800c04a:	6014      	str	r4, [r2, #0]
 800c04c:	b003      	add	sp, #12
 800c04e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c052:	f000 b8a7 	b.w	800c1a4 <__malloc_unlock>
 800c056:	42a3      	cmp	r3, r4
 800c058:	d90b      	bls.n	800c072 <_free_r+0x4e>
 800c05a:	6821      	ldr	r1, [r4, #0]
 800c05c:	1862      	adds	r2, r4, r1
 800c05e:	4293      	cmp	r3, r2
 800c060:	bf04      	itt	eq
 800c062:	681a      	ldreq	r2, [r3, #0]
 800c064:	685b      	ldreq	r3, [r3, #4]
 800c066:	6063      	str	r3, [r4, #4]
 800c068:	bf04      	itt	eq
 800c06a:	1852      	addeq	r2, r2, r1
 800c06c:	6022      	streq	r2, [r4, #0]
 800c06e:	602c      	str	r4, [r5, #0]
 800c070:	e7ec      	b.n	800c04c <_free_r+0x28>
 800c072:	461a      	mov	r2, r3
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	b10b      	cbz	r3, 800c07c <_free_r+0x58>
 800c078:	42a3      	cmp	r3, r4
 800c07a:	d9fa      	bls.n	800c072 <_free_r+0x4e>
 800c07c:	6811      	ldr	r1, [r2, #0]
 800c07e:	1855      	adds	r5, r2, r1
 800c080:	42a5      	cmp	r5, r4
 800c082:	d10b      	bne.n	800c09c <_free_r+0x78>
 800c084:	6824      	ldr	r4, [r4, #0]
 800c086:	4421      	add	r1, r4
 800c088:	1854      	adds	r4, r2, r1
 800c08a:	42a3      	cmp	r3, r4
 800c08c:	6011      	str	r1, [r2, #0]
 800c08e:	d1dd      	bne.n	800c04c <_free_r+0x28>
 800c090:	681c      	ldr	r4, [r3, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	6053      	str	r3, [r2, #4]
 800c096:	4421      	add	r1, r4
 800c098:	6011      	str	r1, [r2, #0]
 800c09a:	e7d7      	b.n	800c04c <_free_r+0x28>
 800c09c:	d902      	bls.n	800c0a4 <_free_r+0x80>
 800c09e:	230c      	movs	r3, #12
 800c0a0:	6003      	str	r3, [r0, #0]
 800c0a2:	e7d3      	b.n	800c04c <_free_r+0x28>
 800c0a4:	6825      	ldr	r5, [r4, #0]
 800c0a6:	1961      	adds	r1, r4, r5
 800c0a8:	428b      	cmp	r3, r1
 800c0aa:	bf04      	itt	eq
 800c0ac:	6819      	ldreq	r1, [r3, #0]
 800c0ae:	685b      	ldreq	r3, [r3, #4]
 800c0b0:	6063      	str	r3, [r4, #4]
 800c0b2:	bf04      	itt	eq
 800c0b4:	1949      	addeq	r1, r1, r5
 800c0b6:	6021      	streq	r1, [r4, #0]
 800c0b8:	6054      	str	r4, [r2, #4]
 800c0ba:	e7c7      	b.n	800c04c <_free_r+0x28>
 800c0bc:	b003      	add	sp, #12
 800c0be:	bd30      	pop	{r4, r5, pc}
 800c0c0:	2000011c 	.word	0x2000011c

0800c0c4 <_malloc_r>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	1ccd      	adds	r5, r1, #3
 800c0c8:	f025 0503 	bic.w	r5, r5, #3
 800c0cc:	3508      	adds	r5, #8
 800c0ce:	2d0c      	cmp	r5, #12
 800c0d0:	bf38      	it	cc
 800c0d2:	250c      	movcc	r5, #12
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	db01      	blt.n	800c0de <_malloc_r+0x1a>
 800c0da:	42a9      	cmp	r1, r5
 800c0dc:	d903      	bls.n	800c0e6 <_malloc_r+0x22>
 800c0de:	230c      	movs	r3, #12
 800c0e0:	6033      	str	r3, [r6, #0]
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e6:	f000 f857 	bl	800c198 <__malloc_lock>
 800c0ea:	4921      	ldr	r1, [pc, #132]	; (800c170 <_malloc_r+0xac>)
 800c0ec:	680a      	ldr	r2, [r1, #0]
 800c0ee:	4614      	mov	r4, r2
 800c0f0:	b99c      	cbnz	r4, 800c11a <_malloc_r+0x56>
 800c0f2:	4f20      	ldr	r7, [pc, #128]	; (800c174 <_malloc_r+0xb0>)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	b923      	cbnz	r3, 800c102 <_malloc_r+0x3e>
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f000 f83c 	bl	800c178 <_sbrk_r>
 800c100:	6038      	str	r0, [r7, #0]
 800c102:	4629      	mov	r1, r5
 800c104:	4630      	mov	r0, r6
 800c106:	f000 f837 	bl	800c178 <_sbrk_r>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d123      	bne.n	800c156 <_malloc_r+0x92>
 800c10e:	230c      	movs	r3, #12
 800c110:	6033      	str	r3, [r6, #0]
 800c112:	4630      	mov	r0, r6
 800c114:	f000 f846 	bl	800c1a4 <__malloc_unlock>
 800c118:	e7e3      	b.n	800c0e2 <_malloc_r+0x1e>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	1b5b      	subs	r3, r3, r5
 800c11e:	d417      	bmi.n	800c150 <_malloc_r+0x8c>
 800c120:	2b0b      	cmp	r3, #11
 800c122:	d903      	bls.n	800c12c <_malloc_r+0x68>
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	441c      	add	r4, r3
 800c128:	6025      	str	r5, [r4, #0]
 800c12a:	e004      	b.n	800c136 <_malloc_r+0x72>
 800c12c:	6863      	ldr	r3, [r4, #4]
 800c12e:	42a2      	cmp	r2, r4
 800c130:	bf0c      	ite	eq
 800c132:	600b      	streq	r3, [r1, #0]
 800c134:	6053      	strne	r3, [r2, #4]
 800c136:	4630      	mov	r0, r6
 800c138:	f000 f834 	bl	800c1a4 <__malloc_unlock>
 800c13c:	f104 000b 	add.w	r0, r4, #11
 800c140:	1d23      	adds	r3, r4, #4
 800c142:	f020 0007 	bic.w	r0, r0, #7
 800c146:	1ac2      	subs	r2, r0, r3
 800c148:	d0cc      	beq.n	800c0e4 <_malloc_r+0x20>
 800c14a:	1a1b      	subs	r3, r3, r0
 800c14c:	50a3      	str	r3, [r4, r2]
 800c14e:	e7c9      	b.n	800c0e4 <_malloc_r+0x20>
 800c150:	4622      	mov	r2, r4
 800c152:	6864      	ldr	r4, [r4, #4]
 800c154:	e7cc      	b.n	800c0f0 <_malloc_r+0x2c>
 800c156:	1cc4      	adds	r4, r0, #3
 800c158:	f024 0403 	bic.w	r4, r4, #3
 800c15c:	42a0      	cmp	r0, r4
 800c15e:	d0e3      	beq.n	800c128 <_malloc_r+0x64>
 800c160:	1a21      	subs	r1, r4, r0
 800c162:	4630      	mov	r0, r6
 800c164:	f000 f808 	bl	800c178 <_sbrk_r>
 800c168:	3001      	adds	r0, #1
 800c16a:	d1dd      	bne.n	800c128 <_malloc_r+0x64>
 800c16c:	e7cf      	b.n	800c10e <_malloc_r+0x4a>
 800c16e:	bf00      	nop
 800c170:	2000011c 	.word	0x2000011c
 800c174:	20000120 	.word	0x20000120

0800c178 <_sbrk_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4d06      	ldr	r5, [pc, #24]	; (800c194 <_sbrk_r+0x1c>)
 800c17c:	2300      	movs	r3, #0
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	602b      	str	r3, [r5, #0]
 800c184:	f7f5 fe9e 	bl	8001ec4 <_sbrk>
 800c188:	1c43      	adds	r3, r0, #1
 800c18a:	d102      	bne.n	800c192 <_sbrk_r+0x1a>
 800c18c:	682b      	ldr	r3, [r5, #0]
 800c18e:	b103      	cbz	r3, 800c192 <_sbrk_r+0x1a>
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	bd38      	pop	{r3, r4, r5, pc}
 800c194:	20003a04 	.word	0x20003a04

0800c198 <__malloc_lock>:
 800c198:	4801      	ldr	r0, [pc, #4]	; (800c1a0 <__malloc_lock+0x8>)
 800c19a:	f000 b809 	b.w	800c1b0 <__retarget_lock_acquire_recursive>
 800c19e:	bf00      	nop
 800c1a0:	20003a0c 	.word	0x20003a0c

0800c1a4 <__malloc_unlock>:
 800c1a4:	4801      	ldr	r0, [pc, #4]	; (800c1ac <__malloc_unlock+0x8>)
 800c1a6:	f000 b804 	b.w	800c1b2 <__retarget_lock_release_recursive>
 800c1aa:	bf00      	nop
 800c1ac:	20003a0c 	.word	0x20003a0c

0800c1b0 <__retarget_lock_acquire_recursive>:
 800c1b0:	4770      	bx	lr

0800c1b2 <__retarget_lock_release_recursive>:
 800c1b2:	4770      	bx	lr

0800c1b4 <_init>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	bf00      	nop
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr

0800c1c0 <_fini>:
 800c1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c2:	bf00      	nop
 800c1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c6:	bc08      	pop	{r3}
 800c1c8:	469e      	mov	lr, r3
 800c1ca:	4770      	bx	lr
