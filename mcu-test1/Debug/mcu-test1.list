
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c48c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800c614  0800c614  0001c614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c0  0800c9c0  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c0  0800c9c0  0001c9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9c8  0800c9c8  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c8  0800c9c8  0001c9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9cc  0800c9cc  0001c9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800c9d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020334  2**0
                  CONTENTS
 10 .bss          00004ce0  20000334  20000334  00020334  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005014  20005014  00020334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002768a  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000555c  00000000  00000000  000479ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0004cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001310  00000000  00000000  0004e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cd4  00000000  00000000  0004f770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e562  00000000  00000000  00076444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd34f  00000000  00000000  000949a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00161cf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000576c  00000000  00000000  00161d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000334 	.word	0x20000334
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c5fc 	.word	0x0800c5fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000338 	.word	0x20000338
 80001c4:	0800c5fc 	.word	0x0800c5fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <write_register+0x34>)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <write_register+0x34>)
 80004d8:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <write_register+0x34>)
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <write_register+0x38>)
 80004e6:	f004 ffeb 	bl	80054c0 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000350 	.word	0x20000350
 80004f8:	20000354 	.word	0x20000354

080004fc <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <read_register+0x3c>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <read_register+0x3c>)
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <read_register+0x40>)
 800051a:	f004 ffd1 	bl	80054c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2301      	movs	r3, #1
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <read_register+0x40>)
 800052a:	f005 f8c7 	bl	80056bc <HAL_I2C_Master_Receive>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000350 	.word	0x20000350
 800053c:	20000354 	.word	0x20000354

08000540 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000540:	b084      	sub	sp, #16
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
 8000546:	f107 0c08 	add.w	ip, r7, #8
 800054a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054e:	4b81      	ldr	r3, [pc, #516]	; (8000754 <CS43_Init+0x214>)
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <CS43_Init+0x214>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b7d      	ldr	r3, [pc, #500]	; (8000754 <CS43_Init+0x214>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000564:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	487b      	ldr	r0, [pc, #492]	; (8000758 <CS43_Init+0x218>)
 800056c:	f003 f8da 	bl	8003724 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000570:	4b7a      	ldr	r3, [pc, #488]	; (800075c <CS43_Init+0x21c>)
 8000572:	4618      	mov	r0, r3
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2254      	movs	r2, #84	; 0x54
 800057a:	4619      	mov	r1, r3
 800057c:	f00b ff60 	bl	800c440 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000580:	4b77      	ldr	r3, [pc, #476]	; (8000760 <CS43_Init+0x220>)
 8000582:	2201      	movs	r2, #1
 8000584:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000586:	4976      	ldr	r1, [pc, #472]	; (8000760 <CS43_Init+0x220>)
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff99 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800058e:	4b74      	ldr	r3, [pc, #464]	; (8000760 <CS43_Init+0x220>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000594:	4b72      	ldr	r3, [pc, #456]	; (8000760 <CS43_Init+0x220>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <CS43_Init+0x220>)
 80005a0:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <CS43_Init+0x220>)
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <CS43_Init+0x220>)
 80005ae:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b0:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <CS43_Init+0x220>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	f043 0303 	orr.w	r3, r3, #3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <CS43_Init+0x220>)
 80005bc:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	4969      	ldr	r1, [pc, #420]	; (8000764 <CS43_Init+0x224>)
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff ff7d 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <CS43_Init+0x220>)
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005cc:	4965      	ldr	r1, [pc, #404]	; (8000764 <CS43_Init+0x224>)
 80005ce:	2005      	movs	r0, #5
 80005d0:	f7ff ff76 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005d4:	4962      	ldr	r1, [pc, #392]	; (8000760 <CS43_Init+0x220>)
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff ff90 	bl	80004fc <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <CS43_Init+0x220>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <CS43_Init+0x220>)
 80005e8:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <CS43_Init+0x220>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <CS43_Init+0x220>)
 80005f6:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <CS43_Init+0x220>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b57      	ldr	r3, [pc, #348]	; (8000760 <CS43_Init+0x220>)
 8000604:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <CS43_Init+0x220>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	f023 0310 	bic.w	r3, r3, #16
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b53      	ldr	r3, [pc, #332]	; (8000760 <CS43_Init+0x220>)
 8000612:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <CS43_Init+0x220>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	f023 0304 	bic.w	r3, r3, #4
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <CS43_Init+0x220>)
 8000620:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <CS43_Init+0x220>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <CS43_Init+0x220>)
 800062e:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000630:	4b4b      	ldr	r3, [pc, #300]	; (8000760 <CS43_Init+0x220>)
 8000632:	785b      	ldrb	r3, [r3, #1]
 8000634:	f043 0303 	orr.w	r3, r3, #3
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <CS43_Init+0x220>)
 800063c:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800063e:	4949      	ldr	r1, [pc, #292]	; (8000764 <CS43_Init+0x224>)
 8000640:	2006      	movs	r0, #6
 8000642:	f7ff ff3d 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000646:	4947      	ldr	r1, [pc, #284]	; (8000764 <CS43_Init+0x224>)
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff57 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <CS43_Init+0x220>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b41      	ldr	r3, [pc, #260]	; (8000760 <CS43_Init+0x220>)
 800065a:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <CS43_Init+0x220>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <CS43_Init+0x220>)
 8000668:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 800066a:	493e      	ldr	r1, [pc, #248]	; (8000764 <CS43_Init+0x224>)
 800066c:	2008      	movs	r0, #8
 800066e:	f7ff ff27 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000672:	493c      	ldr	r1, [pc, #240]	; (8000764 <CS43_Init+0x224>)
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff41 	bl	80004fc <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <CS43_Init+0x220>)
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <CS43_Init+0x220>)
 8000686:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000688:	4b35      	ldr	r3, [pc, #212]	; (8000760 <CS43_Init+0x220>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <CS43_Init+0x220>)
 8000694:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000696:	4933      	ldr	r1, [pc, #204]	; (8000764 <CS43_Init+0x224>)
 8000698:	2009      	movs	r0, #9
 800069a:	f7ff ff11 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800069e:	4931      	ldr	r1, [pc, #196]	; (8000764 <CS43_Init+0x224>)
 80006a0:	200e      	movs	r0, #14
 80006a2:	f7ff ff2b 	bl	80004fc <read_register>
	if(outputMode == MODE_ANAL)
 80006a6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d123      	bne.n	80006f6 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <CS43_Init+0x220>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <CS43_Init+0x220>)
 80006ba:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <CS43_Init+0x220>)
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <CS43_Init+0x220>)
 80006c8:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <CS43_Init+0x220>)
 80006cc:	785b      	ldrb	r3, [r3, #1]
 80006ce:	f023 0320 	bic.w	r3, r3, #32
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <CS43_Init+0x220>)
 80006d6:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <CS43_Init+0x220>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	f023 0310 	bic.w	r3, r3, #16
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <CS43_Init+0x220>)
 80006e4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <CS43_Init+0x220>)
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <CS43_Init+0x220>)
 80006f2:	705a      	strb	r2, [r3, #1]
 80006f4:	e006      	b.n	8000704 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006f6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <CS43_Init+0x220>)
 8000700:	2202      	movs	r2, #2
 8000702:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000704:	4917      	ldr	r1, [pc, #92]	; (8000764 <CS43_Init+0x224>)
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff feda 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <CS43_Init+0x224>)
 800070e:	200f      	movs	r0, #15
 8000710:	f7ff fef4 	bl	80004fc <read_register>
	iData[1] = 0x00;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <CS43_Init+0x220>)
 8000716:	2200      	movs	r2, #0
 8000718:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 800071a:	4912      	ldr	r1, [pc, #72]	; (8000764 <CS43_Init+0x224>)
 800071c:	200f      	movs	r0, #15
 800071e:	f7ff fecf 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <CS43_Init+0x220>)
 8000724:	2200      	movs	r2, #0
 8000726:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000728:	490e      	ldr	r1, [pc, #56]	; (8000764 <CS43_Init+0x224>)
 800072a:	2014      	movs	r0, #20
 800072c:	f7ff fec8 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <CS43_Init+0x224>)
 8000732:	2015      	movs	r0, #21
 8000734:	f7ff fec4 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000738:	490a      	ldr	r1, [pc, #40]	; (8000764 <CS43_Init+0x224>)
 800073a:	201a      	movs	r0, #26
 800073c:	f7ff fec0 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000740:	4908      	ldr	r1, [pc, #32]	; (8000764 <CS43_Init+0x224>)
 8000742:	201b      	movs	r0, #27
 8000744:	f7ff febc 	bl	80004c0 <write_register>
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	20002870 	.word	0x20002870
 8000758:	40020c00 	.word	0x40020c00
 800075c:	20000354 	.word	0x20000354
 8000760:	20000350 	.word	0x20000350
 8000764:	20000351 	.word	0x20000351

08000768 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d837      	bhi.n	80007e8 <CS43_Enable_RightLeft+0x80>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <CS43_Enable_RightLeft+0x18>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	080007a7 	.word	0x080007a7
 8000788:	080007bd 	.word	0x080007bd
 800078c:	080007d3 	.word	0x080007d3
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000798:	785b      	ldrb	r3, [r3, #1]
 800079a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a2:	705a      	strb	r2, [r3, #1]
			break;
 80007a4:	e021      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007b8:	705a      	strb	r2, [r3, #1]
			break;
 80007ba:	e016      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ce:	705a      	strb	r2, [r3, #1]
			break;
 80007d0:	e00b      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007da:	785b      	ldrb	r3, [r3, #1]
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007e4:	705a      	strb	r2, [r3, #1]
			break;
 80007e6:	e000      	b.n	80007ea <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007e8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	785b      	ldrb	r3, [r3, #1]
 80007ee:	f043 030c 	orr.w	r3, r3, #12
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007f6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 80007fa:	785b      	ldrb	r3, [r3, #1]
 80007fc:	f043 0303 	orr.w	r3, r3, #3
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <CS43_Enable_RightLeft+0xb0>)
 8000804:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000806:	4905      	ldr	r1, [pc, #20]	; (800081c <CS43_Enable_RightLeft+0xb4>)
 8000808:	2004      	movs	r0, #4
 800080a:	f7ff fe59 	bl	80004c0 <write_register>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000350 	.word	0x20000350
 800081c:	20000351 	.word	0x20000351

08000820 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	3b32      	subs	r3, #50	; 0x32
 800082e:	b2db      	uxtb	r3, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <CS43_SetVolume+0x78>)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000844:	4915      	ldr	r1, [pc, #84]	; (800089c <CS43_SetVolume+0x7c>)
 8000846:	2014      	movs	r0, #20
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800084c:	4913      	ldr	r1, [pc, #76]	; (800089c <CS43_SetVolume+0x7c>)
 800084e:	2015      	movs	r0, #21
 8000850:	f7ff fe36 	bl	80004c0 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d80e      	bhi.n	8000878 <CS43_SetVolume+0x58>
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <CS43_SetVolume+0x80>)
 8000866:	fb82 1203 	smull	r1, r2, r2, r3
 800086a:	1152      	asrs	r2, r2, #5
 800086c:	17db      	asrs	r3, r3, #31
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3b18      	subs	r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	e000      	b.n	800087a <CS43_SetVolume+0x5a>
 8000878:	2318      	movs	r3, #24
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <CS43_SetVolume+0x78>)
 800087c:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <CS43_SetVolume+0x7c>)
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff fe1d 	bl	80004c0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000886:	4905      	ldr	r1, [pc, #20]	; (800089c <CS43_SetVolume+0x7c>)
 8000888:	2021      	movs	r0, #33	; 0x21
 800088a:	f7ff fe19 	bl	80004c0 <write_register>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000350 	.word	0x20000350
 800089c:	20000351 	.word	0x20000351
 80008a0:	51eb851f 	.word	0x51eb851f

080008a4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <CS43_Start+0x7c>)
 80008aa:	2299      	movs	r2, #153	; 0x99
 80008ac:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008ae:	491d      	ldr	r1, [pc, #116]	; (8000924 <CS43_Start+0x80>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fe05 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <CS43_Start+0x7c>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008bc:	4919      	ldr	r1, [pc, #100]	; (8000924 <CS43_Start+0x80>)
 80008be:	2047      	movs	r0, #71	; 0x47
 80008c0:	f7ff fdfe 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008c4:	4917      	ldr	r1, [pc, #92]	; (8000924 <CS43_Start+0x80>)
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	f7ff fe18 	bl	80004fc <read_register>
	iData[1] |= 0x80;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <CS43_Start+0x7c>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <CS43_Start+0x7c>)
 80008d8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <CS43_Start+0x80>)
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fdef 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008e2:	4910      	ldr	r1, [pc, #64]	; (8000924 <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fe09 	bl	80004fc <read_register>
	iData[1] &= ~(0x80);
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <CS43_Start+0x7c>)
 80008ec:	785b      	ldrb	r3, [r3, #1]
 80008ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <CS43_Start+0x7c>)
 80008f6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008f8:	490a      	ldr	r1, [pc, #40]	; (8000924 <CS43_Start+0x80>)
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f7ff fde0 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <CS43_Start+0x7c>)
 8000902:	2200      	movs	r2, #0
 8000904:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000906:	4907      	ldr	r1, [pc, #28]	; (8000924 <CS43_Start+0x80>)
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fdd9 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <CS43_Start+0x7c>)
 8000910:	229e      	movs	r2, #158	; 0x9e
 8000912:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000914:	4903      	ldr	r1, [pc, #12]	; (8000924 <CS43_Start+0x80>)
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd2 	bl	80004c0 <write_register>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000350 	.word	0x20000350
 8000924:	20000351 	.word	0x20000351

08000928 <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2102      	movs	r1, #2
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <_EPD_Reset+0x38>)
 8000932:	f002 fef7 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000936:	2064      	movs	r0, #100	; 0x64
 8000938:	f002 f89a 	bl	8002a70 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2102      	movs	r1, #2
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <_EPD_Reset+0x38>)
 8000942:	f002 feef 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000946:	2002      	movs	r0, #2
 8000948:	f002 f892 	bl	8002a70 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2102      	movs	r1, #2
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <_EPD_Reset+0x38>)
 8000952:	f002 fee7 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000956:	2064      	movs	r0, #100	; 0x64
 8000958:	f002 f88a 	bl	8002a70 <HAL_Delay>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020000 	.word	0x40020000

08000964 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2104      	movs	r1, #4
 8000972:	480c      	ldr	r0, [pc, #48]	; (80009a4 <_EPD_SendCommand+0x40>)
 8000974:	f002 fed6 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <_EPD_SendCommand+0x40>)
 800097e:	f002 fed1 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000982:	1df9      	adds	r1, r7, #7
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	2201      	movs	r2, #1
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <_EPD_SendCommand+0x44>)
 800098c:	f006 ffc5 	bl	800791a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2140      	movs	r1, #64	; 0x40
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <_EPD_SendCommand+0x40>)
 8000996:	f002 fec5 	bl	8003724 <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020000 	.word	0x40020000
 80009a8:	200027b0 	.word	0x200027b0

080009ac <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2104      	movs	r1, #4
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <_EPD_SendData+0x40>)
 80009bc:	f002 feb2 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <_EPD_SendData+0x40>)
 80009c6:	f002 fead 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80009ca:	1df9      	adds	r1, r7, #7
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	2201      	movs	r2, #1
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <_EPD_SendData+0x44>)
 80009d4:	f006 ffa1 	bl	800791a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <_EPD_SendData+0x40>)
 80009de:	f002 fea1 	bl	8003724 <HAL_GPIO_WritePin>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40020000 	.word	0x40020000
 80009f0:	200027b0 	.word	0x200027b0

080009f4 <_EPD_ReadBusy>:

void _EPD_ReadBusy(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 80009f8:	2108      	movs	r1, #8
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <_EPD_ReadBusy+0x20>)
 80009fc:	f002 fe7a 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(5);
 8000a06:	2005      	movs	r0, #5
 8000a08:	f002 f832 	bl	8002a70 <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 8000a0c:	e7f4      	b.n	80009f8 <_EPD_ReadBusy+0x4>
			break;
 8000a0e:	bf00      	nop
	}
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40020000 	.word	0x40020000

08000a18 <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 8000a20:	2032      	movs	r0, #50	; 0x32
 8000a22:	f7ff ff9f 	bl	8000964 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e009      	b.n	8000a40 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ffb9 	bl	80009ac <_EPD_SendData>
	for(count=0; count<153; count++)
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2b98      	cmp	r3, #152	; 0x98
 8000a44:	d9f2      	bls.n	8000a2c <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 8000a46:	f7ff ffd5 	bl	80009f4 <_EPD_ReadBusy>
}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffdc 	bl	8000a18 <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 8000a60:	203f      	movs	r0, #63	; 0x3f
 8000a62:	f7ff ff7f 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3399      	adds	r3, #153	; 0x99
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff9d 	bl	80009ac <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8000a72:	2003      	movs	r0, #3
 8000a74:	f7ff ff76 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	339a      	adds	r3, #154	; 0x9a
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff94 	bl	80009ac <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8000a84:	2004      	movs	r0, #4
 8000a86:	f7ff ff6d 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	339b      	adds	r3, #155	; 0x9b
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff8b 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	339c      	adds	r3, #156	; 0x9c
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff85 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	339d      	adds	r3, #157	; 0x9d
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff7f 	bl	80009ac <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8000aae:	202c      	movs	r0, #44	; 0x2c
 8000ab0:	f7ff ff58 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	339e      	adds	r3, #158	; 0x9e
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff76 	bl	80009ac <_EPD_SendData>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 8000acc:	2022      	movs	r0, #34	; 0x22
 8000ace:	f7ff ff49 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 8000ad2:	20c7      	movs	r0, #199	; 0xc7
 8000ad4:	f7ff ff6a 	bl	80009ac <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 8000ad8:	2020      	movs	r0, #32
 8000ada:	f7ff ff43 	bl	8000964 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000ade:	f7ff ff89 	bl	80009f4 <_EPD_ReadBusy>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_EPD_SetWindows>:
	_EPD_SendData(0x0F);
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
	_EPD_ReadBusy();
}

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 8000ae6:	b590      	push	{r4, r7, lr}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4604      	mov	r4, r0
 8000aee:	4608      	mov	r0, r1
 8000af0:	4611      	mov	r1, r2
 8000af2:	461a      	mov	r2, r3
 8000af4:	4623      	mov	r3, r4
 8000af6:	80fb      	strh	r3, [r7, #6]
 8000af8:	4603      	mov	r3, r0
 8000afa:	80bb      	strh	r3, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
 8000b00:	4613      	mov	r3, r2
 8000b02:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 8000b04:	2044      	movs	r0, #68	; 0x44
 8000b06:	f7ff ff2d 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff4a 	bl	80009ac <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff43 	bl	80009ac <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 8000b26:	2045      	movs	r0, #69	; 0x45
 8000b28:	f7ff ff1c 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff3b 	bl	80009ac <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff34 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 8000b44:	883b      	ldrh	r3, [r7, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff2f 	bl	80009ac <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 8000b4e:	883b      	ldrh	r3, [r7, #0]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff28 	bl	80009ac <_EPD_SendData>
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}

08000b64 <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	80fb      	strh	r3, [r7, #6]
 8000b70:	4613      	mov	r3, r2
 8000b72:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000b74:	204e      	movs	r0, #78	; 0x4e
 8000b76:	f7ff fef5 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff14 	bl	80009ac <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000b84:	204f      	movs	r0, #79	; 0x4f
 8000b86:	f7ff feed 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff0c 	bl	80009ac <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000b94:	88bb      	ldrh	r3, [r7, #4]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff05 	bl	80009ac <_EPD_SendData>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <EPD_Init>:



void EPD_Init(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4822      	ldr	r0, [pc, #136]	; (8000c40 <EPD_Init+0x94>)
 8000bb6:	f002 fdb5 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	4820      	ldr	r0, [pc, #128]	; (8000c40 <EPD_Init+0x94>)
 8000bc0:	f002 fdb0 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	481d      	ldr	r0, [pc, #116]	; (8000c40 <EPD_Init+0x94>)
 8000bca:	f002 fdab 	bl	8003724 <HAL_GPIO_WritePin>

	_EPD_Reset();
 8000bce:	f7ff feab 	bl	8000928 <_EPD_Reset>
	HAL_Delay(100);
 8000bd2:	2064      	movs	r0, #100	; 0x64
 8000bd4:	f001 ff4c 	bl	8002a70 <HAL_Delay>

	_EPD_ReadBusy();
 8000bd8:	f7ff ff0c 	bl	80009f4 <_EPD_ReadBusy>
	_EPD_SendCommand(0x12);  //SWRESET
 8000bdc:	2012      	movs	r0, #18
 8000bde:	f7ff fec1 	bl	8000964 <_EPD_SendCommand>
	_EPD_ReadBusy();
 8000be2:	f7ff ff07 	bl	80009f4 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff febc 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 8000bec:	2027      	movs	r0, #39	; 0x27
 8000bee:	f7ff fedd 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(0x01);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff feda 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(0x00);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fed7 	bl	80009ac <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 8000bfe:	2011      	movs	r0, #17
 8000c00:	f7ff feb0 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f7ff fed1 	bl	80009ac <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000c0a:	f240 1327 	movw	r3, #295	; 0x127
 8000c0e:	227f      	movs	r2, #127	; 0x7f
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ff67 	bl	8000ae6 <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 8000c18:	2021      	movs	r0, #33	; 0x21
 8000c1a:	f7ff fea3 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fec4 	bl	80009ac <_EPD_SendData>
	_EPD_SendData(0x80);
 8000c24:	2080      	movs	r0, #128	; 0x80
 8000c26:	f7ff fec1 	bl	80009ac <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff99 	bl	8000b64 <_EPD_SetCursor>
	_EPD_ReadBusy();
 8000c32:	f7ff fedf 	bl	80009f4 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <EPD_Init+0x98>)
 8000c38:	f7ff ff0b 	bl	8000a52 <_EPD_LUT_by_host>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020000 	.word	0x40020000
 8000c44:	20000000 	.word	0x20000000

08000c48 <EPD_Clear>:

void EPD_Clear(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000c4e:	2024      	movs	r0, #36	; 0x24
 8000c50:	f7ff fe88 	bl	8000964 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	80fb      	strh	r3, [r7, #6]
 8000c58:	e005      	b.n	8000c66 <EPD_Clear+0x1e>
		_EPD_SendData(0xff);
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	f7ff fea6 	bl	80009ac <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	3301      	adds	r3, #1
 8000c64:	80fb      	strh	r3, [r7, #6]
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000c6c:	d3f5      	bcc.n	8000c5a <EPD_Clear+0x12>
	}
	_EPD_TurnOnDisplay();
 8000c6e:	f7ff ff2b 	bl	8000ac8 <_EPD_TurnOnDisplay>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <EPD_Display>:

void EPD_Display(uint8_t *image) {
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000c82:	2024      	movs	r0, #36	; 0x24
 8000c84:	f7ff fe6e 	bl	8000964 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	81fb      	strh	r3, [r7, #14]
 8000c8c:	e009      	b.n	8000ca2 <EPD_Display+0x28>
		_EPD_SendData(image[i]);
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe88 	bl	80009ac <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 8000c9c:	89fb      	ldrh	r3, [r7, #14]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	81fb      	strh	r3, [r7, #14]
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000ca8:	d3f1      	bcc.n	8000c8e <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 8000caa:	f7ff ff0d 	bl	8000ac8 <_EPD_TurnOnDisplay>
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <EPD_Sleep>:
		_EPD_SendData(image[i]);
	}
	_EPD_TurnOnDisplay_Partial();
}

void EPD_Sleep(void) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x10); //enter deep sleep
 8000cba:	2010      	movs	r0, #16
 8000cbc:	f7ff fe52 	bl	8000964 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fe73 	bl	80009ac <_EPD_SendData>
	HAL_Delay(100);
 8000cc6:	2064      	movs	r0, #100	; 0x64
 8000cc8:	f001 fed2 	bl	8002a70 <HAL_Delay>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_I2S_RxCpltCallback>:
uint32_t C = 0;

uint8_t image[EPD_BYTES];

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	UNUSED(hi2s);
	if (hi2s->Instance == SPI2) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_I2S_RxCpltCallback+0x38>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d10e      	bne.n	8000d00 <HAL_I2S_RxCpltCallback+0x30>
		//RIGHT
		int32_t temp = 0 /*ADC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmarx)]*/;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
		temp >>= 16;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	141b      	asrs	r3, r3, #16
 8000cea:	60fb      	str	r3, [r7, #12]
		IN_SAMPLES[1] = temp;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_I2S_RxCpltCallback+0x3c>)
 8000cf2:	805a      	strh	r2, [r3, #2]
		HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_I2S_RxCpltCallback+0x40>)
 8000cfc:	f002 fd12 	bl	8003724 <HAL_GPIO_WritePin>

		//IN_SAMPLES[1] = wave_gen('s', C++, 1720.0F) * 15000;
	}
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40003800 	.word	0x40003800
 8000d0c:	200003c4 	.word	0x200003c4
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <HAL_I2S_TxCpltCallback>:
		DAC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = IN_SAMPLES[0];
	}
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI3) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <HAL_I2S_TxCpltCallback+0x34>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d109      	bne.n	8000d3a <HAL_I2S_TxCpltCallback+0x26>
		DAC_BUFF[__HAL_DMA_GET_COUNTER(hi2s->hdmatx)] = IN_SAMPLES[1];
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_I2S_TxCpltCallback+0x38>)
 8000d30:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_I2S_TxCpltCallback+0x3c>)
 8000d36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40003c00 	.word	0x40003c00
 8000d4c:	200003c4 	.word	0x200003c4
 8000d50:	20002790 	.word	0x20002790

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	f2ad 6dec 	subw	sp, sp, #1772	; 0x6ec
 8000d5a:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f001 fe16 	bl	800298c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f8f4 	bl	8000f4c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d64:	f000 f95c 	bl	8001020 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f000 fa60 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6c:	f000 fa36 	bl	80011dc <MX_DMA_Init>
  MX_I2C1_Init();
 8000d70:	f000 f972 	bl	8001058 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000d74:	f000 f99e 	bl	80010b4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000d78:	f000 f9ca 	bl	8001110 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000d7c:	f00a ffee 	bl	800bd5c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000d80:	f007 ff8a 	bl	8008c98 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000d84:	f000 f9f2 	bl	800116c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	pedalboard_t pedalboard;
	pedalboard.active_pedals = 0;
 8000d88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
	pedalboard_append(&pedalboard, OVERDRIVE_SQRT);
 8000d90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d94:	2107      	movs	r1, #7
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fa30 	bl	80021fc <pedalboard_append>

	CS43_Init(hi2c1, MODE_I2S);
 8000d9c:	4c61      	ldr	r4, [pc, #388]	; (8000f24 <main+0x1d0>)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9311      	str	r3, [sp, #68]	; 0x44
 8000da2:	4668      	mov	r0, sp
 8000da4:	f104 0310 	add.w	r3, r4, #16
 8000da8:	2244      	movs	r2, #68	; 0x44
 8000daa:	4619      	mov	r1, r3
 8000dac:	f00b fb48 	bl	800c440 <memcpy>
 8000db0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000db4:	f7ff fbc4 	bl	8000540 <CS43_Init>
	CS43_SetVolume(0);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fd31 	bl	8000820 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f7ff fcd2 	bl	8000768 <CS43_Enable_RightLeft>
	CS43_Start();
 8000dc4:	f7ff fd6e 	bl	80008a4 <CS43_Start>

	//HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)DAC_BUFF, 4);
	//HAL_I2S_Receive_DMA(&hi2s2, ADC_BUFF.ADC16, 4);

	EPD_Init();
 8000dc8:	f7ff fef0 	bl	8000bac <EPD_Init>
	EPD_Clear();
 8000dcc:	f7ff ff3c 	bl	8000c48 <EPD_Clear>

	char text[5][16+1] = {
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	4a55      	ldr	r2, [pc, #340]	; (8000f28 <main+0x1d4>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	2355      	movs	r3, #85	; 0x55
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f00b fb30 	bl	800c440 <memcpy>
			{'d', 'i', 'g', 'i', 't', 'a', 'l', ' ', 'p', 'e', 'd', 'a', 'l', '\0'},
			{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', '\0'},
			{'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', ' ', '0', '1', '2', '3', '4', '\0'},
			{'5', '6', '7', '8', '9', ' ', '.', ',', '+', '-', '<', '>', '\0'}
	};
	draw_clean(image);
 8000de0:	4852      	ldr	r0, [pc, #328]	; (8000f2c <main+0x1d8>)
 8000de2:	f000 fcf5 	bl	80017d0 <draw_clean>
	draw_rectangle(image, 36, 56, 88, 20);
 8000de6:	2314      	movs	r3, #20
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2358      	movs	r3, #88	; 0x58
 8000dec:	2238      	movs	r2, #56	; 0x38
 8000dee:	2124      	movs	r1, #36	; 0x24
 8000df0:	484e      	ldr	r0, [pc, #312]	; (8000f2c <main+0x1d8>)
 8000df2:	f000 fb3f 	bl	8001474 <draw_rectangle>
	draw_text(image, text[0], 40, 60);
 8000df6:	1d39      	adds	r1, r7, #4
 8000df8:	233c      	movs	r3, #60	; 0x3c
 8000dfa:	2228      	movs	r2, #40	; 0x28
 8000dfc:	484b      	ldr	r0, [pc, #300]	; (8000f2c <main+0x1d8>)
 8000dfe:	f000 fbfa 	bl	80015f6 <draw_text>
	draw_text(image, text[1], 20, 90);
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	f103 0111 	add.w	r1, r3, #17
 8000e08:	235a      	movs	r3, #90	; 0x5a
 8000e0a:	2214      	movs	r2, #20
 8000e0c:	4847      	ldr	r0, [pc, #284]	; (8000f2c <main+0x1d8>)
 8000e0e:	f000 fbf2 	bl	80015f6 <draw_text>
	draw_text(image, text[2], 0, 120);
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8000e18:	2378      	movs	r3, #120	; 0x78
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4843      	ldr	r0, [pc, #268]	; (8000f2c <main+0x1d8>)
 8000e1e:	f000 fbea 	bl	80015f6 <draw_text>
	draw_text(image, text[3], 0, 132);
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	f103 0133 	add.w	r1, r3, #51	; 0x33
 8000e28:	2384      	movs	r3, #132	; 0x84
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	483f      	ldr	r0, [pc, #252]	; (8000f2c <main+0x1d8>)
 8000e2e:	f000 fbe2 	bl	80015f6 <draw_text>
	draw_text(image, text[4], 0, 144);
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8000e38:	2390      	movs	r3, #144	; 0x90
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	483b      	ldr	r0, [pc, #236]	; (8000f2c <main+0x1d8>)
 8000e3e:	f000 fbda 	bl	80015f6 <draw_text>
	draw_float_number(image, 43172.5, 0, 200);
 8000e42:	22c8      	movs	r2, #200	; 0xc8
 8000e44:	2100      	movs	r1, #0
 8000e46:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8000f30 <main+0x1dc>
 8000e4a:	4838      	ldr	r0, [pc, #224]	; (8000f2c <main+0x1d8>)
 8000e4c:	f000 fc20 	bl	8001690 <draw_float_number>
	EPD_Display(image);
 8000e50:	4836      	ldr	r0, [pc, #216]	; (8000f2c <main+0x1d8>)
 8000e52:	f7ff ff12 	bl	8000c7a <EPD_Display>
	EPD_Sleep();
 8000e56:	f7ff ff2e 	bl	8000cb6 <EPD_Sleep>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e5a:	f00a ffa5 	bl	800bda8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2101      	movs	r1, #1
 8000e62:	4834      	ldr	r0, [pc, #208]	; (8000f34 <main+0x1e0>)
 8000e64:	f002 fc5e 	bl	8003724 <HAL_GPIO_WritePin>

		GPIO_PinState btn_states[4];
		btn_states[0] = HAL_GPIO_ReadPin(Btn0_GPIO_Port, Btn0_Pin);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4833      	ldr	r0, [pc, #204]	; (8000f38 <main+0x1e4>)
 8000e6c:	f002 fc42 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	463b      	mov	r3, r7
 8000e76:	701a      	strb	r2, [r3, #0]
		btn_states[1] = !HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin);
 8000e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7c:	482f      	ldr	r0, [pc, #188]	; (8000f3c <main+0x1e8>)
 8000e7e:	f002 fc39 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf0c      	ite	eq
 8000e88:	2301      	moveq	r3, #1
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	463b      	mov	r3, r7
 8000e92:	705a      	strb	r2, [r3, #1]
		btn_states[2] = !HAL_GPIO_ReadPin(Btn2_GPIO_Port, Btn2_Pin);
 8000e94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e98:	4829      	ldr	r0, [pc, #164]	; (8000f40 <main+0x1ec>)
 8000e9a:	f002 fc2b 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	463b      	mov	r3, r7
 8000eae:	709a      	strb	r2, [r3, #2]
		btn_states[3] = !HAL_GPIO_ReadPin(Btn3_GPIO_Port, Btn3_Pin);
 8000eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <main+0x1ec>)
 8000eb6:	f002 fc1d 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	463b      	mov	r3, r7
 8000eca:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, btn_states[0] || btn_states[1] || btn_states[2] || btn_states[3]);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10b      	bne.n	8000eec <main+0x198>
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	785b      	ldrb	r3, [r3, #1]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <main+0x198>
 8000edc:	463b      	mov	r3, r7
 8000ede:	789b      	ldrb	r3, [r3, #2]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d103      	bne.n	8000eec <main+0x198>
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	78db      	ldrb	r3, [r3, #3]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <main+0x19c>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <main+0x19e>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <main+0x1e8>)
 8000efc:	f002 fc12 	bl	8003724 <HAL_GPIO_WritePin>

		if (btn_states[0] == GPIO_PIN_SET) {
 8000f00:	463b      	mov	r3, r7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d1a8      	bne.n	8000e5a <main+0x106>

			HAL_Delay(50);
 8000f08:	2032      	movs	r0, #50	; 0x32
 8000f0a:	f001 fdb1 	bl	8002a70 <HAL_Delay>
			HAL_I2S_Receive_DMA(&hi2s2, &ADC_BUFF.ADC16[0], 8);
 8000f0e:	2208      	movs	r2, #8
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <main+0x1f0>)
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <main+0x1f4>)
 8000f14:	f005 fa66 	bl	80063e4 <HAL_I2S_Receive_DMA>
			HAL_Delay(500);
 8000f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f1c:	f001 fda8 	bl	8002a70 <HAL_Delay>
	{
 8000f20:	e79b      	b.n	8000e5a <main+0x106>
 8000f22:	bf00      	nop
 8000f24:	200003c8 	.word	0x200003c8
 8000f28:	0800c614 	.word	0x0800c614
 8000f2c:	2000047c 	.word	0x2000047c
 8000f30:	4728a480 	.word	0x4728a480
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020c00 	.word	0x40020c00
 8000f40:	40020400 	.word	0x40020400
 8000f44:	20002808 	.word	0x20002808
 8000f48:	20002828 	.word	0x20002828

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00b fa7e 	bl	800c45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <SystemClock_Config+0xd0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f005 fe78 	bl	8006cc8 <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fde:	f000 f9eb 	bl	80013b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	230f      	movs	r3, #15
 8000fe4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000fee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ff2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2105      	movs	r1, #5
 8001000:	4618      	mov	r0, r3
 8001002:	f006 f8d9 	bl	80071b8 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800100c:	f000 f9d4 	bl	80013b8 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	; 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001032:	2301      	movs	r3, #1
 8001034:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8001036:	23b5      	movs	r3, #181	; 0xb5
 8001038:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800103a:	2302      	movs	r3, #2
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	4618      	mov	r0, r3
 8001042:	f006 faa1 	bl	8007588 <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 800104c:	f000 f9b4 	bl	80013b8 <Error_Handler>
  }
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_I2C1_Init+0x50>)
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <MX_I2C1_Init+0x54>)
 8001060:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x58>)
 8001066:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001076:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800107a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_I2C1_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_I2C1_Init+0x50>)
 8001096:	f004 f8cf 	bl	8005238 <HAL_I2C_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a0:	f000 f98a 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200003c8 	.word	0x200003c8
 80010ac:	40005400 	.word	0x40005400
 80010b0:	000186a0 	.word	0x000186a0

080010b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_I2S2_Init+0x54>)
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <MX_I2S2_Init+0x58>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_I2S2_Init+0x54>)
 80010c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_I2S2_Init+0x54>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_I2S2_Init+0x54>)
 80010ce:	2203      	movs	r2, #3
 80010d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_I2S2_Init+0x54>)
 80010d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_I2S2_Init+0x54>)
 80010dc:	f64a 4244 	movw	r2, #44100	; 0xac44
 80010e0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_I2S2_Init+0x54>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_I2S2_Init+0x54>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_I2S2_Init+0x54>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_I2S2_Init+0x54>)
 80010f6:	f005 f835 	bl	8006164 <HAL_I2S_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001100:	f000 f95a 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20002828 	.word	0x20002828
 800110c:	40003800 	.word	0x40003800

08001110 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_I2S3_Init+0x54>)
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <MX_I2S3_Init+0x58>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_I2S3_Init+0x54>)
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_I2S3_Init+0x54>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_I2S3_Init+0x54>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_I2S3_Init+0x54>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_I2S3_Init+0x54>)
 8001138:	f64a 4244 	movw	r2, #44100	; 0xac44
 800113c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_I2S3_Init+0x54>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MX_I2S3_Init+0x54>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_I2S3_Init+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_I2S3_Init+0x54>)
 8001152:	f005 f807 	bl	8006164 <HAL_I2S_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800115c:	f000 f92c 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20002870 	.word	0x20002870
 8001168:	40003c00 	.word	0x40003c00

0800116c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001170:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_SPI1_Init+0x68>)
 8001172:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <MX_SPI1_Init+0x6c>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_SPI1_Init+0x68>)
 8001178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800117c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_SPI1_Init+0x68>)
 8001180:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001184:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_SPI1_Init+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_SPI1_Init+0x68>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_SPI1_Init+0x68>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_SPI1_Init+0x68>)
 800119a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_SPI1_Init+0x68>)
 80011a2:	2228      	movs	r2, #40	; 0x28
 80011a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_SPI1_Init+0x68>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_SPI1_Init+0x68>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_SPI1_Init+0x68>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_SPI1_Init+0x68>)
 80011ba:	220a      	movs	r2, #10
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_SPI1_Init+0x68>)
 80011c0:	f006 fb22 	bl	8007808 <HAL_SPI_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80011ca:	f000 f8f5 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200027b0 	.word	0x200027b0
 80011d8:	40013000 	.word	0x40013000

080011dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_DMA_Init+0x4c>)
 80011ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_DMA_Init+0x4c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	200e      	movs	r0, #14
 8001204:	f001 fd33 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001208:	200e      	movs	r0, #14
 800120a:	f001 fd4c 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2010      	movs	r0, #16
 8001214:	f001 fd2b 	bl	8002c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001218:	2010      	movs	r0, #16
 800121a:	f001 fd44 	bl	8002ca6 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b57      	ldr	r3, [pc, #348]	; (80013a4 <MX_GPIO_Init+0x178>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a56      	ldr	r2, [pc, #344]	; (80013a4 <MX_GPIO_Init+0x178>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <MX_GPIO_Init+0x178>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <MX_GPIO_Init+0x178>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <MX_GPIO_Init+0x178>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <MX_GPIO_Init+0x178>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <MX_GPIO_Init+0x178>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a48      	ldr	r2, [pc, #288]	; (80013a4 <MX_GPIO_Init+0x178>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <MX_GPIO_Init+0x178>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <MX_GPIO_Init+0x178>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a41      	ldr	r2, [pc, #260]	; (80013a4 <MX_GPIO_Init+0x178>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <MX_GPIO_Init+0x178>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_GPIO_Init+0x178>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a3a      	ldr	r2, [pc, #232]	; (80013a4 <MX_GPIO_Init+0x178>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_GPIO_Init+0x178>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2101      	movs	r1, #1
 80012d2:	4835      	ldr	r0, [pc, #212]	; (80013a8 <MX_GPIO_Init+0x17c>)
 80012d4:	f002 fa26 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2146      	movs	r1, #70	; 0x46
 80012dc:	4833      	ldr	r0, [pc, #204]	; (80013ac <MX_GPIO_Init+0x180>)
 80012de:	f002 fa21 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80012e8:	4831      	ldr	r0, [pc, #196]	; (80013b0 <MX_GPIO_Init+0x184>)
 80012ea:	f002 fa1b 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2110      	movs	r1, #16
 80012f2:	482f      	ldr	r0, [pc, #188]	; (80013b0 <MX_GPIO_Init+0x184>)
 80012f4:	f002 fa16 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OtgPower_Pin */
  GPIO_InitStruct.Pin = OtgPower_Pin;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <MX_GPIO_Init+0x17c>)
 8001310:	f002 f854 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn0_Pin EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = Btn0_Pin|EPD_BUSY_Pin;
 8001314:	2309      	movs	r3, #9
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_GPIO_Init+0x180>)
 8001328:	f002 f848 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_RST_Pin EPD_DC_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin;
 800132c:	2346      	movs	r3, #70	; 0x46
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	481a      	ldr	r0, [pc, #104]	; (80013ac <MX_GPIO_Init+0x180>)
 8001344:	f002 f83a 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn3_Pin Btn2_Pin */
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 8001348:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001352:	2301      	movs	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4815      	ldr	r0, [pc, #84]	; (80013b4 <MX_GPIO_Init+0x188>)
 800135e:	f002 f82d 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn1_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin;
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <MX_GPIO_Init+0x184>)
 8001378:	f002 f820 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin Led3_Pin Led4_Pin
                           AudioPower_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 800137c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001380:	617b      	str	r3, [r7, #20]
                          |AudioPower_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4806      	ldr	r0, [pc, #24]	; (80013b0 <MX_GPIO_Init+0x184>)
 8001396:	f002 f811 	bl	80033bc <HAL_GPIO_Init>

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40020400 	.word	0x40020400

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>

080013c2 <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	883b      	ldrh	r3, [r7, #0]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da00      	bge.n	80013e0 <read_font_pixel+0x1e>
 80013de:	3307      	adds	r3, #7
 80013e0:	10db      	asrs	r3, r3, #3
 80013e2:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 80013ee:	7b7a      	ldrb	r2, [r7, #13]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	fa42 f303 	asr.w	r3, r2, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 8001420:	887a      	ldrh	r2, [r7, #2]
 8001422:	883b      	ldrh	r3, [r7, #0]
 8001424:	01db      	lsls	r3, r3, #7
 8001426:	4413      	add	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	da00      	bge.n	800142e <toggle_single_pixel+0x1e>
 800142c:	3307      	adds	r3, #7
 800142e:	10db      	asrs	r3, r3, #3
 8001430:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	2b7f      	cmp	r3, #127	; 0x7f
 8001436:	d817      	bhi.n	8001468 <toggle_single_pixel+0x58>
 8001438:	883b      	ldrh	r3, [r7, #0]
 800143a:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800143e:	d213      	bcs.n	8001468 <toggle_single_pixel+0x58>
 8001440:	89fb      	ldrh	r3, [r7, #14]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b25a      	sxtb	r2, r3
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	43db      	mvns	r3, r3
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4053      	eors	r3, r2
 800145c:	b259      	sxtb	r1, r3
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	b2ca      	uxtb	r2, r1
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <draw_rectangle>:

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4603      	mov	r3, r0
 8001484:	817b      	strh	r3, [r7, #10]
 8001486:	460b      	mov	r3, r1
 8001488:	813b      	strh	r3, [r7, #8]
 800148a:	4613      	mov	r3, r2
 800148c:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 800148e:	2300      	movs	r3, #0
 8001490:	82fb      	strh	r3, [r7, #22]
 8001492:	e018      	b.n	80014c6 <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 8001494:	2300      	movs	r3, #0
 8001496:	82bb      	strh	r3, [r7, #20]
 8001498:	e00e      	b.n	80014b8 <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 800149a:	897a      	ldrh	r2, [r7, #10]
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	4413      	add	r3, r2
 80014a0:	b299      	uxth	r1, r3
 80014a2:	893a      	ldrh	r2, [r7, #8]
 80014a4:	8afb      	ldrh	r3, [r7, #22]
 80014a6:	4413      	add	r3, r2
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff ffaf 	bl	8001410 <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 80014b2:	8abb      	ldrh	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	82bb      	strh	r3, [r7, #20]
 80014b8:	8aba      	ldrh	r2, [r7, #20]
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3ec      	bcc.n	800149a <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 80014c0:	8afb      	ldrh	r3, [r7, #22]
 80014c2:	3301      	adds	r3, #1
 80014c4:	82fb      	strh	r3, [r7, #22]
 80014c6:	8afa      	ldrh	r2, [r7, #22]
 80014c8:	8c3b      	ldrh	r3, [r7, #32]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3e2      	bcc.n	8001494 <draw_rectangle+0x20>
		}
	}
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	817b      	strh	r3, [r7, #10]
 80014ea:	460b      	mov	r3, r1
 80014ec:	813b      	strh	r3, [r7, #8]
 80014ee:	4613      	mov	r3, r2
 80014f0:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	461a      	mov	r2, r3
 80014f6:	0052      	lsls	r2, r2, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 80014fe:	2300      	movs	r3, #0
 8001500:	82fb      	strh	r3, [r7, #22]
 8001502:	e023      	b.n	800154c <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001504:	2300      	movs	r3, #0
 8001506:	82bb      	strh	r3, [r7, #20]
 8001508:	e01a      	b.n	8001540 <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 800150a:	8afa      	ldrh	r2, [r7, #22]
 800150c:	8a7b      	ldrh	r3, [r7, #18]
 800150e:	4413      	add	r3, r2
 8001510:	b29a      	uxth	r2, r3
 8001512:	8abb      	ldrh	r3, [r7, #20]
 8001514:	4619      	mov	r1, r3
 8001516:	4811      	ldr	r0, [pc, #68]	; (800155c <draw_char+0x84>)
 8001518:	f7ff ff53 	bl	80013c2 <read_font_pixel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 8001522:	897a      	ldrh	r2, [r7, #10]
 8001524:	8abb      	ldrh	r3, [r7, #20]
 8001526:	4413      	add	r3, r2
 8001528:	b299      	uxth	r1, r3
 800152a:	893a      	ldrh	r2, [r7, #8]
 800152c:	8afb      	ldrh	r3, [r7, #22]
 800152e:	4413      	add	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff ff6b 	bl	8001410 <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 800153a:	8abb      	ldrh	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	82bb      	strh	r3, [r7, #20]
 8001540:	8abb      	ldrh	r3, [r7, #20]
 8001542:	2b07      	cmp	r3, #7
 8001544:	d9e1      	bls.n	800150a <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001546:	8afb      	ldrh	r3, [r7, #22]
 8001548:	3301      	adds	r3, #1
 800154a:	82fb      	strh	r3, [r7, #22]
 800154c:	8afb      	ldrh	r3, [r7, #22]
 800154e:	2b0b      	cmp	r3, #11
 8001550:	d9d8      	bls.n	8001504 <draw_char+0x2c>
			}
		}
	}
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200000a0 	.word	0x200000a0

08001560 <translate>:

uint16_t translate(char c) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b40      	cmp	r3, #64	; 0x40
 800156e:	d907      	bls.n	8001580 <translate+0x20>
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b5a      	cmp	r3, #90	; 0x5a
 8001574:	d804      	bhi.n	8001580 <translate+0x20>
		return c - 'A';
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b41      	subs	r3, #65	; 0x41
 800157c:	b29b      	uxth	r3, r3
 800157e:	e034      	b.n	80015ea <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b60      	cmp	r3, #96	; 0x60
 8001584:	d907      	bls.n	8001596 <translate+0x36>
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b7a      	cmp	r3, #122	; 0x7a
 800158a:	d804      	bhi.n	8001596 <translate+0x36>
		return c - 'a';
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b61      	subs	r3, #97	; 0x61
 8001592:	b29b      	uxth	r3, r3
 8001594:	e029      	b.n	80015ea <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b2f      	cmp	r3, #47	; 0x2f
 800159a:	d907      	bls.n	80015ac <translate+0x4c>
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b39      	cmp	r3, #57	; 0x39
 80015a0:	d804      	bhi.n	80015ac <translate+0x4c>
		return c - '0' + 26;
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b16      	subs	r3, #22
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	e01e      	b.n	80015ea <translate+0x8a>
	} else if (c == '.') {
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b2e      	cmp	r3, #46	; 0x2e
 80015b0:	d101      	bne.n	80015b6 <translate+0x56>
		return 36;
 80015b2:	2324      	movs	r3, #36	; 0x24
 80015b4:	e019      	b.n	80015ea <translate+0x8a>
	} else if (c == ',') {
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b2c      	cmp	r3, #44	; 0x2c
 80015ba:	d101      	bne.n	80015c0 <translate+0x60>
		return 37;
 80015bc:	2325      	movs	r3, #37	; 0x25
 80015be:	e014      	b.n	80015ea <translate+0x8a>
	} else if (c == '+') {
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b2b      	cmp	r3, #43	; 0x2b
 80015c4:	d101      	bne.n	80015ca <translate+0x6a>
		return 38;
 80015c6:	2326      	movs	r3, #38	; 0x26
 80015c8:	e00f      	b.n	80015ea <translate+0x8a>
	} else if (c == '-') {
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b2d      	cmp	r3, #45	; 0x2d
 80015ce:	d101      	bne.n	80015d4 <translate+0x74>
		return 39;
 80015d0:	2327      	movs	r3, #39	; 0x27
 80015d2:	e00a      	b.n	80015ea <translate+0x8a>
	} else if (c == '<') {
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b3c      	cmp	r3, #60	; 0x3c
 80015d8:	d101      	bne.n	80015de <translate+0x7e>
		return 40;
 80015da:	2328      	movs	r3, #40	; 0x28
 80015dc:	e005      	b.n	80015ea <translate+0x8a>
	} else if (c == '>') {
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b3e      	cmp	r3, #62	; 0x3e
 80015e2:	d101      	bne.n	80015e8 <translate+0x88>
		return 41;
 80015e4:	2329      	movs	r3, #41	; 0x29
 80015e6:	e000      	b.n	80015ea <translate+0x8a>
	} else {
		return 42; // ' '
 80015e8:	232a      	movs	r3, #42	; 0x2a
	}
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 80015f6:	b590      	push	{r4, r7, lr}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	4611      	mov	r1, r2
 8001602:	461a      	mov	r2, r3
 8001604:	460b      	mov	r3, r1
 8001606:	80fb      	strh	r3, [r7, #6]
 8001608:	4613      	mov	r3, r2
 800160a:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001610:	e015      	b.n	800163e <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 8001612:	8afb      	ldrh	r3, [r7, #22]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	b29a      	uxth	r2, r3
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	4413      	add	r3, r2
 800161c:	b29c      	uxth	r4, r3
 800161e:	8afb      	ldrh	r3, [r7, #22]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff9a 	bl	8001560 <translate>
 800162c:	4603      	mov	r3, r0
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	4621      	mov	r1, r4
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff ff50 	bl	80014d8 <draw_char>
		i++;
 8001638:	8afb      	ldrh	r3, [r7, #22]
 800163a:	3301      	adds	r3, #1
 800163c:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1e3      	bne.n	8001612 <draw_text+0x1c>
	}
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <_pow>:

int32_t _pow(int32_t a, int32_t b) {
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	int32_t res = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
	for (int32_t i = 0; i < b; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	e007      	b.n	8001678 <_pow+0x24>
		res *= a;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	60fb      	str	r3, [r7, #12]
	for (int32_t i = 0; i < b; i++) {
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3301      	adds	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf3      	blt.n	8001668 <_pow+0x14>
	}
	return res;
 8001680:	68fb      	ldr	r3, [r7, #12]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <draw_float_number>:

void draw_float_number(uint8_t *image, float val, uint16_t x, uint16_t y) {
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08d      	sub	sp, #52	; 0x34
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	ed87 0a02 	vstr	s0, [r7, #8]
 800169c:	460b      	mov	r3, r1
 800169e:	80fb      	strh	r3, [r7, #6]
 80016a0:	4613      	mov	r3, r2
 80016a2:	80bb      	strh	r3, [r7, #4]
	int32_t int_part = (int32_t)val;
 80016a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ac:	ee17 3a90 	vmov	r3, s15
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t dec_part = (int32_t)(val * 100.0F) % 100;
 80016b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80016b6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80017c4 <draw_float_number+0x134>
 80016ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c2:	ee17 3a90 	vmov	r3, s15
 80016c6:	4a40      	ldr	r2, [pc, #256]	; (80017c8 <draw_float_number+0x138>)
 80016c8:	fb82 1203 	smull	r1, r2, r2, r3
 80016cc:	1151      	asrs	r1, r2, #5
 80016ce:	17da      	asrs	r2, r3, #31
 80016d0:	1a8a      	subs	r2, r1, r2
 80016d2:	2164      	movs	r1, #100	; 0x64
 80016d4:	fb01 f202 	mul.w	r2, r1, r2
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	623b      	str	r3, [r7, #32]
	int32_t offset = 8;
 80016dc:	2308      	movs	r3, #8
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c

	char row[12] = "00000000.00"; // 8 for integer, 1 for dot, 2 for decimal, 1 for null
 80016e0:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <draw_float_number+0x13c>)
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint16_t i = 0; i < 8; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80016f0:	e02e      	b.n	8001750 <draw_float_number+0xc0>
		row[7 - i] = '0' + (char)(int_part % _pow(10, i+1) / _pow(10, i));
 80016f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016f4:	3301      	adds	r3, #1
 80016f6:	4619      	mov	r1, r3
 80016f8:	200a      	movs	r0, #10
 80016fa:	f7ff ffab 	bl	8001654 <_pow>
 80016fe:	4602      	mov	r2, r0
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	fb93 f1f2 	sdiv	r1, r3, r2
 8001706:	fb02 f201 	mul.w	r2, r2, r1
 800170a:	1a9c      	subs	r4, r3, r2
 800170c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800170e:	4619      	mov	r1, r3
 8001710:	200a      	movs	r0, #10
 8001712:	f7ff ff9f 	bl	8001654 <_pow>
 8001716:	4603      	mov	r3, r0
 8001718:	fb94 f3f3 	sdiv	r3, r4, r3
 800171c:	b2da      	uxtb	r2, r3
 800171e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001720:	f1c3 0307 	rsb	r3, r3, #7
 8001724:	3230      	adds	r2, #48	; 0x30
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800172c:	440b      	add	r3, r1
 800172e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		if (_pow(10, i) < int_part) offset--;
 8001732:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001734:	4619      	mov	r1, r3
 8001736:	200a      	movs	r0, #10
 8001738:	f7ff ff8c 	bl	8001654 <_pow>
 800173c:	4602      	mov	r2, r0
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	4293      	cmp	r3, r2
 8001742:	dd02      	ble.n	800174a <draw_float_number+0xba>
 8001744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001746:	3b01      	subs	r3, #1
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint16_t i = 0; i < 8; i++) {
 800174a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800174c:	3301      	adds	r3, #1
 800174e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001750:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001752:	2b07      	cmp	r3, #7
 8001754:	d9cd      	bls.n	80016f2 <draw_float_number+0x62>
	}
	for (uint16_t i = 0; i < 2; i++) {
 8001756:	2300      	movs	r3, #0
 8001758:	853b      	strh	r3, [r7, #40]	; 0x28
 800175a:	e022      	b.n	80017a2 <draw_float_number+0x112>
		row[10 - i] = '0' + (char)(dec_part % _pow(10, i+1) / _pow(10, i));
 800175c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800175e:	3301      	adds	r3, #1
 8001760:	4619      	mov	r1, r3
 8001762:	200a      	movs	r0, #10
 8001764:	f7ff ff76 	bl	8001654 <_pow>
 8001768:	4602      	mov	r2, r0
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001770:	fb02 f201 	mul.w	r2, r2, r1
 8001774:	1a9c      	subs	r4, r3, r2
 8001776:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001778:	4619      	mov	r1, r3
 800177a:	200a      	movs	r0, #10
 800177c:	f7ff ff6a 	bl	8001654 <_pow>
 8001780:	4603      	mov	r3, r0
 8001782:	fb94 f3f3 	sdiv	r3, r4, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800178a:	f1c3 030a 	rsb	r3, r3, #10
 800178e:	3230      	adds	r2, #48	; 0x30
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001796:	440b      	add	r3, r1
 8001798:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint16_t i = 0; i < 2; i++) {
 800179c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800179e:	3301      	adds	r3, #1
 80017a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80017a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d9d9      	bls.n	800175c <draw_float_number+0xcc>
	}
	draw_text(image, row + offset, x, y);
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	f107 0214 	add.w	r2, r7, #20
 80017ae:	18d1      	adds	r1, r2, r3
 80017b0:	88bb      	ldrh	r3, [r7, #4]
 80017b2:	88fa      	ldrh	r2, [r7, #6]
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7ff ff1e 	bl	80015f6 <draw_text>

}
 80017ba:	bf00      	nop
 80017bc:	3734      	adds	r7, #52	; 0x34
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	42c80000 	.word	0x42c80000
 80017c8:	51eb851f 	.word	0x51eb851f
 80017cc:	0800c66c 	.word	0x0800c66c

080017d0 <draw_clean>:

void draw_clean(uint8_t *image) {
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 80017d8:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 80017dc:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 80017de:	2300      	movs	r3, #0
 80017e0:	81fb      	strh	r3, [r7, #14]
 80017e2:	e007      	b.n	80017f4 <draw_clean+0x24>
 80017e4:	89fb      	ldrh	r3, [r7, #14]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	22ff      	movs	r2, #255	; 0xff
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	3301      	adds	r3, #1
 80017f2:	81fb      	strh	r3, [r7, #14]
 80017f4:	89fa      	ldrh	r2, [r7, #14]
 80017f6:	89bb      	ldrh	r3, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d3f3      	bcc.n	80017e4 <draw_clean+0x14>
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <overdrive_pedal_init>:
#include <stdlib.h>
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 800180c:	b490      	push	{r4, r7}
 800180e:	b09a      	sub	sp, #104	; 0x68
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <overdrive_pedal_init+0x74>)
 8001818:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800181c:	4613      	mov	r3, r2
 800181e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <overdrive_pedal_init+0x78>)
 8001828:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800182c:	4613      	mov	r3, r2
 800182e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <overdrive_pedal_init+0x7c>)
 8001838:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800183c:	4613      	mov	r3, r2
 800183e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <overdrive_pedal_init+0x74>)
 8001848:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800184c:	4613      	mov	r3, r2
 800184e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0d      	ldr	r2, [pc, #52]	; (800188c <overdrive_pedal_init+0x80>)
 8001858:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800185c:	4613      	mov	r3, r2
 800185e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <overdrive_pedal_init+0x84>)
 8001868:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800186c:	4613      	mov	r3, r2
 800186e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001870:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001874:	bf00      	nop
 8001876:	3768      	adds	r7, #104	; 0x68
 8001878:	46bd      	mov	sp, r7
 800187a:	bc90      	pop	{r4, r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	0800c678 	.word	0x0800c678
 8001884:	0800c688 	.word	0x0800c688
 8001888:	0800c698 	.word	0x0800c698
 800188c:	0800c6a8 	.word	0x0800c6a8
 8001890:	0800c6b8 	.word	0x0800c6b8

08001894 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	ed87 0a01 	vstr	s0, [r7, #4]
 800189e:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80018a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ae:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80018be:	eeb0 1a47 	vmov.f32	s2, s14
 80018c2:	eef0 0a67 	vmov.f32	s1, s15
 80018c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ca:	f000 fbab 	bl	8002024 <soft_clip>
 80018ce:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80018d8:	eef0 0a67 	vmov.f32	s1, s15
 80018dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018e0:	f000 fb70 	bl	8001fc4 <hard_clip>
 80018e4:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80018f4:	eef0 1a47 	vmov.f32	s3, s14
 80018f8:	eeb0 1a67 	vmov.f32	s2, s15
 80018fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001900:	ed97 0a03 	vldr	s0, [r7, #12]
 8001904:	f000 fb3e 	bl	8001f84 <mix>
 8001908:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	ee07 3a90 	vmov	s15, r3
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 800191c:	b490      	push	{r4, r7}
 800191e:	b08e      	sub	sp, #56	; 0x38
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <bitcrusher_rs_pedal_init+0x44>)
 8001928:	f103 0420 	add.w	r4, r3, #32
 800192c:	4613      	mov	r3, r2
 800192e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <bitcrusher_rs_pedal_init+0x48>)
 8001938:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800193c:	4613      	mov	r3, r2
 800193e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <bitcrusher_rs_pedal_init+0x48>)
 8001948:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800194c:	4613      	mov	r3, r2
 800194e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001954:	bf00      	nop
 8001956:	3738      	adds	r7, #56	; 0x38
 8001958:	46bd      	mov	sp, r7
 800195a:	bc90      	pop	{r4, r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	0800c6c8 	.word	0x0800c6c8
 8001964:	0800c6d8 	.word	0x0800c6d8

08001968 <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001972:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 800197a:	edd7 7a01 	vldr	s15, [r7, #4]
 800197e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001982:	ee17 3a90 	vmov	r3, s15
 8001986:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 8001988:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800198c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001990:	fa42 f303 	asr.w	r3, r2, r3
 8001994:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 8001996:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800199a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 80019a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a8:	3b02      	subs	r3, #2
 80019aa:	2202      	movs	r2, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	89bb      	ldrh	r3, [r7, #12]
 80019b4:	4413      	add	r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 80019ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80019d6:	eef0 1a47 	vmov.f32	s3, s14
 80019da:	eeb0 1a67 	vmov.f32	s2, s15
 80019de:	edd7 0a01 	vldr	s1, [r7, #4]
 80019e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80019e6:	f000 facd 	bl	8001f84 <mix>
 80019ea:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	ee07 3a90 	vmov	s15, r3
}
 80019f4:	eeb0 0a67 	vmov.f32	s0, s15
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 8001a00:	b490      	push	{r4, r7}
 8001a02:	b092      	sub	sp, #72	; 0x48
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <tremolo_pedal_init+0x5c>)
 8001a24:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001a28:	4613      	mov	r3, r2
 8001a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <tremolo_pedal_init+0x60>)
 8001a34:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001a38:	4613      	mov	r3, r2
 8001a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <tremolo_pedal_init+0x64>)
 8001a44:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001a48:	4613      	mov	r3, r2
 8001a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001a50:	bf00      	nop
 8001a52:	3748      	adds	r7, #72	; 0x48
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc90      	pop	{r4, r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	0800c6e8 	.word	0x0800c6e8
 8001a60:	0800c6f8 	.word	0x0800c6f8
 8001a64:	0800c708 	.word	0x0800c708

08001a68 <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a72:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <tremolo_process+0x80>)
 8001a76:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001a84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	4611      	mov	r1, r2
 8001a92:	2073      	movs	r0, #115	; 0x73
 8001a94:	f000 fb42 	bl	800211c <wave_gen>
 8001a98:	eeb0 7a40 	vmov.f32	s14, s0
 8001a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa4:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001abe:	eef0 1a47 	vmov.f32	s3, s14
 8001ac2:	eeb0 1a67 	vmov.f32	s2, s15
 8001ac6:	edd7 0a01 	vldr	s1, [r7, #4]
 8001aca:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ace:	f000 fa59 	bl	8001f84 <mix>
 8001ad2:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	ee07 3a90 	vmov	s15, r3
}
 8001adc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	43dc0000 	.word	0x43dc0000

08001aec <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8001aec:	b490      	push	{r4, r7}
 8001aee:	b092      	sub	sp, #72	; 0x48
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <overdrive_sqrt_pedal_init+0x54>)
 8001af8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001afc:	4613      	mov	r3, r2
 8001afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <overdrive_sqrt_pedal_init+0x58>)
 8001b08:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <overdrive_sqrt_pedal_init+0x5c>)
 8001b18:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <overdrive_sqrt_pedal_init+0x60>)
 8001b28:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b34:	bf00      	nop
 8001b36:	3748      	adds	r7, #72	; 0x48
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc90      	pop	{r4, r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	0800c718 	.word	0x0800c718
 8001b44:	0800c688 	.word	0x0800c688
 8001b48:	0800c728 	.word	0x0800c728
 8001b4c:	0800c738 	.word	0x0800c738

08001b50 <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b5a:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 8001b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	dd06      	ble.n	8001b78 <overdrive_sqrt_process+0x28>
        out = square_root(in);
 8001b6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b6e:	f000 faa4 	bl	80020ba <square_root>
 8001b72:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b76:	e00d      	b.n	8001b94 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 8001b78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7c:	eef1 7a67 	vneg.f32	s15, s15
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	f000 fa99 	bl	80020ba <square_root>
 8001b88:	eef0 7a40 	vmov.f32	s15, s0
 8001b8c:	eef1 7a67 	vneg.f32	s15, s15
 8001b90:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba2:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001bac:	eef0 0a67 	vmov.f32	s1, s15
 8001bb0:	ed97 0a03 	vldr	s0, [r7, #12]
 8001bb4:	f000 fa06 	bl	8001fc4 <hard_clip>
 8001bb8:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001bc8:	eef0 1a47 	vmov.f32	s3, s14
 8001bcc:	eeb0 1a67 	vmov.f32	s2, s15
 8001bd0:	edd7 0a01 	vldr	s1, [r7, #4]
 8001bd4:	ed97 0a03 	vldr	s0, [r7, #12]
 8001bd8:	f000 f9d4 	bl	8001f84 <mix>
 8001bdc:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	ee07 3a90 	vmov	s15, r3
}
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 8001bf0:	b490      	push	{r4, r7}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <amplifier_pedal_init+0x34>)
 8001bfc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001c00:	4613      	mov	r3, r2
 8001c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <amplifier_pedal_init+0x38>)
 8001c0c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001c10:	4613      	mov	r3, r2
 8001c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc90      	pop	{r4, r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	0800c748 	.word	0x0800c748
 8001c28:	0800c688 	.word	0x0800c688

08001c2c <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c36:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001c3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c46:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c50:	eef0 0a67 	vmov.f32	s1, s15
 8001c54:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c58:	f000 f9b4 	bl	8001fc4 <hard_clip>
 8001c5c:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	ee07 3a90 	vmov	s15, r3
}
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c8e:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	ee07 3a90 	vmov	s15, r3
}
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8001ca4:	b490      	push	{r4, r7}
 8001ca6:	b092      	sub	sp, #72	; 0x48
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <low_pass_filter_pedal_init+0x50>)
 8001cb0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <low_pass_filter_pedal_init+0x54>)
 8001cc0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <low_pass_filter_pedal_init+0x58>)
 8001cd0:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	33b0      	adds	r3, #176	; 0xb0
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
}
 8001cea:	bf00      	nop
 8001cec:	3748      	adds	r7, #72	; 0x48
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc90      	pop	{r4, r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	0800c758 	.word	0x0800c758
 8001cf8:	0800c6a8 	.word	0x0800c6a8
 8001cfc:	0800c6b8 	.word	0x0800c6b8

08001d00 <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d0a:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8001d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d28:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d38:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001d50:	eef0 1a47 	vmov.f32	s3, s14
 8001d54:	eeb0 1a67 	vmov.f32	s2, s15
 8001d58:	edd7 0a01 	vldr	s1, [r7, #4]
 8001d5c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d60:	f000 f910 	bl	8001f84 <mix>
 8001d64:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	ee07 3a90 	vmov	s15, r3
}
 8001d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 8001d78:	b490      	push	{r4, r7}
 8001d7a:	b09e      	sub	sp, #120	; 0x78
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <fuzz_pedal_init+0x8c>)
 8001d9c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001da0:	4613      	mov	r3, r2
 8001da2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <fuzz_pedal_init+0x90>)
 8001dac:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001db0:	4613      	mov	r3, r2
 8001db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <fuzz_pedal_init+0x94>)
 8001dbc:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <fuzz_pedal_init+0x98>)
 8001dcc:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <fuzz_pedal_init+0x9c>)
 8001ddc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001de0:	4613      	mov	r3, r2
 8001de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <fuzz_pedal_init+0xa0>)
 8001dec:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001df0:	4613      	mov	r3, r2
 8001df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001df8:	bf00      	nop
 8001dfa:	3778      	adds	r7, #120	; 0x78
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc90      	pop	{r4, r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	0800c678 	.word	0x0800c678
 8001e08:	0800c688 	.word	0x0800c688
 8001e0c:	0800c768 	.word	0x0800c768
 8001e10:	0800c778 	.word	0x0800c778
 8001e14:	0800c6a8 	.word	0x0800c6a8
 8001e18:	0800c6b8 	.word	0x0800c6b8

08001e1c <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e26:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e36:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e46:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e4e:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 8001e50:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <fuzz_process+0x130>)
 8001e52:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 8001e54:	edd7 0a06 	vldr	s1, [r7, #24]
 8001e58:	ed97 0a07 	vldr	s0, [r7, #28]
 8001e5c:	f000 f8b2 	bl	8001fc4 <hard_clip>
 8001e60:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 8001e64:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e68:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e6c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	d11e      	bne.n	8001eb4 <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	2073      	movs	r0, #115	; 0x73
 8001e8e:	f000 f945 	bl	800211c <wave_gen>
 8001e92:	eef0 7a40 	vmov.f32	s15, s0
 8001e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e9a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eae:	edc7 7a07 	vstr	s15, [r7, #28]
 8001eb2:	e02c      	b.n	8001f0e <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8001eb4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb8:	eef1 7a67 	vneg.f32	s15, s15
 8001ebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ec4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ec8:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed0:	d11d      	bne.n	8001f0e <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	2073      	movs	r0, #115	; 0x73
 8001eea:	f000 f917 	bl	800211c <wave_gen>
 8001eee:	eef0 7a40 	vmov.f32	s15, s0
 8001ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001efa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0a:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001f24:	eef0 1a47 	vmov.f32	s3, s14
 8001f28:	eeb0 1a67 	vmov.f32	s2, s15
 8001f2c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f30:	ed97 0a07 	vldr	s0, [r7, #28]
 8001f34:	f000 f826 	bl	8001f84 <mix>
 8001f38:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	ee07 3a90 	vmov	s15, r3
}
 8001f42:	eeb0 0a67 	vmov.f32	s0, s15
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	43dc0000 	.word	0x43dc0000

08001f50 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    return;
 8001f58:	bf00      	nop
}
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f6e:	6038      	str	r0, [r7, #0]
    return in;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	ee07 3a90 	vmov	s15, r3
}
 8001f76:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f92:	ed87 1a01 	vstr	s2, [r7, #4]
 8001f96:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 8001f9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa6:	edd7 6a02 	vldr	s13, [r7, #8]
 8001faa:	edd7 7a00 	vldr	s15, [r7]
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fce:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 8001fd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fd6:	edd7 7a00 	vldr	s15, [r7]
 8001fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe2:	dd02      	ble.n	8001fea <hard_clip+0x26>
        return clip_threshold;
 8001fe4:	edd7 7a00 	vldr	s15, [r7]
 8001fe8:	e015      	b.n	8002016 <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8001fea:	edd7 7a00 	vldr	s15, [r7]
 8001fee:	eef1 7a67 	vneg.f32	s15, s15
 8001ff2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffe:	d508      	bpl.n	8002012 <hard_clip+0x4e>
        return -clip_threshold - 1;
 8002000:	edd7 7a00 	vldr	s15, [r7]
 8002004:	eef1 7a67 	vneg.f32	s15, s15
 8002008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800200c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002010:	e001      	b.n	8002016 <hard_clip+0x52>
    }
    return in;
 8002012:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8002016:	eeb0 0a67 	vmov.f32	s0, s15
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	ed87 0a03 	vstr	s0, [r7, #12]
 800202e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002032:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 8002036:	ed97 7a03 	vldr	s14, [r7, #12]
 800203a:	edd7 7a02 	vldr	s15, [r7, #8]
 800203e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	dd10      	ble.n	800206a <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 8002048:	ed97 7a03 	vldr	s14, [r7, #12]
 800204c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002050:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002054:	ed97 7a01 	vldr	s14, [r7, #4]
 8002058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002064:	edc7 7a05 	vstr	s15, [r7, #20]
 8002068:	e01d      	b.n	80020a6 <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 800206a:	edd7 7a02 	vldr	s15, [r7, #8]
 800206e:	eef1 7a67 	vneg.f32	s15, s15
 8002072:	ed97 7a03 	vldr	s14, [r7, #12]
 8002076:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	d510      	bpl.n	80020a2 <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 8002080:	ed97 7a03 	vldr	s14, [r7, #12]
 8002084:	edd7 7a02 	vldr	s15, [r7, #8]
 8002088:	ee77 6a27 	vadd.f32	s13, s14, s15
 800208c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002094:	edd7 7a02 	vldr	s15, [r7, #8]
 8002098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209c:	edc7 7a05 	vstr	s15, [r7, #20]
 80020a0:	e001      	b.n	80020a6 <soft_clip+0x82>
    } else {
        out = in;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	617b      	str	r3, [r7, #20]
    }
    return out;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	ee07 3a90 	vmov	s15, r3
}
 80020ac:	eeb0 0a67 	vmov.f32	s0, s15
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <square_root>:

float square_root(float in) {
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 80020c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d0:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	72fb      	strb	r3, [r7, #11]
 80020d8:	e012      	b.n	8002100 <square_root+0x46>
        out = 0.5F * (out + (in / out));
 80020da:	edd7 6a01 	vldr	s13, [r7, #4]
 80020de:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f6:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	3301      	adds	r3, #1
 80020fe:	72fb      	strb	r3, [r7, #11]
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	2b07      	cmp	r3, #7
 8002104:	d9e9      	bls.n	80020da <square_root+0x20>
    }
    return out;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	ee07 3a90 	vmov	s15, r3
}
 800210c:	eeb0 0a67 	vmov.f32	s0, s15
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 800211c:	b580      	push	{r7, lr}
 800211e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8002122:	af00      	add	r7, sp, #0
 8002124:	4602      	mov	r2, r0
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	6019      	str	r1, [r3, #0]
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	ed83 0a00 	vstr	s0, [r3]
 8002132:	f107 030f 	add.w	r3, r7, #15
 8002136:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4a2c      	ldr	r2, [pc, #176]	; (80021f0 <wave_gen+0xd4>)
 800213e:	4618      	mov	r0, r3
 8002140:	4611      	mov	r1, r2
 8002142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002146:	461a      	mov	r2, r3
 8002148:	f00a f97a 	bl	800c440 <memcpy>
    float period_f = 48000.F / tone;
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80021f4 <wave_gen+0xd8>
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800215a:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 800215e:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8002162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002166:	ee17 3a90 	vmov	r3, s15
 800216a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	021a      	lsls	r2, r3, #8
 8002176:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 8002184:	f107 030f 	add.w	r3, r7, #15
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b73      	cmp	r3, #115	; 0x73
 800218c:	d118      	bne.n	80021c0 <wave_gen+0xa4>
        if (table_index <= 127) {
 800218e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002192:	2b7f      	cmp	r3, #127	; 0x7f
 8002194:	d808      	bhi.n	80021a8 <wave_gen+0x8c>
            return sin_table[table_index];
 8002196:	f107 0214 	add.w	r2, r7, #20
 800219a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	e01c      	b.n	80021e2 <wave_gen+0xc6>
        } else {
            return -sin_table[table_index - 128];
 80021a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80021ac:	3b80      	subs	r3, #128	; 0x80
 80021ae:	f107 0214 	add.w	r2, r7, #20
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	eef1 7a67 	vneg.f32	s15, s15
 80021be:	e010      	b.n	80021e2 <wave_gen+0xc6>
        }
    } else if (t == 'q') {
 80021c0:	f107 030f 	add.w	r3, r7, #15
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b71      	cmp	r3, #113	; 0x71
 80021c8:	d109      	bne.n	80021de <wave_gen+0xc2>
        if (table_index <= 127) {
 80021ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80021ce:	2b7f      	cmp	r3, #127	; 0x7f
 80021d0:	d802      	bhi.n	80021d8 <wave_gen+0xbc>
            return -1.F;
 80021d2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80021d6:	e004      	b.n	80021e2 <wave_gen+0xc6>
        } else {
            return 1.F;
 80021d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80021dc:	e001      	b.n	80021e2 <wave_gen+0xc6>
        }
    } else {
        return 0;
 80021de:	eddf 7a06 	vldr	s15, [pc, #24]	; 80021f8 <wave_gen+0xdc>
    }
}
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	0800c788 	.word	0x0800c788
 80021f4:	473b8000 	.word	0x473b8000
 80021f8:	00000000 	.word	0x00000000

080021fc <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b07      	cmp	r3, #7
 8002214:	f200 80dd 	bhi.w	80023d2 <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	21c8      	movs	r1, #200	; 0xc8
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	33c4      	adds	r3, #196	; 0xc4
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d113      	bne.n	800225e <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	22c8      	movs	r2, #200	; 0xc8
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	3304      	adds	r3, #4
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fcd3 	bl	8001bf0 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	21c8      	movs	r1, #200	; 0xc8
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	33c8      	adds	r3, #200	; 0xc8
 8002258:	4a60      	ldr	r2, [pc, #384]	; (80023dc <pedalboard_append+0x1e0>)
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e0b3      	b.n	80023c6 <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d113      	bne.n	800228c <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	22c8      	movs	r2, #200	; 0xc8
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fb52 	bl	800191c <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	21c8      	movs	r1, #200	; 0xc8
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	33c8      	adds	r3, #200	; 0xc8
 8002286:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <pedalboard_append+0x1e4>)
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e09c      	b.n	80023c6 <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d113      	bne.n	80022ba <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8002292:	7bbb      	ldrb	r3, [r7, #14]
 8002294:	22c8      	movs	r2, #200	; 0xc8
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fce5 	bl	8001c70 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 80022a6:	7bbb      	ldrb	r3, [r7, #14]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	21c8      	movs	r1, #200	; 0xc8
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	33c8      	adds	r3, #200	; 0xc8
 80022b4:	4a4b      	ldr	r2, [pc, #300]	; (80023e4 <pedalboard_append+0x1e8>)
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e085      	b.n	80023c6 <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d113      	bne.n	80022e8 <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 80022c0:	7bbb      	ldrb	r3, [r7, #14]
 80022c2:	22c8      	movs	r2, #200	; 0xc8
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	3304      	adds	r3, #4
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fd52 	bl	8001d78 <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 80022d4:	7bbb      	ldrb	r3, [r7, #14]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	21c8      	movs	r1, #200	; 0xc8
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	33c8      	adds	r3, #200	; 0xc8
 80022e2:	4a41      	ldr	r2, [pc, #260]	; (80023e8 <pedalboard_append+0x1ec>)
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e06e      	b.n	80023c6 <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d113      	bne.n	8002316 <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 80022ee:	7bbb      	ldrb	r3, [r7, #14]
 80022f0:	22c8      	movs	r2, #200	; 0xc8
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fcd1 	bl	8001ca4 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8002302:	7bbb      	ldrb	r3, [r7, #14]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	21c8      	movs	r1, #200	; 0xc8
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	33c8      	adds	r3, #200	; 0xc8
 8002310:	4a36      	ldr	r2, [pc, #216]	; (80023ec <pedalboard_append+0x1f0>)
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e057      	b.n	80023c6 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	2b06      	cmp	r3, #6
 800231a:	d113      	bne.n	8002344 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 800231c:	7bbb      	ldrb	r3, [r7, #14]
 800231e:	22c8      	movs	r2, #200	; 0xc8
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	3304      	adds	r3, #4
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fa6e 	bl	800180c <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8002330:	7bbb      	ldrb	r3, [r7, #14]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	21c8      	movs	r1, #200	; 0xc8
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	33c8      	adds	r3, #200	; 0xc8
 800233e:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <pedalboard_append+0x1f4>)
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e040      	b.n	80023c6 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	2b07      	cmp	r3, #7
 8002348:	d113      	bne.n	8002372 <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 800234a:	7bbb      	ldrb	r3, [r7, #14]
 800234c:	22c8      	movs	r2, #200	; 0xc8
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fbc7 	bl	8001aec <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 800235e:	7bbb      	ldrb	r3, [r7, #14]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	21c8      	movs	r1, #200	; 0xc8
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	33c8      	adds	r3, #200	; 0xc8
 800236c:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <pedalboard_append+0x1f8>)
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e029      	b.n	80023c6 <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	2b08      	cmp	r3, #8
 8002376:	d113      	bne.n	80023a0 <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8002378:	7bbb      	ldrb	r3, [r7, #14]
 800237a:	22c8      	movs	r2, #200	; 0xc8
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fb3a 	bl	8001a00 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	21c8      	movs	r1, #200	; 0xc8
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	33c8      	adds	r3, #200	; 0xc8
 800239a:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <pedalboard_append+0x1fc>)
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e012      	b.n	80023c6 <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	22c8      	movs	r2, #200	; 0xc8
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fdce 	bl	8001f50 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	21c8      	movs	r1, #200	; 0xc8
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	33c8      	adds	r3, #200	; 0xc8
 80023c2:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <pedalboard_append+0x200>)
 80023c4:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	701a      	strb	r2, [r3, #0]
    }
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	08001c2d 	.word	0x08001c2d
 80023e0:	08001969 	.word	0x08001969
 80023e4:	08001c85 	.word	0x08001c85
 80023e8:	08001e1d 	.word	0x08001e1d
 80023ec:	08001d01 	.word	0x08001d01
 80023f0:	08001895 	.word	0x08001895
 80023f4:	08001b51 	.word	0x08001b51
 80023f8:	08001a69 	.word	0x08001a69
 80023fc:	08001f65 	.word	0x08001f65

08002400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_MspInit+0x4c>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_MspInit+0x4c>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_I2C_MspInit+0x84>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12c      	bne.n	80024cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_I2C_MspInit+0x88>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_I2C_MspInit+0x88>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_I2C_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800248e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002494:	2312      	movs	r3, #18
 8002496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024a0:	2304      	movs	r3, #4
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4619      	mov	r1, r3
 80024aa:	480c      	ldr	r0, [pc, #48]	; (80024dc <HAL_I2C_MspInit+0x8c>)
 80024ac:	f000 ff86 	bl	80033bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_I2C_MspInit+0x88>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_I2C_MspInit+0x88>)
 80024ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024be:	6413      	str	r3, [r2, #64]	; 0x40
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_I2C_MspInit+0x88>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024cc:	bf00      	nop
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40005400 	.word	0x40005400
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400

080024e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08e      	sub	sp, #56	; 0x38
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a8e      	ldr	r2, [pc, #568]	; (8002738 <HAL_I2S_MspInit+0x258>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	f040 808c 	bne.w	800261c <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	4b8c      	ldr	r3, [pc, #560]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4a8b      	ldr	r2, [pc, #556]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800250e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002512:	6413      	str	r3, [r2, #64]	; 0x40
 8002514:	4b89      	ldr	r3, [pc, #548]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251c:	623b      	str	r3, [r7, #32]
 800251e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	4b85      	ldr	r3, [pc, #532]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	4a84      	ldr	r2, [pc, #528]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800252a:	f043 0302 	orr.w	r3, r3, #2
 800252e:	6313      	str	r3, [r2, #48]	; 0x30
 8002530:	4b82      	ldr	r3, [pc, #520]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4a7d      	ldr	r2, [pc, #500]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6313      	str	r3, [r2, #48]	; 0x30
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002558:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002566:	2301      	movs	r3, #1
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800256a:	2305      	movs	r3, #5
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	4619      	mov	r1, r3
 8002574:	4872      	ldr	r0, [pc, #456]	; (8002740 <HAL_I2S_MspInit+0x260>)
 8002576:	f000 ff21 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800257a:	2340      	movs	r3, #64	; 0x40
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002586:	2301      	movs	r3, #1
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800258a:	2305      	movs	r3, #5
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002592:	4619      	mov	r1, r3
 8002594:	486b      	ldr	r0, [pc, #428]	; (8002744 <HAL_I2S_MspInit+0x264>)
 8002596:	f000 ff11 	bl	80033bc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800259a:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <HAL_I2S_MspInit+0x268>)
 800259c:	4a6b      	ldr	r2, [pc, #428]	; (800274c <HAL_I2S_MspInit+0x26c>)
 800259e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80025a0:	4b69      	ldr	r3, [pc, #420]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025a6:	4b68      	ldr	r3, [pc, #416]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ac:	4b66      	ldr	r3, [pc, #408]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025b2:	4b65      	ldr	r3, [pc, #404]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025c2:	4b61      	ldr	r3, [pc, #388]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025d0:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025d8:	2204      	movs	r2, #4
 80025da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80025dc:	4b5a      	ldr	r3, [pc, #360]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025de:	2200      	movs	r2, #0
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80025e2:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025e8:	4b57      	ldr	r3, [pc, #348]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80025ee:	4856      	ldr	r0, [pc, #344]	; (8002748 <HAL_I2S_MspInit+0x268>)
 80025f0:	f000 fb74 	bl	8002cdc <HAL_DMA_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2S_MspInit+0x11e>
    {
      Error_Handler();
 80025fa:	f7fe fedd 	bl	80013b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a51      	ldr	r2, [pc, #324]	; (8002748 <HAL_I2S_MspInit+0x268>)
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c
 8002604:	4a50      	ldr	r2, [pc, #320]	; (8002748 <HAL_I2S_MspInit+0x268>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2024      	movs	r0, #36	; 0x24
 8002610:	f000 fb2d 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002614:	2024      	movs	r0, #36	; 0x24
 8002616:	f000 fb46 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800261a:	e088      	b.n	800272e <HAL_I2S_MspInit+0x24e>
  else if(hi2s->Instance==SPI3)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_I2S_MspInit+0x270>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f040 8083 	bne.w	800272e <HAL_I2S_MspInit+0x24e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a42      	ldr	r2, [pc, #264]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a3b      	ldr	r2, [pc, #236]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_I2S_MspInit+0x25c>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6313      	str	r3, [r2, #48]	; 0x30
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_I2S_MspInit+0x25c>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800267c:	2310      	movs	r3, #16
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800268c:	2306      	movs	r3, #6
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	4619      	mov	r1, r3
 8002696:	482f      	ldr	r0, [pc, #188]	; (8002754 <HAL_I2S_MspInit+0x274>)
 8002698:	f000 fe90 	bl	80033bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800269c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026ae:	2306      	movs	r3, #6
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b6:	4619      	mov	r1, r3
 80026b8:	4822      	ldr	r0, [pc, #136]	; (8002744 <HAL_I2S_MspInit+0x264>)
 80026ba:	f000 fe7f 	bl	80033bc <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026c0:	4a26      	ldr	r2, [pc, #152]	; (800275c <HAL_I2S_MspInit+0x27c>)
 80026c2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026cc:	2240      	movs	r2, #64	; 0x40
 80026ce:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026dc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026e6:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ec:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026f6:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_I2S_MspInit+0x278>)
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002702:	4815      	ldr	r0, [pc, #84]	; (8002758 <HAL_I2S_MspInit+0x278>)
 8002704:	f000 faea 	bl	8002cdc <HAL_DMA_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2S_MspInit+0x232>
      Error_Handler();
 800270e:	f7fe fe53 	bl	80013b8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a10      	ldr	r2, [pc, #64]	; (8002758 <HAL_I2S_MspInit+0x278>)
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
 8002718:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_I2S_MspInit+0x278>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2100      	movs	r1, #0
 8002722:	2033      	movs	r0, #51	; 0x33
 8002724:	f000 faa3 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002728:	2033      	movs	r0, #51	; 0x33
 800272a:	f000 fabc 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3738      	adds	r7, #56	; 0x38
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40003800 	.word	0x40003800
 800273c:	40023800 	.word	0x40023800
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800
 8002748:	2000041c 	.word	0x2000041c
 800274c:	40026058 	.word	0x40026058
 8002750:	40003c00 	.word	0x40003c00
 8002754:	40020000 	.word	0x40020000
 8002758:	200016fc 	.word	0x200016fc
 800275c:	40026088 	.word	0x40026088

08002760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_SPI_MspInit+0x84>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d12b      	bne.n	80027da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_SPI_MspInit+0x88>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_SPI_MspInit+0x88>)
 800278c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_SPI_MspInit+0x88>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_SPI_MspInit+0x88>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <HAL_SPI_MspInit+0x88>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_SPI_MspInit+0x88>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80027ba:	23a0      	movs	r3, #160	; 0xa0
 80027bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027ca:	2305      	movs	r3, #5
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <HAL_SPI_MspInit+0x8c>)
 80027d6:	f000 fdf1 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40013000 	.word	0x40013000
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000

080027f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <NMI_Handler+0x4>

080027f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027fa:	e7fe      	b.n	80027fa <HardFault_Handler+0x4>

080027fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002800:	e7fe      	b.n	8002800 <MemManage_Handler+0x4>

08002802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002806:	e7fe      	b.n	8002806 <BusFault_Handler+0x4>

08002808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280c:	e7fe      	b.n	800280c <UsageFault_Handler+0x4>

0800280e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283c:	f000 f8f8 	bl	8002a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <DMA1_Stream3_IRQHandler+0x10>)
 800284a:	f000 fb4d 	bl	8002ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000041c 	.word	0x2000041c

08002858 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <DMA1_Stream5_IRQHandler+0x10>)
 800285e:	f000 fb43 	bl	8002ee8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200016fc 	.word	0x200016fc

0800286c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <SPI2_IRQHandler+0x10>)
 8002872:	f003 fe73 	bl	800655c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20002828 	.word	0x20002828

08002880 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <SPI3_IRQHandler+0x10>)
 8002886:	f003 fe69 	bl	800655c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20002870 	.word	0x20002870

08002894 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <OTG_FS_IRQHandler+0x10>)
 800289a:	f001 f9c7 	bl	8003c2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20004d00 	.word	0x20004d00

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f009 fd78 	bl	800c3cc <__errno>
 80028dc:	4603      	mov	r3, r0
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20020000 	.word	0x20020000
 8002908:	00000400 	.word	0x00000400
 800290c:	200003a8 	.word	0x200003a8
 8002910:	20005018 	.word	0x20005018

08002914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <SystemInit+0x20>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <SystemInit+0x20>)
 8002920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800293c:	480d      	ldr	r0, [pc, #52]	; (8002974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800293e:	490e      	ldr	r1, [pc, #56]	; (8002978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002940:	4a0e      	ldr	r2, [pc, #56]	; (800297c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002954:	4c0b      	ldr	r4, [pc, #44]	; (8002984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002962:	f7ff ffd7 	bl	8002914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002966:	f009 fd37 	bl	800c3d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800296a:	f7fe f9f3 	bl	8000d54 <main>
  bx  lr    
 800296e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002978:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 800297c:	0800c9d0 	.word	0x0800c9d0
  ldr r2, =_sbss
 8002980:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8002984:	20005014 	.word	0x20005014

08002988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002988:	e7fe      	b.n	8002988 <ADC_IRQHandler>
	...

0800298c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <HAL_Init+0x40>)
 8002996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_Init+0x40>)
 80029a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_Init+0x40>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b4:	2003      	movs	r0, #3
 80029b6:	f000 f94f 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ba:	200f      	movs	r0, #15
 80029bc:	f000 f808 	bl	80029d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029c0:	f7ff fd1e 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023c00 	.word	0x40023c00

080029d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_InitTick+0x54>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_InitTick+0x58>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	4619      	mov	r1, r3
 80029e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f967 	bl	8002cc2 <HAL_SYSTICK_Config>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00e      	b.n	8002a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d80a      	bhi.n	8002a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a04:	2200      	movs	r2, #0
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a0c:	f000 f92f 	bl	8002c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a10:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <HAL_InitTick+0x5c>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200002a4 	.word	0x200002a4
 8002a28:	200002ac 	.word	0x200002ac
 8002a2c:	200002a8 	.word	0x200002a8

08002a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_IncTick+0x20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_IncTick+0x24>)
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200002ac 	.word	0x200002ac
 8002a54:	200028b8 	.word	0x200028b8

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	200028b8 	.word	0x200028b8

08002a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff ffee 	bl	8002a58 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a88:	d005      	beq.n	8002a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_Delay+0x44>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a96:	bf00      	nop
 8002a98:	f7ff ffde 	bl	8002a58 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d8f7      	bhi.n	8002a98 <HAL_Delay+0x28>
  {
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200002ac 	.word	0x200002ac

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c38:	f7ff ff8e 	bl	8002b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ff29 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c80:	f7ff ff3e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff ff8e 	bl	8002bac <NVIC_EncodePriority>
 8002c90:	4602      	mov	r2, r0
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff5d 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c9e:	bf00      	nop
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff31 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ffa2 	bl	8002c14 <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff feb6 	bl	8002a58 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e099      	b.n	8002e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d18:	e00f      	b.n	8002d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1a:	f7ff fe9d 	bl	8002a58 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d908      	bls.n	8002d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2203      	movs	r2, #3
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e078      	b.n	8002e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e8      	bne.n	8002d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_DMA_Init+0x158>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d107      	bne.n	8002da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0307 	bic.w	r3, r3, #7
 8002dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d117      	bne.n	8002dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fa6f 	bl	80032c4 <DMA_CheckFifoParam>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e016      	b.n	8002e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa26 	bl	8003258 <DMA_CalcBaseAndBitshift>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	223f      	movs	r2, #63	; 0x3f
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	f010803f 	.word	0xf010803f

08002e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_Start_IT+0x26>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e040      	b.n	8002ee0 <HAL_DMA_Start_IT+0xa8>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d12f      	bne.n	8002ed2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f9b8 	bl	80031fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	223f      	movs	r2, #63	; 0x3f
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0216 	orr.w	r2, r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e005      	b.n	8002ede <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ef4:	4b92      	ldr	r3, [pc, #584]	; (8003140 <HAL_DMA_IRQHandler+0x258>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a92      	ldr	r2, [pc, #584]	; (8003144 <HAL_DMA_IRQHandler+0x25c>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0a9b      	lsrs	r3, r3, #10
 8002f00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	2208      	movs	r2, #8
 8002f14:	409a      	lsls	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01a      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0204 	bic.w	r2, r2, #4
 8002f3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	2208      	movs	r2, #8
 8002f42:	409a      	lsls	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	f043 0201 	orr.w	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	2201      	movs	r2, #1
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d012      	beq.n	8002f8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2201      	movs	r2, #1
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	f043 0202 	orr.w	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	2204      	movs	r2, #4
 8002f90:	409a      	lsls	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	2204      	movs	r2, #4
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f043 0204 	orr.w	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d043      	beq.n	8003058 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03c      	beq.n	8003058 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	2210      	movs	r2, #16
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d018      	beq.n	800302a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d108      	bne.n	8003018 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d024      	beq.n	8003058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
 8003016:	e01f      	b.n	8003058 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01b      	beq.n	8003058 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
 8003028:	e016      	b.n	8003058 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0208 	bic.w	r2, r2, #8
 8003046:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2220      	movs	r2, #32
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 808e 	beq.w	8003186 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8086 	beq.w	8003186 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307e:	2220      	movs	r2, #32
 8003080:	409a      	lsls	r2, r3
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b05      	cmp	r3, #5
 8003090:	d136      	bne.n	8003100 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0216 	bic.w	r2, r2, #22
 80030a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <HAL_DMA_IRQHandler+0x1da>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0208 	bic.w	r2, r2, #8
 80030d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	223f      	movs	r2, #63	; 0x3f
 80030d8:	409a      	lsls	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d07d      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
        }
        return;
 80030fe:	e078      	b.n	80031f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01c      	beq.n	8003148 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	2b00      	cmp	r3, #0
 8003122:	d030      	beq.n	8003186 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
 800312c:	e02b      	b.n	8003186 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d027      	beq.n	8003186 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
 800313e:	e022      	b.n	8003186 <HAL_DMA_IRQHandler+0x29e>
 8003140:	200002a4 	.word	0x200002a4
 8003144:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0210 	bic.w	r2, r2, #16
 8003164:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	2b00      	cmp	r3, #0
 800318c:	d032      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d022      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2205      	movs	r2, #5
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3301      	adds	r3, #1
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d307      	bcc.n	80031ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f2      	bne.n	80031b2 <HAL_DMA_IRQHandler+0x2ca>
 80031cc:	e000      	b.n	80031d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031ce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031f2:	bf00      	nop
    }
  }
}
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop

080031fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003218:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	d108      	bne.n	800323c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800323a:	e007      	b.n	800324c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	3b10      	subs	r3, #16
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <DMA_CalcBaseAndBitshift+0x64>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003272:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d909      	bls.n	800329a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	1d1a      	adds	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	659a      	str	r2, [r3, #88]	; 0x58
 8003298:	e007      	b.n	80032aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	aaaaaaab 	.word	0xaaaaaaab
 80032c0:	0800c9a4 	.word	0x0800c9a4

080032c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d11f      	bne.n	800331e <DMA_CheckFifoParam+0x5a>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d856      	bhi.n	8003392 <DMA_CheckFifoParam+0xce>
 80032e4:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <DMA_CheckFifoParam+0x28>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	080032fd 	.word	0x080032fd
 80032f0:	0800330f 	.word	0x0800330f
 80032f4:	080032fd 	.word	0x080032fd
 80032f8:	08003393 	.word	0x08003393
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d046      	beq.n	8003396 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330c:	e043      	b.n	8003396 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003316:	d140      	bne.n	800339a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331c:	e03d      	b.n	800339a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003326:	d121      	bne.n	800336c <DMA_CheckFifoParam+0xa8>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b03      	cmp	r3, #3
 800332c:	d837      	bhi.n	800339e <DMA_CheckFifoParam+0xda>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <DMA_CheckFifoParam+0x70>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	08003345 	.word	0x08003345
 8003338:	0800334b 	.word	0x0800334b
 800333c:	08003345 	.word	0x08003345
 8003340:	0800335d 	.word	0x0800335d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      break;
 8003348:	e030      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d025      	beq.n	80033a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800335a:	e022      	b.n	80033a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003364:	d11f      	bne.n	80033a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800336a:	e01c      	b.n	80033a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d903      	bls.n	800337a <DMA_CheckFifoParam+0xb6>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d003      	beq.n	8003380 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003378:	e018      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
      break;
 800337e:	e015      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      break;
 8003390:	e00b      	b.n	80033aa <DMA_CheckFifoParam+0xe6>
      break;
 8003392:	bf00      	nop
 8003394:	e00a      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
      break;
 8003396:	bf00      	nop
 8003398:	e008      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
      break;
 800339a:	bf00      	nop
 800339c:	e006      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
      break;
 800339e:	bf00      	nop
 80033a0:	e004      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
      break;
 80033a2:	bf00      	nop
 80033a4:	e002      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
      break;   
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <DMA_CheckFifoParam+0xe8>
      break;
 80033aa:	bf00      	nop
    }
  } 
  
  return status; 
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	e16b      	b.n	80036b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d8:	2201      	movs	r2, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f040 815a 	bne.w	80036aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d005      	beq.n	800340e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800340a:	2b02      	cmp	r3, #2
 800340c:	d130      	bne.n	8003470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 0201 	and.w	r2, r3, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b03      	cmp	r3, #3
 800347a:	d017      	beq.n	80034ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d123      	bne.n	8003500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	08da      	lsrs	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3208      	adds	r2, #8
 80034c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	220f      	movs	r2, #15
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	08da      	lsrs	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3208      	adds	r2, #8
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0203 	and.w	r2, r3, #3
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80b4 	beq.w	80036aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	4b60      	ldr	r3, [pc, #384]	; (80036c8 <HAL_GPIO_Init+0x30c>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4a5f      	ldr	r2, [pc, #380]	; (80036c8 <HAL_GPIO_Init+0x30c>)
 800354c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003550:	6453      	str	r3, [r2, #68]	; 0x44
 8003552:	4b5d      	ldr	r3, [pc, #372]	; (80036c8 <HAL_GPIO_Init+0x30c>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800355e:	4a5b      	ldr	r2, [pc, #364]	; (80036cc <HAL_GPIO_Init+0x310>)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	3302      	adds	r3, #2
 8003566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	220f      	movs	r2, #15
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_GPIO_Init+0x314>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d02b      	beq.n	80035e2 <HAL_GPIO_Init+0x226>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a51      	ldr	r2, [pc, #324]	; (80036d4 <HAL_GPIO_Init+0x318>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d025      	beq.n	80035de <HAL_GPIO_Init+0x222>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a50      	ldr	r2, [pc, #320]	; (80036d8 <HAL_GPIO_Init+0x31c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01f      	beq.n	80035da <HAL_GPIO_Init+0x21e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4f      	ldr	r2, [pc, #316]	; (80036dc <HAL_GPIO_Init+0x320>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d019      	beq.n	80035d6 <HAL_GPIO_Init+0x21a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4e      	ldr	r2, [pc, #312]	; (80036e0 <HAL_GPIO_Init+0x324>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_GPIO_Init+0x216>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4d      	ldr	r2, [pc, #308]	; (80036e4 <HAL_GPIO_Init+0x328>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00d      	beq.n	80035ce <HAL_GPIO_Init+0x212>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_GPIO_Init+0x32c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d007      	beq.n	80035ca <HAL_GPIO_Init+0x20e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	; (80036ec <HAL_GPIO_Init+0x330>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_GPIO_Init+0x20a>
 80035c2:	2307      	movs	r3, #7
 80035c4:	e00e      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035c6:	2308      	movs	r3, #8
 80035c8:	e00c      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035ca:	2306      	movs	r3, #6
 80035cc:	e00a      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035ce:	2305      	movs	r3, #5
 80035d0:	e008      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035d2:	2304      	movs	r3, #4
 80035d4:	e006      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e004      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035da:	2302      	movs	r3, #2
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_GPIO_Init+0x228>
 80035e2:	2300      	movs	r3, #0
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	f002 0203 	and.w	r2, r2, #3
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4093      	lsls	r3, r2
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f4:	4935      	ldr	r1, [pc, #212]	; (80036cc <HAL_GPIO_Init+0x310>)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3302      	adds	r3, #2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003602:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003626:	4a32      	ldr	r2, [pc, #200]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_GPIO_Init+0x334>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_GPIO_Init+0x334>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_GPIO_Init+0x334>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a4:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <HAL_GPIO_Init+0x334>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	f67f ae90 	bls.w	80033d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3724      	adds	r7, #36	; 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40021400 	.word	0x40021400
 80036e8:	40021800 	.word	0x40021800
 80036ec:	40021c00 	.word	0x40021c00
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e001      	b.n	8003716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003758:	b08f      	sub	sp, #60	; 0x3c
 800375a:	af0a      	add	r7, sp, #40	; 0x28
 800375c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e054      	b.n	8003812 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f008 fb48 	bl	800be18 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2203      	movs	r2, #3
 800378c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f004 fb30 	bl	8007e0c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	687e      	ldr	r6, [r7, #4]
 80037b4:	466d      	mov	r5, sp
 80037b6:	f106 0410 	add.w	r4, r6, #16
 80037ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80037ca:	1d33      	adds	r3, r6, #4
 80037cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f004 faaa 	bl	8007d28 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2101      	movs	r1, #1
 80037da:	4618      	mov	r0, r3
 80037dc:	f004 fb27 	bl	8007e2e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	687e      	ldr	r6, [r7, #4]
 80037e8:	466d      	mov	r5, sp
 80037ea:	f106 0410 	add.w	r4, r6, #16
 80037ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80037fe:	1d33      	adds	r3, r6, #4
 8003800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003802:	6838      	ldr	r0, [r7, #0]
 8003804:	f004 fc8e 	bl	8008124 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800381a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800381a:	b590      	push	{r4, r7, lr}
 800381c:	b089      	sub	sp, #36	; 0x24
 800381e:	af04      	add	r7, sp, #16
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	4608      	mov	r0, r1
 8003824:	4611      	mov	r1, r2
 8003826:	461a      	mov	r2, r3
 8003828:	4603      	mov	r3, r0
 800382a:	70fb      	strb	r3, [r7, #3]
 800382c:	460b      	mov	r3, r1
 800382e:	70bb      	strb	r3, [r7, #2]
 8003830:	4613      	mov	r3, r2
 8003832:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_HCD_HC_Init+0x28>
 800383e:	2302      	movs	r3, #2
 8003840:	e076      	b.n	8003930 <HAL_HCD_HC_Init+0x116>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	333d      	adds	r3, #61	; 0x3d
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3338      	adds	r3, #56	; 0x38
 800386a:	787a      	ldrb	r2, [r7, #1]
 800386c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3340      	adds	r3, #64	; 0x40
 800387c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800387e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	212c      	movs	r1, #44	; 0x2c
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	4413      	add	r3, r2
 800388c:	3339      	adds	r3, #57	; 0x39
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	333f      	adds	r3, #63	; 0x3f
 80038a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80038a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	78ba      	ldrb	r2, [r7, #2]
 80038aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ae:	b2d0      	uxtb	r0, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	333a      	adds	r3, #58	; 0x3a
 80038bc:	4602      	mov	r2, r0
 80038be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80038c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	da09      	bge.n	80038dc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	333b      	adds	r3, #59	; 0x3b
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e008      	b.n	80038ee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	212c      	movs	r1, #44	; 0x2c
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	333b      	adds	r3, #59	; 0x3b
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	333c      	adds	r3, #60	; 0x3c
 80038fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003900:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	787c      	ldrb	r4, [r7, #1]
 8003908:	78ba      	ldrb	r2, [r7, #2]
 800390a:	78f9      	ldrb	r1, [r7, #3]
 800390c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800390e:	9302      	str	r3, [sp, #8]
 8003910:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	4623      	mov	r3, r4
 800391e:	f004 fd7b 	bl	8008418 <USB_HC_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}

08003938 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_HCD_HC_Halt+0x1e>
 8003952:	2302      	movs	r3, #2
 8003954:	e00f      	b.n	8003976 <HAL_HCD_HC_Halt+0x3e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f004 ffb7 	bl	80088da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	70fb      	strb	r3, [r7, #3]
 8003992:	460b      	mov	r3, r1
 8003994:	70bb      	strb	r3, [r7, #2]
 8003996:	4613      	mov	r3, r2
 8003998:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	333b      	adds	r3, #59	; 0x3b
 80039a8:	78ba      	ldrb	r2, [r7, #2]
 80039aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	333f      	adds	r3, #63	; 0x3f
 80039ba:	787a      	ldrb	r2, [r7, #1]
 80039bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80039be:	7c3b      	ldrb	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d112      	bne.n	80039ea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3342      	adds	r3, #66	; 0x42
 80039d2:	2203      	movs	r2, #3
 80039d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	333d      	adds	r3, #61	; 0x3d
 80039e4:	7f3a      	ldrb	r2, [r7, #28]
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e008      	b.n	80039fc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	3342      	adds	r3, #66	; 0x42
 80039f8:	2202      	movs	r2, #2
 80039fa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	f200 80c6 	bhi.w	8003b90 <HAL_HCD_HC_SubmitRequest+0x210>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003b7d 	.word	0x08003b7d
 8003a14:	08003a81 	.word	0x08003a81
 8003a18:	08003aff 	.word	0x08003aff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003a1c:	7c3b      	ldrb	r3, [r7, #16]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	f040 80b8 	bne.w	8003b94 <HAL_HCD_HC_SubmitRequest+0x214>
 8003a24:	78bb      	ldrb	r3, [r7, #2]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 80b4 	bne.w	8003b94 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003a2c:	8b3b      	ldrh	r3, [r7, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	212c      	movs	r1, #44	; 0x2c
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3355      	adds	r3, #85	; 0x55
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	212c      	movs	r1, #44	; 0x2c
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	3355      	adds	r3, #85	; 0x55
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d109      	bne.n	8003a6c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	3342      	adds	r3, #66	; 0x42
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003a6a:	e093      	b.n	8003b94 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3342      	adds	r3, #66	; 0x42
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]
      break;
 8003a7e:	e089      	b.n	8003b94 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003a80:	78bb      	ldrb	r3, [r7, #2]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11d      	bne.n	8003ac2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3355      	adds	r3, #85	; 0x55
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3342      	adds	r3, #66	; 0x42
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003aac:	e073      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	212c      	movs	r1, #44	; 0x2c
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	3342      	adds	r3, #66	; 0x42
 8003abc:	2202      	movs	r2, #2
 8003abe:	701a      	strb	r2, [r3, #0]
      break;
 8003ac0:	e069      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	212c      	movs	r1, #44	; 0x2c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3354      	adds	r3, #84	; 0x54
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3342      	adds	r3, #66	; 0x42
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
      break;
 8003ae8:	e055      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3342      	adds	r3, #66	; 0x42
 8003af8:	2202      	movs	r2, #2
 8003afa:	701a      	strb	r2, [r3, #0]
      break;
 8003afc:	e04b      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003afe:	78bb      	ldrb	r3, [r7, #2]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11d      	bne.n	8003b40 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3355      	adds	r3, #85	; 0x55
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3342      	adds	r3, #66	; 0x42
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b2a:	e034      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3342      	adds	r3, #66	; 0x42
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	701a      	strb	r2, [r3, #0]
      break;
 8003b3e:	e02a      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3354      	adds	r3, #84	; 0x54
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3342      	adds	r3, #66	; 0x42
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
      break;
 8003b66:	e016      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3342      	adds	r3, #66	; 0x42
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
      break;
 8003b7a:	e00c      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3342      	adds	r3, #66	; 0x42
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003b90:	bf00      	nop
 8003b92:	e000      	b.n	8003b96 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003b94:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3344      	adds	r3, #68	; 0x44
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	8b3a      	ldrh	r2, [r7, #24]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	202c      	movs	r0, #44	; 0x2c
 8003bb0:	fb00 f303 	mul.w	r3, r0, r3
 8003bb4:	440b      	add	r3, r1
 8003bb6:	334c      	adds	r3, #76	; 0x4c
 8003bb8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3360      	adds	r3, #96	; 0x60
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3350      	adds	r3, #80	; 0x50
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	212c      	movs	r1, #44	; 0x2c
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	3339      	adds	r3, #57	; 0x39
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3361      	adds	r3, #97	; 0x61
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	222c      	movs	r2, #44	; 0x2c
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	3338      	adds	r3, #56	; 0x38
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	18d1      	adds	r1, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f004 fd0a 	bl	8008634 <USB_HC_StartXfer>
 8003c20:	4603      	mov	r3, r0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop

08003c2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 fa2d 	bl	80080a2 <USB_GetMode>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	f040 80f6 	bne.w	8003e3c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 fa11 	bl	800807c <USB_ReadInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80ec 	beq.w	8003e3a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f004 fa08 	bl	800807c <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c76:	d104      	bne.n	8003c82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f004 f9f8 	bl	800807c <USB_ReadInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c96:	d104      	bne.n	8003ca2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ca0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f004 f9e8 	bl	800807c <USB_ReadInterrupts>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cb6:	d104      	bne.n	8003cc2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 f9d8 	bl	800807c <USB_ReadInterrupts>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d103      	bne.n	8003cde <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 f9ca 	bl	800807c <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf2:	d11c      	bne.n	8003d2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003cfc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003d0e:	2110      	movs	r1, #16
 8003d10:	6938      	ldr	r0, [r7, #16]
 8003d12:	f004 f8d9 	bl	8007ec8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003d16:	6938      	ldr	r0, [r7, #16]
 8003d18:	f004 f8fa 	bl	8007f10 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2101      	movs	r1, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f004 fab2 	bl	800828c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f008 f8f3 	bl	800bf14 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f004 f9a2 	bl	800807c <USB_ReadInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d42:	d102      	bne.n	8003d4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f001 fa03 	bl	8005150 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 f994 	bl	800807c <USB_ReadInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d106      	bne.n	8003d6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f008 f8bc 	bl	800bedc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f004 f983 	bl	800807c <USB_ReadInterrupts>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d101      	bne.n	8003d84 <HAL_HCD_IRQHandler+0x158>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_HCD_IRQHandler+0x15a>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d012      	beq.n	8003db0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0210 	bic.w	r2, r2, #16
 8003d98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f001 f906 	bl	8004fac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0210 	orr.w	r2, r2, #16
 8003dae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f004 f961 	bl	800807c <USB_ReadInterrupts>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dc4:	d13a      	bne.n	8003e3c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 fd74 	bl	80088b8 <USB_HC_ReadInterrupt>
 8003dd0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e025      	b.n	8003e24 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d018      	beq.n	8003e1e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e02:	d106      	bne.n	8003e12 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8ab 	bl	8003f66 <HCD_HC_IN_IRQHandler>
 8003e10:	e005      	b.n	8003e1e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fcc6 	bl	80047aa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	3301      	adds	r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d3d4      	bcc.n	8003dd8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e36:	615a      	str	r2, [r3, #20]
 8003e38:	e000      	b.n	8003e3c <HAL_HCD_IRQHandler+0x210>
      return;
 8003e3a:	bf00      	nop
    }
  }
}
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_HCD_Start+0x16>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e013      	b.n	8003e80 <HAL_HCD_Start+0x3e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 fa74 	bl	8008354 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 ffba 	bl	8007dea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_HCD_Stop+0x16>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e00d      	b.n	8003eba <HAL_HCD_Stop+0x32>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f004 fe6e 	bl	8008b8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 fa16 	bl	8008300 <USB_ResetPort>
 8003ed4:	4603      	mov	r3, r0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3360      	adds	r3, #96	; 0x60
 8003ef8:	781b      	ldrb	r3, [r3, #0]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	212c      	movs	r1, #44	; 0x2c
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3350      	adds	r3, #80	; 0x50
 8003f20:	681b      	ldr	r3, [r3, #0]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 fa5a 	bl	80083f4 <USB_GetCurrentFrame>
 8003f40:	4603      	mov	r3, r0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 fa35 	bl	80083c6 <USB_GetHostSpeed>
 8003f5c:	4603      	mov	r3, r0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d119      	bne.n	8003fca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	0151      	lsls	r1, r2, #5
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	440a      	add	r2, r1
 8003fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	60d3      	str	r3, [r2, #12]
 8003fc8:	e101      	b.n	80041ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe0:	d12b      	bne.n	800403a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ff4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	212c      	movs	r1, #44	; 0x2c
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	4413      	add	r3, r2
 8004002:	3361      	adds	r3, #97	; 0x61
 8004004:	2207      	movs	r2, #7
 8004006:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	440a      	add	r2, r1
 800401e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f004 fc51 	bl	80088da <USB_HC_Halt>
 8004038:	e0c9      	b.n	80041ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d109      	bne.n	8004064 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4413      	add	r3, r2
 8004058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405c:	461a      	mov	r2, r3
 800405e:	2320      	movs	r3, #32
 8004060:	6093      	str	r3, [r2, #8]
 8004062:	e0b4      	b.n	80041ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b08      	cmp	r3, #8
 8004078:	d133      	bne.n	80040e2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4413      	add	r3, r2
 8004082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	0151      	lsls	r1, r2, #5
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	440a      	add	r2, r1
 8004090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004094:	f043 0302 	orr.w	r3, r3, #2
 8004098:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	3361      	adds	r3, #97	; 0x61
 80040a8:	2205      	movs	r2, #5
 80040aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	461a      	mov	r2, r3
 80040ba:	2310      	movs	r3, #16
 80040bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ca:	461a      	mov	r2, r3
 80040cc:	2308      	movs	r3, #8
 80040ce:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f004 fbfd 	bl	80088da <USB_HC_Halt>
 80040e0:	e075      	b.n	80041ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f8:	d134      	bne.n	8004164 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	440a      	add	r2, r1
 8004110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004114:	f043 0302 	orr.w	r3, r3, #2
 8004118:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	3361      	adds	r3, #97	; 0x61
 8004128:	2208      	movs	r2, #8
 800412a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	461a      	mov	r2, r3
 800413a:	2310      	movs	r3, #16
 800413c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	461a      	mov	r2, r3
 800414c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004150:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f004 fbbc 	bl	80088da <USB_HC_Halt>
 8004162:	e034      	b.n	80041ce <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d129      	bne.n	80041ce <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	440a      	add	r2, r1
 8004190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3361      	adds	r3, #97	; 0x61
 80041a8:	2206      	movs	r2, #6
 80041aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f004 fb8f 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c8:	461a      	mov	r2, r3
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e4:	d122      	bne.n	800422c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f004 fb62 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4413      	add	r3, r2
 800421e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004222:	461a      	mov	r2, r3
 8004224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004228:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800422a:	e2ba      	b.n	80047a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	f040 811b 	bne.w	800447a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d019      	beq.n	8004280 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	3348      	adds	r3, #72	; 0x48
 800425a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	0159      	lsls	r1, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	440b      	add	r3, r1
 8004264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800426e:	1ad2      	subs	r2, r2, r3
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	202c      	movs	r0, #44	; 0x2c
 8004276:	fb00 f303 	mul.w	r3, r0, r3
 800427a:	440b      	add	r3, r1
 800427c:	3350      	adds	r3, #80	; 0x50
 800427e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3361      	adds	r3, #97	; 0x61
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	212c      	movs	r1, #44	; 0x2c
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	4413      	add	r3, r2
 800429e:	335c      	adds	r3, #92	; 0x5c
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b0:	461a      	mov	r2, r3
 80042b2:	2301      	movs	r3, #1
 80042b4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	333f      	adds	r3, #63	; 0x3f
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	212c      	movs	r1, #44	; 0x2c
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	4413      	add	r3, r2
 80042d6:	333f      	adds	r3, #63	; 0x3f
 80042d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d121      	bne.n	8004322 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	0151      	lsls	r1, r2, #5
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	440a      	add	r2, r1
 80042f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f004 fae6 	bl	80088da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	461a      	mov	r2, r3
 800431c:	2310      	movs	r3, #16
 800431e:	6093      	str	r3, [r2, #8]
 8004320:	e066      	b.n	80043f0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	333f      	adds	r3, #63	; 0x3f
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d127      	bne.n	8004386 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4413      	add	r3, r2
 800433e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	440a      	add	r2, r1
 800434c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004354:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	212c      	movs	r1, #44	; 0x2c
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	4413      	add	r3, r2
 8004362:	3360      	adds	r3, #96	; 0x60
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	b2d9      	uxtb	r1, r3
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	202c      	movs	r0, #44	; 0x2c
 8004372:	fb00 f303 	mul.w	r3, r0, r3
 8004376:	4413      	add	r3, r2
 8004378:	3360      	adds	r3, #96	; 0x60
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f007 fdd6 	bl	800bf30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004384:	e034      	b.n	80043f0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	333f      	adds	r3, #63	; 0x3f
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d12a      	bne.n	80043f0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	3360      	adds	r3, #96	; 0x60
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3354      	adds	r3, #84	; 0x54
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	f083 0301 	eor.w	r3, r3, #1
 80043c0:	b2d8      	uxtb	r0, r3
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3354      	adds	r3, #84	; 0x54
 80043d0:	4602      	mov	r2, r0
 80043d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	b2d9      	uxtb	r1, r3
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	202c      	movs	r0, #44	; 0x2c
 80043de:	fb00 f303 	mul.w	r3, r0, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	3360      	adds	r3, #96	; 0x60
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f007 fda0 	bl	800bf30 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d12b      	bne.n	8004450 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	212c      	movs	r1, #44	; 0x2c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	3348      	adds	r3, #72	; 0x48
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	202c      	movs	r0, #44	; 0x2c
 800440e:	fb00 f202 	mul.w	r2, r0, r2
 8004412:	440a      	add	r2, r1
 8004414:	3240      	adds	r2, #64	; 0x40
 8004416:	8812      	ldrh	r2, [r2, #0]
 8004418:	fbb3 f3f2 	udiv	r3, r3, r2
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 81be 	beq.w	80047a2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	3354      	adds	r3, #84	; 0x54
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f083 0301 	eor.w	r3, r3, #1
 800443a:	b2d8      	uxtb	r0, r3
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3354      	adds	r3, #84	; 0x54
 800444a:	4602      	mov	r2, r0
 800444c:	701a      	strb	r2, [r3, #0]
}
 800444e:	e1a8      	b.n	80047a2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3354      	adds	r3, #84	; 0x54
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	f083 0301 	eor.w	r3, r3, #1
 8004464:	b2d8      	uxtb	r0, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	3354      	adds	r3, #84	; 0x54
 8004474:	4602      	mov	r2, r0
 8004476:	701a      	strb	r2, [r3, #0]
}
 8004478:	e193      	b.n	80047a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4413      	add	r3, r2
 8004482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	f040 8106 	bne.w	800469e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ac:	f023 0302 	bic.w	r3, r3, #2
 80044b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	212c      	movs	r1, #44	; 0x2c
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	3361      	adds	r3, #97	; 0x61
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d109      	bne.n	80044da <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	212c      	movs	r1, #44	; 0x2c
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	3360      	adds	r3, #96	; 0x60
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	e0c9      	b.n	800466e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	3361      	adds	r3, #97	; 0x61
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d109      	bne.n	8004502 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	212c      	movs	r1, #44	; 0x2c
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	4413      	add	r3, r2
 80044fa:	3360      	adds	r3, #96	; 0x60
 80044fc:	2205      	movs	r2, #5
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e0b5      	b.n	800466e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	3361      	adds	r3, #97	; 0x61
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b06      	cmp	r3, #6
 8004514:	d009      	beq.n	800452a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	212c      	movs	r1, #44	; 0x2c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	3361      	adds	r3, #97	; 0x61
 8004524:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004526:	2b08      	cmp	r3, #8
 8004528:	d150      	bne.n	80045cc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	212c      	movs	r1, #44	; 0x2c
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	335c      	adds	r3, #92	; 0x5c
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	202c      	movs	r0, #44	; 0x2c
 8004542:	fb00 f303 	mul.w	r3, r0, r3
 8004546:	440b      	add	r3, r1
 8004548:	335c      	adds	r3, #92	; 0x5c
 800454a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	335c      	adds	r3, #92	; 0x5c
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d912      	bls.n	8004586 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	335c      	adds	r3, #92	; 0x5c
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	3360      	adds	r3, #96	; 0x60
 8004580:	2204      	movs	r2, #4
 8004582:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004584:	e073      	b.n	800466e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	3360      	adds	r3, #96	; 0x60
 8004594:	2202      	movs	r2, #2
 8004596:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ae:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045ca:	e050      	b.n	800466e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	212c      	movs	r1, #44	; 0x2c
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	3361      	adds	r3, #97	; 0x61
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d122      	bne.n	8004626 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	212c      	movs	r1, #44	; 0x2c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3360      	adds	r3, #96	; 0x60
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004608:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004610:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461e:	461a      	mov	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e023      	b.n	800466e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	212c      	movs	r1, #44	; 0x2c
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	3361      	adds	r3, #97	; 0x61
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b07      	cmp	r3, #7
 8004638:	d119      	bne.n	800466e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	212c      	movs	r1, #44	; 0x2c
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	335c      	adds	r3, #92	; 0x5c
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	202c      	movs	r0, #44	; 0x2c
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	440b      	add	r3, r1
 8004658:	335c      	adds	r3, #92	; 0x5c
 800465a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3360      	adds	r3, #96	; 0x60
 800466a:	2204      	movs	r2, #4
 800466c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467a:	461a      	mov	r2, r3
 800467c:	2302      	movs	r3, #2
 800467e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	b2d9      	uxtb	r1, r3
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	202c      	movs	r0, #44	; 0x2c
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	4413      	add	r3, r2
 8004690:	3360      	adds	r3, #96	; 0x60
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f007 fc4a 	bl	800bf30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800469c:	e081      	b.n	80047a2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d176      	bne.n	80047a2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	333f      	adds	r3, #63	; 0x3f
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d121      	bne.n	800470c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	335c      	adds	r3, #92	; 0x5c
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f004 f8e8 	bl	80088da <USB_HC_Halt>
 800470a:	e041      	b.n	8004790 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	212c      	movs	r1, #44	; 0x2c
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	333f      	adds	r3, #63	; 0x3f
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	212c      	movs	r1, #44	; 0x2c
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	4413      	add	r3, r2
 800472c:	333f      	adds	r3, #63	; 0x3f
 800472e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004730:	2b02      	cmp	r3, #2
 8004732:	d12d      	bne.n	8004790 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	212c      	movs	r1, #44	; 0x2c
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	4413      	add	r3, r2
 8004740:	335c      	adds	r3, #92	; 0x5c
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d120      	bne.n	8004790 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3361      	adds	r3, #97	; 0x61
 800475c:	2203      	movs	r2, #3
 800475e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	440a      	add	r2, r1
 8004776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800477a:	f043 0302 	orr.w	r3, r3, #2
 800477e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f004 f8a5 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	2310      	movs	r3, #16
 80047a0:	6093      	str	r3, [r2, #8]
}
 80047a2:	bf00      	nop
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b088      	sub	sp, #32
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d119      	bne.n	800480e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e6:	461a      	mov	r2, r3
 80047e8:	2304      	movs	r3, #4
 80047ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	440a      	add	r2, r1
 8004802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004806:	f043 0302 	orr.w	r3, r3, #2
 800480a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800480c:	e3ca      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	4413      	add	r3, r2
 8004816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b20      	cmp	r3, #32
 8004822:	d13e      	bne.n	80048a2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004830:	461a      	mov	r2, r3
 8004832:	2320      	movs	r3, #32
 8004834:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	212c      	movs	r1, #44	; 0x2c
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	4413      	add	r3, r2
 8004842:	333d      	adds	r3, #61	; 0x3d
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b01      	cmp	r3, #1
 8004848:	f040 83ac 	bne.w	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	212c      	movs	r1, #44	; 0x2c
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	333d      	adds	r3, #61	; 0x3d
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	212c      	movs	r1, #44	; 0x2c
 8004864:	fb01 f303 	mul.w	r3, r1, r3
 8004868:	4413      	add	r3, r2
 800486a:	3360      	adds	r3, #96	; 0x60
 800486c:	2202      	movs	r2, #2
 800486e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	4413      	add	r3, r2
 8004878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	440a      	add	r2, r1
 8004886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800488a:	f043 0302 	orr.w	r3, r3, #2
 800488e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f004 f81d 	bl	80088da <USB_HC_Halt>
}
 80048a0:	e380      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b8:	d122      	bne.n	8004900 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d4:	f043 0302 	orr.w	r3, r3, #2
 80048d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f003 fff8 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	461a      	mov	r2, r3
 80048f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048fc:	6093      	str	r3, [r2, #8]
}
 80048fe:	e351      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d150      	bne.n	80049b8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	212c      	movs	r1, #44	; 0x2c
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	4413      	add	r3, r2
 8004922:	335c      	adds	r3, #92	; 0x5c
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d111      	bne.n	8004962 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	212c      	movs	r1, #44	; 0x2c
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	333d      	adds	r3, #61	; 0x3d
 800494c:	2201      	movs	r2, #1
 800494e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	4413      	add	r3, r2
 8004958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495c:	461a      	mov	r2, r3
 800495e:	2340      	movs	r3, #64	; 0x40
 8004960:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	4413      	add	r3, r2
 800496a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	440a      	add	r2, r1
 8004978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	4611      	mov	r1, r2
 800498c:	4618      	mov	r0, r3
 800498e:	f003 ffa4 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499e:	461a      	mov	r2, r3
 80049a0:	2301      	movs	r3, #1
 80049a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	212c      	movs	r1, #44	; 0x2c
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	3361      	adds	r3, #97	; 0x61
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]
}
 80049b6:	e2f5      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d13c      	bne.n	8004a48 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	212c      	movs	r1, #44	; 0x2c
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	3361      	adds	r3, #97	; 0x61
 80049dc:	2204      	movs	r2, #4
 80049de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	333d      	adds	r3, #61	; 0x3d
 80049ee:	2201      	movs	r2, #1
 80049f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	212c      	movs	r1, #44	; 0x2c
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	335c      	adds	r3, #92	; 0x5c
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a1e:	f043 0302 	orr.w	r3, r3, #2
 8004a22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f003 ff53 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	461a      	mov	r2, r3
 8004a42:	2340      	movs	r3, #64	; 0x40
 8004a44:	6093      	str	r3, [r2, #8]
}
 8004a46:	e2ad      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d12a      	bne.n	8004ab4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a8a:	f043 0302 	orr.w	r3, r3, #2
 8004a8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f003 ff1d 	bl	80088da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	212c      	movs	r1, #44	; 0x2c
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	3361      	adds	r3, #97	; 0x61
 8004aae:	2205      	movs	r2, #5
 8004ab0:	701a      	strb	r2, [r3, #0]
}
 8004ab2:	e277      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d150      	bne.n	8004b6c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	212c      	movs	r1, #44	; 0x2c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	335c      	adds	r3, #92	; 0x5c
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	212c      	movs	r1, #44	; 0x2c
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3361      	adds	r3, #97	; 0x61
 8004aea:	2203      	movs	r2, #3
 8004aec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	212c      	movs	r1, #44	; 0x2c
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	333d      	adds	r3, #61	; 0x3d
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d112      	bne.n	8004b28 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	212c      	movs	r1, #44	; 0x2c
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	333c      	adds	r3, #60	; 0x3c
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d108      	bne.n	8004b28 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	212c      	movs	r1, #44	; 0x2c
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	333d      	adds	r3, #61	; 0x3d
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b42:	f043 0302 	orr.w	r3, r3, #2
 8004b46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	4611      	mov	r1, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f003 fec1 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b64:	461a      	mov	r2, r3
 8004b66:	2310      	movs	r3, #16
 8004b68:	6093      	str	r3, [r2, #8]
}
 8004b6a:	e21b      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d174      	bne.n	8004c6c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d121      	bne.n	8004bce <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	212c      	movs	r1, #44	; 0x2c
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	3361      	adds	r3, #97	; 0x61
 8004b98:	2206      	movs	r2, #6
 8004b9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb6:	f043 0302 	orr.w	r3, r3, #2
 8004bba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f003 fe87 	bl	80088da <USB_HC_Halt>
 8004bcc:	e044      	b.n	8004c58 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	335c      	adds	r3, #92	; 0x5c
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	202c      	movs	r0, #44	; 0x2c
 8004be6:	fb00 f303 	mul.w	r3, r0, r3
 8004bea:	440b      	add	r3, r1
 8004bec:	335c      	adds	r3, #92	; 0x5c
 8004bee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	212c      	movs	r1, #44	; 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	335c      	adds	r3, #92	; 0x5c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d920      	bls.n	8004c46 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	212c      	movs	r1, #44	; 0x2c
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	335c      	adds	r3, #92	; 0x5c
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	3360      	adds	r3, #96	; 0x60
 8004c24:	2204      	movs	r2, #4
 8004c26:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	b2d9      	uxtb	r1, r3
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	202c      	movs	r0, #44	; 0x2c
 8004c32:	fb00 f303 	mul.w	r3, r0, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3360      	adds	r3, #96	; 0x60
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f007 f976 	bl	800bf30 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c44:	e008      	b.n	8004c58 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	212c      	movs	r1, #44	; 0x2c
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	3360      	adds	r3, #96	; 0x60
 8004c54:	2202      	movs	r2, #2
 8004c56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	6093      	str	r3, [r2, #8]
}
 8004c6a:	e19b      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c82:	d134      	bne.n	8004cee <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c9e:	f043 0302 	orr.w	r3, r3, #2
 8004ca2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 fe13 	bl	80088da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	212c      	movs	r1, #44	; 0x2c
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3361      	adds	r3, #97	; 0x61
 8004ce8:	2208      	movs	r2, #8
 8004cea:	701a      	strb	r2, [r3, #0]
}
 8004cec:	e15a      	b.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	f040 814f 	bne.w	8004fa4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	0151      	lsls	r1, r2, #5
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d20:	f023 0302 	bic.w	r3, r3, #2
 8004d24:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	212c      	movs	r1, #44	; 0x2c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	3361      	adds	r3, #97	; 0x61
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d17d      	bne.n	8004e36 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	212c      	movs	r1, #44	; 0x2c
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	3360      	adds	r3, #96	; 0x60
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	212c      	movs	r1, #44	; 0x2c
 8004d52:	fb01 f303 	mul.w	r3, r1, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	333f      	adds	r3, #63	; 0x3f
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d00a      	beq.n	8004d76 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	333f      	adds	r3, #63	; 0x3f
 8004d6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	f040 8100 	bne.w	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d113      	bne.n	8004da6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	212c      	movs	r1, #44	; 0x2c
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	4413      	add	r3, r2
 8004d8a:	3355      	adds	r3, #85	; 0x55
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f083 0301 	eor.w	r3, r3, #1
 8004d92:	b2d8      	uxtb	r0, r3
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	212c      	movs	r1, #44	; 0x2c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3355      	adds	r3, #85	; 0x55
 8004da2:	4602      	mov	r2, r0
 8004da4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	f040 80e3 	bne.w	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	212c      	movs	r1, #44	; 0x2c
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	334c      	adds	r3, #76	; 0x4c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80d8 	beq.w	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	334c      	adds	r3, #76	; 0x4c
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	202c      	movs	r0, #44	; 0x2c
 8004ddc:	fb00 f202 	mul.w	r2, r0, r2
 8004de0:	440a      	add	r2, r1
 8004de2:	3240      	adds	r2, #64	; 0x40
 8004de4:	8812      	ldrh	r2, [r2, #0]
 8004de6:	4413      	add	r3, r2
 8004de8:	3b01      	subs	r3, #1
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	202c      	movs	r0, #44	; 0x2c
 8004df0:	fb00 f202 	mul.w	r2, r0, r2
 8004df4:	440a      	add	r2, r1
 8004df6:	3240      	adds	r2, #64	; 0x40
 8004df8:	8812      	ldrh	r2, [r2, #0]
 8004dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 80b5 	beq.w	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	212c      	movs	r1, #44	; 0x2c
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	3355      	adds	r3, #85	; 0x55
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f083 0301 	eor.w	r3, r3, #1
 8004e20:	b2d8      	uxtb	r0, r3
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	212c      	movs	r1, #44	; 0x2c
 8004e28:	fb01 f303 	mul.w	r3, r1, r3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3355      	adds	r3, #85	; 0x55
 8004e30:	4602      	mov	r2, r0
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e09f      	b.n	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	212c      	movs	r1, #44	; 0x2c
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	4413      	add	r3, r2
 8004e42:	3361      	adds	r3, #97	; 0x61
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d109      	bne.n	8004e5e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	212c      	movs	r1, #44	; 0x2c
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	3360      	adds	r3, #96	; 0x60
 8004e58:	2202      	movs	r2, #2
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	e08b      	b.n	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	212c      	movs	r1, #44	; 0x2c
 8004e64:	fb01 f303 	mul.w	r3, r1, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	3361      	adds	r3, #97	; 0x61
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d109      	bne.n	8004e86 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	212c      	movs	r1, #44	; 0x2c
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3360      	adds	r3, #96	; 0x60
 8004e80:	2202      	movs	r2, #2
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	e077      	b.n	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3361      	adds	r3, #97	; 0x61
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	d109      	bne.n	8004eae <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	212c      	movs	r1, #44	; 0x2c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3360      	adds	r3, #96	; 0x60
 8004ea8:	2205      	movs	r2, #5
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	e063      	b.n	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	212c      	movs	r1, #44	; 0x2c
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	3361      	adds	r3, #97	; 0x61
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d009      	beq.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	3361      	adds	r3, #97	; 0x61
 8004ed0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d14f      	bne.n	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	212c      	movs	r1, #44	; 0x2c
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	335c      	adds	r3, #92	; 0x5c
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	202c      	movs	r0, #44	; 0x2c
 8004eee:	fb00 f303 	mul.w	r3, r0, r3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	335c      	adds	r3, #92	; 0x5c
 8004ef6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	212c      	movs	r1, #44	; 0x2c
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	335c      	adds	r3, #92	; 0x5c
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d912      	bls.n	8004f32 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	212c      	movs	r1, #44	; 0x2c
 8004f12:	fb01 f303 	mul.w	r3, r1, r3
 8004f16:	4413      	add	r3, r2
 8004f18:	335c      	adds	r3, #92	; 0x5c
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	212c      	movs	r1, #44	; 0x2c
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	4413      	add	r3, r2
 8004f2a:	3360      	adds	r3, #96	; 0x60
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e021      	b.n	8004f76 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	212c      	movs	r1, #44	; 0x2c
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3360      	adds	r3, #96	; 0x60
 8004f40:	2202      	movs	r2, #2
 8004f42:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f5a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f62:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	461a      	mov	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	2302      	movs	r3, #2
 8004f86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	b2d9      	uxtb	r1, r3
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	202c      	movs	r0, #44	; 0x2c
 8004f92:	fb00 f303 	mul.w	r3, r0, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	3360      	adds	r3, #96	; 0x60
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f006 ffc6 	bl	800bf30 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004fa4:	bf00      	nop
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	; 0x28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	0c5b      	lsrs	r3, r3, #17
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fe0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d004      	beq.n	8004ff2 <HCD_RXQLVL_IRQHandler+0x46>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	f000 80a9 	beq.w	8005142 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004ff0:	e0aa      	b.n	8005148 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80a6 	beq.w	8005146 <HCD_RXQLVL_IRQHandler+0x19a>
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	212c      	movs	r1, #44	; 0x2c
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	4413      	add	r3, r2
 8005006:	3344      	adds	r3, #68	; 0x44
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 809b 	beq.w	8005146 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	212c      	movs	r1, #44	; 0x2c
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	3350      	adds	r3, #80	; 0x50
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	441a      	add	r2, r3
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	202c      	movs	r0, #44	; 0x2c
 800502a:	fb00 f303 	mul.w	r3, r0, r3
 800502e:	440b      	add	r3, r1
 8005030:	334c      	adds	r3, #76	; 0x4c
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d87a      	bhi.n	800512e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3344      	adds	r3, #68	; 0x44
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	b292      	uxth	r2, r2
 8005050:	4619      	mov	r1, r3
 8005052:	f002 ffbb 	bl	8007fcc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	212c      	movs	r1, #44	; 0x2c
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	4413      	add	r3, r2
 8005062:	3344      	adds	r3, #68	; 0x44
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	441a      	add	r2, r3
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	202c      	movs	r0, #44	; 0x2c
 8005070:	fb00 f303 	mul.w	r3, r0, r3
 8005074:	440b      	add	r3, r1
 8005076:	3344      	adds	r3, #68	; 0x44
 8005078:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	212c      	movs	r1, #44	; 0x2c
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	4413      	add	r3, r2
 8005086:	3350      	adds	r3, #80	; 0x50
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	441a      	add	r2, r3
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	202c      	movs	r0, #44	; 0x2c
 8005094:	fb00 f303 	mul.w	r3, r0, r3
 8005098:	440b      	add	r3, r1
 800509a:	3350      	adds	r3, #80	; 0x50
 800509c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	0cdb      	lsrs	r3, r3, #19
 80050ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	3340      	adds	r3, #64	; 0x40
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d13c      	bne.n	8005146 <HCD_RXQLVL_IRQHandler+0x19a>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d039      	beq.n	8005146 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050e8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050f0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fe:	461a      	mov	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3354      	adds	r3, #84	; 0x54
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f083 0301 	eor.w	r3, r3, #1
 8005118:	b2d8      	uxtb	r0, r3
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	212c      	movs	r1, #44	; 0x2c
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	4413      	add	r3, r2
 8005126:	3354      	adds	r3, #84	; 0x54
 8005128:	4602      	mov	r2, r0
 800512a:	701a      	strb	r2, [r3, #0]
      break;
 800512c:	e00b      	b.n	8005146 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	212c      	movs	r1, #44	; 0x2c
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	4413      	add	r3, r2
 800513a:	3360      	adds	r3, #96	; 0x60
 800513c:	2204      	movs	r2, #4
 800513e:	701a      	strb	r2, [r3, #0]
      break;
 8005140:	e001      	b.n	8005146 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005146:	bf00      	nop
  }
}
 8005148:	bf00      	nop
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800517c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d10b      	bne.n	80051a0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d102      	bne.n	8005198 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f006 feb0 	bl	800bef8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f043 0302 	orr.w	r3, r3, #2
 800519e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d132      	bne.n	8005210 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f043 0308 	orr.w	r3, r3, #8
 80051b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d126      	bne.n	800520a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d113      	bne.n	80051ec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80051ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ce:	d106      	bne.n	80051de <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2102      	movs	r1, #2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f003 f858 	bl	800828c <USB_InitFSLSPClkSel>
 80051dc:	e011      	b.n	8005202 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2101      	movs	r1, #1
 80051e4:	4618      	mov	r0, r3
 80051e6:	f003 f851 	bl	800828c <USB_InitFSLSPClkSel>
 80051ea:	e00a      	b.n	8005202 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d106      	bne.n	8005202 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fa:	461a      	mov	r2, r3
 80051fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005200:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f006 fea2 	bl	800bf4c <HAL_HCD_PortEnabled_Callback>
 8005208:	e002      	b.n	8005210 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f006 feac 	bl	800bf68 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b20      	cmp	r3, #32
 8005218:	d103      	bne.n	8005222 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f043 0320 	orr.w	r3, r3, #32
 8005220:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6013      	str	r3, [r2, #0]
}
 800522e:	bf00      	nop
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e12b      	b.n	80054a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fd f8f6 	bl	8002450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	; 0x24
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800528a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800529a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800529c:	f002 f960 	bl	8007560 <HAL_RCC_GetPCLK1Freq>
 80052a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4a81      	ldr	r2, [pc, #516]	; (80054ac <HAL_I2C_Init+0x274>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d807      	bhi.n	80052bc <HAL_I2C_Init+0x84>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a80      	ldr	r2, [pc, #512]	; (80054b0 <HAL_I2C_Init+0x278>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bf94      	ite	ls
 80052b4:	2301      	movls	r3, #1
 80052b6:	2300      	movhi	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e006      	b.n	80052ca <HAL_I2C_Init+0x92>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a7d      	ldr	r2, [pc, #500]	; (80054b4 <HAL_I2C_Init+0x27c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	bf94      	ite	ls
 80052c4:	2301      	movls	r3, #1
 80052c6:	2300      	movhi	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0e7      	b.n	80054a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a78      	ldr	r2, [pc, #480]	; (80054b8 <HAL_I2C_Init+0x280>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	0c9b      	lsrs	r3, r3, #18
 80052dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4a6a      	ldr	r2, [pc, #424]	; (80054ac <HAL_I2C_Init+0x274>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d802      	bhi.n	800530c <HAL_I2C_Init+0xd4>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	3301      	adds	r3, #1
 800530a:	e009      	b.n	8005320 <HAL_I2C_Init+0xe8>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	4a69      	ldr	r2, [pc, #420]	; (80054bc <HAL_I2C_Init+0x284>)
 8005318:	fba2 2303 	umull	r2, r3, r2, r3
 800531c:	099b      	lsrs	r3, r3, #6
 800531e:	3301      	adds	r3, #1
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	430b      	orrs	r3, r1
 8005326:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005332:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	495c      	ldr	r1, [pc, #368]	; (80054ac <HAL_I2C_Init+0x274>)
 800533c:	428b      	cmp	r3, r1
 800533e:	d819      	bhi.n	8005374 <HAL_I2C_Init+0x13c>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1e59      	subs	r1, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	fbb1 f3f3 	udiv	r3, r1, r3
 800534e:	1c59      	adds	r1, r3, #1
 8005350:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005354:	400b      	ands	r3, r1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_I2C_Init+0x138>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1e59      	subs	r1, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	fbb1 f3f3 	udiv	r3, r1, r3
 8005368:	3301      	adds	r3, #1
 800536a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536e:	e051      	b.n	8005414 <HAL_I2C_Init+0x1dc>
 8005370:	2304      	movs	r3, #4
 8005372:	e04f      	b.n	8005414 <HAL_I2C_Init+0x1dc>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d111      	bne.n	80053a0 <HAL_I2C_Init+0x168>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1e58      	subs	r0, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	440b      	add	r3, r1
 800538a:	fbb0 f3f3 	udiv	r3, r0, r3
 800538e:	3301      	adds	r3, #1
 8005390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e012      	b.n	80053c6 <HAL_I2C_Init+0x18e>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1e58      	subs	r0, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6859      	ldr	r1, [r3, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	0099      	lsls	r1, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b6:	3301      	adds	r3, #1
 80053b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_I2C_Init+0x196>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e022      	b.n	8005414 <HAL_I2C_Init+0x1dc>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10e      	bne.n	80053f4 <HAL_I2C_Init+0x1bc>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1e58      	subs	r0, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6859      	ldr	r1, [r3, #4]
 80053de:	460b      	mov	r3, r1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	440b      	add	r3, r1
 80053e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e8:	3301      	adds	r3, #1
 80053ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f2:	e00f      	b.n	8005414 <HAL_I2C_Init+0x1dc>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	1e58      	subs	r0, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6859      	ldr	r1, [r3, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	0099      	lsls	r1, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	fbb0 f3f3 	udiv	r3, r0, r3
 800540a:	3301      	adds	r3, #1
 800540c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005410:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	6809      	ldr	r1, [r1, #0]
 8005418:	4313      	orrs	r3, r2
 800541a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69da      	ldr	r2, [r3, #28]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005442:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6911      	ldr	r1, [r2, #16]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68d2      	ldr	r2, [r2, #12]
 800544e:	4311      	orrs	r1, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	430b      	orrs	r3, r1
 8005456:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	000186a0 	.word	0x000186a0
 80054b0:	001e847f 	.word	0x001e847f
 80054b4:	003d08ff 	.word	0x003d08ff
 80054b8:	431bde83 	.word	0x431bde83
 80054bc:	10624dd3 	.word	0x10624dd3

080054c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	461a      	mov	r2, r3
 80054cc:	460b      	mov	r3, r1
 80054ce:	817b      	strh	r3, [r7, #10]
 80054d0:	4613      	mov	r3, r2
 80054d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054d4:	f7fd fac0 	bl	8002a58 <HAL_GetTick>
 80054d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	f040 80e0 	bne.w	80056a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	2319      	movs	r3, #25
 80054ee:	2201      	movs	r2, #1
 80054f0:	4970      	ldr	r1, [pc, #448]	; (80056b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fc58 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
 8005500:	e0d3      	b.n	80056aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_I2C_Master_Transmit+0x50>
 800550c:	2302      	movs	r3, #2
 800550e:	e0cc      	b.n	80056aa <HAL_I2C_Master_Transmit+0x1ea>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b01      	cmp	r3, #1
 8005524:	d007      	beq.n	8005536 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005544:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2221      	movs	r2, #33	; 0x21
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2210      	movs	r2, #16
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	893a      	ldrh	r2, [r7, #8]
 8005566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a50      	ldr	r2, [pc, #320]	; (80056b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005576:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005578:	8979      	ldrh	r1, [r7, #10]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fac2 	bl	8005b08 <I2C_MasterRequestWrite>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e08d      	b.n	80056aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055a4:	e066      	b.n	8005674 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	6a39      	ldr	r1, [r7, #32]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fcd2 	bl	8005f54 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d107      	bne.n	80055ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e06b      	b.n	80056aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b04      	cmp	r3, #4
 800560e:	d11b      	bne.n	8005648 <HAL_I2C_Master_Transmit+0x188>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005614:	2b00      	cmp	r3, #0
 8005616:	d017      	beq.n	8005648 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	6a39      	ldr	r1, [r7, #32]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fcc2 	bl	8005fd6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00d      	beq.n	8005674 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	2b04      	cmp	r3, #4
 800565e:	d107      	bne.n	8005670 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e01a      	b.n	80056aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	d194      	bne.n	80055a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e000      	b.n	80056aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
  }
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	00100002 	.word	0x00100002
 80056b8:	ffff0000 	.word	0xffff0000

080056bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08c      	sub	sp, #48	; 0x30
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	461a      	mov	r2, r3
 80056c8:	460b      	mov	r3, r1
 80056ca:	817b      	strh	r3, [r7, #10]
 80056cc:	4613      	mov	r3, r2
 80056ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056d0:	f7fd f9c2 	bl	8002a58 <HAL_GetTick>
 80056d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b20      	cmp	r3, #32
 80056e0:	f040 820b 	bne.w	8005afa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2319      	movs	r3, #25
 80056ea:	2201      	movs	r2, #1
 80056ec:	497c      	ldr	r1, [pc, #496]	; (80058e0 <HAL_I2C_Master_Receive+0x224>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fb5a 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
 80056fc:	e1fe      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_I2C_Master_Receive+0x50>
 8005708:	2302      	movs	r3, #2
 800570a:	e1f7      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d007      	beq.n	8005732 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2222      	movs	r2, #34	; 0x22
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2210      	movs	r2, #16
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	893a      	ldrh	r2, [r7, #8]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a5c      	ldr	r2, [pc, #368]	; (80058e4 <HAL_I2C_Master_Receive+0x228>)
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005774:	8979      	ldrh	r1, [r7, #10]
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fa46 	bl	8005c0c <I2C_MasterRequestRead>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e1b8      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d113      	bne.n	80057ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005792:	2300      	movs	r3, #0
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	623b      	str	r3, [r7, #32]
 80057a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e18c      	b.n	8005ad4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d11b      	bne.n	80057fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e16c      	b.n	8005ad4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d11b      	bne.n	800583a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005822:	2300      	movs	r3, #0
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	e14c      	b.n	8005ad4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005860:	e138      	b.n	8005ad4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005866:	2b03      	cmp	r3, #3
 8005868:	f200 80f1 	bhi.w	8005a4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005870:	2b01      	cmp	r3, #1
 8005872:	d123      	bne.n	80058bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005876:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fbed 	bl	8006058 <I2C_WaitOnRXNEFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e139      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ba:	e10b      	b.n	8005ad4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d14e      	bne.n	8005962 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	2200      	movs	r2, #0
 80058cc:	4906      	ldr	r1, [pc, #24]	; (80058e8 <HAL_I2C_Master_Receive+0x22c>)
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fa6a 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e10e      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
 80058de:	bf00      	nop
 80058e0:	00100002 	.word	0x00100002
 80058e4:	ffff0000 	.word	0xffff0000
 80058e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005960:	e0b8      	b.n	8005ad4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2200      	movs	r2, #0
 800596a:	4966      	ldr	r1, [pc, #408]	; (8005b04 <HAL_I2C_Master_Receive+0x448>)
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fa1b 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0bf      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	2200      	movs	r2, #0
 80059c6:	494f      	ldr	r1, [pc, #316]	; (8005b04 <HAL_I2C_Master_Receive+0x448>)
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f9ed 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e091      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a4c:	e042      	b.n	8005ad4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fb00 	bl	8006058 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e04c      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d118      	bne.n	8005ad4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f47f aec2 	bne.w	8005862 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e000      	b.n	8005afc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005afa:	2302      	movs	r3, #2
  }
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3728      	adds	r7, #40	; 0x28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	00010004 	.word	0x00010004

08005b08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	460b      	mov	r3, r1
 8005b16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d006      	beq.n	8005b32 <I2C_MasterRequestWrite+0x2a>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d003      	beq.n	8005b32 <I2C_MasterRequestWrite+0x2a>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b30:	d108      	bne.n	8005b44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e00b      	b.n	8005b5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	2b12      	cmp	r3, #18
 8005b4a:	d107      	bne.n	8005b5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f91d 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b82:	d103      	bne.n	8005b8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e035      	b.n	8005bfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b98:	d108      	bne.n	8005bac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b9a:	897b      	ldrh	r3, [r7, #10]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ba8:	611a      	str	r2, [r3, #16]
 8005baa:	e01b      	b.n	8005be4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bac:	897b      	ldrh	r3, [r7, #10]
 8005bae:	11db      	asrs	r3, r3, #7
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f003 0306 	and.w	r3, r3, #6
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f063 030f 	orn	r3, r3, #15
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	490e      	ldr	r1, [pc, #56]	; (8005c04 <I2C_MasterRequestWrite+0xfc>)
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f943 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e010      	b.n	8005bfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4907      	ldr	r1, [pc, #28]	; (8005c08 <I2C_MasterRequestWrite+0x100>)
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f933 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	00010008 	.word	0x00010008
 8005c08:	00010002 	.word	0x00010002

08005c0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d006      	beq.n	8005c46 <I2C_MasterRequestRead+0x3a>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d003      	beq.n	8005c46 <I2C_MasterRequestRead+0x3a>
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c44:	d108      	bne.n	8005c58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e00b      	b.n	8005c70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	2b11      	cmp	r3, #17
 8005c5e:	d107      	bne.n	8005c70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f893 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c96:	d103      	bne.n	8005ca0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e079      	b.n	8005d98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cac:	d108      	bne.n	8005cc0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]
 8005cbe:	e05f      	b.n	8005d80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cc0:	897b      	ldrh	r3, [r7, #10]
 8005cc2:	11db      	asrs	r3, r3, #7
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f003 0306 	and.w	r3, r3, #6
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f063 030f 	orn	r3, r3, #15
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4930      	ldr	r1, [pc, #192]	; (8005da0 <I2C_MasterRequestRead+0x194>)
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f8b9 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e054      	b.n	8005d98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cee:	897b      	ldrh	r3, [r7, #10]
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4929      	ldr	r1, [pc, #164]	; (8005da4 <I2C_MasterRequestRead+0x198>)
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f8a9 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e044      	b.n	8005d98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f831 	bl	8005da8 <I2C_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5a:	d103      	bne.n	8005d64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e017      	b.n	8005d98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d68:	897b      	ldrh	r3, [r7, #10]
 8005d6a:	11db      	asrs	r3, r3, #7
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f003 0306 	and.w	r3, r3, #6
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f063 030e 	orn	r3, r3, #14
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4907      	ldr	r1, [pc, #28]	; (8005da4 <I2C_MasterRequestRead+0x198>)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f865 	bl	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	00010008 	.word	0x00010008
 8005da4:	00010002 	.word	0x00010002

08005da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005db8:	e025      	b.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc0:	d021      	beq.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc2:	f7fc fe49 	bl	8002a58 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d302      	bcc.n	8005dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d116      	bne.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e023      	b.n	8005e4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10d      	bne.n	8005e2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	43da      	mvns	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	e00c      	b.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	43da      	mvns	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4013      	ands	r3, r2
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bf0c      	ite	eq
 8005e3e:	2301      	moveq	r3, #1
 8005e40:	2300      	movne	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d0b6      	beq.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e64:	e051      	b.n	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e74:	d123      	bne.n	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f043 0204 	orr.w	r2, r3, #4
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e046      	b.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec4:	d021      	beq.n	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec6:	f7fc fdc7 	bl	8002a58 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d302      	bcc.n	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d116      	bne.n	8005f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e020      	b.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10c      	bne.n	8005f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	bf14      	ite	ne
 8005f26:	2301      	movne	r3, #1
 8005f28:	2300      	moveq	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	e00b      	b.n	8005f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	43da      	mvns	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d18d      	bne.n	8005e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f60:	e02d      	b.n	8005fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f8ce 	bl	8006104 <I2C_IsAcknowledgeFailed>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e02d      	b.n	8005fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f78:	d021      	beq.n	8005fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fc fd6d 	bl	8002a58 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d116      	bne.n	8005fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e007      	b.n	8005fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b80      	cmp	r3, #128	; 0x80
 8005fca:	d1ca      	bne.n	8005f62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fe2:	e02d      	b.n	8006040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 f88d 	bl	8006104 <I2C_IsAcknowledgeFailed>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e02d      	b.n	8006050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ffa:	d021      	beq.n	8006040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffc:	f7fc fd2c 	bl	8002a58 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d116      	bne.n	8006040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e007      	b.n	8006050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b04      	cmp	r3, #4
 800604c:	d1ca      	bne.n	8005fe4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006064:	e042      	b.n	80060ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b10      	cmp	r3, #16
 8006072:	d119      	bne.n	80060a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0210 	mvn.w	r2, #16
 800607c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e029      	b.n	80060fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a8:	f7fc fcd6 	bl	8002a58 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d302      	bcc.n	80060be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d116      	bne.n	80060ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e007      	b.n	80060fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d1b5      	bne.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611a:	d11b      	bne.n	8006154 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006124:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f043 0204 	orr.w	r2, r3, #4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
	...

08006164 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e128      	b.n	80063c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a90      	ldr	r2, [pc, #576]	; (80063d0 <HAL_I2S_Init+0x26c>)
 800618e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fc f9a5 	bl	80024e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061ac:	f023 030f 	bic.w	r3, r3, #15
 80061b0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2202      	movs	r2, #2
 80061b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d060      	beq.n	8006284 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d102      	bne.n	80061d0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80061ca:	2310      	movs	r3, #16
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	e001      	b.n	80061d4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80061d0:	2320      	movs	r3, #32
 80061d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d802      	bhi.n	80061e2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80061e2:	2001      	movs	r0, #1
 80061e4:	f001 fab2 	bl	800774c <HAL_RCCEx_GetPeriphCLKFreq>
 80061e8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f2:	d125      	bne.n	8006240 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d010      	beq.n	800621e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	fbb2 f2f3 	udiv	r2, r2, r3
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	fbb2 f3f3 	udiv	r3, r2, r3
 8006218:	3305      	adds	r3, #5
 800621a:	613b      	str	r3, [r7, #16]
 800621c:	e01f      	b.n	800625e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	fbb2 f2f3 	udiv	r2, r2, r3
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	fbb2 f3f3 	udiv	r3, r2, r3
 800623a:	3305      	adds	r3, #5
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	e00e      	b.n	800625e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	fbb2 f2f3 	udiv	r2, r2, r3
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	3305      	adds	r3, #5
 800625c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4a5c      	ldr	r2, [pc, #368]	; (80063d4 <HAL_I2S_Init+0x270>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	08db      	lsrs	r3, r3, #3
 8006268:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e003      	b.n	800628c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006284:	2302      	movs	r3, #2
 8006286:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d902      	bls.n	8006298 <HAL_I2S_Init+0x134>
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	2bff      	cmp	r3, #255	; 0xff
 8006296:	d907      	bls.n	80062a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629c:	f043 0210 	orr.w	r2, r3, #16
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e08f      	b.n	80063c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	ea42 0103 	orr.w	r1, r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062c6:	f023 030f 	bic.w	r3, r3, #15
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6851      	ldr	r1, [r2, #4]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6892      	ldr	r2, [r2, #8]
 80062d2:	4311      	orrs	r1, r2
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	68d2      	ldr	r2, [r2, #12]
 80062d8:	4311      	orrs	r1, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6992      	ldr	r2, [r2, #24]
 80062de:	430a      	orrs	r2, r1
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d161      	bne.n	80063b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a38      	ldr	r2, [pc, #224]	; (80063d8 <HAL_I2S_Init+0x274>)
 80062f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a37      	ldr	r2, [pc, #220]	; (80063dc <HAL_I2S_Init+0x278>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d101      	bne.n	8006308 <HAL_I2S_Init+0x1a4>
 8006304:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <HAL_I2S_Init+0x27c>)
 8006306:	e001      	b.n	800630c <HAL_I2S_Init+0x1a8>
 8006308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	4932      	ldr	r1, [pc, #200]	; (80063dc <HAL_I2S_Init+0x278>)
 8006314:	428a      	cmp	r2, r1
 8006316:	d101      	bne.n	800631c <HAL_I2S_Init+0x1b8>
 8006318:	4a31      	ldr	r2, [pc, #196]	; (80063e0 <HAL_I2S_Init+0x27c>)
 800631a:	e001      	b.n	8006320 <HAL_I2S_Init+0x1bc>
 800631c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006320:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006324:	f023 030f 	bic.w	r3, r3, #15
 8006328:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2b      	ldr	r2, [pc, #172]	; (80063dc <HAL_I2S_Init+0x278>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d101      	bne.n	8006338 <HAL_I2S_Init+0x1d4>
 8006334:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <HAL_I2S_Init+0x27c>)
 8006336:	e001      	b.n	800633c <HAL_I2S_Init+0x1d8>
 8006338:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800633c:	2202      	movs	r2, #2
 800633e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a25      	ldr	r2, [pc, #148]	; (80063dc <HAL_I2S_Init+0x278>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d101      	bne.n	800634e <HAL_I2S_Init+0x1ea>
 800634a:	4b25      	ldr	r3, [pc, #148]	; (80063e0 <HAL_I2S_Init+0x27c>)
 800634c:	e001      	b.n	8006352 <HAL_I2S_Init+0x1ee>
 800634e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635e:	d003      	beq.n	8006368 <HAL_I2S_Init+0x204>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	e001      	b.n	8006374 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800637e:	4313      	orrs	r3, r2
 8006380:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006388:	4313      	orrs	r3, r2
 800638a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006392:	4313      	orrs	r3, r2
 8006394:	b29a      	uxth	r2, r3
 8006396:	897b      	ldrh	r3, [r7, #10]
 8006398:	4313      	orrs	r3, r2
 800639a:	b29b      	uxth	r3, r3
 800639c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a0d      	ldr	r2, [pc, #52]	; (80063dc <HAL_I2S_Init+0x278>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d101      	bne.n	80063b0 <HAL_I2S_Init+0x24c>
 80063ac:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <HAL_I2S_Init+0x27c>)
 80063ae:	e001      	b.n	80063b4 <HAL_I2S_Init+0x250>
 80063b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063b4:	897a      	ldrh	r2, [r7, #10]
 80063b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	08006701 	.word	0x08006701
 80063d4:	cccccccd 	.word	0xcccccccd
 80063d8:	08006815 	.word	0x08006815
 80063dc:	40003800 	.word	0x40003800
 80063e0:	40003400 	.word	0x40003400

080063e4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <HAL_I2S_Receive_DMA+0x1a>
 80063f8:	88fb      	ldrh	r3, [r7, #6]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e0a1      	b.n	8006546 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_I2S_Receive_DMA+0x2e>
 800640e:	2302      	movs	r3, #2
 8006410:	e099      	b.n	8006546 <HAL_I2S_Receive_DMA+0x162>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	d005      	beq.n	8006432 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800642e:	2302      	movs	r3, #2
 8006430:	e089      	b.n	8006546 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2204      	movs	r2, #4
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b03      	cmp	r3, #3
 8006456:	d002      	beq.n	800645e <HAL_I2S_Receive_DMA+0x7a>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b05      	cmp	r3, #5
 800645c:	d10a      	bne.n	8006474 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006468:	88fb      	ldrh	r3, [r7, #6]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	865a      	strh	r2, [r3, #50]	; 0x32
 8006472:	e005      	b.n	8006480 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006484:	4a32      	ldr	r2, [pc, #200]	; (8006550 <HAL_I2S_Receive_DMA+0x16c>)
 8006486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	4a31      	ldr	r2, [pc, #196]	; (8006554 <HAL_I2S_Receive_DMA+0x170>)
 800648e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	4a30      	ldr	r2, [pc, #192]	; (8006558 <HAL_I2S_Receive_DMA+0x174>)
 8006496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a6:	d10a      	bne.n	80064be <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064a8:	2300      	movs	r3, #0
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	4619      	mov	r1, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ce:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80064d4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80064d6:	f7fc fcaf 	bl	8002e38 <HAL_DMA_Start_IT>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00f      	beq.n	8006500 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e4:	f043 0208 	orr.w	r2, r3, #8
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e022      	b.n	8006546 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650a:	2b00      	cmp	r3, #0
 800650c:	d107      	bne.n	800651e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800651c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d107      	bne.n	800653c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	080065df 	.word	0x080065df
 8006554:	0800659d 	.word	0x0800659d
 8006558:	080065fb 	.word	0x080065fb

0800655c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	4798      	blx	r3
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10e      	bne.n	80065d0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0201 	bic.w	r2, r2, #1
 80065c0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7fa fb7d 	bl	8000cd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80065d6:	bf00      	nop
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff ffc1 	bl	8006574 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80065f2:	bf00      	nop
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006606:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0203 	bic.w	r2, r2, #3
 8006616:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006630:	f043 0208 	orr.w	r2, r3, #8
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff ffa5 	bl	8006588 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800663e:	bf00      	nop
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	881a      	ldrh	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	1c9a      	adds	r2, r3, #2
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10e      	bne.n	800669a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800668a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fa fb3d 	bl	8000d14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	b292      	uxth	r2, r2
 80066b6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	1c9a      	adds	r2, r3, #2
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10e      	bne.n	80066f8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fa faec 	bl	8000cd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b04      	cmp	r3, #4
 800671a:	d13a      	bne.n	8006792 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b01      	cmp	r3, #1
 8006724:	d109      	bne.n	800673a <I2S_IRQHandler+0x3a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	d102      	bne.n	800673a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ffb4 	bl	80066a2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d126      	bne.n	8006792 <I2S_IRQHandler+0x92>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b20      	cmp	r3, #32
 8006750:	d11f      	bne.n	8006792 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006760:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006762:	2300      	movs	r3, #0
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006784:	f043 0202 	orr.w	r2, r3, #2
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff fefb 	bl	8006588 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b03      	cmp	r3, #3
 800679c:	d136      	bne.n	800680c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d109      	bne.n	80067bc <I2S_IRQHandler+0xbc>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d102      	bne.n	80067bc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff ff45 	bl	8006646 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d122      	bne.n	800680c <I2S_IRQHandler+0x10c>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d11b      	bne.n	800680c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067e2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	f043 0204 	orr.w	r2, r3, #4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff febe 	bl	8006588 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800680c:	bf00      	nop
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4aa2      	ldr	r2, [pc, #648]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d101      	bne.n	8006832 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800682e:	4ba2      	ldr	r3, [pc, #648]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006830:	e001      	b.n	8006836 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a9b      	ldr	r2, [pc, #620]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d101      	bne.n	8006850 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800684c:	4b9a      	ldr	r3, [pc, #616]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800684e:	e001      	b.n	8006854 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006860:	d004      	beq.n	800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f040 8099 	bne.w	800699e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d107      	bne.n	8006886 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f925 	bl	8006ad0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b01      	cmp	r3, #1
 800688e:	d107      	bne.n	80068a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f9c8 	bl	8006c30 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d13a      	bne.n	8006920 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d035      	beq.n	8006920 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a7e      	ldr	r2, [pc, #504]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d101      	bne.n	80068c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80068be:	4b7e      	ldr	r3, [pc, #504]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80068c0:	e001      	b.n	80068c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80068c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4979      	ldr	r1, [pc, #484]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068ce:	428b      	cmp	r3, r1
 80068d0:	d101      	bne.n	80068d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80068d2:	4b79      	ldr	r3, [pc, #484]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80068d4:	e001      	b.n	80068da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80068d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	f043 0202 	orr.w	r2, r3, #2
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fe34 	bl	8006588 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b08      	cmp	r3, #8
 8006928:	f040 80be 	bne.w	8006aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 80b8 	beq.w	8006aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006946:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a59      	ldr	r2, [pc, #356]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d101      	bne.n	8006956 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006952:	4b59      	ldr	r3, [pc, #356]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006954:	e001      	b.n	800695a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4954      	ldr	r1, [pc, #336]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006962:	428b      	cmp	r3, r1
 8006964:	d101      	bne.n	800696a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006966:	4b54      	ldr	r3, [pc, #336]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006968:	e001      	b.n	800696e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800696a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800696e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006972:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006974:	2300      	movs	r3, #0
 8006976:	60bb      	str	r3, [r7, #8]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	60bb      	str	r3, [r7, #8]
 8006980:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	f043 0204 	orr.w	r2, r3, #4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff fdf6 	bl	8006588 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800699c:	e084      	b.n	8006aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d107      	bne.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f8be 	bl	8006b34 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d107      	bne.n	80069d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f8fd 	bl	8006bcc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b40      	cmp	r3, #64	; 0x40
 80069da:	d12f      	bne.n	8006a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d02a      	beq.n	8006a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2e      	ldr	r2, [pc, #184]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d101      	bne.n	8006a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a00:	4b2d      	ldr	r3, [pc, #180]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a02:	e001      	b.n	8006a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4929      	ldr	r1, [pc, #164]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a10:	428b      	cmp	r3, r1
 8006a12:	d101      	bne.n	8006a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006a14:	4b28      	ldr	r3, [pc, #160]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a16:	e001      	b.n	8006a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f043 0202 	orr.w	r2, r3, #2
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff fda6 	bl	8006588 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d131      	bne.n	8006aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d02c      	beq.n	8006aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d101      	bne.n	8006a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006a5a:	4b17      	ldr	r3, [pc, #92]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a5c:	e001      	b.n	8006a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4912      	ldr	r1, [pc, #72]	; (8006ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a6a:	428b      	cmp	r3, r1
 8006a6c:	d101      	bne.n	8006a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006a6e:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a70:	e001      	b.n	8006a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a7a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a8a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a98:	f043 0204 	orr.w	r2, r3, #4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fd71 	bl	8006588 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006aa6:	e000      	b.n	8006aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006aa8:	bf00      	nop
}
 8006aaa:	bf00      	nop
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	40003800 	.word	0x40003800
 8006ab8:	40003400 	.word	0x40003400

08006abc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	1c99      	adds	r1, r3, #2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6251      	str	r1, [r2, #36]	; 0x24
 8006ae2:	881a      	ldrh	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d113      	bne.n	8006b2a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d106      	bne.n	8006b2a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff ffc9 	bl	8006abc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	1c99      	adds	r1, r3, #2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6251      	str	r1, [r2, #36]	; 0x24
 8006b46:	8819      	ldrh	r1, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1d      	ldr	r2, [pc, #116]	; (8006bc4 <I2SEx_TxISR_I2SExt+0x90>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d101      	bne.n	8006b56 <I2SEx_TxISR_I2SExt+0x22>
 8006b52:	4b1d      	ldr	r3, [pc, #116]	; (8006bc8 <I2SEx_TxISR_I2SExt+0x94>)
 8006b54:	e001      	b.n	8006b5a <I2SEx_TxISR_I2SExt+0x26>
 8006b56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b5a:	460a      	mov	r2, r1
 8006b5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d121      	bne.n	8006bba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <I2SEx_TxISR_I2SExt+0x90>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <I2SEx_TxISR_I2SExt+0x50>
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <I2SEx_TxISR_I2SExt+0x94>)
 8006b82:	e001      	b.n	8006b88 <I2SEx_TxISR_I2SExt+0x54>
 8006b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	490d      	ldr	r1, [pc, #52]	; (8006bc4 <I2SEx_TxISR_I2SExt+0x90>)
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d101      	bne.n	8006b98 <I2SEx_TxISR_I2SExt+0x64>
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <I2SEx_TxISR_I2SExt+0x94>)
 8006b96:	e001      	b.n	8006b9c <I2SEx_TxISR_I2SExt+0x68>
 8006b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ba0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff81 	bl	8006abc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40003800 	.word	0x40003800
 8006bc8:	40003400 	.word	0x40003400

08006bcc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68d8      	ldr	r0, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	1c99      	adds	r1, r3, #2
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006be4:	b282      	uxth	r2, r0
 8006be6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d113      	bne.n	8006c28 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c0e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff ff4a 	bl	8006abc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a20      	ldr	r2, [pc, #128]	; (8006cc0 <I2SEx_RxISR_I2SExt+0x90>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <I2SEx_RxISR_I2SExt+0x16>
 8006c42:	4b20      	ldr	r3, [pc, #128]	; (8006cc4 <I2SEx_RxISR_I2SExt+0x94>)
 8006c44:	e001      	b.n	8006c4a <I2SEx_RxISR_I2SExt+0x1a>
 8006c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c4a:	68d8      	ldr	r0, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	1c99      	adds	r1, r3, #2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c56:	b282      	uxth	r2, r0
 8006c58:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d121      	bne.n	8006cb6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a12      	ldr	r2, [pc, #72]	; (8006cc0 <I2SEx_RxISR_I2SExt+0x90>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d101      	bne.n	8006c80 <I2SEx_RxISR_I2SExt+0x50>
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <I2SEx_RxISR_I2SExt+0x94>)
 8006c7e:	e001      	b.n	8006c84 <I2SEx_RxISR_I2SExt+0x54>
 8006c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	490d      	ldr	r1, [pc, #52]	; (8006cc0 <I2SEx_RxISR_I2SExt+0x90>)
 8006c8c:	428b      	cmp	r3, r1
 8006c8e:	d101      	bne.n	8006c94 <I2SEx_RxISR_I2SExt+0x64>
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <I2SEx_RxISR_I2SExt+0x94>)
 8006c92:	e001      	b.n	8006c98 <I2SEx_RxISR_I2SExt+0x68>
 8006c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c9c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff ff03 	bl	8006abc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40003800 	.word	0x40003800
 8006cc4:	40003400 	.word	0x40003400

08006cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e264      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d075      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ce6:	4ba3      	ldr	r3, [pc, #652]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d00c      	beq.n	8006d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cf2:	4ba0      	ldr	r3, [pc, #640]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d112      	bne.n	8006d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cfe:	4b9d      	ldr	r3, [pc, #628]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d0a:	d10b      	bne.n	8006d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d0c:	4b99      	ldr	r3, [pc, #612]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d05b      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x108>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d157      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e23f      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2c:	d106      	bne.n	8006d3c <HAL_RCC_OscConfig+0x74>
 8006d2e:	4b91      	ldr	r3, [pc, #580]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a90      	ldr	r2, [pc, #576]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	e01d      	b.n	8006d78 <HAL_RCC_OscConfig+0xb0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x98>
 8006d46:	4b8b      	ldr	r3, [pc, #556]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a8a      	ldr	r2, [pc, #552]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	4b88      	ldr	r3, [pc, #544]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a87      	ldr	r2, [pc, #540]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e00b      	b.n	8006d78 <HAL_RCC_OscConfig+0xb0>
 8006d60:	4b84      	ldr	r3, [pc, #528]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a83      	ldr	r2, [pc, #524]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	4b81      	ldr	r3, [pc, #516]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a80      	ldr	r2, [pc, #512]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d013      	beq.n	8006da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d80:	f7fb fe6a 	bl	8002a58 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d88:	f7fb fe66 	bl	8002a58 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	; 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e204      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	4b76      	ldr	r3, [pc, #472]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCC_OscConfig+0xc0>
 8006da6:	e014      	b.n	8006dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da8:	f7fb fe56 	bl	8002a58 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006db0:	f7fb fe52 	bl	8002a58 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b64      	cmp	r3, #100	; 0x64
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e1f0      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc2:	4b6c      	ldr	r3, [pc, #432]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <HAL_RCC_OscConfig+0xe8>
 8006dce:	e000      	b.n	8006dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d063      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dde:	4b65      	ldr	r3, [pc, #404]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 030c 	and.w	r3, r3, #12
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dea:	4b62      	ldr	r3, [pc, #392]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d11c      	bne.n	8006e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006df6:	4b5f      	ldr	r3, [pc, #380]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d116      	bne.n	8006e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e02:	4b5c      	ldr	r3, [pc, #368]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <HAL_RCC_OscConfig+0x152>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d001      	beq.n	8006e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e1c4      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e1a:	4b56      	ldr	r3, [pc, #344]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4952      	ldr	r1, [pc, #328]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e2e:	e03a      	b.n	8006ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d020      	beq.n	8006e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e38:	4b4f      	ldr	r3, [pc, #316]	; (8006f78 <HAL_RCC_OscConfig+0x2b0>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3e:	f7fb fe0b 	bl	8002a58 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e46:	f7fb fe07 	bl	8002a58 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e1a5      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e58:	4b46      	ldr	r3, [pc, #280]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0f0      	beq.n	8006e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e64:	4b43      	ldr	r3, [pc, #268]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	4940      	ldr	r1, [pc, #256]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	600b      	str	r3, [r1, #0]
 8006e78:	e015      	b.n	8006ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e7a:	4b3f      	ldr	r3, [pc, #252]	; (8006f78 <HAL_RCC_OscConfig+0x2b0>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fb fdea 	bl	8002a58 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e88:	f7fb fde6 	bl	8002a58 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e184      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9a:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d030      	beq.n	8006f14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d016      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eba:	4b30      	ldr	r3, [pc, #192]	; (8006f7c <HAL_RCC_OscConfig+0x2b4>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec0:	f7fb fdca 	bl	8002a58 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ec8:	f7fb fdc6 	bl	8002a58 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e164      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eda:	4b26      	ldr	r3, [pc, #152]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0f0      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x200>
 8006ee6:	e015      	b.n	8006f14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ee8:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <HAL_RCC_OscConfig+0x2b4>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eee:	f7fb fdb3 	bl	8002a58 <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ef6:	f7fb fdaf 	bl	8002a58 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e14d      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f08:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1f0      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80a0 	beq.w	8007062 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f26:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10f      	bne.n	8006f52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	4a0e      	ldr	r2, [pc, #56]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f40:	6413      	str	r3, [r2, #64]	; 0x40
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <HAL_RCC_OscConfig+0x2ac>)
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f52:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <HAL_RCC_OscConfig+0x2b8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d121      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f5e:	4b08      	ldr	r3, [pc, #32]	; (8006f80 <HAL_RCC_OscConfig+0x2b8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a07      	ldr	r2, [pc, #28]	; (8006f80 <HAL_RCC_OscConfig+0x2b8>)
 8006f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f6a:	f7fb fd75 	bl	8002a58 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f70:	e011      	b.n	8006f96 <HAL_RCC_OscConfig+0x2ce>
 8006f72:	bf00      	nop
 8006f74:	40023800 	.word	0x40023800
 8006f78:	42470000 	.word	0x42470000
 8006f7c:	42470e80 	.word	0x42470e80
 8006f80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f84:	f7fb fd68 	bl	8002a58 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e106      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f96:	4b85      	ldr	r3, [pc, #532]	; (80071ac <HAL_RCC_OscConfig+0x4e4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0f0      	beq.n	8006f84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x2f0>
 8006faa:	4b81      	ldr	r3, [pc, #516]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	4a80      	ldr	r2, [pc, #512]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb6:	e01c      	b.n	8006ff2 <HAL_RCC_OscConfig+0x32a>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	2b05      	cmp	r3, #5
 8006fbe:	d10c      	bne.n	8006fda <HAL_RCC_OscConfig+0x312>
 8006fc0:	4b7b      	ldr	r3, [pc, #492]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc4:	4a7a      	ldr	r2, [pc, #488]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fc6:	f043 0304 	orr.w	r3, r3, #4
 8006fca:	6713      	str	r3, [r2, #112]	; 0x70
 8006fcc:	4b78      	ldr	r3, [pc, #480]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	4a77      	ldr	r2, [pc, #476]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fd2:	f043 0301 	orr.w	r3, r3, #1
 8006fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd8:	e00b      	b.n	8006ff2 <HAL_RCC_OscConfig+0x32a>
 8006fda:	4b75      	ldr	r3, [pc, #468]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	4a74      	ldr	r2, [pc, #464]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe6:	4b72      	ldr	r3, [pc, #456]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	4a71      	ldr	r2, [pc, #452]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8006fec:	f023 0304 	bic.w	r3, r3, #4
 8006ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d015      	beq.n	8007026 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ffa:	f7fb fd2d 	bl	8002a58 <HAL_GetTick>
 8006ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007000:	e00a      	b.n	8007018 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007002:	f7fb fd29 	bl	8002a58 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007010:	4293      	cmp	r3, r2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e0c5      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007018:	4b65      	ldr	r3, [pc, #404]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0ee      	beq.n	8007002 <HAL_RCC_OscConfig+0x33a>
 8007024:	e014      	b.n	8007050 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007026:	f7fb fd17 	bl	8002a58 <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800702c:	e00a      	b.n	8007044 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800702e:	f7fb fd13 	bl	8002a58 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	f241 3288 	movw	r2, #5000	; 0x1388
 800703c:	4293      	cmp	r3, r2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e0af      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007044:	4b5a      	ldr	r3, [pc, #360]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1ee      	bne.n	800702e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d105      	bne.n	8007062 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007056:	4b56      	ldr	r3, [pc, #344]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	4a55      	ldr	r2, [pc, #340]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 800705c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 809b 	beq.w	80071a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800706c:	4b50      	ldr	r3, [pc, #320]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f003 030c 	and.w	r3, r3, #12
 8007074:	2b08      	cmp	r3, #8
 8007076:	d05c      	beq.n	8007132 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d141      	bne.n	8007104 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007080:	4b4c      	ldr	r3, [pc, #304]	; (80071b4 <HAL_RCC_OscConfig+0x4ec>)
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007086:	f7fb fce7 	bl	8002a58 <HAL_GetTick>
 800708a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800708e:	f7fb fce3 	bl	8002a58 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e081      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a0:	4b43      	ldr	r3, [pc, #268]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f0      	bne.n	800708e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	019b      	lsls	r3, r3, #6
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	3b01      	subs	r3, #1
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	4937      	ldr	r1, [pc, #220]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070d6:	4b37      	ldr	r3, [pc, #220]	; (80071b4 <HAL_RCC_OscConfig+0x4ec>)
 80070d8:	2201      	movs	r2, #1
 80070da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070dc:	f7fb fcbc 	bl	8002a58 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e4:	f7fb fcb8 	bl	8002a58 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e056      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f6:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HAL_RCC_OscConfig+0x41c>
 8007102:	e04e      	b.n	80071a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007104:	4b2b      	ldr	r3, [pc, #172]	; (80071b4 <HAL_RCC_OscConfig+0x4ec>)
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800710a:	f7fb fca5 	bl	8002a58 <HAL_GetTick>
 800710e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007110:	e008      	b.n	8007124 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007112:	f7fb fca1 	bl	8002a58 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e03f      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007124:	4b22      	ldr	r3, [pc, #136]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f0      	bne.n	8007112 <HAL_RCC_OscConfig+0x44a>
 8007130:	e037      	b.n	80071a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e032      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800713e:	4b1c      	ldr	r3, [pc, #112]	; (80071b0 <HAL_RCC_OscConfig+0x4e8>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d028      	beq.n	800719e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007156:	429a      	cmp	r2, r3
 8007158:	d121      	bne.n	800719e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007164:	429a      	cmp	r2, r3
 8007166:	d11a      	bne.n	800719e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800716e:	4013      	ands	r3, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007174:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007176:	4293      	cmp	r3, r2
 8007178:	d111      	bne.n	800719e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	3b01      	subs	r3, #1
 8007188:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800718a:	429a      	cmp	r2, r3
 800718c:	d107      	bne.n	800719e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800719a:	429a      	cmp	r2, r3
 800719c:	d001      	beq.n	80071a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40007000 	.word	0x40007000
 80071b0:	40023800 	.word	0x40023800
 80071b4:	42470060 	.word	0x42470060

080071b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0cc      	b.n	8007366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071cc:	4b68      	ldr	r3, [pc, #416]	; (8007370 <HAL_RCC_ClockConfig+0x1b8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0307 	and.w	r3, r3, #7
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d90c      	bls.n	80071f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071da:	4b65      	ldr	r3, [pc, #404]	; (8007370 <HAL_RCC_ClockConfig+0x1b8>)
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071e2:	4b63      	ldr	r3, [pc, #396]	; (8007370 <HAL_RCC_ClockConfig+0x1b8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d001      	beq.n	80071f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e0b8      	b.n	8007366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d020      	beq.n	8007242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800720c:	4b59      	ldr	r3, [pc, #356]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4a58      	ldr	r2, [pc, #352]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d005      	beq.n	8007230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007224:	4b53      	ldr	r3, [pc, #332]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	4a52      	ldr	r2, [pc, #328]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 800722a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800722e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007230:	4b50      	ldr	r3, [pc, #320]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	494d      	ldr	r1, [pc, #308]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	4313      	orrs	r3, r2
 8007240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d044      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d107      	bne.n	8007266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007256:	4b47      	ldr	r3, [pc, #284]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d119      	bne.n	8007296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e07f      	b.n	8007366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d003      	beq.n	8007276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007272:	2b03      	cmp	r3, #3
 8007274:	d107      	bne.n	8007286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007276:	4b3f      	ldr	r3, [pc, #252]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e06f      	b.n	8007366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007286:	4b3b      	ldr	r3, [pc, #236]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e067      	b.n	8007366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007296:	4b37      	ldr	r3, [pc, #220]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f023 0203 	bic.w	r2, r3, #3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	4934      	ldr	r1, [pc, #208]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072a8:	f7fb fbd6 	bl	8002a58 <HAL_GetTick>
 80072ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ae:	e00a      	b.n	80072c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b0:	f7fb fbd2 	bl	8002a58 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80072be:	4293      	cmp	r3, r2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e04f      	b.n	8007366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c6:	4b2b      	ldr	r3, [pc, #172]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 020c 	and.w	r2, r3, #12
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d1eb      	bne.n	80072b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072d8:	4b25      	ldr	r3, [pc, #148]	; (8007370 <HAL_RCC_ClockConfig+0x1b8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0307 	and.w	r3, r3, #7
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d20c      	bcs.n	8007300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072e6:	4b22      	ldr	r3, [pc, #136]	; (8007370 <HAL_RCC_ClockConfig+0x1b8>)
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ee:	4b20      	ldr	r3, [pc, #128]	; (8007370 <HAL_RCC_ClockConfig+0x1b8>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d001      	beq.n	8007300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e032      	b.n	8007366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800730c:	4b19      	ldr	r3, [pc, #100]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	4916      	ldr	r1, [pc, #88]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 800731a:	4313      	orrs	r3, r2
 800731c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0308 	and.w	r3, r3, #8
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800732a:	4b12      	ldr	r3, [pc, #72]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	490e      	ldr	r1, [pc, #56]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 800733a:	4313      	orrs	r3, r2
 800733c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800733e:	f000 f821 	bl	8007384 <HAL_RCC_GetSysClockFreq>
 8007342:	4602      	mov	r2, r0
 8007344:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <HAL_RCC_ClockConfig+0x1bc>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	091b      	lsrs	r3, r3, #4
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	490a      	ldr	r1, [pc, #40]	; (8007378 <HAL_RCC_ClockConfig+0x1c0>)
 8007350:	5ccb      	ldrb	r3, [r1, r3]
 8007352:	fa22 f303 	lsr.w	r3, r2, r3
 8007356:	4a09      	ldr	r2, [pc, #36]	; (800737c <HAL_RCC_ClockConfig+0x1c4>)
 8007358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800735a:	4b09      	ldr	r3, [pc, #36]	; (8007380 <HAL_RCC_ClockConfig+0x1c8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f7fb fb36 	bl	80029d0 <HAL_InitTick>

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40023c00 	.word	0x40023c00
 8007374:	40023800 	.word	0x40023800
 8007378:	0800c98c 	.word	0x0800c98c
 800737c:	200002a4 	.word	0x200002a4
 8007380:	200002a8 	.word	0x200002a8

08007384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	607b      	str	r3, [r7, #4]
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800739c:	4b67      	ldr	r3, [pc, #412]	; (800753c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f003 030c 	and.w	r3, r3, #12
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d00d      	beq.n	80073c4 <HAL_RCC_GetSysClockFreq+0x40>
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	f200 80bd 	bhi.w	8007528 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_RCC_GetSysClockFreq+0x34>
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d003      	beq.n	80073be <HAL_RCC_GetSysClockFreq+0x3a>
 80073b6:	e0b7      	b.n	8007528 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073b8:	4b61      	ldr	r3, [pc, #388]	; (8007540 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073ba:	60bb      	str	r3, [r7, #8]
       break;
 80073bc:	e0b7      	b.n	800752e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073be:	4b61      	ldr	r3, [pc, #388]	; (8007544 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80073c0:	60bb      	str	r3, [r7, #8]
      break;
 80073c2:	e0b4      	b.n	800752e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073c4:	4b5d      	ldr	r3, [pc, #372]	; (800753c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073ce:	4b5b      	ldr	r3, [pc, #364]	; (800753c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d04d      	beq.n	8007476 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073da:	4b58      	ldr	r3, [pc, #352]	; (800753c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	099b      	lsrs	r3, r3, #6
 80073e0:	461a      	mov	r2, r3
 80073e2:	f04f 0300 	mov.w	r3, #0
 80073e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80073ea:	f04f 0100 	mov.w	r1, #0
 80073ee:	ea02 0800 	and.w	r8, r2, r0
 80073f2:	ea03 0901 	and.w	r9, r3, r1
 80073f6:	4640      	mov	r0, r8
 80073f8:	4649      	mov	r1, r9
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	014b      	lsls	r3, r1, #5
 8007404:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007408:	0142      	lsls	r2, r0, #5
 800740a:	4610      	mov	r0, r2
 800740c:	4619      	mov	r1, r3
 800740e:	ebb0 0008 	subs.w	r0, r0, r8
 8007412:	eb61 0109 	sbc.w	r1, r1, r9
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	018b      	lsls	r3, r1, #6
 8007420:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007424:	0182      	lsls	r2, r0, #6
 8007426:	1a12      	subs	r2, r2, r0
 8007428:	eb63 0301 	sbc.w	r3, r3, r1
 800742c:	f04f 0000 	mov.w	r0, #0
 8007430:	f04f 0100 	mov.w	r1, #0
 8007434:	00d9      	lsls	r1, r3, #3
 8007436:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800743a:	00d0      	lsls	r0, r2, #3
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	eb12 0208 	adds.w	r2, r2, r8
 8007444:	eb43 0309 	adc.w	r3, r3, r9
 8007448:	f04f 0000 	mov.w	r0, #0
 800744c:	f04f 0100 	mov.w	r1, #0
 8007450:	0259      	lsls	r1, r3, #9
 8007452:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007456:	0250      	lsls	r0, r2, #9
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	461a      	mov	r2, r3
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	f7f8 feae 	bl	80001c8 <__aeabi_uldivmod>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4613      	mov	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e04a      	b.n	800750c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007476:	4b31      	ldr	r3, [pc, #196]	; (800753c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	099b      	lsrs	r3, r3, #6
 800747c:	461a      	mov	r2, r3
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007486:	f04f 0100 	mov.w	r1, #0
 800748a:	ea02 0400 	and.w	r4, r2, r0
 800748e:	ea03 0501 	and.w	r5, r3, r1
 8007492:	4620      	mov	r0, r4
 8007494:	4629      	mov	r1, r5
 8007496:	f04f 0200 	mov.w	r2, #0
 800749a:	f04f 0300 	mov.w	r3, #0
 800749e:	014b      	lsls	r3, r1, #5
 80074a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074a4:	0142      	lsls	r2, r0, #5
 80074a6:	4610      	mov	r0, r2
 80074a8:	4619      	mov	r1, r3
 80074aa:	1b00      	subs	r0, r0, r4
 80074ac:	eb61 0105 	sbc.w	r1, r1, r5
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	018b      	lsls	r3, r1, #6
 80074ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074be:	0182      	lsls	r2, r0, #6
 80074c0:	1a12      	subs	r2, r2, r0
 80074c2:	eb63 0301 	sbc.w	r3, r3, r1
 80074c6:	f04f 0000 	mov.w	r0, #0
 80074ca:	f04f 0100 	mov.w	r1, #0
 80074ce:	00d9      	lsls	r1, r3, #3
 80074d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d4:	00d0      	lsls	r0, r2, #3
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	1912      	adds	r2, r2, r4
 80074dc:	eb45 0303 	adc.w	r3, r5, r3
 80074e0:	f04f 0000 	mov.w	r0, #0
 80074e4:	f04f 0100 	mov.w	r1, #0
 80074e8:	0299      	lsls	r1, r3, #10
 80074ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80074ee:	0290      	lsls	r0, r2, #10
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4610      	mov	r0, r2
 80074f6:	4619      	mov	r1, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	f7f8 fe62 	bl	80001c8 <__aeabi_uldivmod>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4613      	mov	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	0c1b      	lsrs	r3, r3, #16
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	3301      	adds	r3, #1
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	60bb      	str	r3, [r7, #8]
      break;
 8007526:	e002      	b.n	800752e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800752a:	60bb      	str	r3, [r7, #8]
      break;
 800752c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800752e:	68bb      	ldr	r3, [r7, #8]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800753a:	bf00      	nop
 800753c:	40023800 	.word	0x40023800
 8007540:	00f42400 	.word	0x00f42400
 8007544:	007a1200 	.word	0x007a1200

08007548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <HAL_RCC_GetHCLKFreq+0x14>)
 800754e:	681b      	ldr	r3, [r3, #0]
}
 8007550:	4618      	mov	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	200002a4 	.word	0x200002a4

08007560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007564:	f7ff fff0 	bl	8007548 <HAL_RCC_GetHCLKFreq>
 8007568:	4602      	mov	r2, r0
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	0a9b      	lsrs	r3, r3, #10
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	4903      	ldr	r1, [pc, #12]	; (8007584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007576:	5ccb      	ldrb	r3, [r1, r3]
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40023800 	.word	0x40023800
 8007584:	0800c99c 	.word	0x0800c99c

08007588 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d035      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075b0:	4b62      	ldr	r3, [pc, #392]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075b6:	f7fb fa4f 	bl	8002a58 <HAL_GetTick>
 80075ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075bc:	e008      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075be:	f7fb fa4b 	bl	8002a58 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e0b0      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075d0:	4b5b      	ldr	r3, [pc, #364]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1f0      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	019a      	lsls	r2, r3, #6
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	071b      	lsls	r3, r3, #28
 80075e8:	4955      	ldr	r1, [pc, #340]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075f0:	4b52      	ldr	r3, [pc, #328]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075f6:	f7fb fa2f 	bl	8002a58 <HAL_GetTick>
 80075fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075fc:	e008      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075fe:	f7fb fa2b 	bl	8002a58 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e090      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007610:	4b4b      	ldr	r3, [pc, #300]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0f0      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8083 	beq.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	4b44      	ldr	r3, [pc, #272]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	4a43      	ldr	r2, [pc, #268]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007638:	6413      	str	r3, [r2, #64]	; 0x40
 800763a:	4b41      	ldr	r3, [pc, #260]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007646:	4b3f      	ldr	r3, [pc, #252]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a3e      	ldr	r2, [pc, #248]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800764c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007650:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007652:	f7fb fa01 	bl	8002a58 <HAL_GetTick>
 8007656:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007658:	e008      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800765a:	f7fb f9fd 	bl	8002a58 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e062      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800766c:	4b35      	ldr	r3, [pc, #212]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007678:	4b31      	ldr	r3, [pc, #196]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800767a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007680:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02f      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	429a      	cmp	r2, r3
 8007694:	d028      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007696:	4b2a      	ldr	r3, [pc, #168]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800769e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076a0:	4b29      	ldr	r3, [pc, #164]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80076a2:	2201      	movs	r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076a6:	4b28      	ldr	r3, [pc, #160]	; (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80076ac:	4a24      	ldr	r2, [pc, #144]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80076b2:	4b23      	ldr	r3, [pc, #140]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d114      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80076be:	f7fb f9cb 	bl	8002a58 <HAL_GetTick>
 80076c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c4:	e00a      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076c6:	f7fb f9c7 	bl	8002a58 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d901      	bls.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e02a      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076dc:	4b18      	ldr	r3, [pc, #96]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0ee      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076f4:	d10d      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770a:	490d      	ldr	r1, [pc, #52]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800770c:	4313      	orrs	r3, r2
 800770e:	608b      	str	r3, [r1, #8]
 8007710:	e005      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007712:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007718:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800771c:	6093      	str	r3, [r2, #8]
 800771e:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800772a:	4905      	ldr	r1, [pc, #20]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800772c:	4313      	orrs	r3, r2
 800772e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	42470068 	.word	0x42470068
 8007740:	40023800 	.word	0x40023800
 8007744:	40007000 	.word	0x40007000
 8007748:	42470e40 	.word	0x42470e40

0800774c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d13e      	bne.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800776a:	4b23      	ldr	r3, [pc, #140]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d12f      	bne.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007780:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007782:	617b      	str	r3, [r7, #20]
          break;
 8007784:	e02f      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007786:	4b1c      	ldr	r3, [pc, #112]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007792:	d108      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007794:	4b18      	ldr	r3, [pc, #96]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800779c:	4a18      	ldr	r2, [pc, #96]	; (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800779e:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	e007      	b.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ae:	4a15      	ldr	r2, [pc, #84]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80077b6:	4b10      	ldr	r3, [pc, #64]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077bc:	099b      	lsrs	r3, r3, #6
 80077be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	fb02 f303 	mul.w	r3, r2, r3
 80077c8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d0:	0f1b      	lsrs	r3, r3, #28
 80077d2:	f003 0307 	and.w	r3, r3, #7
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	617b      	str	r3, [r7, #20]
          break;
 80077de:	e002      	b.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
          break;
 80077e4:	bf00      	nop
        }
      }
      break;
 80077e6:	bf00      	nop
    }
  }
  return frequency;
 80077e8:	697b      	ldr	r3, [r7, #20]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40023800 	.word	0x40023800
 80077fc:	00bb8000 	.word	0x00bb8000
 8007800:	007a1200 	.word	0x007a1200
 8007804:	00f42400 	.word	0x00f42400

08007808 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e07b      	b.n	8007912 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	d108      	bne.n	8007834 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782a:	d009      	beq.n	8007840 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	61da      	str	r2, [r3, #28]
 8007832:	e005      	b.n	8007840 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fa ff80 	bl	8002760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007876:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078ba:	431a      	orrs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c4:	ea42 0103 	orr.w	r1, r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	0c1b      	lsrs	r3, r3, #16
 80078de:	f003 0104 	and.w	r1, r3, #4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	f003 0210 	and.w	r2, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69da      	ldr	r2, [r3, #28]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007900:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b088      	sub	sp, #32
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <HAL_SPI_Transmit+0x22>
 8007938:	2302      	movs	r3, #2
 800793a:	e126      	b.n	8007b8a <HAL_SPI_Transmit+0x270>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007944:	f7fb f888 	bl	8002a58 <HAL_GetTick>
 8007948:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b01      	cmp	r3, #1
 8007958:	d002      	beq.n	8007960 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800795a:	2302      	movs	r3, #2
 800795c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800795e:	e10b      	b.n	8007b78 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_SPI_Transmit+0x52>
 8007966:	88fb      	ldrh	r3, [r7, #6]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007970:	e102      	b.n	8007b78 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2203      	movs	r2, #3
 8007976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b8:	d10f      	bne.n	80079da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	d007      	beq.n	80079f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a00:	d14b      	bne.n	8007a9a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <HAL_SPI_Transmit+0xf6>
 8007a0a:	8afb      	ldrh	r3, [r7, #22]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d13e      	bne.n	8007a8e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	881a      	ldrh	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a20:	1c9a      	adds	r2, r3, #2
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a34:	e02b      	b.n	8007a8e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d112      	bne.n	8007a6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a54:	1c9a      	adds	r2, r3, #2
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a68:	e011      	b.n	8007a8e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a6a:	f7fa fff5 	bl	8002a58 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d803      	bhi.n	8007a82 <HAL_SPI_Transmit+0x168>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a80:	d102      	bne.n	8007a88 <HAL_SPI_Transmit+0x16e>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d102      	bne.n	8007a8e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a8c:	e074      	b.n	8007b78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1ce      	bne.n	8007a36 <HAL_SPI_Transmit+0x11c>
 8007a98:	e04c      	b.n	8007b34 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_SPI_Transmit+0x18e>
 8007aa2:	8afb      	ldrh	r3, [r7, #22]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d140      	bne.n	8007b2a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	7812      	ldrb	r2, [r2, #0]
 8007ab4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ace:	e02c      	b.n	8007b2a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d113      	bne.n	8007b06 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b04:	e011      	b.n	8007b2a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b06:	f7fa ffa7 	bl	8002a58 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d803      	bhi.n	8007b1e <HAL_SPI_Transmit+0x204>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b1c:	d102      	bne.n	8007b24 <HAL_SPI_Transmit+0x20a>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b28:	e026      	b.n	8007b78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1cd      	bne.n	8007ad0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f8b3 	bl	8007ca4 <SPI_EndRxTxTransaction>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b52:	2300      	movs	r3, #0
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	77fb      	strb	r3, [r7, #31]
 8007b74:	e000      	b.n	8007b78 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ba4:	f7fa ff58 	bl	8002a58 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bb4:	f7fa ff50 	bl	8002a58 <HAL_GetTick>
 8007bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bba:	4b39      	ldr	r3, [pc, #228]	; (8007ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	015b      	lsls	r3, r3, #5
 8007bc0:	0d1b      	lsrs	r3, r3, #20
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	fb02 f303 	mul.w	r3, r2, r3
 8007bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bca:	e054      	b.n	8007c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bd2:	d050      	beq.n	8007c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bd4:	f7fa ff40 	bl	8002a58 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d902      	bls.n	8007bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d13d      	bne.n	8007c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c02:	d111      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c0c:	d004      	beq.n	8007c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c16:	d107      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c30:	d10f      	bne.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e017      	b.n	8007c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	bf0c      	ite	eq
 8007c86:	2301      	moveq	r3, #1
 8007c88:	2300      	movne	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d19b      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3720      	adds	r7, #32
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200002a4 	.word	0x200002a4

08007ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cb0:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <SPI_EndRxTxTransaction+0x7c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a1b      	ldr	r2, [pc, #108]	; (8007d24 <SPI_EndRxTxTransaction+0x80>)
 8007cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cba:	0d5b      	lsrs	r3, r3, #21
 8007cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
 8007cc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cce:	d112      	bne.n	8007cf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2180      	movs	r1, #128	; 0x80
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff ff5a 	bl	8007b94 <SPI_WaitFlagStateUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d016      	beq.n	8007d14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	f043 0220 	orr.w	r2, r3, #32
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e00f      	b.n	8007d16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d0f2      	beq.n	8007cf6 <SPI_EndRxTxTransaction+0x52>
 8007d10:	e000      	b.n	8007d14 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d12:	bf00      	nop
  }

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	200002a4 	.word	0x200002a4
 8007d24:	165e9f81 	.word	0x165e9f81

08007d28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d28:	b084      	sub	sp, #16
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	f107 001c 	add.w	r0, r7, #28
 8007d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d122      	bne.n	8007d86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d105      	bne.n	8007d7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9a0 	bl	80080c0 <USB_CoreReset>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]
 8007d84:	e01a      	b.n	8007dbc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f994 	bl	80080c0 <USB_CoreReset>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	639a      	str	r2, [r3, #56]	; 0x38
 8007dae:	e005      	b.n	8007dbc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10b      	bne.n	8007dda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f043 0206 	orr.w	r2, r3, #6
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f043 0220 	orr.w	r2, r3, #32
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007de6:	b004      	add	sp, #16
 8007de8:	4770      	bx	lr

08007dea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f043 0201 	orr.w	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f023 0201 	bic.w	r2, r3, #1
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d115      	bne.n	8007e7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	f7fa fe07 	bl	8002a70 <HAL_Delay>
      ms++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f91a 	bl	80080a2 <USB_GetMode>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d01e      	beq.n	8007eb2 <USB_SetCurrentMode+0x84>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b31      	cmp	r3, #49	; 0x31
 8007e78:	d9f0      	bls.n	8007e5c <USB_SetCurrentMode+0x2e>
 8007e7a:	e01a      	b.n	8007eb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d115      	bne.n	8007eae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f7fa fdee 	bl	8002a70 <HAL_Delay>
      ms++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f901 	bl	80080a2 <USB_GetMode>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d005      	beq.n	8007eb2 <USB_SetCurrentMode+0x84>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b31      	cmp	r3, #49	; 0x31
 8007eaa:	d9f0      	bls.n	8007e8e <USB_SetCurrentMode+0x60>
 8007eac:	e001      	b.n	8007eb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e005      	b.n	8007ebe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b32      	cmp	r3, #50	; 0x32
 8007eb6:	d101      	bne.n	8007ebc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	019b      	lsls	r3, r3, #6
 8007eda:	f043 0220 	orr.w	r2, r3, #32
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <USB_FlushTxFifo+0x44>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d901      	bls.n	8007ef2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e006      	b.n	8007f00 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d0f1      	beq.n	8007ee2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	00030d40 	.word	0x00030d40

08007f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2210      	movs	r2, #16
 8007f20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	4a08      	ldr	r2, [pc, #32]	; (8007f4c <USB_FlushRxFifo+0x3c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e006      	b.n	8007f40 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f003 0310 	and.w	r3, r3, #16
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d0f1      	beq.n	8007f22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	00030d40 	.word	0x00030d40

08007f50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b089      	sub	sp, #36	; 0x24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	460b      	mov	r3, r1
 8007f60:	71fb      	strb	r3, [r7, #7]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d123      	bne.n	8007fbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f76:	88bb      	ldrh	r3, [r7, #4]
 8007f78:	3303      	adds	r3, #3
 8007f7a:	089b      	lsrs	r3, r3, #2
 8007f7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61bb      	str	r3, [r7, #24]
 8007f82:	e018      	b.n	8007fb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f84:	79fb      	ldrb	r3, [r7, #7]
 8007f86:	031a      	lsls	r2, r3, #12
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f90:	461a      	mov	r2, r3
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	3301      	adds	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d3e2      	bcc.n	8007f84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3724      	adds	r7, #36	; 0x24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b08b      	sub	sp, #44	; 0x2c
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	089b      	lsrs	r3, r3, #2
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	623b      	str	r3, [r7, #32]
 8007ff6:	e014      	b.n	8008022 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	601a      	str	r2, [r3, #0]
    pDest++;
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	3301      	adds	r3, #1
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	3301      	adds	r3, #1
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	3301      	adds	r3, #1
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	3301      	adds	r3, #1
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	3301      	adds	r3, #1
 8008020:	623b      	str	r3, [r7, #32]
 8008022:	6a3a      	ldr	r2, [r7, #32]
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	429a      	cmp	r2, r3
 8008028:	d3e6      	bcc.n	8007ff8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800802a:	8bfb      	ldrh	r3, [r7, #30]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01e      	beq.n	800806e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803a:	461a      	mov	r2, r3
 800803c:	f107 0310 	add.w	r3, r7, #16
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
 8008050:	b2da      	uxtb	r2, r3
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	701a      	strb	r2, [r3, #0]
      i++;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	3301      	adds	r3, #1
 800805a:	623b      	str	r3, [r7, #32]
      pDest++;
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	3301      	adds	r3, #1
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008062:	8bfb      	ldrh	r3, [r7, #30]
 8008064:	3b01      	subs	r3, #1
 8008066:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008068:	8bfb      	ldrh	r3, [r7, #30]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1ea      	bne.n	8008044 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008070:	4618      	mov	r0, r3
 8008072:	372c      	adds	r7, #44	; 0x2c
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4013      	ands	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008094:	68fb      	ldr	r3, [r7, #12]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f003 0301 	and.w	r3, r3, #1
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
	...

080080c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3301      	adds	r3, #1
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	4a13      	ldr	r2, [pc, #76]	; (8008120 <USB_CoreReset+0x60>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d901      	bls.n	80080dc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e01a      	b.n	8008112 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	daf3      	bge.n	80080cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f043 0201 	orr.w	r2, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	4a09      	ldr	r2, [pc, #36]	; (8008120 <USB_CoreReset+0x60>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d901      	bls.n	8008104 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e006      	b.n	8008112 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b01      	cmp	r3, #1
 800810e:	d0f1      	beq.n	80080f4 <USB_CoreReset+0x34>

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	00030d40 	.word	0x00030d40

08008124 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008124:	b084      	sub	sp, #16
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	f107 001c 	add.w	r0, r7, #28
 8008132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008140:	461a      	mov	r2, r3
 8008142:	2300      	movs	r3, #0
 8008144:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d018      	beq.n	80081a8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	2b01      	cmp	r3, #1
 800817a:	d10a      	bne.n	8008192 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800818a:	f043 0304 	orr.w	r3, r3, #4
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	e014      	b.n	80081bc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081a0:	f023 0304 	bic.w	r3, r3, #4
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	e009      	b.n	80081bc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081b6:	f023 0304 	bic.w	r3, r3, #4
 80081ba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80081bc:	2110      	movs	r1, #16
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff fe82 	bl	8007ec8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff fea3 	bl	8007f10 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e015      	b.n	80081fc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081dc:	461a      	mov	r2, r3
 80081de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f0:	461a      	mov	r2, r3
 80081f2:	2300      	movs	r3, #0
 80081f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	429a      	cmp	r2, r3
 8008202:	d3e5      	bcc.n	80081d0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008210:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008224:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a13      	ldr	r2, [pc, #76]	; (8008278 <USB_HostInit+0x154>)
 800822a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a13      	ldr	r2, [pc, #76]	; (800827c <USB_HostInit+0x158>)
 8008230:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008234:	e009      	b.n	800824a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2280      	movs	r2, #128	; 0x80
 800823a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a10      	ldr	r2, [pc, #64]	; (8008280 <USB_HostInit+0x15c>)
 8008240:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a0f      	ldr	r2, [pc, #60]	; (8008284 <USB_HostInit+0x160>)
 8008246:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	2b00      	cmp	r3, #0
 800824e:	d105      	bne.n	800825c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	f043 0210 	orr.w	r2, r3, #16
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	4b09      	ldr	r3, [pc, #36]	; (8008288 <USB_HostInit+0x164>)
 8008262:	4313      	orrs	r3, r2
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008274:	b004      	add	sp, #16
 8008276:	4770      	bx	lr
 8008278:	01000200 	.word	0x01000200
 800827c:	00e00300 	.word	0x00e00300
 8008280:	00600080 	.word	0x00600080
 8008284:	004000e0 	.word	0x004000e0
 8008288:	a3200008 	.word	0xa3200008

0800828c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80082aa:	f023 0303 	bic.w	r3, r3, #3
 80082ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	68f9      	ldr	r1, [r7, #12]
 80082c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80082c4:	4313      	orrs	r3, r2
 80082c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d107      	bne.n	80082de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082d4:	461a      	mov	r2, r3
 80082d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80082da:	6053      	str	r3, [r2, #4]
 80082dc:	e009      	b.n	80082f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d106      	bne.n	80082f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ea:	461a      	mov	r2, r3
 80082ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80082f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008320:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800832a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800832e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008330:	2064      	movs	r0, #100	; 0x64
 8008332:	f7fa fb9d 	bl	8002a70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800833e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008342:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008344:	200a      	movs	r0, #10
 8008346:	f7fa fb93 	bl	8002a70 <HAL_Delay>

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008378:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d109      	bne.n	8008398 <USB_DriveVbus+0x44>
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d106      	bne.n	8008398 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008392:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008396:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800839e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a2:	d109      	bne.n	80083b8 <USB_DriveVbus+0x64>
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	0c5b      	lsrs	r3, r3, #17
 80083e4:	f003 0303 	and.w	r3, r3, #3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	b29b      	uxth	r3, r3
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
	...

08008418 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b088      	sub	sp, #32
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	4608      	mov	r0, r1
 8008422:	4611      	mov	r1, r2
 8008424:	461a      	mov	r2, r3
 8008426:	4603      	mov	r3, r0
 8008428:	70fb      	strb	r3, [r7, #3]
 800842a:	460b      	mov	r3, r1
 800842c:	70bb      	strb	r3, [r7, #2]
 800842e:	4613      	mov	r3, r2
 8008430:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	4413      	add	r3, r2
 8008442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008446:	461a      	mov	r2, r3
 8008448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800844c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800844e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008452:	2b03      	cmp	r3, #3
 8008454:	d87e      	bhi.n	8008554 <USB_HC_Init+0x13c>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <USB_HC_Init+0x44>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	0800846d 	.word	0x0800846d
 8008460:	08008517 	.word	0x08008517
 8008464:	0800846d 	.word	0x0800846d
 8008468:	080084d9 	.word	0x080084d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	4413      	add	r3, r2
 8008474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008478:	461a      	mov	r2, r3
 800847a:	f240 439d 	movw	r3, #1181	; 0x49d
 800847e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008480:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008484:	2b00      	cmp	r3, #0
 8008486:	da10      	bge.n	80084aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	4413      	add	r3, r2
 8008490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	78fa      	ldrb	r2, [r7, #3]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	440a      	add	r2, r1
 800849e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084a6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80084a8:	e057      	b.n	800855a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d051      	beq.n	800855a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	0151      	lsls	r1, r2, #5
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084d4:	60d3      	str	r3, [r2, #12]
      break;
 80084d6:	e040      	b.n	800855a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e4:	461a      	mov	r2, r3
 80084e6:	f240 639d 	movw	r3, #1693	; 0x69d
 80084ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da34      	bge.n	800855e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	440a      	add	r2, r1
 800850a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800850e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008512:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008514:	e023      	b.n	800855e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008522:	461a      	mov	r2, r3
 8008524:	f240 2325 	movw	r3, #549	; 0x225
 8008528:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800852a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800852e:	2b00      	cmp	r3, #0
 8008530:	da17      	bge.n	8008562 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	440a      	add	r2, r1
 8008548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800854c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008550:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008552:	e006      	b.n	8008562 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	77fb      	strb	r3, [r7, #31]
      break;
 8008558:	e004      	b.n	8008564 <USB_HC_Init+0x14c>
      break;
 800855a:	bf00      	nop
 800855c:	e002      	b.n	8008564 <USB_HC_Init+0x14c>
      break;
 800855e:	bf00      	nop
 8008560:	e000      	b.n	8008564 <USB_HC_Init+0x14c>
      break;
 8008562:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	2101      	movs	r1, #1
 8008574:	fa01 f303 	lsl.w	r3, r1, r3
 8008578:	6939      	ldr	r1, [r7, #16]
 800857a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800857e:	4313      	orrs	r3, r2
 8008580:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800858e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008592:	2b00      	cmp	r3, #0
 8008594:	da03      	bge.n	800859e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	e001      	b.n	80085a2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff ff0f 	bl	80083c6 <USB_GetHostSpeed>
 80085a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80085aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d106      	bne.n	80085c0 <USB_HC_Init+0x1a8>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d003      	beq.n	80085c0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80085b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	e001      	b.n	80085c4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085c4:	787b      	ldrb	r3, [r7, #1]
 80085c6:	059b      	lsls	r3, r3, #22
 80085c8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085cc:	78bb      	ldrb	r3, [r7, #2]
 80085ce:	02db      	lsls	r3, r3, #11
 80085d0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085da:	049b      	lsls	r3, r3, #18
 80085dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	0159      	lsls	r1, r3, #5
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	440b      	add	r3, r1
 80085f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008600:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008602:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008606:	2b03      	cmp	r3, #3
 8008608:	d10f      	bne.n	800862a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	4413      	add	r3, r2
 8008612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	78fa      	ldrb	r2, [r7, #3]
 800861a:	0151      	lsls	r1, r2, #5
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	440a      	add	r2, r1
 8008620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008624:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008628:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800862a:	7ffb      	ldrb	r3, [r7, #31]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3720      	adds	r7, #32
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08c      	sub	sp, #48	; 0x30
 8008638:	af02      	add	r7, sp, #8
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800864c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008650:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865a:	2b00      	cmp	r3, #0
 800865c:	d02d      	beq.n	80086ba <USB_HC_StartXfer+0x86>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	791b      	ldrb	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d129      	bne.n	80086ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d117      	bne.n	800869c <USB_HC_StartXfer+0x68>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	79db      	ldrb	r3, [r3, #7]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d003      	beq.n	800867c <USB_HC_StartXfer+0x48>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	79db      	ldrb	r3, [r3, #7]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d10f      	bne.n	800869c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	4413      	add	r3, r2
 8008684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	0151      	lsls	r1, r2, #5
 800868e:	6a3a      	ldr	r2, [r7, #32]
 8008690:	440a      	add	r2, r1
 8008692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10b      	bne.n	80086ba <USB_HC_StartXfer+0x86>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	795b      	ldrb	r3, [r3, #5]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d107      	bne.n	80086ba <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	4619      	mov	r1, r3
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 fa2f 	bl	8008b14 <USB_DoPing>
      return HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	e0f8      	b.n	80088ac <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d018      	beq.n	80086f4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	8912      	ldrh	r2, [r2, #8]
 80086ca:	4413      	add	r3, r2
 80086cc:	3b01      	subs	r3, #1
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	8912      	ldrh	r2, [r2, #8]
 80086d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80086d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80086da:	8b7b      	ldrh	r3, [r7, #26]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d90b      	bls.n	80086f8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80086e0:	8b7b      	ldrh	r3, [r7, #26]
 80086e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	8912      	ldrh	r2, [r2, #8]
 80086ea:	fb02 f203 	mul.w	r2, r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	611a      	str	r2, [r3, #16]
 80086f2:	e001      	b.n	80086f8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80086f4:	2301      	movs	r3, #1
 80086f6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	78db      	ldrb	r3, [r3, #3]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d007      	beq.n	8008710 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008700:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	8912      	ldrh	r2, [r2, #8]
 8008706:	fb02 f203 	mul.w	r2, r2, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	611a      	str	r2, [r3, #16]
 800870e:	e003      	b.n	8008718 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	695a      	ldr	r2, [r3, #20]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008722:	04d9      	lsls	r1, r3, #19
 8008724:	4b63      	ldr	r3, [pc, #396]	; (80088b4 <USB_HC_StartXfer+0x280>)
 8008726:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008728:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	7a9b      	ldrb	r3, [r3, #10]
 800872e:	075b      	lsls	r3, r3, #29
 8008730:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008734:	69f9      	ldr	r1, [r7, #28]
 8008736:	0148      	lsls	r0, r1, #5
 8008738:	6a39      	ldr	r1, [r7, #32]
 800873a:	4401      	add	r1, r0
 800873c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008740:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008742:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	68d9      	ldr	r1, [r3, #12]
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	4413      	add	r3, r2
 8008756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875a:	460a      	mov	r2, r1
 800875c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	bf0c      	ite	eq
 800876e:	2301      	moveq	r3, #1
 8008770:	2300      	movne	r3, #0
 8008772:	b2db      	uxtb	r3, r3
 8008774:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	4413      	add	r3, r2
 800877e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	6a3a      	ldr	r2, [r7, #32]
 800878a:	440a      	add	r2, r1
 800878c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008790:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008794:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	4413      	add	r3, r2
 800879e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	7e7b      	ldrb	r3, [r7, #25]
 80087a6:	075b      	lsls	r3, r3, #29
 80087a8:	69f9      	ldr	r1, [r7, #28]
 80087aa:	0148      	lsls	r0, r1, #5
 80087ac:	6a39      	ldr	r1, [r7, #32]
 80087ae:	4401      	add	r1, r0
 80087b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80087b4:	4313      	orrs	r3, r2
 80087b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087ce:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	78db      	ldrb	r3, [r3, #3]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087de:	613b      	str	r3, [r7, #16]
 80087e0:	e003      	b.n	80087ea <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087e8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fe:	461a      	mov	r2, r3
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	e04e      	b.n	80088ac <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	78db      	ldrb	r3, [r3, #3]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d149      	bne.n	80088aa <USB_HC_StartXfer+0x276>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d045      	beq.n	80088aa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	79db      	ldrb	r3, [r3, #7]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d830      	bhi.n	8008888 <USB_HC_StartXfer+0x254>
 8008826:	a201      	add	r2, pc, #4	; (adr r2, 800882c <USB_HC_StartXfer+0x1f8>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	0800883d 	.word	0x0800883d
 8008830:	08008861 	.word	0x08008861
 8008834:	0800883d 	.word	0x0800883d
 8008838:	08008861 	.word	0x08008861
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	3303      	adds	r3, #3
 8008842:	089b      	lsrs	r3, r3, #2
 8008844:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008846:	8afa      	ldrh	r2, [r7, #22]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	b29b      	uxth	r3, r3
 800884e:	429a      	cmp	r2, r3
 8008850:	d91c      	bls.n	800888c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	f043 0220 	orr.w	r2, r3, #32
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	619a      	str	r2, [r3, #24]
        }
        break;
 800885e:	e015      	b.n	800888c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	3303      	adds	r3, #3
 8008866:	089b      	lsrs	r3, r3, #2
 8008868:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800886a:	8afa      	ldrh	r2, [r7, #22]
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	b29b      	uxth	r3, r3
 8008876:	429a      	cmp	r2, r3
 8008878:	d90a      	bls.n	8008890 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	619a      	str	r2, [r3, #24]
        }
        break;
 8008886:	e003      	b.n	8008890 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008888:	bf00      	nop
 800888a:	e002      	b.n	8008892 <USB_HC_StartXfer+0x25e>
        break;
 800888c:	bf00      	nop
 800888e:	e000      	b.n	8008892 <USB_HC_StartXfer+0x25e>
        break;
 8008890:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	68d9      	ldr	r1, [r3, #12]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	785a      	ldrb	r2, [r3, #1]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	2000      	movs	r0, #0
 80088a2:	9000      	str	r0, [sp, #0]
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff fb53 	bl	8007f50 <USB_WritePacket>
  }

  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3728      	adds	r7, #40	; 0x28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	1ff80000 	.word	0x1ff80000

080088b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	b29b      	uxth	r3, r3
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80088da:	b480      	push	{r7}
 80088dc:	b089      	sub	sp, #36	; 0x24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	0c9b      	lsrs	r3, r3, #18
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	4413      	add	r3, r2
 8008910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	0fdb      	lsrs	r3, r3, #31
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b20      	cmp	r3, #32
 8008928:	d104      	bne.n	8008934 <USB_HC_Halt+0x5a>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	e0e8      	b.n	8008b06 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <USB_HC_Halt+0x66>
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d173      	bne.n	8008a28 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	4413      	add	r3, r2
 8008948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	440a      	add	r2, r1
 8008956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800895a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800895e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f003 0320 	and.w	r3, r3, #32
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 80cb 	bne.w	8008b04 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d143      	bne.n	8008a02 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	4413      	add	r3, r2
 8008982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	0151      	lsls	r1, r2, #5
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	440a      	add	r2, r1
 8008990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008998:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089b8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	0151      	lsls	r1, r2, #5
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	440a      	add	r2, r1
 80089d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089d8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	3301      	adds	r3, #1
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089e6:	d81d      	bhi.n	8008a24 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089fe:	d0ec      	beq.n	80089da <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a00:	e080      	b.n	8008b04 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a20:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a22:	e06f      	b.n	8008b04 <USB_HC_Halt+0x22a>
            break;
 8008a24:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a26:	e06d      	b.n	8008b04 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a46:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d143      	bne.n	8008ae0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	0151      	lsls	r1, r2, #5
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	440a      	add	r2, r1
 8008a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a76:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	0151      	lsls	r1, r2, #5
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	440a      	add	r2, r1
 8008a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ab2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ab6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	3301      	adds	r3, #1
 8008abc:	61fb      	str	r3, [r7, #28]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ac4:	d81d      	bhi.n	8008b02 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008adc:	d0ec      	beq.n	8008ab8 <USB_HC_Halt+0x1de>
 8008ade:	e011      	b.n	8008b04 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	0151      	lsls	r1, r2, #5
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	440a      	add	r2, r1
 8008af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008afe:	6013      	str	r3, [r2, #0]
 8008b00:	e000      	b.n	8008b04 <USB_HC_Halt+0x22a>
          break;
 8008b02:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3724      	adds	r7, #36	; 0x24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	04da      	lsls	r2, r3, #19
 8008b30:	4b15      	ldr	r3, [pc, #84]	; (8008b88 <USB_DoPing+0x74>)
 8008b32:	4013      	ands	r3, r2
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b44:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b5c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b64:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b72:	461a      	mov	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	1ff80000 	.word	0x1ff80000

08008b8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff f935 	bl	8007e0c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008ba2:	2110      	movs	r1, #16
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff f98f 	bl	8007ec8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff f9b0 	bl	8007f10 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	e01f      	b.n	8008bf6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bcc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bd4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bdc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bea:	461a      	mov	r2, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	613b      	str	r3, [r7, #16]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2b0f      	cmp	r3, #15
 8008bfa:	d9dc      	bls.n	8008bb6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	613b      	str	r3, [r7, #16]
 8008c00:	e034      	b.n	8008c6c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c18:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c36:	461a      	mov	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c48:	d80c      	bhi.n	8008c64 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c60:	d0ec      	beq.n	8008c3c <USB_StopHost+0xb0>
 8008c62:	e000      	b.n	8008c66 <USB_StopHost+0xda>
        break;
 8008c64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	2b0f      	cmp	r3, #15
 8008c70:	d9c7      	bls.n	8008c02 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c78:	461a      	mov	r2, r3
 8008c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff f8ae 	bl	8007dea <USB_EnableGlobalInt>

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008c9c:	4904      	ldr	r1, [pc, #16]	; (8008cb0 <MX_FATFS_Init+0x18>)
 8008c9e:	4805      	ldr	r0, [pc, #20]	; (8008cb4 <MX_FATFS_Init+0x1c>)
 8008ca0:	f003 f84c 	bl	800bd3c <FATFS_LinkDriver>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <MX_FATFS_Init+0x20>)
 8008caa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008cac:	bf00      	nop
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	200028bc 	.word	0x200028bc
 8008cb4:	0800c9ac 	.word	0x0800c9ac
 8008cb8:	20004924 	.word	0x20004924

08008cbc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	4603      	mov	r3, r0
 8008cdc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4808      	ldr	r0, [pc, #32]	; (8008d08 <USBH_status+0x34>)
 8008ce8:	f000 fe1a 	bl	8009920 <USBH_MSC_UnitIsReady>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <USBH_status+0x24>
  {
    res = RES_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]
 8008cf6:	e001      	b.n	8008cfc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20004928 	.word	0x20004928

08008d0c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b094      	sub	sp, #80	; 0x50
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	60b9      	str	r1, [r7, #8]
 8008d14:	607a      	str	r2, [r7, #4]
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008d22:	7bf9      	ldrb	r1, [r7, #15]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	4813      	ldr	r0, [pc, #76]	; (8008d7c <USBH_read+0x70>)
 8008d2e:	f000 fe41 	bl	80099b4 <USBH_MSC_Read>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d103      	bne.n	8008d40 <USBH_read+0x34>
  {
    res = RES_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d3e:	e017      	b.n	8008d70 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008d40:	f107 0210 	add.w	r2, r7, #16
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	4619      	mov	r1, r3
 8008d48:	480c      	ldr	r0, [pc, #48]	; (8008d7c <USBH_read+0x70>)
 8008d4a:	f000 fe0f 	bl	800996c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008d4e:	7f7b      	ldrb	r3, [r7, #29]
 8008d50:	2b3a      	cmp	r3, #58	; 0x3a
 8008d52:	d005      	beq.n	8008d60 <USBH_read+0x54>
 8008d54:	2b3a      	cmp	r3, #58	; 0x3a
 8008d56:	dc07      	bgt.n	8008d68 <USBH_read+0x5c>
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d001      	beq.n	8008d60 <USBH_read+0x54>
 8008d5c:	2b28      	cmp	r3, #40	; 0x28
 8008d5e:	d103      	bne.n	8008d68 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008d60:	2303      	movs	r3, #3
 8008d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008d66:	e003      	b.n	8008d70 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008d6e:	bf00      	nop
    }
  }

  return res;
 8008d70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3748      	adds	r7, #72	; 0x48
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20004928 	.word	0x20004928

08008d80 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b094      	sub	sp, #80	; 0x50
 8008d84:	af02      	add	r7, sp, #8
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008d96:	7bf9      	ldrb	r1, [r7, #15]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	4817      	ldr	r0, [pc, #92]	; (8008e00 <USBH_write+0x80>)
 8008da2:	f000 fe70 	bl	8009a86 <USBH_MSC_Write>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <USBH_write+0x34>
  {
    res = RES_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008db2:	e01f      	b.n	8008df4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008db4:	f107 0210 	add.w	r2, r7, #16
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4810      	ldr	r0, [pc, #64]	; (8008e00 <USBH_write+0x80>)
 8008dbe:	f000 fdd5 	bl	800996c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008dc2:	7f7b      	ldrb	r3, [r7, #29]
 8008dc4:	2b3a      	cmp	r3, #58	; 0x3a
 8008dc6:	d00d      	beq.n	8008de4 <USBH_write+0x64>
 8008dc8:	2b3a      	cmp	r3, #58	; 0x3a
 8008dca:	dc0f      	bgt.n	8008dec <USBH_write+0x6c>
 8008dcc:	2b28      	cmp	r3, #40	; 0x28
 8008dce:	d009      	beq.n	8008de4 <USBH_write+0x64>
 8008dd0:	2b28      	cmp	r3, #40	; 0x28
 8008dd2:	dc0b      	bgt.n	8008dec <USBH_write+0x6c>
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d005      	beq.n	8008de4 <USBH_write+0x64>
 8008dd8:	2b27      	cmp	r3, #39	; 0x27
 8008dda:	d107      	bne.n	8008dec <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008de2:	e007      	b.n	8008df4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008de4:	2303      	movs	r3, #3
 8008de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008dea:	e003      	b.n	8008df4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008df2:	bf00      	nop
    }
  }

  return res;
 8008df4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3748      	adds	r7, #72	; 0x48
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20004928 	.word	0x20004928

08008e04 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b090      	sub	sp, #64	; 0x40
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	603a      	str	r2, [r7, #0]
 8008e0e:	71fb      	strb	r3, [r7, #7]
 8008e10:	460b      	mov	r3, r1
 8008e12:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008e1a:	79bb      	ldrb	r3, [r7, #6]
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d852      	bhi.n	8008ec6 <USBH_ioctl+0xc2>
 8008e20:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <USBH_ioctl+0x24>)
 8008e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e26:	bf00      	nop
 8008e28:	08008e39 	.word	0x08008e39
 8008e2c:	08008e41 	.word	0x08008e41
 8008e30:	08008e6b 	.word	0x08008e6b
 8008e34:	08008e97 	.word	0x08008e97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008e3e:	e045      	b.n	8008ecc <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008e40:	f107 0208 	add.w	r2, r7, #8
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	4619      	mov	r1, r3
 8008e48:	4823      	ldr	r0, [pc, #140]	; (8008ed8 <USBH_ioctl+0xd4>)
 8008e4a:	f000 fd8f 	bl	800996c <USBH_MSC_GetLUNInfo>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d106      	bne.n	8008e62 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008e60:	e034      	b.n	8008ecc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008e68:	e030      	b.n	8008ecc <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008e6a:	f107 0208 	add.w	r2, r7, #8
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	4619      	mov	r1, r3
 8008e72:	4819      	ldr	r0, [pc, #100]	; (8008ed8 <USBH_ioctl+0xd4>)
 8008e74:	f000 fd7a 	bl	800996c <USBH_MSC_GetLUNInfo>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d107      	bne.n	8008e8e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008e7e:	8a3b      	ldrh	r3, [r7, #16]
 8008e80:	461a      	mov	r2, r3
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008e8c:	e01e      	b.n	8008ecc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008e94:	e01a      	b.n	8008ecc <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008e96:	f107 0208 	add.w	r2, r7, #8
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	480e      	ldr	r0, [pc, #56]	; (8008ed8 <USBH_ioctl+0xd4>)
 8008ea0:	f000 fd64 	bl	800996c <USBH_MSC_GetLUNInfo>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008eaa:	8a3b      	ldrh	r3, [r7, #16]
 8008eac:	0a5b      	lsrs	r3, r3, #9
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008ebc:	e006      	b.n	8008ecc <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ec4:	e002      	b.n	8008ecc <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008ec6:	2304      	movs	r3, #4
 8008ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3740      	adds	r7, #64	; 0x40
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20004928 	.word	0x20004928

08008edc <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b089      	sub	sp, #36	; 0x24
 8008ee0:	af04      	add	r7, sp, #16
 8008ee2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eea:	7919      	ldrb	r1, [r3, #4]
 8008eec:	2350      	movs	r3, #80	; 0x50
 8008eee:	2206      	movs	r2, #6
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f001 fc53 	bl	800a79c <USBH_FindInterface>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	2bff      	cmp	r3, #255	; 0xff
 8008efe:	d002      	beq.n	8008f06 <USBH_MSC_InterfaceInit+0x2a>
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d901      	bls.n	8008f0a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f06:	2302      	movs	r3, #2
 8008f08:	e0ef      	b.n	80090ea <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 fc28 	bl	800a764 <USBH_SelectInterface>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008f1e:	2302      	movs	r3, #2
 8008f20:	e0e3      	b.n	80090ea <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008f28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008f2c:	f003 fa78 	bl	800c420 <malloc>
 8008f30:	4603      	mov	r3, r0
 8008f32:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008f44:	2302      	movs	r3, #2
 8008f46:	e0d0      	b.n	80090ea <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	68b8      	ldr	r0, [r7, #8]
 8008f50:	f003 fa84 	bl	800c45c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	211a      	movs	r1, #26
 8008f5a:	fb01 f303 	mul.w	r3, r1, r3
 8008f5e:	4413      	add	r3, r2
 8008f60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	b25b      	sxtb	r3, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da16      	bge.n	8008f9a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	211a      	movs	r1, #26
 8008f72:	fb01 f303 	mul.w	r3, r1, r3
 8008f76:	4413      	add	r3, r2
 8008f78:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f7c:	781a      	ldrb	r2, [r3, #0]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	211a      	movs	r1, #26
 8008f88:	fb01 f303 	mul.w	r3, r1, r3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f92:	881a      	ldrh	r2, [r3, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	815a      	strh	r2, [r3, #10]
 8008f98:	e015      	b.n	8008fc6 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	211a      	movs	r1, #26
 8008fa0:	fb01 f303 	mul.w	r3, r1, r3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008faa:	781a      	ldrb	r2, [r3, #0]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	211a      	movs	r1, #26
 8008fb6:	fb01 f303 	mul.w	r3, r1, r3
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008fc0:	881a      	ldrh	r2, [r3, #0]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	211a      	movs	r1, #26
 8008fcc:	fb01 f303 	mul.w	r3, r1, r3
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	b25b      	sxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	da16      	bge.n	800900c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	211a      	movs	r1, #26
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	4413      	add	r3, r2
 8008fea:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008fee:	781a      	ldrb	r2, [r3, #0]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	211a      	movs	r1, #26
 8008ffa:	fb01 f303 	mul.w	r3, r1, r3
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009004:	881a      	ldrh	r2, [r3, #0]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	815a      	strh	r2, [r3, #10]
 800900a:	e015      	b.n	8009038 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	211a      	movs	r1, #26
 8009012:	fb01 f303 	mul.w	r3, r1, r3
 8009016:	4413      	add	r3, r2
 8009018:	f203 3356 	addw	r3, r3, #854	; 0x356
 800901c:	781a      	ldrb	r2, [r3, #0]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	211a      	movs	r1, #26
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	4413      	add	r3, r2
 800902e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009032:	881a      	ldrh	r2, [r3, #0]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2200      	movs	r2, #0
 800903c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2200      	movs	r2, #0
 8009042:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	799b      	ldrb	r3, [r3, #6]
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f002 fdc4 	bl	800bbde <USBH_AllocPipe>
 8009056:	4603      	mov	r3, r0
 8009058:	461a      	mov	r2, r3
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	79db      	ldrb	r3, [r3, #7]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f002 fdba 	bl	800bbde <USBH_AllocPipe>
 800906a:	4603      	mov	r3, r0
 800906c:	461a      	mov	r2, r3
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fdac 	bl	8009bd0 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	7959      	ldrb	r1, [r3, #5]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	7998      	ldrb	r0, [r3, #6]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	8912      	ldrh	r2, [r2, #8]
 8009090:	9202      	str	r2, [sp, #8]
 8009092:	2202      	movs	r2, #2
 8009094:	9201      	str	r2, [sp, #4]
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	4623      	mov	r3, r4
 800909a:	4602      	mov	r2, r0
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f002 fd6f 	bl	800bb80 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	7919      	ldrb	r1, [r3, #4]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	79d8      	ldrb	r0, [r3, #7]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	8952      	ldrh	r2, [r2, #10]
 80090ba:	9202      	str	r2, [sp, #8]
 80090bc:	2202      	movs	r2, #2
 80090be:	9201      	str	r2, [sp, #4]
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	4623      	mov	r3, r4
 80090c4:	4602      	mov	r2, r0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f002 fd5a 	bl	800bb80 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	791b      	ldrb	r3, [r3, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f003 f8c5 	bl	800c264 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	795b      	ldrb	r3, [r3, #5]
 80090de:	2200      	movs	r2, #0
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f003 f8be 	bl	800c264 <USBH_LL_SetToggle>

  return USBH_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd90      	pop	{r4, r7, pc}

080090f2 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	795b      	ldrb	r3, [r3, #5]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00e      	beq.n	800912a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	795b      	ldrb	r3, [r3, #5]
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f002 fd53 	bl	800bbbe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	795b      	ldrb	r3, [r3, #5]
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f002 fd7e 	bl	800bc20 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	791b      	ldrb	r3, [r3, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00e      	beq.n	8009150 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	791b      	ldrb	r3, [r3, #4]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f002 fd40 	bl	800bbbe <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	791b      	ldrb	r3, [r3, #4]
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f002 fd6b 	bl	800bc20 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	4618      	mov	r0, r3
 8009166:	f003 f963 	bl	800c430 <free>
    phost->pActiveClass->pData = 0U;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009170:	2200      	movs	r2, #0
 8009172:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009190:	2301      	movs	r3, #1
 8009192:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	7b9b      	ldrb	r3, [r3, #14]
 8009198:	2b03      	cmp	r3, #3
 800919a:	d041      	beq.n	8009220 <USBH_MSC_ClassRequest+0xa2>
 800919c:	2b03      	cmp	r3, #3
 800919e:	dc4b      	bgt.n	8009238 <USBH_MSC_ClassRequest+0xba>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <USBH_MSC_ClassRequest+0x2a>
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d147      	bne.n	8009238 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fcf0 	bl	8009b92 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d104      	bne.n	80091c6 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2200      	movs	r2, #0
 80091c0:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d137      	bne.n	800923c <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d804      	bhi.n	80091de <USBH_MSC_ClassRequest+0x60>
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	3301      	adds	r3, #1
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	e000      	b.n	80091e0 <USBH_MSC_ClassRequest+0x62>
 80091de:	2202      	movs	r2, #2
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80091e4:	2300      	movs	r3, #0
 80091e6:	73bb      	strb	r3, [r7, #14]
 80091e8:	e014      	b.n	8009214 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	2134      	movs	r1, #52	; 0x34
 80091f0:	fb01 f303 	mul.w	r3, r1, r3
 80091f4:	4413      	add	r3, r2
 80091f6:	3392      	adds	r3, #146	; 0x92
 80091f8:	2202      	movs	r2, #2
 80091fa:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	2134      	movs	r1, #52	; 0x34
 8009202:	fb01 f303 	mul.w	r3, r1, r3
 8009206:	4413      	add	r3, r2
 8009208:	33c1      	adds	r3, #193	; 0xc1
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	3301      	adds	r3, #1
 8009212:	73bb      	strb	r3, [r7, #14]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	7bba      	ldrb	r2, [r7, #14]
 800921a:	429a      	cmp	r2, r3
 800921c:	d3e5      	bcc.n	80091ea <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800921e:	e00d      	b.n	800923c <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009220:	2100      	movs	r1, #0
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f002 f87b 	bl	800b31e <USBH_ClrFeature>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d108      	bne.n	8009240 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	7bda      	ldrb	r2, [r3, #15]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009236:	e003      	b.n	8009240 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009238:	bf00      	nop
 800923a:	e002      	b.n	8009242 <USBH_MSC_ClassRequest+0xc4>
      break;
 800923c:	bf00      	nop
 800923e:	e000      	b.n	8009242 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009240:	bf00      	nop
  }

  return status;
 8009242:	7bfb      	ldrb	r3, [r7, #15]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800925e:	2301      	movs	r3, #1
 8009260:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009262:	2301      	movs	r3, #1
 8009264:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009266:	2301      	movs	r3, #1
 8009268:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	7b1b      	ldrb	r3, [r3, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <USBH_MSC_Process+0x2e>
 8009272:	2b01      	cmp	r3, #1
 8009274:	f000 8271 	beq.w	800975a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009278:	e272      	b.n	8009760 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	b29b      	uxth	r3, r3
 8009286:	429a      	cmp	r2, r3
 8009288:	f080 824f 	bcs.w	800972a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009292:	4619      	mov	r1, r3
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	2334      	movs	r3, #52	; 0x34
 8009298:	fb03 f301 	mul.w	r3, r3, r1
 800929c:	4413      	add	r3, r2
 800929e:	3391      	adds	r3, #145	; 0x91
 80092a0:	2201      	movs	r2, #1
 80092a2:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092aa:	4619      	mov	r1, r3
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	2334      	movs	r3, #52	; 0x34
 80092b0:	fb03 f301 	mul.w	r3, r3, r1
 80092b4:	4413      	add	r3, r2
 80092b6:	3390      	adds	r3, #144	; 0x90
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	f200 8243 	bhi.w	8009746 <USBH_MSC_Process+0x4fa>
 80092c0:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <USBH_MSC_Process+0x7c>)
 80092c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c6:	bf00      	nop
 80092c8:	080092ed 	.word	0x080092ed
 80092cc:	08009747 	.word	0x08009747
 80092d0:	080093b5 	.word	0x080093b5
 80092d4:	08009539 	.word	0x08009539
 80092d8:	08009313 	.word	0x08009313
 80092dc:	08009605 	.word	0x08009605
 80092e0:	08009747 	.word	0x08009747
 80092e4:	08009747 	.word	0x08009747
 80092e8:	08009719 	.word	0x08009719
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092f2:	4619      	mov	r1, r3
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	2334      	movs	r3, #52	; 0x34
 80092f8:	fb03 f301 	mul.w	r3, r3, r1
 80092fc:	4413      	add	r3, r2
 80092fe:	3390      	adds	r3, #144	; 0x90
 8009300:	2204      	movs	r2, #4
 8009302:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009310:	e222      	b.n	8009758 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009318:	b2d9      	uxtb	r1, r3
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009320:	461a      	mov	r2, r3
 8009322:	2334      	movs	r3, #52	; 0x34
 8009324:	fb03 f302 	mul.w	r3, r3, r2
 8009328:	3398      	adds	r3, #152	; 0x98
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	4413      	add	r3, r2
 800932e:	3307      	adds	r3, #7
 8009330:	461a      	mov	r2, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 ff6a 	bl	800a20c <USBH_MSC_SCSI_Inquiry>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009348:	4619      	mov	r1, r3
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	2334      	movs	r3, #52	; 0x34
 800934e:	fb03 f301 	mul.w	r3, r3, r1
 8009352:	4413      	add	r3, r2
 8009354:	3390      	adds	r3, #144	; 0x90
 8009356:	2202      	movs	r2, #2
 8009358:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d10c      	bne.n	800937a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009366:	4619      	mov	r1, r3
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	2334      	movs	r3, #52	; 0x34
 800936c:	fb03 f301 	mul.w	r3, r3, r1
 8009370:	4413      	add	r3, r2
 8009372:	3390      	adds	r3, #144	; 0x90
 8009374:	2205      	movs	r2, #5
 8009376:	701a      	strb	r2, [r3, #0]
            break;
 8009378:	e1e7      	b.n	800974a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	2b04      	cmp	r3, #4
 800937e:	f040 81e4 	bne.w	800974a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009388:	4619      	mov	r1, r3
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	2334      	movs	r3, #52	; 0x34
 800938e:	fb03 f301 	mul.w	r3, r3, r1
 8009392:	4413      	add	r3, r2
 8009394:	3390      	adds	r3, #144	; 0x90
 8009396:	2201      	movs	r2, #1
 8009398:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093a0:	4619      	mov	r1, r3
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	2334      	movs	r3, #52	; 0x34
 80093a6:	fb03 f301 	mul.w	r3, r3, r1
 80093aa:	4413      	add	r3, r2
 80093ac:	3391      	adds	r3, #145	; 0x91
 80093ae:	2202      	movs	r2, #2
 80093b0:	701a      	strb	r2, [r3, #0]
            break;
 80093b2:	e1ca      	b.n	800974a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fe66 	bl	800a090 <USBH_MSC_SCSI_TestUnitReady>
 80093c4:	4603      	mov	r3, r0
 80093c6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d149      	bne.n	8009462 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093d4:	4619      	mov	r1, r3
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	2334      	movs	r3, #52	; 0x34
 80093da:	fb03 f301 	mul.w	r3, r3, r1
 80093de:	4413      	add	r3, r2
 80093e0:	3392      	adds	r3, #146	; 0x92
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00c      	beq.n	8009402 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093ee:	4619      	mov	r1, r3
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	2334      	movs	r3, #52	; 0x34
 80093f4:	fb03 f301 	mul.w	r3, r3, r1
 80093f8:	4413      	add	r3, r2
 80093fa:	33c1      	adds	r3, #193	; 0xc1
 80093fc:	2201      	movs	r2, #1
 80093fe:	701a      	strb	r2, [r3, #0]
 8009400:	e00b      	b.n	800941a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009408:	4619      	mov	r1, r3
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	2334      	movs	r3, #52	; 0x34
 800940e:	fb03 f301 	mul.w	r3, r3, r1
 8009412:	4413      	add	r3, r2
 8009414:	33c1      	adds	r3, #193	; 0xc1
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009420:	4619      	mov	r1, r3
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	2334      	movs	r3, #52	; 0x34
 8009426:	fb03 f301 	mul.w	r3, r3, r1
 800942a:	4413      	add	r3, r2
 800942c:	3390      	adds	r3, #144	; 0x90
 800942e:	2203      	movs	r2, #3
 8009430:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009438:	4619      	mov	r1, r3
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	2334      	movs	r3, #52	; 0x34
 800943e:	fb03 f301 	mul.w	r3, r3, r1
 8009442:	4413      	add	r3, r2
 8009444:	3391      	adds	r3, #145	; 0x91
 8009446:	2200      	movs	r2, #0
 8009448:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009450:	4619      	mov	r1, r3
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	2334      	movs	r3, #52	; 0x34
 8009456:	fb03 f301 	mul.w	r3, r3, r1
 800945a:	4413      	add	r3, r2
 800945c:	3392      	adds	r3, #146	; 0x92
 800945e:	2200      	movs	r2, #0
 8009460:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b02      	cmp	r3, #2
 8009466:	d14a      	bne.n	80094fe <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800946e:	4619      	mov	r1, r3
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	2334      	movs	r3, #52	; 0x34
 8009474:	fb03 f301 	mul.w	r3, r3, r1
 8009478:	4413      	add	r3, r2
 800947a:	3392      	adds	r3, #146	; 0x92
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d00c      	beq.n	800949c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009488:	4619      	mov	r1, r3
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	2334      	movs	r3, #52	; 0x34
 800948e:	fb03 f301 	mul.w	r3, r3, r1
 8009492:	4413      	add	r3, r2
 8009494:	33c1      	adds	r3, #193	; 0xc1
 8009496:	2201      	movs	r2, #1
 8009498:	701a      	strb	r2, [r3, #0]
 800949a:	e00b      	b.n	80094b4 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094a2:	4619      	mov	r1, r3
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	2334      	movs	r3, #52	; 0x34
 80094a8:	fb03 f301 	mul.w	r3, r3, r1
 80094ac:	4413      	add	r3, r2
 80094ae:	33c1      	adds	r3, #193	; 0xc1
 80094b0:	2200      	movs	r2, #0
 80094b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ba:	4619      	mov	r1, r3
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	2334      	movs	r3, #52	; 0x34
 80094c0:	fb03 f301 	mul.w	r3, r3, r1
 80094c4:	4413      	add	r3, r2
 80094c6:	3390      	adds	r3, #144	; 0x90
 80094c8:	2205      	movs	r2, #5
 80094ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094d2:	4619      	mov	r1, r3
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	2334      	movs	r3, #52	; 0x34
 80094d8:	fb03 f301 	mul.w	r3, r3, r1
 80094dc:	4413      	add	r3, r2
 80094de:	3391      	adds	r3, #145	; 0x91
 80094e0:	2201      	movs	r2, #1
 80094e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80094ea:	4619      	mov	r1, r3
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	2334      	movs	r3, #52	; 0x34
 80094f0:	fb03 f301 	mul.w	r3, r3, r1
 80094f4:	4413      	add	r3, r2
 80094f6:	3392      	adds	r3, #146	; 0x92
 80094f8:	2202      	movs	r2, #2
 80094fa:	701a      	strb	r2, [r3, #0]
            break;
 80094fc:	e127      	b.n	800974e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	2b04      	cmp	r3, #4
 8009502:	f040 8124 	bne.w	800974e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800950c:	4619      	mov	r1, r3
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	2334      	movs	r3, #52	; 0x34
 8009512:	fb03 f301 	mul.w	r3, r3, r1
 8009516:	4413      	add	r3, r2
 8009518:	3390      	adds	r3, #144	; 0x90
 800951a:	2201      	movs	r2, #1
 800951c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009524:	4619      	mov	r1, r3
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	2334      	movs	r3, #52	; 0x34
 800952a:	fb03 f301 	mul.w	r3, r3, r1
 800952e:	4413      	add	r3, r2
 8009530:	3391      	adds	r3, #145	; 0x91
 8009532:	2202      	movs	r2, #2
 8009534:	701a      	strb	r2, [r3, #0]
            break;
 8009536:	e10a      	b.n	800974e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800953e:	b2d9      	uxtb	r1, r3
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009546:	461a      	mov	r2, r3
 8009548:	2334      	movs	r3, #52	; 0x34
 800954a:	fb03 f302 	mul.w	r3, r3, r2
 800954e:	3390      	adds	r3, #144	; 0x90
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4413      	add	r3, r2
 8009554:	3304      	adds	r3, #4
 8009556:	461a      	mov	r2, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fddc 	bl	800a116 <USBH_MSC_SCSI_ReadCapacity>
 800955e:	4603      	mov	r3, r0
 8009560:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d120      	bne.n	80095aa <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800956e:	4619      	mov	r1, r3
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	2334      	movs	r3, #52	; 0x34
 8009574:	fb03 f301 	mul.w	r3, r3, r1
 8009578:	4413      	add	r3, r2
 800957a:	3390      	adds	r3, #144	; 0x90
 800957c:	2201      	movs	r2, #1
 800957e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009586:	4619      	mov	r1, r3
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	2334      	movs	r3, #52	; 0x34
 800958c:	fb03 f301 	mul.w	r3, r3, r1
 8009590:	4413      	add	r3, r2
 8009592:	3391      	adds	r3, #145	; 0x91
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800959e:	3301      	adds	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80095a8:	e0d3      	b.n	8009752 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d10c      	bne.n	80095ca <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095b6:	4619      	mov	r1, r3
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	2334      	movs	r3, #52	; 0x34
 80095bc:	fb03 f301 	mul.w	r3, r3, r1
 80095c0:	4413      	add	r3, r2
 80095c2:	3390      	adds	r3, #144	; 0x90
 80095c4:	2205      	movs	r2, #5
 80095c6:	701a      	strb	r2, [r3, #0]
            break;
 80095c8:	e0c3      	b.n	8009752 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	f040 80c0 	bne.w	8009752 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095d8:	4619      	mov	r1, r3
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	2334      	movs	r3, #52	; 0x34
 80095de:	fb03 f301 	mul.w	r3, r3, r1
 80095e2:	4413      	add	r3, r2
 80095e4:	3390      	adds	r3, #144	; 0x90
 80095e6:	2201      	movs	r2, #1
 80095e8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80095f0:	4619      	mov	r1, r3
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	2334      	movs	r3, #52	; 0x34
 80095f6:	fb03 f301 	mul.w	r3, r3, r1
 80095fa:	4413      	add	r3, r2
 80095fc:	3391      	adds	r3, #145	; 0x91
 80095fe:	2202      	movs	r2, #2
 8009600:	701a      	strb	r2, [r3, #0]
            break;
 8009602:	e0a6      	b.n	8009752 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800960a:	b2d9      	uxtb	r1, r3
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009612:	461a      	mov	r2, r3
 8009614:	2334      	movs	r3, #52	; 0x34
 8009616:	fb03 f302 	mul.w	r3, r3, r2
 800961a:	3398      	adds	r3, #152	; 0x98
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4413      	add	r3, r2
 8009620:	3304      	adds	r3, #4
 8009622:	461a      	mov	r2, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fe96 	bl	800a356 <USBH_MSC_SCSI_RequestSense>
 800962a:	4603      	mov	r3, r0
 800962c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d145      	bne.n	80096c0 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800963a:	4619      	mov	r1, r3
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	2334      	movs	r3, #52	; 0x34
 8009640:	fb03 f301 	mul.w	r3, r3, r1
 8009644:	4413      	add	r3, r2
 8009646:	339c      	adds	r3, #156	; 0x9c
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b06      	cmp	r3, #6
 800964c:	d00c      	beq.n	8009668 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009654:	4619      	mov	r1, r3
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	2334      	movs	r3, #52	; 0x34
 800965a:	fb03 f301 	mul.w	r3, r3, r1
 800965e:	4413      	add	r3, r2
 8009660:	339c      	adds	r3, #156	; 0x9c
 8009662:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009664:	2b02      	cmp	r3, #2
 8009666:	d117      	bne.n	8009698 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	f242 720f 	movw	r2, #9999	; 0x270f
 800967a:	4293      	cmp	r3, r2
 800967c:	d80c      	bhi.n	8009698 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009684:	4619      	mov	r1, r3
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	2334      	movs	r3, #52	; 0x34
 800968a:	fb03 f301 	mul.w	r3, r3, r1
 800968e:	4413      	add	r3, r2
 8009690:	3390      	adds	r3, #144	; 0x90
 8009692:	2202      	movs	r2, #2
 8009694:	701a      	strb	r2, [r3, #0]
                  break;
 8009696:	e05f      	b.n	8009758 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800969e:	4619      	mov	r1, r3
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	2334      	movs	r3, #52	; 0x34
 80096a4:	fb03 f301 	mul.w	r3, r3, r1
 80096a8:	4413      	add	r3, r2
 80096aa:	3390      	adds	r3, #144	; 0x90
 80096ac:	2201      	movs	r2, #1
 80096ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096b6:	3301      	adds	r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d10c      	bne.n	80096e0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096cc:	4619      	mov	r1, r3
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	2334      	movs	r3, #52	; 0x34
 80096d2:	fb03 f301 	mul.w	r3, r3, r1
 80096d6:	4413      	add	r3, r2
 80096d8:	3390      	adds	r3, #144	; 0x90
 80096da:	2208      	movs	r2, #8
 80096dc:	701a      	strb	r2, [r3, #0]
            break;
 80096de:	e03a      	b.n	8009756 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d137      	bne.n	8009756 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80096ec:	4619      	mov	r1, r3
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	2334      	movs	r3, #52	; 0x34
 80096f2:	fb03 f301 	mul.w	r3, r3, r1
 80096f6:	4413      	add	r3, r2
 80096f8:	3390      	adds	r3, #144	; 0x90
 80096fa:	2201      	movs	r2, #1
 80096fc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009704:	4619      	mov	r1, r3
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	2334      	movs	r3, #52	; 0x34
 800970a:	fb03 f301 	mul.w	r3, r3, r1
 800970e:	4413      	add	r3, r2
 8009710:	3391      	adds	r3, #145	; 0x91
 8009712:	2202      	movs	r2, #2
 8009714:	701a      	strb	r2, [r3, #0]
            break;
 8009716:	e01e      	b.n	8009756 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800971e:	3301      	adds	r3, #1
 8009720:	b29a      	uxth	r2, r3
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009728:	e016      	b.n	8009758 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2200      	movs	r2, #0
 800972e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2201      	movs	r2, #1
 8009736:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800973e:	2102      	movs	r1, #2
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
      break;
 8009744:	e00c      	b.n	8009760 <USBH_MSC_Process+0x514>
            break;
 8009746:	bf00      	nop
 8009748:	e00a      	b.n	8009760 <USBH_MSC_Process+0x514>
            break;
 800974a:	bf00      	nop
 800974c:	e008      	b.n	8009760 <USBH_MSC_Process+0x514>
            break;
 800974e:	bf00      	nop
 8009750:	e006      	b.n	8009760 <USBH_MSC_Process+0x514>
            break;
 8009752:	bf00      	nop
 8009754:	e004      	b.n	8009760 <USBH_MSC_Process+0x514>
            break;
 8009756:	bf00      	nop
      break;
 8009758:	e002      	b.n	8009760 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	75fb      	strb	r3, [r7, #23]
      break;
 800975e:	bf00      	nop
  }
  return error;
 8009760:	7dfb      	ldrb	r3, [r7, #23]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop

0800976c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b088      	sub	sp, #32
 8009786:	af02      	add	r7, sp, #8
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009798:	2301      	movs	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800979c:	2301      	movs	r3, #1
 800979e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	2134      	movs	r1, #52	; 0x34
 80097a6:	fb01 f303 	mul.w	r3, r1, r3
 80097aa:	4413      	add	r3, r2
 80097ac:	3390      	adds	r3, #144	; 0x90
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	2b07      	cmp	r3, #7
 80097b2:	d03c      	beq.n	800982e <USBH_MSC_RdWrProcess+0xac>
 80097b4:	2b07      	cmp	r3, #7
 80097b6:	f300 80a7 	bgt.w	8009908 <USBH_MSC_RdWrProcess+0x186>
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	d06c      	beq.n	8009898 <USBH_MSC_RdWrProcess+0x116>
 80097be:	2b06      	cmp	r3, #6
 80097c0:	f040 80a2 	bne.w	8009908 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80097c4:	78f9      	ldrb	r1, [r7, #3]
 80097c6:	2300      	movs	r3, #0
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	2300      	movs	r3, #0
 80097cc:	2200      	movs	r2, #0
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fea5 	bl	800a51e <USBH_MSC_SCSI_Read>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10b      	bne.n	80097f6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	2134      	movs	r1, #52	; 0x34
 80097e4:	fb01 f303 	mul.w	r3, r1, r3
 80097e8:	4413      	add	r3, r2
 80097ea:	3390      	adds	r3, #144	; 0x90
 80097ec:	2201      	movs	r2, #1
 80097ee:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097f4:	e08a      	b.n	800990c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d109      	bne.n	8009810 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80097fc:	78fb      	ldrb	r3, [r7, #3]
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	2134      	movs	r1, #52	; 0x34
 8009802:	fb01 f303 	mul.w	r3, r1, r3
 8009806:	4413      	add	r3, r2
 8009808:	3390      	adds	r3, #144	; 0x90
 800980a:	2205      	movs	r2, #5
 800980c:	701a      	strb	r2, [r3, #0]
      break;
 800980e:	e07d      	b.n	800990c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	2b04      	cmp	r3, #4
 8009814:	d17a      	bne.n	800990c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	2134      	movs	r1, #52	; 0x34
 800981c:	fb01 f303 	mul.w	r3, r1, r3
 8009820:	4413      	add	r3, r2
 8009822:	3390      	adds	r3, #144	; 0x90
 8009824:	2208      	movs	r2, #8
 8009826:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009828:	2302      	movs	r3, #2
 800982a:	75fb      	strb	r3, [r7, #23]
      break;
 800982c:	e06e      	b.n	800990c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800982e:	78f9      	ldrb	r1, [r7, #3]
 8009830:	2300      	movs	r3, #0
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	2300      	movs	r3, #0
 8009836:	2200      	movs	r2, #0
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fe05 	bl	800a448 <USBH_MSC_SCSI_Write>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	2134      	movs	r1, #52	; 0x34
 800984e:	fb01 f303 	mul.w	r3, r1, r3
 8009852:	4413      	add	r3, r2
 8009854:	3390      	adds	r3, #144	; 0x90
 8009856:	2201      	movs	r2, #1
 8009858:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800985e:	e057      	b.n	8009910 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	2b02      	cmp	r3, #2
 8009864:	d109      	bne.n	800987a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	2134      	movs	r1, #52	; 0x34
 800986c:	fb01 f303 	mul.w	r3, r1, r3
 8009870:	4413      	add	r3, r2
 8009872:	3390      	adds	r3, #144	; 0x90
 8009874:	2205      	movs	r2, #5
 8009876:	701a      	strb	r2, [r3, #0]
      break;
 8009878:	e04a      	b.n	8009910 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	2b04      	cmp	r3, #4
 800987e:	d147      	bne.n	8009910 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	2134      	movs	r1, #52	; 0x34
 8009886:	fb01 f303 	mul.w	r3, r1, r3
 800988a:	4413      	add	r3, r2
 800988c:	3390      	adds	r3, #144	; 0x90
 800988e:	2208      	movs	r2, #8
 8009890:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009892:	2302      	movs	r3, #2
 8009894:	75fb      	strb	r3, [r7, #23]
      break;
 8009896:	e03b      	b.n	8009910 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8009898:	78fb      	ldrb	r3, [r7, #3]
 800989a:	2234      	movs	r2, #52	; 0x34
 800989c:	fb02 f303 	mul.w	r3, r2, r3
 80098a0:	3398      	adds	r3, #152	; 0x98
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	4413      	add	r3, r2
 80098a6:	1d1a      	adds	r2, r3, #4
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fd52 	bl	800a356 <USBH_MSC_SCSI_RequestSense>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d113      	bne.n	80098e4 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	2134      	movs	r1, #52	; 0x34
 80098c2:	fb01 f303 	mul.w	r3, r1, r3
 80098c6:	4413      	add	r3, r2
 80098c8:	3390      	adds	r3, #144	; 0x90
 80098ca:	2201      	movs	r2, #1
 80098cc:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	2134      	movs	r1, #52	; 0x34
 80098d4:	fb01 f303 	mul.w	r3, r1, r3
 80098d8:	4413      	add	r3, r2
 80098da:	3391      	adds	r3, #145	; 0x91
 80098dc:	2202      	movs	r2, #2
 80098de:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80098e0:	2302      	movs	r3, #2
 80098e2:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d014      	beq.n	8009914 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d111      	bne.n	8009914 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	2134      	movs	r1, #52	; 0x34
 80098f6:	fb01 f303 	mul.w	r3, r1, r3
 80098fa:	4413      	add	r3, r2
 80098fc:	3390      	adds	r3, #144	; 0x90
 80098fe:	2208      	movs	r2, #8
 8009900:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009902:	2302      	movs	r3, #2
 8009904:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009906:	e005      	b.n	8009914 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8009908:	bf00      	nop
 800990a:	e004      	b.n	8009916 <USBH_MSC_RdWrProcess+0x194>
      break;
 800990c:	bf00      	nop
 800990e:	e002      	b.n	8009916 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009910:	bf00      	nop
 8009912:	e000      	b.n	8009916 <USBH_MSC_RdWrProcess+0x194>
      break;
 8009914:	bf00      	nop

  }
  return error;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b0b      	cmp	r3, #11
 800993e:	d10c      	bne.n	800995a <USBH_MSC_UnitIsReady+0x3a>
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	2134      	movs	r1, #52	; 0x34
 8009946:	fb01 f303 	mul.w	r3, r1, r3
 800994a:	4413      	add	r3, r2
 800994c:	3391      	adds	r3, #145	; 0x91
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009954:	2301      	movs	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]
 8009958:	e001      	b.n	800995e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800995e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	460b      	mov	r3, r1
 8009976:	607a      	str	r2, [r7, #4]
 8009978:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b0b      	cmp	r3, #11
 800998c:	d10d      	bne.n	80099aa <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800998e:	7afb      	ldrb	r3, [r7, #11]
 8009990:	2234      	movs	r2, #52	; 0x34
 8009992:	fb02 f303 	mul.w	r3, r2, r3
 8009996:	3390      	adds	r3, #144	; 0x90
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4413      	add	r3, r2
 800999c:	2234      	movs	r2, #52	; 0x34
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f002 fd4d 	bl	800c440 <memcpy>
    return USBH_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e000      	b.n	80099ac <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80099aa:	2302      	movs	r3, #2
  }
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	607a      	str	r2, [r7, #4]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	460b      	mov	r3, r1
 80099c2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00e      	beq.n	80099f8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80099e0:	2b0b      	cmp	r3, #11
 80099e2:	d109      	bne.n	80099f8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	2134      	movs	r1, #52	; 0x34
 80099ea:	fb01 f303 	mul.w	r3, r1, r3
 80099ee:	4413      	add	r3, r2
 80099f0:	3390      	adds	r3, #144	; 0x90
 80099f2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d001      	beq.n	80099fc <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80099f8:	2302      	movs	r3, #2
 80099fa:	e040      	b.n	8009a7e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2206      	movs	r2, #6
 8009a00:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	2134      	movs	r1, #52	; 0x34
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3390      	adds	r3, #144	; 0x90
 8009a10:	2206      	movs	r2, #6
 8009a12:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009a1e:	7af9      	ldrb	r1, [r7, #11]
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fd78 	bl	800a51e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a34:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a36:	e016      	b.n	8009a66 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad2      	subs	r2, r2, r3
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	f242 7110 	movw	r1, #10000	; 0x2710
 8009a48:	fb01 f303 	mul.w	r3, r1, r3
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d805      	bhi.n	8009a5c <USBH_MSC_Read+0xa8>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009a62:	2302      	movs	r3, #2
 8009a64:	e00b      	b.n	8009a7e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff fe89 	bl	8009782 <USBH_MSC_RdWrProcess>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d0e0      	beq.n	8009a38 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b088      	sub	sp, #32
 8009a8a:	af02      	add	r7, sp, #8
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
 8009a92:	460b      	mov	r3, r1
 8009a94:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00e      	beq.n	8009aca <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009ab2:	2b0b      	cmp	r3, #11
 8009ab4:	d109      	bne.n	8009aca <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	2134      	movs	r1, #52	; 0x34
 8009abc:	fb01 f303 	mul.w	r3, r1, r3
 8009ac0:	4413      	add	r3, r2
 8009ac2:	3390      	adds	r3, #144	; 0x90
 8009ac4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d001      	beq.n	8009ace <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009aca:	2302      	movs	r3, #2
 8009acc:	e040      	b.n	8009b50 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2207      	movs	r2, #7
 8009ad2:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009ad4:	7afb      	ldrb	r3, [r7, #11]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	2134      	movs	r1, #52	; 0x34
 8009ada:	fb01 f303 	mul.w	r3, r1, r3
 8009ade:	4413      	add	r3, r2
 8009ae0:	3390      	adds	r3, #144	; 0x90
 8009ae2:	2207      	movs	r2, #7
 8009ae4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009ae6:	7afb      	ldrb	r3, [r7, #11]
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009af0:	7af9      	ldrb	r1, [r7, #11]
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fca4 	bl	800a448 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b06:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b08:	e016      	b.n	8009b38 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	1ad2      	subs	r2, r2, r3
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	f242 7110 	movw	r1, #10000	; 0x2710
 8009b1a:	fb01 f303 	mul.w	r3, r1, r3
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d805      	bhi.n	8009b2e <USBH_MSC_Write+0xa8>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d104      	bne.n	8009b38 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2201      	movs	r2, #1
 8009b32:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009b34:	2302      	movs	r3, #2
 8009b36:	e00b      	b.n	8009b50 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009b38:	7afb      	ldrb	r3, [r7, #11]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f7ff fe20 	bl	8009782 <USBH_MSC_RdWrProcess>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d0e0      	beq.n	8009b0a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2221      	movs	r2, #33	; 0x21
 8009b64:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	22ff      	movs	r2, #255	; 0xff
 8009b6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2100      	movs	r1, #0
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 fdab 	bl	800b6de <USBH_CtlReq>
 8009b88:	4603      	mov	r3, r0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	22a1      	movs	r2, #161	; 0xa1
 8009ba0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	22fe      	movs	r2, #254	; 0xfe
 8009ba6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009bba:	2201      	movs	r2, #1
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f001 fd8d 	bl	800b6de <USBH_CtlReq>
 8009bc4:	4603      	mov	r3, r0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4a09      	ldr	r2, [pc, #36]	; (8009c0c <USBH_MSC_BOT_Init+0x3c>)
 8009be6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4a09      	ldr	r2, [pc, #36]	; (8009c10 <USBH_MSC_BOT_Init+0x40>)
 8009bec:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	43425355 	.word	0x43425355
 8009c10:	20304050 	.word	0x20304050

08009c14 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af02      	add	r7, sp, #8
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009c20:	2301      	movs	r3, #1
 8009c22:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009c24:	2301      	movs	r3, #1
 8009c26:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c44:	3b01      	subs	r3, #1
 8009c46:	2b0a      	cmp	r3, #10
 8009c48:	f200 819e 	bhi.w	8009f88 <USBH_MSC_BOT_Process+0x374>
 8009c4c:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <USBH_MSC_BOT_Process+0x40>)
 8009c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c52:	bf00      	nop
 8009c54:	08009c81 	.word	0x08009c81
 8009c58:	08009ca9 	.word	0x08009ca9
 8009c5c:	08009d13 	.word	0x08009d13
 8009c60:	08009d31 	.word	0x08009d31
 8009c64:	08009db5 	.word	0x08009db5
 8009c68:	08009dd7 	.word	0x08009dd7
 8009c6c:	08009e6f 	.word	0x08009e6f
 8009c70:	08009e8b 	.word	0x08009e8b
 8009c74:	08009edd 	.word	0x08009edd
 8009c78:	08009f0d 	.word	0x08009f0d
 8009c7c:	08009f6f 	.word	0x08009f6f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	78fa      	ldrb	r2, [r7, #3]
 8009c84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	795b      	ldrb	r3, [r3, #5]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	9200      	str	r2, [sp, #0]
 8009c9e:	221f      	movs	r2, #31
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 ff2a 	bl	800bafa <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009ca6:	e17e      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	795b      	ldrb	r3, [r3, #5]
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f002 faae 	bl	800c210 <USBH_LL_GetURBState>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009cb8:	7d3b      	ldrb	r3, [r7, #20]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d118      	bne.n	8009cf0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00f      	beq.n	8009ce6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	da04      	bge.n	8009cdc <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2203      	movs	r2, #3
 8009cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009cda:	e157      	b.n	8009f8c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2205      	movs	r2, #5
 8009ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ce4:	e152      	b.n	8009f8c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2207      	movs	r2, #7
 8009cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cee:	e14d      	b.n	8009f8c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009cf0:	7d3b      	ldrb	r3, [r7, #20]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d104      	bne.n	8009d00 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cfe:	e145      	b.n	8009f8c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009d00:	7d3b      	ldrb	r3, [r7, #20]
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	f040 8142 	bne.w	8009f8c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	220a      	movs	r2, #10
 8009d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009d10:	e13c      	b.n	8009f8c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	895a      	ldrh	r2, [r3, #10]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	791b      	ldrb	r3, [r3, #4]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 ff0f 	bl	800bb44 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2204      	movs	r2, #4
 8009d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009d2e:	e13a      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	791b      	ldrb	r3, [r3, #4]
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f002 fa6a 	bl	800c210 <USBH_LL_GetURBState>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009d40:	7d3b      	ldrb	r3, [r7, #20]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d12d      	bne.n	8009da2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	8952      	ldrh	r2, [r2, #10]
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d910      	bls.n	8009d74 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	8952      	ldrh	r2, [r2, #10]
 8009d5c:	441a      	add	r2, r3
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	8952      	ldrh	r2, [r2, #10]
 8009d6c:	1a9a      	subs	r2, r3, r2
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d72:	e002      	b.n	8009d7a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	2200      	movs	r2, #0
 8009d78:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	895a      	ldrh	r2, [r3, #10]
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	791b      	ldrb	r3, [r3, #4]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fed7 	bl	800bb44 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009d96:	e0fb      	b.n	8009f90 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	2207      	movs	r2, #7
 8009d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009da0:	e0f6      	b.n	8009f90 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009da2:	7d3b      	ldrb	r3, [r7, #20]
 8009da4:	2b05      	cmp	r3, #5
 8009da6:	f040 80f3 	bne.w	8009f90 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2209      	movs	r2, #9
 8009dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009db2:	e0ed      	b.n	8009f90 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	891a      	ldrh	r2, [r3, #8]
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	795b      	ldrb	r3, [r3, #5]
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	9000      	str	r0, [sp, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 fe97 	bl	800bafa <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	2206      	movs	r2, #6
 8009dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009dd4:	e0e7      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	795b      	ldrb	r3, [r3, #5]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f002 fa17 	bl	800c210 <USBH_LL_GetURBState>
 8009de2:	4603      	mov	r3, r0
 8009de4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009de6:	7d3b      	ldrb	r3, [r7, #20]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d12f      	bne.n	8009e4c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	8912      	ldrh	r2, [r2, #8]
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d910      	bls.n	8009e1a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	8912      	ldrh	r2, [r2, #8]
 8009e02:	441a      	add	r2, r3
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	8912      	ldrh	r2, [r2, #8]
 8009e12:	1a9a      	subs	r2, r3, r2
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e18:	e002      	b.n	8009e20 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00c      	beq.n	8009e42 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	891a      	ldrh	r2, [r3, #8]
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	795b      	ldrb	r3, [r3, #5]
 8009e36:	2001      	movs	r0, #1
 8009e38:	9000      	str	r0, [sp, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fe5d 	bl	800bafa <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009e40:	e0a8      	b.n	8009f94 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2207      	movs	r2, #7
 8009e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e4a:	e0a3      	b.n	8009f94 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e4c:	7d3b      	ldrb	r3, [r7, #20]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d104      	bne.n	8009e5c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	2205      	movs	r2, #5
 8009e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e5a:	e09b      	b.n	8009f94 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009e5c:	7d3b      	ldrb	r3, [r7, #20]
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	f040 8098 	bne.w	8009f94 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	220a      	movs	r2, #10
 8009e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e6c:	e092      	b.n	8009f94 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	791b      	ldrb	r3, [r3, #4]
 8009e78:	220d      	movs	r2, #13
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fe62 	bl	800bb44 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2208      	movs	r2, #8
 8009e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009e88:	e08d      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	791b      	ldrb	r3, [r3, #4]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f002 f9bd 	bl	800c210 <USBH_LL_GetURBState>
 8009e96:	4603      	mov	r3, r0
 8009e98:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009e9a:	7d3b      	ldrb	r3, [r7, #20]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d115      	bne.n	8009ecc <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f8a9 	bl	800a008 <USBH_MSC_DecodeCSW>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009eba:	7d7b      	ldrb	r3, [r7, #21]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d102      	bne.n	8009ec6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009ec4:	e068      	b.n	8009f98 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eca:	e065      	b.n	8009f98 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009ecc:	7d3b      	ldrb	r3, [r7, #20]
 8009ece:	2b05      	cmp	r3, #5
 8009ed0:	d162      	bne.n	8009f98 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2209      	movs	r2, #9
 8009ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009eda:	e05d      	b.n	8009f98 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f864 	bl	8009fb0 <USBH_MSC_BOT_Abort>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009eec:	7dbb      	ldrb	r3, [r7, #22]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2207      	movs	r2, #7
 8009ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009efa:	e04f      	b.n	8009f9c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009efc:	7dbb      	ldrb	r3, [r7, #22]
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d14c      	bne.n	8009f9c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	220b      	movs	r2, #11
 8009f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f0a:	e047      	b.n	8009f9c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f84c 	bl	8009fb0 <USBH_MSC_BOT_Abort>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009f1c:	7dbb      	ldrb	r3, [r7, #22]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d11d      	bne.n	8009f5e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	795b      	ldrb	r3, [r3, #5]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f002 f9cb 	bl	800c2c4 <USBH_LL_GetToggle>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	7959      	ldrb	r1, [r3, #5]
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	f1c3 0301 	rsb	r3, r3, #1
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f002 f98f 	bl	800c264 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	791b      	ldrb	r3, [r3, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f002 f988 	bl	800c264 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	2209      	movs	r2, #9
 8009f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009f5c:	e020      	b.n	8009fa0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009f5e:	7dbb      	ldrb	r3, [r7, #22]
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d11d      	bne.n	8009fa0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	220b      	movs	r2, #11
 8009f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009f6c:	e018      	b.n	8009fa0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff fdf2 	bl	8009b58 <USBH_MSC_BOT_REQ_Reset>
 8009f74:	4603      	mov	r3, r0
 8009f76:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009f78:	7dfb      	ldrb	r3, [r7, #23]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d112      	bne.n	8009fa4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009f86:	e00d      	b.n	8009fa4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009f88:	bf00      	nop
 8009f8a:	e00c      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f8c:	bf00      	nop
 8009f8e:	e00a      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f90:	bf00      	nop
 8009f92:	e008      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f94:	bf00      	nop
 8009f96:	e006      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f98:	bf00      	nop
 8009f9a:	e004      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>
      break;
 8009f9c:	bf00      	nop
 8009f9e:	e002      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>
      break;
 8009fa0:	bf00      	nop
 8009fa2:	e000      	b.n	8009fa6 <USBH_MSC_BOT_Process+0x392>
      break;
 8009fa4:	bf00      	nop
  }
  return status;
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	70fb      	strb	r3, [r7, #3]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009fce:	78bb      	ldrb	r3, [r7, #2]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <USBH_MSC_BOT_Abort+0x2a>
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d009      	beq.n	8009fec <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009fd8:	e011      	b.n	8009ffe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	79db      	ldrb	r3, [r3, #7]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 f99c 	bl	800b31e <USBH_ClrFeature>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8009fea:	e008      	b.n	8009ffe <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	799b      	ldrb	r3, [r3, #6]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 f993 	bl	800b31e <USBH_ClrFeature>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8009ffc:	bf00      	nop
  }
  return status;
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a01a:	2301      	movs	r3, #1
 800a01c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	791b      	ldrb	r3, [r3, #4]
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f002 f861 	bl	800c0ec <USBH_LL_GetLastXferSize>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b0d      	cmp	r3, #13
 800a02e:	d002      	beq.n	800a036 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a030:	2302      	movs	r3, #2
 800a032:	73fb      	strb	r3, [r7, #15]
 800a034:	e024      	b.n	800a080 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a03a:	4a14      	ldr	r2, [pc, #80]	; (800a08c <USBH_MSC_DecodeCSW+0x84>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d11d      	bne.n	800a07c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a048:	429a      	cmp	r2, r3
 800a04a:	d119      	bne.n	800a080 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a052:	2b00      	cmp	r3, #0
 800a054:	d102      	bne.n	800a05c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a056:	2300      	movs	r3, #0
 800a058:	73fb      	strb	r3, [r7, #15]
 800a05a:	e011      	b.n	800a080 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a062:	2b01      	cmp	r3, #1
 800a064:	d102      	bne.n	800a06c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a066:	2301      	movs	r3, #1
 800a068:	73fb      	strb	r3, [r7, #15]
 800a06a:	e009      	b.n	800a080 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a072:	2b02      	cmp	r3, #2
 800a074:	d104      	bne.n	800a080 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a076:	2302      	movs	r3, #2
 800a078:	73fb      	strb	r3, [r7, #15]
 800a07a:	e001      	b.n	800a080 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a07c:	2302      	movs	r3, #2
 800a07e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	53425355 	.word	0x53425355

0800a090 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a09c:	2302      	movs	r3, #2
 800a09e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d002      	beq.n	800a0ba <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d021      	beq.n	800a0fc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a0b8:	e028      	b.n	800a10c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	3363      	adds	r3, #99	; 0x63
 800a0d4:	2210      	movs	r2, #16
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f002 f9bf 	bl	800c45c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0fa:	e007      	b.n	800a10c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fd87 	bl	8009c14 <USBH_MSC_BOT_Process>
 800a106:	4603      	mov	r3, r0
 800a108:	73fb      	strb	r3, [r7, #15]
      break;
 800a10a:	bf00      	nop
  }

  return error;
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b086      	sub	sp, #24
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	460b      	mov	r3, r1
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a124:	2301      	movs	r3, #1
 800a126:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d002      	beq.n	800a142 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d027      	beq.n	800a190 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a140:	e05f      	b.n	800a202 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	2208      	movs	r2, #8
 800a146:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	2280      	movs	r2, #128	; 0x80
 800a14c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	220a      	movs	r2, #10
 800a154:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	3363      	adds	r3, #99	; 0x63
 800a15c:	2210      	movs	r2, #16
 800a15e:	2100      	movs	r1, #0
 800a160:	4618      	mov	r0, r3
 800a162:	f002 f97b 	bl	800c45c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2225      	movs	r2, #37	; 0x25
 800a16a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2202      	movs	r2, #2
 800a17a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f103 0210 	add.w	r2, r3, #16
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a18a:	2301      	movs	r3, #1
 800a18c:	75fb      	strb	r3, [r7, #23]
      break;
 800a18e:	e038      	b.n	800a202 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a190:	7afb      	ldrb	r3, [r7, #11]
 800a192:	4619      	mov	r1, r3
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f7ff fd3d 	bl	8009c14 <USBH_MSC_BOT_Process>
 800a19a:	4603      	mov	r3, r0
 800a19c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d12d      	bne.n	800a200 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1aa:	3303      	adds	r3, #3
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1b6:	3302      	adds	r3, #2
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a1ca:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	061b      	lsls	r3, r3, #24
 800a1d6:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1e2:	3307      	adds	r3, #7
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ee:	3306      	adds	r3, #6
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	809a      	strh	r2, [r3, #4]
      break;
 800a200:	bf00      	nop
  }

  return error;
 800a202:	7dfb      	ldrb	r3, [r7, #23]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	460b      	mov	r3, r1
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a21a:	2302      	movs	r3, #2
 800a21c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d002      	beq.n	800a238 <USBH_MSC_SCSI_Inquiry+0x2c>
 800a232:	2b02      	cmp	r3, #2
 800a234:	d03d      	beq.n	800a2b2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a236:	e089      	b.n	800a34c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	2224      	movs	r2, #36	; 0x24
 800a23c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2280      	movs	r2, #128	; 0x80
 800a242:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	220a      	movs	r2, #10
 800a24a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	3363      	adds	r3, #99	; 0x63
 800a252:	220a      	movs	r2, #10
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f002 f900 	bl	800c45c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	2212      	movs	r2, #18
 800a260:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a264:	7afb      	ldrb	r3, [r7, #11]
 800a266:	015b      	lsls	r3, r3, #5
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	2224      	movs	r2, #36	; 0x24
 800a284:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f103 0210 	add.w	r2, r3, #16
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b0:	e04c      	b.n	800a34c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff fcac 	bl	8009c14 <USBH_MSC_BOT_Process>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d141      	bne.n	800a34a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a2c6:	2222      	movs	r2, #34	; 0x22
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f002 f8c6 	bl	800c45c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	f003 031f 	and.w	r3, r3, #31
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	095b      	lsrs	r3, r3, #5
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	b25b      	sxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	da03      	bge.n	800a30a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	709a      	strb	r2, [r3, #2]
 800a308:	e002      	b.n	800a310 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	1cd8      	adds	r0, r3, #3
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a31a:	3308      	adds	r3, #8
 800a31c:	2208      	movs	r2, #8
 800a31e:	4619      	mov	r1, r3
 800a320:	f002 f88e 	bl	800c440 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f103 000c 	add.w	r0, r3, #12
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a330:	3310      	adds	r3, #16
 800a332:	2210      	movs	r2, #16
 800a334:	4619      	mov	r1, r3
 800a336:	f002 f883 	bl	800c440 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	331d      	adds	r3, #29
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a344:	3220      	adds	r2, #32
 800a346:	6812      	ldr	r2, [r2, #0]
 800a348:	601a      	str	r2, [r3, #0]
      break;
 800a34a:	bf00      	nop
  }

  return error;
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	460b      	mov	r3, r1
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a364:	2302      	movs	r3, #2
 800a366:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d002      	beq.n	800a382 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d03d      	beq.n	800a3fc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a380:	e05d      	b.n	800a43e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	220e      	movs	r2, #14
 800a386:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	2280      	movs	r2, #128	; 0x80
 800a38c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	220a      	movs	r2, #10
 800a394:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	3363      	adds	r3, #99	; 0x63
 800a39c:	2210      	movs	r2, #16
 800a39e:	2100      	movs	r1, #0
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f002 f85b 	bl	800c45c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2203      	movs	r2, #3
 800a3aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a3ae:	7afb      	ldrb	r3, [r7, #11]
 800a3b0:	015b      	lsls	r3, r3, #5
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	220e      	movs	r2, #14
 800a3ce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f103 0210 	add.w	r2, r3, #16
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a3fa:	e020      	b.n	800a43e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a3fc:	7afb      	ldrb	r3, [r7, #11]
 800a3fe:	4619      	mov	r1, r3
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff fc07 	bl	8009c14 <USBH_MSC_BOT_Process>
 800a406:	4603      	mov	r3, r0
 800a408:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d115      	bne.n	800a43c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a416:	3302      	adds	r3, #2
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	f003 030f 	and.w	r3, r3, #15
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a42a:	7b1a      	ldrb	r2, [r3, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a436:	7b5a      	ldrb	r2, [r3, #13]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	709a      	strb	r2, [r3, #2]
      break;
 800a43c:	bf00      	nop
  }

  return error;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	607a      	str	r2, [r7, #4]
 800a452:	603b      	str	r3, [r7, #0]
 800a454:	460b      	mov	r3, r1
 800a456:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a458:	2302      	movs	r3, #2
 800a45a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d002      	beq.n	800a476 <USBH_MSC_SCSI_Write+0x2e>
 800a470:	2b02      	cmp	r3, #2
 800a472:	d047      	beq.n	800a504 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a474:	e04e      	b.n	800a514 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a47c:	461a      	mov	r2, r3
 800a47e:	6a3b      	ldr	r3, [r7, #32]
 800a480:	fb03 f202 	mul.w	r2, r3, r2
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	220a      	movs	r2, #10
 800a494:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	3363      	adds	r3, #99	; 0x63
 800a49c:	2210      	movs	r2, #16
 800a49e:	2100      	movs	r1, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f001 ffdb 	bl	800c45c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	222a      	movs	r2, #42	; 0x2a
 800a4aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a4ae:	79fa      	ldrb	r2, [r7, #7]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a4b6:	79ba      	ldrb	r2, [r7, #6]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a4be:	797a      	ldrb	r2, [r7, #5]
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a4c6:	1d3b      	adds	r3, r7, #4
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a4d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a4da:	f107 0320 	add.w	r3, r7, #32
 800a4de:	781a      	ldrb	r2, [r3, #0]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a4fe:	2301      	movs	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]
      break;
 800a502:	e007      	b.n	800a514 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a504:	7afb      	ldrb	r3, [r7, #11]
 800a506:	4619      	mov	r1, r3
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7ff fb83 	bl	8009c14 <USBH_MSC_BOT_Process>
 800a50e:	4603      	mov	r3, r0
 800a510:	75fb      	strb	r3, [r7, #23]
      break;
 800a512:	bf00      	nop
  }

  return error;
 800a514:	7dfb      	ldrb	r3, [r7, #23]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b086      	sub	sp, #24
 800a522:	af00      	add	r7, sp, #0
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	603b      	str	r3, [r7, #0]
 800a52a:	460b      	mov	r3, r1
 800a52c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a52e:	2302      	movs	r3, #2
 800a530:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a542:	2b01      	cmp	r3, #1
 800a544:	d002      	beq.n	800a54c <USBH_MSC_SCSI_Read+0x2e>
 800a546:	2b02      	cmp	r3, #2
 800a548:	d047      	beq.n	800a5da <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a54a:	e04e      	b.n	800a5ea <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a552:	461a      	mov	r2, r3
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	fb03 f202 	mul.w	r2, r3, r2
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2280      	movs	r2, #128	; 0x80
 800a562:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	220a      	movs	r2, #10
 800a56a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	3363      	adds	r3, #99	; 0x63
 800a572:	2210      	movs	r2, #16
 800a574:	2100      	movs	r1, #0
 800a576:	4618      	mov	r0, r3
 800a578:	f001 ff70 	bl	800c45c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2228      	movs	r2, #40	; 0x28
 800a580:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a584:	79fa      	ldrb	r2, [r7, #7]
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a58c:	79ba      	ldrb	r2, [r7, #6]
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a594:	797a      	ldrb	r2, [r7, #5]
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a59c:	1d3b      	adds	r3, r7, #4
 800a59e:	781a      	ldrb	r2, [r3, #0]
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a5a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a5b0:	f107 0320 	add.w	r3, r7, #32
 800a5b4:	781a      	ldrb	r2, [r3, #0]
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d8:	e007      	b.n	800a5ea <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a5da:	7afb      	ldrb	r3, [r7, #11]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f7ff fb18 	bl	8009c14 <USBH_MSC_BOT_Process>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5e8:	bf00      	nop
  }

  return error;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a608:	2302      	movs	r3, #2
 800a60a:	e029      	b.n	800a660 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	79fa      	ldrb	r2, [r7, #7]
 800a610:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f81f 	bl	800a668 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f001 fc93 	bl	800bf84 <USBH_LL_Init>

  return USBH_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	e009      	b.n	800a68e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	33e0      	adds	r3, #224	; 0xe0
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	2200      	movs	r2, #0
 800a686:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3301      	adds	r3, #1
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b0e      	cmp	r3, #14
 800a692:	d9f2      	bls.n	800a67a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a694:	2300      	movs	r3, #0
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	e009      	b.n	800a6ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b4:	d3f1      	bcc.n	800a69a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2240      	movs	r2, #64	; 0x40
 800a6da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d016      	beq.n	800a752 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10e      	bne.n	800a74c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a734:	1c59      	adds	r1, r3, #1
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	33de      	adds	r3, #222	; 0xde
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	73fb      	strb	r3, [r7, #15]
 800a74a:	e004      	b.n	800a756 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a74c:	2302      	movs	r3, #2
 800a74e:	73fb      	strb	r3, [r7, #15]
 800a750:	e001      	b.n	800a756 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a752:	2302      	movs	r3, #2
 800a754:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a77a:	78fa      	ldrb	r2, [r7, #3]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d204      	bcs.n	800a78a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	78fa      	ldrb	r2, [r7, #3]
 800a784:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a788:	e001      	b.n	800a78e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a78a:	2302      	movs	r3, #2
 800a78c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	70fb      	strb	r3, [r7, #3]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70bb      	strb	r3, [r7, #2]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a7c4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a7c6:	e025      	b.n	800a814 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	221a      	movs	r2, #26
 800a7cc:	fb02 f303 	mul.w	r3, r2, r3
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	3302      	adds	r3, #2
 800a7d8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	795b      	ldrb	r3, [r3, #5]
 800a7de:	78fa      	ldrb	r2, [r7, #3]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d002      	beq.n	800a7ea <USBH_FindInterface+0x4e>
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	2bff      	cmp	r3, #255	; 0xff
 800a7e8:	d111      	bne.n	800a80e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a7ee:	78ba      	ldrb	r2, [r7, #2]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d002      	beq.n	800a7fa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a7f4:	78bb      	ldrb	r3, [r7, #2]
 800a7f6:	2bff      	cmp	r3, #255	; 0xff
 800a7f8:	d109      	bne.n	800a80e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a7fe:	787a      	ldrb	r2, [r7, #1]
 800a800:	429a      	cmp	r2, r3
 800a802:	d002      	beq.n	800a80a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a804:	787b      	ldrb	r3, [r7, #1]
 800a806:	2bff      	cmp	r3, #255	; 0xff
 800a808:	d101      	bne.n	800a80e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
 800a80c:	e006      	b.n	800a81c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	3301      	adds	r3, #1
 800a812:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d9d6      	bls.n	800a7c8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a81a:	23ff      	movs	r3, #255	; 0xff
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	371c      	adds	r7, #28
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 fbe3 	bl	800bffc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a836:	2101      	movs	r1, #1
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f001 fcfc 	bl	800c236 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af04      	add	r7, sp, #16
 800a84e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a850:	2302      	movs	r3, #2
 800a852:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b01      	cmp	r3, #1
 800a862:	d102      	bne.n	800a86a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2203      	movs	r2, #3
 800a868:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b0b      	cmp	r3, #11
 800a872:	f200 81b3 	bhi.w	800abdc <USBH_Process+0x394>
 800a876:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <USBH_Process+0x34>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a8ad 	.word	0x0800a8ad
 800a880:	0800a8df 	.word	0x0800a8df
 800a884:	0800a947 	.word	0x0800a947
 800a888:	0800ab77 	.word	0x0800ab77
 800a88c:	0800abdd 	.word	0x0800abdd
 800a890:	0800a9eb 	.word	0x0800a9eb
 800a894:	0800ab1d 	.word	0x0800ab1d
 800a898:	0800aa21 	.word	0x0800aa21
 800a89c:	0800aa41 	.word	0x0800aa41
 800a8a0:	0800aa61 	.word	0x0800aa61
 800a8a4:	0800aa8f 	.word	0x0800aa8f
 800a8a8:	0800ab5f 	.word	0x0800ab5f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 8193 	beq.w	800abe0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a8c0:	20c8      	movs	r0, #200	; 0xc8
 800a8c2:	f001 fd2f 	bl	800c324 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 fbf5 	bl	800c0b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8dc:	e180      	b.n	800abe0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d107      	bne.n	800a8f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8f6:	e182      	b.n	800abfe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a8fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a902:	d914      	bls.n	800a92e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a90a:	3301      	adds	r3, #1
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d903      	bls.n	800a926 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	220d      	movs	r2, #13
 800a922:	701a      	strb	r2, [r3, #0]
      break;
 800a924:	e16b      	b.n	800abfe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
      break;
 800a92c:	e167      	b.n	800abfe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a934:	f103 020a 	add.w	r2, r3, #10
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a93e:	200a      	movs	r0, #10
 800a940:	f001 fcf0 	bl	800c324 <USBH_Delay>
      break;
 800a944:	e15b      	b.n	800abfe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a956:	2104      	movs	r1, #4
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a95c:	2064      	movs	r0, #100	; 0x64
 800a95e:	f001 fce1 	bl	800c324 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f001 fb80 	bl	800c068 <USBH_LL_GetSpeed>
 800a968:	4603      	mov	r3, r0
 800a96a:	461a      	mov	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2205      	movs	r2, #5
 800a976:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a978:	2100      	movs	r1, #0
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 f92f 	bl	800bbde <USBH_AllocPipe>
 800a980:	4603      	mov	r3, r0
 800a982:	461a      	mov	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a988:	2180      	movs	r1, #128	; 0x80
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 f927 	bl	800bbde <USBH_AllocPipe>
 800a990:	4603      	mov	r3, r0
 800a992:	461a      	mov	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	7919      	ldrb	r1, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a9ac:	b292      	uxth	r2, r2
 800a9ae:	9202      	str	r2, [sp, #8]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	9201      	str	r2, [sp, #4]
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2280      	movs	r2, #128	; 0x80
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 f8e0 	bl	800bb80 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	7959      	ldrb	r1, [r3, #5]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a9d4:	b292      	uxth	r2, r2
 800a9d6:	9202      	str	r2, [sp, #8]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	9201      	str	r2, [sp, #4]
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f001 f8cc 	bl	800bb80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9e8:	e109      	b.n	800abfe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f90c 	bl	800ac08 <USBH_HandleEnum>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f040 80f3 	bne.w	800abe4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d103      	bne.n	800aa18 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2208      	movs	r2, #8
 800aa14:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aa16:	e0e5      	b.n	800abe4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2207      	movs	r2, #7
 800aa1c:	701a      	strb	r2, [r3, #0]
      break;
 800aa1e:	e0e1      	b.n	800abe4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f000 80de 	beq.w	800abe8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa32:	2101      	movs	r1, #1
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800aa3e:	e0d3      	b.n	800abe8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	4619      	mov	r1, r3
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fc20 	bl	800b290 <USBH_SetCfg>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 80ca 	bne.w	800abec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2209      	movs	r2, #9
 800aa5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa5e:	e0c5      	b.n	800abec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00b      	beq.n	800aa86 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800aa6e:	2101      	movs	r1, #1
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fc30 	bl	800b2d6 <USBH_SetFeature>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f040 80b9 	bne.w	800abf0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	220a      	movs	r2, #10
 800aa82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aa84:	e0b4      	b.n	800abf0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	220a      	movs	r2, #10
 800aa8a:	701a      	strb	r2, [r3, #0]
      break;
 800aa8c:	e0b0      	b.n	800abf0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80ad 	beq.w	800abf4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73fb      	strb	r3, [r7, #15]
 800aaa6:	e016      	b.n	800aad6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aaa8:	7bfa      	ldrb	r2, [r7, #15]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	32de      	adds	r2, #222	; 0xde
 800aaae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab2:	791a      	ldrb	r2, [r3, #4]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d108      	bne.n	800aad0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aabe:	7bfa      	ldrb	r2, [r7, #15]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	32de      	adds	r2, #222	; 0xde
 800aac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aace:	e005      	b.n	800aadc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	3301      	adds	r3, #1
 800aad4:	73fb      	strb	r3, [r7, #15]
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0e5      	beq.n	800aaa8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d016      	beq.n	800ab14 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	4798      	blx	r3
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d109      	bne.n	800ab0c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2206      	movs	r2, #6
 800aafc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab04:	2103      	movs	r1, #3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab0a:	e073      	b.n	800abf4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	220d      	movs	r2, #13
 800ab10:	701a      	strb	r2, [r3, #0]
      break;
 800ab12:	e06f      	b.n	800abf4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	220d      	movs	r2, #13
 800ab18:	701a      	strb	r2, [r3, #0]
      break;
 800ab1a:	e06b      	b.n	800abf4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d017      	beq.n	800ab56 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	4798      	blx	r3
 800ab32:	4603      	mov	r3, r0
 800ab34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d103      	bne.n	800ab46 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	220b      	movs	r2, #11
 800ab42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab44:	e058      	b.n	800abf8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d154      	bne.n	800abf8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	220d      	movs	r2, #13
 800ab52:	701a      	strb	r2, [r3, #0]
      break;
 800ab54:	e050      	b.n	800abf8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	220d      	movs	r2, #13
 800ab5a:	701a      	strb	r2, [r3, #0]
      break;
 800ab5c:	e04c      	b.n	800abf8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d049      	beq.n	800abfc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
      }
      break;
 800ab74:	e042      	b.n	800abfc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7ff fd72 	bl	800a668 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d009      	beq.n	800aba2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d005      	beq.n	800abb8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abb2:	2105      	movs	r1, #5
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d107      	bne.n	800abd4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff fe2b 	bl	800a828 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800abd2:	e014      	b.n	800abfe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f001 fa11 	bl	800bffc <USBH_LL_Start>
      break;
 800abda:	e010      	b.n	800abfe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800abdc:	bf00      	nop
 800abde:	e00e      	b.n	800abfe <USBH_Process+0x3b6>
      break;
 800abe0:	bf00      	nop
 800abe2:	e00c      	b.n	800abfe <USBH_Process+0x3b6>
      break;
 800abe4:	bf00      	nop
 800abe6:	e00a      	b.n	800abfe <USBH_Process+0x3b6>
    break;
 800abe8:	bf00      	nop
 800abea:	e008      	b.n	800abfe <USBH_Process+0x3b6>
      break;
 800abec:	bf00      	nop
 800abee:	e006      	b.n	800abfe <USBH_Process+0x3b6>
      break;
 800abf0:	bf00      	nop
 800abf2:	e004      	b.n	800abfe <USBH_Process+0x3b6>
      break;
 800abf4:	bf00      	nop
 800abf6:	e002      	b.n	800abfe <USBH_Process+0x3b6>
      break;
 800abf8:	bf00      	nop
 800abfa:	e000      	b.n	800abfe <USBH_Process+0x3b6>
      break;
 800abfc:	bf00      	nop
  }
  return USBH_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af04      	add	r7, sp, #16
 800ac0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ac14:	2301      	movs	r3, #1
 800ac16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	785b      	ldrb	r3, [r3, #1]
 800ac1c:	2b07      	cmp	r3, #7
 800ac1e:	f200 81c1 	bhi.w	800afa4 <USBH_HandleEnum+0x39c>
 800ac22:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <USBH_HandleEnum+0x20>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800ac49 	.word	0x0800ac49
 800ac2c:	0800ad07 	.word	0x0800ad07
 800ac30:	0800ad71 	.word	0x0800ad71
 800ac34:	0800adff 	.word	0x0800adff
 800ac38:	0800ae69 	.word	0x0800ae69
 800ac3c:	0800aed9 	.word	0x0800aed9
 800ac40:	0800af1f 	.word	0x0800af1f
 800ac44:	0800af65 	.word	0x0800af65
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ac48:	2108      	movs	r1, #8
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa50 	bl	800b0f0 <USBH_Get_DevDesc>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d130      	bne.n	800acbc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	7919      	ldrb	r1, [r3, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac7e:	b292      	uxth	r2, r2
 800ac80:	9202      	str	r2, [sp, #8]
 800ac82:	2200      	movs	r2, #0
 800ac84:	9201      	str	r2, [sp, #4]
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2280      	movs	r2, #128	; 0x80
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 ff77 	bl	800bb80 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	7959      	ldrb	r1, [r3, #5]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aca6:	b292      	uxth	r2, r2
 800aca8:	9202      	str	r2, [sp, #8]
 800acaa:	2200      	movs	r2, #0
 800acac:	9201      	str	r2, [sp, #4]
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	4603      	mov	r3, r0
 800acb2:	2200      	movs	r2, #0
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 ff63 	bl	800bb80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800acba:	e175      	b.n	800afa8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	f040 8172 	bne.w	800afa8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acca:	3301      	adds	r3, #1
 800accc:	b2da      	uxtb	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d903      	bls.n	800ace6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	220d      	movs	r2, #13
 800ace2:	701a      	strb	r2, [r3, #0]
      break;
 800ace4:	e160      	b.n	800afa8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	795b      	ldrb	r3, [r3, #5]
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 ff97 	bl	800bc20 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 ff91 	bl	800bc20 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	701a      	strb	r2, [r3, #0]
      break;
 800ad04:	e150      	b.n	800afa8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ad06:	2112      	movs	r1, #18
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f9f1 	bl	800b0f0 <USBH_Get_DevDesc>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d103      	bne.n	800ad20 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad1e:	e145      	b.n	800afac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	f040 8142 	bne.w	800afac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad2e:	3301      	adds	r3, #1
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d903      	bls.n	800ad4a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	220d      	movs	r2, #13
 800ad46:	701a      	strb	r2, [r3, #0]
      break;
 800ad48:	e130      	b.n	800afac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	795b      	ldrb	r3, [r3, #5]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 ff65 	bl	800bc20 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	791b      	ldrb	r3, [r3, #4]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 ff5f 	bl	800bc20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	701a      	strb	r2, [r3, #0]
      break;
 800ad6e:	e11d      	b.n	800afac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ad70:	2101      	movs	r1, #1
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fa68 	bl	800b248 <USBH_SetAddress>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d132      	bne.n	800ade8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ad82:	2002      	movs	r0, #2
 800ad84:	f001 face 	bl	800c324 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2203      	movs	r2, #3
 800ad94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	7919      	ldrb	r1, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800adaa:	b292      	uxth	r2, r2
 800adac:	9202      	str	r2, [sp, #8]
 800adae:	2200      	movs	r2, #0
 800adb0:	9201      	str	r2, [sp, #4]
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	4603      	mov	r3, r0
 800adb6:	2280      	movs	r2, #128	; 0x80
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fee1 	bl	800bb80 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7959      	ldrb	r1, [r3, #5]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800add2:	b292      	uxth	r2, r2
 800add4:	9202      	str	r2, [sp, #8]
 800add6:	2200      	movs	r2, #0
 800add8:	9201      	str	r2, [sp, #4]
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	4603      	mov	r3, r0
 800adde:	2200      	movs	r2, #0
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fecd 	bl	800bb80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ade6:	e0e3      	b.n	800afb0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	2b03      	cmp	r3, #3
 800adec:	f040 80e0 	bne.w	800afb0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	220d      	movs	r2, #13
 800adf4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	705a      	strb	r2, [r3, #1]
      break;
 800adfc:	e0d8      	b.n	800afb0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800adfe:	2109      	movs	r1, #9
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f99d 	bl	800b140 <USBH_Get_CfgDesc>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae0a:	7bbb      	ldrb	r3, [r7, #14]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d103      	bne.n	800ae18 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2204      	movs	r2, #4
 800ae14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae16:	e0cd      	b.n	800afb4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	2b03      	cmp	r3, #3
 800ae1c:	f040 80ca 	bne.w	800afb4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae26:	3301      	adds	r3, #1
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d903      	bls.n	800ae42 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	220d      	movs	r2, #13
 800ae3e:	701a      	strb	r2, [r3, #0]
      break;
 800ae40:	e0b8      	b.n	800afb4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	795b      	ldrb	r3, [r3, #5]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fee9 	bl	800bc20 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	791b      	ldrb	r3, [r3, #4]
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fee3 	bl	800bc20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
      break;
 800ae66:	e0a5      	b.n	800afb4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f965 	bl	800b140 <USBH_Get_CfgDesc>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae7a:	7bbb      	ldrb	r3, [r7, #14]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d103      	bne.n	800ae88 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2205      	movs	r2, #5
 800ae84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae86:	e097      	b.n	800afb8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	f040 8094 	bne.w	800afb8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae96:	3301      	adds	r3, #1
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d903      	bls.n	800aeb2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	220d      	movs	r2, #13
 800aeae:	701a      	strb	r2, [r3, #0]
      break;
 800aeb0:	e082      	b.n	800afb8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	795b      	ldrb	r3, [r3, #5]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 feb1 	bl	800bc20 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	791b      	ldrb	r3, [r3, #4]
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 feab 	bl	800bc20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	701a      	strb	r2, [r3, #0]
      break;
 800aed6:	e06f      	b.n	800afb8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d019      	beq.n	800af16 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aeee:	23ff      	movs	r3, #255	; 0xff
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f949 	bl	800b188 <USBH_Get_StringDesc>
 800aef6:	4603      	mov	r3, r0
 800aef8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d103      	bne.n	800af08 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2206      	movs	r2, #6
 800af04:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800af06:	e059      	b.n	800afbc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d156      	bne.n	800afbc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2206      	movs	r2, #6
 800af12:	705a      	strb	r2, [r3, #1]
      break;
 800af14:	e052      	b.n	800afbc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2206      	movs	r2, #6
 800af1a:	705a      	strb	r2, [r3, #1]
      break;
 800af1c:	e04e      	b.n	800afbc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800af24:	2b00      	cmp	r3, #0
 800af26:	d019      	beq.n	800af5c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800af34:	23ff      	movs	r3, #255	; 0xff
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f926 	bl	800b188 <USBH_Get_StringDesc>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d103      	bne.n	800af4e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2207      	movs	r2, #7
 800af4a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800af4c:	e038      	b.n	800afc0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
 800af50:	2b03      	cmp	r3, #3
 800af52:	d135      	bne.n	800afc0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2207      	movs	r2, #7
 800af58:	705a      	strb	r2, [r3, #1]
      break;
 800af5a:	e031      	b.n	800afc0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2207      	movs	r2, #7
 800af60:	705a      	strb	r2, [r3, #1]
      break;
 800af62:	e02d      	b.n	800afc0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d017      	beq.n	800af9e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af7a:	23ff      	movs	r3, #255	; 0xff
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f903 	bl	800b188 <USBH_Get_StringDesc>
 800af82:	4603      	mov	r3, r0
 800af84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af86:	7bbb      	ldrb	r3, [r7, #14]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d102      	bne.n	800af92 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800af90:	e018      	b.n	800afc4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af92:	7bbb      	ldrb	r3, [r7, #14]
 800af94:	2b03      	cmp	r3, #3
 800af96:	d115      	bne.n	800afc4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	73fb      	strb	r3, [r7, #15]
      break;
 800af9c:	e012      	b.n	800afc4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	73fb      	strb	r3, [r7, #15]
      break;
 800afa2:	e00f      	b.n	800afc4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800afa4:	bf00      	nop
 800afa6:	e00e      	b.n	800afc6 <USBH_HandleEnum+0x3be>
      break;
 800afa8:	bf00      	nop
 800afaa:	e00c      	b.n	800afc6 <USBH_HandleEnum+0x3be>
      break;
 800afac:	bf00      	nop
 800afae:	e00a      	b.n	800afc6 <USBH_HandleEnum+0x3be>
      break;
 800afb0:	bf00      	nop
 800afb2:	e008      	b.n	800afc6 <USBH_HandleEnum+0x3be>
      break;
 800afb4:	bf00      	nop
 800afb6:	e006      	b.n	800afc6 <USBH_HandleEnum+0x3be>
      break;
 800afb8:	bf00      	nop
 800afba:	e004      	b.n	800afc6 <USBH_HandleEnum+0x3be>
      break;
 800afbc:	bf00      	nop
 800afbe:	e002      	b.n	800afc6 <USBH_HandleEnum+0x3be>
      break;
 800afc0:	bf00      	nop
 800afc2:	e000      	b.n	800afc6 <USBH_HandleEnum+0x3be>
      break;
 800afc4:	bf00      	nop
  }
  return Status;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800afe2:	bf00      	nop
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b082      	sub	sp, #8
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f804 	bl	800b012 <USBH_HandleSof>
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b0b      	cmp	r3, #11
 800b022:	d10a      	bne.n	800b03a <USBH_HandleSof+0x28>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d005      	beq.n	800b03a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	4798      	blx	r3
  }
}
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b052:	bf00      	nop
}
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b06e:	bf00      	nop
}
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 ffb2 	bl	800c032 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	791b      	ldrb	r3, [r3, #4]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fda3 	bl	800bc20 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	795b      	ldrb	r3, [r3, #5]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fd9d 	bl	800bc20 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af02      	add	r7, sp, #8
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b102:	78fb      	ldrb	r3, [r7, #3]
 800b104:	b29b      	uxth	r3, r3
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	4613      	mov	r3, r2
 800b10a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b10e:	2100      	movs	r1, #0
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f864 	bl	800b1de <USBH_GetDescriptor>
 800b116:	4603      	mov	r3, r0
 800b118:	73fb      	strb	r3, [r7, #15]
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10a      	bne.n	800b136 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b12c:	78fa      	ldrb	r2, [r7, #3]
 800b12e:	b292      	uxth	r2, r2
 800b130:	4619      	mov	r1, r3
 800b132:	f000 f918 	bl	800b366 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b136:	7bfb      	ldrb	r3, [r7, #15]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af02      	add	r7, sp, #8
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	331c      	adds	r3, #28
 800b150:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b152:	887b      	ldrh	r3, [r7, #2]
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b15c:	2100      	movs	r1, #0
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f83d 	bl	800b1de <USBH_GetDescriptor>
 800b164:	4603      	mov	r3, r0
 800b166:	72fb      	strb	r3, [r7, #11]
 800b168:	7afb      	ldrb	r3, [r7, #11]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d107      	bne.n	800b17e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b174:	887a      	ldrh	r2, [r7, #2]
 800b176:	68f9      	ldr	r1, [r7, #12]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f964 	bl	800b446 <USBH_ParseCfgDesc>
  }

  return status;
 800b17e:	7afb      	ldrb	r3, [r7, #11]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	607a      	str	r2, [r7, #4]
 800b192:	461a      	mov	r2, r3
 800b194:	460b      	mov	r3, r1
 800b196:	72fb      	strb	r3, [r7, #11]
 800b198:	4613      	mov	r3, r2
 800b19a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b19c:	7afb      	ldrb	r3, [r7, #11]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b1a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b1ac:	893b      	ldrh	r3, [r7, #8]
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f000 f812 	bl	800b1de <USBH_GetDescriptor>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	75fb      	strb	r3, [r7, #23]
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d107      	bne.n	800b1d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b1ca:	893a      	ldrh	r2, [r7, #8]
 800b1cc:	6879      	ldr	r1, [r7, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fa37 	bl	800b642 <USBH_ParseStringDesc>
  }

  return status;
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3718      	adds	r7, #24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	607b      	str	r3, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	72fb      	strb	r3, [r7, #11]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	789b      	ldrb	r3, [r3, #2]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d11c      	bne.n	800b232 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b1f8:	7afb      	ldrb	r3, [r7, #11]
 800b1fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2206      	movs	r2, #6
 800b208:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	893a      	ldrh	r2, [r7, #8]
 800b20e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b210:	893b      	ldrh	r3, [r7, #8]
 800b212:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b21a:	d104      	bne.n	800b226 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f240 4209 	movw	r2, #1033	; 0x409
 800b222:	829a      	strh	r2, [r3, #20]
 800b224:	e002      	b.n	800b22c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	8b3a      	ldrh	r2, [r7, #24]
 800b230:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b232:	8b3b      	ldrh	r3, [r7, #24]
 800b234:	461a      	mov	r2, r3
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 fa50 	bl	800b6de <USBH_CtlReq>
 800b23e:	4603      	mov	r3, r0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	789b      	ldrb	r3, [r3, #2]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d10f      	bne.n	800b27c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2205      	movs	r2, #5
 800b266:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b27c:	2200      	movs	r2, #0
 800b27e:	2100      	movs	r1, #0
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fa2c 	bl	800b6de <USBH_CtlReq>
 800b286:	4603      	mov	r3, r0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	789b      	ldrb	r3, [r3, #2]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d10e      	bne.n	800b2c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2209      	movs	r2, #9
 800b2ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	887a      	ldrh	r2, [r7, #2]
 800b2b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fa09 	bl	800b6de <USBH_CtlReq>
 800b2cc:	4603      	mov	r3, r0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	789b      	ldrb	r3, [r3, #2]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d10f      	bne.n	800b30a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b2f6:	78fb      	ldrb	r3, [r7, #3]
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b30a:	2200      	movs	r2, #0
 800b30c:	2100      	movs	r1, #0
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f9e5 	bl	800b6de <USBH_CtlReq>
 800b314:	4603      	mov	r3, r0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	460b      	mov	r3, r1
 800b328:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	789b      	ldrb	r3, [r3, #2]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d10f      	bne.n	800b352 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2202      	movs	r2, #2
 800b336:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b344:	78fb      	ldrb	r3, [r7, #3]
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b352:	2200      	movs	r2, #0
 800b354:	2100      	movs	r1, #0
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f9c1 	bl	800b6de <USBH_CtlReq>
 800b35c:	4603      	mov	r3, r0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b366:	b480      	push	{r7}
 800b368:	b085      	sub	sp, #20
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	4613      	mov	r3, r2
 800b372:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	781a      	ldrb	r2, [r3, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	785a      	ldrb	r2, [r3, #1]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	3302      	adds	r3, #2
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	3303      	adds	r3, #3
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	b29b      	uxth	r3, r3
 800b394:	021b      	lsls	r3, r3, #8
 800b396:	b29b      	uxth	r3, r3
 800b398:	4313      	orrs	r3, r2
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	791a      	ldrb	r2, [r3, #4]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	795a      	ldrb	r2, [r3, #5]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	799a      	ldrb	r2, [r3, #6]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	79da      	ldrb	r2, [r3, #7]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b3c0:	88fb      	ldrh	r3, [r7, #6]
 800b3c2:	2b08      	cmp	r3, #8
 800b3c4:	d939      	bls.n	800b43a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	3308      	adds	r3, #8
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	3309      	adds	r3, #9
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	021b      	lsls	r3, r3, #8
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	330a      	adds	r3, #10
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	330b      	adds	r3, #11
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	021b      	lsls	r3, r3, #8
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	330c      	adds	r3, #12
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	b29a      	uxth	r2, r3
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	330d      	adds	r3, #13
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	021b      	lsls	r3, r3, #8
 800b410:	b29b      	uxth	r3, r3
 800b412:	4313      	orrs	r3, r2
 800b414:	b29a      	uxth	r2, r3
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	7b9a      	ldrb	r2, [r3, #14]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	7bda      	ldrb	r2, [r3, #15]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	7c1a      	ldrb	r2, [r3, #16]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	7c5a      	ldrb	r2, [r3, #17]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	745a      	strb	r2, [r3, #17]
  }
}
 800b43a:	bf00      	nop
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b08a      	sub	sp, #40	; 0x28
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	60f8      	str	r0, [r7, #12]
 800b44e:	60b9      	str	r1, [r7, #8]
 800b450:	4613      	mov	r3, r2
 800b452:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b458:	2300      	movs	r3, #0
 800b45a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b45e:	2300      	movs	r3, #0
 800b460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	781a      	ldrb	r2, [r3, #0]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	785a      	ldrb	r2, [r3, #1]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	3302      	adds	r3, #2
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	b29a      	uxth	r2, r3
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	3303      	adds	r3, #3
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	b29b      	uxth	r3, r3
 800b488:	021b      	lsls	r3, r3, #8
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	4313      	orrs	r3, r2
 800b48e:	b29a      	uxth	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	791a      	ldrb	r2, [r3, #4]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	795a      	ldrb	r2, [r3, #5]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	799a      	ldrb	r2, [r3, #6]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	79da      	ldrb	r2, [r3, #7]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	7a1a      	ldrb	r2, [r3, #8]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b4bc:	88fb      	ldrh	r3, [r7, #6]
 800b4be:	2b09      	cmp	r3, #9
 800b4c0:	d95f      	bls.n	800b582 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b4c2:	2309      	movs	r3, #9
 800b4c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b4ca:	e051      	b.n	800b570 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b4cc:	f107 0316 	add.w	r3, r7, #22
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4d4:	f000 f8e8 	bl	800b6a8 <USBH_GetNextDesc>
 800b4d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4dc:	785b      	ldrb	r3, [r3, #1]
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d146      	bne.n	800b570 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b4e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4e6:	221a      	movs	r2, #26
 800b4e8:	fb02 f303 	mul.w	r3, r2, r3
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	3302      	adds	r3, #2
 800b4f4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b4f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4f8:	69f8      	ldr	r0, [r7, #28]
 800b4fa:	f000 f846 	bl	800b58a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b4fe:	2300      	movs	r3, #0
 800b500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b504:	2300      	movs	r3, #0
 800b506:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b508:	e022      	b.n	800b550 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b50a:	f107 0316 	add.w	r3, r7, #22
 800b50e:	4619      	mov	r1, r3
 800b510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b512:	f000 f8c9 	bl	800b6a8 <USBH_GetNextDesc>
 800b516:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	785b      	ldrb	r3, [r3, #1]
 800b51c:	2b05      	cmp	r3, #5
 800b51e:	d117      	bne.n	800b550 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b524:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b528:	3201      	adds	r2, #1
 800b52a:	00d2      	lsls	r2, r2, #3
 800b52c:	211a      	movs	r1, #26
 800b52e:	fb01 f303 	mul.w	r3, r1, r3
 800b532:	4413      	add	r3, r2
 800b534:	3308      	adds	r3, #8
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	4413      	add	r3, r2
 800b53a:	3304      	adds	r3, #4
 800b53c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b53e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b540:	69b8      	ldr	r0, [r7, #24]
 800b542:	f000 f851 	bl	800b5e8 <USBH_ParseEPDesc>
            ep_ix++;
 800b546:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b54a:	3301      	adds	r3, #1
 800b54c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	791b      	ldrb	r3, [r3, #4]
 800b554:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b558:	429a      	cmp	r2, r3
 800b55a:	d204      	bcs.n	800b566 <USBH_ParseCfgDesc+0x120>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	885a      	ldrh	r2, [r3, #2]
 800b560:	8afb      	ldrh	r3, [r7, #22]
 800b562:	429a      	cmp	r2, r3
 800b564:	d8d1      	bhi.n	800b50a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b56a:	3301      	adds	r3, #1
 800b56c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b574:	2b01      	cmp	r3, #1
 800b576:	d804      	bhi.n	800b582 <USBH_ParseCfgDesc+0x13c>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	885a      	ldrh	r2, [r3, #2]
 800b57c:	8afb      	ldrh	r3, [r7, #22]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d8a4      	bhi.n	800b4cc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b582:	bf00      	nop
 800b584:	3728      	adds	r7, #40	; 0x28
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b083      	sub	sp, #12
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	781a      	ldrb	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	785a      	ldrb	r2, [r3, #1]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	789a      	ldrb	r2, [r3, #2]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	78da      	ldrb	r2, [r3, #3]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	791a      	ldrb	r2, [r3, #4]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	795a      	ldrb	r2, [r3, #5]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	799a      	ldrb	r2, [r3, #6]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	79da      	ldrb	r2, [r3, #7]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	7a1a      	ldrb	r2, [r3, #8]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	721a      	strb	r2, [r3, #8]
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	781a      	ldrb	r2, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	785a      	ldrb	r2, [r3, #1]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	789a      	ldrb	r2, [r3, #2]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	78da      	ldrb	r2, [r3, #3]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	3304      	adds	r3, #4
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	b29a      	uxth	r2, r3
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	3305      	adds	r3, #5
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	b29b      	uxth	r3, r3
 800b622:	021b      	lsls	r3, r3, #8
 800b624:	b29b      	uxth	r3, r3
 800b626:	4313      	orrs	r3, r2
 800b628:	b29a      	uxth	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	799a      	ldrb	r2, [r3, #6]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	719a      	strb	r2, [r3, #6]
}
 800b636:	bf00      	nop
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b642:	b480      	push	{r7}
 800b644:	b087      	sub	sp, #28
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	4613      	mov	r3, r2
 800b64e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3301      	adds	r3, #1
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	2b03      	cmp	r3, #3
 800b658:	d120      	bne.n	800b69c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	1e9a      	subs	r2, r3, #2
 800b660:	88fb      	ldrh	r3, [r7, #6]
 800b662:	4293      	cmp	r3, r2
 800b664:	bf28      	it	cs
 800b666:	4613      	movcs	r3, r2
 800b668:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3302      	adds	r3, #2
 800b66e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b670:	2300      	movs	r3, #0
 800b672:	82fb      	strh	r3, [r7, #22]
 800b674:	e00b      	b.n	800b68e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b676:	8afb      	ldrh	r3, [r7, #22]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	4413      	add	r3, r2
 800b67c:	781a      	ldrb	r2, [r3, #0]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	3301      	adds	r3, #1
 800b686:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b688:	8afb      	ldrh	r3, [r7, #22]
 800b68a:	3302      	adds	r3, #2
 800b68c:	82fb      	strh	r3, [r7, #22]
 800b68e:	8afa      	ldrh	r2, [r7, #22]
 800b690:	8abb      	ldrh	r3, [r7, #20]
 800b692:	429a      	cmp	r2, r3
 800b694:	d3ef      	bcc.n	800b676 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2200      	movs	r2, #0
 800b69a:	701a      	strb	r2, [r3, #0]
  }
}
 800b69c:	bf00      	nop
 800b69e:	371c      	adds	r7, #28
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	881a      	ldrh	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	4413      	add	r3, r2
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b086      	sub	sp, #24
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	789b      	ldrb	r3, [r3, #2]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d002      	beq.n	800b6fe <USBH_CtlReq+0x20>
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d00f      	beq.n	800b71c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b6fc:	e027      	b.n	800b74e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	88fa      	ldrh	r2, [r7, #6]
 800b708:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2201      	movs	r2, #1
 800b70e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2202      	movs	r2, #2
 800b714:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b716:	2301      	movs	r3, #1
 800b718:	75fb      	strb	r3, [r7, #23]
      break;
 800b71a:	e018      	b.n	800b74e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 f81b 	bl	800b758 <USBH_HandleControl>
 800b722:	4603      	mov	r3, r0
 800b724:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <USBH_CtlReq+0x54>
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d106      	bne.n	800b740 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2201      	movs	r2, #1
 800b736:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	761a      	strb	r2, [r3, #24]
      break;
 800b73e:	e005      	b.n	800b74c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	2b02      	cmp	r3, #2
 800b744:	d102      	bne.n	800b74c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	709a      	strb	r2, [r3, #2]
      break;
 800b74c:	bf00      	nop
  }
  return status;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3718      	adds	r7, #24
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b760:	2301      	movs	r3, #1
 800b762:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b764:	2300      	movs	r3, #0
 800b766:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	7e1b      	ldrb	r3, [r3, #24]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	2b0a      	cmp	r3, #10
 800b770:	f200 8156 	bhi.w	800ba20 <USBH_HandleControl+0x2c8>
 800b774:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <USBH_HandleControl+0x24>)
 800b776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77a:	bf00      	nop
 800b77c:	0800b7a9 	.word	0x0800b7a9
 800b780:	0800b7c3 	.word	0x0800b7c3
 800b784:	0800b82d 	.word	0x0800b82d
 800b788:	0800b853 	.word	0x0800b853
 800b78c:	0800b88b 	.word	0x0800b88b
 800b790:	0800b8b5 	.word	0x0800b8b5
 800b794:	0800b907 	.word	0x0800b907
 800b798:	0800b929 	.word	0x0800b929
 800b79c:	0800b965 	.word	0x0800b965
 800b7a0:	0800b98b 	.word	0x0800b98b
 800b7a4:	0800b9c9 	.word	0x0800b9c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f103 0110 	add.w	r1, r3, #16
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	795b      	ldrb	r3, [r3, #5]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f943 	bl	800ba40 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	761a      	strb	r2, [r3, #24]
      break;
 800b7c0:	e139      	b.n	800ba36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	795b      	ldrb	r3, [r3, #5]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fd21 	bl	800c210 <USBH_LL_GetURBState>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d11e      	bne.n	800b816 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	7c1b      	ldrb	r3, [r3, #16]
 800b7dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	8adb      	ldrh	r3, [r3, #22]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00a      	beq.n	800b800 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b7ea:	7b7b      	ldrb	r3, [r7, #13]
 800b7ec:	2b80      	cmp	r3, #128	; 0x80
 800b7ee:	d103      	bne.n	800b7f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2203      	movs	r2, #3
 800b7f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b7f6:	e115      	b.n	800ba24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2205      	movs	r2, #5
 800b7fc:	761a      	strb	r2, [r3, #24]
      break;
 800b7fe:	e111      	b.n	800ba24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b800:	7b7b      	ldrb	r3, [r7, #13]
 800b802:	2b80      	cmp	r3, #128	; 0x80
 800b804:	d103      	bne.n	800b80e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2209      	movs	r2, #9
 800b80a:	761a      	strb	r2, [r3, #24]
      break;
 800b80c:	e10a      	b.n	800ba24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2207      	movs	r2, #7
 800b812:	761a      	strb	r2, [r3, #24]
      break;
 800b814:	e106      	b.n	800ba24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b04      	cmp	r3, #4
 800b81a:	d003      	beq.n	800b824 <USBH_HandleControl+0xcc>
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	f040 8100 	bne.w	800ba24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	220b      	movs	r2, #11
 800b828:	761a      	strb	r2, [r3, #24]
      break;
 800b82a:	e0fb      	b.n	800ba24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b832:	b29a      	uxth	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6899      	ldr	r1, [r3, #8]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	899a      	ldrh	r2, [r3, #12]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	791b      	ldrb	r3, [r3, #4]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f93a 	bl	800babe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2204      	movs	r2, #4
 800b84e:	761a      	strb	r2, [r3, #24]
      break;
 800b850:	e0f1      	b.n	800ba36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	791b      	ldrb	r3, [r3, #4]
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fcd9 	bl	800c210 <USBH_LL_GetURBState>
 800b85e:	4603      	mov	r3, r0
 800b860:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b862:	7bbb      	ldrb	r3, [r7, #14]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d102      	bne.n	800b86e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2209      	movs	r2, #9
 800b86c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	2b05      	cmp	r3, #5
 800b872:	d102      	bne.n	800b87a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b874:	2303      	movs	r3, #3
 800b876:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b878:	e0d6      	b.n	800ba28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b87a:	7bbb      	ldrb	r3, [r7, #14]
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	f040 80d3 	bne.w	800ba28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	220b      	movs	r2, #11
 800b886:	761a      	strb	r2, [r3, #24]
      break;
 800b888:	e0ce      	b.n	800ba28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6899      	ldr	r1, [r3, #8]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	899a      	ldrh	r2, [r3, #12]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	795b      	ldrb	r3, [r3, #5]
 800b896:	2001      	movs	r0, #1
 800b898:	9000      	str	r0, [sp, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f8ea 	bl	800ba74 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2206      	movs	r2, #6
 800b8b0:	761a      	strb	r2, [r3, #24]
      break;
 800b8b2:	e0c0      	b.n	800ba36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	795b      	ldrb	r3, [r3, #5]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 fca8 	bl	800c210 <USBH_LL_GetURBState>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d103      	bne.n	800b8d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2207      	movs	r2, #7
 800b8ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8d0:	e0ac      	b.n	800ba2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	2b05      	cmp	r3, #5
 800b8d6:	d105      	bne.n	800b8e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	220c      	movs	r2, #12
 800b8dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e2:	e0a3      	b.n	800ba2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d103      	bne.n	800b8f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2205      	movs	r2, #5
 800b8ee:	761a      	strb	r2, [r3, #24]
      break;
 800b8f0:	e09c      	b.n	800ba2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b8f2:	7bbb      	ldrb	r3, [r7, #14]
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	f040 8099 	bne.w	800ba2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	220b      	movs	r2, #11
 800b8fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b900:	2302      	movs	r3, #2
 800b902:	73fb      	strb	r3, [r7, #15]
      break;
 800b904:	e092      	b.n	800ba2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	791b      	ldrb	r3, [r3, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	2100      	movs	r1, #0
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f8d5 	bl	800babe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2208      	movs	r2, #8
 800b924:	761a      	strb	r2, [r3, #24]

      break;
 800b926:	e086      	b.n	800ba36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	791b      	ldrb	r3, [r3, #4]
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fc6e 	bl	800c210 <USBH_LL_GetURBState>
 800b934:	4603      	mov	r3, r0
 800b936:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d105      	bne.n	800b94a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	220d      	movs	r2, #13
 800b942:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b948:	e072      	b.n	800ba30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b94a:	7bbb      	ldrb	r3, [r7, #14]
 800b94c:	2b04      	cmp	r3, #4
 800b94e:	d103      	bne.n	800b958 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	220b      	movs	r2, #11
 800b954:	761a      	strb	r2, [r3, #24]
      break;
 800b956:	e06b      	b.n	800ba30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b958:	7bbb      	ldrb	r3, [r7, #14]
 800b95a:	2b05      	cmp	r3, #5
 800b95c:	d168      	bne.n	800ba30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b95e:	2303      	movs	r3, #3
 800b960:	73fb      	strb	r3, [r7, #15]
      break;
 800b962:	e065      	b.n	800ba30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	795b      	ldrb	r3, [r3, #5]
 800b968:	2201      	movs	r2, #1
 800b96a:	9200      	str	r2, [sp, #0]
 800b96c:	2200      	movs	r2, #0
 800b96e:	2100      	movs	r1, #0
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f87f 	bl	800ba74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	220a      	movs	r2, #10
 800b986:	761a      	strb	r2, [r3, #24]
      break;
 800b988:	e055      	b.n	800ba36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	795b      	ldrb	r3, [r3, #5]
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fc3d 	bl	800c210 <USBH_LL_GetURBState>
 800b996:	4603      	mov	r3, r0
 800b998:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b99a:	7bbb      	ldrb	r3, [r7, #14]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d105      	bne.n	800b9ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	220d      	movs	r2, #13
 800b9a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9aa:	e043      	b.n	800ba34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d103      	bne.n	800b9ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2209      	movs	r2, #9
 800b9b6:	761a      	strb	r2, [r3, #24]
      break;
 800b9b8:	e03c      	b.n	800ba34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	2b04      	cmp	r3, #4
 800b9be:	d139      	bne.n	800ba34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	220b      	movs	r2, #11
 800b9c4:	761a      	strb	r2, [r3, #24]
      break;
 800b9c6:	e035      	b.n	800ba34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	7e5b      	ldrb	r3, [r3, #25]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	765a      	strb	r2, [r3, #25]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	7e5b      	ldrb	r3, [r3, #25]
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d806      	bhi.n	800b9ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b9e8:	e025      	b.n	800ba36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9f0:	2106      	movs	r1, #6
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	795b      	ldrb	r3, [r3, #5]
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f90c 	bl	800bc20 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	791b      	ldrb	r3, [r3, #4]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f906 	bl	800bc20 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba1e:	e00a      	b.n	800ba36 <USBH_HandleControl+0x2de>

    default:
      break;
 800ba20:	bf00      	nop
 800ba22:	e008      	b.n	800ba36 <USBH_HandleControl+0x2de>
      break;
 800ba24:	bf00      	nop
 800ba26:	e006      	b.n	800ba36 <USBH_HandleControl+0x2de>
      break;
 800ba28:	bf00      	nop
 800ba2a:	e004      	b.n	800ba36 <USBH_HandleControl+0x2de>
      break;
 800ba2c:	bf00      	nop
 800ba2e:	e002      	b.n	800ba36 <USBH_HandleControl+0x2de>
      break;
 800ba30:	bf00      	nop
 800ba32:	e000      	b.n	800ba36 <USBH_HandleControl+0x2de>
      break;
 800ba34:	bf00      	nop
  }

  return status;
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af04      	add	r7, sp, #16
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba4e:	79f9      	ldrb	r1, [r7, #7]
 800ba50:	2300      	movs	r3, #0
 800ba52:	9303      	str	r3, [sp, #12]
 800ba54:	2308      	movs	r3, #8
 800ba56:	9302      	str	r3, [sp, #8]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	9301      	str	r3, [sp, #4]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	2300      	movs	r3, #0
 800ba62:	2200      	movs	r2, #0
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 fba2 	bl	800c1ae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b088      	sub	sp, #32
 800ba78:	af04      	add	r7, sp, #16
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	4611      	mov	r1, r2
 800ba80:	461a      	mov	r2, r3
 800ba82:	460b      	mov	r3, r1
 800ba84:	80fb      	strh	r3, [r7, #6]
 800ba86:	4613      	mov	r3, r2
 800ba88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ba98:	7979      	ldrb	r1, [r7, #5]
 800ba9a:	7e3b      	ldrb	r3, [r7, #24]
 800ba9c:	9303      	str	r3, [sp, #12]
 800ba9e:	88fb      	ldrh	r3, [r7, #6]
 800baa0:	9302      	str	r3, [sp, #8]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	2301      	movs	r3, #1
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	2300      	movs	r3, #0
 800baac:	2200      	movs	r2, #0
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f000 fb7d 	bl	800c1ae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b088      	sub	sp, #32
 800bac2:	af04      	add	r7, sp, #16
 800bac4:	60f8      	str	r0, [r7, #12]
 800bac6:	60b9      	str	r1, [r7, #8]
 800bac8:	4611      	mov	r1, r2
 800baca:	461a      	mov	r2, r3
 800bacc:	460b      	mov	r3, r1
 800bace:	80fb      	strh	r3, [r7, #6]
 800bad0:	4613      	mov	r3, r2
 800bad2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bad4:	7979      	ldrb	r1, [r7, #5]
 800bad6:	2300      	movs	r3, #0
 800bad8:	9303      	str	r3, [sp, #12]
 800bada:	88fb      	ldrh	r3, [r7, #6]
 800badc:	9302      	str	r3, [sp, #8]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	9301      	str	r3, [sp, #4]
 800bae2:	2301      	movs	r3, #1
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	2300      	movs	r3, #0
 800bae8:	2201      	movs	r2, #1
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f000 fb5f 	bl	800c1ae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800baf0:	2300      	movs	r3, #0

}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b088      	sub	sp, #32
 800bafe:	af04      	add	r7, sp, #16
 800bb00:	60f8      	str	r0, [r7, #12]
 800bb02:	60b9      	str	r1, [r7, #8]
 800bb04:	4611      	mov	r1, r2
 800bb06:	461a      	mov	r2, r3
 800bb08:	460b      	mov	r3, r1
 800bb0a:	80fb      	strh	r3, [r7, #6]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb1e:	7979      	ldrb	r1, [r7, #5]
 800bb20:	7e3b      	ldrb	r3, [r7, #24]
 800bb22:	9303      	str	r3, [sp, #12]
 800bb24:	88fb      	ldrh	r3, [r7, #6]
 800bb26:	9302      	str	r3, [sp, #8]
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	2302      	movs	r3, #2
 800bb32:	2200      	movs	r2, #0
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 fb3a 	bl	800c1ae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b088      	sub	sp, #32
 800bb48:	af04      	add	r7, sp, #16
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	4611      	mov	r1, r2
 800bb50:	461a      	mov	r2, r3
 800bb52:	460b      	mov	r3, r1
 800bb54:	80fb      	strh	r3, [r7, #6]
 800bb56:	4613      	mov	r3, r2
 800bb58:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb5a:	7979      	ldrb	r1, [r7, #5]
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	9303      	str	r3, [sp, #12]
 800bb60:	88fb      	ldrh	r3, [r7, #6]
 800bb62:	9302      	str	r3, [sp, #8]
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	9301      	str	r3, [sp, #4]
 800bb68:	2301      	movs	r3, #1
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	2201      	movs	r2, #1
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f000 fb1c 	bl	800c1ae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af04      	add	r7, sp, #16
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	4608      	mov	r0, r1
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4603      	mov	r3, r0
 800bb90:	70fb      	strb	r3, [r7, #3]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70bb      	strb	r3, [r7, #2]
 800bb96:	4613      	mov	r3, r2
 800bb98:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bb9a:	7878      	ldrb	r0, [r7, #1]
 800bb9c:	78ba      	ldrb	r2, [r7, #2]
 800bb9e:	78f9      	ldrb	r1, [r7, #3]
 800bba0:	8b3b      	ldrh	r3, [r7, #24]
 800bba2:	9302      	str	r3, [sp, #8]
 800bba4:	7d3b      	ldrb	r3, [r7, #20]
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	7c3b      	ldrb	r3, [r7, #16]
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	4603      	mov	r3, r0
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 faaf 	bl	800c112 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bbca:	78fb      	ldrb	r3, [r7, #3]
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 face 	bl	800c170 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f836 	bl	800bc5c <USBH_GetFreePipe>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bbf4:	89fb      	ldrh	r3, [r7, #14]
 800bbf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d00a      	beq.n	800bc14 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bbfe:	78fa      	ldrb	r2, [r7, #3]
 800bc00:	89fb      	ldrh	r3, [r7, #14]
 800bc02:	f003 030f 	and.w	r3, r3, #15
 800bc06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	33e0      	adds	r3, #224	; 0xe0
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	440b      	add	r3, r1
 800bc12:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bc14:	89fb      	ldrh	r3, [r7, #14]
 800bc16:	b2db      	uxtb	r3, r3
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bc2c:	78fb      	ldrb	r3, [r7, #3]
 800bc2e:	2b0a      	cmp	r3, #10
 800bc30:	d80d      	bhi.n	800bc4e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	33e0      	adds	r3, #224	; 0xe0
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4413      	add	r3, r2
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	78fb      	ldrb	r3, [r7, #3]
 800bc40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bc44:	6879      	ldr	r1, [r7, #4]
 800bc46:	33e0      	adds	r3, #224	; 0xe0
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	440b      	add	r3, r1
 800bc4c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	73fb      	strb	r3, [r7, #15]
 800bc6c:	e00f      	b.n	800bc8e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	33e0      	adds	r3, #224	; 0xe0
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d102      	bne.n	800bc88 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	e007      	b.n	800bc98 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	73fb      	strb	r3, [r7, #15]
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	2b0a      	cmp	r3, #10
 800bc92:	d9ec      	bls.n	800bc6e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bc94:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bcba:	4b1f      	ldr	r3, [pc, #124]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bcbc:	7a5b      	ldrb	r3, [r3, #9]
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d131      	bne.n	800bd28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bcc4:	4b1c      	ldr	r3, [pc, #112]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bcc6:	7a5b      	ldrb	r3, [r3, #9]
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	461a      	mov	r2, r3
 800bccc:	4b1a      	ldr	r3, [pc, #104]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bcce:	2100      	movs	r1, #0
 800bcd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bcd2:	4b19      	ldr	r3, [pc, #100]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bcd4:	7a5b      	ldrb	r3, [r3, #9]
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	4a17      	ldr	r2, [pc, #92]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bce2:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bce4:	7a5b      	ldrb	r3, [r3, #9]
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	4b13      	ldr	r3, [pc, #76]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bcec:	4413      	add	r3, r2
 800bcee:	79fa      	ldrb	r2, [r7, #7]
 800bcf0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bcf2:	4b11      	ldr	r3, [pc, #68]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bcf4:	7a5b      	ldrb	r3, [r3, #9]
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	b2d1      	uxtb	r1, r2
 800bcfc:	4a0e      	ldr	r2, [pc, #56]	; (800bd38 <FATFS_LinkDriverEx+0x94>)
 800bcfe:	7251      	strb	r1, [r2, #9]
 800bd00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bd02:	7dbb      	ldrb	r3, [r7, #22]
 800bd04:	3330      	adds	r3, #48	; 0x30
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	223a      	movs	r2, #58	; 0x3a
 800bd12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	3302      	adds	r3, #2
 800bd18:	222f      	movs	r2, #47	; 0x2f
 800bd1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	3303      	adds	r3, #3
 800bd20:	2200      	movs	r2, #0
 800bd22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	200003ac 	.word	0x200003ac

0800bd3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bd46:	2200      	movs	r2, #0
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff ffaa 	bl	800bca4 <FATFS_LinkDriverEx>
 800bd50:	4603      	mov	r3, r0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bd60:	2201      	movs	r2, #1
 800bd62:	490e      	ldr	r1, [pc, #56]	; (800bd9c <MX_USB_HOST_Init+0x40>)
 800bd64:	480e      	ldr	r0, [pc, #56]	; (800bda0 <MX_USB_HOST_Init+0x44>)
 800bd66:	f7fe fc45 	bl	800a5f4 <USBH_Init>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bd70:	f7f5 fb22 	bl	80013b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800bd74:	490b      	ldr	r1, [pc, #44]	; (800bda4 <MX_USB_HOST_Init+0x48>)
 800bd76:	480a      	ldr	r0, [pc, #40]	; (800bda0 <MX_USB_HOST_Init+0x44>)
 800bd78:	f7fe fcca 	bl	800a710 <USBH_RegisterClass>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bd82:	f7f5 fb19 	bl	80013b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bd86:	4806      	ldr	r0, [pc, #24]	; (800bda0 <MX_USB_HOST_Init+0x44>)
 800bd88:	f7fe fd4e 	bl	800a828 <USBH_Start>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bd92:	f7f5 fb11 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bd96:	bf00      	nop
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	0800bdbd 	.word	0x0800bdbd
 800bda0:	20004928 	.word	0x20004928
 800bda4:	200002b0 	.word	0x200002b0

0800bda8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bdac:	4802      	ldr	r0, [pc, #8]	; (800bdb8 <MX_USB_HOST_Process+0x10>)
 800bdae:	f7fe fd4b 	bl	800a848 <USBH_Process>
}
 800bdb2:	bf00      	nop
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20004928 	.word	0x20004928

0800bdbc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bdc8:	78fb      	ldrb	r3, [r7, #3]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	2b04      	cmp	r3, #4
 800bdce:	d819      	bhi.n	800be04 <USBH_UserProcess+0x48>
 800bdd0:	a201      	add	r2, pc, #4	; (adr r2, 800bdd8 <USBH_UserProcess+0x1c>)
 800bdd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd6:	bf00      	nop
 800bdd8:	0800be05 	.word	0x0800be05
 800bddc:	0800bdf5 	.word	0x0800bdf5
 800bde0:	0800be05 	.word	0x0800be05
 800bde4:	0800bdfd 	.word	0x0800bdfd
 800bde8:	0800bded 	.word	0x0800bded
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bdec:	4b09      	ldr	r3, [pc, #36]	; (800be14 <USBH_UserProcess+0x58>)
 800bdee:	2203      	movs	r2, #3
 800bdf0:	701a      	strb	r2, [r3, #0]
  break;
 800bdf2:	e008      	b.n	800be06 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bdf4:	4b07      	ldr	r3, [pc, #28]	; (800be14 <USBH_UserProcess+0x58>)
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	701a      	strb	r2, [r3, #0]
  break;
 800bdfa:	e004      	b.n	800be06 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bdfc:	4b05      	ldr	r3, [pc, #20]	; (800be14 <USBH_UserProcess+0x58>)
 800bdfe:	2201      	movs	r2, #1
 800be00:	701a      	strb	r2, [r3, #0]
  break;
 800be02:	e000      	b.n	800be06 <USBH_UserProcess+0x4a>

  default:
  break;
 800be04:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800be06:	bf00      	nop
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	200003b8 	.word	0x200003b8

0800be18 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08a      	sub	sp, #40	; 0x28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be20:	f107 0314 	add.w	r3, r7, #20
 800be24:	2200      	movs	r2, #0
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	605a      	str	r2, [r3, #4]
 800be2a:	609a      	str	r2, [r3, #8]
 800be2c:	60da      	str	r2, [r3, #12]
 800be2e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be38:	d147      	bne.n	800beca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be3a:	2300      	movs	r3, #0
 800be3c:	613b      	str	r3, [r7, #16]
 800be3e:	4b25      	ldr	r3, [pc, #148]	; (800bed4 <HAL_HCD_MspInit+0xbc>)
 800be40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be42:	4a24      	ldr	r2, [pc, #144]	; (800bed4 <HAL_HCD_MspInit+0xbc>)
 800be44:	f043 0301 	orr.w	r3, r3, #1
 800be48:	6313      	str	r3, [r2, #48]	; 0x30
 800be4a:	4b22      	ldr	r3, [pc, #136]	; (800bed4 <HAL_HCD_MspInit+0xbc>)
 800be4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	613b      	str	r3, [r7, #16]
 800be54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800be56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be5c:	2300      	movs	r3, #0
 800be5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be60:	2300      	movs	r3, #0
 800be62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be64:	f107 0314 	add.w	r3, r7, #20
 800be68:	4619      	mov	r1, r3
 800be6a:	481b      	ldr	r0, [pc, #108]	; (800bed8 <HAL_HCD_MspInit+0xc0>)
 800be6c:	f7f7 faa6 	bl	80033bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800be74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be76:	2302      	movs	r3, #2
 800be78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be7e:	2300      	movs	r3, #0
 800be80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800be82:	230a      	movs	r3, #10
 800be84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be86:	f107 0314 	add.w	r3, r7, #20
 800be8a:	4619      	mov	r1, r3
 800be8c:	4812      	ldr	r0, [pc, #72]	; (800bed8 <HAL_HCD_MspInit+0xc0>)
 800be8e:	f7f7 fa95 	bl	80033bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800be92:	4b10      	ldr	r3, [pc, #64]	; (800bed4 <HAL_HCD_MspInit+0xbc>)
 800be94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be96:	4a0f      	ldr	r2, [pc, #60]	; (800bed4 <HAL_HCD_MspInit+0xbc>)
 800be98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be9c:	6353      	str	r3, [r2, #52]	; 0x34
 800be9e:	2300      	movs	r3, #0
 800bea0:	60fb      	str	r3, [r7, #12]
 800bea2:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <HAL_HCD_MspInit+0xbc>)
 800bea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea6:	4a0b      	ldr	r2, [pc, #44]	; (800bed4 <HAL_HCD_MspInit+0xbc>)
 800bea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800beac:	6453      	str	r3, [r2, #68]	; 0x44
 800beae:	4b09      	ldr	r3, [pc, #36]	; (800bed4 <HAL_HCD_MspInit+0xbc>)
 800beb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800beb6:	60fb      	str	r3, [r7, #12]
 800beb8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800beba:	2200      	movs	r2, #0
 800bebc:	2100      	movs	r1, #0
 800bebe:	2043      	movs	r0, #67	; 0x43
 800bec0:	f7f6 fed5 	bl	8002c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bec4:	2043      	movs	r0, #67	; 0x43
 800bec6:	f7f6 feee 	bl	8002ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800beca:	bf00      	nop
 800becc:	3728      	adds	r7, #40	; 0x28
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	40023800 	.word	0x40023800
 800bed8:	40020000 	.word	0x40020000

0800bedc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff f87f 	bl	800afee <USBH_LL_IncTimer>
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7ff f8b7 	bl	800b07a <USBH_LL_Connect>
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff f8c0 	bl	800b0a8 <USBH_LL_Disconnect>
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff f871 	bl	800b042 <USBH_LL_PortEnabled>
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7ff f871 	bl	800b05e <USBH_LL_PortDisabled>
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d12a      	bne.n	800bfec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bf96:	4a18      	ldr	r2, [pc, #96]	; (800bff8 <USBH_LL_Init+0x74>)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a15      	ldr	r2, [pc, #84]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfa2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bfa6:	4b14      	ldr	r3, [pc, #80]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfa8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bfac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bfae:	4b12      	ldr	r3, [pc, #72]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfb0:	2208      	movs	r2, #8
 800bfb2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bfb4:	4b10      	ldr	r3, [pc, #64]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bfba:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bfc0:	4b0d      	ldr	r3, [pc, #52]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfc2:	2202      	movs	r2, #2
 800bfc4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bfc6:	4b0c      	ldr	r3, [pc, #48]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bfcc:	480a      	ldr	r0, [pc, #40]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfce:	f7f7 fbc2 	bl	8003756 <HAL_HCD_Init>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d001      	beq.n	800bfdc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bfd8:	f7f5 f9ee 	bl	80013b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bfdc:	4806      	ldr	r0, [pc, #24]	; (800bff8 <USBH_LL_Init+0x74>)
 800bfde:	f7f7 ffa6 	bl	8003f2e <HAL_HCD_GetCurrentFrame>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7fe fff2 	bl	800afd0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20004d00 	.word	0x20004d00

0800bffc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c012:	4618      	mov	r0, r3
 800c014:	f7f7 ff15 	bl	8003e42 <HAL_HCD_Start>
 800c018:	4603      	mov	r3, r0
 800c01a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 f98c 	bl	800c33c <USBH_Get_USB_Status>
 800c024:	4603      	mov	r3, r0
 800c026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c028:	7bbb      	ldrb	r3, [r7, #14]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c048:	4618      	mov	r0, r3
 800c04a:	f7f7 ff1d 	bl	8003e88 <HAL_HCD_Stop>
 800c04e:	4603      	mov	r3, r0
 800c050:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	4618      	mov	r0, r3
 800c056:	f000 f971 	bl	800c33c <USBH_Get_USB_Status>
 800c05a:	4603      	mov	r3, r0
 800c05c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c05e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c070:	2301      	movs	r3, #1
 800c072:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7f7 ff65 	bl	8003f4a <HAL_HCD_GetCurrentSpeed>
 800c080:	4603      	mov	r3, r0
 800c082:	2b02      	cmp	r3, #2
 800c084:	d00c      	beq.n	800c0a0 <USBH_LL_GetSpeed+0x38>
 800c086:	2b02      	cmp	r3, #2
 800c088:	d80d      	bhi.n	800c0a6 <USBH_LL_GetSpeed+0x3e>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d002      	beq.n	800c094 <USBH_LL_GetSpeed+0x2c>
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d003      	beq.n	800c09a <USBH_LL_GetSpeed+0x32>
 800c092:	e008      	b.n	800c0a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c094:	2300      	movs	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]
    break;
 800c098:	e008      	b.n	800c0ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c09a:	2301      	movs	r3, #1
 800c09c:	73fb      	strb	r3, [r7, #15]
    break;
 800c09e:	e005      	b.n	800c0ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a4:	e002      	b.n	800c0ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c0aa:	bf00      	nop
  }
  return  speed;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f7 fef8 	bl	8003ec2 <HAL_HCD_ResetPort>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 f92f 	bl	800c33c <USBH_Get_USB_Status>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0fe:	78fa      	ldrb	r2, [r7, #3]
 800c100:	4611      	mov	r1, r2
 800c102:	4618      	mov	r0, r3
 800c104:	f7f7 feff 	bl	8003f06 <HAL_HCD_HC_GetXferCount>
 800c108:	4603      	mov	r3, r0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c112:	b590      	push	{r4, r7, lr}
 800c114:	b089      	sub	sp, #36	; 0x24
 800c116:	af04      	add	r7, sp, #16
 800c118:	6078      	str	r0, [r7, #4]
 800c11a:	4608      	mov	r0, r1
 800c11c:	4611      	mov	r1, r2
 800c11e:	461a      	mov	r2, r3
 800c120:	4603      	mov	r3, r0
 800c122:	70fb      	strb	r3, [r7, #3]
 800c124:	460b      	mov	r3, r1
 800c126:	70bb      	strb	r3, [r7, #2]
 800c128:	4613      	mov	r3, r2
 800c12a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c13a:	787c      	ldrb	r4, [r7, #1]
 800c13c:	78ba      	ldrb	r2, [r7, #2]
 800c13e:	78f9      	ldrb	r1, [r7, #3]
 800c140:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c142:	9302      	str	r3, [sp, #8]
 800c144:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	4623      	mov	r3, r4
 800c152:	f7f7 fb62 	bl	800381a <HAL_HCD_HC_Init>
 800c156:	4603      	mov	r3, r0
 800c158:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 f8ed 	bl	800c33c <USBH_Get_USB_Status>
 800c162:	4603      	mov	r3, r0
 800c164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c166:	7bbb      	ldrb	r3, [r7, #14]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd90      	pop	{r4, r7, pc}

0800c170 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c18a:	78fa      	ldrb	r2, [r7, #3]
 800c18c:	4611      	mov	r1, r2
 800c18e:	4618      	mov	r0, r3
 800c190:	f7f7 fbd2 	bl	8003938 <HAL_HCD_HC_Halt>
 800c194:	4603      	mov	r3, r0
 800c196:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 f8ce 	bl	800c33c <USBH_Get_USB_Status>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c1ae:	b590      	push	{r4, r7, lr}
 800c1b0:	b089      	sub	sp, #36	; 0x24
 800c1b2:	af04      	add	r7, sp, #16
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	4608      	mov	r0, r1
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4603      	mov	r3, r0
 800c1be:	70fb      	strb	r3, [r7, #3]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70bb      	strb	r3, [r7, #2]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c1d6:	787c      	ldrb	r4, [r7, #1]
 800c1d8:	78ba      	ldrb	r2, [r7, #2]
 800c1da:	78f9      	ldrb	r1, [r7, #3]
 800c1dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1e0:	9303      	str	r3, [sp, #12]
 800c1e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c1e4:	9302      	str	r3, [sp, #8]
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4623      	mov	r3, r4
 800c1f2:	f7f7 fbc5 	bl	8003980 <HAL_HCD_HC_SubmitRequest>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 f89d 	bl	800c33c <USBH_Get_USB_Status>
 800c202:	4603      	mov	r3, r0
 800c204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c206:	7bbb      	ldrb	r3, [r7, #14]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd90      	pop	{r4, r7, pc}

0800c210 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c222:	78fa      	ldrb	r2, [r7, #3]
 800c224:	4611      	mov	r1, r2
 800c226:	4618      	mov	r0, r3
 800c228:	f7f7 fe59 	bl	8003ede <HAL_HCD_HC_GetURBState>
 800c22c:	4603      	mov	r3, r0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b082      	sub	sp, #8
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	460b      	mov	r3, r1
 800c240:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d103      	bne.n	800c254 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c24c:	78fb      	ldrb	r3, [r7, #3]
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 f8a0 	bl	800c394 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c254:	20c8      	movs	r0, #200	; 0xc8
 800c256:	f7f6 fc0b 	bl	8002a70 <HAL_Delay>
  return USBH_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
 800c270:	4613      	mov	r3, r2
 800c272:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c27a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c27c:	78fb      	ldrb	r3, [r7, #3]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	212c      	movs	r1, #44	; 0x2c
 800c282:	fb01 f303 	mul.w	r3, r1, r3
 800c286:	4413      	add	r3, r2
 800c288:	333b      	adds	r3, #59	; 0x3b
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c290:	78fb      	ldrb	r3, [r7, #3]
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	212c      	movs	r1, #44	; 0x2c
 800c296:	fb01 f303 	mul.w	r3, r1, r3
 800c29a:	4413      	add	r3, r2
 800c29c:	3354      	adds	r3, #84	; 0x54
 800c29e:	78ba      	ldrb	r2, [r7, #2]
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	e008      	b.n	800c2b6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c2a4:	78fb      	ldrb	r3, [r7, #3]
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	212c      	movs	r1, #44	; 0x2c
 800c2aa:	fb01 f303 	mul.w	r3, r1, r3
 800c2ae:	4413      	add	r3, r2
 800c2b0:	3355      	adds	r3, #85	; 0x55
 800c2b2:	78ba      	ldrb	r2, [r7, #2]
 800c2b4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2da:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c2dc:	78fb      	ldrb	r3, [r7, #3]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	212c      	movs	r1, #44	; 0x2c
 800c2e2:	fb01 f303 	mul.w	r3, r1, r3
 800c2e6:	4413      	add	r3, r2
 800c2e8:	333b      	adds	r3, #59	; 0x3b
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d009      	beq.n	800c304 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	212c      	movs	r1, #44	; 0x2c
 800c2f6:	fb01 f303 	mul.w	r3, r1, r3
 800c2fa:	4413      	add	r3, r2
 800c2fc:	3354      	adds	r3, #84	; 0x54
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	73fb      	strb	r3, [r7, #15]
 800c302:	e008      	b.n	800c316 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c304:	78fb      	ldrb	r3, [r7, #3]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	212c      	movs	r1, #44	; 0x2c
 800c30a:	fb01 f303 	mul.w	r3, r1, r3
 800c30e:	4413      	add	r3, r2
 800c310:	3355      	adds	r3, #85	; 0x55
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c316:	7bfb      	ldrb	r3, [r7, #15]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3714      	adds	r7, #20
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7f6 fb9f 	bl	8002a70 <HAL_Delay>
}
 800c332:	bf00      	nop
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
	...

0800c33c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	2b03      	cmp	r3, #3
 800c34e:	d817      	bhi.n	800c380 <USBH_Get_USB_Status+0x44>
 800c350:	a201      	add	r2, pc, #4	; (adr r2, 800c358 <USBH_Get_USB_Status+0x1c>)
 800c352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c356:	bf00      	nop
 800c358:	0800c369 	.word	0x0800c369
 800c35c:	0800c36f 	.word	0x0800c36f
 800c360:	0800c375 	.word	0x0800c375
 800c364:	0800c37b 	.word	0x0800c37b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]
    break;
 800c36c:	e00b      	b.n	800c386 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c36e:	2302      	movs	r3, #2
 800c370:	73fb      	strb	r3, [r7, #15]
    break;
 800c372:	e008      	b.n	800c386 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c374:	2301      	movs	r3, #1
 800c376:	73fb      	strb	r3, [r7, #15]
    break;
 800c378:	e005      	b.n	800c386 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c37a:	2302      	movs	r3, #2
 800c37c:	73fb      	strb	r3, [r7, #15]
    break;
 800c37e:	e002      	b.n	800c386 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c380:	2302      	movs	r3, #2
 800c382:	73fb      	strb	r3, [r7, #15]
    break;
 800c384:	bf00      	nop
  }
  return usb_status;
 800c386:	7bfb      	ldrb	r3, [r7, #15]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c3a2:	79fb      	ldrb	r3, [r7, #7]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d102      	bne.n	800c3ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	73fb      	strb	r3, [r7, #15]
 800c3ac:	e001      	b.n	800c3b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c3b2:	7bfb      	ldrb	r3, [r7, #15]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	4803      	ldr	r0, [pc, #12]	; (800c3c8 <MX_DriverVbusFS+0x34>)
 800c3ba:	f7f7 f9b3 	bl	8003724 <HAL_GPIO_WritePin>
}
 800c3be:	bf00      	nop
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	40020800 	.word	0x40020800

0800c3cc <__errno>:
 800c3cc:	4b01      	ldr	r3, [pc, #4]	; (800c3d4 <__errno+0x8>)
 800c3ce:	6818      	ldr	r0, [r3, #0]
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	200002d0 	.word	0x200002d0

0800c3d8 <__libc_init_array>:
 800c3d8:	b570      	push	{r4, r5, r6, lr}
 800c3da:	4d0d      	ldr	r5, [pc, #52]	; (800c410 <__libc_init_array+0x38>)
 800c3dc:	4c0d      	ldr	r4, [pc, #52]	; (800c414 <__libc_init_array+0x3c>)
 800c3de:	1b64      	subs	r4, r4, r5
 800c3e0:	10a4      	asrs	r4, r4, #2
 800c3e2:	2600      	movs	r6, #0
 800c3e4:	42a6      	cmp	r6, r4
 800c3e6:	d109      	bne.n	800c3fc <__libc_init_array+0x24>
 800c3e8:	4d0b      	ldr	r5, [pc, #44]	; (800c418 <__libc_init_array+0x40>)
 800c3ea:	4c0c      	ldr	r4, [pc, #48]	; (800c41c <__libc_init_array+0x44>)
 800c3ec:	f000 f906 	bl	800c5fc <_init>
 800c3f0:	1b64      	subs	r4, r4, r5
 800c3f2:	10a4      	asrs	r4, r4, #2
 800c3f4:	2600      	movs	r6, #0
 800c3f6:	42a6      	cmp	r6, r4
 800c3f8:	d105      	bne.n	800c406 <__libc_init_array+0x2e>
 800c3fa:	bd70      	pop	{r4, r5, r6, pc}
 800c3fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c400:	4798      	blx	r3
 800c402:	3601      	adds	r6, #1
 800c404:	e7ee      	b.n	800c3e4 <__libc_init_array+0xc>
 800c406:	f855 3b04 	ldr.w	r3, [r5], #4
 800c40a:	4798      	blx	r3
 800c40c:	3601      	adds	r6, #1
 800c40e:	e7f2      	b.n	800c3f6 <__libc_init_array+0x1e>
 800c410:	0800c9c8 	.word	0x0800c9c8
 800c414:	0800c9c8 	.word	0x0800c9c8
 800c418:	0800c9c8 	.word	0x0800c9c8
 800c41c:	0800c9cc 	.word	0x0800c9cc

0800c420 <malloc>:
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <malloc+0xc>)
 800c422:	4601      	mov	r1, r0
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	f000 b871 	b.w	800c50c <_malloc_r>
 800c42a:	bf00      	nop
 800c42c:	200002d0 	.word	0x200002d0

0800c430 <free>:
 800c430:	4b02      	ldr	r3, [pc, #8]	; (800c43c <free+0xc>)
 800c432:	4601      	mov	r1, r0
 800c434:	6818      	ldr	r0, [r3, #0]
 800c436:	f000 b819 	b.w	800c46c <_free_r>
 800c43a:	bf00      	nop
 800c43c:	200002d0 	.word	0x200002d0

0800c440 <memcpy>:
 800c440:	440a      	add	r2, r1
 800c442:	4291      	cmp	r1, r2
 800c444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c448:	d100      	bne.n	800c44c <memcpy+0xc>
 800c44a:	4770      	bx	lr
 800c44c:	b510      	push	{r4, lr}
 800c44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c456:	4291      	cmp	r1, r2
 800c458:	d1f9      	bne.n	800c44e <memcpy+0xe>
 800c45a:	bd10      	pop	{r4, pc}

0800c45c <memset>:
 800c45c:	4402      	add	r2, r0
 800c45e:	4603      	mov	r3, r0
 800c460:	4293      	cmp	r3, r2
 800c462:	d100      	bne.n	800c466 <memset+0xa>
 800c464:	4770      	bx	lr
 800c466:	f803 1b01 	strb.w	r1, [r3], #1
 800c46a:	e7f9      	b.n	800c460 <memset+0x4>

0800c46c <_free_r>:
 800c46c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c46e:	2900      	cmp	r1, #0
 800c470:	d048      	beq.n	800c504 <_free_r+0x98>
 800c472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c476:	9001      	str	r0, [sp, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f1a1 0404 	sub.w	r4, r1, #4
 800c47e:	bfb8      	it	lt
 800c480:	18e4      	addlt	r4, r4, r3
 800c482:	f000 f8ad 	bl	800c5e0 <__malloc_lock>
 800c486:	4a20      	ldr	r2, [pc, #128]	; (800c508 <_free_r+0x9c>)
 800c488:	9801      	ldr	r0, [sp, #4]
 800c48a:	6813      	ldr	r3, [r2, #0]
 800c48c:	4615      	mov	r5, r2
 800c48e:	b933      	cbnz	r3, 800c49e <_free_r+0x32>
 800c490:	6063      	str	r3, [r4, #4]
 800c492:	6014      	str	r4, [r2, #0]
 800c494:	b003      	add	sp, #12
 800c496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c49a:	f000 b8a7 	b.w	800c5ec <__malloc_unlock>
 800c49e:	42a3      	cmp	r3, r4
 800c4a0:	d90b      	bls.n	800c4ba <_free_r+0x4e>
 800c4a2:	6821      	ldr	r1, [r4, #0]
 800c4a4:	1862      	adds	r2, r4, r1
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	bf04      	itt	eq
 800c4aa:	681a      	ldreq	r2, [r3, #0]
 800c4ac:	685b      	ldreq	r3, [r3, #4]
 800c4ae:	6063      	str	r3, [r4, #4]
 800c4b0:	bf04      	itt	eq
 800c4b2:	1852      	addeq	r2, r2, r1
 800c4b4:	6022      	streq	r2, [r4, #0]
 800c4b6:	602c      	str	r4, [r5, #0]
 800c4b8:	e7ec      	b.n	800c494 <_free_r+0x28>
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	b10b      	cbz	r3, 800c4c4 <_free_r+0x58>
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	d9fa      	bls.n	800c4ba <_free_r+0x4e>
 800c4c4:	6811      	ldr	r1, [r2, #0]
 800c4c6:	1855      	adds	r5, r2, r1
 800c4c8:	42a5      	cmp	r5, r4
 800c4ca:	d10b      	bne.n	800c4e4 <_free_r+0x78>
 800c4cc:	6824      	ldr	r4, [r4, #0]
 800c4ce:	4421      	add	r1, r4
 800c4d0:	1854      	adds	r4, r2, r1
 800c4d2:	42a3      	cmp	r3, r4
 800c4d4:	6011      	str	r1, [r2, #0]
 800c4d6:	d1dd      	bne.n	800c494 <_free_r+0x28>
 800c4d8:	681c      	ldr	r4, [r3, #0]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	6053      	str	r3, [r2, #4]
 800c4de:	4421      	add	r1, r4
 800c4e0:	6011      	str	r1, [r2, #0]
 800c4e2:	e7d7      	b.n	800c494 <_free_r+0x28>
 800c4e4:	d902      	bls.n	800c4ec <_free_r+0x80>
 800c4e6:	230c      	movs	r3, #12
 800c4e8:	6003      	str	r3, [r0, #0]
 800c4ea:	e7d3      	b.n	800c494 <_free_r+0x28>
 800c4ec:	6825      	ldr	r5, [r4, #0]
 800c4ee:	1961      	adds	r1, r4, r5
 800c4f0:	428b      	cmp	r3, r1
 800c4f2:	bf04      	itt	eq
 800c4f4:	6819      	ldreq	r1, [r3, #0]
 800c4f6:	685b      	ldreq	r3, [r3, #4]
 800c4f8:	6063      	str	r3, [r4, #4]
 800c4fa:	bf04      	itt	eq
 800c4fc:	1949      	addeq	r1, r1, r5
 800c4fe:	6021      	streq	r1, [r4, #0]
 800c500:	6054      	str	r4, [r2, #4]
 800c502:	e7c7      	b.n	800c494 <_free_r+0x28>
 800c504:	b003      	add	sp, #12
 800c506:	bd30      	pop	{r4, r5, pc}
 800c508:	200003bc 	.word	0x200003bc

0800c50c <_malloc_r>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	1ccd      	adds	r5, r1, #3
 800c510:	f025 0503 	bic.w	r5, r5, #3
 800c514:	3508      	adds	r5, #8
 800c516:	2d0c      	cmp	r5, #12
 800c518:	bf38      	it	cc
 800c51a:	250c      	movcc	r5, #12
 800c51c:	2d00      	cmp	r5, #0
 800c51e:	4606      	mov	r6, r0
 800c520:	db01      	blt.n	800c526 <_malloc_r+0x1a>
 800c522:	42a9      	cmp	r1, r5
 800c524:	d903      	bls.n	800c52e <_malloc_r+0x22>
 800c526:	230c      	movs	r3, #12
 800c528:	6033      	str	r3, [r6, #0]
 800c52a:	2000      	movs	r0, #0
 800c52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c52e:	f000 f857 	bl	800c5e0 <__malloc_lock>
 800c532:	4921      	ldr	r1, [pc, #132]	; (800c5b8 <_malloc_r+0xac>)
 800c534:	680a      	ldr	r2, [r1, #0]
 800c536:	4614      	mov	r4, r2
 800c538:	b99c      	cbnz	r4, 800c562 <_malloc_r+0x56>
 800c53a:	4f20      	ldr	r7, [pc, #128]	; (800c5bc <_malloc_r+0xb0>)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	b923      	cbnz	r3, 800c54a <_malloc_r+0x3e>
 800c540:	4621      	mov	r1, r4
 800c542:	4630      	mov	r0, r6
 800c544:	f000 f83c 	bl	800c5c0 <_sbrk_r>
 800c548:	6038      	str	r0, [r7, #0]
 800c54a:	4629      	mov	r1, r5
 800c54c:	4630      	mov	r0, r6
 800c54e:	f000 f837 	bl	800c5c0 <_sbrk_r>
 800c552:	1c43      	adds	r3, r0, #1
 800c554:	d123      	bne.n	800c59e <_malloc_r+0x92>
 800c556:	230c      	movs	r3, #12
 800c558:	6033      	str	r3, [r6, #0]
 800c55a:	4630      	mov	r0, r6
 800c55c:	f000 f846 	bl	800c5ec <__malloc_unlock>
 800c560:	e7e3      	b.n	800c52a <_malloc_r+0x1e>
 800c562:	6823      	ldr	r3, [r4, #0]
 800c564:	1b5b      	subs	r3, r3, r5
 800c566:	d417      	bmi.n	800c598 <_malloc_r+0x8c>
 800c568:	2b0b      	cmp	r3, #11
 800c56a:	d903      	bls.n	800c574 <_malloc_r+0x68>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	441c      	add	r4, r3
 800c570:	6025      	str	r5, [r4, #0]
 800c572:	e004      	b.n	800c57e <_malloc_r+0x72>
 800c574:	6863      	ldr	r3, [r4, #4]
 800c576:	42a2      	cmp	r2, r4
 800c578:	bf0c      	ite	eq
 800c57a:	600b      	streq	r3, [r1, #0]
 800c57c:	6053      	strne	r3, [r2, #4]
 800c57e:	4630      	mov	r0, r6
 800c580:	f000 f834 	bl	800c5ec <__malloc_unlock>
 800c584:	f104 000b 	add.w	r0, r4, #11
 800c588:	1d23      	adds	r3, r4, #4
 800c58a:	f020 0007 	bic.w	r0, r0, #7
 800c58e:	1ac2      	subs	r2, r0, r3
 800c590:	d0cc      	beq.n	800c52c <_malloc_r+0x20>
 800c592:	1a1b      	subs	r3, r3, r0
 800c594:	50a3      	str	r3, [r4, r2]
 800c596:	e7c9      	b.n	800c52c <_malloc_r+0x20>
 800c598:	4622      	mov	r2, r4
 800c59a:	6864      	ldr	r4, [r4, #4]
 800c59c:	e7cc      	b.n	800c538 <_malloc_r+0x2c>
 800c59e:	1cc4      	adds	r4, r0, #3
 800c5a0:	f024 0403 	bic.w	r4, r4, #3
 800c5a4:	42a0      	cmp	r0, r4
 800c5a6:	d0e3      	beq.n	800c570 <_malloc_r+0x64>
 800c5a8:	1a21      	subs	r1, r4, r0
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f000 f808 	bl	800c5c0 <_sbrk_r>
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d1dd      	bne.n	800c570 <_malloc_r+0x64>
 800c5b4:	e7cf      	b.n	800c556 <_malloc_r+0x4a>
 800c5b6:	bf00      	nop
 800c5b8:	200003bc 	.word	0x200003bc
 800c5bc:	200003c0 	.word	0x200003c0

0800c5c0 <_sbrk_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4d06      	ldr	r5, [pc, #24]	; (800c5dc <_sbrk_r+0x1c>)
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	4608      	mov	r0, r1
 800c5ca:	602b      	str	r3, [r5, #0]
 800c5cc:	f7f6 f96c 	bl	80028a8 <_sbrk>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_sbrk_r+0x1a>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_sbrk_r+0x1a>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	20005004 	.word	0x20005004

0800c5e0 <__malloc_lock>:
 800c5e0:	4801      	ldr	r0, [pc, #4]	; (800c5e8 <__malloc_lock+0x8>)
 800c5e2:	f000 b809 	b.w	800c5f8 <__retarget_lock_acquire_recursive>
 800c5e6:	bf00      	nop
 800c5e8:	2000500c 	.word	0x2000500c

0800c5ec <__malloc_unlock>:
 800c5ec:	4801      	ldr	r0, [pc, #4]	; (800c5f4 <__malloc_unlock+0x8>)
 800c5ee:	f000 b804 	b.w	800c5fa <__retarget_lock_release_recursive>
 800c5f2:	bf00      	nop
 800c5f4:	2000500c 	.word	0x2000500c

0800c5f8 <__retarget_lock_acquire_recursive>:
 800c5f8:	4770      	bx	lr

0800c5fa <__retarget_lock_release_recursive>:
 800c5fa:	4770      	bx	lr

0800c5fc <_init>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	bf00      	nop
 800c600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c602:	bc08      	pop	{r3}
 800c604:	469e      	mov	lr, r3
 800c606:	4770      	bx	lr

0800c608 <_fini>:
 800c608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60a:	bf00      	nop
 800c60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c60e:	bc08      	pop	{r3}
 800c610:	469e      	mov	lr, r3
 800c612:	4770      	bx	lr
