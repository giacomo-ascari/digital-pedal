
mcu-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c410  0800c410  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  0800c410  0800c410  0001c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c418  0800c418  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c418  0800c418  0001c418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c41c  0800c41c  0001c41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  0800c420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020334  2**0
                  CONTENTS
 10 .bss          00002714  20000334  20000334  00020334  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002a48  20002a48  00020334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e947  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050f3  00000000  00000000  0003ecab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  00043da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f0  00000000  00000000  00045320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277f5  00000000  00000000  00046810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4a9  00000000  00000000  0006e005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdfbf  00000000  00000000  0008d4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b46d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b00  00000000  00000000  0015b4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000109  00000000  00000000  00160fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000334 	.word	0x20000334
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c028 	.word	0x0800c028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000338 	.word	0x20000338
 80001cc:	0800c028 	.word	0x0800c028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_I2S_TxCpltCallback+0x20>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d101      	bne.n	800058a <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 8000586:	f000 f819 	bl	80005bc <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40003c00 	.word	0x40003c00

08000598 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80005aa:	f000 f80e 	bl	80005ca <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40003c00 	.word	0x40003c00

080005bc <AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void AUDIO_OUT_TransferComplete_CallBack(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <AUDIO_OUT_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void AUDIO_OUT_HalfTransfer_CallBack(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_I2S_ErrorCallback+0x20>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d101      	bne.n	80005fe <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80005fa:	f7ff ffed 	bl	80005d8 <AUDIO_OUT_Error_CallBack>
  }
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40003c00 	.word	0x40003c00

0800060c <_EPD_Reset>:

uint8_t WS_20_30[159] = { 0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x80,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x10,0x66,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x0,0x0,0x0,0x1,0xA,0xA,0x0,0xA,0xA,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14,0x8,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x44,0x44,0x44,0x44,0x0,0x0,0x0,0x22,0x17,0x41,0x0,0x32,0x36 };

extern SPI_HandleTypeDef hspi1;

static void _EPD_Reset(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2102      	movs	r1, #2
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <_EPD_Reset+0x38>)
 8000616:	f002 ff6d 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800061a:	2064      	movs	r0, #100	; 0x64
 800061c:	f002 f910 	bl	8002840 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2102      	movs	r1, #2
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <_EPD_Reset+0x38>)
 8000626:	f002 ff65 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800062a:	2002      	movs	r0, #2
 800062c:	f002 f908 	bl	8002840 <HAL_Delay>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2102      	movs	r1, #2
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <_EPD_Reset+0x38>)
 8000636:	f002 ff5d 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f002 f900 	bl	8002840 <HAL_Delay>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020000 	.word	0x40020000

08000648 <_EPD_SendCommand>:

static void _EPD_SendCommand(uint8_t reg) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2104      	movs	r1, #4
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <_EPD_SendCommand+0x40>)
 8000658:	f002 ff4c 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2140      	movs	r1, #64	; 0x40
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <_EPD_SendCommand+0x40>)
 8000662:	f002 ff47 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000666:	1df9      	adds	r1, r7, #7
 8000668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066c:	2201      	movs	r2, #1
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <_EPD_SendCommand+0x44>)
 8000670:	f006 fad1 	bl	8006c16 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <_EPD_SendCommand+0x40>)
 800067a:	f002 ff3b 	bl	80034f4 <HAL_GPIO_WritePin>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40020000 	.word	0x40020000
 800068c:	20001c90 	.word	0x20001c90

08000690 <_EPD_SendData>:

static void _EPD_SendData(uint8_t data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2104      	movs	r1, #4
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <_EPD_SendData+0x40>)
 80006a0:	f002 ff28 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <_EPD_SendData+0x40>)
 80006aa:	f002 ff23 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80006ae:	1df9      	adds	r1, r7, #7
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	2201      	movs	r2, #1
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <_EPD_SendData+0x44>)
 80006b8:	f006 faad 	bl	8006c16 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2140      	movs	r1, #64	; 0x40
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <_EPD_SendData+0x40>)
 80006c2:	f002 ff17 	bl	80034f4 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020000 	.word	0x40020000
 80006d4:	20001c90 	.word	0x20001c90

080006d8 <_EPD_ReadBusy>:
	for(uint8_t i = 0; i < count; i++) {
		_EPD_SendData(array[i]);
	}
}

void _EPD_ReadBusy(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	while(1) {
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 80006dc:	2108      	movs	r1, #8
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <_EPD_ReadBusy+0x20>)
 80006e0:	f002 fef0 	bl	80034c4 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d003      	beq.n	80006f2 <_EPD_ReadBusy+0x1a>
			break;
		HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f002 f8a8 	bl	8002840 <HAL_Delay>
		if(HAL_GPIO_ReadPin(EPD_BUSY_GPIO_Port, EPD_BUSY_Pin) == GPIO_PIN_RESET)
 80006f0:	e7f4      	b.n	80006dc <_EPD_ReadBusy+0x4>
			break;
 80006f2:	bf00      	nop
	}
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40020000 	.word	0x40020000

080006fc <_EPD_LUT>:

static void _EPD_LUT(uint8_t *lut) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	uint8_t count;
	_EPD_SendCommand(0x32);
 8000704:	2032      	movs	r0, #50	; 0x32
 8000706:	f7ff ff9f 	bl	8000648 <_EPD_SendCommand>
	for(count=0; count<153; count++)
 800070a:	2300      	movs	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	e009      	b.n	8000724 <_EPD_LUT+0x28>
		_EPD_SendData(lut[count]);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ffb9 	bl	8000690 <_EPD_SendData>
	for(count=0; count<153; count++)
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	3301      	adds	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2b98      	cmp	r3, #152	; 0x98
 8000728:	d9f2      	bls.n	8000710 <_EPD_LUT+0x14>
	_EPD_ReadBusy();
 800072a:	f7ff ffd5 	bl	80006d8 <_EPD_ReadBusy>
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <_EPD_LUT_by_host>:

static void _EPD_LUT_by_host(uint8_t *lut) {
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	_EPD_LUT((uint8_t *)lut);			//lut
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ffdc 	bl	80006fc <_EPD_LUT>
	_EPD_SendCommand(0x3f);
 8000744:	203f      	movs	r0, #63	; 0x3f
 8000746:	f7ff ff7f 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(*(lut+153));
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3399      	adds	r3, #153	; 0x99
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff9d 	bl	8000690 <_EPD_SendData>
	_EPD_SendCommand(0x03);	// gate voltage
 8000756:	2003      	movs	r0, #3
 8000758:	f7ff ff76 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(*(lut+154));
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	339a      	adds	r3, #154	; 0x9a
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff94 	bl	8000690 <_EPD_SendData>
	_EPD_SendCommand(0x04);	// source voltage
 8000768:	2004      	movs	r0, #4
 800076a:	f7ff ff6d 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(*(lut+155));	// VSH
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	339b      	adds	r3, #155	; 0x9b
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff8b 	bl	8000690 <_EPD_SendData>
	_EPD_SendData(*(lut+156));	// VSH2
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	339c      	adds	r3, #156	; 0x9c
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff85 	bl	8000690 <_EPD_SendData>
	_EPD_SendData(*(lut+157));	// VSL
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	339d      	adds	r3, #157	; 0x9d
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff7f 	bl	8000690 <_EPD_SendData>
	_EPD_SendCommand(0x2c);		// VCOM
 8000792:	202c      	movs	r0, #44	; 0x2c
 8000794:	f7ff ff58 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(*(lut+158));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	339e      	adds	r3, #158	; 0x9e
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff76 	bl	8000690 <_EPD_SendData>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_EPD_TurnOnDisplay>:

static void _EPD_TurnOnDisplay(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	_EPD_SendCommand(0x22); //Display Update Control
 80007b0:	2022      	movs	r0, #34	; 0x22
 80007b2:	f7ff ff49 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(0xc7);
 80007b6:	20c7      	movs	r0, #199	; 0xc7
 80007b8:	f7ff ff6a 	bl	8000690 <_EPD_SendData>
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
 80007bc:	2020      	movs	r0, #32
 80007be:	f7ff ff43 	bl	8000648 <_EPD_SendCommand>
	_EPD_ReadBusy();
 80007c2:	f7ff ff89 	bl	80006d8 <_EPD_ReadBusy>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_EPD_SetWindows>:
	_EPD_SendData(0x0F);
	_EPD_SendCommand(0x20); //Activate Display Update Sequence
	_EPD_ReadBusy();
}

static void _EPD_SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend) {
 80007ca:	b590      	push	{r4, r7, lr}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4604      	mov	r4, r0
 80007d2:	4608      	mov	r0, r1
 80007d4:	4611      	mov	r1, r2
 80007d6:	461a      	mov	r2, r3
 80007d8:	4623      	mov	r3, r4
 80007da:	80fb      	strh	r3, [r7, #6]
 80007dc:	4603      	mov	r3, r0
 80007de:	80bb      	strh	r3, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	807b      	strh	r3, [r7, #2]
 80007e4:	4613      	mov	r3, r2
 80007e6:	803b      	strh	r3, [r7, #0]
	_EPD_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 80007e8:	2044      	movs	r0, #68	; 0x44
 80007ea:	f7ff ff2d 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData((Xstart>>3) & 0xFF);
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff4a 	bl	8000690 <_EPD_SendData>
	_EPD_SendData((Xend>>3) & 0xFF);
 80007fc:	887b      	ldrh	r3, [r7, #2]
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff43 	bl	8000690 <_EPD_SendData>

	_EPD_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 800080a:	2045      	movs	r0, #69	; 0x45
 800080c:	f7ff ff1c 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff3b 	bl	8000690 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff34 	bl	8000690 <_EPD_SendData>
	_EPD_SendData(Yend & 0xFF);
 8000828:	883b      	ldrh	r3, [r7, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff2f 	bl	8000690 <_EPD_SendData>
	_EPD_SendData((Yend >> 8) & 0xFF);
 8000832:	883b      	ldrh	r3, [r7, #0]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	b29b      	uxth	r3, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff28 	bl	8000690 <_EPD_SendData>
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}

08000848 <_EPD_SetCursor>:

static void _EPD_SetCursor(uint16_t Xstart, uint16_t Ystart) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	460a      	mov	r2, r1
 8000852:	80fb      	strh	r3, [r7, #6]
 8000854:	4613      	mov	r3, r2
 8000856:	80bb      	strh	r3, [r7, #4]
	_EPD_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 8000858:	204e      	movs	r0, #78	; 0x4e
 800085a:	f7ff fef5 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(Xstart & 0xFF);
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff14 	bl	8000690 <_EPD_SendData>

	_EPD_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 8000868:	204f      	movs	r0, #79	; 0x4f
 800086a:	f7ff feed 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(Ystart & 0xFF);
 800086e:	88bb      	ldrh	r3, [r7, #4]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff0c 	bl	8000690 <_EPD_SendData>
	_EPD_SendData((Ystart >> 8) & 0xFF);
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b29b      	uxth	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff05 	bl	8000690 <_EPD_SendData>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <EPD_Init>:

void EPD_Init(EPD_HandleTypeDef *hepd) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

	// start phase 0
	//hepd->state = INIT_STATE;
	//hepd->phase = 0;
	HAL_GPIO_WritePin(EPD_DC_GPIO_Port, EPD_DC_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2104      	movs	r1, #4
 800089c:	4823      	ldr	r0, [pc, #140]	; (800092c <EPD_Init+0x9c>)
 800089e:	f002 fe29 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_CS_GPIO_Port, EPD_CS_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	4821      	ldr	r0, [pc, #132]	; (800092c <EPD_Init+0x9c>)
 80008a8:	f002 fe24 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2102      	movs	r1, #2
 80008b0:	481e      	ldr	r0, [pc, #120]	; (800092c <EPD_Init+0x9c>)
 80008b2:	f002 fe1f 	bl	80034f4 <HAL_GPIO_WritePin>
	_EPD_Reset();
 80008b6:	f7ff fea9 	bl	800060c <_EPD_Reset>
	HAL_Delay(100);
 80008ba:	2064      	movs	r0, #100	; 0x64
 80008bc:	f001 ffc0 	bl	8002840 <HAL_Delay>
	// end phase 0

	_EPD_ReadBusy();
 80008c0:	f7ff ff0a 	bl	80006d8 <_EPD_ReadBusy>

	// start phase 1
	_EPD_SendCommand(0x12);  //SWRESET
 80008c4:	2012      	movs	r0, #18
 80008c6:	f7ff febf 	bl	8000648 <_EPD_SendCommand>
	// end phase 1

	_EPD_ReadBusy();
 80008ca:	f7ff ff05 	bl	80006d8 <_EPD_ReadBusy>

	_EPD_SendCommand(0x01); //Driver output control
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff feba 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(0x27);
 80008d4:	2027      	movs	r0, #39	; 0x27
 80008d6:	f7ff fedb 	bl	8000690 <_EPD_SendData>
	_EPD_SendData(0x01);
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fed8 	bl	8000690 <_EPD_SendData>
	_EPD_SendData(0x00);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fed5 	bl	8000690 <_EPD_SendData>

	_EPD_SendCommand(0x11); //data entry mode
 80008e6:	2011      	movs	r0, #17
 80008e8:	f7ff feae 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(0x03);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f7ff fecf 	bl	8000690 <_EPD_SendData>

	_EPD_SetWindows(0, 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 80008f2:	f240 1327 	movw	r3, #295	; 0x127
 80008f6:	227f      	movs	r2, #127	; 0x7f
 80008f8:	2100      	movs	r1, #0
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff ff65 	bl	80007ca <_EPD_SetWindows>

	_EPD_SendCommand(0x21); //  Display update control
 8000900:	2021      	movs	r0, #33	; 0x21
 8000902:	f7ff fea1 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fec2 	bl	8000690 <_EPD_SendData>
	_EPD_SendData(0x80);
 800090c:	2080      	movs	r0, #128	; 0x80
 800090e:	f7ff febf 	bl	8000690 <_EPD_SendData>

	_EPD_SetCursor(0, 0);
 8000912:	2100      	movs	r1, #0
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff ff97 	bl	8000848 <_EPD_SetCursor>
	_EPD_ReadBusy();
 800091a:	f7ff fedd 	bl	80006d8 <_EPD_ReadBusy>

	_EPD_LUT_by_host(WS_20_30);
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <EPD_Init+0xa0>)
 8000920:	f7ff ff09 	bl	8000736 <_EPD_LUT_by_host>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40020000 	.word	0x40020000
 8000930:	20000000 	.word	0x20000000

08000934 <EPD_Clear>:

void EPD_Clear(EPD_HandleTypeDef *hepd) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 800093c:	2024      	movs	r0, #36	; 0x24
 800093e:	f7ff fe83 	bl	8000648 <_EPD_SendCommand>
	for(i = 0; i < EPD_BYTES; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	81fb      	strh	r3, [r7, #14]
 8000946:	e005      	b.n	8000954 <EPD_Clear+0x20>
		_EPD_SendData(0xff);
 8000948:	20ff      	movs	r0, #255	; 0xff
 800094a:	f7ff fea1 	bl	8000690 <_EPD_SendData>
	for(i = 0; i < EPD_BYTES; i++) {
 800094e:	89fb      	ldrh	r3, [r7, #14]
 8000950:	3301      	adds	r3, #1
 8000952:	81fb      	strh	r3, [r7, #14]
 8000954:	89fb      	ldrh	r3, [r7, #14]
 8000956:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800095a:	d3f5      	bcc.n	8000948 <EPD_Clear+0x14>
	}
	_EPD_TurnOnDisplay();
 800095c:	f7ff ff26 	bl	80007ac <_EPD_TurnOnDisplay>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <EPD_Display>:

void EPD_Display(EPD_HandleTypeDef *hepd) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	uint16_t i;
	_EPD_SendCommand(0x24);   //write RAM for black(0)/white (1)
 8000970:	2024      	movs	r0, #36	; 0x24
 8000972:	f7ff fe69 	bl	8000648 <_EPD_SendCommand>
	for(i=0; i<EPD_BYTES; i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	81fb      	strh	r3, [r7, #14]
 800097a:	e009      	b.n	8000990 <EPD_Display+0x28>
		_EPD_SendData(hepd->image[i]);
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	789b      	ldrb	r3, [r3, #2]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe83 	bl	8000690 <_EPD_SendData>
	for(i=0; i<EPD_BYTES; i++) {
 800098a:	89fb      	ldrh	r3, [r7, #14]
 800098c:	3301      	adds	r3, #1
 800098e:	81fb      	strh	r3, [r7, #14]
 8000990:	89fb      	ldrh	r3, [r7, #14]
 8000992:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000996:	d3f1      	bcc.n	800097c <EPD_Display+0x14>
	}
	_EPD_TurnOnDisplay();
 8000998:	f7ff ff08 	bl	80007ac <_EPD_TurnOnDisplay>
}
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <EPD_Sleep>:
		_EPD_SendData(hepd->image[i]);
	}
	_EPD_TurnOnDisplay_Partial();
}

void EPD_Sleep(EPD_HandleTypeDef *hepd) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	_EPD_SendCommand(0x10); //enter deep sleep
 80009ac:	2010      	movs	r0, #16
 80009ae:	f7ff fe4b 	bl	8000648 <_EPD_SendCommand>
	_EPD_SendData(0x01);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fe6c 	bl	8000690 <_EPD_SendData>
	HAL_Delay(100);
 80009b8:	2064      	movs	r0, #100	; 0x64
 80009ba:	f001 ff41 	bl	8002840 <HAL_Delay>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <Conv_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Conv_ADC(uint8_t *buf, int32_t *result) {
	*result = 0xFF000000 * ((buf[1] >> 7) & 1) + (buf[1] << 16) + (buf[0] << 8) + buf[3];
 80009c6:	7843      	ldrb	r3, [r0, #1]
 80009c8:	09da      	lsrs	r2, r3, #7
 80009ca:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80009ce:	041b      	lsls	r3, r3, #16
 80009d0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80009d4:	78c2      	ldrb	r2, [r0, #3]
 80009d6:	4413      	add	r3, r2
 80009d8:	7802      	ldrb	r2, [r0, #0]
 80009da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80009de:	600b      	str	r3, [r1, #0]
}
 80009e0:	4770      	bx	lr
	...

080009e4 <HAL_I2S_RxHalfCpltCallback>:

uint32_t rxHalfCpltCounter = 0;
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80009e4:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 80009e6:	6802      	ldr	r2, [r0, #0]
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_I2S_RxHalfCpltCallback+0x60>)
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d000      	beq.n	80009f0 <HAL_I2S_RxHalfCpltCallback+0xc>
		if (display_counter < 296) {
			display_array[display_counter] = BUFF_CONV[0];
			display_counter++;
		}
	}
}
 80009ee:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[0], &BUFF_CONV[0]); // LEFT
 80009f0:	4c15      	ldr	r4, [pc, #84]	; (8000a48 <HAL_I2S_RxHalfCpltCallback+0x64>)
 80009f2:	4d16      	ldr	r5, [pc, #88]	; (8000a4c <HAL_I2S_RxHalfCpltCallback+0x68>)
 80009f4:	4621      	mov	r1, r4
 80009f6:	4628      	mov	r0, r5
 80009f8:	f7ff ffe5 	bl	80009c6 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[4], &BUFF_CONV[1]); // RIGHT
 80009fc:	1d21      	adds	r1, r4, #4
 80009fe:	1d28      	adds	r0, r5, #4
 8000a00:	f7ff ffe1 	bl	80009c6 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[0];
 8000a04:	edd4 7a00 	vldr	s15, [r4]
 8000a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_I2S_RxHalfCpltCallback+0x6c>)
 8000a0e:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[1];
 8000a12:	ed94 7a01 	vldr	s14, [r4, #4]
 8000a16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a1a:	ed83 7a01 	vstr	s14, [r3, #4]
		rxHalfCpltCounter++;
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <HAL_I2S_RxHalfCpltCallback+0x70>)
 8000a20:	6813      	ldr	r3, [r2, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	6013      	str	r3, [r2, #0]
		if (display_counter < 296) {
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_I2S_RxHalfCpltCallback+0x74>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000a2e:	d2de      	bcs.n	80009ee <HAL_I2S_RxHalfCpltCallback+0xa>
			display_array[display_counter] = BUFF_CONV[0];
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_I2S_RxHalfCpltCallback+0x78>)
 8000a32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000a36:	edc2 7a00 	vstr	s15, [r2]
			display_counter++;
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_I2S_RxHalfCpltCallback+0x74>)
 8000a3e:	8013      	strh	r3, [r2, #0]
}
 8000a40:	e7d5      	b.n	80009ee <HAL_I2S_RxHalfCpltCallback+0xa>
 8000a42:	bf00      	nop
 8000a44:	40003800 	.word	0x40003800
 8000a48:	20000370 	.word	0x20000370
 8000a4c:	20000350 	.word	0x20000350
 8000a50:	200003a0 	.word	0x200003a0
 8000a54:	20002330 	.word	0x20002330
 8000a58:	20000848 	.word	0x20000848
 8000a5c:	200003a8 	.word	0x200003a8

08000a60 <HAL_I2S_RxCpltCallback>:

uint32_t rxCpltCounter = 0;
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000a60:	b538      	push	{r3, r4, r5, lr}
	if (hi2s->Instance == SPI2)
 8000a62:	6802      	ldr	r2, [r0, #0]
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_I2S_RxCpltCallback+0x68>)
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d000      	beq.n	8000a6c <HAL_I2S_RxCpltCallback+0xc>
		if (display_counter < 296) {
			display_array[display_counter] = BUFF_CONV[2];
			display_counter++;
		}
	}
}
 8000a6a:	bd38      	pop	{r3, r4, r5, pc}
		Conv_ADC(&ADC_BUFF.ADC8[8], &BUFF_CONV[2]); // LEFT
 8000a6c:	4c17      	ldr	r4, [pc, #92]	; (8000acc <HAL_I2S_RxCpltCallback+0x6c>)
 8000a6e:	4d18      	ldr	r5, [pc, #96]	; (8000ad0 <HAL_I2S_RxCpltCallback+0x70>)
 8000a70:	f104 0108 	add.w	r1, r4, #8
 8000a74:	f105 0008 	add.w	r0, r5, #8
 8000a78:	f7ff ffa5 	bl	80009c6 <Conv_ADC>
		Conv_ADC(&ADC_BUFF.ADC8[12], &BUFF_CONV[3]); // RIGHT
 8000a7c:	f104 010c 	add.w	r1, r4, #12
 8000a80:	f105 000c 	add.w	r0, r5, #12
 8000a84:	f7ff ff9f 	bl	80009c6 <Conv_ADC>
		RAW_SAMPLES[0] = (float)BUFF_CONV[2];
 8000a88:	edd4 7a02 	vldr	s15, [r4, #8]
 8000a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_I2S_RxCpltCallback+0x74>)
 8000a92:	edc3 7a00 	vstr	s15, [r3]
		RAW_SAMPLES[1] = (float)BUFF_CONV[3];
 8000a96:	ed94 7a03 	vldr	s14, [r4, #12]
 8000a9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a9e:	ed83 7a01 	vstr	s14, [r3, #4]
		rxCpltCounter++;
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_I2S_RxCpltCallback+0x78>)
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	6013      	str	r3, [r2, #0]
		if (display_counter < 296) {
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_I2S_RxCpltCallback+0x7c>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8000ab2:	d2da      	bcs.n	8000a6a <HAL_I2S_RxCpltCallback+0xa>
			display_array[display_counter] = BUFF_CONV[2];
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_I2S_RxCpltCallback+0x80>)
 8000ab6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000aba:	edc2 7a00 	vstr	s15, [r2]
			display_counter++;
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_I2S_RxCpltCallback+0x7c>)
 8000ac2:	8013      	strh	r3, [r2, #0]
}
 8000ac4:	e7d1      	b.n	8000a6a <HAL_I2S_RxCpltCallback+0xa>
 8000ac6:	bf00      	nop
 8000ac8:	40003800 	.word	0x40003800
 8000acc:	20000370 	.word	0x20000370
 8000ad0:	20000350 	.word	0x20000350
 8000ad4:	200003a0 	.word	0x200003a0
 8000ad8:	2000232c 	.word	0x2000232c
 8000adc:	20000848 	.word	0x20000848
 8000ae0:	200003a8 	.word	0x200003a8

08000ae4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ae4:	b500      	push	{lr}
 8000ae6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae8:	2230      	movs	r2, #48	; 0x30
 8000aea:	2100      	movs	r1, #0
 8000aec:	a808      	add	r0, sp, #32
 8000aee:	f00a fe33 	bl	800b758 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af2:	2300      	movs	r3, #0
 8000af4:	9303      	str	r3, [sp, #12]
 8000af6:	9304      	str	r3, [sp, #16]
 8000af8:	9305      	str	r3, [sp, #20]
 8000afa:	9306      	str	r3, [sp, #24]
 8000afc:	9307      	str	r3, [sp, #28]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemClock_Config+0xa4>)
 8000b02:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000b04:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000b08:	6411      	str	r1, [r2, #64]	; 0x40
 8000b0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b0c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000b10:	9201      	str	r2, [sp, #4]
 8000b12:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <SystemClock_Config+0xa8>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	9b02      	ldr	r3, [sp, #8]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b32:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b3c:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3e:	2208      	movs	r2, #8
 8000b40:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b42:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000b46:	9211      	str	r2, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b48:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	a808      	add	r0, sp, #32
 8000b50:	f005 fa14 	bl	8005f7c <HAL_RCC_OscConfig>
 8000b54:	b998      	cbnz	r0, 8000b7e <SystemClock_Config+0x9a>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	9303      	str	r3, [sp, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000b62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b66:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	9307      	str	r3, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b6e:	2105      	movs	r1, #5
 8000b70:	a803      	add	r0, sp, #12
 8000b72:	f005 fc7b 	bl	800646c <HAL_RCC_ClockConfig>
 8000b76:	b920      	cbnz	r0, 8000b82 <SystemClock_Config+0x9e>
	{
		Error_Handler();
	}
}
 8000b78:	b015      	add	sp, #84	; 0x54
 8000b7a:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7e:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b80:	e7fe      	b.n	8000b80 <SystemClock_Config+0x9c>
 8000b82:	b672      	cpsid	i
 8000b84:	e7fe      	b.n	8000b84 <SystemClock_Config+0xa0>
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <PeriphCommonClock_Config>:
{
 8000b90:	b500      	push	{lr}
 8000b92:	b085      	sub	sp, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	2300      	movs	r3, #0
 8000b96:	9303      	str	r3, [sp, #12]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	9300      	str	r3, [sp, #0]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 181;
 8000b9c:	23b5      	movs	r3, #181	; 0xb5
 8000b9e:	9301      	str	r3, [sp, #4]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	9302      	str	r3, [sp, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	4668      	mov	r0, sp
 8000ba6:	f005 fe6d 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	b910      	cbnz	r0, 8000bb2 <PeriphCommonClock_Config+0x22>
}
 8000bac:	b005      	add	sp, #20
 8000bae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bb2:	b672      	cpsid	i
	while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <PeriphCommonClock_Config+0x24>
	...

08000bb8 <main>:
{
 8000bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bbc:	ed2d 8b04 	vpush	{d8-d9}
 8000bc0:	b093      	sub	sp, #76	; 0x4c
	HAL_Init();
 8000bc2:	f001 fdcb 	bl	800275c <HAL_Init>
	SystemClock_Config();
 8000bc6:	f7ff ff8d 	bl	8000ae4 <SystemClock_Config>
	PeriphCommonClock_Config();
 8000bca:	f7ff ffe1 	bl	8000b90 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	2400      	movs	r4, #0
 8000bd0:	9408      	str	r4, [sp, #32]
 8000bd2:	9409      	str	r4, [sp, #36]	; 0x24
 8000bd4:	940a      	str	r4, [sp, #40]	; 0x28
 8000bd6:	940b      	str	r4, [sp, #44]	; 0x2c
 8000bd8:	940c      	str	r4, [sp, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bda:	9403      	str	r4, [sp, #12]
 8000bdc:	4db2      	ldr	r5, [pc, #712]	; (8000ea8 <main+0x2f0>)
 8000bde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	632b      	str	r3, [r5, #48]	; 0x30
 8000be6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bec:	9303      	str	r3, [sp, #12]
 8000bee:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	9404      	str	r4, [sp, #16]
 8000bf2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	632b      	str	r3, [r5, #48]	; 0x30
 8000bfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	9304      	str	r3, [sp, #16]
 8000c02:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	9405      	str	r4, [sp, #20]
 8000c06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	632b      	str	r3, [r5, #48]	; 0x30
 8000c0e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	9305      	str	r3, [sp, #20]
 8000c16:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	9406      	str	r4, [sp, #24]
 8000c1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	632b      	str	r3, [r5, #48]	; 0x30
 8000c22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	9306      	str	r3, [sp, #24]
 8000c2a:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	9407      	str	r4, [sp, #28]
 8000c2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	632b      	str	r3, [r5, #48]	; 0x30
 8000c36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	9307      	str	r3, [sp, #28]
 8000c3e:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000c40:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8000ef0 <main+0x338>
 8000c44:	4622      	mov	r2, r4
 8000c46:	2101      	movs	r1, #1
 8000c48:	4648      	mov	r0, r9
 8000c4a:	f002 fc53 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000c4e:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8000efc <main+0x344>
 8000c52:	4622      	mov	r2, r4
 8000c54:	2146      	movs	r1, #70	; 0x46
 8000c56:	4640      	mov	r0, r8
 8000c58:	f002 fc4c 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin, GPIO_PIN_RESET);
 8000c5c:	4f93      	ldr	r7, [pc, #588]	; (8000eac <main+0x2f4>)
 8000c5e:	4622      	mov	r2, r4
 8000c60:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c64:	4638      	mov	r0, r7
 8000c66:	f002 fc45 	bl	80034f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AudioPower_GPIO_Port, AudioPower_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	4638      	mov	r0, r7
 8000c70:	f002 fc40 	bl	80034f4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = OtgPower_Pin;
 8000c74:	2601      	movs	r6, #1
 8000c76:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(OtgPower_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	a908      	add	r1, sp, #32
 8000c80:	4648      	mov	r0, r9
 8000c82:	f002 fa83 	bl	800318c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EncB_Pin|EncA_Pin;
 8000c86:	230c      	movs	r3, #12
 8000c88:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8a:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	a908      	add	r1, sp, #32
 8000c90:	4648      	mov	r0, r9
 8000c92:	f002 fa7b 	bl	800318c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Btn0_Pin|EPD_BUSY_Pin;
 8000c96:	2309      	movs	r3, #9
 8000c98:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	a908      	add	r1, sp, #32
 8000ca0:	4640      	mov	r0, r8
 8000ca2:	f002 fa73 	bl	800318c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EPD_RST_Pin|EPD_DC_Pin|EPD_CS_Pin;
 8000ca6:	2346      	movs	r3, #70	; 0x46
 8000ca8:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	a908      	add	r1, sp, #32
 8000cb2:	4640      	mov	r0, r8
 8000cb4:	f002 fa6a 	bl	800318c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin;
 8000cb8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000cbc:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc0:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	a908      	add	r1, sp, #32
 8000cc4:	487a      	ldr	r0, [pc, #488]	; (8000eb0 <main+0x2f8>)
 8000cc6:	f002 fa61 	bl	800318c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Btn1_Pin;
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd2:	960a      	str	r6, [sp, #40]	; 0x28
	HAL_GPIO_Init(Btn1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	a908      	add	r1, sp, #32
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	f002 fa58 	bl	800318c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin|Led3_Pin|Led4_Pin
 8000cdc:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ce0:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce8:	a908      	add	r1, sp, #32
 8000cea:	4638      	mov	r0, r7
 8000cec:	f002 fa4e 	bl	800318c <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000cf0:	9408      	str	r4, [sp, #32]
 8000cf2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf8:	632b      	str	r3, [r5, #48]	; 0x30
 8000cfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d00:	9308      	str	r3, [sp, #32]
 8000d02:	9b08      	ldr	r3, [sp, #32]
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d04:	4622      	mov	r2, r4
 8000d06:	4621      	mov	r1, r4
 8000d08:	200e      	movs	r0, #14
 8000d0a:	f001 fe98 	bl	8002a3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d0e:	200e      	movs	r0, #14
 8000d10:	f001 feb1 	bl	8002a76 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d14:	4622      	mov	r2, r4
 8000d16:	4621      	mov	r1, r4
 8000d18:	2010      	movs	r0, #16
 8000d1a:	f001 fe90 	bl	8002a3e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d1e:	2010      	movs	r0, #16
 8000d20:	f001 fea9 	bl	8002a76 <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 8000d24:	4863      	ldr	r0, [pc, #396]	; (8000eb4 <main+0x2fc>)
 8000d26:	4b64      	ldr	r3, [pc, #400]	; (8000eb8 <main+0x300>)
 8000d28:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000d2a:	4b64      	ldr	r3, [pc, #400]	; (8000ebc <main+0x304>)
 8000d2c:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d2e:	6084      	str	r4, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000d30:	60c4      	str	r4, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d36:	6103      	str	r3, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	6144      	str	r4, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d3a:	6184      	str	r4, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3c:	61c4      	str	r4, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3e:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d40:	f004 f962 	bl	8005008 <HAL_I2C_Init>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f040 80ad 	bne.w	8000ea4 <main+0x2ec>
	hi2s2.Instance = SPI2;
 8000d4a:	485d      	ldr	r0, [pc, #372]	; (8000ec0 <main+0x308>)
 8000d4c:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <main+0x30c>)
 8000d4e:	6003      	str	r3, [r0, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000d50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d54:	6043      	str	r3, [r0, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d56:	2300      	movs	r3, #0
 8000d58:	6083      	str	r3, [r0, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	60c2      	str	r2, [r0, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d62:	6102      	str	r2, [r0, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000d64:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000d68:	6142      	str	r2, [r0, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d6a:	6183      	str	r3, [r0, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d6c:	61c3      	str	r3, [r0, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d6e:	6203      	str	r3, [r0, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d70:	f004 fa8e 	bl	8005290 <HAL_I2S_Init>
 8000d74:	2800      	cmp	r0, #0
 8000d76:	f040 80c3 	bne.w	8000f00 <main+0x348>
	hi2s3.Instance = SPI3;
 8000d7a:	4853      	ldr	r0, [pc, #332]	; (8000ec8 <main+0x310>)
 8000d7c:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <main+0x314>)
 8000d7e:	6003      	str	r3, [r0, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	6042      	str	r2, [r0, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d86:	2300      	movs	r3, #0
 8000d88:	6083      	str	r3, [r0, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d8a:	60c3      	str	r3, [r0, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d8c:	6102      	str	r2, [r0, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000d8e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000d92:	6142      	str	r2, [r0, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d94:	6183      	str	r3, [r0, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d96:	61c3      	str	r3, [r0, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d98:	6203      	str	r3, [r0, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d9a:	f004 fa79 	bl	8005290 <HAL_I2S_Init>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	f040 80b0 	bne.w	8000f04 <main+0x34c>
	MX_USB_HOST_Init();
 8000da4:	f00a f958 	bl	800b058 <MX_USB_HOST_Init>
	MX_FATFS_Init();
 8000da8:	f007 f8f4 	bl	8007f94 <MX_FATFS_Init>
	hspi1.Instance = SPI1;
 8000dac:	4848      	ldr	r0, [pc, #288]	; (8000ed0 <main+0x318>)
 8000dae:	4b49      	ldr	r3, [pc, #292]	; (8000ed4 <main+0x31c>)
 8000db0:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000db6:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dbc:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc2:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc4:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dca:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000dcc:	2228      	movs	r2, #40	; 0x28
 8000dce:	61c2      	str	r2, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd0:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd2:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd4:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dda:	f005 fe93 	bl	8006b04 <HAL_SPI_Init>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	f040 8092 	bne.w	8000f08 <main+0x350>
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_SET);
 8000de4:	4f31      	ldr	r7, [pc, #196]	; (8000eac <main+0x2f4>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dec:	4638      	mov	r0, r7
 8000dee:	f002 fb81 	bl	80034f4 <HAL_GPIO_WritePin>
	pedalboard.active_pedals = 0;
 8000df2:	4839      	ldr	r0, [pc, #228]	; (8000ed8 <main+0x320>)
 8000df4:	f04f 0800 	mov.w	r8, #0
 8000df8:	f880 8000 	strb.w	r8, [r0]
	pedalboard_append(&pedalboard, LPF);
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	f000 ffe5 	bl	8001dcc <pedalboard_append>
	HAL_I2S_Receive_DMA(&hi2s2, &ADC_BUFF.ADC16[0], 4);
 8000e02:	2204      	movs	r2, #4
 8000e04:	4935      	ldr	r1, [pc, #212]	; (8000edc <main+0x324>)
 8000e06:	482e      	ldr	r0, [pc, #184]	; (8000ec0 <main+0x308>)
 8000e08:	f004 fc2a 	bl	8005660 <HAL_I2S_Receive_DMA>
	HAL_I2S_Transmit_DMA(&hi2s3, &DAC_BUFF.DAC16[0], 8);
 8000e0c:	2208      	movs	r2, #8
 8000e0e:	4934      	ldr	r1, [pc, #208]	; (8000ee0 <main+0x328>)
 8000e10:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <main+0x310>)
 8000e12:	f004 fb7d 	bl	8005510 <HAL_I2S_Transmit_DMA>
	EPD_Init(&hepd1);
 8000e16:	4d33      	ldr	r5, [pc, #204]	; (8000ee4 <main+0x32c>)
 8000e18:	4628      	mov	r0, r5
 8000e1a:	f7ff fd39 	bl	8000890 <EPD_Init>
	EPD_Clear(&hepd1);
 8000e1e:	4628      	mov	r0, r5
 8000e20:	f7ff fd88 	bl	8000934 <EPD_Clear>
	draw_clean(hepd1.image);
 8000e24:	1cae      	adds	r6, r5, #2
 8000e26:	4630      	mov	r0, r6
 8000e28:	f000 faa4 	bl	8001374 <draw_clean>
	draw_rectangle(hepd1.image, 36, 56, 88, 20);
 8000e2c:	f04f 0914 	mov.w	r9, #20
 8000e30:	f8cd 9000 	str.w	r9, [sp]
 8000e34:	2358      	movs	r3, #88	; 0x58
 8000e36:	2238      	movs	r2, #56	; 0x38
 8000e38:	2124      	movs	r1, #36	; 0x24
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f000 f9a9 	bl	8001192 <draw_rectangle>
	sprintf(row, "g33ky toad");
 8000e40:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <main+0x330>)
 8000e42:	ab0d      	add	r3, sp, #52	; 0x34
 8000e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e46:	c303      	stmia	r3!, {r0, r1}
 8000e48:	f823 2b02 	strh.w	r2, [r3], #2
 8000e4c:	0c12      	lsrs	r2, r2, #16
 8000e4e:	701a      	strb	r2, [r3, #0]
	draw_text(hepd1.image, row, 40, 60);
 8000e50:	233c      	movs	r3, #60	; 0x3c
 8000e52:	2228      	movs	r2, #40	; 0x28
 8000e54:	a90d      	add	r1, sp, #52	; 0x34
 8000e56:	4630      	mov	r0, r6
 8000e58:	f000 fa5d 	bl	8001316 <draw_text>
	sprintf(row, "digital pedal");
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <main+0x334>)
 8000e5e:	ac0d      	add	r4, sp, #52	; 0x34
 8000e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e62:	c407      	stmia	r4!, {r0, r1, r2}
 8000e64:	8023      	strh	r3, [r4, #0]
	draw_text(hepd1.image, row, 20, 90);
 8000e66:	235a      	movs	r3, #90	; 0x5a
 8000e68:	464a      	mov	r2, r9
 8000e6a:	a90d      	add	r1, sp, #52	; 0x34
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	f000 fa52 	bl	8001316 <draw_text>
	EPD_Display(&hepd1);
 8000e72:	4628      	mov	r0, r5
 8000e74:	f7ff fd78 	bl	8000968 <EPD_Display>
	EPD_Sleep(&hepd1);
 8000e78:	4628      	mov	r0, r5
 8000e7a:	f7ff fd93 	bl	80009a4 <EPD_Sleep>
	RE_Init(&hre1, EncA_GPIO_Port, EncB_GPIO_Port, EncA_Pin, EncB_Pin);
 8000e7e:	491c      	ldr	r1, [pc, #112]	; (8000ef0 <main+0x338>)
 8000e80:	2304      	movs	r3, #4
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2308      	movs	r3, #8
 8000e86:	460a      	mov	r2, r1
 8000e88:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <main+0x33c>)
 8000e8a:	f001 f8a1 	bl	8001fd0 <RE_Init>
	HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 8000e8e:	4642      	mov	r2, r8
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4638      	mov	r0, r7
 8000e96:	f002 fb2d 	bl	80034f4 <HAL_GPIO_WritePin>
		RE_Process(&hre1);
 8000e9a:	4d16      	ldr	r5, [pc, #88]	; (8000ef4 <main+0x33c>)
		if (HAL_GetTick() % (interval * 1000) == 0) {
 8000e9c:	4f16      	ldr	r7, [pc, #88]	; (8000ef8 <main+0x340>)
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000e9e:	4644      	mov	r4, r8
			draw_clean(hepd1.image);
 8000ea0:	46b1      	mov	r9, r6
 8000ea2:	e066      	b.n	8000f72 <main+0x3ba>
 8000ea4:	b672      	cpsid	i
	while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <main+0x2ee>
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020c00 	.word	0x40020c00
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	20001b90 	.word	0x20001b90
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	000186a0 	.word	0x000186a0
 8000ec0:	20001be4 	.word	0x20001be4
 8000ec4:	40003800 	.word	0x40003800
 8000ec8:	20001c2c 	.word	0x20001c2c
 8000ecc:	40003c00 	.word	0x40003c00
 8000ed0:	20001c90 	.word	0x20001c90
 8000ed4:	40013000 	.word	0x40013000
 8000ed8:	20001ce8 	.word	0x20001ce8
 8000edc:	20000350 	.word	0x20000350
 8000ee0:	20000380 	.word	0x20000380
 8000ee4:	2000090c 	.word	0x2000090c
 8000ee8:	0800c354 	.word	0x0800c354
 8000eec:	0800c360 	.word	0x0800c360
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	20001c74 	.word	0x20001c74
 8000ef8:	95cbec1b 	.word	0x95cbec1b
 8000efc:	40020000 	.word	0x40020000
 8000f00:	b672      	cpsid	i
 8000f02:	e7fe      	b.n	8000f02 <main+0x34a>
 8000f04:	b672      	cpsid	i
 8000f06:	e7fe      	b.n	8000f06 <main+0x34e>
 8000f08:	b672      	cpsid	i
 8000f0a:	e7fe      	b.n	8000f0a <main+0x352>
				if (val < -64) val = -64;
 8000f0c:	eef4 7a48 	vcmp.f32	s15, s16
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	bf48      	it	mi
 8000f16:	eef0 7a48 	vmovmi.f32	s15, s16
				toggle_single_pixel(hepd1.image, 64 + (int)val, i);
 8000f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1e:	ee17 1a90 	vmov	r1, s15
 8000f22:	3140      	adds	r1, #64	; 0x40
 8000f24:	b2b2      	uxth	r2, r6
 8000f26:	b289      	uxth	r1, r1
 8000f28:	4859      	ldr	r0, [pc, #356]	; (8001090 <main+0x4d8>)
 8000f2a:	f000 f900 	bl	800112e <toggle_single_pixel>
			for (int i = 0; i < 296; i++) {
 8000f2e:	3601      	adds	r6, #1
 8000f30:	f5b6 7f94 	cmp.w	r6, #296	; 0x128
 8000f34:	d00f      	beq.n	8000f56 <main+0x39e>
				float val = (float)display_array[i] / 32768.0F * 10.0F;
 8000f36:	ecf8 7a01 	vldmia	r8!, {s15}
 8000f3a:	ee67 7a89 	vmul.f32	s15, s15, s18
 8000f3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f42:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (val > 63) val = 63;
 8000f46:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	dddd      	ble.n	8000f0c <main+0x354>
 8000f50:	eddf 7a50 	vldr	s15, [pc, #320]	; 8001094 <main+0x4dc>
 8000f54:	e7e1      	b.n	8000f1a <main+0x362>
			display_counter = 0;
 8000f56:	4b50      	ldr	r3, [pc, #320]	; (8001098 <main+0x4e0>)
 8000f58:	801c      	strh	r4, [r3, #0]
			EPD_Display(&hepd1);
 8000f5a:	4850      	ldr	r0, [pc, #320]	; (800109c <main+0x4e4>)
 8000f5c:	f7ff fd04 	bl	8000968 <EPD_Display>
			EPD_Sleep(&hepd1);
 8000f60:	484e      	ldr	r0, [pc, #312]	; (800109c <main+0x4e4>)
 8000f62:	f7ff fd1f 	bl	80009a4 <EPD_Sleep>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_RESET);
 8000f66:	4622      	mov	r2, r4
 8000f68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6c:	484c      	ldr	r0, [pc, #304]	; (80010a0 <main+0x4e8>)
 8000f6e:	f002 fac1 	bl	80034f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000f72:	4e4c      	ldr	r6, [pc, #304]	; (80010a4 <main+0x4ec>)
		MX_USB_HOST_Process();
 8000f74:	f00a f896 	bl	800b0a4 <MX_USB_HOST_Process>
		HAL_GPIO_WritePin(OtgPower_GPIO_Port, OtgPower_Pin, GPIO_PIN_RESET);
 8000f78:	4622      	mov	r2, r4
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	f002 fab9 	bl	80034f4 <HAL_GPIO_WritePin>
		RE_Process(&hre1);
 8000f82:	4628      	mov	r0, r5
 8000f84:	f001 f850 	bl	8002028 <RE_Process>
		if (HAL_GetTick() % (interval * 1000) == 0) {
 8000f88:	f001 fc4e 	bl	8002828 <HAL_GetTick>
 8000f8c:	fba7 2300 	umull	r2, r3, r7, r0
 8000f90:	0b1b      	lsrs	r3, r3, #12
 8000f92:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000f96:	fb02 0013 	mls	r0, r2, r3, r0
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d1ea      	bne.n	8000f74 <main+0x3bc>
			HAL_GPIO_WritePin(Led3_GPIO_Port, Led3_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa4:	483e      	ldr	r0, [pc, #248]	; (80010a0 <main+0x4e8>)
 8000fa6:	f002 faa5 	bl	80034f4 <HAL_GPIO_WritePin>
			EPD_Init(&hepd1);
 8000faa:	483c      	ldr	r0, [pc, #240]	; (800109c <main+0x4e4>)
 8000fac:	f7ff fc70 	bl	8000890 <EPD_Init>
			draw_clean(hepd1.image);
 8000fb0:	4648      	mov	r0, r9
 8000fb2:	f000 f9df 	bl	8001374 <draw_clean>
			sprintf(row, "RxH %d LR", rxHalfCpltCounter / interval);
 8000fb6:	f8df b114 	ldr.w	fp, [pc, #276]	; 80010cc <main+0x514>
 8000fba:	f8db 2000 	ldr.w	r2, [fp]
 8000fbe:	4e3a      	ldr	r6, [pc, #232]	; (80010a8 <main+0x4f0>)
 8000fc0:	fba6 1302 	umull	r1, r3, r6, r2
 8000fc4:	1ad2      	subs	r2, r2, r3
 8000fc6:	eb03 0252 	add.w	r2, r3, r2, lsr #1
 8000fca:	0892      	lsrs	r2, r2, #2
 8000fcc:	4937      	ldr	r1, [pc, #220]	; (80010ac <main+0x4f4>)
 8000fce:	a80d      	add	r0, sp, #52	; 0x34
 8000fd0:	f00a fcba 	bl	800b948 <siprintf>
			draw_text(hepd1.image, row, 0, 0);
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	a90d      	add	r1, sp, #52	; 0x34
 8000fda:	4648      	mov	r0, r9
 8000fdc:	f000 f99b 	bl	8001316 <draw_text>
			sprintf(row, "RxC %d LR", rxCpltCounter / interval);
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <main+0x4f8>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	fba6 1302 	umull	r1, r3, r6, r2
 8000fe8:	1ad2      	subs	r2, r2, r3
 8000fea:	eb03 0252 	add.w	r2, r3, r2, lsr #1
 8000fee:	0892      	lsrs	r2, r2, #2
 8000ff0:	4930      	ldr	r1, [pc, #192]	; (80010b4 <main+0x4fc>)
 8000ff2:	a80d      	add	r0, sp, #52	; 0x34
 8000ff4:	f00a fca8 	bl	800b948 <siprintf>
			draw_text(hepd1.image, row, 0, 20);
 8000ff8:	2314      	movs	r3, #20
 8000ffa:	4622      	mov	r2, r4
 8000ffc:	a90d      	add	r1, sp, #52	; 0x34
 8000ffe:	4648      	mov	r0, r9
 8001000:	f000 f989 	bl	8001316 <draw_text>
			sprintf(row, "TxH %d L", txHalfCpltCounter / interval);
 8001004:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80010d0 <main+0x518>
 8001008:	f8da 2000 	ldr.w	r2, [sl]
 800100c:	fba6 1302 	umull	r1, r3, r6, r2
 8001010:	1ad2      	subs	r2, r2, r3
 8001012:	eb03 0252 	add.w	r2, r3, r2, lsr #1
 8001016:	0892      	lsrs	r2, r2, #2
 8001018:	4927      	ldr	r1, [pc, #156]	; (80010b8 <main+0x500>)
 800101a:	a80d      	add	r0, sp, #52	; 0x34
 800101c:	f00a fc94 	bl	800b948 <siprintf>
			draw_text(hepd1.image, row, 0, 40);
 8001020:	2328      	movs	r3, #40	; 0x28
 8001022:	4622      	mov	r2, r4
 8001024:	a90d      	add	r1, sp, #52	; 0x34
 8001026:	4648      	mov	r0, r9
 8001028:	f000 f975 	bl	8001316 <draw_text>
			sprintf(row, "TxC %d R", txCpltCounter / interval);
 800102c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80010d4 <main+0x51c>
 8001030:	f8d8 3000 	ldr.w	r3, [r8]
 8001034:	fba6 2603 	umull	r2, r6, r6, r3
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	eb06 0653 	add.w	r6, r6, r3, lsr #1
 800103e:	08b2      	lsrs	r2, r6, #2
 8001040:	491e      	ldr	r1, [pc, #120]	; (80010bc <main+0x504>)
 8001042:	a80d      	add	r0, sp, #52	; 0x34
 8001044:	f00a fc80 	bl	800b948 <siprintf>
			draw_text(hepd1.image, row, 0, 60);
 8001048:	233c      	movs	r3, #60	; 0x3c
 800104a:	4622      	mov	r2, r4
 800104c:	a90d      	add	r1, sp, #52	; 0x34
 800104e:	4648      	mov	r0, r9
 8001050:	f000 f961 	bl	8001316 <draw_text>
			sprintf(row, "Enc %d", hre1.counter);
 8001054:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
 8001058:	4919      	ldr	r1, [pc, #100]	; (80010c0 <main+0x508>)
 800105a:	a80d      	add	r0, sp, #52	; 0x34
 800105c:	f00a fc74 	bl	800b948 <siprintf>
			draw_text(hepd1.image, row, 0, 80);
 8001060:	2350      	movs	r3, #80	; 0x50
 8001062:	4622      	mov	r2, r4
 8001064:	a90d      	add	r1, sp, #52	; 0x34
 8001066:	4648      	mov	r0, r9
 8001068:	f000 f955 	bl	8001316 <draw_text>
			rxHalfCpltCounter = 0;
 800106c:	f8cb 4000 	str.w	r4, [fp]
			rxCpltCounter = 0;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <main+0x4f8>)
 8001072:	601c      	str	r4, [r3, #0]
			txHalfCpltCounter = 0;
 8001074:	f8ca 4000 	str.w	r4, [sl]
			txCpltCounter = 0;
 8001078:	f8c8 4000 	str.w	r4, [r8]
			for (int i = 0; i < 296; i++) {
 800107c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80010d8 <main+0x520>
 8001080:	4626      	mov	r6, r4
				float val = (float)display_array[i] / 32768.0F * 10.0F;
 8001082:	ed9f 9a10 	vldr	s18, [pc, #64]	; 80010c4 <main+0x50c>
				if (val > 63) val = 63;
 8001086:	eddf 8a03 	vldr	s17, [pc, #12]	; 8001094 <main+0x4dc>
				if (val < -64) val = -64;
 800108a:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 80010c8 <main+0x510>
 800108e:	e752      	b.n	8000f36 <main+0x37e>
 8001090:	2000090e 	.word	0x2000090e
 8001094:	427c0000 	.word	0x427c0000
 8001098:	20000848 	.word	0x20000848
 800109c:	2000090c 	.word	0x2000090c
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40020800 	.word	0x40020800
 80010a8:	24924925 	.word	0x24924925
 80010ac:	0800c370 	.word	0x0800c370
 80010b0:	2000232c 	.word	0x2000232c
 80010b4:	0800c37c 	.word	0x0800c37c
 80010b8:	0800c388 	.word	0x0800c388
 80010bc:	0800c394 	.word	0x0800c394
 80010c0:	0800c3a0 	.word	0x0800c3a0
 80010c4:	38000000 	.word	0x38000000
 80010c8:	c2800000 	.word	0xc2800000
 80010cc:	20002330 	.word	0x20002330
 80010d0:	20002338 	.word	0x20002338
 80010d4:	20002334 	.word	0x20002334
 80010d8:	200003a8 	.word	0x200003a8

080010dc <Error_Handler>:
 80010dc:	b672      	cpsid	i
	while (1)
 80010de:	e7fe      	b.n	80010de <Error_Handler+0x2>

080010e0 <read_font_pixel>:
#define CANVAS_WIDTH 128
#define CANVAS_HEIGHT 296

uint8_t font[516] = { 0x0, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x60, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x60, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x0, 0x0, 0x0, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x6C, 0x6C, 0x78, 0x6C, 0x6C, 0x66, 0x66, 0x0, 0x0, 0x0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x63, 0x63, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x63, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x63, 0x63, 0x63, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0xC, 0x6, 0x0, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x64, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x60, 0x30, 0x18, 0xC, 0x6, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x0, 0x0, 0x0, 0x63, 0x63, 0x63, 0x63, 0x6B, 0x6B, 0x36, 0x36, 0x36, 0x0, 0x0, 0x0, 0x66, 0x66, 0x34, 0x18, 0x18, 0x2C, 0x66, 0x66, 0x66, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x0, 0x0, 0x0, 0x7E, 0x6, 0x6, 0xC, 0x18, 0x30, 0x60, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x6E, 0x6E, 0x66, 0x76, 0x76, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x6, 0xE, 0x3E, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0xC, 0x18, 0x30, 0x60, 0x7E, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x6, 0x1C, 0x6, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x30, 0x30, 0x36, 0x36, 0x36, 0x66, 0x7F, 0x6, 0x6, 0x0, 0x0, 0x0, 0x7E, 0x60, 0x60, 0x60, 0x7C, 0x6, 0x6, 0xC, 0x78, 0x0, 0x0, 0x0, 0x1C, 0x38, 0x30, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x7E, 0x6, 0xC, 0xC, 0x18, 0x18, 0x30, 0x30, 0x30, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x76, 0x3C, 0x6E, 0x66, 0x66, 0x3C, 0x0, 0x0, 0x0, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3E, 0xC, 0x1C, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x38, 0x18, 0x30, 0x0, 0x0, 0x0, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0xC, 0x18, 0x30, 0x60, 0x30, 0x18, 0xC, 0x6, 0x0, 0x0, 0x0, 0x60, 0x30, 0x18, 0xC, 0x6, 0xC, 0x18, 0x30, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};

uint8_t read_font_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * FONT_WIDTH) / 8;
 80010f0:	887a      	ldrh	r2, [r7, #2]
 80010f2:	883b      	ldrh	r3, [r7, #0]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4413      	add	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	da00      	bge.n	80010fe <read_font_pixel+0x1e>
 80010fc:	3307      	adds	r3, #7
 80010fe:	10db      	asrs	r3, r3, #3
 8001100:	81fb      	strh	r3, [r7, #14]
	uint8_t pixel_group = image[i];
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	737b      	strb	r3, [r7, #13]
	return ((pixel_group >> (7 - x % 8)) & 0x01);
 800110c:	7b7a      	ldrb	r2, [r7, #13]
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	43db      	mvns	r3, r3
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	fa42 f303 	asr.w	r3, r2, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <toggle_single_pixel>:

void toggle_single_pixel(uint8_t *image, uint16_t x, uint16_t y) {
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
 800113a:	4613      	mov	r3, r2
 800113c:	803b      	strh	r3, [r7, #0]
	uint16_t i = (x +  y * CANVAS_WIDTH) / 8;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	883b      	ldrh	r3, [r7, #0]
 8001142:	01db      	lsls	r3, r3, #7
 8001144:	4413      	add	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	da00      	bge.n	800114c <toggle_single_pixel+0x1e>
 800114a:	3307      	adds	r3, #7
 800114c:	10db      	asrs	r3, r3, #3
 800114e:	81fb      	strh	r3, [r7, #14]
	if (x < CANVAS_WIDTH && y < CANVAS_HEIGHT) image[i] ^= (0x01 << (7 - x % 8));
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	2b7f      	cmp	r3, #127	; 0x7f
 8001154:	d817      	bhi.n	8001186 <toggle_single_pixel+0x58>
 8001156:	883b      	ldrh	r3, [r7, #0]
 8001158:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800115c:	d213      	bcs.n	8001186 <toggle_single_pixel+0x58>
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b25a      	sxtb	r2, r3
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	43db      	mvns	r3, r3
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	4053      	eors	r3, r2
 800117a:	b259      	sxtb	r1, r3
 800117c:	89fb      	ldrh	r3, [r7, #14]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	b2ca      	uxtb	r2, r1
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <draw_rectangle>:
	for (uint16_t i = 0; i < CANVAS_WIDTH * CANVAS_HEIGHT / 8; i++) {
		image[i] = ~image[i];
	}
}

void draw_rectangle(uint8_t *image, uint16_t x, uint16_t y, uint16_t w, uint16_t h) {
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	4608      	mov	r0, r1
 800119c:	4611      	mov	r1, r2
 800119e:	461a      	mov	r2, r3
 80011a0:	4603      	mov	r3, r0
 80011a2:	817b      	strh	r3, [r7, #10]
 80011a4:	460b      	mov	r3, r1
 80011a6:	813b      	strh	r3, [r7, #8]
 80011a8:	4613      	mov	r3, r2
 80011aa:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = 0; i < h; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	82fb      	strh	r3, [r7, #22]
 80011b0:	e018      	b.n	80011e4 <draw_rectangle+0x52>
		for (uint16_t j = 0; j < w; j++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	82bb      	strh	r3, [r7, #20]
 80011b6:	e00e      	b.n	80011d6 <draw_rectangle+0x44>
			toggle_single_pixel(image, x + j, y + i);
 80011b8:	897a      	ldrh	r2, [r7, #10]
 80011ba:	8abb      	ldrh	r3, [r7, #20]
 80011bc:	4413      	add	r3, r2
 80011be:	b299      	uxth	r1, r3
 80011c0:	893a      	ldrh	r2, [r7, #8]
 80011c2:	8afb      	ldrh	r3, [r7, #22]
 80011c4:	4413      	add	r3, r2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff ffaf 	bl	800112e <toggle_single_pixel>
		for (uint16_t j = 0; j < w; j++) {
 80011d0:	8abb      	ldrh	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	82bb      	strh	r3, [r7, #20]
 80011d6:	8aba      	ldrh	r2, [r7, #20]
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3ec      	bcc.n	80011b8 <draw_rectangle+0x26>
	for (uint16_t i = 0; i < h; i++) {
 80011de:	8afb      	ldrh	r3, [r7, #22]
 80011e0:	3301      	adds	r3, #1
 80011e2:	82fb      	strh	r3, [r7, #22]
 80011e4:	8afa      	ldrh	r2, [r7, #22]
 80011e6:	8c3b      	ldrh	r3, [r7, #32]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d3e2      	bcc.n	80011b2 <draw_rectangle+0x20>
		}
	}
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <draw_char>:

void draw_char(uint8_t *image, uint16_t x, uint16_t y, uint16_t c) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4603      	mov	r3, r0
 8001208:	817b      	strh	r3, [r7, #10]
 800120a:	460b      	mov	r3, r1
 800120c:	813b      	strh	r3, [r7, #8]
 800120e:	4613      	mov	r3, r2
 8001210:	80fb      	strh	r3, [r7, #6]
	uint16_t font_offset = c * FONT_HEIGHT;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	461a      	mov	r2, r3
 8001216:	0052      	lsls	r2, r2, #1
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	827b      	strh	r3, [r7, #18]
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	82fb      	strh	r3, [r7, #22]
 8001222:	e023      	b.n	800126c <draw_char+0x74>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 8001224:	2300      	movs	r3, #0
 8001226:	82bb      	strh	r3, [r7, #20]
 8001228:	e01a      	b.n	8001260 <draw_char+0x68>
			if (read_font_pixel(font, j, i + font_offset)) {
 800122a:	8afa      	ldrh	r2, [r7, #22]
 800122c:	8a7b      	ldrh	r3, [r7, #18]
 800122e:	4413      	add	r3, r2
 8001230:	b29a      	uxth	r2, r3
 8001232:	8abb      	ldrh	r3, [r7, #20]
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <draw_char+0x84>)
 8001238:	f7ff ff52 	bl	80010e0 <read_font_pixel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <draw_char+0x62>
				toggle_single_pixel(image, x + j, y + i);
 8001242:	897a      	ldrh	r2, [r7, #10]
 8001244:	8abb      	ldrh	r3, [r7, #20]
 8001246:	4413      	add	r3, r2
 8001248:	b299      	uxth	r1, r3
 800124a:	893a      	ldrh	r2, [r7, #8]
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f7ff ff6a 	bl	800112e <toggle_single_pixel>
		for (uint16_t j = 0; j < FONT_WIDTH; j++) {
 800125a:	8abb      	ldrh	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	82bb      	strh	r3, [r7, #20]
 8001260:	8abb      	ldrh	r3, [r7, #20]
 8001262:	2b07      	cmp	r3, #7
 8001264:	d9e1      	bls.n	800122a <draw_char+0x32>
	for (uint16_t i = 0; i < FONT_HEIGHT; i++) {
 8001266:	8afb      	ldrh	r3, [r7, #22]
 8001268:	3301      	adds	r3, #1
 800126a:	82fb      	strh	r3, [r7, #22]
 800126c:	8afb      	ldrh	r3, [r7, #22]
 800126e:	2b0b      	cmp	r3, #11
 8001270:	d9d8      	bls.n	8001224 <draw_char+0x2c>
			}
		}
	}
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000a0 	.word	0x200000a0

08001280 <translate>:

uint16_t translate(char c) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	if (c >= 'A' && c <= 'Z') {
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b40      	cmp	r3, #64	; 0x40
 800128e:	d907      	bls.n	80012a0 <translate+0x20>
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b5a      	cmp	r3, #90	; 0x5a
 8001294:	d804      	bhi.n	80012a0 <translate+0x20>
		return c - 'A';
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	b29b      	uxth	r3, r3
 800129a:	3b41      	subs	r3, #65	; 0x41
 800129c:	b29b      	uxth	r3, r3
 800129e:	e034      	b.n	800130a <translate+0x8a>
	} else if (c >= 'a' && c <= 'z') {
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	2b60      	cmp	r3, #96	; 0x60
 80012a4:	d907      	bls.n	80012b6 <translate+0x36>
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b7a      	cmp	r3, #122	; 0x7a
 80012aa:	d804      	bhi.n	80012b6 <translate+0x36>
		return c - 'a';
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3b61      	subs	r3, #97	; 0x61
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	e029      	b.n	800130a <translate+0x8a>
	} else if (c >= '0' && c <= '9') {
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b2f      	cmp	r3, #47	; 0x2f
 80012ba:	d907      	bls.n	80012cc <translate+0x4c>
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b39      	cmp	r3, #57	; 0x39
 80012c0:	d804      	bhi.n	80012cc <translate+0x4c>
		return c - '0' + 26;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3b16      	subs	r3, #22
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	e01e      	b.n	800130a <translate+0x8a>
	} else if (c == '.') {
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b2e      	cmp	r3, #46	; 0x2e
 80012d0:	d101      	bne.n	80012d6 <translate+0x56>
		return 36;
 80012d2:	2324      	movs	r3, #36	; 0x24
 80012d4:	e019      	b.n	800130a <translate+0x8a>
	} else if (c == ',') {
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b2c      	cmp	r3, #44	; 0x2c
 80012da:	d101      	bne.n	80012e0 <translate+0x60>
		return 37;
 80012dc:	2325      	movs	r3, #37	; 0x25
 80012de:	e014      	b.n	800130a <translate+0x8a>
	} else if (c == '+') {
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b2b      	cmp	r3, #43	; 0x2b
 80012e4:	d101      	bne.n	80012ea <translate+0x6a>
		return 38;
 80012e6:	2326      	movs	r3, #38	; 0x26
 80012e8:	e00f      	b.n	800130a <translate+0x8a>
	} else if (c == '-') {
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b2d      	cmp	r3, #45	; 0x2d
 80012ee:	d101      	bne.n	80012f4 <translate+0x74>
		return 39;
 80012f0:	2327      	movs	r3, #39	; 0x27
 80012f2:	e00a      	b.n	800130a <translate+0x8a>
	} else if (c == '<') {
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b3c      	cmp	r3, #60	; 0x3c
 80012f8:	d101      	bne.n	80012fe <translate+0x7e>
		return 40;
 80012fa:	2328      	movs	r3, #40	; 0x28
 80012fc:	e005      	b.n	800130a <translate+0x8a>
	} else if (c == '>') {
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b3e      	cmp	r3, #62	; 0x3e
 8001302:	d101      	bne.n	8001308 <translate+0x88>
		return 41;
 8001304:	2329      	movs	r3, #41	; 0x29
 8001306:	e000      	b.n	800130a <translate+0x8a>
	} else {
		return 42; // ' '
 8001308:	232a      	movs	r3, #42	; 0x2a
	}
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <draw_text>:

void draw_text(uint8_t *image, char *text, uint16_t x, uint16_t y) {
 8001316:	b590      	push	{r4, r7, lr}
 8001318:	b087      	sub	sp, #28
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	4611      	mov	r1, r2
 8001322:	461a      	mov	r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	4613      	mov	r3, r2
 800132a:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 8001330:	e015      	b.n	800135e <draw_text+0x48>
		draw_char(image, x + FONT_WIDTH * i, y, translate(text[i]));
 8001332:	8afb      	ldrh	r3, [r7, #22]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	b29a      	uxth	r2, r3
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	4413      	add	r3, r2
 800133c:	b29c      	uxth	r4, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff9a 	bl	8001280 <translate>
 800134c:	4603      	mov	r3, r0
 800134e:	88ba      	ldrh	r2, [r7, #4]
 8001350:	4621      	mov	r1, r4
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff ff50 	bl	80011f8 <draw_char>
		i++;
 8001358:	8afb      	ldrh	r3, [r7, #22]
 800135a:	3301      	adds	r3, #1
 800135c:	82fb      	strh	r3, [r7, #22]
	while(text[i] > 0) {
 800135e:	8afb      	ldrh	r3, [r7, #22]
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e3      	bne.n	8001332 <draw_text+0x1c>
	}
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd90      	pop	{r4, r7, pc}

08001374 <draw_clean>:

void draw_clean(uint8_t *image) {
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	uint16_t bytes = CANVAS_WIDTH * CANVAS_HEIGHT / 8;
 800137c:	f44f 5394 	mov.w	r3, #4736	; 0x1280
 8001380:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i = 0; i < bytes; i++) image[i] = 0xFF;
 8001382:	2300      	movs	r3, #0
 8001384:	81fb      	strh	r3, [r7, #14]
 8001386:	e007      	b.n	8001398 <draw_clean+0x24>
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	22ff      	movs	r2, #255	; 0xff
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	3301      	adds	r3, #1
 8001396:	81fb      	strh	r3, [r7, #14]
 8001398:	89fa      	ldrh	r2, [r7, #14]
 800139a:	89bb      	ldrh	r3, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d3f3      	bcc.n	8001388 <draw_clean+0x14>
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <overdrive_pedal_init>:
#include "pedalboard_min.h"

// OVERDRIVE

void overdrive_pedal_init(pedal_config_t *conf) {
 80013b0:	b490      	push	{r4, r7}
 80013b2:	b09a      	sub	sp, #104	; 0x68
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <overdrive_pedal_init+0x74>)
 80013bc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80013c0:	4613      	mov	r3, r2
 80013c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <overdrive_pedal_init+0x78>)
 80013cc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80013d0:	4613      	mov	r3, r2
 80013d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_LOW] = (float_parameter_t){28000.F, 0.F, 32767.F, 1.F};
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <overdrive_pedal_init+0x7c>)
 80013dc:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80013e0:	4613      	mov	r3, r2
 80013e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SOFTENER] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <overdrive_pedal_init+0x74>)
 80013ec:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80013f0:	4613      	mov	r3, r2
 80013f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <overdrive_pedal_init+0x80>)
 80013fc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001400:	4613      	mov	r3, r2
 8001402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <overdrive_pedal_init+0x84>)
 800140c:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001410:	4613      	mov	r3, r2
 8001412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001418:	bf00      	nop
 800141a:	3768      	adds	r7, #104	; 0x68
 800141c:	46bd      	mov	sp, r7
 800141e:	bc90      	pop	{r4, r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	0800c040 	.word	0x0800c040
 8001428:	0800c050 	.word	0x0800c050
 800142c:	0800c060 	.word	0x0800c060
 8001430:	0800c070 	.word	0x0800c070
 8001434:	0800c080 	.word	0x0800c080

08001438 <overdrive_process>:

float overdrive_process(float in, pedal_config_t *conf) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001442:	6038      	str	r0, [r7, #0]
    float out = in *  conf->float_params[INTENSITY].value;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800144a:	ed97 7a01 	vldr	s14, [r7, #4]
 800144e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001452:	edc7 7a03 	vstr	s15, [r7, #12]
    out = soft_clip(out, conf->float_params[THRESHOLD_LOW].value, conf->float_params[SOFTENER].value);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001462:	eeb0 1a47 	vmov.f32	s2, s14
 8001466:	eef0 0a67 	vmov.f32	s1, s15
 800146a:	ed97 0a03 	vldr	s0, [r7, #12]
 800146e:	f000 fbab 	bl	8001bc8 <soft_clip>
 8001472:	ed87 0a03 	vstr	s0, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800147c:	eef0 0a67 	vmov.f32	s1, s15
 8001480:	ed97 0a03 	vldr	s0, [r7, #12]
 8001484:	f000 fb70 	bl	8001b68 <hard_clip>
 8001488:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001498:	eef0 1a47 	vmov.f32	s3, s14
 800149c:	eeb0 1a67 	vmov.f32	s2, s15
 80014a0:	edd7 0a01 	vldr	s1, [r7, #4]
 80014a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80014a8:	f000 fb3e 	bl	8001b28 <mix>
 80014ac:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	ee07 3a90 	vmov	s15, r3
}
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <bitcrusher_rs_pedal_init>:

// BITCRUSHER resolution

void bitcrusher_rs_pedal_init(pedal_config_t *conf) {
 80014c0:	b490      	push	{r4, r7}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    conf->int_params[REDUCT_INTENSITY] = (int_parameter_t){12, 1, 16, 1};
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <bitcrusher_rs_pedal_init+0x44>)
 80014cc:	f103 0420 	add.w	r4, r3, #32
 80014d0:	4613      	mov	r3, r2
 80014d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <bitcrusher_rs_pedal_init+0x48>)
 80014dc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80014e0:	4613      	mov	r3, r2
 80014e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.5F, 0.F, 1.F, 0.1F};
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <bitcrusher_rs_pedal_init+0x48>)
 80014ec:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80014f0:	4613      	mov	r3, r2
 80014f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80014f8:	bf00      	nop
 80014fa:	3738      	adds	r7, #56	; 0x38
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc90      	pop	{r4, r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	0800c090 	.word	0x0800c090
 8001508:	0800c0a0 	.word	0x0800c0a0

0800150c <bitcrusher_rs_process>:

float bitcrusher_rs_process(float in, pedal_config_t *conf) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	ed87 0a01 	vstr	s0, [r7, #4]
 8001516:	6038      	str	r0, [r7, #0]
    int16_t shift = conf->int_params[REDUCT_INTENSITY].value;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	81fb      	strh	r3, [r7, #14]
    int16_t _out = (int16_t)in;
 800151e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001526:	ee17 3a90 	vmov	r3, s15
 800152a:	81bb      	strh	r3, [r7, #12]
    _out = _out >> shift;
 800152c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001534:	fa42 f303 	asr.w	r3, r2, r3
 8001538:	81bb      	strh	r3, [r7, #12]
    _out = _out << shift;
 800153a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800153e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	81bb      	strh	r3, [r7, #12]
    _out += (2 << shift -2);
 8001548:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154c:	3b02      	subs	r3, #2
 800154e:	2202      	movs	r2, #2
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	b29a      	uxth	r2, r3
 8001556:	89bb      	ldrh	r3, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	81bb      	strh	r3, [r7, #12]
    float out = (float)_out;
 800155e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800156a:	edc7 7a02 	vstr	s15, [r7, #8]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800157a:	eef0 1a47 	vmov.f32	s3, s14
 800157e:	eeb0 1a67 	vmov.f32	s2, s15
 8001582:	edd7 0a01 	vldr	s1, [r7, #4]
 8001586:	ed97 0a02 	vldr	s0, [r7, #8]
 800158a:	f000 facd 	bl	8001b28 <mix>
 800158e:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	ee07 3a90 	vmov	s15, r3
}
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <tremolo_pedal_init>:

// TREMOLO

void tremolo_pedal_init(pedal_config_t *conf) {
 80015a4:	b490      	push	{r4, r7}
 80015a6:	b092      	sub	sp, #72	; 0x48
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    conf->float_params[SPEED] = (float_parameter_t){2.F, 0.1F, 10.F, 0.1F};
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <tremolo_pedal_init+0x5c>)
 80015c8:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80015cc:	4613      	mov	r3, r2
 80015ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.2F, 0.F, 1.F, 0.1F};
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <tremolo_pedal_init+0x60>)
 80015d8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80015dc:	4613      	mov	r3, r2
 80015de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.8F, 0.F, 1.F, 0.1F};
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <tremolo_pedal_init+0x64>)
 80015e8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80015ec:	4613      	mov	r3, r2
 80015ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80015f4:	bf00      	nop
 80015f6:	3748      	adds	r7, #72	; 0x48
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc90      	pop	{r4, r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	0800c0b0 	.word	0x0800c0b0
 8001604:	0800c0c0 	.word	0x0800c0c0
 8001608:	0800c0d0 	.word	0x0800c0d0

0800160c <tremolo_process>:

float tremolo_process(float in, pedal_config_t *conf) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	ed87 0a01 	vstr	s0, [r7, #4]
 8001616:	6038      	str	r0, [r7, #0]
    float tone = 440.0F;
 8001618:	4b1c      	ldr	r3, [pc, #112]	; (800168c <tremolo_process+0x80>)
 800161a:	60fb      	str	r3, [r7, #12]
    float out = in * wave_gen('s', conf->int_params[COUNTER].value, tone * conf->float_params[SPEED].value);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	461a      	mov	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001628:	edd7 7a03 	vldr	s15, [r7, #12]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	eeb0 0a67 	vmov.f32	s0, s15
 8001634:	4611      	mov	r1, r2
 8001636:	2073      	movs	r0, #115	; 0x73
 8001638:	f000 fb42 	bl	8001cc0 <wave_gen>
 800163c:	eeb0 7a40 	vmov.f32	s14, s0
 8001640:	edd7 7a01 	vldr	s15, [r7, #4]
 8001644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001648:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->int_params[COUNTER].value++;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001662:	eef0 1a47 	vmov.f32	s3, s14
 8001666:	eeb0 1a67 	vmov.f32	s2, s15
 800166a:	edd7 0a01 	vldr	s1, [r7, #4]
 800166e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001672:	f000 fa59 	bl	8001b28 <mix>
 8001676:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	ee07 3a90 	vmov	s15, r3
}
 8001680:	eeb0 0a67 	vmov.f32	s0, s15
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	43dc0000 	.word	0x43dc0000

08001690 <overdrive_sqrt_pedal_init>:

// OVERDRIVE_SQRT

void overdrive_sqrt_pedal_init(pedal_config_t *conf) {
 8001690:	b490      	push	{r4, r7}
 8001692:	b092      	sub	sp, #72	; 0x48
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){500.F, 0.F, 2000.F, 100.F};
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <overdrive_sqrt_pedal_init+0x54>)
 800169c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80016a0:	4613      	mov	r3, r2
 80016a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <overdrive_sqrt_pedal_init+0x58>)
 80016ac:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80016b0:	4613      	mov	r3, r2
 80016b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){0.25F, 0.F, 1.F, 0.1F};
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <overdrive_sqrt_pedal_init+0x5c>)
 80016bc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80016c0:	4613      	mov	r3, r2
 80016c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.75F, 0.F, 1.F, 0.1F};
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <overdrive_sqrt_pedal_init+0x60>)
 80016cc:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80016d0:	4613      	mov	r3, r2
 80016d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016d8:	bf00      	nop
 80016da:	3748      	adds	r7, #72	; 0x48
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc90      	pop	{r4, r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	0800c0e0 	.word	0x0800c0e0
 80016e8:	0800c050 	.word	0x0800c050
 80016ec:	0800c0f0 	.word	0x0800c0f0
 80016f0:	0800c100 	.word	0x0800c100

080016f4 <overdrive_sqrt_process>:

float overdrive_sqrt_process(float in, pedal_config_t *conf) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80016fe:	6038      	str	r0, [r7, #0]
    float out;
    if (in > 0.0F) {
 8001700:	edd7 7a01 	vldr	s15, [r7, #4]
 8001704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	dd06      	ble.n	800171c <overdrive_sqrt_process+0x28>
        out = square_root(in);
 800170e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001712:	f000 faa4 	bl	8001c5e <square_root>
 8001716:	ed87 0a03 	vstr	s0, [r7, #12]
 800171a:	e00d      	b.n	8001738 <overdrive_sqrt_process+0x44>
    } else {
        out = -square_root(-in);
 800171c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001720:	eef1 7a67 	vneg.f32	s15, s15
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	f000 fa99 	bl	8001c5e <square_root>
 800172c:	eef0 7a40 	vmov.f32	s15, s0
 8001730:	eef1 7a67 	vneg.f32	s15, s15
 8001734:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    out = out * conf->float_params[INTENSITY].value;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800173e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001746:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001750:	eef0 0a67 	vmov.f32	s1, s15
 8001754:	ed97 0a03 	vldr	s0, [r7, #12]
 8001758:	f000 fa06 	bl	8001b68 <hard_clip>
 800175c:	ed87 0a03 	vstr	s0, [r7, #12]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800176c:	eef0 1a47 	vmov.f32	s3, s14
 8001770:	eeb0 1a67 	vmov.f32	s2, s15
 8001774:	edd7 0a01 	vldr	s1, [r7, #4]
 8001778:	ed97 0a03 	vldr	s0, [r7, #12]
 800177c:	f000 f9d4 	bl	8001b28 <mix>
 8001780:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	ee07 3a90 	vmov	s15, r3
}
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <amplifier_pedal_init>:

// AMPLIFIER

void amplifier_pedal_init(pedal_config_t *conf) {
 8001794:	b490      	push	{r4, r7}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.5F, 0.1F, 10.F, 0.1F};
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <amplifier_pedal_init+0x34>)
 80017a0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80017a4:	4613      	mov	r3, r2
 80017a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <amplifier_pedal_init+0x38>)
 80017b0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80017b4:	4613      	mov	r3, r2
 80017b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc90      	pop	{r4, r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	0800c110 	.word	0x0800c110
 80017cc:	0800c050 	.word	0x0800c050

080017d0 <amplifier_process>:

float amplifier_process(float in, pedal_config_t *conf) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017da:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80017e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	edc7 7a03 	vstr	s15, [r7, #12]
    out = hard_clip(out, conf->float_params[THRESHOLD_HIGH].value);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80017f4:	eef0 0a67 	vmov.f32	s1, s15
 80017f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80017fc:	f000 f9b4 	bl	8001b68 <hard_clip>
 8001800:	ed87 0a03 	vstr	s0, [r7, #12]
    return out;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	ee07 3a90 	vmov	s15, r3
}
 800180a:	eeb0 0a67 	vmov.f32	s0, s15
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <dyn_amplifier_pedal_init>:

// DYN_AMPLIFIER

void dyn_amplifier_pedal_init(pedal_config_t *conf) {
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    //conf->float_params[GAIN_INTENSITY] = (float_parameter_t){1000, 0.1, 10, 0.1};
    //conf->float_params[CLIP_THRESHOLD] = (float_parameter_t){32767, 0, 32767, 1};
    //conf->float_params[SOFT_THRESHOLD] = (float_parameter_t){28000, 0, 32767, 1};
    //conf->float_params[BALANCE] = (float_parameter_t){0.5, 0, 1, 0.1};
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <dyn_amplifier_process>:

float dyn_amplifier_process(float in, pedal_config_t *conf) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001832:	6038      	str	r0, [r7, #0]
    //    else if (max < conf->float_params[SOFT_THRESHOLD].value) dyn += 0.01;
    //    max = 0;
    //}
    //out = hard_clip(out, conf->float_params[CLIP_THRESHOLD].value);
    //return out;
    return in;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	ee07 3a90 	vmov	s15, r3
}
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <low_pass_filter_pedal_init>:

// LPF

void low_pass_filter_pedal_init(pedal_config_t *conf) {
 8001848:	b490      	push	{r4, r7}
 800184a:	b092      	sub	sp, #72	; 0x48
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    conf->float_params[INTENSITY] = (float_parameter_t){0.9F, 0.0F, 1.0F, 0.01F};
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a11      	ldr	r2, [pc, #68]	; (8001898 <low_pass_filter_pedal_init+0x50>)
 8001854:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001858:	4613      	mov	r3, r2
 800185a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800185c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <low_pass_filter_pedal_init+0x54>)
 8001864:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001868:	4613      	mov	r3, r2
 800186a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <low_pass_filter_pedal_init+0x58>)
 8001874:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001878:	4613      	mov	r3, r2
 800187a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800187c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[PAST] = (float_parameter_t){0.F, 0.F, 0.F, 0.F};
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	33b0      	adds	r3, #176	; 0xb0
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
}
 800188e:	bf00      	nop
 8001890:	3748      	adds	r7, #72	; 0x48
 8001892:	46bd      	mov	sp, r7
 8001894:	bc90      	pop	{r4, r7}
 8001896:	4770      	bx	lr
 8001898:	0800c120 	.word	0x0800c120
 800189c:	0800c070 	.word	0x0800c070
 80018a0:	0800c080 	.word	0x0800c080

080018a4 <low_pass_filter_process>:

float low_pass_filter_process(float in, pedal_config_t *conf) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80018ae:	6038      	str	r0, [r7, #0]
    float alpha = conf->float_params[INTENSITY].value;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	60fb      	str	r3, [r7, #12]
    float out = conf->float_params[PAST].value * alpha + (1.F - alpha) * in;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80018bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	edc7 7a02 	vstr	s15, [r7, #8]
    conf->float_params[PAST].value = out;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80018f4:	eef0 1a47 	vmov.f32	s3, s14
 80018f8:	eeb0 1a67 	vmov.f32	s2, s15
 80018fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001900:	ed97 0a02 	vldr	s0, [r7, #8]
 8001904:	f000 f910 	bl	8001b28 <mix>
 8001908:	ed87 0a02 	vstr	s0, [r7, #8]
    return out;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	ee07 3a90 	vmov	s15, r3
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <fuzz_pedal_init>:

// FUZZ

void fuzz_pedal_init(pedal_config_t *conf) {
 800191c:	b490      	push	{r4, r7}
 800191e:	b09e      	sub	sp, #120	; 0x78
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    conf->int_params[COUNTER] = (int_parameter_t){0, 1, 0, 0};
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
    conf->float_params[INTENSITY] = (float_parameter_t){4.F, 1.F, 10.F, 0.5F};
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <fuzz_pedal_init+0x8c>)
 8001940:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001944:	4613      	mov	r3, r2
 8001946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[THRESHOLD_HIGH] = (float_parameter_t){32767.F, 0.F, 32767.F, 1.F};
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <fuzz_pedal_init+0x90>)
 8001950:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001954:	4613      	mov	r3, r2
 8001956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[HEIGHT] = (float_parameter_t){2048.F, 0.F, 8192.F, 32.F};
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <fuzz_pedal_init+0x94>)
 8001960:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8001964:	4613      	mov	r3, r2
 8001966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[SPEED] = (float_parameter_t){1.F, 0.1F, 10.F, 0.1F};
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <fuzz_pedal_init+0x98>)
 8001970:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001974:	4613      	mov	r3, r2
 8001976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_1] = (float_parameter_t){1.F, 0.F, 1.F, 0.1F};
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <fuzz_pedal_init+0x9c>)
 8001980:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001984:	4613      	mov	r3, r2
 8001986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conf->float_params[BALANCE_2] = (float_parameter_t){0.F, 0.F, 1.F, 0.1F};
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <fuzz_pedal_init+0xa0>)
 8001990:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001994:	4613      	mov	r3, r2
 8001996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800199c:	bf00      	nop
 800199e:	3778      	adds	r7, #120	; 0x78
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc90      	pop	{r4, r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	0800c040 	.word	0x0800c040
 80019ac:	0800c050 	.word	0x0800c050
 80019b0:	0800c130 	.word	0x0800c130
 80019b4:	0800c140 	.word	0x0800c140
 80019b8:	0800c070 	.word	0x0800c070
 80019bc:	0800c080 	.word	0x0800c080

080019c0 <fuzz_process>:

float fuzz_process(float in, pedal_config_t *conf) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80019ca:	6038      	str	r0, [r7, #0]
    float out = in * conf->float_params[INTENSITY].value;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80019d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019da:	edc7 7a07 	vstr	s15, [r7, #28]
    float threshold_high = conf->float_params[THRESHOLD_HIGH].value;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	61bb      	str	r3, [r7, #24]
    float height = conf->float_params[HEIGHT].value;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ea:	617b      	str	r3, [r7, #20]
    float speed = conf->float_params[SPEED].value;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80019f2:	613b      	str	r3, [r7, #16]
    float tone = 440.0F;
 80019f4:	4b3e      	ldr	r3, [pc, #248]	; (8001af0 <fuzz_process+0x130>)
 80019f6:	60fb      	str	r3, [r7, #12]

    out = hard_clip(out, threshold_high);
 80019f8:	edd7 0a06 	vldr	s1, [r7, #24]
 80019fc:	ed97 0a07 	vldr	s0, [r7, #28]
 8001a00:	f000 f8b2 	bl	8001b68 <hard_clip>
 8001a04:	ed87 0a07 	vstr	s0, [r7, #28]
    if (out == threshold_high) {
 8001a08:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a10:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d11e      	bne.n	8001a58 <fuzz_process+0x98>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) - 1) * height;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	4619      	mov	r1, r3
 8001a30:	2073      	movs	r0, #115	; 0x73
 8001a32:	f000 f945 	bl	8001cc0 <wave_gen>
 8001a36:	eef0 7a40 	vmov.f32	s15, s0
 8001a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a3e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a42:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	edc7 7a07 	vstr	s15, [r7, #28]
 8001a56:	e02c      	b.n	8001ab2 <fuzz_process+0xf2>
    } else if (out == - threshold_high - 1.F) {
 8001a58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5c:	eef1 7a67 	vneg.f32	s15, s15
 8001a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a68:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a6c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	d11d      	bne.n	8001ab2 <fuzz_process+0xf2>
        out += (wave_gen('s', conf->int_params[COUNTER].value, tone * speed) + 1) * height;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	2073      	movs	r0, #115	; 0x73
 8001a8e:	f000 f917 	bl	8001cc0 <wave_gen>
 8001a92:	eef0 7a40 	vmov.f32	s15, s0
 8001a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    conf->int_params[COUNTER].value++;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	611a      	str	r2, [r3, #16]
    out = mix(out, in, conf->float_params[BALANCE_1].value, conf->float_params[BALANCE_2].value);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8001ac8:	eef0 1a47 	vmov.f32	s3, s14
 8001acc:	eeb0 1a67 	vmov.f32	s2, s15
 8001ad0:	edd7 0a01 	vldr	s1, [r7, #4]
 8001ad4:	ed97 0a07 	vldr	s0, [r7, #28]
 8001ad8:	f000 f826 	bl	8001b28 <mix>
 8001adc:	ed87 0a07 	vstr	s0, [r7, #28]
    return out;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	ee07 3a90 	vmov	s15, r3
}
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	43dc0000 	.word	0x43dc0000

08001af4 <bypass_pedal_init>:

// BYPASS

void bypass_pedal_init(pedal_config_t *conf) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    return;
 8001afc:	bf00      	nop
}
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <bypass_process>:

float bypass_process(float in, pedal_config_t *conf) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b12:	6038      	str	r0, [r7, #0]
    return in;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	ee07 3a90 	vmov	s15, r3
}
 8001b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <mix>:


float mix(float in_1, float in_2, float balance_1, float balance_2) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b32:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b36:	ed87 1a01 	vstr	s2, [r7, #4]
 8001b3a:	edc7 1a00 	vstr	s3, [r7]
    return in_1 * balance_1 + in_2 * balance_2;
 8001b3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b4a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b4e:	edd7 7a00 	vldr	s15, [r7]
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <hard_clip>:

float hard_clip(float in, float clip_threshold) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b72:	edc7 0a00 	vstr	s1, [r7]
    if (in > clip_threshold) {
 8001b76:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b7a:	edd7 7a00 	vldr	s15, [r7]
 8001b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	dd02      	ble.n	8001b8e <hard_clip+0x26>
        return clip_threshold;
 8001b88:	edd7 7a00 	vldr	s15, [r7]
 8001b8c:	e015      	b.n	8001bba <hard_clip+0x52>
    } else if (in < -clip_threshold) {
 8001b8e:	edd7 7a00 	vldr	s15, [r7]
 8001b92:	eef1 7a67 	vneg.f32	s15, s15
 8001b96:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d508      	bpl.n	8001bb6 <hard_clip+0x4e>
        return -clip_threshold - 1;
 8001ba4:	edd7 7a00 	vldr	s15, [r7]
 8001ba8:	eef1 7a67 	vneg.f32	s15, s15
 8001bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bb4:	e001      	b.n	8001bba <hard_clip+0x52>
    }
    return in;
 8001bb6:	edd7 7a01 	vldr	s15, [r7, #4]
}
 8001bba:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <soft_clip>:

float soft_clip(float in, float soft_threshold, float softener) {
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bd2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001bd6:	ed87 1a01 	vstr	s2, [r7, #4]
    float out;
    if (in > soft_threshold) {
 8001bda:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	dd10      	ble.n	8001c0e <soft_clip+0x46>
        out = soft_threshold + (in - soft_threshold) / softener;
 8001bec:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c00:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c08:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c0c:	e01d      	b.n	8001c4a <soft_clip+0x82>
    } else if (in < -soft_threshold) {
 8001c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c12:	eef1 7a67 	vneg.f32	s15, s15
 8001c16:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	d510      	bpl.n	8001c46 <soft_clip+0x7e>
        out = -soft_threshold + (in + soft_threshold) / softener;
 8001c24:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c28:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c2c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c40:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c44:	e001      	b.n	8001c4a <soft_clip+0x82>
    } else {
        out = in;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	617b      	str	r3, [r7, #20]
    }
    return out;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	ee07 3a90 	vmov	s15, r3
}
 8001c50:	eeb0 0a67 	vmov.f32	s0, s15
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <square_root>:

float square_root(float in) {
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	ed87 0a01 	vstr	s0, [r7, #4]
    float out;
    out = in * 0.5F;
 8001c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c74:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	72fb      	strb	r3, [r7, #11]
 8001c7c:	e012      	b.n	8001ca4 <square_root+0x46>
        out = 0.5F * (out + (in / out));
 8001c7e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9a:	edc7 7a03 	vstr	s15, [r7, #12]
    for (u_int8_t i = 0; i < 8; i++) {
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	72fb      	strb	r3, [r7, #11]
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	2b07      	cmp	r3, #7
 8001ca8:	d9e9      	bls.n	8001c7e <square_root+0x20>
    }
    return out;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	ee07 3a90 	vmov	s15, r3
}
 8001cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <wave_gen>:

float wave_gen(char t, u_int32_t i, float tone) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cce:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001cd2:	6019      	str	r1, [r3, #0]
 8001cd4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cd8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001cdc:	ed83 0a00 	vstr	s0, [r3]
 8001ce0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ce4:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8001ce8:	701a      	strb	r2, [r3, #0]

    float sin_table[128] = { 0.000000F, 0.024541F, 0.049068F, 0.073565F, 0.098017F, 0.122411F, 0.146730F, 0.170962F, 0.195090F, 0.219101F, 0.242980F, 0.266713F, 0.290284F, 0.313681F, 0.336890F, 0.359895F, 0.382683F, 0.405241F, 0.427555F, 0.449611F, 0.471396F, 0.492898F, 0.514102F, 0.534997F, 0.555570F, 0.575808F, 0.595699F, 0.615231F, 0.634393F, 0.653172F, 0.671559F, 0.689540F, 0.707106F, 0.724247F, 0.740951F, 0.757208F, 0.773010F, 0.788346F, 0.803207F, 0.817584F, 0.831469F, 0.844853F, 0.857728F, 0.870087F, 0.881921F, 0.893224F, 0.903989F, 0.914209F, 0.923879F, 0.932992F, 0.941544F, 0.949528F, 0.956940F, 0.963776F, 0.970031F, 0.975702F, 0.980785F, 0.985277F, 0.989176F, 0.992479F, 0.995185F, 0.997290F, 0.998795F, 0.999699F, 1.000000F, 0.999699F, 0.998796F, 0.997291F, 0.995185F, 0.992480F, 0.989177F, 0.985278F, 0.980786F, 0.975702F, 0.970032F, 0.963776F, 0.956941F, 0.949529F, 0.941545F, 0.932993F, 0.923880F, 0.914210F, 0.903990F, 0.893225F, 0.881922F, 0.870088F, 0.857729F, 0.844855F, 0.831471F, 0.817586F, 0.803209F, 0.788348F, 0.773012F, 0.757210F, 0.740952F, 0.724248F, 0.707108F, 0.689542F, 0.671560F, 0.653174F, 0.634395F, 0.615233F, 0.595701F, 0.575810F, 0.555572F, 0.534999F, 0.514105F, 0.492900F, 0.471399F, 0.449613F, 0.427557F, 0.405243F, 0.382685F, 0.359897F, 0.336892F, 0.313684F, 0.290287F, 0.266715F, 0.242982F, 0.219104F, 0.195093F, 0.170964F, 0.146733F, 0.122413F, 0.098019F, 0.073567F, 0.049070F, 0.024544F };
 8001cea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cee:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001cf2:	4a33      	ldr	r2, [pc, #204]	; (8001dc0 <wave_gen+0x100>)
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f009 fd1d 	bl	800b73c <memcpy>
    float period_f = 44180.F / tone;
 8001d02:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d06:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d0a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001dc4 <wave_gen+0x104>
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d16:	edc7 7a87 	vstr	s15, [r7, #540]	; 0x21c
    u_int32_t period_i = period_f;
 8001d1a:	edd7 7a87 	vldr	s15, [r7, #540]	; 0x21c
 8001d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d22:	ee17 3a90 	vmov	r3, s15
 8001d26:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    u_int32_t table_index = (i * 256 / period_i) % 256;
 8001d2a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d2e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	021a      	lsls	r2, r3, #8
 8001d36:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    if (t == 's') {
 8001d44:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d48:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b73      	cmp	r3, #115	; 0x73
 8001d50:	d11c      	bne.n	8001d8c <wave_gen+0xcc>
        if (table_index <= 127) {
 8001d52:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d56:	2b7f      	cmp	r3, #127	; 0x7f
 8001d58:	d80a      	bhi.n	8001d70 <wave_gen+0xb0>
            return sin_table[table_index];
 8001d5a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d5e:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 8001d62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	e020      	b.n	8001db2 <wave_gen+0xf2>
        } else {
            return -sin_table[table_index - 128];
 8001d70:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d74:	3b80      	subs	r3, #128	; 0x80
 8001d76:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001d7a:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	eef1 7a67 	vneg.f32	s15, s15
 8001d8a:	e012      	b.n	8001db2 <wave_gen+0xf2>
        }
    } else if (t == 'q') {
 8001d8c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d90:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b71      	cmp	r3, #113	; 0x71
 8001d98:	d109      	bne.n	8001dae <wave_gen+0xee>
        if (table_index <= 127) {
 8001d9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001da0:	d802      	bhi.n	8001da8 <wave_gen+0xe8>
            return -1.F;
 8001da2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001da6:	e004      	b.n	8001db2 <wave_gen+0xf2>
        } else {
            return 1.F;
 8001da8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001dac:	e001      	b.n	8001db2 <wave_gen+0xf2>
        }
    } else {
        return 0;
 8001dae:	eddf 7a06 	vldr	s15, [pc, #24]	; 8001dc8 <wave_gen+0x108>
    }
}
 8001db2:	eeb0 0a67 	vmov.f32	s0, s15
 8001db6:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800c150 	.word	0x0800c150
 8001dc4:	472c9400 	.word	0x472c9400
 8001dc8:	00000000 	.word	0x00000000

08001dcc <pedalboard_append>:



// PEDALBOARD

void pedalboard_append(pedalboard_t *p_pb, enum pedal_types type) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
    u_int8_t i = p_pb->active_pedals;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	73fb      	strb	r3, [r7, #15]

    if (p_pb->active_pedals < MAX_PEDALS_COUNT) {
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b07      	cmp	r3, #7
 8001de4:	f200 80dd 	bhi.w	8001fa2 <pedalboard_append+0x1d6>
        u_int8_t i = p_pb->active_pedals;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	73bb      	strb	r3, [r7, #14]
        p_pb->pedals[i].type = type;
 8001dee:	7bbb      	ldrb	r3, [r7, #14]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	21c8      	movs	r1, #200	; 0xc8
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	33c4      	adds	r3, #196	; 0xc4
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	701a      	strb	r2, [r3, #0]

        if (type == AMPLIFIER)
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d113      	bne.n	8001e2e <pedalboard_append+0x62>
        {
            amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	22c8      	movs	r2, #200	; 0xc8
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	3304      	adds	r3, #4
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fcbd 	bl	8001794 <amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = amplifier_process;
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	21c8      	movs	r1, #200	; 0xc8
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	33c8      	adds	r3, #200	; 0xc8
 8001e28:	4a60      	ldr	r2, [pc, #384]	; (8001fac <pedalboard_append+0x1e0>)
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e0b3      	b.n	8001f96 <pedalboard_append+0x1ca>
        }
        else if (type == BITCRUSHER_RS)
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d113      	bne.n	8001e5c <pedalboard_append+0x90>
        {
            bitcrusher_rs_pedal_init(&(p_pb->pedals[i].config));
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	22c8      	movs	r2, #200	; 0xc8
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fb3c 	bl	80014c0 <bitcrusher_rs_pedal_init>
            p_pb->pedals[i].pedal_process = bitcrusher_rs_process;
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	21c8      	movs	r1, #200	; 0xc8
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	33c8      	adds	r3, #200	; 0xc8
 8001e56:	4a56      	ldr	r2, [pc, #344]	; (8001fb0 <pedalboard_append+0x1e4>)
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e09c      	b.n	8001f96 <pedalboard_append+0x1ca>
        }
        else if (type == DYN_AMPLIFIER)
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d113      	bne.n	8001e8a <pedalboard_append+0xbe>
        {
            dyn_amplifier_pedal_init(&(p_pb->pedals[i].config));
 8001e62:	7bbb      	ldrb	r3, [r7, #14]
 8001e64:	22c8      	movs	r2, #200	; 0xc8
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fccf 	bl	8001814 <dyn_amplifier_pedal_init>
            p_pb->pedals[i].pedal_process = dyn_amplifier_process;
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	21c8      	movs	r1, #200	; 0xc8
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	33c8      	adds	r3, #200	; 0xc8
 8001e84:	4a4b      	ldr	r2, [pc, #300]	; (8001fb4 <pedalboard_append+0x1e8>)
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e085      	b.n	8001f96 <pedalboard_append+0x1ca>
        }
        else if (type == FUZZ)
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d113      	bne.n	8001eb8 <pedalboard_append+0xec>
        {
            fuzz_pedal_init(&(p_pb->pedals[i].config));
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	22c8      	movs	r2, #200	; 0xc8
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fd3c 	bl	800191c <fuzz_pedal_init>
            p_pb->pedals[i].pedal_process = fuzz_process;
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	21c8      	movs	r1, #200	; 0xc8
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	33c8      	adds	r3, #200	; 0xc8
 8001eb2:	4a41      	ldr	r2, [pc, #260]	; (8001fb8 <pedalboard_append+0x1ec>)
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e06e      	b.n	8001f96 <pedalboard_append+0x1ca>
        }
        else if (type == LPF)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d113      	bne.n	8001ee6 <pedalboard_append+0x11a>
        {
            low_pass_filter_pedal_init(&(p_pb->pedals[i].config));
 8001ebe:	7bbb      	ldrb	r3, [r7, #14]
 8001ec0:	22c8      	movs	r2, #200	; 0xc8
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fcbb 	bl	8001848 <low_pass_filter_pedal_init>
            p_pb->pedals[i].pedal_process = low_pass_filter_process;
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	21c8      	movs	r1, #200	; 0xc8
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	33c8      	adds	r3, #200	; 0xc8
 8001ee0:	4a36      	ldr	r2, [pc, #216]	; (8001fbc <pedalboard_append+0x1f0>)
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e057      	b.n	8001f96 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE)
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	2b06      	cmp	r3, #6
 8001eea:	d113      	bne.n	8001f14 <pedalboard_append+0x148>
        {
            overdrive_pedal_init(&(p_pb->pedals[i].config));
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	22c8      	movs	r2, #200	; 0xc8
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fa58 	bl	80013b0 <overdrive_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_process;
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	21c8      	movs	r1, #200	; 0xc8
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	33c8      	adds	r3, #200	; 0xc8
 8001f0e:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <pedalboard_append+0x1f4>)
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e040      	b.n	8001f96 <pedalboard_append+0x1ca>
        }
        else if (type == OVERDRIVE_SQRT)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b07      	cmp	r3, #7
 8001f18:	d113      	bne.n	8001f42 <pedalboard_append+0x176>
        {
            overdrive_sqrt_pedal_init(&(p_pb->pedals[i].config));
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	22c8      	movs	r2, #200	; 0xc8
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	3304      	adds	r3, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fbb1 	bl	8001690 <overdrive_sqrt_pedal_init>
            p_pb->pedals[i].pedal_process = overdrive_sqrt_process;
 8001f2e:	7bbb      	ldrb	r3, [r7, #14]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	21c8      	movs	r1, #200	; 0xc8
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	33c8      	adds	r3, #200	; 0xc8
 8001f3c:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <pedalboard_append+0x1f8>)
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e029      	b.n	8001f96 <pedalboard_append+0x1ca>
        }
        else if (type == TREMOLO)
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d113      	bne.n	8001f70 <pedalboard_append+0x1a4>
        {
            tremolo_pedal_init(&(p_pb->pedals[i].config));
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	22c8      	movs	r2, #200	; 0xc8
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fb24 	bl	80015a4 <tremolo_pedal_init>
            p_pb->pedals[i].pedal_process = tremolo_process;
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	21c8      	movs	r1, #200	; 0xc8
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	33c8      	adds	r3, #200	; 0xc8
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <pedalboard_append+0x1fc>)
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e012      	b.n	8001f96 <pedalboard_append+0x1ca>
        }
        else
        {
            // BYPASS AS DEFAULT
            bypass_pedal_init(&(p_pb->pedals[i].config));
 8001f70:	7bbb      	ldrb	r3, [r7, #14]
 8001f72:	22c8      	movs	r2, #200	; 0xc8
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fdb8 	bl	8001af4 <bypass_pedal_init>
            p_pb->pedals[i].pedal_process = bypass_process;
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	21c8      	movs	r1, #200	; 0xc8
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	33c8      	adds	r3, #200	; 0xc8
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <pedalboard_append+0x200>)
 8001f94:	601a      	str	r2, [r3, #0]
        }
        p_pb->active_pedals++;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	701a      	strb	r2, [r3, #0]
    }
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	080017d1 	.word	0x080017d1
 8001fb0:	0800150d 	.word	0x0800150d
 8001fb4:	08001829 	.word	0x08001829
 8001fb8:	080019c1 	.word	0x080019c1
 8001fbc:	080018a5 	.word	0x080018a5
 8001fc0:	08001439 	.word	0x08001439
 8001fc4:	080016f5 	.word	0x080016f5
 8001fc8:	0800160d 	.word	0x0800160d
 8001fcc:	08001b09 	.word	0x08001b09

08001fd0 <RE_Init>:
 *      Author: asky
 */

#include "rotary_encoder.h"

void RE_Init(RE_HandleTypeDef *hre, GPIO_TypeDef *portA, GPIO_TypeDef *portB, uint16_t pinA, uint16_t pinB) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	807b      	strh	r3, [r7, #2]
	hre->lasttick = 0;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
	hre->lastA = 0;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	809a      	strh	r2, [r3, #4]
	hre->lastB = 0;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	80da      	strh	r2, [r3, #6]
	hre->currentA = 0;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	811a      	strh	r2, [r3, #8]
	hre->currentB = 0;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	815a      	strh	r2, [r3, #10]
	hre->counter = 0;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	831a      	strh	r2, [r3, #24]
	hre->portA = portA;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	60da      	str	r2, [r3, #12]
	hre->portB = portB;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	611a      	str	r2, [r3, #16]
	hre->pinA = pinA;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	887a      	ldrh	r2, [r7, #2]
 8002012:	829a      	strh	r2, [r3, #20]
	hre->pinB = pinB;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8b3a      	ldrh	r2, [r7, #24]
 8002018:	82da      	strh	r2, [r3, #22]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <RE_Process>:

uint8_t RE_Process(RE_HandleTypeDef *hre) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() != hre->lasttick) {
 8002030:	f000 fbfa 	bl	8002828 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	f000 80b7 	beq.w	80021ae <RE_Process+0x186>
		hre->lasttick = HAL_GetTick();
 8002040:	f000 fbf2 	bl	8002828 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
		hre->lastA = hre->currentA;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	891a      	ldrh	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	809a      	strh	r2, [r3, #4]
		hre->lastB = hre->currentB;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	895a      	ldrh	r2, [r3, #10]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	80da      	strh	r2, [r3, #6]

		uint16_t temp;
		uint16_t alpha = 75; //%
 800205a:	234b      	movs	r3, #75	; 0x4b
 800205c:	81fb      	strh	r3, [r7, #14]
		uint16_t ceil = 10000, thr = 5000;
 800205e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002062:	81bb      	strh	r3, [r7, #12]
 8002064:	f241 3388 	movw	r3, #5000	; 0x1388
 8002068:	817b      	strh	r3, [r7, #10]

		temp = HAL_GPIO_ReadPin(hre->portA, hre->pinA) == GPIO_PIN_SET ? ceil : 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8a9b      	ldrh	r3, [r3, #20]
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f001 fa25 	bl	80034c4 <HAL_GPIO_ReadPin>
 800207a:	4603      	mov	r3, r0
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <RE_Process+0x5c>
 8002080:	89bb      	ldrh	r3, [r7, #12]
 8002082:	e000      	b.n	8002086 <RE_Process+0x5e>
 8002084:	2300      	movs	r3, #0
 8002086:	813b      	strh	r3, [r7, #8]
		hre->currentA = (hre->lastA * alpha / 100) + (temp * (100 - alpha) / 100);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	889b      	ldrh	r3, [r3, #4]
 800208c:	461a      	mov	r2, r3
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <RE_Process+0x190>)
 8002096:	fb82 1203 	smull	r1, r2, r2, r3
 800209a:	1152      	asrs	r2, r2, #5
 800209c:	17db      	asrs	r3, r3, #31
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	893b      	ldrh	r3, [r7, #8]
 80020a4:	89f9      	ldrh	r1, [r7, #14]
 80020a6:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4942      	ldr	r1, [pc, #264]	; (80021b8 <RE_Process+0x190>)
 80020b0:	fb81 0103 	smull	r0, r1, r1, r3
 80020b4:	1149      	asrs	r1, r1, #5
 80020b6:	17db      	asrs	r3, r3, #31
 80020b8:	1acb      	subs	r3, r1, r3
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4413      	add	r3, r2
 80020be:	b29a      	uxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	811a      	strh	r2, [r3, #8]

		temp = HAL_GPIO_ReadPin(hre->portB, hre->pinB) == GPIO_PIN_SET ? ceil : 0;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8adb      	ldrh	r3, [r3, #22]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f001 f9f8 	bl	80034c4 <HAL_GPIO_ReadPin>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <RE_Process+0xb6>
 80020da:	89bb      	ldrh	r3, [r7, #12]
 80020dc:	e000      	b.n	80020e0 <RE_Process+0xb8>
 80020de:	2300      	movs	r3, #0
 80020e0:	813b      	strh	r3, [r7, #8]
		hre->currentB = (hre->lastB * alpha / 100) + (temp * (100 - alpha) / 100);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	88db      	ldrh	r3, [r3, #6]
 80020e6:	461a      	mov	r2, r3
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	4a32      	ldr	r2, [pc, #200]	; (80021b8 <RE_Process+0x190>)
 80020f0:	fb82 1203 	smull	r1, r2, r2, r3
 80020f4:	1152      	asrs	r2, r2, #5
 80020f6:	17db      	asrs	r3, r3, #31
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	893b      	ldrh	r3, [r7, #8]
 80020fe:	89f9      	ldrh	r1, [r7, #14]
 8002100:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	492b      	ldr	r1, [pc, #172]	; (80021b8 <RE_Process+0x190>)
 800210a:	fb81 0103 	smull	r0, r1, r1, r3
 800210e:	1149      	asrs	r1, r1, #5
 8002110:	17db      	asrs	r3, r3, #31
 8002112:	1acb      	subs	r3, r1, r3
 8002114:	b29b      	uxth	r3, r3
 8002116:	4413      	add	r3, r2
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	815a      	strh	r2, [r3, #10]

		if (hre->lastA < thr && hre->currentA >= thr) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	889b      	ldrh	r3, [r3, #4]
 8002122:	897a      	ldrh	r2, [r7, #10]
 8002124:	429a      	cmp	r2, r3
 8002126:	d91e      	bls.n	8002166 <RE_Process+0x13e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	891b      	ldrh	r3, [r3, #8]
 800212c:	897a      	ldrh	r2, [r7, #10]
 800212e:	429a      	cmp	r2, r3
 8002130:	d819      	bhi.n	8002166 <RE_Process+0x13e>

			if (hre->currentB > thr) {
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	895b      	ldrh	r3, [r3, #10]
 8002136:	897a      	ldrh	r2, [r7, #10]
 8002138:	429a      	cmp	r2, r3
 800213a:	d209      	bcs.n	8002150 <RE_Process+0x128>
				hre->counter--;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29b      	uxth	r3, r3
 8002148:	b21a      	sxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	831a      	strh	r2, [r3, #24]
 800214e:	e008      	b.n	8002162 <RE_Process+0x13a>
			} else {
				hre->counter++;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002156:	b29b      	uxth	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	b29b      	uxth	r3, r3
 800215c:	b21a      	sxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	831a      	strh	r2, [r3, #24]
			}
			return 1;
 8002162:	2301      	movs	r3, #1
 8002164:	e024      	b.n	80021b0 <RE_Process+0x188>

		} else if (hre->lastA > thr && hre->currentA <= thr) {
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	897a      	ldrh	r2, [r7, #10]
 800216c:	429a      	cmp	r2, r3
 800216e:	d21e      	bcs.n	80021ae <RE_Process+0x186>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	891b      	ldrh	r3, [r3, #8]
 8002174:	897a      	ldrh	r2, [r7, #10]
 8002176:	429a      	cmp	r2, r3
 8002178:	d319      	bcc.n	80021ae <RE_Process+0x186>

			if (hre->currentB > thr) {
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	895b      	ldrh	r3, [r3, #10]
 800217e:	897a      	ldrh	r2, [r7, #10]
 8002180:	429a      	cmp	r2, r3
 8002182:	d209      	bcs.n	8002198 <RE_Process+0x170>
				hre->counter++;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800218a:	b29b      	uxth	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	b29b      	uxth	r3, r3
 8002190:	b21a      	sxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	831a      	strh	r2, [r3, #24]
 8002196:	e008      	b.n	80021aa <RE_Process+0x182>
			} else {
				hre->counter--;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	831a      	strh	r2, [r3, #24]
			}
			return 1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <RE_Process+0x188>

		}
	}
	return 0;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	51eb851f 	.word	0x51eb851f

080021bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_MspInit+0x4c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_MspInit+0x4c>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_MspInit+0x4c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_MspInit+0x4c>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_I2C_MspInit+0x84>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d12c      	bne.n	8002288 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800224a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002250:	2312      	movs	r3, #18
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225c:	2304      	movs	r3, #4
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	480c      	ldr	r0, [pc, #48]	; (8002298 <HAL_I2C_MspInit+0x8c>)
 8002268:	f000 ff90 	bl	800318c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_I2C_MspInit+0x88>)
 8002276:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_I2C_MspInit+0x88>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40005400 	.word	0x40005400
 8002294:	40023800 	.word	0x40023800
 8002298:	40020400 	.word	0x40020400

0800229c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	; 0x38
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a93      	ldr	r2, [pc, #588]	; (8002508 <HAL_I2S_MspInit+0x26c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	f040 808d 	bne.w	80023da <HAL_I2S_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	4b91      	ldr	r3, [pc, #580]	; (800250c <HAL_I2S_MspInit+0x270>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a90      	ldr	r2, [pc, #576]	; (800250c <HAL_I2S_MspInit+0x270>)
 80022ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b8e      	ldr	r3, [pc, #568]	; (800250c <HAL_I2S_MspInit+0x270>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	623b      	str	r3, [r7, #32]
 80022da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	4b8a      	ldr	r3, [pc, #552]	; (800250c <HAL_I2S_MspInit+0x270>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a89      	ldr	r2, [pc, #548]	; (800250c <HAL_I2S_MspInit+0x270>)
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b87      	ldr	r3, [pc, #540]	; (800250c <HAL_I2S_MspInit+0x270>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	4b83      	ldr	r3, [pc, #524]	; (800250c <HAL_I2S_MspInit+0x270>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a82      	ldr	r2, [pc, #520]	; (800250c <HAL_I2S_MspInit+0x270>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	6313      	str	r3, [r2, #48]	; 0x30
 8002308:	4b80      	ldr	r3, [pc, #512]	; (800250c <HAL_I2S_MspInit+0x270>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002314:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002322:	2301      	movs	r3, #1
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002326:	2305      	movs	r3, #5
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232e:	4619      	mov	r1, r3
 8002330:	4877      	ldr	r0, [pc, #476]	; (8002510 <HAL_I2S_MspInit+0x274>)
 8002332:	f000 ff2b 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002336:	2340      	movs	r3, #64	; 0x40
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002342:	2301      	movs	r3, #1
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002346:	2305      	movs	r3, #5
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234e:	4619      	mov	r1, r3
 8002350:	4870      	ldr	r0, [pc, #448]	; (8002514 <HAL_I2S_MspInit+0x278>)
 8002352:	f000 ff1b 	bl	800318c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002356:	4b70      	ldr	r3, [pc, #448]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 8002358:	4a70      	ldr	r2, [pc, #448]	; (800251c <HAL_I2S_MspInit+0x280>)
 800235a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800235c:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002362:	4b6d      	ldr	r3, [pc, #436]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002368:	4b6b      	ldr	r3, [pc, #428]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800236e:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 8002370:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002374:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002376:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 8002378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800237c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800237e:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 8002380:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002384:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002386:	4b64      	ldr	r3, [pc, #400]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 8002388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800238c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800238e:	4b62      	ldr	r3, [pc, #392]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002394:	4b60      	ldr	r3, [pc, #384]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 8002396:	2204      	movs	r2, #4
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800239a:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 800239c:	2200      	movs	r2, #0
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80023a0:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80023a6:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80023ac:	485a      	ldr	r0, [pc, #360]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 80023ae:	f000 fb7d 	bl	8002aac <HAL_DMA_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 80023b8:	f7fe fe90 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a56      	ldr	r2, [pc, #344]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80023c2:	4a55      	ldr	r2, [pc, #340]	; (8002518 <HAL_I2S_MspInit+0x27c>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	2024      	movs	r0, #36	; 0x24
 80023ce:	f000 fb36 	bl	8002a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023d2:	2024      	movs	r0, #36	; 0x24
 80023d4:	f000 fb4f 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80023d8:	e091      	b.n	80024fe <HAL_I2S_MspInit+0x262>
  else if(hi2s->Instance==SPI3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a50      	ldr	r2, [pc, #320]	; (8002520 <HAL_I2S_MspInit+0x284>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	f040 808c 	bne.w	80024fe <HAL_I2S_MspInit+0x262>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	4b48      	ldr	r3, [pc, #288]	; (800250c <HAL_I2S_MspInit+0x270>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a47      	ldr	r2, [pc, #284]	; (800250c <HAL_I2S_MspInit+0x270>)
 80023f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b45      	ldr	r3, [pc, #276]	; (800250c <HAL_I2S_MspInit+0x270>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_I2S_MspInit+0x270>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a40      	ldr	r2, [pc, #256]	; (800250c <HAL_I2S_MspInit+0x270>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b3e      	ldr	r3, [pc, #248]	; (800250c <HAL_I2S_MspInit+0x270>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_I2S_MspInit+0x270>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a39      	ldr	r2, [pc, #228]	; (800250c <HAL_I2S_MspInit+0x270>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_I2S_MspInit+0x270>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800243a:	2310      	movs	r3, #16
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002446:	2301      	movs	r3, #1
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800244a:	2306      	movs	r3, #6
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002452:	4619      	mov	r1, r3
 8002454:	4833      	ldr	r0, [pc, #204]	; (8002524 <HAL_I2S_MspInit+0x288>)
 8002456:	f000 fe99 	bl	800318c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800245a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002468:	2301      	movs	r3, #1
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800246c:	2306      	movs	r3, #6
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	4619      	mov	r1, r3
 8002476:	4827      	ldr	r0, [pc, #156]	; (8002514 <HAL_I2S_MspInit+0x278>)
 8002478:	f000 fe88 	bl	800318c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <HAL_I2S_MspInit+0x290>)
 8002480:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 8002496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800249a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 800249e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024aa:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024bc:	2204      	movs	r2, #4
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80024d2:	4815      	ldr	r0, [pc, #84]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024d4:	f000 faea 	bl	8002aac <HAL_DMA_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2S_MspInit+0x246>
      Error_Handler();
 80024de:	f7fe fdfd 	bl	80010dc <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a10      	ldr	r2, [pc, #64]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
 80024e8:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_I2S_MspInit+0x28c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2033      	movs	r0, #51	; 0x33
 80024f4:	f000 faa3 	bl	8002a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80024f8:	2033      	movs	r0, #51	; 0x33
 80024fa:	f000 fabc 	bl	8002a76 <HAL_NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3738      	adds	r7, #56	; 0x38
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40003800 	.word	0x40003800
 800250c:	40023800 	.word	0x40023800
 8002510:	40020400 	.word	0x40020400
 8002514:	40020800 	.word	0x40020800
 8002518:	2000084c 	.word	0x2000084c
 800251c:	40026058 	.word	0x40026058
 8002520:	40003c00 	.word	0x40003c00
 8002524:	40020000 	.word	0x40020000
 8002528:	200008ac 	.word	0x200008ac
 800252c:	40026088 	.word	0x40026088

08002530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_SPI_MspInit+0x84>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12b      	bne.n	80025aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 800255c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800258a:	23a0      	movs	r3, #160	; 0xa0
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259a:	2305      	movs	r3, #5
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_SPI_MspInit+0x8c>)
 80025a6:	f000 fdf1 	bl	800318c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40013000 	.word	0x40013000
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <NMI_Handler+0x4>

080025c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <HardFault_Handler+0x4>

080025cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <MemManage_Handler+0x4>

080025d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <UsageFault_Handler+0x4>

080025de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260c:	f000 f8f8 	bl	8002800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <DMA1_Stream3_IRQHandler+0x10>)
 800261a:	f000 fb4d 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000084c 	.word	0x2000084c

08002628 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <DMA1_Stream5_IRQHandler+0x10>)
 800262e:	f000 fb43 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200008ac 	.word	0x200008ac

0800263c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <SPI2_IRQHandler+0x10>)
 8002642:	f003 f8c9 	bl	80057d8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20001be4 	.word	0x20001be4

08002650 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <SPI3_IRQHandler+0x10>)
 8002656:	f003 f8bf 	bl	80057d8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20001c2c 	.word	0x20001c2c

08002664 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <OTG_FS_IRQHandler+0x10>)
 800266a:	f001 f9c7 	bl	80039fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20002734 	.word	0x20002734

08002678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <_sbrk+0x5c>)
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <_sbrk+0x60>)
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_sbrk+0x64>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <_sbrk+0x68>)
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d207      	bcs.n	80026b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a8:	f009 f80e 	bl	800b6c8 <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b6:	e009      	b.n	80026cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <_sbrk+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20020000 	.word	0x20020000
 80026d8:	00000400 	.word	0x00000400
 80026dc:	2000233c 	.word	0x2000233c
 80026e0:	20002a48 	.word	0x20002a48

080026e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <SystemInit+0x20>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <SystemInit+0x20>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800270e:	490e      	ldr	r1, [pc, #56]	; (8002748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002710:	4a0e      	ldr	r2, [pc, #56]	; (800274c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800271c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002724:	4c0b      	ldr	r4, [pc, #44]	; (8002754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002732:	f7ff ffd7 	bl	80026e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f008 ffcd 	bl	800b6d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800273a:	f7fe fa3d 	bl	8000bb8 <main>
  bx  lr    
 800273e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002748:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 800274c:	0800c420 	.word	0x0800c420
  ldr r2, =_sbss
 8002750:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8002754:	20002a48 	.word	0x20002a48

08002758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002758:	e7fe      	b.n	8002758 <ADC_IRQHandler>
	...

0800275c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_Init+0x40>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <HAL_Init+0x40>)
 8002766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_Init+0x40>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <HAL_Init+0x40>)
 8002772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_Init+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_Init+0x40>)
 800277e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002784:	2003      	movs	r0, #3
 8002786:	f000 f94f 	bl	8002a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278a:	200f      	movs	r0, #15
 800278c:	f000 f808 	bl	80027a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002790:	f7ff fd14 	bl	80021bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023c00 	.word	0x40023c00

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_InitTick+0x54>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_InitTick+0x58>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f967 	bl	8002a92 <HAL_SYSTICK_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00e      	b.n	80027ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d80a      	bhi.n	80027ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027dc:	f000 f92f 	bl	8002a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e0:	4a06      	ldr	r2, [pc, #24]	; (80027fc <HAL_InitTick+0x5c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	200002a4 	.word	0x200002a4
 80027f8:	200002ac 	.word	0x200002ac
 80027fc:	200002a8 	.word	0x200002a8

08002800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_IncTick+0x20>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x24>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_IncTick+0x24>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	200002ac 	.word	0x200002ac
 8002824:	20002340 	.word	0x20002340

08002828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return uwTick;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_GetTick+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20002340 	.word	0x20002340

08002840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff ffee 	bl	8002828 <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002858:	d005      	beq.n	8002866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_Delay+0x44>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002866:	bf00      	nop
 8002868:	f7ff ffde 	bl	8002828 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d8f7      	bhi.n	8002868 <HAL_Delay+0x28>
  {
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200002ac 	.word	0x200002ac

08002888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <__NVIC_SetPriorityGrouping+0x44>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a4:	4013      	ands	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ba:	4a04      	ldr	r2, [pc, #16]	; (80028cc <__NVIC_SetPriorityGrouping+0x44>)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	60d3      	str	r3, [r2, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <__NVIC_GetPriorityGrouping+0x18>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	f003 0307 	and.w	r3, r3, #7
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	db0b      	blt.n	8002916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	4907      	ldr	r1, [pc, #28]	; (8002924 <__NVIC_EnableIRQ+0x38>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	2001      	movs	r0, #1
 800290e:	fa00 f202 	lsl.w	r2, r0, r2
 8002912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	2b00      	cmp	r3, #0
 800293a:	db0a      	blt.n	8002952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	490c      	ldr	r1, [pc, #48]	; (8002974 <__NVIC_SetPriority+0x4c>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	0112      	lsls	r2, r2, #4
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	440b      	add	r3, r1
 800294c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002950:	e00a      	b.n	8002968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4908      	ldr	r1, [pc, #32]	; (8002978 <__NVIC_SetPriority+0x50>)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	3b04      	subs	r3, #4
 8002960:	0112      	lsls	r2, r2, #4
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	440b      	add	r3, r1
 8002966:	761a      	strb	r2, [r3, #24]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000e100 	.word	0xe000e100
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f1c3 0307 	rsb	r3, r3, #7
 8002996:	2b04      	cmp	r3, #4
 8002998:	bf28      	it	cs
 800299a:	2304      	movcs	r3, #4
 800299c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d902      	bls.n	80029ac <NVIC_EncodePriority+0x30>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3b03      	subs	r3, #3
 80029aa:	e000      	b.n	80029ae <NVIC_EncodePriority+0x32>
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	401a      	ands	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43d9      	mvns	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	4313      	orrs	r3, r2
         );
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3724      	adds	r7, #36	; 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f4:	d301      	bcc.n	80029fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00f      	b.n	8002a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <SysTick_Config+0x40>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a02:	210f      	movs	r1, #15
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a08:	f7ff ff8e 	bl	8002928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <SysTick_Config+0x40>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <SysTick_Config+0x40>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000e010 	.word	0xe000e010

08002a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ff29 	bl	8002888 <__NVIC_SetPriorityGrouping>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a50:	f7ff ff3e 	bl	80028d0 <__NVIC_GetPriorityGrouping>
 8002a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f7ff ff8e 	bl	800297c <NVIC_EncodePriority>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff5d 	bl	8002928 <__NVIC_SetPriority>
}
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff31 	bl	80028ec <__NVIC_EnableIRQ>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff ffa2 	bl	80029e4 <SysTick_Config>
 8002aa0:	4603      	mov	r3, r0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff feb6 	bl	8002828 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e099      	b.n	8002bfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae8:	e00f      	b.n	8002b0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aea:	f7ff fe9d 	bl	8002828 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d908      	bls.n	8002b0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e078      	b.n	8002bfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e8      	bne.n	8002aea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_DMA_Init+0x158>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d107      	bne.n	8002b74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 0307 	bic.w	r3, r3, #7
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d117      	bne.n	8002bce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00e      	beq.n	8002bce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fa6f 	bl	8003094 <DMA_CheckFifoParam>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2240      	movs	r2, #64	; 0x40
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e016      	b.n	8002bfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa26 	bl	8003028 <DMA_CalcBaseAndBitshift>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	223f      	movs	r2, #63	; 0x3f
 8002be6:	409a      	lsls	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	f010803f 	.word	0xf010803f

08002c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_DMA_Start_IT+0x26>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e040      	b.n	8002cb0 <HAL_DMA_Start_IT+0xa8>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d12f      	bne.n	8002ca2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f9b8 	bl	8002fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	223f      	movs	r2, #63	; 0x3f
 8002c62:	409a      	lsls	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0216 	orr.w	r2, r2, #22
 8002c76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0208 	orr.w	r2, r2, #8
 8002c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e005      	b.n	8002cae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
 8002cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cc4:	4b8e      	ldr	r3, [pc, #568]	; (8002f00 <HAL_DMA_IRQHandler+0x248>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a8e      	ldr	r2, [pc, #568]	; (8002f04 <HAL_DMA_IRQHandler+0x24c>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01a      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0204 	bic.w	r2, r2, #4
 8002d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	2208      	movs	r2, #8
 8002d12:	409a      	lsls	r2, r3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	2201      	movs	r2, #1
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d012      	beq.n	8002d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	2201      	movs	r2, #1
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	2204      	movs	r2, #4
 8002d60:	409a      	lsls	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d012      	beq.n	8002d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f043 0204 	orr.w	r2, r3, #4
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	2210      	movs	r2, #16
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d043      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d03c      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	2210      	movs	r2, #16
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d018      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d108      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d024      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
 8002de6:	e01f      	b.n	8002e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
 8002df8:	e016      	b.n	8002e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0208 	bic.w	r2, r2, #8
 8002e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 808f 	beq.w	8002f58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8087 	beq.w	8002f58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	2220      	movs	r2, #32
 8002e50:	409a      	lsls	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d136      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0216 	bic.w	r2, r2, #22
 8002e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_DMA_IRQHandler+0x1da>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0208 	bic.w	r2, r2, #8
 8002ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	223f      	movs	r2, #63	; 0x3f
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d07e      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
        }
        return;
 8002ece:	e079      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01d      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d031      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
 8002efc:	e02c      	b.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
 8002efe:	bf00      	nop
 8002f00:	200002a4 	.word	0x200002a4
 8002f04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d023      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e01e      	b.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10f      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0210 	bic.w	r2, r2, #16
 8002f36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d032      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d022      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2205      	movs	r2, #5
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d307      	bcc.n	8002fa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f2      	bne.n	8002f84 <HAL_DMA_IRQHandler+0x2cc>
 8002f9e:	e000      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
 8002fc2:	e000      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fc4:	bf00      	nop
    }
  }
}
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d108      	bne.n	800300c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800300a:	e007      	b.n	800301c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	3b10      	subs	r3, #16
 8003038:	4a14      	ldr	r2, [pc, #80]	; (800308c <DMA_CalcBaseAndBitshift+0x64>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003042:	4a13      	ldr	r2, [pc, #76]	; (8003090 <DMA_CalcBaseAndBitshift+0x68>)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d909      	bls.n	800306a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	1d1a      	adds	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	659a      	str	r2, [r3, #88]	; 0x58
 8003068:	e007      	b.n	800307a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	aaaaaaab 	.word	0xaaaaaaab
 8003090:	0800c3c0 	.word	0x0800c3c0

08003094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11f      	bne.n	80030ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d856      	bhi.n	8003162 <DMA_CheckFifoParam+0xce>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <DMA_CheckFifoParam+0x28>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030df 	.word	0x080030df
 80030c4:	080030cd 	.word	0x080030cd
 80030c8:	08003163 	.word	0x08003163
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d046      	beq.n	8003166 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030dc:	e043      	b.n	8003166 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e6:	d140      	bne.n	800316a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e03d      	b.n	800316a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f6:	d121      	bne.n	800313c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d837      	bhi.n	800316e <DMA_CheckFifoParam+0xda>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <DMA_CheckFifoParam+0x70>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003115 	.word	0x08003115
 8003108:	0800311b 	.word	0x0800311b
 800310c:	08003115 	.word	0x08003115
 8003110:	0800312d 	.word	0x0800312d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
      break;
 8003118:	e030      	b.n	800317c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d025      	beq.n	8003172 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312a:	e022      	b.n	8003172 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003134:	d11f      	bne.n	8003176 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800313a:	e01c      	b.n	8003176 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d903      	bls.n	800314a <DMA_CheckFifoParam+0xb6>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d003      	beq.n	8003150 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003148:	e018      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      break;
 800314e:	e015      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e00b      	b.n	800317a <DMA_CheckFifoParam+0xe6>
      break;
 8003162:	bf00      	nop
 8003164:	e00a      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 8003166:	bf00      	nop
 8003168:	e008      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800316a:	bf00      	nop
 800316c:	e006      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
 8003170:	e004      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;   
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
    }
  } 
  
  return status; 
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e16b      	b.n	8003480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 815a 	bne.w	800347a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d005      	beq.n	80031de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d130      	bne.n	8003240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2203      	movs	r2, #3
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 0201 	and.w	r2, r3, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b03      	cmp	r3, #3
 800324a:	d017      	beq.n	800327c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80b4 	beq.w	800347a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b60      	ldr	r3, [pc, #384]	; (8003498 <HAL_GPIO_Init+0x30c>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	4a5f      	ldr	r2, [pc, #380]	; (8003498 <HAL_GPIO_Init+0x30c>)
 800331c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003320:	6453      	str	r3, [r2, #68]	; 0x44
 8003322:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <HAL_GPIO_Init+0x30c>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800332e:	4a5b      	ldr	r2, [pc, #364]	; (800349c <HAL_GPIO_Init+0x310>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_GPIO_Init+0x314>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d02b      	beq.n	80033b2 <HAL_GPIO_Init+0x226>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a51      	ldr	r2, [pc, #324]	; (80034a4 <HAL_GPIO_Init+0x318>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d025      	beq.n	80033ae <HAL_GPIO_Init+0x222>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a50      	ldr	r2, [pc, #320]	; (80034a8 <HAL_GPIO_Init+0x31c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01f      	beq.n	80033aa <HAL_GPIO_Init+0x21e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a4f      	ldr	r2, [pc, #316]	; (80034ac <HAL_GPIO_Init+0x320>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d019      	beq.n	80033a6 <HAL_GPIO_Init+0x21a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4e      	ldr	r2, [pc, #312]	; (80034b0 <HAL_GPIO_Init+0x324>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_GPIO_Init+0x216>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4d      	ldr	r2, [pc, #308]	; (80034b4 <HAL_GPIO_Init+0x328>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00d      	beq.n	800339e <HAL_GPIO_Init+0x212>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4c      	ldr	r2, [pc, #304]	; (80034b8 <HAL_GPIO_Init+0x32c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <HAL_GPIO_Init+0x20e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4b      	ldr	r2, [pc, #300]	; (80034bc <HAL_GPIO_Init+0x330>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_GPIO_Init+0x20a>
 8003392:	2307      	movs	r3, #7
 8003394:	e00e      	b.n	80033b4 <HAL_GPIO_Init+0x228>
 8003396:	2308      	movs	r3, #8
 8003398:	e00c      	b.n	80033b4 <HAL_GPIO_Init+0x228>
 800339a:	2306      	movs	r3, #6
 800339c:	e00a      	b.n	80033b4 <HAL_GPIO_Init+0x228>
 800339e:	2305      	movs	r3, #5
 80033a0:	e008      	b.n	80033b4 <HAL_GPIO_Init+0x228>
 80033a2:	2304      	movs	r3, #4
 80033a4:	e006      	b.n	80033b4 <HAL_GPIO_Init+0x228>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e004      	b.n	80033b4 <HAL_GPIO_Init+0x228>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e002      	b.n	80033b4 <HAL_GPIO_Init+0x228>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_GPIO_Init+0x228>
 80033b2:	2300      	movs	r3, #0
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	f002 0203 	and.w	r2, r2, #3
 80033ba:	0092      	lsls	r2, r2, #2
 80033bc:	4093      	lsls	r3, r2
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c4:	4935      	ldr	r1, [pc, #212]	; (800349c <HAL_GPIO_Init+0x310>)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3302      	adds	r3, #2
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d2:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <HAL_GPIO_Init+0x334>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033f6:	4a32      	ldr	r2, [pc, #200]	; (80034c0 <HAL_GPIO_Init+0x334>)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <HAL_GPIO_Init+0x334>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <HAL_GPIO_Init+0x334>)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <HAL_GPIO_Init+0x334>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_GPIO_Init+0x334>)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003450:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <HAL_GPIO_Init+0x334>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003474:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <HAL_GPIO_Init+0x334>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	f67f ae90 	bls.w	80031a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	40013800 	.word	0x40013800
 80034a0:	40020000 	.word	0x40020000
 80034a4:	40020400 	.word	0x40020400
 80034a8:	40020800 	.word	0x40020800
 80034ac:	40020c00 	.word	0x40020c00
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40021400 	.word	0x40021400
 80034b8:	40021800 	.word	0x40021800
 80034bc:	40021c00 	.word	0x40021c00
 80034c0:	40013c00 	.word	0x40013c00

080034c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	e001      	b.n	80034e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
 8003500:	4613      	mov	r3, r2
 8003502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003504:	787b      	ldrb	r3, [r7, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003510:	e003      	b.n	800351a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	041a      	lsls	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	619a      	str	r2, [r3, #24]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003528:	b08f      	sub	sp, #60	; 0x3c
 800352a:	af0a      	add	r7, sp, #40	; 0x28
 800352c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e054      	b.n	80035e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f007 fdde 	bl	800b114 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2203      	movs	r2, #3
 800355c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f003 fdc6 	bl	8007108 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	687e      	ldr	r6, [r7, #4]
 8003584:	466d      	mov	r5, sp
 8003586:	f106 0410 	add.w	r4, r6, #16
 800358a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003592:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003596:	e885 0003 	stmia.w	r5, {r0, r1}
 800359a:	1d33      	adds	r3, r6, #4
 800359c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	f003 fd40 	bl	8007024 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 fdbd 	bl	800712a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	687e      	ldr	r6, [r7, #4]
 80035b8:	466d      	mov	r5, sp
 80035ba:	f106 0410 	add.w	r4, r6, #16
 80035be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80035ce:	1d33      	adds	r3, r6, #4
 80035d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d2:	6838      	ldr	r0, [r7, #0]
 80035d4:	f003 ff24 	bl	8007420 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80035ea:	b590      	push	{r4, r7, lr}
 80035ec:	b089      	sub	sp, #36	; 0x24
 80035ee:	af04      	add	r7, sp, #16
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	4608      	mov	r0, r1
 80035f4:	4611      	mov	r1, r2
 80035f6:	461a      	mov	r2, r3
 80035f8:	4603      	mov	r3, r0
 80035fa:	70fb      	strb	r3, [r7, #3]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70bb      	strb	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_HCD_HC_Init+0x28>
 800360e:	2302      	movs	r3, #2
 8003610:	e076      	b.n	8003700 <HAL_HCD_HC_Init+0x116>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	333d      	adds	r3, #61	; 0x3d
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	4413      	add	r3, r2
 8003638:	3338      	adds	r3, #56	; 0x38
 800363a:	787a      	ldrb	r2, [r7, #1]
 800363c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3340      	adds	r3, #64	; 0x40
 800364c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800364e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3339      	adds	r3, #57	; 0x39
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	333f      	adds	r3, #63	; 0x3f
 8003670:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003674:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	78ba      	ldrb	r2, [r7, #2]
 800367a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800367e:	b2d0      	uxtb	r0, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	333a      	adds	r3, #58	; 0x3a
 800368c:	4602      	mov	r2, r0
 800368e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003690:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003694:	2b00      	cmp	r3, #0
 8003696:	da09      	bge.n	80036ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	333b      	adds	r3, #59	; 0x3b
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e008      	b.n	80036be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	333b      	adds	r3, #59	; 0x3b
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	333c      	adds	r3, #60	; 0x3c
 80036cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	787c      	ldrb	r4, [r7, #1]
 80036d8:	78ba      	ldrb	r2, [r7, #2]
 80036da:	78f9      	ldrb	r1, [r7, #3]
 80036dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036de:	9302      	str	r3, [sp, #8]
 80036e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	4623      	mov	r3, r4
 80036ee:	f004 f811 	bl	8007714 <USB_HC_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bd90      	pop	{r4, r7, pc}

08003708 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	460b      	mov	r3, r1
 8003712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_HCD_HC_Halt+0x1e>
 8003722:	2302      	movs	r3, #2
 8003724:	e00f      	b.n	8003746 <HAL_HCD_HC_Halt+0x3e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f004 fa4d 	bl	8007bd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4603      	mov	r3, r0
 8003760:	70fb      	strb	r3, [r7, #3]
 8003762:	460b      	mov	r3, r1
 8003764:	70bb      	strb	r3, [r7, #2]
 8003766:	4613      	mov	r3, r2
 8003768:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	333b      	adds	r3, #59	; 0x3b
 8003778:	78ba      	ldrb	r2, [r7, #2]
 800377a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	212c      	movs	r1, #44	; 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	333f      	adds	r3, #63	; 0x3f
 800378a:	787a      	ldrb	r2, [r7, #1]
 800378c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800378e:	7c3b      	ldrb	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d112      	bne.n	80037ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	212c      	movs	r1, #44	; 0x2c
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	3342      	adds	r3, #66	; 0x42
 80037a2:	2203      	movs	r2, #3
 80037a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	333d      	adds	r3, #61	; 0x3d
 80037b4:	7f3a      	ldrb	r2, [r7, #28]
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e008      	b.n	80037cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	3342      	adds	r3, #66	; 0x42
 80037c8:	2202      	movs	r2, #2
 80037ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037cc:	787b      	ldrb	r3, [r7, #1]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	f200 80c6 	bhi.w	8003960 <HAL_HCD_HC_SubmitRequest+0x210>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	0800394d 	.word	0x0800394d
 80037e4:	08003851 	.word	0x08003851
 80037e8:	080038cf 	.word	0x080038cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80037ec:	7c3b      	ldrb	r3, [r7, #16]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	f040 80b8 	bne.w	8003964 <HAL_HCD_HC_SubmitRequest+0x214>
 80037f4:	78bb      	ldrb	r3, [r7, #2]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 80b4 	bne.w	8003964 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80037fc:	8b3b      	ldrh	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	3355      	adds	r3, #85	; 0x55
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3355      	adds	r3, #85	; 0x55
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	3342      	adds	r3, #66	; 0x42
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800383a:	e093      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3342      	adds	r3, #66	; 0x42
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]
      break;
 800384e:	e089      	b.n	8003964 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003850:	78bb      	ldrb	r3, [r7, #2]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d11d      	bne.n	8003892 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3355      	adds	r3, #85	; 0x55
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	3342      	adds	r3, #66	; 0x42
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800387c:	e073      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3342      	adds	r3, #66	; 0x42
 800388c:	2202      	movs	r2, #2
 800388e:	701a      	strb	r2, [r3, #0]
      break;
 8003890:	e069      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3354      	adds	r3, #84	; 0x54
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3342      	adds	r3, #66	; 0x42
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
      break;
 80038b8:	e055      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	3342      	adds	r3, #66	; 0x42
 80038c8:	2202      	movs	r2, #2
 80038ca:	701a      	strb	r2, [r3, #0]
      break;
 80038cc:	e04b      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80038ce:	78bb      	ldrb	r3, [r7, #2]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d11d      	bne.n	8003910 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3355      	adds	r3, #85	; 0x55
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d109      	bne.n	80038fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3342      	adds	r3, #66	; 0x42
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038fa:	e034      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3342      	adds	r3, #66	; 0x42
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]
      break;
 800390e:	e02a      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3354      	adds	r3, #84	; 0x54
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3342      	adds	r3, #66	; 0x42
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
      break;
 8003936:	e016      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3342      	adds	r3, #66	; 0x42
 8003946:	2202      	movs	r2, #2
 8003948:	701a      	strb	r2, [r3, #0]
      break;
 800394a:	e00c      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3342      	adds	r3, #66	; 0x42
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
      break;
 800395e:	e002      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003964:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	3344      	adds	r3, #68	; 0x44
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	8b3a      	ldrh	r2, [r7, #24]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	202c      	movs	r0, #44	; 0x2c
 8003980:	fb00 f303 	mul.w	r3, r0, r3
 8003984:	440b      	add	r3, r1
 8003986:	334c      	adds	r3, #76	; 0x4c
 8003988:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	3360      	adds	r3, #96	; 0x60
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	3350      	adds	r3, #80	; 0x50
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	212c      	movs	r1, #44	; 0x2c
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	3339      	adds	r3, #57	; 0x39
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3361      	adds	r3, #97	; 0x61
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	222c      	movs	r2, #44	; 0x2c
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	3338      	adds	r3, #56	; 0x38
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	18d1      	adds	r1, r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	f003 ffa0 	bl	8007930 <USB_HC_StartXfer>
 80039f0:	4603      	mov	r3, r0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop

080039fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f003 fcc3 	bl	800739e <USB_GetMode>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	f040 80f6 	bne.w	8003c0c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fca7 	bl	8007378 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80ec 	beq.w	8003c0a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fc9e 	bl	8007378 <USB_ReadInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a46:	d104      	bne.n	8003a52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 fc8e 	bl	8007378 <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a66:	d104      	bne.n	8003a72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 fc7e 	bl	8007378 <USB_ReadInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a86:	d104      	bne.n	8003a92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 fc6e 	bl	8007378 <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d103      	bne.n	8003aae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 fc60 	bl	8007378 <USB_ReadInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac2:	d11c      	bne.n	8003afe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003acc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003ade:	2110      	movs	r1, #16
 8003ae0:	6938      	ldr	r0, [r7, #16]
 8003ae2:	f003 fb6f 	bl	80071c4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003ae6:	6938      	ldr	r0, [r7, #16]
 8003ae8:	f003 fb90 	bl	800720c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f003 fd48 	bl	8007588 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f007 fb89 	bl	800b210 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 fc38 	bl	8007378 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b12:	d102      	bne.n	8003b1a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f001 fa03 	bl	8004f20 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 fc2a 	bl	8007378 <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d106      	bne.n	8003b3c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f007 fb52 	bl	800b1d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 fc19 	bl	8007378 <USB_ReadInterrupts>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d101      	bne.n	8003b54 <HAL_HCD_IRQHandler+0x158>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_HCD_IRQHandler+0x15a>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d012      	beq.n	8003b80 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699a      	ldr	r2, [r3, #24]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0210 	bic.w	r2, r2, #16
 8003b68:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f001 f906 	bl	8004d7c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0210 	orr.w	r2, r2, #16
 8003b7e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 fbf7 	bl	8007378 <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b94:	d13a      	bne.n	8003c0c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f004 f80a 	bl	8007bb4 <USB_HC_ReadInterrupt>
 8003ba0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e025      	b.n	8003bf4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d018      	beq.n	8003bee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd2:	d106      	bne.n	8003be2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	4619      	mov	r1, r3
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8ab 	bl	8003d36 <HCD_HC_IN_IRQHandler>
 8003be0:	e005      	b.n	8003bee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fcc6 	bl	800457a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3d4      	bcc.n	8003ba8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c06:	615a      	str	r2, [r3, #20]
 8003c08:	e000      	b.n	8003c0c <HAL_HCD_IRQHandler+0x210>
      return;
 8003c0a:	bf00      	nop
    }
  }
}
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_HCD_Start+0x16>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e013      	b.n	8003c50 <HAL_HCD_Start+0x3e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f003 fd0a 	bl	8007650 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fa50 	bl	80070e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_HCD_Stop+0x16>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e00d      	b.n	8003c8a <HAL_HCD_Stop+0x32>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f004 f904 	bl	8007e88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f003 fcac 	bl	80075fc <USB_ResetPort>
 8003ca4:	4603      	mov	r3, r0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3360      	adds	r3, #96	; 0x60
 8003cc8:	781b      	ldrb	r3, [r3, #0]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	3350      	adds	r3, #80	; 0x50
 8003cf0:	681b      	ldr	r3, [r3, #0]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f003 fcf0 	bl	80076f0 <USB_GetCurrentFrame>
 8003d10:	4603      	mov	r3, r0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f003 fccb 	bl	80076c2 <USB_GetHostSpeed>
 8003d2c:	4603      	mov	r3, r0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d119      	bne.n	8003d9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	461a      	mov	r2, r3
 8003d74:	2304      	movs	r3, #4
 8003d76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	0151      	lsls	r1, r2, #5
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	440a      	add	r2, r1
 8003d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	60d3      	str	r3, [r2, #12]
 8003d98:	e101      	b.n	8003f9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db0:	d12b      	bne.n	8003e0a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3361      	adds	r3, #97	; 0x61
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f003 fee7 	bl	8007bd6 <USB_HC_Halt>
 8003e08:	e0c9      	b.n	8003f9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d109      	bne.n	8003e34 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2320      	movs	r3, #32
 8003e30:	6093      	str	r3, [r2, #8]
 8003e32:	e0b4      	b.n	8003f9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d133      	bne.n	8003eb2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e64:	f043 0302 	orr.w	r3, r3, #2
 8003e68:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	212c      	movs	r1, #44	; 0x2c
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3361      	adds	r3, #97	; 0x61
 8003e78:	2205      	movs	r2, #5
 8003e7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2310      	movs	r3, #16
 8003e8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f003 fe93 	bl	8007bd6 <USB_HC_Halt>
 8003eb0:	e075      	b.n	8003f9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d134      	bne.n	8003f34 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3361      	adds	r3, #97	; 0x61
 8003ef8:	2208      	movs	r2, #8
 8003efa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fe52 	bl	8007bd6 <USB_HC_Halt>
 8003f32:	e034      	b.n	8003f9e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b80      	cmp	r3, #128	; 0x80
 8003f48:	d129      	bne.n	8003f9e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3361      	adds	r3, #97	; 0x61
 8003f78:	2206      	movs	r2, #6
 8003f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f003 fe25 	bl	8007bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb4:	d122      	bne.n	8003ffc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f003 fdf8 	bl	8007bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003ffa:	e2ba      	b.n	8004572 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	f040 811b 	bne.w	800424a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d019      	beq.n	8004050 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	212c      	movs	r1, #44	; 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	3348      	adds	r3, #72	; 0x48
 800402a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	0159      	lsls	r1, r3, #5
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	440b      	add	r3, r1
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800403e:	1ad2      	subs	r2, r2, r3
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	202c      	movs	r0, #44	; 0x2c
 8004046:	fb00 f303 	mul.w	r3, r0, r3
 800404a:	440b      	add	r3, r1
 800404c:	3350      	adds	r3, #80	; 0x50
 800404e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	3361      	adds	r3, #97	; 0x61
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	212c      	movs	r1, #44	; 0x2c
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	4413      	add	r3, r2
 800406e:	335c      	adds	r3, #92	; 0x5c
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4413      	add	r3, r2
 800407c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004080:	461a      	mov	r2, r3
 8004082:	2301      	movs	r3, #1
 8004084:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	333f      	adds	r3, #63	; 0x3f
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	333f      	adds	r3, #63	; 0x3f
 80040a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d121      	bne.n	80040f2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	0151      	lsls	r1, r2, #5
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	440a      	add	r2, r1
 80040c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f003 fd7c 	bl	8007bd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ea:	461a      	mov	r2, r3
 80040ec:	2310      	movs	r3, #16
 80040ee:	6093      	str	r3, [r2, #8]
 80040f0:	e066      	b.n	80041c0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	333f      	adds	r3, #63	; 0x3f
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b03      	cmp	r3, #3
 8004104:	d127      	bne.n	8004156 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	440a      	add	r2, r1
 800411c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004120:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004124:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	3360      	adds	r3, #96	; 0x60
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	b2d9      	uxtb	r1, r3
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	202c      	movs	r0, #44	; 0x2c
 8004142:	fb00 f303 	mul.w	r3, r0, r3
 8004146:	4413      	add	r3, r2
 8004148:	3360      	adds	r3, #96	; 0x60
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f007 f86c 	bl	800b22c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004154:	e034      	b.n	80041c0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	333f      	adds	r3, #63	; 0x3f
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d12a      	bne.n	80041c0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	3360      	adds	r3, #96	; 0x60
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	3354      	adds	r3, #84	; 0x54
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	f083 0301 	eor.w	r3, r3, #1
 8004190:	b2d8      	uxtb	r0, r3
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	3354      	adds	r3, #84	; 0x54
 80041a0:	4602      	mov	r2, r0
 80041a2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	b2d9      	uxtb	r1, r3
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	202c      	movs	r0, #44	; 0x2c
 80041ae:	fb00 f303 	mul.w	r3, r0, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	3360      	adds	r3, #96	; 0x60
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f007 f836 	bl	800b22c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d12b      	bne.n	8004220 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	3348      	adds	r3, #72	; 0x48
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	202c      	movs	r0, #44	; 0x2c
 80041de:	fb00 f202 	mul.w	r2, r0, r2
 80041e2:	440a      	add	r2, r1
 80041e4:	3240      	adds	r2, #64	; 0x40
 80041e6:	8812      	ldrh	r2, [r2, #0]
 80041e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 81be 	beq.w	8004572 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	3354      	adds	r3, #84	; 0x54
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	f083 0301 	eor.w	r3, r3, #1
 800420a:	b2d8      	uxtb	r0, r3
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3354      	adds	r3, #84	; 0x54
 800421a:	4602      	mov	r2, r0
 800421c:	701a      	strb	r2, [r3, #0]
}
 800421e:	e1a8      	b.n	8004572 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	212c      	movs	r1, #44	; 0x2c
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	4413      	add	r3, r2
 800422c:	3354      	adds	r3, #84	; 0x54
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	f083 0301 	eor.w	r3, r3, #1
 8004234:	b2d8      	uxtb	r0, r3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	3354      	adds	r3, #84	; 0x54
 8004244:	4602      	mov	r2, r0
 8004246:	701a      	strb	r2, [r3, #0]
}
 8004248:	e193      	b.n	8004572 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	f040 8106 	bne.w	800446e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	0151      	lsls	r1, r2, #5
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	440a      	add	r2, r1
 8004278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800427c:	f023 0302 	bic.w	r3, r3, #2
 8004280:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3361      	adds	r3, #97	; 0x61
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d109      	bne.n	80042aa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	3360      	adds	r3, #96	; 0x60
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e0c9      	b.n	800443e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3361      	adds	r3, #97	; 0x61
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d109      	bne.n	80042d2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	3360      	adds	r3, #96	; 0x60
 80042cc:	2205      	movs	r2, #5
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	e0b5      	b.n	800443e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	3361      	adds	r3, #97	; 0x61
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d009      	beq.n	80042fa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	3361      	adds	r3, #97	; 0x61
 80042f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d150      	bne.n	800439c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	212c      	movs	r1, #44	; 0x2c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	335c      	adds	r3, #92	; 0x5c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	202c      	movs	r0, #44	; 0x2c
 8004312:	fb00 f303 	mul.w	r3, r0, r3
 8004316:	440b      	add	r3, r1
 8004318:	335c      	adds	r3, #92	; 0x5c
 800431a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	335c      	adds	r3, #92	; 0x5c
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d912      	bls.n	8004356 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	335c      	adds	r3, #92	; 0x5c
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	212c      	movs	r1, #44	; 0x2c
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	4413      	add	r3, r2
 800434e:	3360      	adds	r3, #96	; 0x60
 8004350:	2204      	movs	r2, #4
 8004352:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004354:	e073      	b.n	800443e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	212c      	movs	r1, #44	; 0x2c
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	4413      	add	r3, r2
 8004362:	3360      	adds	r3, #96	; 0x60
 8004364:	2202      	movs	r2, #2
 8004366:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4413      	add	r3, r2
 8004370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800437e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004386:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	461a      	mov	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800439a:	e050      	b.n	800443e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3361      	adds	r3, #97	; 0x61
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d122      	bne.n	80043f6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	212c      	movs	r1, #44	; 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	3360      	adds	r3, #96	; 0x60
 80043be:	2202      	movs	r2, #2
 80043c0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043d8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043e0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ee:	461a      	mov	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	e023      	b.n	800443e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	212c      	movs	r1, #44	; 0x2c
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	3361      	adds	r3, #97	; 0x61
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b07      	cmp	r3, #7
 8004408:	d119      	bne.n	800443e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	335c      	adds	r3, #92	; 0x5c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	202c      	movs	r0, #44	; 0x2c
 8004422:	fb00 f303 	mul.w	r3, r0, r3
 8004426:	440b      	add	r3, r1
 8004428:	335c      	adds	r3, #92	; 0x5c
 800442a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	212c      	movs	r1, #44	; 0x2c
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	4413      	add	r3, r2
 8004438:	3360      	adds	r3, #96	; 0x60
 800443a:	2204      	movs	r2, #4
 800443c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	461a      	mov	r2, r3
 800444c:	2302      	movs	r3, #2
 800444e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	b2d9      	uxtb	r1, r3
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	202c      	movs	r0, #44	; 0x2c
 800445a:	fb00 f303 	mul.w	r3, r0, r3
 800445e:	4413      	add	r3, r2
 8004460:	3360      	adds	r3, #96	; 0x60
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f006 fee0 	bl	800b22c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800446c:	e081      	b.n	8004572 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4413      	add	r3, r2
 8004476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b10      	cmp	r3, #16
 8004482:	d176      	bne.n	8004572 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	333f      	adds	r3, #63	; 0x3f
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d121      	bne.n	80044dc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	212c      	movs	r1, #44	; 0x2c
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	335c      	adds	r3, #92	; 0x5c
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	0151      	lsls	r1, r2, #5
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	440a      	add	r2, r1
 80044c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f003 fb7e 	bl	8007bd6 <USB_HC_Halt>
 80044da:	e041      	b.n	8004560 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	212c      	movs	r1, #44	; 0x2c
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	333f      	adds	r3, #63	; 0x3f
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d009      	beq.n	8004504 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	333f      	adds	r3, #63	; 0x3f
 80044fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004500:	2b02      	cmp	r3, #2
 8004502:	d12d      	bne.n	8004560 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	335c      	adds	r3, #92	; 0x5c
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d120      	bne.n	8004560 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	212c      	movs	r1, #44	; 0x2c
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	3361      	adds	r3, #97	; 0x61
 800452c:	2203      	movs	r2, #3
 800452e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	0151      	lsls	r1, r2, #5
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	440a      	add	r2, r1
 8004546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fb3b 	bl	8007bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	461a      	mov	r2, r3
 800456e:	2310      	movs	r3, #16
 8004570:	6093      	str	r3, [r2, #8]
}
 8004572:	bf00      	nop
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b088      	sub	sp, #32
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d119      	bne.n	80045de <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	2304      	movs	r3, #4
 80045ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045d6:	f043 0302 	orr.w	r3, r3, #2
 80045da:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80045dc:	e3ca      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d13e      	bne.n	8004672 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	461a      	mov	r2, r3
 8004602:	2320      	movs	r3, #32
 8004604:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	212c      	movs	r1, #44	; 0x2c
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	4413      	add	r3, r2
 8004612:	333d      	adds	r3, #61	; 0x3d
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	f040 83ac 	bne.w	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	333d      	adds	r3, #61	; 0x3d
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	3360      	adds	r3, #96	; 0x60
 800463c:	2202      	movs	r2, #2
 800463e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	440a      	add	r2, r1
 8004656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800465a:	f043 0302 	orr.w	r3, r3, #2
 800465e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f003 fab3 	bl	8007bd6 <USB_HC_Halt>
}
 8004670:	e380      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4413      	add	r3, r2
 800467a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004688:	d122      	bne.n	80046d0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f003 fa8e 	bl	8007bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c6:	461a      	mov	r2, r3
 80046c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046cc:	6093      	str	r3, [r2, #8]
}
 80046ce:	e351      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d150      	bne.n	8004788 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	335c      	adds	r3, #92	; 0x5c
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d111      	bne.n	8004732 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	333d      	adds	r3, #61	; 0x3d
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	2340      	movs	r3, #64	; 0x40
 8004730:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	440a      	add	r2, r1
 8004748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474c:	f043 0302 	orr.w	r3, r3, #2
 8004750:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f003 fa3a 	bl	8007bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	461a      	mov	r2, r3
 8004770:	2301      	movs	r3, #1
 8004772:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	212c      	movs	r1, #44	; 0x2c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	3361      	adds	r3, #97	; 0x61
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
}
 8004786:	e2f5      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d13c      	bne.n	8004818 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	212c      	movs	r1, #44	; 0x2c
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	3361      	adds	r3, #97	; 0x61
 80047ac:	2204      	movs	r2, #4
 80047ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	212c      	movs	r1, #44	; 0x2c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	333d      	adds	r3, #61	; 0x3d
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	212c      	movs	r1, #44	; 0x2c
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	4413      	add	r3, r2
 80047ce:	335c      	adds	r3, #92	; 0x5c
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	0151      	lsls	r1, r2, #5
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	440a      	add	r2, r1
 80047ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ee:	f043 0302 	orr.w	r3, r3, #2
 80047f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 f9e9 	bl	8007bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	4413      	add	r3, r2
 800480c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004810:	461a      	mov	r2, r3
 8004812:	2340      	movs	r3, #64	; 0x40
 8004814:	6093      	str	r3, [r2, #8]
}
 8004816:	e2ad      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d12a      	bne.n	8004884 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483a:	461a      	mov	r2, r3
 800483c:	2308      	movs	r3, #8
 800483e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	4413      	add	r3, r2
 8004848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	440a      	add	r2, r1
 8004856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800485a:	f043 0302 	orr.w	r3, r3, #2
 800485e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f003 f9b3 	bl	8007bd6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	212c      	movs	r1, #44	; 0x2c
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	3361      	adds	r3, #97	; 0x61
 800487e:	2205      	movs	r2, #5
 8004880:	701a      	strb	r2, [r3, #0]
}
 8004882:	e277      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b10      	cmp	r3, #16
 8004898:	d150      	bne.n	800493c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	335c      	adds	r3, #92	; 0x5c
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3361      	adds	r3, #97	; 0x61
 80048ba:	2203      	movs	r2, #3
 80048bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	212c      	movs	r1, #44	; 0x2c
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	4413      	add	r3, r2
 80048ca:	333d      	adds	r3, #61	; 0x3d
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d112      	bne.n	80048f8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	212c      	movs	r1, #44	; 0x2c
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	4413      	add	r3, r2
 80048de:	333c      	adds	r3, #60	; 0x3c
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d108      	bne.n	80048f8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	212c      	movs	r1, #44	; 0x2c
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
 80048f2:	333d      	adds	r3, #61	; 0x3d
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	440a      	add	r2, r1
 800490e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004912:	f043 0302 	orr.w	r3, r3, #2
 8004916:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f003 f957 	bl	8007bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004934:	461a      	mov	r2, r3
 8004936:	2310      	movs	r3, #16
 8004938:	6093      	str	r3, [r2, #8]
}
 800493a:	e21b      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d174      	bne.n	8004a3c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d121      	bne.n	800499e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	212c      	movs	r1, #44	; 0x2c
 8004960:	fb01 f303 	mul.w	r3, r1, r3
 8004964:	4413      	add	r3, r2
 8004966:	3361      	adds	r3, #97	; 0x61
 8004968:	2206      	movs	r2, #6
 800496a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	4413      	add	r3, r2
 8004974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	440a      	add	r2, r1
 8004982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004986:	f043 0302 	orr.w	r3, r3, #2
 800498a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f003 f91d 	bl	8007bd6 <USB_HC_Halt>
 800499c:	e044      	b.n	8004a28 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	335c      	adds	r3, #92	; 0x5c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	202c      	movs	r0, #44	; 0x2c
 80049b6:	fb00 f303 	mul.w	r3, r0, r3
 80049ba:	440b      	add	r3, r1
 80049bc:	335c      	adds	r3, #92	; 0x5c
 80049be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	212c      	movs	r1, #44	; 0x2c
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	335c      	adds	r3, #92	; 0x5c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d920      	bls.n	8004a16 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	212c      	movs	r1, #44	; 0x2c
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	4413      	add	r3, r2
 80049e0:	335c      	adds	r3, #92	; 0x5c
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	3360      	adds	r3, #96	; 0x60
 80049f4:	2204      	movs	r2, #4
 80049f6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	b2d9      	uxtb	r1, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	202c      	movs	r0, #44	; 0x2c
 8004a02:	fb00 f303 	mul.w	r3, r0, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	3360      	adds	r3, #96	; 0x60
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f006 fc0c 	bl	800b22c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a14:	e008      	b.n	8004a28 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	3360      	adds	r3, #96	; 0x60
 8004a24:	2202      	movs	r2, #2
 8004a26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	461a      	mov	r2, r3
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	6093      	str	r3, [r2, #8]
}
 8004a3a:	e19b      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a52:	d134      	bne.n	8004abe <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a6e:	f043 0302 	orr.w	r3, r3, #2
 8004a72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 f8a9 	bl	8007bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	2310      	movs	r3, #16
 8004a94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	212c      	movs	r1, #44	; 0x2c
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3361      	adds	r3, #97	; 0x61
 8004ab8:	2208      	movs	r2, #8
 8004aba:	701a      	strb	r2, [r3, #0]
}
 8004abc:	e15a      	b.n	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	f040 814f 	bne.w	8004d74 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004af0:	f023 0302 	bic.w	r3, r3, #2
 8004af4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3361      	adds	r3, #97	; 0x61
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d17d      	bne.n	8004c06 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	3360      	adds	r3, #96	; 0x60
 8004b18:	2201      	movs	r2, #1
 8004b1a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	333f      	adds	r3, #63	; 0x3f
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d00a      	beq.n	8004b46 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	333f      	adds	r3, #63	; 0x3f
 8004b3e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	f040 8100 	bne.w	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d113      	bne.n	8004b76 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	212c      	movs	r1, #44	; 0x2c
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	4413      	add	r3, r2
 8004b5a:	3355      	adds	r3, #85	; 0x55
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	f083 0301 	eor.w	r3, r3, #1
 8004b62:	b2d8      	uxtb	r0, r3
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	212c      	movs	r1, #44	; 0x2c
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	3355      	adds	r3, #85	; 0x55
 8004b72:	4602      	mov	r2, r0
 8004b74:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	f040 80e3 	bne.w	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	212c      	movs	r1, #44	; 0x2c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	334c      	adds	r3, #76	; 0x4c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80d8 	beq.w	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	212c      	movs	r1, #44	; 0x2c
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	334c      	adds	r3, #76	; 0x4c
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	202c      	movs	r0, #44	; 0x2c
 8004bac:	fb00 f202 	mul.w	r2, r0, r2
 8004bb0:	440a      	add	r2, r1
 8004bb2:	3240      	adds	r2, #64	; 0x40
 8004bb4:	8812      	ldrh	r2, [r2, #0]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	202c      	movs	r0, #44	; 0x2c
 8004bc0:	fb00 f202 	mul.w	r2, r0, r2
 8004bc4:	440a      	add	r2, r1
 8004bc6:	3240      	adds	r2, #64	; 0x40
 8004bc8:	8812      	ldrh	r2, [r2, #0]
 8004bca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80b5 	beq.w	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3355      	adds	r3, #85	; 0x55
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f083 0301 	eor.w	r3, r3, #1
 8004bf0:	b2d8      	uxtb	r0, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3355      	adds	r3, #85	; 0x55
 8004c00:	4602      	mov	r2, r0
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e09f      	b.n	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3361      	adds	r3, #97	; 0x61
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d109      	bne.n	8004c2e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	212c      	movs	r1, #44	; 0x2c
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	4413      	add	r3, r2
 8004c26:	3360      	adds	r3, #96	; 0x60
 8004c28:	2202      	movs	r2, #2
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e08b      	b.n	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	3361      	adds	r3, #97	; 0x61
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d109      	bne.n	8004c56 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3360      	adds	r3, #96	; 0x60
 8004c50:	2202      	movs	r2, #2
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e077      	b.n	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3361      	adds	r3, #97	; 0x61
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d109      	bne.n	8004c7e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3360      	adds	r3, #96	; 0x60
 8004c78:	2205      	movs	r2, #5
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e063      	b.n	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	212c      	movs	r1, #44	; 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	3361      	adds	r3, #97	; 0x61
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b06      	cmp	r3, #6
 8004c90:	d009      	beq.n	8004ca6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	212c      	movs	r1, #44	; 0x2c
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3361      	adds	r3, #97	; 0x61
 8004ca0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d14f      	bne.n	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	212c      	movs	r1, #44	; 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	335c      	adds	r3, #92	; 0x5c
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	202c      	movs	r0, #44	; 0x2c
 8004cbe:	fb00 f303 	mul.w	r3, r0, r3
 8004cc2:	440b      	add	r3, r1
 8004cc4:	335c      	adds	r3, #92	; 0x5c
 8004cc6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	335c      	adds	r3, #92	; 0x5c
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d912      	bls.n	8004d02 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	335c      	adds	r3, #92	; 0x5c
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3360      	adds	r3, #96	; 0x60
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e021      	b.n	8004d46 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	212c      	movs	r1, #44	; 0x2c
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3360      	adds	r3, #96	; 0x60
 8004d10:	2202      	movs	r2, #2
 8004d12:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d2a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d32:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d40:	461a      	mov	r2, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d52:	461a      	mov	r2, r3
 8004d54:	2302      	movs	r3, #2
 8004d56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	b2d9      	uxtb	r1, r3
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	202c      	movs	r0, #44	; 0x2c
 8004d62:	fb00 f303 	mul.w	r3, r0, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	3360      	adds	r3, #96	; 0x60
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f006 fa5c 	bl	800b22c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d74:	bf00      	nop
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	0c5b      	lsrs	r3, r3, #17
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004db0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d004      	beq.n	8004dc2 <HCD_RXQLVL_IRQHandler+0x46>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	f000 80a9 	beq.w	8004f12 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004dc0:	e0aa      	b.n	8004f18 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80a6 	beq.w	8004f16 <HCD_RXQLVL_IRQHandler+0x19a>
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	212c      	movs	r1, #44	; 0x2c
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3344      	adds	r3, #68	; 0x44
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 809b 	beq.w	8004f16 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	3350      	adds	r3, #80	; 0x50
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	441a      	add	r2, r3
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	202c      	movs	r0, #44	; 0x2c
 8004dfa:	fb00 f303 	mul.w	r3, r0, r3
 8004dfe:	440b      	add	r3, r1
 8004e00:	334c      	adds	r3, #76	; 0x4c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d87a      	bhi.n	8004efe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	212c      	movs	r1, #44	; 0x2c
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	3344      	adds	r3, #68	; 0x44
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	b292      	uxth	r2, r2
 8004e20:	4619      	mov	r1, r3
 8004e22:	f002 fa51 	bl	80072c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	212c      	movs	r1, #44	; 0x2c
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	3344      	adds	r3, #68	; 0x44
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	441a      	add	r2, r3
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	202c      	movs	r0, #44	; 0x2c
 8004e40:	fb00 f303 	mul.w	r3, r0, r3
 8004e44:	440b      	add	r3, r1
 8004e46:	3344      	adds	r3, #68	; 0x44
 8004e48:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	212c      	movs	r1, #44	; 0x2c
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	3350      	adds	r3, #80	; 0x50
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	441a      	add	r2, r3
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	202c      	movs	r0, #44	; 0x2c
 8004e64:	fb00 f303 	mul.w	r3, r0, r3
 8004e68:	440b      	add	r3, r1
 8004e6a:	3350      	adds	r3, #80	; 0x50
 8004e6c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	0cdb      	lsrs	r3, r3, #19
 8004e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e82:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	212c      	movs	r1, #44	; 0x2c
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	4413      	add	r3, r2
 8004e90:	3340      	adds	r3, #64	; 0x40
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d13c      	bne.n	8004f16 <HCD_RXQLVL_IRQHandler+0x19a>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d039      	beq.n	8004f16 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ec0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	212c      	movs	r1, #44	; 0x2c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3354      	adds	r3, #84	; 0x54
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f083 0301 	eor.w	r3, r3, #1
 8004ee8:	b2d8      	uxtb	r0, r3
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	212c      	movs	r1, #44	; 0x2c
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3354      	adds	r3, #84	; 0x54
 8004ef8:	4602      	mov	r2, r0
 8004efa:	701a      	strb	r2, [r3, #0]
      break;
 8004efc:	e00b      	b.n	8004f16 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	212c      	movs	r1, #44	; 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3360      	adds	r3, #96	; 0x60
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	701a      	strb	r2, [r3, #0]
      break;
 8004f10:	e001      	b.n	8004f16 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f16:	bf00      	nop
  }
}
 8004f18:	bf00      	nop
 8004f1a:	3728      	adds	r7, #40	; 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f4c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d10b      	bne.n	8004f70 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f006 f946 	bl	800b1f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f043 0302 	orr.w	r3, r3, #2
 8004f6e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d132      	bne.n	8004fe0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f043 0308 	orr.w	r3, r3, #8
 8004f80:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d126      	bne.n	8004fda <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d113      	bne.n	8004fbc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f9e:	d106      	bne.n	8004fae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f002 faee 	bl	8007588 <USB_InitFSLSPClkSel>
 8004fac:	e011      	b.n	8004fd2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f002 fae7 	bl	8007588 <USB_InitFSLSPClkSel>
 8004fba:	e00a      	b.n	8004fd2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d106      	bne.n	8004fd2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004fd0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f006 f938 	bl	800b248 <HAL_HCD_PortEnabled_Callback>
 8004fd8:	e002      	b.n	8004fe0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f006 f942 	bl	800b264 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d103      	bne.n	8004ff2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f043 0320 	orr.w	r3, r3, #32
 8004ff0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6013      	str	r3, [r2, #0]
}
 8004ffe:	bf00      	nop
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e12b      	b.n	8005272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fd f8ec 	bl	800220c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2224      	movs	r2, #36	; 0x24
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0201 	bic.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800505a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800506a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800506c:	f001 fbf6 	bl	800685c <HAL_RCC_GetPCLK1Freq>
 8005070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4a81      	ldr	r2, [pc, #516]	; (800527c <HAL_I2C_Init+0x274>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d807      	bhi.n	800508c <HAL_I2C_Init+0x84>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a80      	ldr	r2, [pc, #512]	; (8005280 <HAL_I2C_Init+0x278>)
 8005080:	4293      	cmp	r3, r2
 8005082:	bf94      	ite	ls
 8005084:	2301      	movls	r3, #1
 8005086:	2300      	movhi	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e006      	b.n	800509a <HAL_I2C_Init+0x92>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a7d      	ldr	r2, [pc, #500]	; (8005284 <HAL_I2C_Init+0x27c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	bf94      	ite	ls
 8005094:	2301      	movls	r3, #1
 8005096:	2300      	movhi	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e0e7      	b.n	8005272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a78      	ldr	r2, [pc, #480]	; (8005288 <HAL_I2C_Init+0x280>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	0c9b      	lsrs	r3, r3, #18
 80050ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a6a      	ldr	r2, [pc, #424]	; (800527c <HAL_I2C_Init+0x274>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d802      	bhi.n	80050dc <HAL_I2C_Init+0xd4>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3301      	adds	r3, #1
 80050da:	e009      	b.n	80050f0 <HAL_I2C_Init+0xe8>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	4a69      	ldr	r2, [pc, #420]	; (800528c <HAL_I2C_Init+0x284>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	099b      	lsrs	r3, r3, #6
 80050ee:	3301      	adds	r3, #1
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	495c      	ldr	r1, [pc, #368]	; (800527c <HAL_I2C_Init+0x274>)
 800510c:	428b      	cmp	r3, r1
 800510e:	d819      	bhi.n	8005144 <HAL_I2C_Init+0x13c>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1e59      	subs	r1, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	fbb1 f3f3 	udiv	r3, r1, r3
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005124:	400b      	ands	r3, r1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_I2C_Init+0x138>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1e59      	subs	r1, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	fbb1 f3f3 	udiv	r3, r1, r3
 8005138:	3301      	adds	r3, #1
 800513a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513e:	e051      	b.n	80051e4 <HAL_I2C_Init+0x1dc>
 8005140:	2304      	movs	r3, #4
 8005142:	e04f      	b.n	80051e4 <HAL_I2C_Init+0x1dc>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d111      	bne.n	8005170 <HAL_I2C_Init+0x168>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	1e58      	subs	r0, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6859      	ldr	r1, [r3, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	440b      	add	r3, r1
 800515a:	fbb0 f3f3 	udiv	r3, r0, r3
 800515e:	3301      	adds	r3, #1
 8005160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	e012      	b.n	8005196 <HAL_I2C_Init+0x18e>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	1e58      	subs	r0, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	0099      	lsls	r1, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	fbb0 f3f3 	udiv	r3, r0, r3
 8005186:	3301      	adds	r3, #1
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	2b00      	cmp	r3, #0
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Init+0x196>
 800519a:	2301      	movs	r3, #1
 800519c:	e022      	b.n	80051e4 <HAL_I2C_Init+0x1dc>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10e      	bne.n	80051c4 <HAL_I2C_Init+0x1bc>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1e58      	subs	r0, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	440b      	add	r3, r1
 80051b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b8:	3301      	adds	r3, #1
 80051ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c2:	e00f      	b.n	80051e4 <HAL_I2C_Init+0x1dc>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1e58      	subs	r0, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	0099      	lsls	r1, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051da:	3301      	adds	r3, #1
 80051dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	6809      	ldr	r1, [r1, #0]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6911      	ldr	r1, [r2, #16]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68d2      	ldr	r2, [r2, #12]
 800521e:	4311      	orrs	r1, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	430b      	orrs	r3, r1
 8005226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	000186a0 	.word	0x000186a0
 8005280:	001e847f 	.word	0x001e847f
 8005284:	003d08ff 	.word	0x003d08ff
 8005288:	431bde83 	.word	0x431bde83
 800528c:	10624dd3 	.word	0x10624dd3

08005290 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e128      	b.n	80054f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a90      	ldr	r2, [pc, #576]	; (80054fc <HAL_I2S_Init+0x26c>)
 80052ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fc ffed 	bl	800229c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80052d8:	f023 030f 	bic.w	r3, r3, #15
 80052dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2202      	movs	r2, #2
 80052e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d060      	beq.n	80053b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80052f6:	2310      	movs	r3, #16
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e001      	b.n	8005300 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80052fc:	2320      	movs	r3, #32
 80052fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b20      	cmp	r3, #32
 8005306:	d802      	bhi.n	800530e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800530e:	2001      	movs	r0, #1
 8005310:	f001 fb9a 	bl	8006a48 <HAL_RCCEx_GetPeriphCLKFreq>
 8005314:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800531e:	d125      	bne.n	800536c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	3305      	adds	r3, #5
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e01f      	b.n	800538a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	fbb2 f2f3 	udiv	r2, r2, r3
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	461a      	mov	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	fbb2 f3f3 	udiv	r3, r2, r3
 8005366:	3305      	adds	r3, #5
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	e00e      	b.n	800538a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	fbb2 f2f3 	udiv	r2, r2, r3
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	461a      	mov	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	3305      	adds	r3, #5
 8005388:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4a5c      	ldr	r2, [pc, #368]	; (8005500 <HAL_I2S_Init+0x270>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	08db      	lsrs	r3, r3, #3
 8005394:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e003      	b.n	80053b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80053b0:	2302      	movs	r3, #2
 80053b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d902      	bls.n	80053c4 <HAL_I2S_Init+0x134>
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	2bff      	cmp	r3, #255	; 0xff
 80053c2:	d907      	bls.n	80053d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	f043 0210 	orr.w	r2, r3, #16
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e08f      	b.n	80054f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	ea42 0103 	orr.w	r1, r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80053f2:	f023 030f 	bic.w	r3, r3, #15
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6851      	ldr	r1, [r2, #4]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6892      	ldr	r2, [r2, #8]
 80053fe:	4311      	orrs	r1, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68d2      	ldr	r2, [r2, #12]
 8005404:	4311      	orrs	r1, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6992      	ldr	r2, [r2, #24]
 800540a:	430a      	orrs	r2, r1
 800540c:	431a      	orrs	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005416:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d161      	bne.n	80054e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a38      	ldr	r2, [pc, #224]	; (8005504 <HAL_I2S_Init+0x274>)
 8005424:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a37      	ldr	r2, [pc, #220]	; (8005508 <HAL_I2S_Init+0x278>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d101      	bne.n	8005434 <HAL_I2S_Init+0x1a4>
 8005430:	4b36      	ldr	r3, [pc, #216]	; (800550c <HAL_I2S_Init+0x27c>)
 8005432:	e001      	b.n	8005438 <HAL_I2S_Init+0x1a8>
 8005434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	4932      	ldr	r1, [pc, #200]	; (8005508 <HAL_I2S_Init+0x278>)
 8005440:	428a      	cmp	r2, r1
 8005442:	d101      	bne.n	8005448 <HAL_I2S_Init+0x1b8>
 8005444:	4a31      	ldr	r2, [pc, #196]	; (800550c <HAL_I2S_Init+0x27c>)
 8005446:	e001      	b.n	800544c <HAL_I2S_Init+0x1bc>
 8005448:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800544c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005450:	f023 030f 	bic.w	r3, r3, #15
 8005454:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2b      	ldr	r2, [pc, #172]	; (8005508 <HAL_I2S_Init+0x278>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d101      	bne.n	8005464 <HAL_I2S_Init+0x1d4>
 8005460:	4b2a      	ldr	r3, [pc, #168]	; (800550c <HAL_I2S_Init+0x27c>)
 8005462:	e001      	b.n	8005468 <HAL_I2S_Init+0x1d8>
 8005464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005468:	2202      	movs	r2, #2
 800546a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a25      	ldr	r2, [pc, #148]	; (8005508 <HAL_I2S_Init+0x278>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d101      	bne.n	800547a <HAL_I2S_Init+0x1ea>
 8005476:	4b25      	ldr	r3, [pc, #148]	; (800550c <HAL_I2S_Init+0x27c>)
 8005478:	e001      	b.n	800547e <HAL_I2S_Init+0x1ee>
 800547a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548a:	d003      	beq.n	8005494 <HAL_I2S_Init+0x204>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	e001      	b.n	80054a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054aa:	4313      	orrs	r3, r2
 80054ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054be:	4313      	orrs	r3, r2
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a0d      	ldr	r2, [pc, #52]	; (8005508 <HAL_I2S_Init+0x278>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_I2S_Init+0x24c>
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <HAL_I2S_Init+0x27c>)
 80054da:	e001      	b.n	80054e0 <HAL_I2S_Init+0x250>
 80054dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e0:	897a      	ldrh	r2, [r7, #10]
 80054e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	080059b3 	.word	0x080059b3
 8005500:	cccccccd 	.word	0xcccccccd
 8005504:	08005ac9 	.word	0x08005ac9
 8005508:	40003800 	.word	0x40003800
 800550c:	40003400 	.word	0x40003400

08005510 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_I2S_Transmit_DMA+0x1a>
 8005524:	88fb      	ldrh	r3, [r7, #6]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e08e      	b.n	800564c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_I2S_Transmit_DMA+0x2e>
 800553a:	2302      	movs	r3, #2
 800553c:	e086      	b.n	800564c <HAL_I2S_Transmit_DMA+0x13c>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	d005      	beq.n	800555e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800555a:	2302      	movs	r3, #2
 800555c:	e076      	b.n	800564c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2203      	movs	r2, #3
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d002      	beq.n	800558a <HAL_I2S_Transmit_DMA+0x7a>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b05      	cmp	r3, #5
 8005588:	d10a      	bne.n	80055a0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800559e:	e005      	b.n	80055ac <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	4a28      	ldr	r2, [pc, #160]	; (8005654 <HAL_I2S_Transmit_DMA+0x144>)
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	4a27      	ldr	r2, [pc, #156]	; (8005658 <HAL_I2S_Transmit_DMA+0x148>)
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	4a26      	ldr	r2, [pc, #152]	; (800565c <HAL_I2S_Transmit_DMA+0x14c>)
 80055c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80055cc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80055d4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80055dc:	f7fd fb14 	bl	8002c08 <HAL_DMA_Start_IT>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00f      	beq.n	8005606 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	f043 0208 	orr.w	r2, r3, #8
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e022      	b.n	800564c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69da      	ldr	r2, [r3, #28]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005622:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d107      	bne.n	8005642 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0202 	orr.w	r2, r2, #2
 8005640:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	08005833 	.word	0x08005833
 8005658:	080057f1 	.word	0x080057f1
 800565c:	080058ad 	.word	0x080058ad

08005660 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <HAL_I2S_Receive_DMA+0x1a>
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e0a1      	b.n	80057c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_I2S_Receive_DMA+0x2e>
 800568a:	2302      	movs	r3, #2
 800568c:	e099      	b.n	80057c2 <HAL_I2S_Receive_DMA+0x162>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d005      	beq.n	80056ae <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
 80056ac:	e089      	b.n	80057c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2204      	movs	r2, #4
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d002      	beq.n	80056da <HAL_I2S_Receive_DMA+0x7a>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	d10a      	bne.n	80056f0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	865a      	strh	r2, [r3, #50]	; 0x32
 80056ee:	e005      	b.n	80056fc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005700:	4a32      	ldr	r2, [pc, #200]	; (80057cc <HAL_I2S_Receive_DMA+0x16c>)
 8005702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005708:	4a31      	ldr	r2, [pc, #196]	; (80057d0 <HAL_I2S_Receive_DMA+0x170>)
 800570a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	4a30      	ldr	r2, [pc, #192]	; (80057d4 <HAL_I2S_Receive_DMA+0x174>)
 8005712:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005722:	d10a      	bne.n	800573a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	4619      	mov	r1, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005750:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8005752:	f7fd fa59 	bl	8002c08 <HAL_DMA_Start_IT>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00f      	beq.n	800577c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005760:	f043 0208 	orr.w	r2, r3, #8
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e022      	b.n	80057c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005786:	2b00      	cmp	r3, #0
 8005788:	d107      	bne.n	800579a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005798:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	08005891 	.word	0x08005891
 80057d0:	0800584f 	.word	0x0800584f
 80057d4:	080058ad 	.word	0x080058ad

080057d8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10e      	bne.n	8005824 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0202 	bic.w	r2, r2, #2
 8005814:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7fa fea5 	bl	8000574 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7fa fea9 	bl	8000598 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10e      	bne.n	8005882 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7fb f8ec 	bl	8000a60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f7fb f8a0 	bl	80009e4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0203 	bic.w	r2, r2, #3
 80058c8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f043 0208 	orr.w	r2, r3, #8
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7fa fe7c 	bl	80005e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	881a      	ldrh	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	1c9a      	adds	r2, r3, #2
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10e      	bne.n	800594c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800593c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fa fe14 	bl	8000574 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	b292      	uxth	r2, r2
 8005968:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	1c9a      	adds	r2, r3, #2
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10e      	bne.n	80059aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800599a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7fb f85b 	bl	8000a60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80059aa:	bf00      	nop
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b086      	sub	sp, #24
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d13a      	bne.n	8005a44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d109      	bne.n	80059ec <I2S_IRQHandler+0x3a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e2:	2b40      	cmp	r3, #64	; 0x40
 80059e4:	d102      	bne.n	80059ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff ffb4 	bl	8005954 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d126      	bne.n	8005a44 <I2S_IRQHandler+0x92>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d11f      	bne.n	8005a44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	f043 0202 	orr.w	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fa fdd2 	bl	80005e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d136      	bne.n	8005abe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d109      	bne.n	8005a6e <I2S_IRQHandler+0xbc>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a64:	2b80      	cmp	r3, #128	; 0x80
 8005a66:	d102      	bne.n	8005a6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ff45 	bl	80058f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d122      	bne.n	8005abe <I2S_IRQHandler+0x10c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b20      	cmp	r3, #32
 8005a84:	d11b      	bne.n	8005abe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	f043 0204 	orr.w	r2, r3, #4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fa fd95 	bl	80005e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a92      	ldr	r2, [pc, #584]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ae2:	4b92      	ldr	r3, [pc, #584]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ae4:	e001      	b.n	8005aea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a8b      	ldr	r2, [pc, #556]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005b00:	4b8a      	ldr	r3, [pc, #552]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b02:	e001      	b.n	8005b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b14:	d004      	beq.n	8005b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f040 8099 	bne.w	8005c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d107      	bne.n	8005b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f925 	bl	8005d84 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f9c8 	bl	8005ee4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d13a      	bne.n	8005bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d035      	beq.n	8005bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a6e      	ldr	r2, [pc, #440]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005b72:	4b6e      	ldr	r3, [pc, #440]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b74:	e001      	b.n	8005b7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4969      	ldr	r1, [pc, #420]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b82:	428b      	cmp	r3, r1
 8005b84:	d101      	bne.n	8005b8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005b86:	4b69      	ldr	r3, [pc, #420]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b88:	e001      	b.n	8005b8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ba2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	f043 0202 	orr.w	r2, r3, #2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fa fd0a 	bl	80005e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b08      	cmp	r3, #8
 8005bdc:	f040 80c3 	bne.w	8005d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 80bd 	beq.w	8005d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bfa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a49      	ldr	r2, [pc, #292]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d101      	bne.n	8005c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005c06:	4b49      	ldr	r3, [pc, #292]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c08:	e001      	b.n	8005c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4944      	ldr	r1, [pc, #272]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c16:	428b      	cmp	r3, r1
 8005c18:	d101      	bne.n	8005c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005c1a:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c1c:	e001      	b.n	8005c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f043 0204 	orr.w	r2, r3, #4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fa fccc 	bl	80005e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c50:	e089      	b.n	8005d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d107      	bne.n	8005c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f8be 	bl	8005de8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f8fd 	bl	8005e80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d12f      	bne.n	8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d02a      	beq.n	8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ca8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cb6:	e001      	b.n	8005cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4919      	ldr	r1, [pc, #100]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	d101      	bne.n	8005ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005cc8:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cca:	e001      	b.n	8005cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	f043 0202 	orr.w	r2, r3, #2
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fa fc7c 	bl	80005e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d136      	bne.n	8005d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d031      	beq.n	8005d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a07      	ldr	r2, [pc, #28]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d10:	e001      	b.n	8005d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4902      	ldr	r1, [pc, #8]	; (8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d1e:	428b      	cmp	r3, r1
 8005d20:	d106      	bne.n	8005d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005d22:	4b02      	ldr	r3, [pc, #8]	; (8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d24:	e006      	b.n	8005d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005d26:	bf00      	nop
 8005d28:	40003800 	.word	0x40003800
 8005d2c:	40003400 	.word	0x40003400
 8005d30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d38:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d56:	f043 0204 	orr.w	r2, r3, #4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fa fc42 	bl	80005e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d64:	e000      	b.n	8005d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d66:	bf00      	nop
}
 8005d68:	bf00      	nop
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	1c99      	adds	r1, r3, #2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6251      	str	r1, [r2, #36]	; 0x24
 8005d96:	881a      	ldrh	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d113      	bne.n	8005dde <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff ffc9 	bl	8005d70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	1c99      	adds	r1, r3, #2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6251      	str	r1, [r2, #36]	; 0x24
 8005dfa:	8819      	ldrh	r1, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1d      	ldr	r2, [pc, #116]	; (8005e78 <I2SEx_TxISR_I2SExt+0x90>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d101      	bne.n	8005e0a <I2SEx_TxISR_I2SExt+0x22>
 8005e06:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <I2SEx_TxISR_I2SExt+0x94>)
 8005e08:	e001      	b.n	8005e0e <I2SEx_TxISR_I2SExt+0x26>
 8005e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e0e:	460a      	mov	r2, r1
 8005e10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d121      	bne.n	8005e6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <I2SEx_TxISR_I2SExt+0x90>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d101      	bne.n	8005e38 <I2SEx_TxISR_I2SExt+0x50>
 8005e34:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <I2SEx_TxISR_I2SExt+0x94>)
 8005e36:	e001      	b.n	8005e3c <I2SEx_TxISR_I2SExt+0x54>
 8005e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	490d      	ldr	r1, [pc, #52]	; (8005e78 <I2SEx_TxISR_I2SExt+0x90>)
 8005e44:	428b      	cmp	r3, r1
 8005e46:	d101      	bne.n	8005e4c <I2SEx_TxISR_I2SExt+0x64>
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <I2SEx_TxISR_I2SExt+0x94>)
 8005e4a:	e001      	b.n	8005e50 <I2SEx_TxISR_I2SExt+0x68>
 8005e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff81 	bl	8005d70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40003800 	.word	0x40003800
 8005e7c:	40003400 	.word	0x40003400

08005e80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68d8      	ldr	r0, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	1c99      	adds	r1, r3, #2
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e98:	b282      	uxth	r2, r0
 8005e9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d113      	bne.n	8005edc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ec2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ff4a 	bl	8005d70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <I2SEx_RxISR_I2SExt+0x90>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d101      	bne.n	8005efa <I2SEx_RxISR_I2SExt+0x16>
 8005ef6:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <I2SEx_RxISR_I2SExt+0x94>)
 8005ef8:	e001      	b.n	8005efe <I2SEx_RxISR_I2SExt+0x1a>
 8005efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005efe:	68d8      	ldr	r0, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	1c99      	adds	r1, r3, #2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f0a:	b282      	uxth	r2, r0
 8005f0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d121      	bne.n	8005f6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <I2SEx_RxISR_I2SExt+0x90>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d101      	bne.n	8005f34 <I2SEx_RxISR_I2SExt+0x50>
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <I2SEx_RxISR_I2SExt+0x94>)
 8005f32:	e001      	b.n	8005f38 <I2SEx_RxISR_I2SExt+0x54>
 8005f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	490d      	ldr	r1, [pc, #52]	; (8005f74 <I2SEx_RxISR_I2SExt+0x90>)
 8005f40:	428b      	cmp	r3, r1
 8005f42:	d101      	bne.n	8005f48 <I2SEx_RxISR_I2SExt+0x64>
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <I2SEx_RxISR_I2SExt+0x94>)
 8005f46:	e001      	b.n	8005f4c <I2SEx_RxISR_I2SExt+0x68>
 8005f48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff ff03 	bl	8005d70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40003800 	.word	0x40003800
 8005f78:	40003400 	.word	0x40003400

08005f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e267      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d075      	beq.n	8006086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f9a:	4b88      	ldr	r3, [pc, #544]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d00c      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa6:	4b85      	ldr	r3, [pc, #532]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d112      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fb2:	4b82      	ldr	r3, [pc, #520]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fbe:	d10b      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc0:	4b7e      	ldr	r3, [pc, #504]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d05b      	beq.n	8006084 <HAL_RCC_OscConfig+0x108>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d157      	bne.n	8006084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e242      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x74>
 8005fe2:	4b76      	ldr	r3, [pc, #472]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a75      	ldr	r2, [pc, #468]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e01d      	b.n	800602c <HAL_RCC_OscConfig+0xb0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x98>
 8005ffa:	4b70      	ldr	r3, [pc, #448]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a6f      	ldr	r2, [pc, #444]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	4b6d      	ldr	r3, [pc, #436]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a6c      	ldr	r2, [pc, #432]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 800600c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0xb0>
 8006014:	4b69      	ldr	r3, [pc, #420]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a68      	ldr	r2, [pc, #416]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 800601a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4b66      	ldr	r3, [pc, #408]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a65      	ldr	r2, [pc, #404]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800602a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d013      	beq.n	800605c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006034:	f7fc fbf8 	bl	8002828 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800603c:	f7fc fbf4 	bl	8002828 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e207      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604e:	4b5b      	ldr	r3, [pc, #364]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCC_OscConfig+0xc0>
 800605a:	e014      	b.n	8006086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605c:	f7fc fbe4 	bl	8002828 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006064:	f7fc fbe0 	bl	8002828 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b64      	cmp	r3, #100	; 0x64
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e1f3      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006076:	4b51      	ldr	r3, [pc, #324]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0xe8>
 8006082:	e000      	b.n	8006086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d063      	beq.n	800615a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006092:	4b4a      	ldr	r3, [pc, #296]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 030c 	and.w	r3, r3, #12
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609e:	4b47      	ldr	r3, [pc, #284]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d11c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060aa:	4b44      	ldr	r3, [pc, #272]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d116      	bne.n	80060e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060b6:	4b41      	ldr	r3, [pc, #260]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_RCC_OscConfig+0x152>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d001      	beq.n	80060ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e1c7      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ce:	4b3b      	ldr	r3, [pc, #236]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4937      	ldr	r1, [pc, #220]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e2:	e03a      	b.n	800615a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d020      	beq.n	800612e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ec:	4b34      	ldr	r3, [pc, #208]	; (80061c0 <HAL_RCC_OscConfig+0x244>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f2:	f7fc fb99 	bl	8002828 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060fa:	f7fc fb95 	bl	8002828 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e1a8      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610c:	4b2b      	ldr	r3, [pc, #172]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006118:	4b28      	ldr	r3, [pc, #160]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	4925      	ldr	r1, [pc, #148]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006128:	4313      	orrs	r3, r2
 800612a:	600b      	str	r3, [r1, #0]
 800612c:	e015      	b.n	800615a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_RCC_OscConfig+0x244>)
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fc fb78 	bl	8002828 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800613c:	f7fc fb74 	bl	8002828 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e187      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800614e:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d036      	beq.n	80061d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d016      	beq.n	800619c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800616e:	4b15      	ldr	r3, [pc, #84]	; (80061c4 <HAL_RCC_OscConfig+0x248>)
 8006170:	2201      	movs	r2, #1
 8006172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006174:	f7fc fb58 	bl	8002828 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617a:	e008      	b.n	800618e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800617c:	f7fc fb54 	bl	8002828 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e167      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <HAL_RCC_OscConfig+0x240>)
 8006190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f0      	beq.n	800617c <HAL_RCC_OscConfig+0x200>
 800619a:	e01b      	b.n	80061d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_OscConfig+0x248>)
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a2:	f7fc fb41 	bl	8002828 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a8:	e00e      	b.n	80061c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061aa:	f7fc fb3d 	bl	8002828 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d907      	bls.n	80061c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e150      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
 80061bc:	40023800 	.word	0x40023800
 80061c0:	42470000 	.word	0x42470000
 80061c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c8:	4b88      	ldr	r3, [pc, #544]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 80061ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1ea      	bne.n	80061aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8097 	beq.w	8006310 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061e6:	4b81      	ldr	r3, [pc, #516]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10f      	bne.n	8006212 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	4b7d      	ldr	r3, [pc, #500]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	4a7c      	ldr	r2, [pc, #496]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 80061fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006200:	6413      	str	r3, [r2, #64]	; 0x40
 8006202:	4b7a      	ldr	r3, [pc, #488]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620a:	60bb      	str	r3, [r7, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620e:	2301      	movs	r3, #1
 8006210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006212:	4b77      	ldr	r3, [pc, #476]	; (80063f0 <HAL_RCC_OscConfig+0x474>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d118      	bne.n	8006250 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800621e:	4b74      	ldr	r3, [pc, #464]	; (80063f0 <HAL_RCC_OscConfig+0x474>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a73      	ldr	r2, [pc, #460]	; (80063f0 <HAL_RCC_OscConfig+0x474>)
 8006224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622a:	f7fc fafd 	bl	8002828 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006232:	f7fc faf9 	bl	8002828 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e10c      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006244:	4b6a      	ldr	r3, [pc, #424]	; (80063f0 <HAL_RCC_OscConfig+0x474>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0f0      	beq.n	8006232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d106      	bne.n	8006266 <HAL_RCC_OscConfig+0x2ea>
 8006258:	4b64      	ldr	r3, [pc, #400]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	4a63      	ldr	r2, [pc, #396]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 800625e:	f043 0301 	orr.w	r3, r3, #1
 8006262:	6713      	str	r3, [r2, #112]	; 0x70
 8006264:	e01c      	b.n	80062a0 <HAL_RCC_OscConfig+0x324>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b05      	cmp	r3, #5
 800626c:	d10c      	bne.n	8006288 <HAL_RCC_OscConfig+0x30c>
 800626e:	4b5f      	ldr	r3, [pc, #380]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4a5e      	ldr	r2, [pc, #376]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 8006274:	f043 0304 	orr.w	r3, r3, #4
 8006278:	6713      	str	r3, [r2, #112]	; 0x70
 800627a:	4b5c      	ldr	r3, [pc, #368]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	4a5b      	ldr	r2, [pc, #364]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	6713      	str	r3, [r2, #112]	; 0x70
 8006286:	e00b      	b.n	80062a0 <HAL_RCC_OscConfig+0x324>
 8006288:	4b58      	ldr	r3, [pc, #352]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	4a57      	ldr	r2, [pc, #348]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 800628e:	f023 0301 	bic.w	r3, r3, #1
 8006292:	6713      	str	r3, [r2, #112]	; 0x70
 8006294:	4b55      	ldr	r3, [pc, #340]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 8006296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006298:	4a54      	ldr	r2, [pc, #336]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 800629a:	f023 0304 	bic.w	r3, r3, #4
 800629e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d015      	beq.n	80062d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a8:	f7fc fabe 	bl	8002828 <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ae:	e00a      	b.n	80062c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b0:	f7fc faba 	bl	8002828 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e0cb      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c6:	4b49      	ldr	r3, [pc, #292]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0ee      	beq.n	80062b0 <HAL_RCC_OscConfig+0x334>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d4:	f7fc faa8 	bl	8002828 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062da:	e00a      	b.n	80062f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062dc:	f7fc faa4 	bl	8002828 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e0b5      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f2:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1ee      	bne.n	80062dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d105      	bne.n	8006310 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006304:	4b39      	ldr	r3, [pc, #228]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	4a38      	ldr	r2, [pc, #224]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 800630a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800630e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80a1 	beq.w	800645c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800631a:	4b34      	ldr	r3, [pc, #208]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 030c 	and.w	r3, r3, #12
 8006322:	2b08      	cmp	r3, #8
 8006324:	d05c      	beq.n	80063e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d141      	bne.n	80063b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632e:	4b31      	ldr	r3, [pc, #196]	; (80063f4 <HAL_RCC_OscConfig+0x478>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006334:	f7fc fa78 	bl	8002828 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800633c:	f7fc fa74 	bl	8002828 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e087      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634e:	4b27      	ldr	r3, [pc, #156]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69da      	ldr	r2, [r3, #28]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	019b      	lsls	r3, r3, #6
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	3b01      	subs	r3, #1
 8006374:	041b      	lsls	r3, r3, #16
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	061b      	lsls	r3, r3, #24
 800637e:	491b      	ldr	r1, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 8006380:	4313      	orrs	r3, r2
 8006382:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <HAL_RCC_OscConfig+0x478>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638a:	f7fc fa4d 	bl	8002828 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006392:	f7fc fa49 	bl	8002828 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e05c      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x416>
 80063b0:	e054      	b.n	800645c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <HAL_RCC_OscConfig+0x478>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b8:	f7fc fa36 	bl	8002828 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fc fa32 	bl	8002828 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e045      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d2:	4b06      	ldr	r3, [pc, #24]	; (80063ec <HAL_RCC_OscConfig+0x470>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x444>
 80063de:	e03d      	b.n	800645c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e038      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
 80063ec:	40023800 	.word	0x40023800
 80063f0:	40007000 	.word	0x40007000
 80063f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063f8:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <HAL_RCC_OscConfig+0x4ec>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d028      	beq.n	8006458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006410:	429a      	cmp	r2, r3
 8006412:	d121      	bne.n	8006458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641e:	429a      	cmp	r2, r3
 8006420:	d11a      	bne.n	8006458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006428:	4013      	ands	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800642e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006430:	4293      	cmp	r3, r2
 8006432:	d111      	bne.n	8006458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	3b01      	subs	r3, #1
 8006442:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006444:	429a      	cmp	r2, r3
 8006446:	d107      	bne.n	8006458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e000      	b.n	800645e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40023800 	.word	0x40023800

0800646c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0cc      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006480:	4b68      	ldr	r3, [pc, #416]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d90c      	bls.n	80064a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b65      	ldr	r3, [pc, #404]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b63      	ldr	r3, [pc, #396]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d001      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0b8      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d020      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064c0:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	4a58      	ldr	r2, [pc, #352]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d8:	4b53      	ldr	r3, [pc, #332]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	4a52      	ldr	r2, [pc, #328]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e4:	4b50      	ldr	r3, [pc, #320]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	494d      	ldr	r1, [pc, #308]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d044      	beq.n	800658c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d107      	bne.n	800651a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650a:	4b47      	ldr	r3, [pc, #284]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d119      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e07f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d003      	beq.n	800652a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006526:	2b03      	cmp	r3, #3
 8006528:	d107      	bne.n	800653a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800652a:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e06f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800653a:	4b3b      	ldr	r3, [pc, #236]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e067      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800654a:	4b37      	ldr	r3, [pc, #220]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4934      	ldr	r1, [pc, #208]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	4313      	orrs	r3, r2
 800655a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800655c:	f7fc f964 	bl	8002828 <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006562:	e00a      	b.n	800657a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006564:	f7fc f960 	bl	8002828 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e04f      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657a:	4b2b      	ldr	r3, [pc, #172]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 020c 	and.w	r2, r3, #12
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	429a      	cmp	r2, r3
 800658a:	d1eb      	bne.n	8006564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800658c:	4b25      	ldr	r3, [pc, #148]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d20c      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b22      	ldr	r3, [pc, #136]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a2:	4b20      	ldr	r3, [pc, #128]	; (8006624 <HAL_RCC_ClockConfig+0x1b8>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d001      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e032      	b.n	800661a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c0:	4b19      	ldr	r3, [pc, #100]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4916      	ldr	r1, [pc, #88]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	490e      	ldr	r1, [pc, #56]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065f2:	f000 f821 	bl	8006638 <HAL_RCC_GetSysClockFreq>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	490a      	ldr	r1, [pc, #40]	; (800662c <HAL_RCC_ClockConfig+0x1c0>)
 8006604:	5ccb      	ldrb	r3, [r1, r3]
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	4a09      	ldr	r2, [pc, #36]	; (8006630 <HAL_RCC_ClockConfig+0x1c4>)
 800660c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <HAL_RCC_ClockConfig+0x1c8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fc f8c4 	bl	80027a0 <HAL_InitTick>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40023c00 	.word	0x40023c00
 8006628:	40023800 	.word	0x40023800
 800662c:	0800c3a8 	.word	0x0800c3a8
 8006630:	200002a4 	.word	0x200002a4
 8006634:	200002a8 	.word	0x200002a8

08006638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800663c:	b094      	sub	sp, #80	; 0x50
 800663e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	647b      	str	r3, [r7, #68]	; 0x44
 8006644:	2300      	movs	r3, #0
 8006646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006648:	2300      	movs	r3, #0
 800664a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006650:	4b79      	ldr	r3, [pc, #484]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 030c 	and.w	r3, r3, #12
 8006658:	2b08      	cmp	r3, #8
 800665a:	d00d      	beq.n	8006678 <HAL_RCC_GetSysClockFreq+0x40>
 800665c:	2b08      	cmp	r3, #8
 800665e:	f200 80e1 	bhi.w	8006824 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x34>
 8006666:	2b04      	cmp	r3, #4
 8006668:	d003      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0x3a>
 800666a:	e0db      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800666c:	4b73      	ldr	r3, [pc, #460]	; (800683c <HAL_RCC_GetSysClockFreq+0x204>)
 800666e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006670:	e0db      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006672:	4b73      	ldr	r3, [pc, #460]	; (8006840 <HAL_RCC_GetSysClockFreq+0x208>)
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006676:	e0d8      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006678:	4b6f      	ldr	r3, [pc, #444]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006682:	4b6d      	ldr	r3, [pc, #436]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d063      	beq.n	8006756 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800668e:	4b6a      	ldr	r3, [pc, #424]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	099b      	lsrs	r3, r3, #6
 8006694:	2200      	movs	r2, #0
 8006696:	63bb      	str	r3, [r7, #56]	; 0x38
 8006698:	63fa      	str	r2, [r7, #60]	; 0x3c
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
 80066a2:	2300      	movs	r3, #0
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
 80066a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066aa:	4622      	mov	r2, r4
 80066ac:	462b      	mov	r3, r5
 80066ae:	f04f 0000 	mov.w	r0, #0
 80066b2:	f04f 0100 	mov.w	r1, #0
 80066b6:	0159      	lsls	r1, r3, #5
 80066b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066bc:	0150      	lsls	r0, r2, #5
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4621      	mov	r1, r4
 80066c4:	1a51      	subs	r1, r2, r1
 80066c6:	6139      	str	r1, [r7, #16]
 80066c8:	4629      	mov	r1, r5
 80066ca:	eb63 0301 	sbc.w	r3, r3, r1
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066dc:	4659      	mov	r1, fp
 80066de:	018b      	lsls	r3, r1, #6
 80066e0:	4651      	mov	r1, sl
 80066e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066e6:	4651      	mov	r1, sl
 80066e8:	018a      	lsls	r2, r1, #6
 80066ea:	4651      	mov	r1, sl
 80066ec:	ebb2 0801 	subs.w	r8, r2, r1
 80066f0:	4659      	mov	r1, fp
 80066f2:	eb63 0901 	sbc.w	r9, r3, r1
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800670a:	4690      	mov	r8, r2
 800670c:	4699      	mov	r9, r3
 800670e:	4623      	mov	r3, r4
 8006710:	eb18 0303 	adds.w	r3, r8, r3
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	462b      	mov	r3, r5
 8006718:	eb49 0303 	adc.w	r3, r9, r3
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800672a:	4629      	mov	r1, r5
 800672c:	024b      	lsls	r3, r1, #9
 800672e:	4621      	mov	r1, r4
 8006730:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006734:	4621      	mov	r1, r4
 8006736:	024a      	lsls	r2, r1, #9
 8006738:	4610      	mov	r0, r2
 800673a:	4619      	mov	r1, r3
 800673c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673e:	2200      	movs	r2, #0
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006744:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006748:	f7f9 fd92 	bl	8000270 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4613      	mov	r3, r2
 8006752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006754:	e058      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006756:	4b38      	ldr	r3, [pc, #224]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	099b      	lsrs	r3, r3, #6
 800675c:	2200      	movs	r2, #0
 800675e:	4618      	mov	r0, r3
 8006760:	4611      	mov	r1, r2
 8006762:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	2300      	movs	r3, #0
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
 800676c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	0159      	lsls	r1, r3, #5
 800677e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006782:	0150      	lsls	r0, r2, #5
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4641      	mov	r1, r8
 800678a:	ebb2 0a01 	subs.w	sl, r2, r1
 800678e:	4649      	mov	r1, r9
 8006790:	eb63 0b01 	sbc.w	fp, r3, r1
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067a8:	ebb2 040a 	subs.w	r4, r2, sl
 80067ac:	eb63 050b 	sbc.w	r5, r3, fp
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	00eb      	lsls	r3, r5, #3
 80067ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067be:	00e2      	lsls	r2, r4, #3
 80067c0:	4614      	mov	r4, r2
 80067c2:	461d      	mov	r5, r3
 80067c4:	4643      	mov	r3, r8
 80067c6:	18e3      	adds	r3, r4, r3
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	464b      	mov	r3, r9
 80067cc:	eb45 0303 	adc.w	r3, r5, r3
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067de:	4629      	mov	r1, r5
 80067e0:	028b      	lsls	r3, r1, #10
 80067e2:	4621      	mov	r1, r4
 80067e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067e8:	4621      	mov	r1, r4
 80067ea:	028a      	lsls	r2, r1, #10
 80067ec:	4610      	mov	r0, r2
 80067ee:	4619      	mov	r1, r3
 80067f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f2:	2200      	movs	r2, #0
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	61fa      	str	r2, [r7, #28]
 80067f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067fc:	f7f9 fd38 	bl	8000270 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4613      	mov	r3, r2
 8006806:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <HAL_RCC_GetSysClockFreq+0x200>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	3301      	adds	r3, #1
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800681a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006822:	e002      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <HAL_RCC_GetSysClockFreq+0x204>)
 8006826:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800682a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800682c:	4618      	mov	r0, r3
 800682e:	3750      	adds	r7, #80	; 0x50
 8006830:	46bd      	mov	sp, r7
 8006832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800
 800683c:	00f42400 	.word	0x00f42400
 8006840:	007a1200 	.word	0x007a1200

08006844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006848:	4b03      	ldr	r3, [pc, #12]	; (8006858 <HAL_RCC_GetHCLKFreq+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	200002a4 	.word	0x200002a4

0800685c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006860:	f7ff fff0 	bl	8006844 <HAL_RCC_GetHCLKFreq>
 8006864:	4602      	mov	r2, r0
 8006866:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	0a9b      	lsrs	r3, r3, #10
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	4903      	ldr	r1, [pc, #12]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006872:	5ccb      	ldrb	r3, [r1, r3]
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40023800 	.word	0x40023800
 8006880:	0800c3b8 	.word	0x0800c3b8

08006884 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d105      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d035      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068ac:	4b62      	ldr	r3, [pc, #392]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068b2:	f7fb ffb9 	bl	8002828 <HAL_GetTick>
 80068b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068b8:	e008      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068ba:	f7fb ffb5 	bl	8002828 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e0b0      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068cc:	4b5b      	ldr	r3, [pc, #364]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f0      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	019a      	lsls	r2, r3, #6
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	071b      	lsls	r3, r3, #28
 80068e4:	4955      	ldr	r1, [pc, #340]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068ec:	4b52      	ldr	r3, [pc, #328]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068f2:	f7fb ff99 	bl	8002828 <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068f8:	e008      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068fa:	f7fb ff95 	bl	8002828 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	d901      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e090      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800690c:	4b4b      	ldr	r3, [pc, #300]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f0      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8083 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	4b44      	ldr	r3, [pc, #272]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	4a43      	ldr	r2, [pc, #268]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006934:	6413      	str	r3, [r2, #64]	; 0x40
 8006936:	4b41      	ldr	r3, [pc, #260]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006942:	4b3f      	ldr	r3, [pc, #252]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a3e      	ldr	r2, [pc, #248]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800694e:	f7fb ff6b 	bl	8002828 <HAL_GetTick>
 8006952:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006956:	f7fb ff67 	bl	8002828 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e062      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006968:	4b35      	ldr	r3, [pc, #212]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006974:	4b31      	ldr	r3, [pc, #196]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02f      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	429a      	cmp	r2, r3
 8006990:	d028      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006992:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800699c:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069a2:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069a8:	4a24      	ldr	r2, [pc, #144]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069ae:	4b23      	ldr	r3, [pc, #140]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d114      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069ba:	f7fb ff35 	bl	8002828 <HAL_GetTick>
 80069be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c0:	e00a      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c2:	f7fb ff31 	bl	8002828 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e02a      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d8:	4b18      	ldr	r3, [pc, #96]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0ee      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a06:	490d      	ldr	r1, [pc, #52]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	608b      	str	r3, [r1, #8]
 8006a0c:	e005      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a26:	4905      	ldr	r1, [pc, #20]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	42470068 	.word	0x42470068
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	40007000 	.word	0x40007000
 8006a44:	42470e40 	.word	0x42470e40

08006a48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d13e      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006a66:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d12f      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a7e:	617b      	str	r3, [r7, #20]
          break;
 8006a80:	e02f      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006a82:	4b1c      	ldr	r3, [pc, #112]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a8e:	d108      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a90:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a98:	4a18      	ldr	r2, [pc, #96]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	e007      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aaa:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab8:	099b      	lsrs	r3, r3, #6
 8006aba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006acc:	0f1b      	lsrs	r3, r3, #28
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad8:	617b      	str	r3, [r7, #20]
          break;
 8006ada:	e002      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
          break;
 8006ae0:	bf00      	nop
        }
      }
      break;
 8006ae2:	bf00      	nop
    }
  }
  return frequency;
 8006ae4:	697b      	ldr	r3, [r7, #20]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40023800 	.word	0x40023800
 8006af8:	00bb8000 	.word	0x00bb8000
 8006afc:	007a1200 	.word	0x007a1200
 8006b00:	00f42400 	.word	0x00f42400

08006b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e07b      	b.n	8006c0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d108      	bne.n	8006b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b26:	d009      	beq.n	8006b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	61da      	str	r2, [r3, #28]
 8006b2e:	e005      	b.n	8006b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fb fcea 	bl	8002530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc0:	ea42 0103 	orr.w	r1, r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	0c1b      	lsrs	r3, r3, #16
 8006bda:	f003 0104 	and.w	r1, r3, #4
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	f003 0210 	and.w	r2, r3, #16
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b088      	sub	sp, #32
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	4613      	mov	r3, r2
 8006c24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_SPI_Transmit+0x22>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e126      	b.n	8006e86 <HAL_SPI_Transmit+0x270>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c40:	f7fb fdf2 	bl	8002828 <HAL_GetTick>
 8006c44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d002      	beq.n	8006c5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c56:	2302      	movs	r3, #2
 8006c58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c5a:	e10b      	b.n	8006e74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_SPI_Transmit+0x52>
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d102      	bne.n	8006c6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c6c:	e102      	b.n	8006e74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2203      	movs	r2, #3
 8006c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	88fa      	ldrh	r2, [r7, #6]
 8006c8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb4:	d10f      	bne.n	8006cd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	d007      	beq.n	8006cf4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cfc:	d14b      	bne.n	8006d96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_SPI_Transmit+0xf6>
 8006d06:	8afb      	ldrh	r3, [r7, #22]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d13e      	bne.n	8006d8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	881a      	ldrh	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	1c9a      	adds	r2, r3, #2
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d30:	e02b      	b.n	8006d8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d112      	bne.n	8006d66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	881a      	ldrh	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	1c9a      	adds	r2, r3, #2
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d64:	e011      	b.n	8006d8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d66:	f7fb fd5f 	bl	8002828 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d803      	bhi.n	8006d7e <HAL_SPI_Transmit+0x168>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d7c:	d102      	bne.n	8006d84 <HAL_SPI_Transmit+0x16e>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d102      	bne.n	8006d8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d88:	e074      	b.n	8006e74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ce      	bne.n	8006d32 <HAL_SPI_Transmit+0x11c>
 8006d94:	e04c      	b.n	8006e30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_SPI_Transmit+0x18e>
 8006d9e:	8afb      	ldrh	r3, [r7, #22]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d140      	bne.n	8006e26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	330c      	adds	r3, #12
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dca:	e02c      	b.n	8006e26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d113      	bne.n	8006e02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	330c      	adds	r3, #12
 8006de4:	7812      	ldrb	r2, [r2, #0]
 8006de6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e00:	e011      	b.n	8006e26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e02:	f7fb fd11 	bl	8002828 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d803      	bhi.n	8006e1a <HAL_SPI_Transmit+0x204>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e18:	d102      	bne.n	8006e20 <HAL_SPI_Transmit+0x20a>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d102      	bne.n	8006e26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e24:	e026      	b.n	8006e74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1cd      	bne.n	8006dcc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f8b3 	bl	8006fa0 <SPI_EndRxTxTransaction>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	77fb      	strb	r3, [r7, #31]
 8006e70:	e000      	b.n	8006e74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ea0:	f7fb fcc2 	bl	8002828 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	1a9b      	subs	r3, r3, r2
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	4413      	add	r3, r2
 8006eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eb0:	f7fb fcba 	bl	8002828 <HAL_GetTick>
 8006eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eb6:	4b39      	ldr	r3, [pc, #228]	; (8006f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	015b      	lsls	r3, r3, #5
 8006ebc:	0d1b      	lsrs	r3, r3, #20
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	fb02 f303 	mul.w	r3, r2, r3
 8006ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ec6:	e054      	b.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ece:	d050      	beq.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ed0:	f7fb fcaa 	bl	8002828 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d902      	bls.n	8006ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d13d      	bne.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006efe:	d111      	bne.n	8006f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f08:	d004      	beq.n	8006f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f12:	d107      	bne.n	8006f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2c:	d10f      	bne.n	8006f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e017      	b.n	8006f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d19b      	bne.n	8006ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3720      	adds	r7, #32
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	200002a4 	.word	0x200002a4

08006fa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fac:	4b1b      	ldr	r3, [pc, #108]	; (800701c <SPI_EndRxTxTransaction+0x7c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a1b      	ldr	r2, [pc, #108]	; (8007020 <SPI_EndRxTxTransaction+0x80>)
 8006fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb6:	0d5b      	lsrs	r3, r3, #21
 8006fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fbc:	fb02 f303 	mul.w	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fca:	d112      	bne.n	8006ff2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2180      	movs	r1, #128	; 0x80
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff ff5a 	bl	8006e90 <SPI_WaitFlagStateUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d016      	beq.n	8007010 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	f043 0220 	orr.w	r2, r3, #32
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e00f      	b.n	8007012 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007008:	2b80      	cmp	r3, #128	; 0x80
 800700a:	d0f2      	beq.n	8006ff2 <SPI_EndRxTxTransaction+0x52>
 800700c:	e000      	b.n	8007010 <SPI_EndRxTxTransaction+0x70>
        break;
 800700e:	bf00      	nop
  }

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	200002a4 	.word	0x200002a4
 8007020:	165e9f81 	.word	0x165e9f81

08007024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007024:	b084      	sub	sp, #16
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	f107 001c 	add.w	r0, r7, #28
 8007032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	2b01      	cmp	r3, #1
 800703a:	d122      	bne.n	8007082 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007066:	2b01      	cmp	r3, #1
 8007068:	d105      	bne.n	8007076 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f9a0 	bl	80073bc <USB_CoreReset>
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]
 8007080:	e01a      	b.n	80070b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f994 	bl	80073bc <USB_CoreReset>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
 80070aa:	e005      	b.n	80070b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d10b      	bne.n	80070d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f043 0206 	orr.w	r2, r3, #6
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f043 0220 	orr.w	r2, r3, #32
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070e2:	b004      	add	sp, #16
 80070e4:	4770      	bx	lr

080070e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f043 0201 	orr.w	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f023 0201 	bic.w	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d115      	bne.n	8007178 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007158:	2001      	movs	r0, #1
 800715a:	f7fb fb71 	bl	8002840 <HAL_Delay>
      ms++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f91a 	bl	800739e <USB_GetMode>
 800716a:	4603      	mov	r3, r0
 800716c:	2b01      	cmp	r3, #1
 800716e:	d01e      	beq.n	80071ae <USB_SetCurrentMode+0x84>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b31      	cmp	r3, #49	; 0x31
 8007174:	d9f0      	bls.n	8007158 <USB_SetCurrentMode+0x2e>
 8007176:	e01a      	b.n	80071ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007178:	78fb      	ldrb	r3, [r7, #3]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d115      	bne.n	80071aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800718a:	2001      	movs	r0, #1
 800718c:	f7fb fb58 	bl	8002840 <HAL_Delay>
      ms++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f901 	bl	800739e <USB_GetMode>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <USB_SetCurrentMode+0x84>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b31      	cmp	r3, #49	; 0x31
 80071a6:	d9f0      	bls.n	800718a <USB_SetCurrentMode+0x60>
 80071a8:	e001      	b.n	80071ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e005      	b.n	80071ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b32      	cmp	r3, #50	; 0x32
 80071b2:	d101      	bne.n	80071b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	019b      	lsls	r3, r3, #6
 80071d6:	f043 0220 	orr.w	r2, r3, #32
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3301      	adds	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	4a08      	ldr	r2, [pc, #32]	; (8007208 <USB_FlushTxFifo+0x44>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d901      	bls.n	80071ee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e006      	b.n	80071fc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d0f1      	beq.n	80071de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	00030d40 	.word	0x00030d40

0800720c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2210      	movs	r2, #16
 800721c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3301      	adds	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	4a08      	ldr	r2, [pc, #32]	; (8007248 <USB_FlushRxFifo+0x3c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d901      	bls.n	800722e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e006      	b.n	800723c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b10      	cmp	r3, #16
 8007238:	d0f1      	beq.n	800721e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	00030d40 	.word	0x00030d40

0800724c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4611      	mov	r1, r2
 8007258:	461a      	mov	r2, r3
 800725a:	460b      	mov	r3, r1
 800725c:	71fb      	strb	r3, [r7, #7]
 800725e:	4613      	mov	r3, r2
 8007260:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800726a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800726e:	2b00      	cmp	r3, #0
 8007270:	d123      	bne.n	80072ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007272:	88bb      	ldrh	r3, [r7, #4]
 8007274:	3303      	adds	r3, #3
 8007276:	089b      	lsrs	r3, r3, #2
 8007278:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800727a:	2300      	movs	r3, #0
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e018      	b.n	80072b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	031a      	lsls	r2, r3, #12
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4413      	add	r3, r2
 8007288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728c:	461a      	mov	r2, r3
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	3301      	adds	r3, #1
 8007298:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	3301      	adds	r3, #1
 800729e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	3301      	adds	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	3301      	adds	r3, #1
 80072aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	3301      	adds	r3, #1
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3e2      	bcc.n	8007280 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3724      	adds	r7, #36	; 0x24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b08b      	sub	sp, #44	; 0x2c
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	4613      	mov	r3, r2
 80072d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	089b      	lsrs	r3, r3, #2
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072ee:	2300      	movs	r3, #0
 80072f0:	623b      	str	r3, [r7, #32]
 80072f2:	e014      	b.n	800731e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	3301      	adds	r3, #1
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	3301      	adds	r3, #1
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	3301      	adds	r3, #1
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	3301      	adds	r3, #1
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	3301      	adds	r3, #1
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	6a3a      	ldr	r2, [r7, #32]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	429a      	cmp	r2, r3
 8007324:	d3e6      	bcc.n	80072f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007326:	8bfb      	ldrh	r3, [r7, #30]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01e      	beq.n	800736a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007336:	461a      	mov	r2, r3
 8007338:	f107 0310 	add.w	r3, r7, #16
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
 800734c:	b2da      	uxtb	r2, r3
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	701a      	strb	r2, [r3, #0]
      i++;
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	3301      	adds	r3, #1
 8007356:	623b      	str	r3, [r7, #32]
      pDest++;
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	3301      	adds	r3, #1
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800735e:	8bfb      	ldrh	r3, [r7, #30]
 8007360:	3b01      	subs	r3, #1
 8007362:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007364:	8bfb      	ldrh	r3, [r7, #30]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1ea      	bne.n	8007340 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800736c:	4618      	mov	r0, r3
 800736e:	372c      	adds	r7, #44	; 0x2c
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4013      	ands	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007390:	68fb      	ldr	r3, [r7, #12]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f003 0301 	and.w	r3, r3, #1
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
	...

080073bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	4a13      	ldr	r2, [pc, #76]	; (800741c <USB_CoreReset+0x60>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d901      	bls.n	80073d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e01a      	b.n	800740e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	daf3      	bge.n	80073c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f043 0201 	orr.w	r2, r3, #1
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	4a09      	ldr	r2, [pc, #36]	; (800741c <USB_CoreReset+0x60>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d901      	bls.n	8007400 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e006      	b.n	800740e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b01      	cmp	r3, #1
 800740a:	d0f1      	beq.n	80073f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	00030d40 	.word	0x00030d40

08007420 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007420:	b084      	sub	sp, #16
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	f107 001c 	add.w	r0, r7, #28
 800742e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800743c:	461a      	mov	r2, r3
 800743e:	2300      	movs	r3, #0
 8007440:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007446:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746e:	2b00      	cmp	r3, #0
 8007470:	d018      	beq.n	80074a4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	2b01      	cmp	r3, #1
 8007476:	d10a      	bne.n	800748e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007486:	f043 0304 	orr.w	r3, r3, #4
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	e014      	b.n	80074b8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800749c:	f023 0304 	bic.w	r3, r3, #4
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	e009      	b.n	80074b8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074b2:	f023 0304 	bic.w	r3, r3, #4
 80074b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80074b8:	2110      	movs	r1, #16
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff fe82 	bl	80071c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fea3 	bl	800720c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	e015      	b.n	80074f8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d8:	461a      	mov	r2, r3
 80074da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ec:	461a      	mov	r2, r3
 80074ee:	2300      	movs	r3, #0
 80074f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3e5      	bcc.n	80074cc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800750c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007520:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <USB_HostInit+0x154>)
 8007526:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a13      	ldr	r2, [pc, #76]	; (8007578 <USB_HostInit+0x158>)
 800752c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007530:	e009      	b.n	8007546 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2280      	movs	r2, #128	; 0x80
 8007536:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <USB_HostInit+0x15c>)
 800753c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a0f      	ldr	r2, [pc, #60]	; (8007580 <USB_HostInit+0x160>)
 8007542:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	f043 0210 	orr.w	r2, r3, #16
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699a      	ldr	r2, [r3, #24]
 800755c:	4b09      	ldr	r3, [pc, #36]	; (8007584 <USB_HostInit+0x164>)
 800755e:	4313      	orrs	r3, r2
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007570:	b004      	add	sp, #16
 8007572:	4770      	bx	lr
 8007574:	01000200 	.word	0x01000200
 8007578:	00e00300 	.word	0x00e00300
 800757c:	00600080 	.word	0x00600080
 8007580:	004000e0 	.word	0x004000e0
 8007584:	a3200008 	.word	0xa3200008

08007588 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	68f9      	ldr	r1, [r7, #12]
 80075bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80075c0:	4313      	orrs	r3, r2
 80075c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d107      	bne.n	80075da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075d0:	461a      	mov	r2, r3
 80075d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80075d6:	6053      	str	r3, [r2, #4]
 80075d8:	e009      	b.n	80075ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d106      	bne.n	80075ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075e6:	461a      	mov	r2, r3
 80075e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80075ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800761c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800762a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800762c:	2064      	movs	r0, #100	; 0x64
 800762e:	f7fb f907 	bl	8002840 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800763a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800763e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007640:	200a      	movs	r0, #10
 8007642:	f7fb f8fd 	bl	8002840 <HAL_Delay>

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007674:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d109      	bne.n	8007694 <USB_DriveVbus+0x44>
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d106      	bne.n	8007694 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800768e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007692:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800769a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769e:	d109      	bne.n	80076b4 <USB_DriveVbus+0x64>
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80076ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076b2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	0c5b      	lsrs	r3, r3, #17
 80076e0:	f003 0303 	and.w	r3, r3, #3
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	b29b      	uxth	r3, r3
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
	...

08007714 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	4608      	mov	r0, r1
 800771e:	4611      	mov	r1, r2
 8007720:	461a      	mov	r2, r3
 8007722:	4603      	mov	r3, r0
 8007724:	70fb      	strb	r3, [r7, #3]
 8007726:	460b      	mov	r3, r1
 8007728:	70bb      	strb	r3, [r7, #2]
 800772a:	4613      	mov	r3, r2
 800772c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	4413      	add	r3, r2
 800773e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007742:	461a      	mov	r2, r3
 8007744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007748:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800774a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800774e:	2b03      	cmp	r3, #3
 8007750:	d87e      	bhi.n	8007850 <USB_HC_Init+0x13c>
 8007752:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <USB_HC_Init+0x44>)
 8007754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007758:	08007769 	.word	0x08007769
 800775c:	08007813 	.word	0x08007813
 8007760:	08007769 	.word	0x08007769
 8007764:	080077d5 	.word	0x080077d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4413      	add	r3, r2
 8007770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007774:	461a      	mov	r2, r3
 8007776:	f240 439d 	movw	r3, #1181	; 0x49d
 800777a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800777c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007780:	2b00      	cmp	r3, #0
 8007782:	da10      	bge.n	80077a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	4413      	add	r3, r2
 800778c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	440a      	add	r2, r1
 800779a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800779e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80077a4:	e057      	b.n	8007856 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d051      	beq.n	8007856 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	78fa      	ldrb	r2, [r7, #3]
 80077c2:	0151      	lsls	r1, r2, #5
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	440a      	add	r2, r1
 80077c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80077d0:	60d3      	str	r3, [r2, #12]
      break;
 80077d2:	e040      	b.n	8007856 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077e0:	461a      	mov	r2, r3
 80077e2:	f240 639d 	movw	r3, #1693	; 0x69d
 80077e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da34      	bge.n	800785a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	440a      	add	r2, r1
 8007806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800780a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007810:	e023      	b.n	800785a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007812:	78fb      	ldrb	r3, [r7, #3]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4413      	add	r3, r2
 800781a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781e:	461a      	mov	r2, r3
 8007820:	f240 2325 	movw	r3, #549	; 0x225
 8007824:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007826:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800782a:	2b00      	cmp	r3, #0
 800782c:	da17      	bge.n	800785e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	4413      	add	r3, r2
 8007836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	78fa      	ldrb	r2, [r7, #3]
 800783e:	0151      	lsls	r1, r2, #5
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	440a      	add	r2, r1
 8007844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007848:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800784c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800784e:	e006      	b.n	800785e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	77fb      	strb	r3, [r7, #31]
      break;
 8007854:	e004      	b.n	8007860 <USB_HC_Init+0x14c>
      break;
 8007856:	bf00      	nop
 8007858:	e002      	b.n	8007860 <USB_HC_Init+0x14c>
      break;
 800785a:	bf00      	nop
 800785c:	e000      	b.n	8007860 <USB_HC_Init+0x14c>
      break;
 800785e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007866:	699a      	ldr	r2, [r3, #24]
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	2101      	movs	r1, #1
 8007870:	fa01 f303 	lsl.w	r3, r1, r3
 8007874:	6939      	ldr	r1, [r7, #16]
 8007876:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800787a:	4313      	orrs	r3, r2
 800787c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800788a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800788e:	2b00      	cmp	r3, #0
 8007890:	da03      	bge.n	800789a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007896:	61bb      	str	r3, [r7, #24]
 8007898:	e001      	b.n	800789e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff ff0f 	bl	80076c2 <USB_GetHostSpeed>
 80078a4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80078a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d106      	bne.n	80078bc <USB_HC_Init+0x1a8>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d003      	beq.n	80078bc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80078b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e001      	b.n	80078c0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078c0:	787b      	ldrb	r3, [r7, #1]
 80078c2:	059b      	lsls	r3, r3, #22
 80078c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80078c8:	78bb      	ldrb	r3, [r7, #2]
 80078ca:	02db      	lsls	r3, r3, #11
 80078cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078d6:	049b      	lsls	r3, r3, #18
 80078d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80078dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80078de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80078e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	0159      	lsls	r1, r3, #5
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	440b      	add	r3, r1
 80078f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078fc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80078fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007902:	2b03      	cmp	r3, #3
 8007904:	d10f      	bne.n	8007926 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4413      	add	r3, r2
 800790e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	78fa      	ldrb	r2, [r7, #3]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	440a      	add	r2, r1
 800791c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007924:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007926:	7ffb      	ldrb	r3, [r7, #31]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3720      	adds	r7, #32
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08c      	sub	sp, #48	; 0x30
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800794c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007956:	2b00      	cmp	r3, #0
 8007958:	d02d      	beq.n	80079b6 <USB_HC_StartXfer+0x86>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	791b      	ldrb	r3, [r3, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d129      	bne.n	80079b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d117      	bne.n	8007998 <USB_HC_StartXfer+0x68>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	79db      	ldrb	r3, [r3, #7]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <USB_HC_StartXfer+0x48>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	79db      	ldrb	r3, [r3, #7]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d10f      	bne.n	8007998 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	4413      	add	r3, r2
 8007980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	6a3a      	ldr	r2, [r7, #32]
 800798c:	440a      	add	r2, r1
 800798e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007996:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <USB_HC_StartXfer+0x86>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	795b      	ldrb	r3, [r3, #5]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d107      	bne.n	80079b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	4619      	mov	r1, r3
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fa2f 	bl	8007e10 <USB_DoPing>
      return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e0f8      	b.n	8007ba8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d018      	beq.n	80079f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	8912      	ldrh	r2, [r2, #8]
 80079c6:	4413      	add	r3, r2
 80079c8:	3b01      	subs	r3, #1
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	8912      	ldrh	r2, [r2, #8]
 80079ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80079d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80079d6:	8b7b      	ldrh	r3, [r7, #26]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d90b      	bls.n	80079f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80079dc:	8b7b      	ldrh	r3, [r7, #26]
 80079de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	8912      	ldrh	r2, [r2, #8]
 80079e6:	fb03 f202 	mul.w	r2, r3, r2
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	611a      	str	r2, [r3, #16]
 80079ee:	e001      	b.n	80079f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80079f0:	2301      	movs	r3, #1
 80079f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	78db      	ldrb	r3, [r3, #3]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d007      	beq.n	8007a0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	8912      	ldrh	r2, [r2, #8]
 8007a02:	fb03 f202 	mul.w	r2, r3, r2
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	611a      	str	r2, [r3, #16]
 8007a0a:	e003      	b.n	8007a14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a1e:	04d9      	lsls	r1, r3, #19
 8007a20:	4b63      	ldr	r3, [pc, #396]	; (8007bb0 <USB_HC_StartXfer+0x280>)
 8007a22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	7a9b      	ldrb	r3, [r3, #10]
 8007a2a:	075b      	lsls	r3, r3, #29
 8007a2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a30:	69f9      	ldr	r1, [r7, #28]
 8007a32:	0148      	lsls	r0, r1, #5
 8007a34:	6a39      	ldr	r1, [r7, #32]
 8007a36:	4401      	add	r1, r0
 8007a38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	68d9      	ldr	r1, [r3, #12]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a56:	460a      	mov	r2, r1
 8007a58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bf0c      	ite	eq
 8007a6a:	2301      	moveq	r3, #1
 8007a6c:	2300      	movne	r3, #0
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	0151      	lsls	r1, r2, #5
 8007a84:	6a3a      	ldr	r2, [r7, #32]
 8007a86:	440a      	add	r2, r1
 8007a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	7e7b      	ldrb	r3, [r7, #25]
 8007aa2:	075b      	lsls	r3, r3, #29
 8007aa4:	69f9      	ldr	r1, [r7, #28]
 8007aa6:	0148      	lsls	r0, r1, #5
 8007aa8:	6a39      	ldr	r1, [r7, #32]
 8007aaa:	4401      	add	r1, r0
 8007aac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007aca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	78db      	ldrb	r3, [r3, #3]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	e003      	b.n	8007ae6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ae4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afa:	461a      	mov	r2, r3
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e04e      	b.n	8007ba8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	78db      	ldrb	r3, [r3, #3]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d149      	bne.n	8007ba6 <USB_HC_StartXfer+0x276>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d045      	beq.n	8007ba6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	79db      	ldrb	r3, [r3, #7]
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d830      	bhi.n	8007b84 <USB_HC_StartXfer+0x254>
 8007b22:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <USB_HC_StartXfer+0x1f8>)
 8007b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b28:	08007b39 	.word	0x08007b39
 8007b2c:	08007b5d 	.word	0x08007b5d
 8007b30:	08007b39 	.word	0x08007b39
 8007b34:	08007b5d 	.word	0x08007b5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	3303      	adds	r3, #3
 8007b3e:	089b      	lsrs	r3, r3, #2
 8007b40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007b42:	8afa      	ldrh	r2, [r7, #22]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d91c      	bls.n	8007b88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f043 0220 	orr.w	r2, r3, #32
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b5a:	e015      	b.n	8007b88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	3303      	adds	r3, #3
 8007b62:	089b      	lsrs	r3, r3, #2
 8007b64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007b66:	8afa      	ldrh	r2, [r7, #22]
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d90a      	bls.n	8007b8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b82:	e003      	b.n	8007b8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007b84:	bf00      	nop
 8007b86:	e002      	b.n	8007b8e <USB_HC_StartXfer+0x25e>
        break;
 8007b88:	bf00      	nop
 8007b8a:	e000      	b.n	8007b8e <USB_HC_StartXfer+0x25e>
        break;
 8007b8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	68d9      	ldr	r1, [r3, #12]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	785a      	ldrb	r2, [r3, #1]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	9000      	str	r0, [sp, #0]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff fb53 	bl	800724c <USB_WritePacket>
  }

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3728      	adds	r7, #40	; 0x28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	1ff80000 	.word	0x1ff80000

08007bb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	b29b      	uxth	r3, r3
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b089      	sub	sp, #36	; 0x24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	0c9b      	lsrs	r3, r3, #18
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	0fdb      	lsrs	r3, r3, #31
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	d104      	bne.n	8007c30 <USB_HC_Halt+0x5a>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e0e8      	b.n	8007e02 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <USB_HC_Halt+0x66>
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d173      	bne.n	8007d24 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	0151      	lsls	r1, r2, #5
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	440a      	add	r2, r1
 8007c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f040 80cb 	bne.w	8007e00 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d143      	bne.n	8007cfe <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	0151      	lsls	r1, r2, #5
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	440a      	add	r2, r1
 8007cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cb4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cd4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ce2:	d81d      	bhi.n	8007d20 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cfa:	d0ec      	beq.n	8007cd6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cfc:	e080      	b.n	8007e00 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d1c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d1e:	e06f      	b.n	8007e00 <USB_HC_Halt+0x22a>
            break;
 8007d20:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d22:	e06d      	b.n	8007e00 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d42:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d143      	bne.n	8007ddc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	0151      	lsls	r1, r2, #5
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	440a      	add	r2, r1
 8007d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007db2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	3301      	adds	r3, #1
 8007db8:	61fb      	str	r3, [r7, #28]
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dc0:	d81d      	bhi.n	8007dfe <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd8:	d0ec      	beq.n	8007db4 <USB_HC_Halt+0x1de>
 8007dda:	e011      	b.n	8007e00 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	0151      	lsls	r1, r2, #5
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	440a      	add	r2, r1
 8007df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	e000      	b.n	8007e00 <USB_HC_Halt+0x22a>
          break;
 8007dfe:	bf00      	nop
    }
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3724      	adds	r7, #36	; 0x24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
	...

08007e10 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007e24:	2301      	movs	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	04da      	lsls	r2, r3, #19
 8007e2c:	4b15      	ldr	r3, [pc, #84]	; (8007e84 <USB_DoPing+0x74>)
 8007e2e:	4013      	ands	r3, r2
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e58:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e60:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	1ff80000 	.word	0x1ff80000

08007e88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7ff f935 	bl	8007108 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007e9e:	2110      	movs	r1, #16
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff f98f 	bl	80071c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff f9b0 	bl	800720c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
 8007eb0:	e01f      	b.n	8007ef2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ec8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ed0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ed8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	613b      	str	r3, [r7, #16]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b0f      	cmp	r3, #15
 8007ef6:	d9dc      	bls.n	8007eb2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	e034      	b.n	8007f68 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f14:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f24:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f32:	461a      	mov	r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f44:	d80c      	bhi.n	8007f60 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f5c:	d0ec      	beq.n	8007f38 <USB_StopHost+0xb0>
 8007f5e:	e000      	b.n	8007f62 <USB_StopHost+0xda>
        break;
 8007f60:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	3301      	adds	r3, #1
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b0f      	cmp	r3, #15
 8007f6c:	d9c7      	bls.n	8007efe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f74:	461a      	mov	r2, r3
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f7a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f82:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff f8ae 	bl	80070e6 <USB_EnableGlobalInt>

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007f98:	4904      	ldr	r1, [pc, #16]	; (8007fac <MX_FATFS_Init+0x18>)
 8007f9a:	4805      	ldr	r0, [pc, #20]	; (8007fb0 <MX_FATFS_Init+0x1c>)
 8007f9c:	f003 f84c 	bl	800b038 <FATFS_LinkDriver>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	4b03      	ldr	r3, [pc, #12]	; (8007fb4 <MX_FATFS_Init+0x20>)
 8007fa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007fa8:	bf00      	nop
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20002348 	.word	0x20002348
 8007fb0:	0800c3c8 	.word	0x0800c3c8
 8007fb4:	20002344 	.word	0x20002344

08007fb8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4808      	ldr	r0, [pc, #32]	; (8008004 <USBH_status+0x34>)
 8007fe4:	f000 fe1a 	bl	8008c1c <USBH_MSC_UnitIsReady>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <USBH_status+0x24>
  {
    res = RES_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
 8007ff2:	e001      	b.n	8007ff8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20002358 	.word	0x20002358

08008008 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b094      	sub	sp, #80	; 0x50
 800800c:	af02      	add	r7, sp, #8
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800801e:	7bf9      	ldrb	r1, [r7, #15]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	4813      	ldr	r0, [pc, #76]	; (8008078 <USBH_read+0x70>)
 800802a:	f000 fe41 	bl	8008cb0 <USBH_MSC_Read>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d103      	bne.n	800803c <USBH_read+0x34>
  {
    res = RES_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800803a:	e017      	b.n	800806c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800803c:	f107 0210 	add.w	r2, r7, #16
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	4619      	mov	r1, r3
 8008044:	480c      	ldr	r0, [pc, #48]	; (8008078 <USBH_read+0x70>)
 8008046:	f000 fe0f 	bl	8008c68 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800804a:	7f7b      	ldrb	r3, [r7, #29]
 800804c:	2b3a      	cmp	r3, #58	; 0x3a
 800804e:	d005      	beq.n	800805c <USBH_read+0x54>
 8008050:	2b3a      	cmp	r3, #58	; 0x3a
 8008052:	dc07      	bgt.n	8008064 <USBH_read+0x5c>
 8008054:	2b04      	cmp	r3, #4
 8008056:	d001      	beq.n	800805c <USBH_read+0x54>
 8008058:	2b28      	cmp	r3, #40	; 0x28
 800805a:	d103      	bne.n	8008064 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800805c:	2303      	movs	r3, #3
 800805e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008062:	e003      	b.n	800806c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800806a:	bf00      	nop
    }
  }

  return res;
 800806c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008070:	4618      	mov	r0, r3
 8008072:	3748      	adds	r7, #72	; 0x48
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20002358 	.word	0x20002358

0800807c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b094      	sub	sp, #80	; 0x50
 8008080:	af02      	add	r7, sp, #8
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008092:	7bf9      	ldrb	r1, [r7, #15]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	4817      	ldr	r0, [pc, #92]	; (80080fc <USBH_write+0x80>)
 800809e:	f000 fe70 	bl	8008d82 <USBH_MSC_Write>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d103      	bne.n	80080b0 <USBH_write+0x34>
  {
    res = RES_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80080ae:	e01f      	b.n	80080f0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80080b0:	f107 0210 	add.w	r2, r7, #16
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	4619      	mov	r1, r3
 80080b8:	4810      	ldr	r0, [pc, #64]	; (80080fc <USBH_write+0x80>)
 80080ba:	f000 fdd5 	bl	8008c68 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80080be:	7f7b      	ldrb	r3, [r7, #29]
 80080c0:	2b3a      	cmp	r3, #58	; 0x3a
 80080c2:	d00d      	beq.n	80080e0 <USBH_write+0x64>
 80080c4:	2b3a      	cmp	r3, #58	; 0x3a
 80080c6:	dc0f      	bgt.n	80080e8 <USBH_write+0x6c>
 80080c8:	2b28      	cmp	r3, #40	; 0x28
 80080ca:	d009      	beq.n	80080e0 <USBH_write+0x64>
 80080cc:	2b28      	cmp	r3, #40	; 0x28
 80080ce:	dc0b      	bgt.n	80080e8 <USBH_write+0x6c>
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d005      	beq.n	80080e0 <USBH_write+0x64>
 80080d4:	2b27      	cmp	r3, #39	; 0x27
 80080d6:	d107      	bne.n	80080e8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80080d8:	2302      	movs	r3, #2
 80080da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80080de:	e007      	b.n	80080f0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80080e0:	2303      	movs	r3, #3
 80080e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80080e6:	e003      	b.n	80080f0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80080ee:	bf00      	nop
    }
  }

  return res;
 80080f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3748      	adds	r7, #72	; 0x48
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20002358 	.word	0x20002358

08008100 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b090      	sub	sp, #64	; 0x40
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	603a      	str	r2, [r7, #0]
 800810a:	71fb      	strb	r3, [r7, #7]
 800810c:	460b      	mov	r3, r1
 800810e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008116:	79bb      	ldrb	r3, [r7, #6]
 8008118:	2b03      	cmp	r3, #3
 800811a:	d852      	bhi.n	80081c2 <USBH_ioctl+0xc2>
 800811c:	a201      	add	r2, pc, #4	; (adr r2, 8008124 <USBH_ioctl+0x24>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008135 	.word	0x08008135
 8008128:	0800813d 	.word	0x0800813d
 800812c:	08008167 	.word	0x08008167
 8008130:	08008193 	.word	0x08008193
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800813a:	e045      	b.n	80081c8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800813c:	f107 0208 	add.w	r2, r7, #8
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	4619      	mov	r1, r3
 8008144:	4823      	ldr	r0, [pc, #140]	; (80081d4 <USBH_ioctl+0xd4>)
 8008146:	f000 fd8f 	bl	8008c68 <USBH_MSC_GetLUNInfo>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d106      	bne.n	800815e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800815c:	e034      	b.n	80081c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008164:	e030      	b.n	80081c8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008166:	f107 0208 	add.w	r2, r7, #8
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	4619      	mov	r1, r3
 800816e:	4819      	ldr	r0, [pc, #100]	; (80081d4 <USBH_ioctl+0xd4>)
 8008170:	f000 fd7a 	bl	8008c68 <USBH_MSC_GetLUNInfo>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d107      	bne.n	800818a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800817a:	8a3b      	ldrh	r3, [r7, #16]
 800817c:	461a      	mov	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008188:	e01e      	b.n	80081c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008190:	e01a      	b.n	80081c8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008192:	f107 0208 	add.w	r2, r7, #8
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	4619      	mov	r1, r3
 800819a:	480e      	ldr	r0, [pc, #56]	; (80081d4 <USBH_ioctl+0xd4>)
 800819c:	f000 fd64 	bl	8008c68 <USBH_MSC_GetLUNInfo>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80081a6:	8a3b      	ldrh	r3, [r7, #16]
 80081a8:	0a5b      	lsrs	r3, r3, #9
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80081b8:	e006      	b.n	80081c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80081c0:	e002      	b.n	80081c8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80081c2:	2304      	movs	r3, #4
 80081c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80081c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3740      	adds	r7, #64	; 0x40
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20002358 	.word	0x20002358

080081d8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80081d8:	b590      	push	{r4, r7, lr}
 80081da:	b089      	sub	sp, #36	; 0x24
 80081dc:	af04      	add	r7, sp, #16
 80081de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e6:	7919      	ldrb	r1, [r3, #4]
 80081e8:	2350      	movs	r3, #80	; 0x50
 80081ea:	2206      	movs	r2, #6
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 fc53 	bl	8009a98 <USBH_FindInterface>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	2bff      	cmp	r3, #255	; 0xff
 80081fa:	d002      	beq.n	8008202 <USBH_MSC_InterfaceInit+0x2a>
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d901      	bls.n	8008206 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008202:	2302      	movs	r3, #2
 8008204:	e0ef      	b.n	80083e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 fc28 	bl	8009a60 <USBH_SelectInterface>
 8008210:	4603      	mov	r3, r0
 8008212:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800821a:	2302      	movs	r3, #2
 800821c:	e0e3      	b.n	80083e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008224:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008228:	f003 fa78 	bl	800b71c <malloc>
 800822c:	4603      	mov	r3, r0
 800822e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008240:	2302      	movs	r3, #2
 8008242:	e0d0      	b.n	80083e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008248:	2100      	movs	r1, #0
 800824a:	68b8      	ldr	r0, [r7, #8]
 800824c:	f003 fa84 	bl	800b758 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	211a      	movs	r1, #26
 8008256:	fb01 f303 	mul.w	r3, r1, r3
 800825a:	4413      	add	r3, r2
 800825c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b25b      	sxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	da16      	bge.n	8008296 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	211a      	movs	r1, #26
 800826e:	fb01 f303 	mul.w	r3, r1, r3
 8008272:	4413      	add	r3, r2
 8008274:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008278:	781a      	ldrb	r2, [r3, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	211a      	movs	r1, #26
 8008284:	fb01 f303 	mul.w	r3, r1, r3
 8008288:	4413      	add	r3, r2
 800828a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800828e:	881a      	ldrh	r2, [r3, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	815a      	strh	r2, [r3, #10]
 8008294:	e015      	b.n	80082c2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	211a      	movs	r1, #26
 800829c:	fb01 f303 	mul.w	r3, r1, r3
 80082a0:	4413      	add	r3, r2
 80082a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80082a6:	781a      	ldrb	r2, [r3, #0]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	211a      	movs	r1, #26
 80082b2:	fb01 f303 	mul.w	r3, r1, r3
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80082bc:	881a      	ldrh	r2, [r3, #0]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	211a      	movs	r1, #26
 80082c8:	fb01 f303 	mul.w	r3, r1, r3
 80082cc:	4413      	add	r3, r2
 80082ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	b25b      	sxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da16      	bge.n	8008308 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	211a      	movs	r1, #26
 80082e0:	fb01 f303 	mul.w	r3, r1, r3
 80082e4:	4413      	add	r3, r2
 80082e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082ea:	781a      	ldrb	r2, [r3, #0]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	211a      	movs	r1, #26
 80082f6:	fb01 f303 	mul.w	r3, r1, r3
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008300:	881a      	ldrh	r2, [r3, #0]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	815a      	strh	r2, [r3, #10]
 8008306:	e015      	b.n	8008334 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	211a      	movs	r1, #26
 800830e:	fb01 f303 	mul.w	r3, r1, r3
 8008312:	4413      	add	r3, r2
 8008314:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	211a      	movs	r1, #26
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	4413      	add	r3, r2
 800832a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2200      	movs	r2, #0
 8008338:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2200      	movs	r2, #0
 800833e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2200      	movs	r2, #0
 8008344:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	799b      	ldrb	r3, [r3, #6]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f002 fdc4 	bl	800aeda <USBH_AllocPipe>
 8008352:	4603      	mov	r3, r0
 8008354:	461a      	mov	r2, r3
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	79db      	ldrb	r3, [r3, #7]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f002 fdba 	bl	800aeda <USBH_AllocPipe>
 8008366:	4603      	mov	r3, r0
 8008368:	461a      	mov	r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fdac 	bl	8008ecc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	7959      	ldrb	r1, [r3, #5]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	7998      	ldrb	r0, [r3, #6]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	8912      	ldrh	r2, [r2, #8]
 800838c:	9202      	str	r2, [sp, #8]
 800838e:	2202      	movs	r2, #2
 8008390:	9201      	str	r2, [sp, #4]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	4623      	mov	r3, r4
 8008396:	4602      	mov	r2, r0
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f002 fd6f 	bl	800ae7c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	7919      	ldrb	r1, [r3, #4]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	79d8      	ldrb	r0, [r3, #7]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	8952      	ldrh	r2, [r2, #10]
 80083b6:	9202      	str	r2, [sp, #8]
 80083b8:	2202      	movs	r2, #2
 80083ba:	9201      	str	r2, [sp, #4]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	4623      	mov	r3, r4
 80083c0:	4602      	mov	r2, r0
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f002 fd5a 	bl	800ae7c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	791b      	ldrb	r3, [r3, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f003 f8c5 	bl	800b560 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	795b      	ldrb	r3, [r3, #5]
 80083da:	2200      	movs	r2, #0
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f003 f8be 	bl	800b560 <USBH_LL_SetToggle>

  return USBH_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd90      	pop	{r4, r7, pc}

080083ee <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b084      	sub	sp, #16
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	795b      	ldrb	r3, [r3, #5]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00e      	beq.n	8008426 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	795b      	ldrb	r3, [r3, #5]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f002 fd53 	bl	800aeba <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	795b      	ldrb	r3, [r3, #5]
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f002 fd7e 	bl	800af1c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	791b      	ldrb	r3, [r3, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00e      	beq.n	800844c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	791b      	ldrb	r3, [r3, #4]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f002 fd40 	bl	800aeba <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	791b      	ldrb	r3, [r3, #4]
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f002 fd6b 	bl	800af1c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	4618      	mov	r0, r3
 8008462:	f003 f963 	bl	800b72c <free>
    phost->pActiveClass->pData = 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800846c:	2200      	movs	r2, #0
 800846e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800848c:	2301      	movs	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	7b9b      	ldrb	r3, [r3, #14]
 8008494:	2b03      	cmp	r3, #3
 8008496:	d041      	beq.n	800851c <USBH_MSC_ClassRequest+0xa2>
 8008498:	2b03      	cmp	r3, #3
 800849a:	dc4b      	bgt.n	8008534 <USBH_MSC_ClassRequest+0xba>
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <USBH_MSC_ClassRequest+0x2a>
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d147      	bne.n	8008534 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fcf0 	bl	8008e8e <USBH_MSC_BOT_REQ_GetMaxLUN>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d104      	bne.n	80084c2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d137      	bne.n	8008538 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d804      	bhi.n	80084da <USBH_MSC_ClassRequest+0x60>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	3301      	adds	r3, #1
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	e000      	b.n	80084dc <USBH_MSC_ClassRequest+0x62>
 80084da:	2202      	movs	r2, #2
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	73bb      	strb	r3, [r7, #14]
 80084e4:	e014      	b.n	8008510 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	2134      	movs	r1, #52	; 0x34
 80084ec:	fb01 f303 	mul.w	r3, r1, r3
 80084f0:	4413      	add	r3, r2
 80084f2:	3392      	adds	r3, #146	; 0x92
 80084f4:	2202      	movs	r2, #2
 80084f6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	2134      	movs	r1, #52	; 0x34
 80084fe:	fb01 f303 	mul.w	r3, r1, r3
 8008502:	4413      	add	r3, r2
 8008504:	33c1      	adds	r3, #193	; 0xc1
 8008506:	2200      	movs	r2, #0
 8008508:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	3301      	adds	r3, #1
 800850e:	73bb      	strb	r3, [r7, #14]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	7bba      	ldrb	r2, [r7, #14]
 8008516:	429a      	cmp	r2, r3
 8008518:	d3e5      	bcc.n	80084e6 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800851a:	e00d      	b.n	8008538 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800851c:	2100      	movs	r1, #0
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f002 f87b 	bl	800a61a <USBH_ClrFeature>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d108      	bne.n	800853c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	7bda      	ldrb	r2, [r3, #15]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008532:	e003      	b.n	800853c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008534:	bf00      	nop
 8008536:	e002      	b.n	800853e <USBH_MSC_ClassRequest+0xc4>
      break;
 8008538:	bf00      	nop
 800853a:	e000      	b.n	800853e <USBH_MSC_ClassRequest+0xc4>
      break;
 800853c:	bf00      	nop
  }

  return status;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800855a:	2301      	movs	r3, #1
 800855c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800855e:	2301      	movs	r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008562:	2301      	movs	r3, #1
 8008564:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	7b1b      	ldrb	r3, [r3, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <USBH_MSC_Process+0x2e>
 800856e:	2b01      	cmp	r3, #1
 8008570:	f000 8271 	beq.w	8008a56 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008574:	e272      	b.n	8008a5c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	b29b      	uxth	r3, r3
 8008582:	429a      	cmp	r2, r3
 8008584:	f080 824f 	bcs.w	8008a26 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800858e:	4619      	mov	r1, r3
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	2334      	movs	r3, #52	; 0x34
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	4413      	add	r3, r2
 800859a:	3391      	adds	r3, #145	; 0x91
 800859c:	2201      	movs	r2, #1
 800859e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085a6:	4619      	mov	r1, r3
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	2334      	movs	r3, #52	; 0x34
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	4413      	add	r3, r2
 80085b2:	3390      	adds	r3, #144	; 0x90
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	f200 8243 	bhi.w	8008a42 <USBH_MSC_Process+0x4fa>
 80085bc:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <USBH_MSC_Process+0x7c>)
 80085be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c2:	bf00      	nop
 80085c4:	080085e9 	.word	0x080085e9
 80085c8:	08008a43 	.word	0x08008a43
 80085cc:	080086b1 	.word	0x080086b1
 80085d0:	08008835 	.word	0x08008835
 80085d4:	0800860f 	.word	0x0800860f
 80085d8:	08008901 	.word	0x08008901
 80085dc:	08008a43 	.word	0x08008a43
 80085e0:	08008a43 	.word	0x08008a43
 80085e4:	08008a15 	.word	0x08008a15
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80085ee:	4619      	mov	r1, r3
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	2334      	movs	r3, #52	; 0x34
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	4413      	add	r3, r2
 80085fa:	3390      	adds	r3, #144	; 0x90
 80085fc:	2204      	movs	r2, #4
 80085fe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800860c:	e222      	b.n	8008a54 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008614:	b2d9      	uxtb	r1, r3
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800861c:	461a      	mov	r2, r3
 800861e:	2334      	movs	r3, #52	; 0x34
 8008620:	fb02 f303 	mul.w	r3, r2, r3
 8008624:	3398      	adds	r3, #152	; 0x98
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4413      	add	r3, r2
 800862a:	3307      	adds	r3, #7
 800862c:	461a      	mov	r2, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 ff6a 	bl	8009508 <USBH_MSC_SCSI_Inquiry>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008644:	4619      	mov	r1, r3
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	2334      	movs	r3, #52	; 0x34
 800864a:	fb01 f303 	mul.w	r3, r1, r3
 800864e:	4413      	add	r3, r2
 8008650:	3390      	adds	r3, #144	; 0x90
 8008652:	2202      	movs	r2, #2
 8008654:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d10c      	bne.n	8008676 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008662:	4619      	mov	r1, r3
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	2334      	movs	r3, #52	; 0x34
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	4413      	add	r3, r2
 800866e:	3390      	adds	r3, #144	; 0x90
 8008670:	2205      	movs	r2, #5
 8008672:	701a      	strb	r2, [r3, #0]
            break;
 8008674:	e1e7      	b.n	8008a46 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	2b04      	cmp	r3, #4
 800867a:	f040 81e4 	bne.w	8008a46 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008684:	4619      	mov	r1, r3
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	2334      	movs	r3, #52	; 0x34
 800868a:	fb01 f303 	mul.w	r3, r1, r3
 800868e:	4413      	add	r3, r2
 8008690:	3390      	adds	r3, #144	; 0x90
 8008692:	2201      	movs	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800869c:	4619      	mov	r1, r3
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	2334      	movs	r3, #52	; 0x34
 80086a2:	fb01 f303 	mul.w	r3, r1, r3
 80086a6:	4413      	add	r3, r2
 80086a8:	3391      	adds	r3, #145	; 0x91
 80086aa:	2202      	movs	r2, #2
 80086ac:	701a      	strb	r2, [r3, #0]
            break;
 80086ae:	e1ca      	b.n	8008a46 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fe66 	bl	800938c <USBH_MSC_SCSI_TestUnitReady>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d149      	bne.n	800875e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086d0:	4619      	mov	r1, r3
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	2334      	movs	r3, #52	; 0x34
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	4413      	add	r3, r2
 80086dc:	3392      	adds	r3, #146	; 0x92
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00c      	beq.n	80086fe <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80086ea:	4619      	mov	r1, r3
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	2334      	movs	r3, #52	; 0x34
 80086f0:	fb01 f303 	mul.w	r3, r1, r3
 80086f4:	4413      	add	r3, r2
 80086f6:	33c1      	adds	r3, #193	; 0xc1
 80086f8:	2201      	movs	r2, #1
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e00b      	b.n	8008716 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008704:	4619      	mov	r1, r3
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	2334      	movs	r3, #52	; 0x34
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	4413      	add	r3, r2
 8008710:	33c1      	adds	r3, #193	; 0xc1
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800871c:	4619      	mov	r1, r3
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	2334      	movs	r3, #52	; 0x34
 8008722:	fb01 f303 	mul.w	r3, r1, r3
 8008726:	4413      	add	r3, r2
 8008728:	3390      	adds	r3, #144	; 0x90
 800872a:	2203      	movs	r2, #3
 800872c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008734:	4619      	mov	r1, r3
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	2334      	movs	r3, #52	; 0x34
 800873a:	fb01 f303 	mul.w	r3, r1, r3
 800873e:	4413      	add	r3, r2
 8008740:	3391      	adds	r3, #145	; 0x91
 8008742:	2200      	movs	r2, #0
 8008744:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800874c:	4619      	mov	r1, r3
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	2334      	movs	r3, #52	; 0x34
 8008752:	fb01 f303 	mul.w	r3, r1, r3
 8008756:	4413      	add	r3, r2
 8008758:	3392      	adds	r3, #146	; 0x92
 800875a:	2200      	movs	r2, #0
 800875c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d14a      	bne.n	80087fa <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800876a:	4619      	mov	r1, r3
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	2334      	movs	r3, #52	; 0x34
 8008770:	fb01 f303 	mul.w	r3, r1, r3
 8008774:	4413      	add	r3, r2
 8008776:	3392      	adds	r3, #146	; 0x92
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d00c      	beq.n	8008798 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008784:	4619      	mov	r1, r3
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	2334      	movs	r3, #52	; 0x34
 800878a:	fb01 f303 	mul.w	r3, r1, r3
 800878e:	4413      	add	r3, r2
 8008790:	33c1      	adds	r3, #193	; 0xc1
 8008792:	2201      	movs	r2, #1
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	e00b      	b.n	80087b0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800879e:	4619      	mov	r1, r3
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	2334      	movs	r3, #52	; 0x34
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	33c1      	adds	r3, #193	; 0xc1
 80087ac:	2200      	movs	r2, #0
 80087ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087b6:	4619      	mov	r1, r3
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	2334      	movs	r3, #52	; 0x34
 80087bc:	fb01 f303 	mul.w	r3, r1, r3
 80087c0:	4413      	add	r3, r2
 80087c2:	3390      	adds	r3, #144	; 0x90
 80087c4:	2205      	movs	r2, #5
 80087c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087ce:	4619      	mov	r1, r3
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	2334      	movs	r3, #52	; 0x34
 80087d4:	fb01 f303 	mul.w	r3, r1, r3
 80087d8:	4413      	add	r3, r2
 80087da:	3391      	adds	r3, #145	; 0x91
 80087dc:	2201      	movs	r2, #1
 80087de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087e6:	4619      	mov	r1, r3
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	2334      	movs	r3, #52	; 0x34
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	4413      	add	r3, r2
 80087f2:	3392      	adds	r3, #146	; 0x92
 80087f4:	2202      	movs	r2, #2
 80087f6:	701a      	strb	r2, [r3, #0]
            break;
 80087f8:	e127      	b.n	8008a4a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	f040 8124 	bne.w	8008a4a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008808:	4619      	mov	r1, r3
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	2334      	movs	r3, #52	; 0x34
 800880e:	fb01 f303 	mul.w	r3, r1, r3
 8008812:	4413      	add	r3, r2
 8008814:	3390      	adds	r3, #144	; 0x90
 8008816:	2201      	movs	r2, #1
 8008818:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008820:	4619      	mov	r1, r3
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	2334      	movs	r3, #52	; 0x34
 8008826:	fb01 f303 	mul.w	r3, r1, r3
 800882a:	4413      	add	r3, r2
 800882c:	3391      	adds	r3, #145	; 0x91
 800882e:	2202      	movs	r2, #2
 8008830:	701a      	strb	r2, [r3, #0]
            break;
 8008832:	e10a      	b.n	8008a4a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800883a:	b2d9      	uxtb	r1, r3
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008842:	461a      	mov	r2, r3
 8008844:	2334      	movs	r3, #52	; 0x34
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	3390      	adds	r3, #144	; 0x90
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	4413      	add	r3, r2
 8008850:	3304      	adds	r3, #4
 8008852:	461a      	mov	r2, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fddc 	bl	8009412 <USBH_MSC_SCSI_ReadCapacity>
 800885a:	4603      	mov	r3, r0
 800885c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d120      	bne.n	80088a6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800886a:	4619      	mov	r1, r3
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	2334      	movs	r3, #52	; 0x34
 8008870:	fb01 f303 	mul.w	r3, r1, r3
 8008874:	4413      	add	r3, r2
 8008876:	3390      	adds	r3, #144	; 0x90
 8008878:	2201      	movs	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008882:	4619      	mov	r1, r3
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	2334      	movs	r3, #52	; 0x34
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	4413      	add	r3, r2
 800888e:	3391      	adds	r3, #145	; 0x91
 8008890:	2200      	movs	r2, #0
 8008892:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800889a:	3301      	adds	r3, #1
 800889c:	b29a      	uxth	r2, r3
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80088a4:	e0d3      	b.n	8008a4e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d10c      	bne.n	80088c6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088b2:	4619      	mov	r1, r3
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	2334      	movs	r3, #52	; 0x34
 80088b8:	fb01 f303 	mul.w	r3, r1, r3
 80088bc:	4413      	add	r3, r2
 80088be:	3390      	adds	r3, #144	; 0x90
 80088c0:	2205      	movs	r2, #5
 80088c2:	701a      	strb	r2, [r3, #0]
            break;
 80088c4:	e0c3      	b.n	8008a4e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	f040 80c0 	bne.w	8008a4e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088d4:	4619      	mov	r1, r3
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	2334      	movs	r3, #52	; 0x34
 80088da:	fb01 f303 	mul.w	r3, r1, r3
 80088de:	4413      	add	r3, r2
 80088e0:	3390      	adds	r3, #144	; 0x90
 80088e2:	2201      	movs	r2, #1
 80088e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088ec:	4619      	mov	r1, r3
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	2334      	movs	r3, #52	; 0x34
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	4413      	add	r3, r2
 80088f8:	3391      	adds	r3, #145	; 0x91
 80088fa:	2202      	movs	r2, #2
 80088fc:	701a      	strb	r2, [r3, #0]
            break;
 80088fe:	e0a6      	b.n	8008a4e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008906:	b2d9      	uxtb	r1, r3
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800890e:	461a      	mov	r2, r3
 8008910:	2334      	movs	r3, #52	; 0x34
 8008912:	fb02 f303 	mul.w	r3, r2, r3
 8008916:	3398      	adds	r3, #152	; 0x98
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	3304      	adds	r3, #4
 800891e:	461a      	mov	r2, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fe96 	bl	8009652 <USBH_MSC_SCSI_RequestSense>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d145      	bne.n	80089bc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008936:	4619      	mov	r1, r3
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	2334      	movs	r3, #52	; 0x34
 800893c:	fb01 f303 	mul.w	r3, r1, r3
 8008940:	4413      	add	r3, r2
 8008942:	339c      	adds	r3, #156	; 0x9c
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b06      	cmp	r3, #6
 8008948:	d00c      	beq.n	8008964 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008950:	4619      	mov	r1, r3
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	2334      	movs	r3, #52	; 0x34
 8008956:	fb01 f303 	mul.w	r3, r1, r3
 800895a:	4413      	add	r3, r2
 800895c:	339c      	adds	r3, #156	; 0x9c
 800895e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008960:	2b02      	cmp	r3, #2
 8008962:	d117      	bne.n	8008994 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	f242 720f 	movw	r2, #9999	; 0x270f
 8008976:	4293      	cmp	r3, r2
 8008978:	d80c      	bhi.n	8008994 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008980:	4619      	mov	r1, r3
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	2334      	movs	r3, #52	; 0x34
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	3390      	adds	r3, #144	; 0x90
 800898e:	2202      	movs	r2, #2
 8008990:	701a      	strb	r2, [r3, #0]
                  break;
 8008992:	e05f      	b.n	8008a54 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800899a:	4619      	mov	r1, r3
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	2334      	movs	r3, #52	; 0x34
 80089a0:	fb01 f303 	mul.w	r3, r1, r3
 80089a4:	4413      	add	r3, r2
 80089a6:	3390      	adds	r3, #144	; 0x90
 80089a8:	2201      	movs	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089b2:	3301      	adds	r3, #1
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d10c      	bne.n	80089dc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089c8:	4619      	mov	r1, r3
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	2334      	movs	r3, #52	; 0x34
 80089ce:	fb01 f303 	mul.w	r3, r1, r3
 80089d2:	4413      	add	r3, r2
 80089d4:	3390      	adds	r3, #144	; 0x90
 80089d6:	2208      	movs	r2, #8
 80089d8:	701a      	strb	r2, [r3, #0]
            break;
 80089da:	e03a      	b.n	8008a52 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d137      	bne.n	8008a52 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089e8:	4619      	mov	r1, r3
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	2334      	movs	r3, #52	; 0x34
 80089ee:	fb01 f303 	mul.w	r3, r1, r3
 80089f2:	4413      	add	r3, r2
 80089f4:	3390      	adds	r3, #144	; 0x90
 80089f6:	2201      	movs	r2, #1
 80089f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a00:	4619      	mov	r1, r3
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	2334      	movs	r3, #52	; 0x34
 8008a06:	fb01 f303 	mul.w	r3, r1, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3391      	adds	r3, #145	; 0x91
 8008a0e:	2202      	movs	r2, #2
 8008a10:	701a      	strb	r2, [r3, #0]
            break;
 8008a12:	e01e      	b.n	8008a52 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008a24:	e016      	b.n	8008a54 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2201      	movs	r2, #1
 8008a32:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a3a:	2102      	movs	r1, #2
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
      break;
 8008a40:	e00c      	b.n	8008a5c <USBH_MSC_Process+0x514>
            break;
 8008a42:	bf00      	nop
 8008a44:	e00a      	b.n	8008a5c <USBH_MSC_Process+0x514>
            break;
 8008a46:	bf00      	nop
 8008a48:	e008      	b.n	8008a5c <USBH_MSC_Process+0x514>
            break;
 8008a4a:	bf00      	nop
 8008a4c:	e006      	b.n	8008a5c <USBH_MSC_Process+0x514>
            break;
 8008a4e:	bf00      	nop
 8008a50:	e004      	b.n	8008a5c <USBH_MSC_Process+0x514>
            break;
 8008a52:	bf00      	nop
      break;
 8008a54:	e002      	b.n	8008a5c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	75fb      	strb	r3, [r7, #23]
      break;
 8008a5a:	bf00      	nop
  }
  return error;
 8008a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop

08008a68 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b088      	sub	sp, #32
 8008a82:	af02      	add	r7, sp, #8
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008a94:	2301      	movs	r3, #1
 8008a96:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	2134      	movs	r1, #52	; 0x34
 8008aa2:	fb01 f303 	mul.w	r3, r1, r3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	3390      	adds	r3, #144	; 0x90
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b07      	cmp	r3, #7
 8008aae:	d03c      	beq.n	8008b2a <USBH_MSC_RdWrProcess+0xac>
 8008ab0:	2b07      	cmp	r3, #7
 8008ab2:	f300 80a7 	bgt.w	8008c04 <USBH_MSC_RdWrProcess+0x186>
 8008ab6:	2b05      	cmp	r3, #5
 8008ab8:	d06c      	beq.n	8008b94 <USBH_MSC_RdWrProcess+0x116>
 8008aba:	2b06      	cmp	r3, #6
 8008abc:	f040 80a2 	bne.w	8008c04 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008ac0:	78f9      	ldrb	r1, [r7, #3]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2200      	movs	r2, #0
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fea5 	bl	800981a <USBH_MSC_SCSI_Read>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	2134      	movs	r1, #52	; 0x34
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3390      	adds	r3, #144	; 0x90
 8008ae8:	2201      	movs	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008af0:	e08a      	b.n	8008c08 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d109      	bne.n	8008b0c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	2134      	movs	r1, #52	; 0x34
 8008afe:	fb01 f303 	mul.w	r3, r1, r3
 8008b02:	4413      	add	r3, r2
 8008b04:	3390      	adds	r3, #144	; 0x90
 8008b06:	2205      	movs	r2, #5
 8008b08:	701a      	strb	r2, [r3, #0]
      break;
 8008b0a:	e07d      	b.n	8008c08 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d17a      	bne.n	8008c08 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	2134      	movs	r1, #52	; 0x34
 8008b18:	fb01 f303 	mul.w	r3, r1, r3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	3390      	adds	r3, #144	; 0x90
 8008b20:	2208      	movs	r2, #8
 8008b22:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008b24:	2302      	movs	r3, #2
 8008b26:	75fb      	strb	r3, [r7, #23]
      break;
 8008b28:	e06e      	b.n	8008c08 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008b2a:	78f9      	ldrb	r1, [r7, #3]
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2300      	movs	r3, #0
 8008b32:	2200      	movs	r2, #0
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fe05 	bl	8009744 <USBH_MSC_SCSI_Write>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10b      	bne.n	8008b5c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	2134      	movs	r1, #52	; 0x34
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	4413      	add	r3, r2
 8008b50:	3390      	adds	r3, #144	; 0x90
 8008b52:	2201      	movs	r2, #1
 8008b54:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b5a:	e057      	b.n	8008c0c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d109      	bne.n	8008b76 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008b62:	78fb      	ldrb	r3, [r7, #3]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	2134      	movs	r1, #52	; 0x34
 8008b68:	fb01 f303 	mul.w	r3, r1, r3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3390      	adds	r3, #144	; 0x90
 8008b70:	2205      	movs	r2, #5
 8008b72:	701a      	strb	r2, [r3, #0]
      break;
 8008b74:	e04a      	b.n	8008c0c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d147      	bne.n	8008c0c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	2134      	movs	r1, #52	; 0x34
 8008b82:	fb01 f303 	mul.w	r3, r1, r3
 8008b86:	4413      	add	r3, r2
 8008b88:	3390      	adds	r3, #144	; 0x90
 8008b8a:	2208      	movs	r2, #8
 8008b8c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008b8e:	2302      	movs	r3, #2
 8008b90:	75fb      	strb	r3, [r7, #23]
      break;
 8008b92:	e03b      	b.n	8008c0c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	2234      	movs	r2, #52	; 0x34
 8008b98:	fb02 f303 	mul.w	r3, r2, r3
 8008b9c:	3398      	adds	r3, #152	; 0x98
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	1d1a      	adds	r2, r3, #4
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fd52 	bl	8009652 <USBH_MSC_SCSI_RequestSense>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d113      	bne.n	8008be0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	2134      	movs	r1, #52	; 0x34
 8008bbe:	fb01 f303 	mul.w	r3, r1, r3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	3390      	adds	r3, #144	; 0x90
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	2134      	movs	r1, #52	; 0x34
 8008bd0:	fb01 f303 	mul.w	r3, r1, r3
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3391      	adds	r3, #145	; 0x91
 8008bd8:	2202      	movs	r2, #2
 8008bda:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d014      	beq.n	8008c10 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d111      	bne.n	8008c10 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	2134      	movs	r1, #52	; 0x34
 8008bf2:	fb01 f303 	mul.w	r3, r1, r3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	3390      	adds	r3, #144	; 0x90
 8008bfa:	2208      	movs	r2, #8
 8008bfc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c02:	e005      	b.n	8008c10 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008c04:	bf00      	nop
 8008c06:	e004      	b.n	8008c12 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008c08:	bf00      	nop
 8008c0a:	e002      	b.n	8008c12 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008c0c:	bf00      	nop
 8008c0e:	e000      	b.n	8008c12 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008c10:	bf00      	nop

  }
  return error;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b0b      	cmp	r3, #11
 8008c3a:	d10c      	bne.n	8008c56 <USBH_MSC_UnitIsReady+0x3a>
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	2134      	movs	r1, #52	; 0x34
 8008c42:	fb01 f303 	mul.w	r3, r1, r3
 8008c46:	4413      	add	r3, r2
 8008c48:	3391      	adds	r3, #145	; 0x91
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
 8008c54:	e001      	b.n	8008c5a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	460b      	mov	r3, r1
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b0b      	cmp	r3, #11
 8008c88:	d10d      	bne.n	8008ca6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
 8008c8c:	2234      	movs	r2, #52	; 0x34
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	3390      	adds	r3, #144	; 0x90
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4413      	add	r3, r2
 8008c98:	2234      	movs	r2, #52	; 0x34
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f002 fd4d 	bl	800b73c <memcpy>
    return USBH_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e000      	b.n	8008ca8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008ca6:	2302      	movs	r3, #2
  }
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	607a      	str	r2, [r7, #4]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00e      	beq.n	8008cf4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008cdc:	2b0b      	cmp	r3, #11
 8008cde:	d109      	bne.n	8008cf4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008ce0:	7afb      	ldrb	r3, [r7, #11]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	2134      	movs	r1, #52	; 0x34
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	3390      	adds	r3, #144	; 0x90
 8008cee:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d001      	beq.n	8008cf8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e040      	b.n	8008d7a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2206      	movs	r2, #6
 8008cfc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008cfe:	7afb      	ldrb	r3, [r7, #11]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	2134      	movs	r1, #52	; 0x34
 8008d04:	fb01 f303 	mul.w	r3, r1, r3
 8008d08:	4413      	add	r3, r2
 8008d0a:	3390      	adds	r3, #144	; 0x90
 8008d0c:	2206      	movs	r2, #6
 8008d0e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008d1a:	7af9      	ldrb	r1, [r7, #11]
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 fd78 	bl	800981a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d30:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008d32:	e016      	b.n	8008d62 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1ad2      	subs	r2, r2, r3
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	f242 7110 	movw	r1, #10000	; 0x2710
 8008d44:	fb01 f303 	mul.w	r3, r1, r3
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d805      	bhi.n	8008d58 <USBH_MSC_Read+0xa8>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d104      	bne.n	8008d62 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e00b      	b.n	8008d7a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008d62:	7afb      	ldrb	r3, [r7, #11]
 8008d64:	4619      	mov	r1, r3
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff fe89 	bl	8008a7e <USBH_MSC_RdWrProcess>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d0e0      	beq.n	8008d34 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2201      	movs	r2, #1
 8008d76:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b088      	sub	sp, #32
 8008d86:	af02      	add	r7, sp, #8
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00e      	beq.n	8008dc6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008dae:	2b0b      	cmp	r3, #11
 8008db0:	d109      	bne.n	8008dc6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008db2:	7afb      	ldrb	r3, [r7, #11]
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	2134      	movs	r1, #52	; 0x34
 8008db8:	fb01 f303 	mul.w	r3, r1, r3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3390      	adds	r3, #144	; 0x90
 8008dc0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d001      	beq.n	8008dca <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e040      	b.n	8008e4c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2207      	movs	r2, #7
 8008dce:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008dd0:	7afb      	ldrb	r3, [r7, #11]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	2134      	movs	r1, #52	; 0x34
 8008dd6:	fb01 f303 	mul.w	r3, r1, r3
 8008dda:	4413      	add	r3, r2
 8008ddc:	3390      	adds	r3, #144	; 0x90
 8008dde:	2207      	movs	r2, #7
 8008de0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008dec:	7af9      	ldrb	r1, [r7, #11]
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 fca4 	bl	8009744 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e02:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008e04:	e016      	b.n	8008e34 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	1ad2      	subs	r2, r2, r3
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	f242 7110 	movw	r1, #10000	; 0x2710
 8008e16:	fb01 f303 	mul.w	r3, r1, r3
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d805      	bhi.n	8008e2a <USBH_MSC_Write+0xa8>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008e30:	2302      	movs	r3, #2
 8008e32:	e00b      	b.n	8008e4c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	4619      	mov	r1, r3
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff fe20 	bl	8008a7e <USBH_MSC_RdWrProcess>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d0e0      	beq.n	8008e06 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2201      	movs	r2, #1
 8008e48:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2221      	movs	r2, #33	; 0x21
 8008e60:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	22ff      	movs	r2, #255	; 0xff
 8008e66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 fdab 	bl	800a9da <USBH_CtlReq>
 8008e84:	4603      	mov	r3, r0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	22a1      	movs	r2, #161	; 0xa1
 8008e9c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	22fe      	movs	r2, #254	; 0xfe
 8008ea2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 fd8d 	bl	800a9da <USBH_CtlReq>
 8008ec0:	4603      	mov	r3, r0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <USBH_MSC_BOT_Init+0x3c>)
 8008ee2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <USBH_MSC_BOT_Init+0x40>)
 8008ee8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	43425355 	.word	0x43425355
 8008f0c:	20304050 	.word	0x20304050

08008f10 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008f20:	2301      	movs	r3, #1
 8008f22:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008f24:	2301      	movs	r3, #1
 8008f26:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f40:	3b01      	subs	r3, #1
 8008f42:	2b0a      	cmp	r3, #10
 8008f44:	f200 819e 	bhi.w	8009284 <USBH_MSC_BOT_Process+0x374>
 8008f48:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <USBH_MSC_BOT_Process+0x40>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008f7d 	.word	0x08008f7d
 8008f54:	08008fa5 	.word	0x08008fa5
 8008f58:	0800900f 	.word	0x0800900f
 8008f5c:	0800902d 	.word	0x0800902d
 8008f60:	080090b1 	.word	0x080090b1
 8008f64:	080090d3 	.word	0x080090d3
 8008f68:	0800916b 	.word	0x0800916b
 8008f6c:	08009187 	.word	0x08009187
 8008f70:	080091d9 	.word	0x080091d9
 8008f74:	08009209 	.word	0x08009209
 8008f78:	0800926b 	.word	0x0800926b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	78fa      	ldrb	r2, [r7, #3]
 8008f80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	795b      	ldrb	r3, [r3, #5]
 8008f96:	2201      	movs	r2, #1
 8008f98:	9200      	str	r2, [sp, #0]
 8008f9a:	221f      	movs	r2, #31
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 ff2a 	bl	800adf6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008fa2:	e17e      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	795b      	ldrb	r3, [r3, #5]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f002 faae 	bl	800b50c <USBH_LL_GetURBState>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008fb4:	7d3b      	ldrb	r3, [r7, #20]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d118      	bne.n	8008fec <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00f      	beq.n	8008fe2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008fc8:	b25b      	sxtb	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da04      	bge.n	8008fd8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fd6:	e157      	b.n	8009288 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	2205      	movs	r2, #5
 8008fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008fe0:	e152      	b.n	8009288 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2207      	movs	r2, #7
 8008fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008fea:	e14d      	b.n	8009288 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fec:	7d3b      	ldrb	r3, [r7, #20]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d104      	bne.n	8008ffc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ffa:	e145      	b.n	8009288 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008ffc:	7d3b      	ldrb	r3, [r7, #20]
 8008ffe:	2b05      	cmp	r3, #5
 8009000:	f040 8142 	bne.w	8009288 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	220a      	movs	r2, #10
 8009008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800900c:	e13c      	b.n	8009288 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	895a      	ldrh	r2, [r3, #10]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	791b      	ldrb	r3, [r3, #4]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 ff0f 	bl	800ae40 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2204      	movs	r2, #4
 8009026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800902a:	e13a      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	791b      	ldrb	r3, [r3, #4]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f002 fa6a 	bl	800b50c <USBH_LL_GetURBState>
 8009038:	4603      	mov	r3, r0
 800903a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800903c:	7d3b      	ldrb	r3, [r7, #20]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d12d      	bne.n	800909e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	8952      	ldrh	r2, [r2, #10]
 800904a:	4293      	cmp	r3, r2
 800904c:	d910      	bls.n	8009070 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	8952      	ldrh	r2, [r2, #10]
 8009058:	441a      	add	r2, r3
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	8952      	ldrh	r2, [r2, #10]
 8009068:	1a9a      	subs	r2, r3, r2
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	65da      	str	r2, [r3, #92]	; 0x5c
 800906e:	e002      	b.n	8009076 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	2200      	movs	r2, #0
 8009074:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	895a      	ldrh	r2, [r3, #10]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	791b      	ldrb	r3, [r3, #4]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 fed7 	bl	800ae40 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009092:	e0fb      	b.n	800928c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2207      	movs	r2, #7
 8009098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800909c:	e0f6      	b.n	800928c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800909e:	7d3b      	ldrb	r3, [r7, #20]
 80090a0:	2b05      	cmp	r3, #5
 80090a2:	f040 80f3 	bne.w	800928c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2209      	movs	r2, #9
 80090aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80090ae:	e0ed      	b.n	800928c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	891a      	ldrh	r2, [r3, #8]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	795b      	ldrb	r3, [r3, #5]
 80090be:	2001      	movs	r0, #1
 80090c0:	9000      	str	r0, [sp, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 fe97 	bl	800adf6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2206      	movs	r2, #6
 80090cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80090d0:	e0e7      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	795b      	ldrb	r3, [r3, #5]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f002 fa17 	bl	800b50c <USBH_LL_GetURBState>
 80090de:	4603      	mov	r3, r0
 80090e0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80090e2:	7d3b      	ldrb	r3, [r7, #20]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d12f      	bne.n	8009148 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	8912      	ldrh	r2, [r2, #8]
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d910      	bls.n	8009116 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	8912      	ldrh	r2, [r2, #8]
 80090fe:	441a      	add	r2, r3
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	8912      	ldrh	r2, [r2, #8]
 800910e:	1a9a      	subs	r2, r3, r2
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	65da      	str	r2, [r3, #92]	; 0x5c
 8009114:	e002      	b.n	800911c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	2200      	movs	r2, #0
 800911a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00c      	beq.n	800913e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	891a      	ldrh	r2, [r3, #8]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	795b      	ldrb	r3, [r3, #5]
 8009132:	2001      	movs	r0, #1
 8009134:	9000      	str	r0, [sp, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fe5d 	bl	800adf6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800913c:	e0a8      	b.n	8009290 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2207      	movs	r2, #7
 8009142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009146:	e0a3      	b.n	8009290 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009148:	7d3b      	ldrb	r3, [r7, #20]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d104      	bne.n	8009158 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2205      	movs	r2, #5
 8009152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009156:	e09b      	b.n	8009290 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009158:	7d3b      	ldrb	r3, [r7, #20]
 800915a:	2b05      	cmp	r3, #5
 800915c:	f040 8098 	bne.w	8009290 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	220a      	movs	r2, #10
 8009164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009168:	e092      	b.n	8009290 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	791b      	ldrb	r3, [r3, #4]
 8009174:	220d      	movs	r2, #13
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 fe62 	bl	800ae40 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2208      	movs	r2, #8
 8009180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009184:	e08d      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	791b      	ldrb	r3, [r3, #4]
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f002 f9bd 	bl	800b50c <USBH_LL_GetURBState>
 8009192:	4603      	mov	r3, r0
 8009194:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009196:	7d3b      	ldrb	r3, [r7, #20]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d115      	bne.n	80091c8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f8a9 	bl	8009304 <USBH_MSC_DecodeCSW>
 80091b2:	4603      	mov	r3, r0
 80091b4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80091b6:	7d7b      	ldrb	r3, [r7, #21]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d102      	bne.n	80091c2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80091c0:	e068      	b.n	8009294 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80091c2:	2302      	movs	r3, #2
 80091c4:	75fb      	strb	r3, [r7, #23]
      break;
 80091c6:	e065      	b.n	8009294 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80091c8:	7d3b      	ldrb	r3, [r7, #20]
 80091ca:	2b05      	cmp	r3, #5
 80091cc:	d162      	bne.n	8009294 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	2209      	movs	r2, #9
 80091d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80091d6:	e05d      	b.n	8009294 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	2200      	movs	r2, #0
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f864 	bl	80092ac <USBH_MSC_BOT_Abort>
 80091e4:	4603      	mov	r3, r0
 80091e6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80091e8:	7dbb      	ldrb	r3, [r7, #22]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d104      	bne.n	80091f8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2207      	movs	r2, #7
 80091f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80091f6:	e04f      	b.n	8009298 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80091f8:	7dbb      	ldrb	r3, [r7, #22]
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d14c      	bne.n	8009298 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	220b      	movs	r2, #11
 8009202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009206:	e047      	b.n	8009298 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	2201      	movs	r2, #1
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f84c 	bl	80092ac <USBH_MSC_BOT_Abort>
 8009214:	4603      	mov	r3, r0
 8009216:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009218:	7dbb      	ldrb	r3, [r7, #22]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d11d      	bne.n	800925a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	795b      	ldrb	r3, [r3, #5]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f002 f9cb 	bl	800b5c0 <USBH_LL_GetToggle>
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	7959      	ldrb	r1, [r3, #5]
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	f1c3 0301 	rsb	r3, r3, #1
 8009238:	b2db      	uxtb	r3, r3
 800923a:	461a      	mov	r2, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f002 f98f 	bl	800b560 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	791b      	ldrb	r3, [r3, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f002 f988 	bl	800b560 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	2209      	movs	r2, #9
 8009254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009258:	e020      	b.n	800929c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800925a:	7dbb      	ldrb	r3, [r7, #22]
 800925c:	2b04      	cmp	r3, #4
 800925e:	d11d      	bne.n	800929c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	220b      	movs	r2, #11
 8009264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009268:	e018      	b.n	800929c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff fdf2 	bl	8008e54 <USBH_MSC_BOT_REQ_Reset>
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d112      	bne.n	80092a0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009282:	e00d      	b.n	80092a0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009284:	bf00      	nop
 8009286:	e00c      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>
      break;
 8009288:	bf00      	nop
 800928a:	e00a      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800928c:	bf00      	nop
 800928e:	e008      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>
      break;
 8009290:	bf00      	nop
 8009292:	e006      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>
      break;
 8009294:	bf00      	nop
 8009296:	e004      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>
      break;
 8009298:	bf00      	nop
 800929a:	e002      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800929c:	bf00      	nop
 800929e:	e000      	b.n	80092a2 <USBH_MSC_BOT_Process+0x392>
      break;
 80092a0:	bf00      	nop
  }
  return status;
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
 80092b8:	4613      	mov	r3, r2
 80092ba:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80092bc:	2302      	movs	r3, #2
 80092be:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80092ca:	78bb      	ldrb	r3, [r7, #2]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <USBH_MSC_BOT_Abort+0x2a>
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d009      	beq.n	80092e8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80092d4:	e011      	b.n	80092fa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	79db      	ldrb	r3, [r3, #7]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f99c 	bl	800a61a <USBH_ClrFeature>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73fb      	strb	r3, [r7, #15]
      break;
 80092e6:	e008      	b.n	80092fa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	799b      	ldrb	r3, [r3, #6]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 f993 	bl	800a61a <USBH_ClrFeature>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]
      break;
 80092f8:	bf00      	nop
  }
  return status;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009316:	2301      	movs	r3, #1
 8009318:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	791b      	ldrb	r3, [r3, #4]
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f002 f861 	bl	800b3e8 <USBH_LL_GetLastXferSize>
 8009326:	4603      	mov	r3, r0
 8009328:	2b0d      	cmp	r3, #13
 800932a:	d002      	beq.n	8009332 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800932c:	2302      	movs	r3, #2
 800932e:	73fb      	strb	r3, [r7, #15]
 8009330:	e024      	b.n	800937c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009336:	4a14      	ldr	r2, [pc, #80]	; (8009388 <USBH_MSC_DecodeCSW+0x84>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d11d      	bne.n	8009378 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009344:	429a      	cmp	r2, r3
 8009346:	d119      	bne.n	800937c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800934e:	2b00      	cmp	r3, #0
 8009350:	d102      	bne.n	8009358 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]
 8009356:	e011      	b.n	800937c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800935e:	2b01      	cmp	r3, #1
 8009360:	d102      	bne.n	8009368 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009362:	2301      	movs	r3, #1
 8009364:	73fb      	strb	r3, [r7, #15]
 8009366:	e009      	b.n	800937c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800936e:	2b02      	cmp	r3, #2
 8009370:	d104      	bne.n	800937c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009372:	2302      	movs	r3, #2
 8009374:	73fb      	strb	r3, [r7, #15]
 8009376:	e001      	b.n	800937c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009378:	2302      	movs	r3, #2
 800937a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	53425355 	.word	0x53425355

0800938c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009398:	2302      	movs	r3, #2
 800939a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d002      	beq.n	80093b6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d021      	beq.n	80093f8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80093b4:	e028      	b.n	8009408 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2200      	movs	r2, #0
 80093ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	220a      	movs	r2, #10
 80093c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	3363      	adds	r3, #99	; 0x63
 80093d0:	2210      	movs	r2, #16
 80093d2:	2100      	movs	r1, #0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f002 f9bf 	bl	800b758 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2202      	movs	r2, #2
 80093ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80093f2:	2301      	movs	r3, #1
 80093f4:	73fb      	strb	r3, [r7, #15]
      break;
 80093f6:	e007      	b.n	8009408 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff fd87 	bl	8008f10 <USBH_MSC_BOT_Process>
 8009402:	4603      	mov	r3, r0
 8009404:	73fb      	strb	r3, [r7, #15]
      break;
 8009406:	bf00      	nop
  }

  return error;
 8009408:	7bfb      	ldrb	r3, [r7, #15]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b086      	sub	sp, #24
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	460b      	mov	r3, r1
 800941c:	607a      	str	r2, [r7, #4]
 800941e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009420:	2301      	movs	r3, #1
 8009422:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009434:	2b01      	cmp	r3, #1
 8009436:	d002      	beq.n	800943e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009438:	2b02      	cmp	r3, #2
 800943a:	d027      	beq.n	800948c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800943c:	e05f      	b.n	80094fe <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	2208      	movs	r2, #8
 8009442:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2280      	movs	r2, #128	; 0x80
 8009448:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	220a      	movs	r2, #10
 8009450:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	3363      	adds	r3, #99	; 0x63
 8009458:	2210      	movs	r2, #16
 800945a:	2100      	movs	r1, #0
 800945c:	4618      	mov	r0, r3
 800945e:	f002 f97b 	bl	800b758 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	2225      	movs	r2, #37	; 0x25
 8009466:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2202      	movs	r2, #2
 8009476:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f103 0210 	add.w	r2, r3, #16
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009486:	2301      	movs	r3, #1
 8009488:	75fb      	strb	r3, [r7, #23]
      break;
 800948a:	e038      	b.n	80094fe <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	4619      	mov	r1, r3
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff fd3d 	bl	8008f10 <USBH_MSC_BOT_Process>
 8009496:	4603      	mov	r3, r0
 8009498:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800949a:	7dfb      	ldrb	r3, [r7, #23]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d12d      	bne.n	80094fc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a6:	3303      	adds	r3, #3
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b2:	3302      	adds	r3, #2
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c0:	3301      	adds	r3, #1
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80094c6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	061b      	lsls	r3, r3, #24
 80094d2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094de:	3307      	adds	r3, #7
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ea:	3306      	adds	r3, #6
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	021b      	lsls	r3, r3, #8
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	4313      	orrs	r3, r2
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	809a      	strh	r2, [r3, #4]
      break;
 80094fc:	bf00      	nop
  }

  return error;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	460b      	mov	r3, r1
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009516:	2302      	movs	r3, #2
 8009518:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800952a:	2b01      	cmp	r3, #1
 800952c:	d002      	beq.n	8009534 <USBH_MSC_SCSI_Inquiry+0x2c>
 800952e:	2b02      	cmp	r3, #2
 8009530:	d03d      	beq.n	80095ae <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009532:	e089      	b.n	8009648 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2224      	movs	r2, #36	; 0x24
 8009538:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2280      	movs	r2, #128	; 0x80
 800953e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	220a      	movs	r2, #10
 8009546:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	3363      	adds	r3, #99	; 0x63
 800954e:	220a      	movs	r2, #10
 8009550:	2100      	movs	r1, #0
 8009552:	4618      	mov	r0, r3
 8009554:	f002 f900 	bl	800b758 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2212      	movs	r2, #18
 800955c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	015b      	lsls	r3, r3, #5
 8009564:	b2da      	uxtb	r2, r3
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	2224      	movs	r2, #36	; 0x24
 8009580:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f103 0210 	add.w	r2, r3, #16
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80095a8:	2301      	movs	r3, #1
 80095aa:	75fb      	strb	r3, [r7, #23]
      break;
 80095ac:	e04c      	b.n	8009648 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80095ae:	7afb      	ldrb	r3, [r7, #11]
 80095b0:	4619      	mov	r1, r3
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7ff fcac 	bl	8008f10 <USBH_MSC_BOT_Process>
 80095b8:	4603      	mov	r3, r0
 80095ba:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d141      	bne.n	8009646 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80095c2:	2222      	movs	r2, #34	; 0x22
 80095c4:	2100      	movs	r1, #0
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f002 f8c6 	bl	800b758 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f003 031f 	and.w	r3, r3, #31
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	095b      	lsrs	r3, r3, #5
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f4:	3301      	adds	r3, #1
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	b25b      	sxtb	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da03      	bge.n	8009606 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	709a      	strb	r2, [r3, #2]
 8009604:	e002      	b.n	800960c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	1cd8      	adds	r0, r3, #3
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009616:	3308      	adds	r3, #8
 8009618:	2208      	movs	r2, #8
 800961a:	4619      	mov	r1, r3
 800961c:	f002 f88e 	bl	800b73c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f103 000c 	add.w	r0, r3, #12
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800962c:	3310      	adds	r3, #16
 800962e:	2210      	movs	r2, #16
 8009630:	4619      	mov	r1, r3
 8009632:	f002 f883 	bl	800b73c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	331d      	adds	r3, #29
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009640:	3220      	adds	r2, #32
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	601a      	str	r2, [r3, #0]
      break;
 8009646:	bf00      	nop
  }

  return error;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	460b      	mov	r3, r1
 800965c:	607a      	str	r2, [r7, #4]
 800965e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009660:	2302      	movs	r3, #2
 8009662:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009674:	2b01      	cmp	r3, #1
 8009676:	d002      	beq.n	800967e <USBH_MSC_SCSI_RequestSense+0x2c>
 8009678:	2b02      	cmp	r3, #2
 800967a:	d03d      	beq.n	80096f8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800967c:	e05d      	b.n	800973a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	220e      	movs	r2, #14
 8009682:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2280      	movs	r2, #128	; 0x80
 8009688:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	220a      	movs	r2, #10
 8009690:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	3363      	adds	r3, #99	; 0x63
 8009698:	2210      	movs	r2, #16
 800969a:	2100      	movs	r1, #0
 800969c:	4618      	mov	r0, r3
 800969e:	f002 f85b 	bl	800b758 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2203      	movs	r2, #3
 80096a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80096aa:	7afb      	ldrb	r3, [r7, #11]
 80096ac:	015b      	lsls	r3, r3, #5
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	220e      	movs	r2, #14
 80096ca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	2202      	movs	r2, #2
 80096e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f103 0210 	add.w	r2, r3, #16
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80096f2:	2301      	movs	r3, #1
 80096f4:	75fb      	strb	r3, [r7, #23]
      break;
 80096f6:	e020      	b.n	800973a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	4619      	mov	r1, r3
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff fc07 	bl	8008f10 <USBH_MSC_BOT_Process>
 8009702:	4603      	mov	r3, r0
 8009704:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d115      	bne.n	8009738 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009712:	3302      	adds	r3, #2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	f003 030f 	and.w	r3, r3, #15
 800971a:	b2da      	uxtb	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009726:	7b1a      	ldrb	r2, [r3, #12]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009732:	7b5a      	ldrb	r2, [r3, #13]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	709a      	strb	r2, [r3, #2]
      break;
 8009738:	bf00      	nop
  }

  return error;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	607a      	str	r2, [r7, #4]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	460b      	mov	r3, r1
 8009752:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009754:	2302      	movs	r3, #2
 8009756:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009768:	2b01      	cmp	r3, #1
 800976a:	d002      	beq.n	8009772 <USBH_MSC_SCSI_Write+0x2e>
 800976c:	2b02      	cmp	r3, #2
 800976e:	d047      	beq.n	8009800 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009770:	e04e      	b.n	8009810 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009778:	461a      	mov	r2, r3
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	fb03 f202 	mul.w	r2, r3, r2
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	220a      	movs	r2, #10
 8009790:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	3363      	adds	r3, #99	; 0x63
 8009798:	2210      	movs	r2, #16
 800979a:	2100      	movs	r1, #0
 800979c:	4618      	mov	r0, r3
 800979e:	f001 ffdb 	bl	800b758 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	222a      	movs	r2, #42	; 0x2a
 80097a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80097aa:	79fa      	ldrb	r2, [r7, #7]
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80097b2:	79ba      	ldrb	r2, [r7, #6]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80097ba:	797a      	ldrb	r2, [r7, #5]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80097c2:	1d3b      	adds	r3, r7, #4
 80097c4:	781a      	ldrb	r2, [r3, #0]
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80097cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80097d6:	f107 0320 	add.w	r3, r7, #32
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2202      	movs	r2, #2
 80097ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80097fa:	2301      	movs	r3, #1
 80097fc:	75fb      	strb	r3, [r7, #23]
      break;
 80097fe:	e007      	b.n	8009810 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	4619      	mov	r1, r3
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7ff fb83 	bl	8008f10 <USBH_MSC_BOT_Process>
 800980a:	4603      	mov	r3, r0
 800980c:	75fb      	strb	r3, [r7, #23]
      break;
 800980e:	bf00      	nop
  }

  return error;
 8009810:	7dfb      	ldrb	r3, [r7, #23]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b086      	sub	sp, #24
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
 8009826:	460b      	mov	r3, r1
 8009828:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800982a:	2302      	movs	r3, #2
 800982c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800983e:	2b01      	cmp	r3, #1
 8009840:	d002      	beq.n	8009848 <USBH_MSC_SCSI_Read+0x2e>
 8009842:	2b02      	cmp	r3, #2
 8009844:	d047      	beq.n	80098d6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009846:	e04e      	b.n	80098e6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800984e:	461a      	mov	r2, r3
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	fb03 f202 	mul.w	r2, r3, r2
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	2280      	movs	r2, #128	; 0x80
 800985e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	220a      	movs	r2, #10
 8009866:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3363      	adds	r3, #99	; 0x63
 800986e:	2210      	movs	r2, #16
 8009870:	2100      	movs	r1, #0
 8009872:	4618      	mov	r0, r3
 8009874:	f001 ff70 	bl	800b758 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2228      	movs	r2, #40	; 0x28
 800987c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009880:	79fa      	ldrb	r2, [r7, #7]
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009888:	79ba      	ldrb	r2, [r7, #6]
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009890:	797a      	ldrb	r2, [r7, #5]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009898:	1d3b      	adds	r3, r7, #4
 800989a:	781a      	ldrb	r2, [r3, #0]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80098a2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80098ac:	f107 0320 	add.w	r3, r7, #32
 80098b0:	781a      	ldrb	r2, [r3, #0]
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80098d0:	2301      	movs	r3, #1
 80098d2:	75fb      	strb	r3, [r7, #23]
      break;
 80098d4:	e007      	b.n	80098e6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	4619      	mov	r1, r3
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fb18 	bl	8008f10 <USBH_MSC_BOT_Process>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]
      break;
 80098e4:	bf00      	nop
  }

  return error;
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009904:	2302      	movs	r3, #2
 8009906:	e029      	b.n	800995c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	79fa      	ldrb	r2, [r7, #7]
 800990c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f81f 	bl	8009964 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f001 fc93 	bl	800b280 <USBH_LL_Init>

  return USBH_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	e009      	b.n	800998a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	33e0      	adds	r3, #224	; 0xe0
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	2200      	movs	r2, #0
 8009982:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3301      	adds	r3, #1
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b0e      	cmp	r3, #14
 800998e:	d9f2      	bls.n	8009976 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	e009      	b.n	80099aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4413      	add	r3, r2
 800999c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3301      	adds	r3, #1
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b0:	d3f1      	bcc.n	8009996 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2240      	movs	r2, #64	; 0x40
 80099d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d016      	beq.n	8009a4e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10e      	bne.n	8009a48 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009a30:	1c59      	adds	r1, r3, #1
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	33de      	adds	r3, #222	; 0xde
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
 8009a46:	e004      	b.n	8009a52 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	73fb      	strb	r3, [r7, #15]
 8009a4c:	e001      	b.n	8009a52 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009a4e:	2302      	movs	r3, #2
 8009a50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009a76:	78fa      	ldrb	r2, [r7, #3]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d204      	bcs.n	8009a86 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	78fa      	ldrb	r2, [r7, #3]
 8009a80:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009a84:	e001      	b.n	8009a8a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009a86:	2302      	movs	r3, #2
 8009a88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	70fb      	strb	r3, [r7, #3]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70bb      	strb	r3, [r7, #2]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009ac0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009ac2:	e025      	b.n	8009b10 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	221a      	movs	r2, #26
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
 8009acc:	3308      	adds	r3, #8
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	3302      	adds	r3, #2
 8009ad4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	795b      	ldrb	r3, [r3, #5]
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d002      	beq.n	8009ae6 <USBH_FindInterface+0x4e>
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	2bff      	cmp	r3, #255	; 0xff
 8009ae4:	d111      	bne.n	8009b0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009aea:	78ba      	ldrb	r2, [r7, #2]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d002      	beq.n	8009af6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009af0:	78bb      	ldrb	r3, [r7, #2]
 8009af2:	2bff      	cmp	r3, #255	; 0xff
 8009af4:	d109      	bne.n	8009b0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009afa:	787a      	ldrb	r2, [r7, #1]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d002      	beq.n	8009b06 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009b00:	787b      	ldrb	r3, [r7, #1]
 8009b02:	2bff      	cmp	r3, #255	; 0xff
 8009b04:	d101      	bne.n	8009b0a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	e006      	b.n	8009b18 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d9d6      	bls.n	8009ac4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009b16:	23ff      	movs	r3, #255	; 0xff
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	371c      	adds	r7, #28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 fbe3 	bl	800b2f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009b32:	2101      	movs	r1, #1
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 fcfc 	bl	800b532 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af04      	add	r7, sp, #16
 8009b4a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d102      	bne.n	8009b66 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2203      	movs	r2, #3
 8009b64:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b0b      	cmp	r3, #11
 8009b6e:	f200 81b3 	bhi.w	8009ed8 <USBH_Process+0x394>
 8009b72:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <USBH_Process+0x34>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009ba9 	.word	0x08009ba9
 8009b7c:	08009bdb 	.word	0x08009bdb
 8009b80:	08009c43 	.word	0x08009c43
 8009b84:	08009e73 	.word	0x08009e73
 8009b88:	08009ed9 	.word	0x08009ed9
 8009b8c:	08009ce7 	.word	0x08009ce7
 8009b90:	08009e19 	.word	0x08009e19
 8009b94:	08009d1d 	.word	0x08009d1d
 8009b98:	08009d3d 	.word	0x08009d3d
 8009b9c:	08009d5d 	.word	0x08009d5d
 8009ba0:	08009d8b 	.word	0x08009d8b
 8009ba4:	08009e5b 	.word	0x08009e5b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 8193 	beq.w	8009edc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009bbc:	20c8      	movs	r0, #200	; 0xc8
 8009bbe:	f001 fd2f 	bl	800b620 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f001 fbf5 	bl	800b3b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009bd8:	e180      	b.n	8009edc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d107      	bne.n	8009bf4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009bf2:	e182      	b.n	8009efa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bfe:	d914      	bls.n	8009c2a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009c06:	3301      	adds	r3, #1
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d903      	bls.n	8009c22 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	220d      	movs	r2, #13
 8009c1e:	701a      	strb	r2, [r3, #0]
      break;
 8009c20:	e16b      	b.n	8009efa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	701a      	strb	r2, [r3, #0]
      break;
 8009c28:	e167      	b.n	8009efa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009c30:	f103 020a 	add.w	r2, r3, #10
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009c3a:	200a      	movs	r0, #10
 8009c3c:	f001 fcf0 	bl	800b620 <USBH_Delay>
      break;
 8009c40:	e15b      	b.n	8009efa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d005      	beq.n	8009c58 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c52:	2104      	movs	r1, #4
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009c58:	2064      	movs	r0, #100	; 0x64
 8009c5a:	f001 fce1 	bl	800b620 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 fb80 	bl	800b364 <USBH_LL_GetSpeed>
 8009c64:	4603      	mov	r3, r0
 8009c66:	461a      	mov	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2205      	movs	r2, #5
 8009c72:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009c74:	2100      	movs	r1, #0
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 f92f 	bl	800aeda <USBH_AllocPipe>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	461a      	mov	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009c84:	2180      	movs	r1, #128	; 0x80
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 f927 	bl	800aeda <USBH_AllocPipe>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	461a      	mov	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	7919      	ldrb	r1, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ca8:	b292      	uxth	r2, r2
 8009caa:	9202      	str	r2, [sp, #8]
 8009cac:	2200      	movs	r2, #0
 8009cae:	9201      	str	r2, [sp, #4]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2280      	movs	r2, #128	; 0x80
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 f8e0 	bl	800ae7c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	7959      	ldrb	r1, [r3, #5]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	9202      	str	r2, [sp, #8]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	9201      	str	r2, [sp, #4]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2200      	movs	r2, #0
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 f8cc 	bl	800ae7c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ce4:	e109      	b.n	8009efa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f90c 	bl	8009f04 <USBH_HandleEnum>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 80f3 	bne.w	8009ee0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d103      	bne.n	8009d14 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2208      	movs	r2, #8
 8009d10:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009d12:	e0e5      	b.n	8009ee0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2207      	movs	r2, #7
 8009d18:	701a      	strb	r2, [r3, #0]
      break;
 8009d1a:	e0e1      	b.n	8009ee0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 80de 	beq.w	8009ee4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d2e:	2101      	movs	r1, #1
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2208      	movs	r2, #8
 8009d38:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009d3a:	e0d3      	b.n	8009ee4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fc20 	bl	800a58c <USBH_SetCfg>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f040 80ca 	bne.w	8009ee8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2209      	movs	r2, #9
 8009d58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d5a:	e0c5      	b.n	8009ee8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00b      	beq.n	8009d82 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fc30 	bl	800a5d2 <USBH_SetFeature>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f040 80b9 	bne.w	8009eec <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	220a      	movs	r2, #10
 8009d7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d80:	e0b4      	b.n	8009eec <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	220a      	movs	r2, #10
 8009d86:	701a      	strb	r2, [r3, #0]
      break;
 8009d88:	e0b0      	b.n	8009eec <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80ad 	beq.w	8009ef0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
 8009da2:	e016      	b.n	8009dd2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009da4:	7bfa      	ldrb	r2, [r7, #15]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	32de      	adds	r2, #222	; 0xde
 8009daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dae:	791a      	ldrb	r2, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d108      	bne.n	8009dcc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009dba:	7bfa      	ldrb	r2, [r7, #15]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	32de      	adds	r2, #222	; 0xde
 8009dc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009dca:	e005      	b.n	8009dd8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	73fb      	strb	r3, [r7, #15]
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0e5      	beq.n	8009da4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d016      	beq.n	8009e10 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	4798      	blx	r3
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d109      	bne.n	8009e08 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2206      	movs	r2, #6
 8009df8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e00:	2103      	movs	r1, #3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e06:	e073      	b.n	8009ef0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	220d      	movs	r2, #13
 8009e0c:	701a      	strb	r2, [r3, #0]
      break;
 8009e0e:	e06f      	b.n	8009ef0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	220d      	movs	r2, #13
 8009e14:	701a      	strb	r2, [r3, #0]
      break;
 8009e16:	e06b      	b.n	8009ef0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d017      	beq.n	8009e52 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
 8009e2e:	4603      	mov	r3, r0
 8009e30:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d103      	bne.n	8009e42 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	220b      	movs	r2, #11
 8009e3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e40:	e058      	b.n	8009ef4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d154      	bne.n	8009ef4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	220d      	movs	r2, #13
 8009e4e:	701a      	strb	r2, [r3, #0]
      break;
 8009e50:	e050      	b.n	8009ef4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	220d      	movs	r2, #13
 8009e56:	701a      	strb	r2, [r3, #0]
      break;
 8009e58:	e04c      	b.n	8009ef4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d049      	beq.n	8009ef8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	4798      	blx	r3
      }
      break;
 8009e70:	e042      	b.n	8009ef8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff fd72 	bl	8009964 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009eae:	2105      	movs	r1, #5
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d107      	bne.n	8009ed0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff fe2b 	bl	8009b24 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ece:	e014      	b.n	8009efa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 fa11 	bl	800b2f8 <USBH_LL_Start>
      break;
 8009ed6:	e010      	b.n	8009efa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009ed8:	bf00      	nop
 8009eda:	e00e      	b.n	8009efa <USBH_Process+0x3b6>
      break;
 8009edc:	bf00      	nop
 8009ede:	e00c      	b.n	8009efa <USBH_Process+0x3b6>
      break;
 8009ee0:	bf00      	nop
 8009ee2:	e00a      	b.n	8009efa <USBH_Process+0x3b6>
    break;
 8009ee4:	bf00      	nop
 8009ee6:	e008      	b.n	8009efa <USBH_Process+0x3b6>
      break;
 8009ee8:	bf00      	nop
 8009eea:	e006      	b.n	8009efa <USBH_Process+0x3b6>
      break;
 8009eec:	bf00      	nop
 8009eee:	e004      	b.n	8009efa <USBH_Process+0x3b6>
      break;
 8009ef0:	bf00      	nop
 8009ef2:	e002      	b.n	8009efa <USBH_Process+0x3b6>
      break;
 8009ef4:	bf00      	nop
 8009ef6:	e000      	b.n	8009efa <USBH_Process+0x3b6>
      break;
 8009ef8:	bf00      	nop
  }
  return USBH_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af04      	add	r7, sp, #16
 8009f0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009f10:	2301      	movs	r3, #1
 8009f12:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b07      	cmp	r3, #7
 8009f1a:	f200 81c1 	bhi.w	800a2a0 <USBH_HandleEnum+0x39c>
 8009f1e:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <USBH_HandleEnum+0x20>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009f45 	.word	0x08009f45
 8009f28:	0800a003 	.word	0x0800a003
 8009f2c:	0800a06d 	.word	0x0800a06d
 8009f30:	0800a0fb 	.word	0x0800a0fb
 8009f34:	0800a165 	.word	0x0800a165
 8009f38:	0800a1d5 	.word	0x0800a1d5
 8009f3c:	0800a21b 	.word	0x0800a21b
 8009f40:	0800a261 	.word	0x0800a261
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009f44:	2108      	movs	r1, #8
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fa50 	bl	800a3ec <USBH_Get_DevDesc>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f50:	7bbb      	ldrb	r3, [r7, #14]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d130      	bne.n	8009fb8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	7919      	ldrb	r1, [r3, #4]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009f7a:	b292      	uxth	r2, r2
 8009f7c:	9202      	str	r2, [sp, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	9201      	str	r2, [sp, #4]
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	4603      	mov	r3, r0
 8009f86:	2280      	movs	r2, #128	; 0x80
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 ff77 	bl	800ae7c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	7959      	ldrb	r1, [r3, #5]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009fa2:	b292      	uxth	r2, r2
 8009fa4:	9202      	str	r2, [sp, #8]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	9201      	str	r2, [sp, #4]
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	4603      	mov	r3, r0
 8009fae:	2200      	movs	r2, #0
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 ff63 	bl	800ae7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009fb6:	e175      	b.n	800a2a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	f040 8172 	bne.w	800a2a4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d903      	bls.n	8009fe2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	220d      	movs	r2, #13
 8009fde:	701a      	strb	r2, [r3, #0]
      break;
 8009fe0:	e160      	b.n	800a2a4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	795b      	ldrb	r3, [r3, #5]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 ff97 	bl	800af1c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	791b      	ldrb	r3, [r3, #4]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 ff91 	bl	800af1c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	701a      	strb	r2, [r3, #0]
      break;
 800a000:	e150      	b.n	800a2a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a002:	2112      	movs	r1, #18
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f9f1 	bl	800a3ec <USBH_Get_DevDesc>
 800a00a:	4603      	mov	r3, r0
 800a00c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d103      	bne.n	800a01c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2202      	movs	r2, #2
 800a018:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a01a:	e145      	b.n	800a2a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	2b03      	cmp	r3, #3
 800a020:	f040 8142 	bne.w	800a2a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a02a:	3301      	adds	r3, #1
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d903      	bls.n	800a046 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	220d      	movs	r2, #13
 800a042:	701a      	strb	r2, [r3, #0]
      break;
 800a044:	e130      	b.n	800a2a8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	795b      	ldrb	r3, [r3, #5]
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 ff65 	bl	800af1c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	791b      	ldrb	r3, [r3, #4]
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 ff5f 	bl	800af1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	701a      	strb	r2, [r3, #0]
      break;
 800a06a:	e11d      	b.n	800a2a8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a06c:	2101      	movs	r1, #1
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fa68 	bl	800a544 <USBH_SetAddress>
 800a074:	4603      	mov	r3, r0
 800a076:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d132      	bne.n	800a0e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a07e:	2002      	movs	r0, #2
 800a080:	f001 face 	bl	800b620 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2203      	movs	r2, #3
 800a090:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	7919      	ldrb	r1, [r3, #4]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a0a6:	b292      	uxth	r2, r2
 800a0a8:	9202      	str	r2, [sp, #8]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	9201      	str	r2, [sp, #4]
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2280      	movs	r2, #128	; 0x80
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fee1 	bl	800ae7c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	7959      	ldrb	r1, [r3, #5]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a0ce:	b292      	uxth	r2, r2
 800a0d0:	9202      	str	r2, [sp, #8]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	9201      	str	r2, [sp, #4]
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2200      	movs	r2, #0
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fecd 	bl	800ae7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a0e2:	e0e3      	b.n	800a2ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0e4:	7bbb      	ldrb	r3, [r7, #14]
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	f040 80e0 	bne.w	800a2ac <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	220d      	movs	r2, #13
 800a0f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	705a      	strb	r2, [r3, #1]
      break;
 800a0f8:	e0d8      	b.n	800a2ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a0fa:	2109      	movs	r1, #9
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f99d 	bl	800a43c <USBH_Get_CfgDesc>
 800a102:	4603      	mov	r3, r0
 800a104:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d103      	bne.n	800a114 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2204      	movs	r2, #4
 800a110:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a112:	e0cd      	b.n	800a2b0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a114:	7bbb      	ldrb	r3, [r7, #14]
 800a116:	2b03      	cmp	r3, #3
 800a118:	f040 80ca 	bne.w	800a2b0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a122:	3301      	adds	r3, #1
 800a124:	b2da      	uxtb	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a132:	2b03      	cmp	r3, #3
 800a134:	d903      	bls.n	800a13e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	220d      	movs	r2, #13
 800a13a:	701a      	strb	r2, [r3, #0]
      break;
 800a13c:	e0b8      	b.n	800a2b0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	795b      	ldrb	r3, [r3, #5]
 800a142:	4619      	mov	r1, r3
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fee9 	bl	800af1c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	791b      	ldrb	r3, [r3, #4]
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fee3 	bl	800af1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	701a      	strb	r2, [r3, #0]
      break;
 800a162:	e0a5      	b.n	800a2b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f965 	bl	800a43c <USBH_Get_CfgDesc>
 800a172:	4603      	mov	r3, r0
 800a174:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d103      	bne.n	800a184 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2205      	movs	r2, #5
 800a180:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a182:	e097      	b.n	800a2b4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	2b03      	cmp	r3, #3
 800a188:	f040 8094 	bne.w	800a2b4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a192:	3301      	adds	r3, #1
 800a194:	b2da      	uxtb	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d903      	bls.n	800a1ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	220d      	movs	r2, #13
 800a1aa:	701a      	strb	r2, [r3, #0]
      break;
 800a1ac:	e082      	b.n	800a2b4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	795b      	ldrb	r3, [r3, #5]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 feb1 	bl	800af1c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	791b      	ldrb	r3, [r3, #4]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 feab 	bl	800af1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
      break;
 800a1d2:	e06f      	b.n	800a2b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d019      	beq.n	800a212 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a1ea:	23ff      	movs	r3, #255	; 0xff
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f949 	bl	800a484 <USBH_Get_StringDesc>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d103      	bne.n	800a204 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2206      	movs	r2, #6
 800a200:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a202:	e059      	b.n	800a2b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	2b03      	cmp	r3, #3
 800a208:	d156      	bne.n	800a2b8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2206      	movs	r2, #6
 800a20e:	705a      	strb	r2, [r3, #1]
      break;
 800a210:	e052      	b.n	800a2b8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2206      	movs	r2, #6
 800a216:	705a      	strb	r2, [r3, #1]
      break;
 800a218:	e04e      	b.n	800a2b8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a220:	2b00      	cmp	r3, #0
 800a222:	d019      	beq.n	800a258 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a230:	23ff      	movs	r3, #255	; 0xff
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f926 	bl	800a484 <USBH_Get_StringDesc>
 800a238:	4603      	mov	r3, r0
 800a23a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d103      	bne.n	800a24a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2207      	movs	r2, #7
 800a246:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a248:	e038      	b.n	800a2bc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d135      	bne.n	800a2bc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2207      	movs	r2, #7
 800a254:	705a      	strb	r2, [r3, #1]
      break;
 800a256:	e031      	b.n	800a2bc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2207      	movs	r2, #7
 800a25c:	705a      	strb	r2, [r3, #1]
      break;
 800a25e:	e02d      	b.n	800a2bc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a266:	2b00      	cmp	r3, #0
 800a268:	d017      	beq.n	800a29a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a276:	23ff      	movs	r3, #255	; 0xff
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f903 	bl	800a484 <USBH_Get_StringDesc>
 800a27e:	4603      	mov	r3, r0
 800a280:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a28c:	e018      	b.n	800a2c0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a28e:	7bbb      	ldrb	r3, [r7, #14]
 800a290:	2b03      	cmp	r3, #3
 800a292:	d115      	bne.n	800a2c0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	73fb      	strb	r3, [r7, #15]
      break;
 800a298:	e012      	b.n	800a2c0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73fb      	strb	r3, [r7, #15]
      break;
 800a29e:	e00f      	b.n	800a2c0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a2a0:	bf00      	nop
 800a2a2:	e00e      	b.n	800a2c2 <USBH_HandleEnum+0x3be>
      break;
 800a2a4:	bf00      	nop
 800a2a6:	e00c      	b.n	800a2c2 <USBH_HandleEnum+0x3be>
      break;
 800a2a8:	bf00      	nop
 800a2aa:	e00a      	b.n	800a2c2 <USBH_HandleEnum+0x3be>
      break;
 800a2ac:	bf00      	nop
 800a2ae:	e008      	b.n	800a2c2 <USBH_HandleEnum+0x3be>
      break;
 800a2b0:	bf00      	nop
 800a2b2:	e006      	b.n	800a2c2 <USBH_HandleEnum+0x3be>
      break;
 800a2b4:	bf00      	nop
 800a2b6:	e004      	b.n	800a2c2 <USBH_HandleEnum+0x3be>
      break;
 800a2b8:	bf00      	nop
 800a2ba:	e002      	b.n	800a2c2 <USBH_HandleEnum+0x3be>
      break;
 800a2bc:	bf00      	nop
 800a2be:	e000      	b.n	800a2c2 <USBH_HandleEnum+0x3be>
      break;
 800a2c0:	bf00      	nop
  }
  return Status;
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a2de:	bf00      	nop
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f804 	bl	800a30e <USBH_HandleSof>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b0b      	cmp	r3, #11
 800a31e:	d10a      	bne.n	800a336 <USBH_HandleSof+0x28>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a326:	2b00      	cmp	r3, #0
 800a328:	d005      	beq.n	800a336 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
  }
}
 800a336:	bf00      	nop
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a34e:	bf00      	nop
}
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a36a:	bf00      	nop
}
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 ffb2 	bl	800b32e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	791b      	ldrb	r3, [r3, #4]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fda3 	bl	800af1c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	795b      	ldrb	r3, [r3, #5]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fd9d 	bl	800af1c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af02      	add	r7, sp, #8
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a3fe:	78fb      	ldrb	r3, [r7, #3]
 800a400:	b29b      	uxth	r3, r3
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	4613      	mov	r3, r2
 800a406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a40a:	2100      	movs	r1, #0
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f864 	bl	800a4da <USBH_GetDescriptor>
 800a412:	4603      	mov	r3, r0
 800a414:	73fb      	strb	r3, [r7, #15]
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a428:	78fa      	ldrb	r2, [r7, #3]
 800a42a:	b292      	uxth	r2, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	f000 f918 	bl	800a662 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a432:	7bfb      	ldrb	r3, [r7, #15]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af02      	add	r7, sp, #8
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	331c      	adds	r3, #28
 800a44c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a44e:	887b      	ldrh	r3, [r7, #2]
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a458:	2100      	movs	r1, #0
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f83d 	bl	800a4da <USBH_GetDescriptor>
 800a460:	4603      	mov	r3, r0
 800a462:	72fb      	strb	r3, [r7, #11]
 800a464:	7afb      	ldrb	r3, [r7, #11]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d107      	bne.n	800a47a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a470:	887a      	ldrh	r2, [r7, #2]
 800a472:	68f9      	ldr	r1, [r7, #12]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 f964 	bl	800a742 <USBH_ParseCfgDesc>
  }

  return status;
 800a47a:	7afb      	ldrb	r3, [r7, #11]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af02      	add	r7, sp, #8
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	461a      	mov	r2, r3
 800a490:	460b      	mov	r3, r1
 800a492:	72fb      	strb	r3, [r7, #11]
 800a494:	4613      	mov	r3, r2
 800a496:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a498:	7afb      	ldrb	r3, [r7, #11]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a4a0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a4a8:	893b      	ldrh	r3, [r7, #8]
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 f812 	bl	800a4da <USBH_GetDescriptor>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75fb      	strb	r3, [r7, #23]
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d107      	bne.n	800a4d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a4c6:	893a      	ldrh	r2, [r7, #8]
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 fa37 	bl	800a93e <USBH_ParseStringDesc>
  }

  return status;
 800a4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	607b      	str	r3, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	72fb      	strb	r3, [r7, #11]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	789b      	ldrb	r3, [r3, #2]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d11c      	bne.n	800a52e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2206      	movs	r2, #6
 800a504:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	893a      	ldrh	r2, [r7, #8]
 800a50a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a50c:	893b      	ldrh	r3, [r7, #8]
 800a50e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a516:	d104      	bne.n	800a522 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f240 4209 	movw	r2, #1033	; 0x409
 800a51e:	829a      	strh	r2, [r3, #20]
 800a520:	e002      	b.n	800a528 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8b3a      	ldrh	r2, [r7, #24]
 800a52c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a52e:	8b3b      	ldrh	r3, [r7, #24]
 800a530:	461a      	mov	r2, r3
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 fa50 	bl	800a9da <USBH_CtlReq>
 800a53a:	4603      	mov	r3, r0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	789b      	ldrb	r3, [r3, #2]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d10f      	bne.n	800a578 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2205      	movs	r2, #5
 800a562:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	b29a      	uxth	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a578:	2200      	movs	r2, #0
 800a57a:	2100      	movs	r1, #0
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fa2c 	bl	800a9da <USBH_CtlReq>
 800a582:	4603      	mov	r3, r0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	789b      	ldrb	r3, [r3, #2]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d10e      	bne.n	800a5be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2209      	movs	r2, #9
 800a5aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	887a      	ldrh	r2, [r7, #2]
 800a5b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fa09 	bl	800a9da <USBH_CtlReq>
 800a5c8:	4603      	mov	r3, r0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	789b      	ldrb	r3, [r3, #2]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d10f      	bne.n	800a606 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a5f2:	78fb      	ldrb	r3, [r7, #3]
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a606:	2200      	movs	r2, #0
 800a608:	2100      	movs	r1, #0
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f9e5 	bl	800a9da <USBH_CtlReq>
 800a610:	4603      	mov	r3, r0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	789b      	ldrb	r3, [r3, #2]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d10f      	bne.n	800a64e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2202      	movs	r2, #2
 800a632:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a640:	78fb      	ldrb	r3, [r7, #3]
 800a642:	b29a      	uxth	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a64e:	2200      	movs	r2, #0
 800a650:	2100      	movs	r1, #0
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f9c1 	bl	800a9da <USBH_CtlReq>
 800a658:	4603      	mov	r3, r0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a662:	b480      	push	{r7}
 800a664:	b085      	sub	sp, #20
 800a666:	af00      	add	r7, sp, #0
 800a668:	60f8      	str	r0, [r7, #12]
 800a66a:	60b9      	str	r1, [r7, #8]
 800a66c:	4613      	mov	r3, r2
 800a66e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	781a      	ldrb	r2, [r3, #0]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	785a      	ldrb	r2, [r3, #1]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	3302      	adds	r3, #2
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	b29a      	uxth	r2, r3
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	3303      	adds	r3, #3
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	021b      	lsls	r3, r3, #8
 800a692:	b29b      	uxth	r3, r3
 800a694:	4313      	orrs	r3, r2
 800a696:	b29a      	uxth	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	791a      	ldrb	r2, [r3, #4]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	795a      	ldrb	r2, [r3, #5]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	799a      	ldrb	r2, [r3, #6]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	79da      	ldrb	r2, [r3, #7]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	d939      	bls.n	800a736 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	3309      	adds	r3, #9
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	330a      	adds	r3, #10
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	330b      	adds	r3, #11
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	330c      	adds	r3, #12
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	b29a      	uxth	r2, r3
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	330d      	adds	r3, #13
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	021b      	lsls	r3, r3, #8
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	4313      	orrs	r3, r2
 800a710:	b29a      	uxth	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	7b9a      	ldrb	r2, [r3, #14]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	7bda      	ldrb	r2, [r3, #15]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	7c1a      	ldrb	r2, [r3, #16]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	7c5a      	ldrb	r2, [r3, #17]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	745a      	strb	r2, [r3, #17]
  }
}
 800a736:	bf00      	nop
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b08a      	sub	sp, #40	; 0x28
 800a746:	af00      	add	r7, sp, #0
 800a748:	60f8      	str	r0, [r7, #12]
 800a74a:	60b9      	str	r1, [r7, #8]
 800a74c:	4613      	mov	r3, r2
 800a74e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	781a      	ldrb	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	785a      	ldrb	r2, [r3, #1]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	3302      	adds	r3, #2
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	3303      	adds	r3, #3
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b29b      	uxth	r3, r3
 800a784:	021b      	lsls	r3, r3, #8
 800a786:	b29b      	uxth	r3, r3
 800a788:	4313      	orrs	r3, r2
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	791a      	ldrb	r2, [r3, #4]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	795a      	ldrb	r2, [r3, #5]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	799a      	ldrb	r2, [r3, #6]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	79da      	ldrb	r2, [r3, #7]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	7a1a      	ldrb	r2, [r3, #8]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a7b8:	88fb      	ldrh	r3, [r7, #6]
 800a7ba:	2b09      	cmp	r3, #9
 800a7bc:	d95f      	bls.n	800a87e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a7be:	2309      	movs	r3, #9
 800a7c0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7c6:	e051      	b.n	800a86c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a7c8:	f107 0316 	add.w	r3, r7, #22
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7d0:	f000 f8e8 	bl	800a9a4 <USBH_GetNextDesc>
 800a7d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	785b      	ldrb	r3, [r3, #1]
 800a7da:	2b04      	cmp	r3, #4
 800a7dc:	d146      	bne.n	800a86c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a7de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7e2:	221a      	movs	r2, #26
 800a7e4:	fb02 f303 	mul.w	r3, r2, r3
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a7f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7f4:	69f8      	ldr	r0, [r7, #28]
 800a7f6:	f000 f846 	bl	800a886 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a800:	2300      	movs	r3, #0
 800a802:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a804:	e022      	b.n	800a84c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a806:	f107 0316 	add.w	r3, r7, #22
 800a80a:	4619      	mov	r1, r3
 800a80c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a80e:	f000 f8c9 	bl	800a9a4 <USBH_GetNextDesc>
 800a812:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	785b      	ldrb	r3, [r3, #1]
 800a818:	2b05      	cmp	r3, #5
 800a81a:	d117      	bne.n	800a84c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a81c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a820:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a824:	3201      	adds	r2, #1
 800a826:	00d2      	lsls	r2, r2, #3
 800a828:	211a      	movs	r1, #26
 800a82a:	fb01 f303 	mul.w	r3, r1, r3
 800a82e:	4413      	add	r3, r2
 800a830:	3308      	adds	r3, #8
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4413      	add	r3, r2
 800a836:	3304      	adds	r3, #4
 800a838:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a83a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a83c:	69b8      	ldr	r0, [r7, #24]
 800a83e:	f000 f851 	bl	800a8e4 <USBH_ParseEPDesc>
            ep_ix++;
 800a842:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a846:	3301      	adds	r3, #1
 800a848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	791b      	ldrb	r3, [r3, #4]
 800a850:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a854:	429a      	cmp	r2, r3
 800a856:	d204      	bcs.n	800a862 <USBH_ParseCfgDesc+0x120>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	885a      	ldrh	r2, [r3, #2]
 800a85c:	8afb      	ldrh	r3, [r7, #22]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d8d1      	bhi.n	800a806 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a866:	3301      	adds	r3, #1
 800a868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a86c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a870:	2b01      	cmp	r3, #1
 800a872:	d804      	bhi.n	800a87e <USBH_ParseCfgDesc+0x13c>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	885a      	ldrh	r2, [r3, #2]
 800a878:	8afb      	ldrh	r3, [r7, #22]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d8a4      	bhi.n	800a7c8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a87e:	bf00      	nop
 800a880:	3728      	adds	r7, #40	; 0x28
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	781a      	ldrb	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	785a      	ldrb	r2, [r3, #1]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	789a      	ldrb	r2, [r3, #2]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	78da      	ldrb	r2, [r3, #3]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	791a      	ldrb	r2, [r3, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	795a      	ldrb	r2, [r3, #5]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	799a      	ldrb	r2, [r3, #6]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	79da      	ldrb	r2, [r3, #7]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	7a1a      	ldrb	r2, [r3, #8]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	721a      	strb	r2, [r3, #8]
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781a      	ldrb	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	785a      	ldrb	r2, [r3, #1]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	789a      	ldrb	r2, [r3, #2]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	78da      	ldrb	r2, [r3, #3]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	3304      	adds	r3, #4
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	b29a      	uxth	r2, r3
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	3305      	adds	r3, #5
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	b29b      	uxth	r3, r3
 800a922:	4313      	orrs	r3, r2
 800a924:	b29a      	uxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	799a      	ldrb	r2, [r3, #6]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	719a      	strb	r2, [r3, #6]
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a93e:	b480      	push	{r7}
 800a940:	b087      	sub	sp, #28
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	4613      	mov	r3, r2
 800a94a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3301      	adds	r3, #1
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	2b03      	cmp	r3, #3
 800a954:	d120      	bne.n	800a998 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	1e9a      	subs	r2, r3, #2
 800a95c:	88fb      	ldrh	r3, [r7, #6]
 800a95e:	4293      	cmp	r3, r2
 800a960:	bf28      	it	cs
 800a962:	4613      	movcs	r3, r2
 800a964:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3302      	adds	r3, #2
 800a96a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a96c:	2300      	movs	r3, #0
 800a96e:	82fb      	strh	r3, [r7, #22]
 800a970:	e00b      	b.n	800a98a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a972:	8afb      	ldrh	r3, [r7, #22]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	781a      	ldrb	r2, [r3, #0]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	3301      	adds	r3, #1
 800a982:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a984:	8afb      	ldrh	r3, [r7, #22]
 800a986:	3302      	adds	r3, #2
 800a988:	82fb      	strh	r3, [r7, #22]
 800a98a:	8afa      	ldrh	r2, [r7, #22]
 800a98c:	8abb      	ldrh	r3, [r7, #20]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d3ef      	bcc.n	800a972 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
  }
}
 800a998:	bf00      	nop
 800a99a:	371c      	adds	r7, #28
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	881a      	ldrh	r2, [r3, #0]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	4413      	add	r3, r2
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b086      	sub	sp, #24
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	60f8      	str	r0, [r7, #12]
 800a9e2:	60b9      	str	r1, [r7, #8]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	789b      	ldrb	r3, [r3, #2]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d002      	beq.n	800a9fa <USBH_CtlReq+0x20>
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d00f      	beq.n	800aa18 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a9f8:	e027      	b.n	800aa4a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	88fa      	ldrh	r2, [r7, #6]
 800aa04:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa12:	2301      	movs	r3, #1
 800aa14:	75fb      	strb	r3, [r7, #23]
      break;
 800aa16:	e018      	b.n	800aa4a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f000 f81b 	bl	800aa54 <USBH_HandleControl>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aa22:	7dfb      	ldrb	r3, [r7, #23]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <USBH_CtlReq+0x54>
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d106      	bne.n	800aa3c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2201      	movs	r2, #1
 800aa32:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	761a      	strb	r2, [r3, #24]
      break;
 800aa3a:	e005      	b.n	800aa48 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d102      	bne.n	800aa48 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	709a      	strb	r2, [r3, #2]
      break;
 800aa48:	bf00      	nop
  }
  return status;
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af02      	add	r7, sp, #8
 800aa5a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aa60:	2300      	movs	r3, #0
 800aa62:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7e1b      	ldrb	r3, [r3, #24]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	2b0a      	cmp	r3, #10
 800aa6c:	f200 8156 	bhi.w	800ad1c <USBH_HandleControl+0x2c8>
 800aa70:	a201      	add	r2, pc, #4	; (adr r2, 800aa78 <USBH_HandleControl+0x24>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aaa5 	.word	0x0800aaa5
 800aa7c:	0800aabf 	.word	0x0800aabf
 800aa80:	0800ab29 	.word	0x0800ab29
 800aa84:	0800ab4f 	.word	0x0800ab4f
 800aa88:	0800ab87 	.word	0x0800ab87
 800aa8c:	0800abb1 	.word	0x0800abb1
 800aa90:	0800ac03 	.word	0x0800ac03
 800aa94:	0800ac25 	.word	0x0800ac25
 800aa98:	0800ac61 	.word	0x0800ac61
 800aa9c:	0800ac87 	.word	0x0800ac87
 800aaa0:	0800acc5 	.word	0x0800acc5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f103 0110 	add.w	r1, r3, #16
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	795b      	ldrb	r3, [r3, #5]
 800aaae:	461a      	mov	r2, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f943 	bl	800ad3c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2202      	movs	r2, #2
 800aaba:	761a      	strb	r2, [r3, #24]
      break;
 800aabc:	e139      	b.n	800ad32 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	795b      	ldrb	r3, [r3, #5]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fd21 	bl	800b50c <USBH_LL_GetURBState>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d11e      	bne.n	800ab12 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	7c1b      	ldrb	r3, [r3, #16]
 800aad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aadc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	8adb      	ldrh	r3, [r3, #22]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aae6:	7b7b      	ldrb	r3, [r7, #13]
 800aae8:	2b80      	cmp	r3, #128	; 0x80
 800aaea:	d103      	bne.n	800aaf4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2203      	movs	r2, #3
 800aaf0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aaf2:	e115      	b.n	800ad20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2205      	movs	r2, #5
 800aaf8:	761a      	strb	r2, [r3, #24]
      break;
 800aafa:	e111      	b.n	800ad20 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800aafc:	7b7b      	ldrb	r3, [r7, #13]
 800aafe:	2b80      	cmp	r3, #128	; 0x80
 800ab00:	d103      	bne.n	800ab0a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2209      	movs	r2, #9
 800ab06:	761a      	strb	r2, [r3, #24]
      break;
 800ab08:	e10a      	b.n	800ad20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2207      	movs	r2, #7
 800ab0e:	761a      	strb	r2, [r3, #24]
      break;
 800ab10:	e106      	b.n	800ad20 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	d003      	beq.n	800ab20 <USBH_HandleControl+0xcc>
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	f040 8100 	bne.w	800ad20 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	220b      	movs	r2, #11
 800ab24:	761a      	strb	r2, [r3, #24]
      break;
 800ab26:	e0fb      	b.n	800ad20 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6899      	ldr	r1, [r3, #8]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	899a      	ldrh	r2, [r3, #12]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	791b      	ldrb	r3, [r3, #4]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f93a 	bl	800adba <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2204      	movs	r2, #4
 800ab4a:	761a      	strb	r2, [r3, #24]
      break;
 800ab4c:	e0f1      	b.n	800ad32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	791b      	ldrb	r3, [r3, #4]
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fcd9 	bl	800b50c <USBH_LL_GetURBState>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d102      	bne.n	800ab6a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2209      	movs	r2, #9
 800ab68:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	2b05      	cmp	r3, #5
 800ab6e:	d102      	bne.n	800ab76 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ab70:	2303      	movs	r3, #3
 800ab72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ab74:	e0d6      	b.n	800ad24 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
 800ab78:	2b04      	cmp	r3, #4
 800ab7a:	f040 80d3 	bne.w	800ad24 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	220b      	movs	r2, #11
 800ab82:	761a      	strb	r2, [r3, #24]
      break;
 800ab84:	e0ce      	b.n	800ad24 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6899      	ldr	r1, [r3, #8]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	899a      	ldrh	r2, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	795b      	ldrb	r3, [r3, #5]
 800ab92:	2001      	movs	r0, #1
 800ab94:	9000      	str	r0, [sp, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f8ea 	bl	800ad70 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2206      	movs	r2, #6
 800abac:	761a      	strb	r2, [r3, #24]
      break;
 800abae:	e0c0      	b.n	800ad32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	795b      	ldrb	r3, [r3, #5]
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fca8 	bl	800b50c <USBH_LL_GetURBState>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d103      	bne.n	800abce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2207      	movs	r2, #7
 800abca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800abcc:	e0ac      	b.n	800ad28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	2b05      	cmp	r3, #5
 800abd2:	d105      	bne.n	800abe0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	220c      	movs	r2, #12
 800abd8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800abda:	2303      	movs	r3, #3
 800abdc:	73fb      	strb	r3, [r7, #15]
      break;
 800abde:	e0a3      	b.n	800ad28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800abe0:	7bbb      	ldrb	r3, [r7, #14]
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d103      	bne.n	800abee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2205      	movs	r2, #5
 800abea:	761a      	strb	r2, [r3, #24]
      break;
 800abec:	e09c      	b.n	800ad28 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	f040 8099 	bne.w	800ad28 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	220b      	movs	r2, #11
 800abfa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800abfc:	2302      	movs	r3, #2
 800abfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ac00:	e092      	b.n	800ad28 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	791b      	ldrb	r3, [r3, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	2100      	movs	r1, #0
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f8d5 	bl	800adba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2208      	movs	r2, #8
 800ac20:	761a      	strb	r2, [r3, #24]

      break;
 800ac22:	e086      	b.n	800ad32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	791b      	ldrb	r3, [r3, #4]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fc6e 	bl	800b50c <USBH_LL_GetURBState>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d105      	bne.n	800ac46 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	220d      	movs	r2, #13
 800ac3e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ac44:	e072      	b.n	800ad2c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	d103      	bne.n	800ac54 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	220b      	movs	r2, #11
 800ac50:	761a      	strb	r2, [r3, #24]
      break;
 800ac52:	e06b      	b.n	800ad2c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	2b05      	cmp	r3, #5
 800ac58:	d168      	bne.n	800ad2c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac5e:	e065      	b.n	800ad2c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	795b      	ldrb	r3, [r3, #5]
 800ac64:	2201      	movs	r2, #1
 800ac66:	9200      	str	r2, [sp, #0]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f87f 	bl	800ad70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	220a      	movs	r2, #10
 800ac82:	761a      	strb	r2, [r3, #24]
      break;
 800ac84:	e055      	b.n	800ad32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	795b      	ldrb	r3, [r3, #5]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fc3d 	bl	800b50c <USBH_LL_GetURBState>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d105      	bne.n	800aca8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	220d      	movs	r2, #13
 800aca4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aca6:	e043      	b.n	800ad30 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d103      	bne.n	800acb6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2209      	movs	r2, #9
 800acb2:	761a      	strb	r2, [r3, #24]
      break;
 800acb4:	e03c      	b.n	800ad30 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d139      	bne.n	800ad30 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	220b      	movs	r2, #11
 800acc0:	761a      	strb	r2, [r3, #24]
      break;
 800acc2:	e035      	b.n	800ad30 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	7e5b      	ldrb	r3, [r3, #25]
 800acc8:	3301      	adds	r3, #1
 800acca:	b2da      	uxtb	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	765a      	strb	r2, [r3, #25]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7e5b      	ldrb	r3, [r3, #25]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d806      	bhi.n	800ace6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ace4:	e025      	b.n	800ad32 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acec:	2106      	movs	r1, #6
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	795b      	ldrb	r3, [r3, #5]
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f90c 	bl	800af1c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	791b      	ldrb	r3, [r3, #4]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f906 	bl	800af1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad16:	2302      	movs	r3, #2
 800ad18:	73fb      	strb	r3, [r7, #15]
      break;
 800ad1a:	e00a      	b.n	800ad32 <USBH_HandleControl+0x2de>

    default:
      break;
 800ad1c:	bf00      	nop
 800ad1e:	e008      	b.n	800ad32 <USBH_HandleControl+0x2de>
      break;
 800ad20:	bf00      	nop
 800ad22:	e006      	b.n	800ad32 <USBH_HandleControl+0x2de>
      break;
 800ad24:	bf00      	nop
 800ad26:	e004      	b.n	800ad32 <USBH_HandleControl+0x2de>
      break;
 800ad28:	bf00      	nop
 800ad2a:	e002      	b.n	800ad32 <USBH_HandleControl+0x2de>
      break;
 800ad2c:	bf00      	nop
 800ad2e:	e000      	b.n	800ad32 <USBH_HandleControl+0x2de>
      break;
 800ad30:	bf00      	nop
  }

  return status;
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af04      	add	r7, sp, #16
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ad4a:	79f9      	ldrb	r1, [r7, #7]
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9303      	str	r3, [sp, #12]
 800ad50:	2308      	movs	r3, #8
 800ad52:	9302      	str	r3, [sp, #8]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	9301      	str	r3, [sp, #4]
 800ad58:	2300      	movs	r3, #0
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	2200      	movs	r2, #0
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 fba2 	bl	800b4aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af04      	add	r7, sp, #16
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	460b      	mov	r3, r1
 800ad80:	80fb      	strh	r3, [r7, #6]
 800ad82:	4613      	mov	r3, r2
 800ad84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ad94:	7979      	ldrb	r1, [r7, #5]
 800ad96:	7e3b      	ldrb	r3, [r7, #24]
 800ad98:	9303      	str	r3, [sp, #12]
 800ad9a:	88fb      	ldrh	r3, [r7, #6]
 800ad9c:	9302      	str	r3, [sp, #8]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	9301      	str	r3, [sp, #4]
 800ada2:	2301      	movs	r3, #1
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	2300      	movs	r3, #0
 800ada8:	2200      	movs	r2, #0
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 fb7d 	bl	800b4aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b088      	sub	sp, #32
 800adbe:	af04      	add	r7, sp, #16
 800adc0:	60f8      	str	r0, [r7, #12]
 800adc2:	60b9      	str	r1, [r7, #8]
 800adc4:	4611      	mov	r1, r2
 800adc6:	461a      	mov	r2, r3
 800adc8:	460b      	mov	r3, r1
 800adca:	80fb      	strh	r3, [r7, #6]
 800adcc:	4613      	mov	r3, r2
 800adce:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800add0:	7979      	ldrb	r1, [r7, #5]
 800add2:	2300      	movs	r3, #0
 800add4:	9303      	str	r3, [sp, #12]
 800add6:	88fb      	ldrh	r3, [r7, #6]
 800add8:	9302      	str	r3, [sp, #8]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	2301      	movs	r3, #1
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	2300      	movs	r3, #0
 800ade4:	2201      	movs	r2, #1
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 fb5f 	bl	800b4aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800adec:	2300      	movs	r3, #0

}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b088      	sub	sp, #32
 800adfa:	af04      	add	r7, sp, #16
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	4611      	mov	r1, r2
 800ae02:	461a      	mov	r2, r3
 800ae04:	460b      	mov	r3, r1
 800ae06:	80fb      	strh	r3, [r7, #6]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae16:	2300      	movs	r3, #0
 800ae18:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ae1a:	7979      	ldrb	r1, [r7, #5]
 800ae1c:	7e3b      	ldrb	r3, [r7, #24]
 800ae1e:	9303      	str	r3, [sp, #12]
 800ae20:	88fb      	ldrh	r3, [r7, #6]
 800ae22:	9302      	str	r3, [sp, #8]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	9301      	str	r3, [sp, #4]
 800ae28:	2301      	movs	r3, #1
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	2200      	movs	r2, #0
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 fb3a 	bl	800b4aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b088      	sub	sp, #32
 800ae44:	af04      	add	r7, sp, #16
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	460b      	mov	r3, r1
 800ae50:	80fb      	strh	r3, [r7, #6]
 800ae52:	4613      	mov	r3, r2
 800ae54:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ae56:	7979      	ldrb	r1, [r7, #5]
 800ae58:	2300      	movs	r3, #0
 800ae5a:	9303      	str	r3, [sp, #12]
 800ae5c:	88fb      	ldrh	r3, [r7, #6]
 800ae5e:	9302      	str	r3, [sp, #8]
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	2301      	movs	r3, #1
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	2302      	movs	r3, #2
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 fb1c 	bl	800b4aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af04      	add	r7, sp, #16
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	4608      	mov	r0, r1
 800ae86:	4611      	mov	r1, r2
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	70fb      	strb	r3, [r7, #3]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	70bb      	strb	r3, [r7, #2]
 800ae92:	4613      	mov	r3, r2
 800ae94:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ae96:	7878      	ldrb	r0, [r7, #1]
 800ae98:	78ba      	ldrb	r2, [r7, #2]
 800ae9a:	78f9      	ldrb	r1, [r7, #3]
 800ae9c:	8b3b      	ldrh	r3, [r7, #24]
 800ae9e:	9302      	str	r3, [sp, #8]
 800aea0:	7d3b      	ldrb	r3, [r7, #20]
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	7c3b      	ldrb	r3, [r7, #16]
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	4603      	mov	r3, r0
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 faaf 	bl	800b40e <USBH_LL_OpenPipe>

  return USBH_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b082      	sub	sp, #8
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	460b      	mov	r3, r1
 800aec4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 face 	bl	800b46c <USBH_LL_ClosePipe>

  return USBH_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	460b      	mov	r3, r1
 800aee4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f836 	bl	800af58 <USBH_GetFreePipe>
 800aeec:	4603      	mov	r3, r0
 800aeee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aef0:	89fb      	ldrh	r3, [r7, #14]
 800aef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00a      	beq.n	800af10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800aefa:	78fa      	ldrb	r2, [r7, #3]
 800aefc:	89fb      	ldrh	r3, [r7, #14]
 800aefe:	f003 030f 	and.w	r3, r3, #15
 800af02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	33e0      	adds	r3, #224	; 0xe0
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af10:	89fb      	ldrh	r3, [r7, #14]
 800af12:	b2db      	uxtb	r3, r3
}
 800af14:	4618      	mov	r0, r3
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	460b      	mov	r3, r1
 800af26:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	2b0a      	cmp	r3, #10
 800af2c:	d80d      	bhi.n	800af4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800af2e:	78fb      	ldrb	r3, [r7, #3]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	33e0      	adds	r3, #224	; 0xe0
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	685a      	ldr	r2, [r3, #4]
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	33e0      	adds	r3, #224	; 0xe0
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	440b      	add	r3, r1
 800af48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800af60:	2300      	movs	r3, #0
 800af62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800af64:	2300      	movs	r3, #0
 800af66:	73fb      	strb	r3, [r7, #15]
 800af68:	e00f      	b.n	800af8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	33e0      	adds	r3, #224	; 0xe0
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d102      	bne.n	800af84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	b29b      	uxth	r3, r3
 800af82:	e007      	b.n	800af94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	3301      	adds	r3, #1
 800af88:	73fb      	strb	r3, [r7, #15]
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	2b0a      	cmp	r3, #10
 800af8e:	d9ec      	bls.n	800af6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800af90:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800af94:	4618      	mov	r0, r3
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	4613      	mov	r3, r2
 800afac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800afae:	2301      	movs	r3, #1
 800afb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800afb6:	4b1f      	ldr	r3, [pc, #124]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800afb8:	7a5b      	ldrb	r3, [r3, #9]
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d131      	bne.n	800b024 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800afc0:	4b1c      	ldr	r3, [pc, #112]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800afc2:	7a5b      	ldrb	r3, [r3, #9]
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	461a      	mov	r2, r3
 800afc8:	4b1a      	ldr	r3, [pc, #104]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800afca:	2100      	movs	r1, #0
 800afcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800afce:	4b19      	ldr	r3, [pc, #100]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800afd0:	7a5b      	ldrb	r3, [r3, #9]
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	4a17      	ldr	r2, [pc, #92]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800afde:	4b15      	ldr	r3, [pc, #84]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800afe0:	7a5b      	ldrb	r3, [r3, #9]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	461a      	mov	r2, r3
 800afe6:	4b13      	ldr	r3, [pc, #76]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800afe8:	4413      	add	r3, r2
 800afea:	79fa      	ldrb	r2, [r7, #7]
 800afec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800afee:	4b11      	ldr	r3, [pc, #68]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800aff0:	7a5b      	ldrb	r3, [r3, #9]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	b2d1      	uxtb	r1, r2
 800aff8:	4a0e      	ldr	r2, [pc, #56]	; (800b034 <FATFS_LinkDriverEx+0x94>)
 800affa:	7251      	strb	r1, [r2, #9]
 800affc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800affe:	7dbb      	ldrb	r3, [r7, #22]
 800b000:	3330      	adds	r3, #48	; 0x30
 800b002:	b2da      	uxtb	r2, r3
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	3301      	adds	r3, #1
 800b00c:	223a      	movs	r2, #58	; 0x3a
 800b00e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	3302      	adds	r3, #2
 800b014:	222f      	movs	r2, #47	; 0x2f
 800b016:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	3303      	adds	r3, #3
 800b01c:	2200      	movs	r2, #0
 800b01e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b024:	7dfb      	ldrb	r3, [r7, #23]
}
 800b026:	4618      	mov	r0, r3
 800b028:	371c      	adds	r7, #28
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	2000234c 	.word	0x2000234c

0800b038 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b042:	2200      	movs	r2, #0
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff ffaa 	bl	800afa0 <FATFS_LinkDriverEx>
 800b04c:	4603      	mov	r3, r0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b05c:	2201      	movs	r2, #1
 800b05e:	490e      	ldr	r1, [pc, #56]	; (800b098 <MX_USB_HOST_Init+0x40>)
 800b060:	480e      	ldr	r0, [pc, #56]	; (800b09c <MX_USB_HOST_Init+0x44>)
 800b062:	f7fe fc45 	bl	80098f0 <USBH_Init>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b06c:	f7f6 f836 	bl	80010dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b070:	490b      	ldr	r1, [pc, #44]	; (800b0a0 <MX_USB_HOST_Init+0x48>)
 800b072:	480a      	ldr	r0, [pc, #40]	; (800b09c <MX_USB_HOST_Init+0x44>)
 800b074:	f7fe fcca 	bl	8009a0c <USBH_RegisterClass>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b07e:	f7f6 f82d 	bl	80010dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b082:	4806      	ldr	r0, [pc, #24]	; (800b09c <MX_USB_HOST_Init+0x44>)
 800b084:	f7fe fd4e 	bl	8009b24 <USBH_Start>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b08e:	f7f6 f825 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b092:	bf00      	nop
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	0800b0b9 	.word	0x0800b0b9
 800b09c:	20002358 	.word	0x20002358
 800b0a0:	200002b0 	.word	0x200002b0

0800b0a4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b0a8:	4802      	ldr	r0, [pc, #8]	; (800b0b4 <MX_USB_HOST_Process+0x10>)
 800b0aa:	f7fe fd4b 	bl	8009b44 <USBH_Process>
}
 800b0ae:	bf00      	nop
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20002358 	.word	0x20002358

0800b0b8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d819      	bhi.n	800b100 <USBH_UserProcess+0x48>
 800b0cc:	a201      	add	r2, pc, #4	; (adr r2, 800b0d4 <USBH_UserProcess+0x1c>)
 800b0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d2:	bf00      	nop
 800b0d4:	0800b101 	.word	0x0800b101
 800b0d8:	0800b0f1 	.word	0x0800b0f1
 800b0dc:	0800b101 	.word	0x0800b101
 800b0e0:	0800b0f9 	.word	0x0800b0f9
 800b0e4:	0800b0e9 	.word	0x0800b0e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b0e8:	4b09      	ldr	r3, [pc, #36]	; (800b110 <USBH_UserProcess+0x58>)
 800b0ea:	2203      	movs	r2, #3
 800b0ec:	701a      	strb	r2, [r3, #0]
  break;
 800b0ee:	e008      	b.n	800b102 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <USBH_UserProcess+0x58>)
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	701a      	strb	r2, [r3, #0]
  break;
 800b0f6:	e004      	b.n	800b102 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0f8:	4b05      	ldr	r3, [pc, #20]	; (800b110 <USBH_UserProcess+0x58>)
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	701a      	strb	r2, [r3, #0]
  break;
 800b0fe:	e000      	b.n	800b102 <USBH_UserProcess+0x4a>

  default:
  break;
 800b100:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b102:	bf00      	nop
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	20002730 	.word	0x20002730

0800b114 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b08a      	sub	sp, #40	; 0x28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b11c:	f107 0314 	add.w	r3, r7, #20
 800b120:	2200      	movs	r2, #0
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	605a      	str	r2, [r3, #4]
 800b126:	609a      	str	r2, [r3, #8]
 800b128:	60da      	str	r2, [r3, #12]
 800b12a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b134:	d147      	bne.n	800b1c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b136:	2300      	movs	r3, #0
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	4b25      	ldr	r3, [pc, #148]	; (800b1d0 <HAL_HCD_MspInit+0xbc>)
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	4a24      	ldr	r2, [pc, #144]	; (800b1d0 <HAL_HCD_MspInit+0xbc>)
 800b140:	f043 0301 	orr.w	r3, r3, #1
 800b144:	6313      	str	r3, [r2, #48]	; 0x30
 800b146:	4b22      	ldr	r3, [pc, #136]	; (800b1d0 <HAL_HCD_MspInit+0xbc>)
 800b148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	613b      	str	r3, [r7, #16]
 800b150:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b152:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b158:	2300      	movs	r3, #0
 800b15a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b15c:	2300      	movs	r3, #0
 800b15e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b160:	f107 0314 	add.w	r3, r7, #20
 800b164:	4619      	mov	r1, r3
 800b166:	481b      	ldr	r0, [pc, #108]	; (800b1d4 <HAL_HCD_MspInit+0xc0>)
 800b168:	f7f8 f810 	bl	800318c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b16c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b172:	2302      	movs	r3, #2
 800b174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b176:	2300      	movs	r3, #0
 800b178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b17a:	2300      	movs	r3, #0
 800b17c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b17e:	230a      	movs	r3, #10
 800b180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b182:	f107 0314 	add.w	r3, r7, #20
 800b186:	4619      	mov	r1, r3
 800b188:	4812      	ldr	r0, [pc, #72]	; (800b1d4 <HAL_HCD_MspInit+0xc0>)
 800b18a:	f7f7 ffff 	bl	800318c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b18e:	4b10      	ldr	r3, [pc, #64]	; (800b1d0 <HAL_HCD_MspInit+0xbc>)
 800b190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b192:	4a0f      	ldr	r2, [pc, #60]	; (800b1d0 <HAL_HCD_MspInit+0xbc>)
 800b194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b198:	6353      	str	r3, [r2, #52]	; 0x34
 800b19a:	2300      	movs	r3, #0
 800b19c:	60fb      	str	r3, [r7, #12]
 800b19e:	4b0c      	ldr	r3, [pc, #48]	; (800b1d0 <HAL_HCD_MspInit+0xbc>)
 800b1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a2:	4a0b      	ldr	r2, [pc, #44]	; (800b1d0 <HAL_HCD_MspInit+0xbc>)
 800b1a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1a8:	6453      	str	r3, [r2, #68]	; 0x44
 800b1aa:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <HAL_HCD_MspInit+0xbc>)
 800b1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	2043      	movs	r0, #67	; 0x43
 800b1bc:	f7f7 fc3f 	bl	8002a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b1c0:	2043      	movs	r0, #67	; 0x43
 800b1c2:	f7f7 fc58 	bl	8002a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	3728      	adds	r7, #40	; 0x28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	40023800 	.word	0x40023800
 800b1d4:	40020000 	.word	0x40020000

0800b1d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff f87f 	bl	800a2ea <USBH_LL_IncTimer>
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff f8b7 	bl	800a376 <USBH_LL_Connect>
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b21e:	4618      	mov	r0, r3
 800b220:	f7ff f8c0 	bl	800a3a4 <USBH_LL_Disconnect>
}
 800b224:	bf00      	nop
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
 800b238:	4613      	mov	r3, r2
 800b23a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b256:	4618      	mov	r0, r3
 800b258:	f7ff f871 	bl	800a33e <USBH_LL_PortEnabled>
}
 800b25c:	bf00      	nop
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff f871 	bl	800a35a <USBH_LL_PortDisabled>
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d12a      	bne.n	800b2e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b292:	4a18      	ldr	r2, [pc, #96]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a15      	ldr	r2, [pc, #84]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b29e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b2a2:	4b14      	ldr	r3, [pc, #80]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b2a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b2a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b2aa:	4b12      	ldr	r3, [pc, #72]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b2b0:	4b10      	ldr	r3, [pc, #64]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b2b6:	4b0f      	ldr	r3, [pc, #60]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b2bc:	4b0d      	ldr	r3, [pc, #52]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b2be:	2202      	movs	r2, #2
 800b2c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b2c2:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b2c8:	480a      	ldr	r0, [pc, #40]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b2ca:	f7f8 f92c 	bl	8003526 <HAL_HCD_Init>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b2d4:	f7f5 ff02 	bl	80010dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b2d8:	4806      	ldr	r0, [pc, #24]	; (800b2f4 <USBH_LL_Init+0x74>)
 800b2da:	f7f8 fd10 	bl	8003cfe <HAL_HCD_GetCurrentFrame>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7fe fff2 	bl	800a2cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20002734 	.word	0x20002734

0800b2f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b300:	2300      	movs	r3, #0
 800b302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b30e:	4618      	mov	r0, r3
 800b310:	f7f8 fc7f 	bl	8003c12 <HAL_HCD_Start>
 800b314:	4603      	mov	r3, r0
 800b316:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b318:	7bfb      	ldrb	r3, [r7, #15]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 f98c 	bl	800b638 <USBH_Get_USB_Status>
 800b320:	4603      	mov	r3, r0
 800b322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b324:	7bbb      	ldrb	r3, [r7, #14]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b084      	sub	sp, #16
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b344:	4618      	mov	r0, r3
 800b346:	f7f8 fc87 	bl	8003c58 <HAL_HCD_Stop>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	4618      	mov	r0, r3
 800b352:	f000 f971 	bl	800b638 <USBH_Get_USB_Status>
 800b356:	4603      	mov	r3, r0
 800b358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b36c:	2301      	movs	r3, #1
 800b36e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b376:	4618      	mov	r0, r3
 800b378:	f7f8 fccf 	bl	8003d1a <HAL_HCD_GetCurrentSpeed>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d00c      	beq.n	800b39c <USBH_LL_GetSpeed+0x38>
 800b382:	2b02      	cmp	r3, #2
 800b384:	d80d      	bhi.n	800b3a2 <USBH_LL_GetSpeed+0x3e>
 800b386:	2b00      	cmp	r3, #0
 800b388:	d002      	beq.n	800b390 <USBH_LL_GetSpeed+0x2c>
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d003      	beq.n	800b396 <USBH_LL_GetSpeed+0x32>
 800b38e:	e008      	b.n	800b3a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b390:	2300      	movs	r3, #0
 800b392:	73fb      	strb	r3, [r7, #15]
    break;
 800b394:	e008      	b.n	800b3a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b396:	2301      	movs	r3, #1
 800b398:	73fb      	strb	r3, [r7, #15]
    break;
 800b39a:	e005      	b.n	800b3a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b39c:	2302      	movs	r3, #2
 800b39e:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a0:	e002      	b.n	800b3a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a6:	bf00      	nop
  }
  return  speed;
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b084      	sub	sp, #16
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7f8 fc62 	bl	8003c92 <HAL_HCD_ResetPort>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 f92f 	bl	800b638 <USBH_Get_USB_Status>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3fa:	78fa      	ldrb	r2, [r7, #3]
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7f8 fc69 	bl	8003cd6 <HAL_HCD_HC_GetXferCount>
 800b404:	4603      	mov	r3, r0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b40e:	b590      	push	{r4, r7, lr}
 800b410:	b089      	sub	sp, #36	; 0x24
 800b412:	af04      	add	r7, sp, #16
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	4608      	mov	r0, r1
 800b418:	4611      	mov	r1, r2
 800b41a:	461a      	mov	r2, r3
 800b41c:	4603      	mov	r3, r0
 800b41e:	70fb      	strb	r3, [r7, #3]
 800b420:	460b      	mov	r3, r1
 800b422:	70bb      	strb	r3, [r7, #2]
 800b424:	4613      	mov	r3, r2
 800b426:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b428:	2300      	movs	r3, #0
 800b42a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b436:	787c      	ldrb	r4, [r7, #1]
 800b438:	78ba      	ldrb	r2, [r7, #2]
 800b43a:	78f9      	ldrb	r1, [r7, #3]
 800b43c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b43e:	9302      	str	r3, [sp, #8]
 800b440:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	4623      	mov	r3, r4
 800b44e:	f7f8 f8cc 	bl	80035ea <HAL_HCD_HC_Init>
 800b452:	4603      	mov	r3, r0
 800b454:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 f8ed 	bl	800b638 <USBH_Get_USB_Status>
 800b45e:	4603      	mov	r3, r0
 800b460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b462:	7bbb      	ldrb	r3, [r7, #14]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd90      	pop	{r4, r7, pc}

0800b46c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b486:	78fa      	ldrb	r2, [r7, #3]
 800b488:	4611      	mov	r1, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7f8 f93c 	bl	8003708 <HAL_HCD_HC_Halt>
 800b490:	4603      	mov	r3, r0
 800b492:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	4618      	mov	r0, r3
 800b498:	f000 f8ce 	bl	800b638 <USBH_Get_USB_Status>
 800b49c:	4603      	mov	r3, r0
 800b49e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b4aa:	b590      	push	{r4, r7, lr}
 800b4ac:	b089      	sub	sp, #36	; 0x24
 800b4ae:	af04      	add	r7, sp, #16
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	4608      	mov	r0, r1
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	70fb      	strb	r3, [r7, #3]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70bb      	strb	r3, [r7, #2]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b4d2:	787c      	ldrb	r4, [r7, #1]
 800b4d4:	78ba      	ldrb	r2, [r7, #2]
 800b4d6:	78f9      	ldrb	r1, [r7, #3]
 800b4d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b4dc:	9303      	str	r3, [sp, #12]
 800b4de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4e0:	9302      	str	r3, [sp, #8]
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	f7f8 f92f 	bl	8003750 <HAL_HCD_HC_SubmitRequest>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 f89d 	bl	800b638 <USBH_Get_USB_Status>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b502:	7bbb      	ldrb	r3, [r7, #14]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd90      	pop	{r4, r7, pc}

0800b50c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b51e:	78fa      	ldrb	r2, [r7, #3]
 800b520:	4611      	mov	r1, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f7f8 fbc3 	bl	8003cae <HAL_HCD_HC_GetURBState>
 800b528:	4603      	mov	r3, r0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b544:	2b01      	cmp	r3, #1
 800b546:	d103      	bne.n	800b550 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b548:	78fb      	ldrb	r3, [r7, #3]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 f8a0 	bl	800b690 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b550:	20c8      	movs	r0, #200	; 0xc8
 800b552:	f7f7 f975 	bl	8002840 <HAL_Delay>
  return USBH_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
 800b56c:	4613      	mov	r3, r2
 800b56e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b576:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b578:	78fb      	ldrb	r3, [r7, #3]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	212c      	movs	r1, #44	; 0x2c
 800b57e:	fb01 f303 	mul.w	r3, r1, r3
 800b582:	4413      	add	r3, r2
 800b584:	333b      	adds	r3, #59	; 0x3b
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d009      	beq.n	800b5a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b58c:	78fb      	ldrb	r3, [r7, #3]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	212c      	movs	r1, #44	; 0x2c
 800b592:	fb01 f303 	mul.w	r3, r1, r3
 800b596:	4413      	add	r3, r2
 800b598:	3354      	adds	r3, #84	; 0x54
 800b59a:	78ba      	ldrb	r2, [r7, #2]
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	e008      	b.n	800b5b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b5a0:	78fb      	ldrb	r3, [r7, #3]
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	212c      	movs	r1, #44	; 0x2c
 800b5a6:	fb01 f303 	mul.w	r3, r1, r3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3355      	adds	r3, #85	; 0x55
 800b5ae:	78ba      	ldrb	r2, [r7, #2]
 800b5b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5d6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b5d8:	78fb      	ldrb	r3, [r7, #3]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	212c      	movs	r1, #44	; 0x2c
 800b5de:	fb01 f303 	mul.w	r3, r1, r3
 800b5e2:	4413      	add	r3, r2
 800b5e4:	333b      	adds	r3, #59	; 0x3b
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	212c      	movs	r1, #44	; 0x2c
 800b5f2:	fb01 f303 	mul.w	r3, r1, r3
 800b5f6:	4413      	add	r3, r2
 800b5f8:	3354      	adds	r3, #84	; 0x54
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	73fb      	strb	r3, [r7, #15]
 800b5fe:	e008      	b.n	800b612 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	212c      	movs	r1, #44	; 0x2c
 800b606:	fb01 f303 	mul.w	r3, r1, r3
 800b60a:	4413      	add	r3, r2
 800b60c:	3355      	adds	r3, #85	; 0x55
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b612:	7bfb      	ldrb	r3, [r7, #15]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7f7 f909 	bl	8002840 <HAL_Delay>
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	4603      	mov	r3, r0
 800b640:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d817      	bhi.n	800b67c <USBH_Get_USB_Status+0x44>
 800b64c:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <USBH_Get_USB_Status+0x1c>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b665 	.word	0x0800b665
 800b658:	0800b66b 	.word	0x0800b66b
 800b65c:	0800b671 	.word	0x0800b671
 800b660:	0800b677 	.word	0x0800b677
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]
    break;
 800b668:	e00b      	b.n	800b682 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b66a:	2302      	movs	r3, #2
 800b66c:	73fb      	strb	r3, [r7, #15]
    break;
 800b66e:	e008      	b.n	800b682 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b670:	2301      	movs	r3, #1
 800b672:	73fb      	strb	r3, [r7, #15]
    break;
 800b674:	e005      	b.n	800b682 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b676:	2302      	movs	r3, #2
 800b678:	73fb      	strb	r3, [r7, #15]
    break;
 800b67a:	e002      	b.n	800b682 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b67c:	2302      	movs	r3, #2
 800b67e:	73fb      	strb	r3, [r7, #15]
    break;
 800b680:	bf00      	nop
  }
  return usb_status;
 800b682:	7bfb      	ldrb	r3, [r7, #15]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]
 800b6a8:	e001      	b.n	800b6ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b6ae:	7bfb      	ldrb	r3, [r7, #15]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	4803      	ldr	r0, [pc, #12]	; (800b6c4 <MX_DriverVbusFS+0x34>)
 800b6b6:	f7f7 ff1d 	bl	80034f4 <HAL_GPIO_WritePin>
}
 800b6ba:	bf00      	nop
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	40020800 	.word	0x40020800

0800b6c8 <__errno>:
 800b6c8:	4b01      	ldr	r3, [pc, #4]	; (800b6d0 <__errno+0x8>)
 800b6ca:	6818      	ldr	r0, [r3, #0]
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	200002d0 	.word	0x200002d0

0800b6d4 <__libc_init_array>:
 800b6d4:	b570      	push	{r4, r5, r6, lr}
 800b6d6:	4d0d      	ldr	r5, [pc, #52]	; (800b70c <__libc_init_array+0x38>)
 800b6d8:	4c0d      	ldr	r4, [pc, #52]	; (800b710 <__libc_init_array+0x3c>)
 800b6da:	1b64      	subs	r4, r4, r5
 800b6dc:	10a4      	asrs	r4, r4, #2
 800b6de:	2600      	movs	r6, #0
 800b6e0:	42a6      	cmp	r6, r4
 800b6e2:	d109      	bne.n	800b6f8 <__libc_init_array+0x24>
 800b6e4:	4d0b      	ldr	r5, [pc, #44]	; (800b714 <__libc_init_array+0x40>)
 800b6e6:	4c0c      	ldr	r4, [pc, #48]	; (800b718 <__libc_init_array+0x44>)
 800b6e8:	f000 fc9e 	bl	800c028 <_init>
 800b6ec:	1b64      	subs	r4, r4, r5
 800b6ee:	10a4      	asrs	r4, r4, #2
 800b6f0:	2600      	movs	r6, #0
 800b6f2:	42a6      	cmp	r6, r4
 800b6f4:	d105      	bne.n	800b702 <__libc_init_array+0x2e>
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}
 800b6f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6fc:	4798      	blx	r3
 800b6fe:	3601      	adds	r6, #1
 800b700:	e7ee      	b.n	800b6e0 <__libc_init_array+0xc>
 800b702:	f855 3b04 	ldr.w	r3, [r5], #4
 800b706:	4798      	blx	r3
 800b708:	3601      	adds	r6, #1
 800b70a:	e7f2      	b.n	800b6f2 <__libc_init_array+0x1e>
 800b70c:	0800c418 	.word	0x0800c418
 800b710:	0800c418 	.word	0x0800c418
 800b714:	0800c418 	.word	0x0800c418
 800b718:	0800c41c 	.word	0x0800c41c

0800b71c <malloc>:
 800b71c:	4b02      	ldr	r3, [pc, #8]	; (800b728 <malloc+0xc>)
 800b71e:	4601      	mov	r1, r0
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	f000 b88d 	b.w	800b840 <_malloc_r>
 800b726:	bf00      	nop
 800b728:	200002d0 	.word	0x200002d0

0800b72c <free>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <free+0xc>)
 800b72e:	4601      	mov	r1, r0
 800b730:	6818      	ldr	r0, [r3, #0]
 800b732:	f000 b819 	b.w	800b768 <_free_r>
 800b736:	bf00      	nop
 800b738:	200002d0 	.word	0x200002d0

0800b73c <memcpy>:
 800b73c:	440a      	add	r2, r1
 800b73e:	4291      	cmp	r1, r2
 800b740:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b744:	d100      	bne.n	800b748 <memcpy+0xc>
 800b746:	4770      	bx	lr
 800b748:	b510      	push	{r4, lr}
 800b74a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b74e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b752:	4291      	cmp	r1, r2
 800b754:	d1f9      	bne.n	800b74a <memcpy+0xe>
 800b756:	bd10      	pop	{r4, pc}

0800b758 <memset>:
 800b758:	4402      	add	r2, r0
 800b75a:	4603      	mov	r3, r0
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d100      	bne.n	800b762 <memset+0xa>
 800b760:	4770      	bx	lr
 800b762:	f803 1b01 	strb.w	r1, [r3], #1
 800b766:	e7f9      	b.n	800b75c <memset+0x4>

0800b768 <_free_r>:
 800b768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b76a:	2900      	cmp	r1, #0
 800b76c:	d044      	beq.n	800b7f8 <_free_r+0x90>
 800b76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b772:	9001      	str	r0, [sp, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	f1a1 0404 	sub.w	r4, r1, #4
 800b77a:	bfb8      	it	lt
 800b77c:	18e4      	addlt	r4, r4, r3
 800b77e:	f000 f903 	bl	800b988 <__malloc_lock>
 800b782:	4a1e      	ldr	r2, [pc, #120]	; (800b7fc <_free_r+0x94>)
 800b784:	9801      	ldr	r0, [sp, #4]
 800b786:	6813      	ldr	r3, [r2, #0]
 800b788:	b933      	cbnz	r3, 800b798 <_free_r+0x30>
 800b78a:	6063      	str	r3, [r4, #4]
 800b78c:	6014      	str	r4, [r2, #0]
 800b78e:	b003      	add	sp, #12
 800b790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b794:	f000 b8fe 	b.w	800b994 <__malloc_unlock>
 800b798:	42a3      	cmp	r3, r4
 800b79a:	d908      	bls.n	800b7ae <_free_r+0x46>
 800b79c:	6825      	ldr	r5, [r4, #0]
 800b79e:	1961      	adds	r1, r4, r5
 800b7a0:	428b      	cmp	r3, r1
 800b7a2:	bf01      	itttt	eq
 800b7a4:	6819      	ldreq	r1, [r3, #0]
 800b7a6:	685b      	ldreq	r3, [r3, #4]
 800b7a8:	1949      	addeq	r1, r1, r5
 800b7aa:	6021      	streq	r1, [r4, #0]
 800b7ac:	e7ed      	b.n	800b78a <_free_r+0x22>
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	b10b      	cbz	r3, 800b7b8 <_free_r+0x50>
 800b7b4:	42a3      	cmp	r3, r4
 800b7b6:	d9fa      	bls.n	800b7ae <_free_r+0x46>
 800b7b8:	6811      	ldr	r1, [r2, #0]
 800b7ba:	1855      	adds	r5, r2, r1
 800b7bc:	42a5      	cmp	r5, r4
 800b7be:	d10b      	bne.n	800b7d8 <_free_r+0x70>
 800b7c0:	6824      	ldr	r4, [r4, #0]
 800b7c2:	4421      	add	r1, r4
 800b7c4:	1854      	adds	r4, r2, r1
 800b7c6:	42a3      	cmp	r3, r4
 800b7c8:	6011      	str	r1, [r2, #0]
 800b7ca:	d1e0      	bne.n	800b78e <_free_r+0x26>
 800b7cc:	681c      	ldr	r4, [r3, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	6053      	str	r3, [r2, #4]
 800b7d2:	4421      	add	r1, r4
 800b7d4:	6011      	str	r1, [r2, #0]
 800b7d6:	e7da      	b.n	800b78e <_free_r+0x26>
 800b7d8:	d902      	bls.n	800b7e0 <_free_r+0x78>
 800b7da:	230c      	movs	r3, #12
 800b7dc:	6003      	str	r3, [r0, #0]
 800b7de:	e7d6      	b.n	800b78e <_free_r+0x26>
 800b7e0:	6825      	ldr	r5, [r4, #0]
 800b7e2:	1961      	adds	r1, r4, r5
 800b7e4:	428b      	cmp	r3, r1
 800b7e6:	bf04      	itt	eq
 800b7e8:	6819      	ldreq	r1, [r3, #0]
 800b7ea:	685b      	ldreq	r3, [r3, #4]
 800b7ec:	6063      	str	r3, [r4, #4]
 800b7ee:	bf04      	itt	eq
 800b7f0:	1949      	addeq	r1, r1, r5
 800b7f2:	6021      	streq	r1, [r4, #0]
 800b7f4:	6054      	str	r4, [r2, #4]
 800b7f6:	e7ca      	b.n	800b78e <_free_r+0x26>
 800b7f8:	b003      	add	sp, #12
 800b7fa:	bd30      	pop	{r4, r5, pc}
 800b7fc:	20002a38 	.word	0x20002a38

0800b800 <sbrk_aligned>:
 800b800:	b570      	push	{r4, r5, r6, lr}
 800b802:	4e0e      	ldr	r6, [pc, #56]	; (800b83c <sbrk_aligned+0x3c>)
 800b804:	460c      	mov	r4, r1
 800b806:	6831      	ldr	r1, [r6, #0]
 800b808:	4605      	mov	r5, r0
 800b80a:	b911      	cbnz	r1, 800b812 <sbrk_aligned+0x12>
 800b80c:	f000 f88c 	bl	800b928 <_sbrk_r>
 800b810:	6030      	str	r0, [r6, #0]
 800b812:	4621      	mov	r1, r4
 800b814:	4628      	mov	r0, r5
 800b816:	f000 f887 	bl	800b928 <_sbrk_r>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	d00a      	beq.n	800b834 <sbrk_aligned+0x34>
 800b81e:	1cc4      	adds	r4, r0, #3
 800b820:	f024 0403 	bic.w	r4, r4, #3
 800b824:	42a0      	cmp	r0, r4
 800b826:	d007      	beq.n	800b838 <sbrk_aligned+0x38>
 800b828:	1a21      	subs	r1, r4, r0
 800b82a:	4628      	mov	r0, r5
 800b82c:	f000 f87c 	bl	800b928 <_sbrk_r>
 800b830:	3001      	adds	r0, #1
 800b832:	d101      	bne.n	800b838 <sbrk_aligned+0x38>
 800b834:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b838:	4620      	mov	r0, r4
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	20002a3c 	.word	0x20002a3c

0800b840 <_malloc_r>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	1ccd      	adds	r5, r1, #3
 800b846:	f025 0503 	bic.w	r5, r5, #3
 800b84a:	3508      	adds	r5, #8
 800b84c:	2d0c      	cmp	r5, #12
 800b84e:	bf38      	it	cc
 800b850:	250c      	movcc	r5, #12
 800b852:	2d00      	cmp	r5, #0
 800b854:	4607      	mov	r7, r0
 800b856:	db01      	blt.n	800b85c <_malloc_r+0x1c>
 800b858:	42a9      	cmp	r1, r5
 800b85a:	d905      	bls.n	800b868 <_malloc_r+0x28>
 800b85c:	230c      	movs	r3, #12
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	2600      	movs	r6, #0
 800b862:	4630      	mov	r0, r6
 800b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b868:	4e2e      	ldr	r6, [pc, #184]	; (800b924 <_malloc_r+0xe4>)
 800b86a:	f000 f88d 	bl	800b988 <__malloc_lock>
 800b86e:	6833      	ldr	r3, [r6, #0]
 800b870:	461c      	mov	r4, r3
 800b872:	bb34      	cbnz	r4, 800b8c2 <_malloc_r+0x82>
 800b874:	4629      	mov	r1, r5
 800b876:	4638      	mov	r0, r7
 800b878:	f7ff ffc2 	bl	800b800 <sbrk_aligned>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	4604      	mov	r4, r0
 800b880:	d14d      	bne.n	800b91e <_malloc_r+0xde>
 800b882:	6834      	ldr	r4, [r6, #0]
 800b884:	4626      	mov	r6, r4
 800b886:	2e00      	cmp	r6, #0
 800b888:	d140      	bne.n	800b90c <_malloc_r+0xcc>
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	4631      	mov	r1, r6
 800b88e:	4638      	mov	r0, r7
 800b890:	eb04 0803 	add.w	r8, r4, r3
 800b894:	f000 f848 	bl	800b928 <_sbrk_r>
 800b898:	4580      	cmp	r8, r0
 800b89a:	d13a      	bne.n	800b912 <_malloc_r+0xd2>
 800b89c:	6821      	ldr	r1, [r4, #0]
 800b89e:	3503      	adds	r5, #3
 800b8a0:	1a6d      	subs	r5, r5, r1
 800b8a2:	f025 0503 	bic.w	r5, r5, #3
 800b8a6:	3508      	adds	r5, #8
 800b8a8:	2d0c      	cmp	r5, #12
 800b8aa:	bf38      	it	cc
 800b8ac:	250c      	movcc	r5, #12
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	f7ff ffa5 	bl	800b800 <sbrk_aligned>
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	d02b      	beq.n	800b912 <_malloc_r+0xd2>
 800b8ba:	6823      	ldr	r3, [r4, #0]
 800b8bc:	442b      	add	r3, r5
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	e00e      	b.n	800b8e0 <_malloc_r+0xa0>
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	1b52      	subs	r2, r2, r5
 800b8c6:	d41e      	bmi.n	800b906 <_malloc_r+0xc6>
 800b8c8:	2a0b      	cmp	r2, #11
 800b8ca:	d916      	bls.n	800b8fa <_malloc_r+0xba>
 800b8cc:	1961      	adds	r1, r4, r5
 800b8ce:	42a3      	cmp	r3, r4
 800b8d0:	6025      	str	r5, [r4, #0]
 800b8d2:	bf18      	it	ne
 800b8d4:	6059      	strne	r1, [r3, #4]
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	bf08      	it	eq
 800b8da:	6031      	streq	r1, [r6, #0]
 800b8dc:	5162      	str	r2, [r4, r5]
 800b8de:	604b      	str	r3, [r1, #4]
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f104 060b 	add.w	r6, r4, #11
 800b8e6:	f000 f855 	bl	800b994 <__malloc_unlock>
 800b8ea:	f026 0607 	bic.w	r6, r6, #7
 800b8ee:	1d23      	adds	r3, r4, #4
 800b8f0:	1af2      	subs	r2, r6, r3
 800b8f2:	d0b6      	beq.n	800b862 <_malloc_r+0x22>
 800b8f4:	1b9b      	subs	r3, r3, r6
 800b8f6:	50a3      	str	r3, [r4, r2]
 800b8f8:	e7b3      	b.n	800b862 <_malloc_r+0x22>
 800b8fa:	6862      	ldr	r2, [r4, #4]
 800b8fc:	42a3      	cmp	r3, r4
 800b8fe:	bf0c      	ite	eq
 800b900:	6032      	streq	r2, [r6, #0]
 800b902:	605a      	strne	r2, [r3, #4]
 800b904:	e7ec      	b.n	800b8e0 <_malloc_r+0xa0>
 800b906:	4623      	mov	r3, r4
 800b908:	6864      	ldr	r4, [r4, #4]
 800b90a:	e7b2      	b.n	800b872 <_malloc_r+0x32>
 800b90c:	4634      	mov	r4, r6
 800b90e:	6876      	ldr	r6, [r6, #4]
 800b910:	e7b9      	b.n	800b886 <_malloc_r+0x46>
 800b912:	230c      	movs	r3, #12
 800b914:	603b      	str	r3, [r7, #0]
 800b916:	4638      	mov	r0, r7
 800b918:	f000 f83c 	bl	800b994 <__malloc_unlock>
 800b91c:	e7a1      	b.n	800b862 <_malloc_r+0x22>
 800b91e:	6025      	str	r5, [r4, #0]
 800b920:	e7de      	b.n	800b8e0 <_malloc_r+0xa0>
 800b922:	bf00      	nop
 800b924:	20002a38 	.word	0x20002a38

0800b928 <_sbrk_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d06      	ldr	r5, [pc, #24]	; (800b944 <_sbrk_r+0x1c>)
 800b92c:	2300      	movs	r3, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	4608      	mov	r0, r1
 800b932:	602b      	str	r3, [r5, #0]
 800b934:	f7f6 fea0 	bl	8002678 <_sbrk>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_sbrk_r+0x1a>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_sbrk_r+0x1a>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	20002a40 	.word	0x20002a40

0800b948 <siprintf>:
 800b948:	b40e      	push	{r1, r2, r3}
 800b94a:	b500      	push	{lr}
 800b94c:	b09c      	sub	sp, #112	; 0x70
 800b94e:	ab1d      	add	r3, sp, #116	; 0x74
 800b950:	9002      	str	r0, [sp, #8]
 800b952:	9006      	str	r0, [sp, #24]
 800b954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b958:	4809      	ldr	r0, [pc, #36]	; (800b980 <siprintf+0x38>)
 800b95a:	9107      	str	r1, [sp, #28]
 800b95c:	9104      	str	r1, [sp, #16]
 800b95e:	4909      	ldr	r1, [pc, #36]	; (800b984 <siprintf+0x3c>)
 800b960:	f853 2b04 	ldr.w	r2, [r3], #4
 800b964:	9105      	str	r1, [sp, #20]
 800b966:	6800      	ldr	r0, [r0, #0]
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	a902      	add	r1, sp, #8
 800b96c:	f000 f874 	bl	800ba58 <_svfiprintf_r>
 800b970:	9b02      	ldr	r3, [sp, #8]
 800b972:	2200      	movs	r2, #0
 800b974:	701a      	strb	r2, [r3, #0]
 800b976:	b01c      	add	sp, #112	; 0x70
 800b978:	f85d eb04 	ldr.w	lr, [sp], #4
 800b97c:	b003      	add	sp, #12
 800b97e:	4770      	bx	lr
 800b980:	200002d0 	.word	0x200002d0
 800b984:	ffff0208 	.word	0xffff0208

0800b988 <__malloc_lock>:
 800b988:	4801      	ldr	r0, [pc, #4]	; (800b990 <__malloc_lock+0x8>)
 800b98a:	f000 baf9 	b.w	800bf80 <__retarget_lock_acquire_recursive>
 800b98e:	bf00      	nop
 800b990:	20002a44 	.word	0x20002a44

0800b994 <__malloc_unlock>:
 800b994:	4801      	ldr	r0, [pc, #4]	; (800b99c <__malloc_unlock+0x8>)
 800b996:	f000 baf4 	b.w	800bf82 <__retarget_lock_release_recursive>
 800b99a:	bf00      	nop
 800b99c:	20002a44 	.word	0x20002a44

0800b9a0 <__ssputs_r>:
 800b9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a4:	688e      	ldr	r6, [r1, #8]
 800b9a6:	429e      	cmp	r6, r3
 800b9a8:	4682      	mov	sl, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	4690      	mov	r8, r2
 800b9ae:	461f      	mov	r7, r3
 800b9b0:	d838      	bhi.n	800ba24 <__ssputs_r+0x84>
 800b9b2:	898a      	ldrh	r2, [r1, #12]
 800b9b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9b8:	d032      	beq.n	800ba20 <__ssputs_r+0x80>
 800b9ba:	6825      	ldr	r5, [r4, #0]
 800b9bc:	6909      	ldr	r1, [r1, #16]
 800b9be:	eba5 0901 	sub.w	r9, r5, r1
 800b9c2:	6965      	ldr	r5, [r4, #20]
 800b9c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	444b      	add	r3, r9
 800b9d0:	106d      	asrs	r5, r5, #1
 800b9d2:	429d      	cmp	r5, r3
 800b9d4:	bf38      	it	cc
 800b9d6:	461d      	movcc	r5, r3
 800b9d8:	0553      	lsls	r3, r2, #21
 800b9da:	d531      	bpl.n	800ba40 <__ssputs_r+0xa0>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	f7ff ff2f 	bl	800b840 <_malloc_r>
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	b950      	cbnz	r0, 800b9fc <__ssputs_r+0x5c>
 800b9e6:	230c      	movs	r3, #12
 800b9e8:	f8ca 3000 	str.w	r3, [sl]
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9fc:	6921      	ldr	r1, [r4, #16]
 800b9fe:	464a      	mov	r2, r9
 800ba00:	f7ff fe9c 	bl	800b73c <memcpy>
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba0e:	81a3      	strh	r3, [r4, #12]
 800ba10:	6126      	str	r6, [r4, #16]
 800ba12:	6165      	str	r5, [r4, #20]
 800ba14:	444e      	add	r6, r9
 800ba16:	eba5 0509 	sub.w	r5, r5, r9
 800ba1a:	6026      	str	r6, [r4, #0]
 800ba1c:	60a5      	str	r5, [r4, #8]
 800ba1e:	463e      	mov	r6, r7
 800ba20:	42be      	cmp	r6, r7
 800ba22:	d900      	bls.n	800ba26 <__ssputs_r+0x86>
 800ba24:	463e      	mov	r6, r7
 800ba26:	6820      	ldr	r0, [r4, #0]
 800ba28:	4632      	mov	r2, r6
 800ba2a:	4641      	mov	r1, r8
 800ba2c:	f000 faaa 	bl	800bf84 <memmove>
 800ba30:	68a3      	ldr	r3, [r4, #8]
 800ba32:	1b9b      	subs	r3, r3, r6
 800ba34:	60a3      	str	r3, [r4, #8]
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	4433      	add	r3, r6
 800ba3a:	6023      	str	r3, [r4, #0]
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	e7db      	b.n	800b9f8 <__ssputs_r+0x58>
 800ba40:	462a      	mov	r2, r5
 800ba42:	f000 fab9 	bl	800bfb8 <_realloc_r>
 800ba46:	4606      	mov	r6, r0
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d1e1      	bne.n	800ba10 <__ssputs_r+0x70>
 800ba4c:	6921      	ldr	r1, [r4, #16]
 800ba4e:	4650      	mov	r0, sl
 800ba50:	f7ff fe8a 	bl	800b768 <_free_r>
 800ba54:	e7c7      	b.n	800b9e6 <__ssputs_r+0x46>
	...

0800ba58 <_svfiprintf_r>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	4698      	mov	r8, r3
 800ba5e:	898b      	ldrh	r3, [r1, #12]
 800ba60:	061b      	lsls	r3, r3, #24
 800ba62:	b09d      	sub	sp, #116	; 0x74
 800ba64:	4607      	mov	r7, r0
 800ba66:	460d      	mov	r5, r1
 800ba68:	4614      	mov	r4, r2
 800ba6a:	d50e      	bpl.n	800ba8a <_svfiprintf_r+0x32>
 800ba6c:	690b      	ldr	r3, [r1, #16]
 800ba6e:	b963      	cbnz	r3, 800ba8a <_svfiprintf_r+0x32>
 800ba70:	2140      	movs	r1, #64	; 0x40
 800ba72:	f7ff fee5 	bl	800b840 <_malloc_r>
 800ba76:	6028      	str	r0, [r5, #0]
 800ba78:	6128      	str	r0, [r5, #16]
 800ba7a:	b920      	cbnz	r0, 800ba86 <_svfiprintf_r+0x2e>
 800ba7c:	230c      	movs	r3, #12
 800ba7e:	603b      	str	r3, [r7, #0]
 800ba80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba84:	e0d1      	b.n	800bc2a <_svfiprintf_r+0x1d2>
 800ba86:	2340      	movs	r3, #64	; 0x40
 800ba88:	616b      	str	r3, [r5, #20]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8e:	2320      	movs	r3, #32
 800ba90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba98:	2330      	movs	r3, #48	; 0x30
 800ba9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc44 <_svfiprintf_r+0x1ec>
 800ba9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baa2:	f04f 0901 	mov.w	r9, #1
 800baa6:	4623      	mov	r3, r4
 800baa8:	469a      	mov	sl, r3
 800baaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baae:	b10a      	cbz	r2, 800bab4 <_svfiprintf_r+0x5c>
 800bab0:	2a25      	cmp	r2, #37	; 0x25
 800bab2:	d1f9      	bne.n	800baa8 <_svfiprintf_r+0x50>
 800bab4:	ebba 0b04 	subs.w	fp, sl, r4
 800bab8:	d00b      	beq.n	800bad2 <_svfiprintf_r+0x7a>
 800baba:	465b      	mov	r3, fp
 800babc:	4622      	mov	r2, r4
 800babe:	4629      	mov	r1, r5
 800bac0:	4638      	mov	r0, r7
 800bac2:	f7ff ff6d 	bl	800b9a0 <__ssputs_r>
 800bac6:	3001      	adds	r0, #1
 800bac8:	f000 80aa 	beq.w	800bc20 <_svfiprintf_r+0x1c8>
 800bacc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bace:	445a      	add	r2, fp
 800bad0:	9209      	str	r2, [sp, #36]	; 0x24
 800bad2:	f89a 3000 	ldrb.w	r3, [sl]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 80a2 	beq.w	800bc20 <_svfiprintf_r+0x1c8>
 800badc:	2300      	movs	r3, #0
 800bade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae6:	f10a 0a01 	add.w	sl, sl, #1
 800baea:	9304      	str	r3, [sp, #16]
 800baec:	9307      	str	r3, [sp, #28]
 800baee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baf2:	931a      	str	r3, [sp, #104]	; 0x68
 800baf4:	4654      	mov	r4, sl
 800baf6:	2205      	movs	r2, #5
 800baf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafc:	4851      	ldr	r0, [pc, #324]	; (800bc44 <_svfiprintf_r+0x1ec>)
 800bafe:	f7f4 fb67 	bl	80001d0 <memchr>
 800bb02:	9a04      	ldr	r2, [sp, #16]
 800bb04:	b9d8      	cbnz	r0, 800bb3e <_svfiprintf_r+0xe6>
 800bb06:	06d0      	lsls	r0, r2, #27
 800bb08:	bf44      	itt	mi
 800bb0a:	2320      	movmi	r3, #32
 800bb0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb10:	0711      	lsls	r1, r2, #28
 800bb12:	bf44      	itt	mi
 800bb14:	232b      	movmi	r3, #43	; 0x2b
 800bb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb20:	d015      	beq.n	800bb4e <_svfiprintf_r+0xf6>
 800bb22:	9a07      	ldr	r2, [sp, #28]
 800bb24:	4654      	mov	r4, sl
 800bb26:	2000      	movs	r0, #0
 800bb28:	f04f 0c0a 	mov.w	ip, #10
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb32:	3b30      	subs	r3, #48	; 0x30
 800bb34:	2b09      	cmp	r3, #9
 800bb36:	d94e      	bls.n	800bbd6 <_svfiprintf_r+0x17e>
 800bb38:	b1b0      	cbz	r0, 800bb68 <_svfiprintf_r+0x110>
 800bb3a:	9207      	str	r2, [sp, #28]
 800bb3c:	e014      	b.n	800bb68 <_svfiprintf_r+0x110>
 800bb3e:	eba0 0308 	sub.w	r3, r0, r8
 800bb42:	fa09 f303 	lsl.w	r3, r9, r3
 800bb46:	4313      	orrs	r3, r2
 800bb48:	9304      	str	r3, [sp, #16]
 800bb4a:	46a2      	mov	sl, r4
 800bb4c:	e7d2      	b.n	800baf4 <_svfiprintf_r+0x9c>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	1d19      	adds	r1, r3, #4
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	9103      	str	r1, [sp, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	bfbb      	ittet	lt
 800bb5a:	425b      	neglt	r3, r3
 800bb5c:	f042 0202 	orrlt.w	r2, r2, #2
 800bb60:	9307      	strge	r3, [sp, #28]
 800bb62:	9307      	strlt	r3, [sp, #28]
 800bb64:	bfb8      	it	lt
 800bb66:	9204      	strlt	r2, [sp, #16]
 800bb68:	7823      	ldrb	r3, [r4, #0]
 800bb6a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb6c:	d10c      	bne.n	800bb88 <_svfiprintf_r+0x130>
 800bb6e:	7863      	ldrb	r3, [r4, #1]
 800bb70:	2b2a      	cmp	r3, #42	; 0x2a
 800bb72:	d135      	bne.n	800bbe0 <_svfiprintf_r+0x188>
 800bb74:	9b03      	ldr	r3, [sp, #12]
 800bb76:	1d1a      	adds	r2, r3, #4
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	9203      	str	r2, [sp, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	bfb8      	it	lt
 800bb80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bb84:	3402      	adds	r4, #2
 800bb86:	9305      	str	r3, [sp, #20]
 800bb88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc54 <_svfiprintf_r+0x1fc>
 800bb8c:	7821      	ldrb	r1, [r4, #0]
 800bb8e:	2203      	movs	r2, #3
 800bb90:	4650      	mov	r0, sl
 800bb92:	f7f4 fb1d 	bl	80001d0 <memchr>
 800bb96:	b140      	cbz	r0, 800bbaa <_svfiprintf_r+0x152>
 800bb98:	2340      	movs	r3, #64	; 0x40
 800bb9a:	eba0 000a 	sub.w	r0, r0, sl
 800bb9e:	fa03 f000 	lsl.w	r0, r3, r0
 800bba2:	9b04      	ldr	r3, [sp, #16]
 800bba4:	4303      	orrs	r3, r0
 800bba6:	3401      	adds	r4, #1
 800bba8:	9304      	str	r3, [sp, #16]
 800bbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbae:	4826      	ldr	r0, [pc, #152]	; (800bc48 <_svfiprintf_r+0x1f0>)
 800bbb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb4:	2206      	movs	r2, #6
 800bbb6:	f7f4 fb0b 	bl	80001d0 <memchr>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d038      	beq.n	800bc30 <_svfiprintf_r+0x1d8>
 800bbbe:	4b23      	ldr	r3, [pc, #140]	; (800bc4c <_svfiprintf_r+0x1f4>)
 800bbc0:	bb1b      	cbnz	r3, 800bc0a <_svfiprintf_r+0x1b2>
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	3307      	adds	r3, #7
 800bbc6:	f023 0307 	bic.w	r3, r3, #7
 800bbca:	3308      	adds	r3, #8
 800bbcc:	9303      	str	r3, [sp, #12]
 800bbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd0:	4433      	add	r3, r6
 800bbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd4:	e767      	b.n	800baa6 <_svfiprintf_r+0x4e>
 800bbd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbda:	460c      	mov	r4, r1
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e7a5      	b.n	800bb2c <_svfiprintf_r+0xd4>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	3401      	adds	r4, #1
 800bbe4:	9305      	str	r3, [sp, #20]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	f04f 0c0a 	mov.w	ip, #10
 800bbec:	4620      	mov	r0, r4
 800bbee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf2:	3a30      	subs	r2, #48	; 0x30
 800bbf4:	2a09      	cmp	r2, #9
 800bbf6:	d903      	bls.n	800bc00 <_svfiprintf_r+0x1a8>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0c5      	beq.n	800bb88 <_svfiprintf_r+0x130>
 800bbfc:	9105      	str	r1, [sp, #20]
 800bbfe:	e7c3      	b.n	800bb88 <_svfiprintf_r+0x130>
 800bc00:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc04:	4604      	mov	r4, r0
 800bc06:	2301      	movs	r3, #1
 800bc08:	e7f0      	b.n	800bbec <_svfiprintf_r+0x194>
 800bc0a:	ab03      	add	r3, sp, #12
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	462a      	mov	r2, r5
 800bc10:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <_svfiprintf_r+0x1f8>)
 800bc12:	a904      	add	r1, sp, #16
 800bc14:	4638      	mov	r0, r7
 800bc16:	f3af 8000 	nop.w
 800bc1a:	1c42      	adds	r2, r0, #1
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	d1d6      	bne.n	800bbce <_svfiprintf_r+0x176>
 800bc20:	89ab      	ldrh	r3, [r5, #12]
 800bc22:	065b      	lsls	r3, r3, #25
 800bc24:	f53f af2c 	bmi.w	800ba80 <_svfiprintf_r+0x28>
 800bc28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc2a:	b01d      	add	sp, #116	; 0x74
 800bc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc30:	ab03      	add	r3, sp, #12
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	462a      	mov	r2, r5
 800bc36:	4b06      	ldr	r3, [pc, #24]	; (800bc50 <_svfiprintf_r+0x1f8>)
 800bc38:	a904      	add	r1, sp, #16
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	f000 f87a 	bl	800bd34 <_printf_i>
 800bc40:	e7eb      	b.n	800bc1a <_svfiprintf_r+0x1c2>
 800bc42:	bf00      	nop
 800bc44:	0800c3dc 	.word	0x0800c3dc
 800bc48:	0800c3e6 	.word	0x0800c3e6
 800bc4c:	00000000 	.word	0x00000000
 800bc50:	0800b9a1 	.word	0x0800b9a1
 800bc54:	0800c3e2 	.word	0x0800c3e2

0800bc58 <_printf_common>:
 800bc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc5c:	4616      	mov	r6, r2
 800bc5e:	4699      	mov	r9, r3
 800bc60:	688a      	ldr	r2, [r1, #8]
 800bc62:	690b      	ldr	r3, [r1, #16]
 800bc64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	bfb8      	it	lt
 800bc6c:	4613      	movlt	r3, r2
 800bc6e:	6033      	str	r3, [r6, #0]
 800bc70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc74:	4607      	mov	r7, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	b10a      	cbz	r2, 800bc7e <_printf_common+0x26>
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	6033      	str	r3, [r6, #0]
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	0699      	lsls	r1, r3, #26
 800bc82:	bf42      	ittt	mi
 800bc84:	6833      	ldrmi	r3, [r6, #0]
 800bc86:	3302      	addmi	r3, #2
 800bc88:	6033      	strmi	r3, [r6, #0]
 800bc8a:	6825      	ldr	r5, [r4, #0]
 800bc8c:	f015 0506 	ands.w	r5, r5, #6
 800bc90:	d106      	bne.n	800bca0 <_printf_common+0x48>
 800bc92:	f104 0a19 	add.w	sl, r4, #25
 800bc96:	68e3      	ldr	r3, [r4, #12]
 800bc98:	6832      	ldr	r2, [r6, #0]
 800bc9a:	1a9b      	subs	r3, r3, r2
 800bc9c:	42ab      	cmp	r3, r5
 800bc9e:	dc26      	bgt.n	800bcee <_printf_common+0x96>
 800bca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bca4:	1e13      	subs	r3, r2, #0
 800bca6:	6822      	ldr	r2, [r4, #0]
 800bca8:	bf18      	it	ne
 800bcaa:	2301      	movne	r3, #1
 800bcac:	0692      	lsls	r2, r2, #26
 800bcae:	d42b      	bmi.n	800bd08 <_printf_common+0xb0>
 800bcb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcb4:	4649      	mov	r1, r9
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	47c0      	blx	r8
 800bcba:	3001      	adds	r0, #1
 800bcbc:	d01e      	beq.n	800bcfc <_printf_common+0xa4>
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	68e5      	ldr	r5, [r4, #12]
 800bcc2:	6832      	ldr	r2, [r6, #0]
 800bcc4:	f003 0306 	and.w	r3, r3, #6
 800bcc8:	2b04      	cmp	r3, #4
 800bcca:	bf08      	it	eq
 800bccc:	1aad      	subeq	r5, r5, r2
 800bcce:	68a3      	ldr	r3, [r4, #8]
 800bcd0:	6922      	ldr	r2, [r4, #16]
 800bcd2:	bf0c      	ite	eq
 800bcd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcd8:	2500      	movne	r5, #0
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	bfc4      	itt	gt
 800bcde:	1a9b      	subgt	r3, r3, r2
 800bce0:	18ed      	addgt	r5, r5, r3
 800bce2:	2600      	movs	r6, #0
 800bce4:	341a      	adds	r4, #26
 800bce6:	42b5      	cmp	r5, r6
 800bce8:	d11a      	bne.n	800bd20 <_printf_common+0xc8>
 800bcea:	2000      	movs	r0, #0
 800bcec:	e008      	b.n	800bd00 <_printf_common+0xa8>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	4652      	mov	r2, sl
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4638      	mov	r0, r7
 800bcf6:	47c0      	blx	r8
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d103      	bne.n	800bd04 <_printf_common+0xac>
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd04:	3501      	adds	r5, #1
 800bd06:	e7c6      	b.n	800bc96 <_printf_common+0x3e>
 800bd08:	18e1      	adds	r1, r4, r3
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	2030      	movs	r0, #48	; 0x30
 800bd0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd12:	4422      	add	r2, r4
 800bd14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd1c:	3302      	adds	r3, #2
 800bd1e:	e7c7      	b.n	800bcb0 <_printf_common+0x58>
 800bd20:	2301      	movs	r3, #1
 800bd22:	4622      	mov	r2, r4
 800bd24:	4649      	mov	r1, r9
 800bd26:	4638      	mov	r0, r7
 800bd28:	47c0      	blx	r8
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d0e6      	beq.n	800bcfc <_printf_common+0xa4>
 800bd2e:	3601      	adds	r6, #1
 800bd30:	e7d9      	b.n	800bce6 <_printf_common+0x8e>
	...

0800bd34 <_printf_i>:
 800bd34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd38:	7e0f      	ldrb	r7, [r1, #24]
 800bd3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd3c:	2f78      	cmp	r7, #120	; 0x78
 800bd3e:	4691      	mov	r9, r2
 800bd40:	4680      	mov	r8, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	469a      	mov	sl, r3
 800bd46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd4a:	d807      	bhi.n	800bd5c <_printf_i+0x28>
 800bd4c:	2f62      	cmp	r7, #98	; 0x62
 800bd4e:	d80a      	bhi.n	800bd66 <_printf_i+0x32>
 800bd50:	2f00      	cmp	r7, #0
 800bd52:	f000 80d8 	beq.w	800bf06 <_printf_i+0x1d2>
 800bd56:	2f58      	cmp	r7, #88	; 0x58
 800bd58:	f000 80a3 	beq.w	800bea2 <_printf_i+0x16e>
 800bd5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd64:	e03a      	b.n	800bddc <_printf_i+0xa8>
 800bd66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd6a:	2b15      	cmp	r3, #21
 800bd6c:	d8f6      	bhi.n	800bd5c <_printf_i+0x28>
 800bd6e:	a101      	add	r1, pc, #4	; (adr r1, 800bd74 <_printf_i+0x40>)
 800bd70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd74:	0800bdcd 	.word	0x0800bdcd
 800bd78:	0800bde1 	.word	0x0800bde1
 800bd7c:	0800bd5d 	.word	0x0800bd5d
 800bd80:	0800bd5d 	.word	0x0800bd5d
 800bd84:	0800bd5d 	.word	0x0800bd5d
 800bd88:	0800bd5d 	.word	0x0800bd5d
 800bd8c:	0800bde1 	.word	0x0800bde1
 800bd90:	0800bd5d 	.word	0x0800bd5d
 800bd94:	0800bd5d 	.word	0x0800bd5d
 800bd98:	0800bd5d 	.word	0x0800bd5d
 800bd9c:	0800bd5d 	.word	0x0800bd5d
 800bda0:	0800beed 	.word	0x0800beed
 800bda4:	0800be11 	.word	0x0800be11
 800bda8:	0800becf 	.word	0x0800becf
 800bdac:	0800bd5d 	.word	0x0800bd5d
 800bdb0:	0800bd5d 	.word	0x0800bd5d
 800bdb4:	0800bf0f 	.word	0x0800bf0f
 800bdb8:	0800bd5d 	.word	0x0800bd5d
 800bdbc:	0800be11 	.word	0x0800be11
 800bdc0:	0800bd5d 	.word	0x0800bd5d
 800bdc4:	0800bd5d 	.word	0x0800bd5d
 800bdc8:	0800bed7 	.word	0x0800bed7
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	1d1a      	adds	r2, r3, #4
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	602a      	str	r2, [r5, #0]
 800bdd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bddc:	2301      	movs	r3, #1
 800bdde:	e0a3      	b.n	800bf28 <_printf_i+0x1f4>
 800bde0:	6820      	ldr	r0, [r4, #0]
 800bde2:	6829      	ldr	r1, [r5, #0]
 800bde4:	0606      	lsls	r6, r0, #24
 800bde6:	f101 0304 	add.w	r3, r1, #4
 800bdea:	d50a      	bpl.n	800be02 <_printf_i+0xce>
 800bdec:	680e      	ldr	r6, [r1, #0]
 800bdee:	602b      	str	r3, [r5, #0]
 800bdf0:	2e00      	cmp	r6, #0
 800bdf2:	da03      	bge.n	800bdfc <_printf_i+0xc8>
 800bdf4:	232d      	movs	r3, #45	; 0x2d
 800bdf6:	4276      	negs	r6, r6
 800bdf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdfc:	485e      	ldr	r0, [pc, #376]	; (800bf78 <_printf_i+0x244>)
 800bdfe:	230a      	movs	r3, #10
 800be00:	e019      	b.n	800be36 <_printf_i+0x102>
 800be02:	680e      	ldr	r6, [r1, #0]
 800be04:	602b      	str	r3, [r5, #0]
 800be06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be0a:	bf18      	it	ne
 800be0c:	b236      	sxthne	r6, r6
 800be0e:	e7ef      	b.n	800bdf0 <_printf_i+0xbc>
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	6820      	ldr	r0, [r4, #0]
 800be14:	1d19      	adds	r1, r3, #4
 800be16:	6029      	str	r1, [r5, #0]
 800be18:	0601      	lsls	r1, r0, #24
 800be1a:	d501      	bpl.n	800be20 <_printf_i+0xec>
 800be1c:	681e      	ldr	r6, [r3, #0]
 800be1e:	e002      	b.n	800be26 <_printf_i+0xf2>
 800be20:	0646      	lsls	r6, r0, #25
 800be22:	d5fb      	bpl.n	800be1c <_printf_i+0xe8>
 800be24:	881e      	ldrh	r6, [r3, #0]
 800be26:	4854      	ldr	r0, [pc, #336]	; (800bf78 <_printf_i+0x244>)
 800be28:	2f6f      	cmp	r7, #111	; 0x6f
 800be2a:	bf0c      	ite	eq
 800be2c:	2308      	moveq	r3, #8
 800be2e:	230a      	movne	r3, #10
 800be30:	2100      	movs	r1, #0
 800be32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be36:	6865      	ldr	r5, [r4, #4]
 800be38:	60a5      	str	r5, [r4, #8]
 800be3a:	2d00      	cmp	r5, #0
 800be3c:	bfa2      	ittt	ge
 800be3e:	6821      	ldrge	r1, [r4, #0]
 800be40:	f021 0104 	bicge.w	r1, r1, #4
 800be44:	6021      	strge	r1, [r4, #0]
 800be46:	b90e      	cbnz	r6, 800be4c <_printf_i+0x118>
 800be48:	2d00      	cmp	r5, #0
 800be4a:	d04d      	beq.n	800bee8 <_printf_i+0x1b4>
 800be4c:	4615      	mov	r5, r2
 800be4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800be52:	fb03 6711 	mls	r7, r3, r1, r6
 800be56:	5dc7      	ldrb	r7, [r0, r7]
 800be58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be5c:	4637      	mov	r7, r6
 800be5e:	42bb      	cmp	r3, r7
 800be60:	460e      	mov	r6, r1
 800be62:	d9f4      	bls.n	800be4e <_printf_i+0x11a>
 800be64:	2b08      	cmp	r3, #8
 800be66:	d10b      	bne.n	800be80 <_printf_i+0x14c>
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	07de      	lsls	r6, r3, #31
 800be6c:	d508      	bpl.n	800be80 <_printf_i+0x14c>
 800be6e:	6923      	ldr	r3, [r4, #16]
 800be70:	6861      	ldr	r1, [r4, #4]
 800be72:	4299      	cmp	r1, r3
 800be74:	bfde      	ittt	le
 800be76:	2330      	movle	r3, #48	; 0x30
 800be78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800be80:	1b52      	subs	r2, r2, r5
 800be82:	6122      	str	r2, [r4, #16]
 800be84:	f8cd a000 	str.w	sl, [sp]
 800be88:	464b      	mov	r3, r9
 800be8a:	aa03      	add	r2, sp, #12
 800be8c:	4621      	mov	r1, r4
 800be8e:	4640      	mov	r0, r8
 800be90:	f7ff fee2 	bl	800bc58 <_printf_common>
 800be94:	3001      	adds	r0, #1
 800be96:	d14c      	bne.n	800bf32 <_printf_i+0x1fe>
 800be98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be9c:	b004      	add	sp, #16
 800be9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bea2:	4835      	ldr	r0, [pc, #212]	; (800bf78 <_printf_i+0x244>)
 800bea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bea8:	6829      	ldr	r1, [r5, #0]
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	f851 6b04 	ldr.w	r6, [r1], #4
 800beb0:	6029      	str	r1, [r5, #0]
 800beb2:	061d      	lsls	r5, r3, #24
 800beb4:	d514      	bpl.n	800bee0 <_printf_i+0x1ac>
 800beb6:	07df      	lsls	r7, r3, #31
 800beb8:	bf44      	itt	mi
 800beba:	f043 0320 	orrmi.w	r3, r3, #32
 800bebe:	6023      	strmi	r3, [r4, #0]
 800bec0:	b91e      	cbnz	r6, 800beca <_printf_i+0x196>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	f023 0320 	bic.w	r3, r3, #32
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	2310      	movs	r3, #16
 800becc:	e7b0      	b.n	800be30 <_printf_i+0xfc>
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	f043 0320 	orr.w	r3, r3, #32
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	2378      	movs	r3, #120	; 0x78
 800bed8:	4828      	ldr	r0, [pc, #160]	; (800bf7c <_printf_i+0x248>)
 800beda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bede:	e7e3      	b.n	800bea8 <_printf_i+0x174>
 800bee0:	0659      	lsls	r1, r3, #25
 800bee2:	bf48      	it	mi
 800bee4:	b2b6      	uxthmi	r6, r6
 800bee6:	e7e6      	b.n	800beb6 <_printf_i+0x182>
 800bee8:	4615      	mov	r5, r2
 800beea:	e7bb      	b.n	800be64 <_printf_i+0x130>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	6826      	ldr	r6, [r4, #0]
 800bef0:	6961      	ldr	r1, [r4, #20]
 800bef2:	1d18      	adds	r0, r3, #4
 800bef4:	6028      	str	r0, [r5, #0]
 800bef6:	0635      	lsls	r5, r6, #24
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	d501      	bpl.n	800bf00 <_printf_i+0x1cc>
 800befc:	6019      	str	r1, [r3, #0]
 800befe:	e002      	b.n	800bf06 <_printf_i+0x1d2>
 800bf00:	0670      	lsls	r0, r6, #25
 800bf02:	d5fb      	bpl.n	800befc <_printf_i+0x1c8>
 800bf04:	8019      	strh	r1, [r3, #0]
 800bf06:	2300      	movs	r3, #0
 800bf08:	6123      	str	r3, [r4, #16]
 800bf0a:	4615      	mov	r5, r2
 800bf0c:	e7ba      	b.n	800be84 <_printf_i+0x150>
 800bf0e:	682b      	ldr	r3, [r5, #0]
 800bf10:	1d1a      	adds	r2, r3, #4
 800bf12:	602a      	str	r2, [r5, #0]
 800bf14:	681d      	ldr	r5, [r3, #0]
 800bf16:	6862      	ldr	r2, [r4, #4]
 800bf18:	2100      	movs	r1, #0
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f7f4 f958 	bl	80001d0 <memchr>
 800bf20:	b108      	cbz	r0, 800bf26 <_printf_i+0x1f2>
 800bf22:	1b40      	subs	r0, r0, r5
 800bf24:	6060      	str	r0, [r4, #4]
 800bf26:	6863      	ldr	r3, [r4, #4]
 800bf28:	6123      	str	r3, [r4, #16]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf30:	e7a8      	b.n	800be84 <_printf_i+0x150>
 800bf32:	6923      	ldr	r3, [r4, #16]
 800bf34:	462a      	mov	r2, r5
 800bf36:	4649      	mov	r1, r9
 800bf38:	4640      	mov	r0, r8
 800bf3a:	47d0      	blx	sl
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d0ab      	beq.n	800be98 <_printf_i+0x164>
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	079b      	lsls	r3, r3, #30
 800bf44:	d413      	bmi.n	800bf6e <_printf_i+0x23a>
 800bf46:	68e0      	ldr	r0, [r4, #12]
 800bf48:	9b03      	ldr	r3, [sp, #12]
 800bf4a:	4298      	cmp	r0, r3
 800bf4c:	bfb8      	it	lt
 800bf4e:	4618      	movlt	r0, r3
 800bf50:	e7a4      	b.n	800be9c <_printf_i+0x168>
 800bf52:	2301      	movs	r3, #1
 800bf54:	4632      	mov	r2, r6
 800bf56:	4649      	mov	r1, r9
 800bf58:	4640      	mov	r0, r8
 800bf5a:	47d0      	blx	sl
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	d09b      	beq.n	800be98 <_printf_i+0x164>
 800bf60:	3501      	adds	r5, #1
 800bf62:	68e3      	ldr	r3, [r4, #12]
 800bf64:	9903      	ldr	r1, [sp, #12]
 800bf66:	1a5b      	subs	r3, r3, r1
 800bf68:	42ab      	cmp	r3, r5
 800bf6a:	dcf2      	bgt.n	800bf52 <_printf_i+0x21e>
 800bf6c:	e7eb      	b.n	800bf46 <_printf_i+0x212>
 800bf6e:	2500      	movs	r5, #0
 800bf70:	f104 0619 	add.w	r6, r4, #25
 800bf74:	e7f5      	b.n	800bf62 <_printf_i+0x22e>
 800bf76:	bf00      	nop
 800bf78:	0800c3ed 	.word	0x0800c3ed
 800bf7c:	0800c3fe 	.word	0x0800c3fe

0800bf80 <__retarget_lock_acquire_recursive>:
 800bf80:	4770      	bx	lr

0800bf82 <__retarget_lock_release_recursive>:
 800bf82:	4770      	bx	lr

0800bf84 <memmove>:
 800bf84:	4288      	cmp	r0, r1
 800bf86:	b510      	push	{r4, lr}
 800bf88:	eb01 0402 	add.w	r4, r1, r2
 800bf8c:	d902      	bls.n	800bf94 <memmove+0x10>
 800bf8e:	4284      	cmp	r4, r0
 800bf90:	4623      	mov	r3, r4
 800bf92:	d807      	bhi.n	800bfa4 <memmove+0x20>
 800bf94:	1e43      	subs	r3, r0, #1
 800bf96:	42a1      	cmp	r1, r4
 800bf98:	d008      	beq.n	800bfac <memmove+0x28>
 800bf9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfa2:	e7f8      	b.n	800bf96 <memmove+0x12>
 800bfa4:	4402      	add	r2, r0
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	428a      	cmp	r2, r1
 800bfaa:	d100      	bne.n	800bfae <memmove+0x2a>
 800bfac:	bd10      	pop	{r4, pc}
 800bfae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfb6:	e7f7      	b.n	800bfa8 <memmove+0x24>

0800bfb8 <_realloc_r>:
 800bfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbc:	4680      	mov	r8, r0
 800bfbe:	4614      	mov	r4, r2
 800bfc0:	460e      	mov	r6, r1
 800bfc2:	b921      	cbnz	r1, 800bfce <_realloc_r+0x16>
 800bfc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc8:	4611      	mov	r1, r2
 800bfca:	f7ff bc39 	b.w	800b840 <_malloc_r>
 800bfce:	b92a      	cbnz	r2, 800bfdc <_realloc_r+0x24>
 800bfd0:	f7ff fbca 	bl	800b768 <_free_r>
 800bfd4:	4625      	mov	r5, r4
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfdc:	f000 f81b 	bl	800c016 <_malloc_usable_size_r>
 800bfe0:	4284      	cmp	r4, r0
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	d802      	bhi.n	800bfec <_realloc_r+0x34>
 800bfe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfea:	d812      	bhi.n	800c012 <_realloc_r+0x5a>
 800bfec:	4621      	mov	r1, r4
 800bfee:	4640      	mov	r0, r8
 800bff0:	f7ff fc26 	bl	800b840 <_malloc_r>
 800bff4:	4605      	mov	r5, r0
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d0ed      	beq.n	800bfd6 <_realloc_r+0x1e>
 800bffa:	42bc      	cmp	r4, r7
 800bffc:	4622      	mov	r2, r4
 800bffe:	4631      	mov	r1, r6
 800c000:	bf28      	it	cs
 800c002:	463a      	movcs	r2, r7
 800c004:	f7ff fb9a 	bl	800b73c <memcpy>
 800c008:	4631      	mov	r1, r6
 800c00a:	4640      	mov	r0, r8
 800c00c:	f7ff fbac 	bl	800b768 <_free_r>
 800c010:	e7e1      	b.n	800bfd6 <_realloc_r+0x1e>
 800c012:	4635      	mov	r5, r6
 800c014:	e7df      	b.n	800bfd6 <_realloc_r+0x1e>

0800c016 <_malloc_usable_size_r>:
 800c016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c01a:	1f18      	subs	r0, r3, #4
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bfbc      	itt	lt
 800c020:	580b      	ldrlt	r3, [r1, r0]
 800c022:	18c0      	addlt	r0, r0, r3
 800c024:	4770      	bx	lr
	...

0800c028 <_init>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	bf00      	nop
 800c02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02e:	bc08      	pop	{r3}
 800c030:	469e      	mov	lr, r3
 800c032:	4770      	bx	lr

0800c034 <_fini>:
 800c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c036:	bf00      	nop
 800c038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c03a:	bc08      	pop	{r3}
 800c03c:	469e      	mov	lr, r3
 800c03e:	4770      	bx	lr
